{"mappings":"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ACXC,SAAU,WACVC,UAAW,YACXC,QAAS,YAIAC,EAAoB,CAC/BC,cAAe,IACfC,cAAe,IACfC,eAAgB,IAChBC,mBAAoB,IACpBC,2BAA4B,KAGjBC,EAAkB,CAC7Bj4D,cAAe,gBACfC,qBAAsB,SACtBi4D,iBAAkB,mBAClBC,WAAY,aACZC,iBAAkB,mBAClBxB,eAAgB,iBAChByB,YAAa,cACbC,0BAA2B,4BAC3Bx2H,aAAc,eACd60H,OAAQ,SACR4B,KAAM,OACNC,SAAU,WACVC,kBAAmB,oBACnBC,cAAe,gBACfC,oBAAqB,sBACrBC,mBAAoB,QACpBC,MAAO,QACP34D,WAAY,aACZ44D,uBAAwB,yBACxBC,iBAAkB,mBAClBC,UAAW,YACXC,gBAAiB,kBACjBC,aAAc,gBAGHC,EAAW,GACXC,EAAU,IAGVC,EAAoB,IAEpBC,EAAmB,OACnBC,EAAmB,WAEnBC,EAA2B,SAE3BC,EAA2B,uNAE3BC,EAAuC,CAClD,8BACA,gBACA,iBACA,eACA,OACA,aACA,cACA,oBACA,aACA,yBACA,YACA,kBACA,kBACA,gCACA,eACA,gBACA,sBACA,mBACA,mBACA,cACA,gBACA,OACA,gBACA,SACA,OACA,qBACA,mBACA,4BACA,eACA,qBACA,mBACA,+BACA,sBACA,mBACA,oBACA,aACA,gCACA,wBACA,gBACA,oBACA,WACA,oBACA,gBACA,sBACA,mBACA,+BACA,4BACA,oBACA,sBACA,0BACA,0BACA,kCACA,gCACA,8BACA,gCACA,6BACA,6BACA,2BACA,wBACA,yBACA,0BACA,4BACA,iBACA,iCACA,qBACA,gCACA,wBACA,6BACA,sCACA,4BACA,6BACA,6BACA,6BACA,wBACA,oBACA,0BACA,sBACA,gBACA,kBACA,kBACA,yBACA,6BACA,0BACA,8BACA,gBACA,0BACA,uBACA,gCACA,4BACA,kCACA,iBACA,6BACA,eACA,uBAGWC,EAA2C,CACtD,OACA,aACA,OACA,OACA,OACA,OACA,OACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,UACA,SACA,SACA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","sources":["node_modules/@azure/msal-browser/src/app/PublicClientApplication.ts","node_modules/@azure/msal-browser/src/utils/BrowserConstants.ts","node_modules/@azure/msal-common/src/client/AuthorizationCodeClient.ts","node_modules/@azure/msal-common/src/client/BaseClient.ts","node_modules/@azure/msal-common/src/config/ClientConfiguration.ts","node_modules/@azure/msal-common/src/crypto/ICrypto.ts","node_modules/@azure/msal-common/src/error/AuthError.ts","node_modules/@azure/msal-common/src/utils/Constants.ts","node_modules/@azure/msal-common/src/logger/Logger.ts","node_modules/@azure/msal-common/src/utils/StringUtils.ts","node_modules/@azure/msal-common/src/error/ClientAuthError.ts","node_modules/@azure/msal-common/src/packageMetadata.ts","node_modules/@azure/msal-common/src/authority/AuthorityOptions.ts","node_modules/@azure/msal-common/src/cache/CacheManager.ts","node_modules/@azure/msal-common/src/cache/entities/CredentialEntity.ts","node_modules/@azure/msal-common/src/request/ScopeSet.ts","node_modules/@azure/msal-common/src/error/ClientConfigurationError.ts","node_modules/@azure/msal-common/src/cache/entities/AccountEntity.ts","node_modules/@azure/msal-common/src/account/ClientInfo.ts","node_modules/@azure/msal-common/src/authority/AuthorityType.ts","node_modules/@azure/msal-common/src/account/AuthToken.ts","node_modules/@azure/msal-common/src/network/NetworkManager.ts","node_modules/@azure/msal-common/src/network/ThrottlingUtils.ts","node_modules/@azure/msal-common/src/error/ServerError.ts","node_modules/@azure/msal-common/src/account/CcsCredential.ts","node_modules/@azure/msal-common/src/request/RequestParameterBuilder.ts","node_modules/@azure/msal-common/src/request/RequestValidator.ts","node_modules/@azure/msal-common/src/response/ResponseHandler.ts","node_modules/@azure/msal-common/src/cache/entities/IdTokenEntity.ts","node_modules/@azure/msal-common/src/cache/entities/AccessTokenEntity.ts","node_modules/@azure/msal-common/src/utils/TimeUtils.ts","node_modules/@azure/msal-common/src/cache/entities/RefreshTokenEntity.ts","node_modules/@azure/msal-common/src/error/InteractionRequiredAuthError.ts","node_modules/@azure/msal-common/src/cache/entities/CacheRecord.ts","node_modules/@azure/msal-common/src/utils/ProtocolUtils.ts","node_modules/@azure/msal-common/src/crypto/PopTokenGenerator.ts","node_modules/@azure/msal-common/src/url/UrlString.ts","node_modules/@azure/msal-common/src/cache/entities/AppMetadataEntity.ts","node_modules/@azure/msal-common/src/cache/persistence/TokenCacheContext.ts","node_modules/@azure/msal-common/src/client/RefreshTokenClient.ts","node_modules/@azure/msal-common/src/client/SilentFlowClient.ts","node_modules/@azure/msal-common/src/authority/Authority.ts","node_modules/@azure/msal-common/src/authority/ProtocolMode.ts","node_modules/@azure/msal-common/src/cache/entities/AuthorityMetadataEntity.ts","node_modules/@azure/msal-common/src/authority/RegionDiscovery.ts","node_modules/@azure/msal-common/src/authority/AuthorityFactory.ts","node_modules/@azure/msal-common/src/cache/entities/ServerTelemetryEntity.ts","node_modules/@azure/msal-common/src/cache/entities/ThrottlingEntity.ts","node_modules/@azure/msal-common/src/network/INetworkModule.ts","node_modules/@azure/msal-common/src/telemetry/server/ServerTelemetryManager.ts","node_modules/@azure/msal-browser/src/app/ClientApplication.ts","node_modules/@azure/msal-browser/src/crypto/CryptoOps.ts","node_modules/@azure/msal-browser/src/crypto/GuidGenerator.ts","node_modules/@azure/msal-browser/src/utils/MathUtils.ts","node_modules/@azure/msal-browser/src/encode/Base64Encode.ts","node_modules/@azure/msal-browser/src/utils/BrowserStringUtils.ts","node_modules/@azure/msal-browser/src/encode/Base64Decode.ts","node_modules/@azure/msal-browser/src/crypto/PkceGenerator.ts","node_modules/@azure/msal-browser/src/error/BrowserAuthError.ts","node_modules/@azure/msal-browser/src/crypto/BrowserCrypto.ts","node_modules/@azure/msal-browser/src/cache/AsyncMemoryStorage.ts","node_modules/@azure/msal-browser/src/cache/DatabaseStorage.ts","node_modules/@azure/msal-browser/src/cache/MemoryStorage.ts","node_modules/@azure/msal-browser/src/cache/BrowserCacheManager.ts","node_modules/@azure/msal-browser/src/cache/BrowserStorage.ts","node_modules/@azure/msal-browser/src/error/BrowserConfigurationAuthError.ts","node_modules/@azure/msal-browser/src/utils/BrowserProtocolUtils.ts","node_modules/@azure/msal-browser/src/config/Configuration.ts","node_modules/@azure/msal-browser/src/utils/BrowserUtils.ts","node_modules/@azure/msal-browser/src/network/FetchClient.ts","node_modules/@azure/msal-browser/src/network/XhrClient.ts","node_modules/@azure/msal-browser/src/navigation/NavigationClient.ts","node_modules/@azure/msal-browser/src/packageMetadata.ts","node_modules/@azure/msal-browser/src/event/EventType.ts","node_modules/@azure/msal-browser/src/event/EventHandler.ts","node_modules/@azure/msal-browser/src/interaction_client/PopupClient.ts","node_modules/@azure/msal-browser/src/interaction_client/StandardInteractionClient.ts","node_modules/@azure/msal-browser/src/interaction_client/BaseInteractionClient.ts","node_modules/@azure/msal-browser/src/utils/PopupUtils.ts","node_modules/@azure/msal-browser/src/interaction_handler/PopupHandler.ts","node_modules/@azure/msal-browser/src/interaction_handler/InteractionHandler.ts","node_modules/@azure/msal-browser/src/interaction_client/RedirectClient.ts","node_modules/@azure/msal-browser/src/interaction_handler/RedirectHandler.ts","node_modules/@azure/msal-browser/src/interaction_client/SilentIframeClient.ts","node_modules/@azure/msal-browser/src/interaction_handler/SilentHandler.ts","node_modules/@azure/msal-browser/src/interaction_client/SilentRefreshClient.ts","node_modules/@azure/msal-browser/src/cache/TokenCache.ts","node_modules/@azure/msal-browser/src/interaction_client/SilentAuthCodeClient.ts","node_modules/@azure/msal-browser/src/interaction_client/HybridSpaAuthorizationCodeClient.ts","node_modules/@azure/msal-browser/src/interaction_client/SilentCacheClient.ts","node_modules/@azure/storage-blob/src/BlobServiceClient.ts","node_modules/tslib/tslib.es6.js","node_modules/@azure/core-asynciterator-polyfill/src/index.ts","node_modules/@azure/core-http/src/webResource.ts","node_modules/@azure/core-http/src/httpHeaders.ts","node_modules/@azure/core-http/src/serializer.ts","node_modules/@azure/core-http/src/util/base64.browser.ts","node_modules/@azure/core-http/src/util/utils.ts","node_modules/@azure/core-http/src/util/constants.ts","node_modules/@azure/core-http/src/util/serializer.common.ts","node_modules/uuid/dist/esm-browser/v4.js","node_modules/uuid/dist/esm-browser/rng.js","node_modules/uuid/dist/esm-browser/stringify.js","node_modules/uuid/dist/esm-browser/validate.js","node_modules/uuid/dist/esm-browser/regex.js","node_modules/process/browser.js","node_modules/@azure/core-http/src/xhrHttpClient.ts","node_modules/@azure/abort-controller/src/AbortController.ts","node_modules/@azure/abort-controller/src/AbortSignal.ts","node_modules/@azure/core-http/src/restError.ts","node_modules/@azure/core-http/src/util/sanitizer.ts","node_modules/@azure/core-http/src/url.ts","node_modules/@azure/core-http/src/util/url.browser.ts","node_modules/@azure/core-http/src/util/inspect.browser.ts","node_modules/@azure/core-http/src/operationOptions.ts","node_modules/@azure/core-http/src/serviceClient.ts","node_modules/@azure/core-http/src/policies/deserializationPolicy.ts","node_modules/@azure/core-http/src/policies/requestPolicy.ts","node_modules/@azure/core-http/src/httpPipelineLogLevel.ts","node_modules/@azure/core-http/src/util/xml.browser.ts","node_modules/@azure/core-http/src/policies/keepAlivePolicy.ts","node_modules/@azure/core-http/src/policies/redirectPolicy.ts","node_modules/@azure/core-http/src/policies/exponentialRetryPolicy.ts","node_modules/@azure/core-http/src/util/exponentialBackoffStrategy.ts","node_modules/@azure/core-http/src/util/delay.ts","node_modules/@azure/core-http/src/util/typeguards.ts","node_modules/@azure/core-http/src/log.ts","node_modules/@azure/logger/src/index.ts","node_modules/@azure/logger/src/debug.ts","node_modules/@azure/logger/src/log.browser.ts","node_modules/@azure/core-http/src/policies/logPolicy.ts","node_modules/@azure/core-http/src/operationParameter.ts","node_modules/@azure/core-http/src/operationSpec.ts","node_modules/@azure/core-auth/src/tokenCredential.ts","node_modules/@azure/core-http/src/policies/userAgentPolicy.ts","node_modules/@azure/core-http/src/policies/msRestUserAgentPolicy.browser.ts","node_modules/@azure/core-http/src/queryCollectionFormat.ts","node_modules/@azure/core-http/src/policies/bearerTokenAuthenticationPolicy.ts","node_modules/@azure/core-http/src/policies/disableResponseDecompressionPolicy.browser.ts","node_modules/@azure/core-http/src/policies/generateClientRequestIdPolicy.ts","node_modules/@azure/core-http/src/httpClientCache.ts","node_modules/@azure/core-http/src/policies/ndJsonPolicy.ts","node_modules/@azure/core-http/src/policies/proxyPolicy.browser.ts","node_modules/@azure/core-http/src/policies/rpRegistrationPolicy.ts","node_modules/@azure/core-http/src/policies/signingPolicy.ts","node_modules/@azure/core-http/src/policies/systemErrorRetryPolicy.ts","node_modules/@azure/core-http/src/policies/throttlingRetryPolicy.ts","node_modules/@azure/core-http/src/util/throttlingRetryStrategy.ts","node_modules/@azure/core-http/src/policies/tracingPolicy.ts","node_modules/@azure/core-tracing/src/createSpan.ts","node_modules/@azure/core-tracing/src/interfaces.ts","node_modules/@opentelemetry/api/src/index.ts","node_modules/@opentelemetry/api/src/api/context.ts","node_modules/@opentelemetry/api/src/context/NoopContextManager.ts","node_modules/@opentelemetry/api/src/context/context.ts","node_modules/@opentelemetry/api/src/internal/global-utils.ts","node_modules/@opentelemetry/api/src/platform/browser/globalThis.ts","node_modules/@opentelemetry/api/src/version.ts","node_modules/@opentelemetry/api/src/internal/semver.ts","node_modules/@opentelemetry/api/src/api/diag.ts","node_modules/@opentelemetry/api/src/diag/ComponentLogger.ts","node_modules/@opentelemetry/api/src/diag/internal/logLevelLogger.ts","node_modules/@opentelemetry/api/src/diag/types.ts","node_modules/@opentelemetry/api/src/api/trace.ts","node_modules/@opentelemetry/api/src/trace/ProxyTracerProvider.ts","node_modules/@opentelemetry/api/src/trace/ProxyTracer.ts","node_modules/@opentelemetry/api/src/trace/NoopTracer.ts","node_modules/@opentelemetry/api/src/trace/context-utils.ts","node_modules/@opentelemetry/api/src/trace/NonRecordingSpan.ts","node_modules/@opentelemetry/api/src/trace/invalid-span-constants.ts","node_modules/@opentelemetry/api/src/trace/trace_flags.ts","node_modules/@opentelemetry/api/src/trace/spancontext-utils.ts","node_modules/@opentelemetry/api/src/trace/NoopTracerProvider.ts","node_modules/@opentelemetry/api/src/api/propagation.ts","node_modules/@opentelemetry/api/src/propagation/NoopTextMapPropagator.ts","node_modules/@opentelemetry/api/src/propagation/TextMapPropagator.ts","node_modules/@opentelemetry/api/src/baggage/context-helpers.ts","node_modules/@opentelemetry/api/src/baggage/utils.ts","node_modules/@opentelemetry/api/src/baggage/internal/baggage-impl.ts","node_modules/@opentelemetry/api/src/baggage/internal/symbol.ts","node_modules/@opentelemetry/api/src/trace/SamplingResult.ts","node_modules/@opentelemetry/api/src/trace/span_kind.ts","node_modules/@opentelemetry/api/src/trace/status.ts","node_modules/@opentelemetry/api/src/trace/internal/tracestate-impl.ts","node_modules/@opentelemetry/api/src/trace/internal/tracestate-validators.ts","node_modules/@azure/core-tracing/src/utils/traceParentHeader.ts","node_modules/@azure/storage-blob/src/generated/src/operations/service.ts","node_modules/@azure/storage-blob/src/generated/src/models/mappers.ts","node_modules/@azure/storage-blob/src/generated/src/models/parameters.ts","node_modules/@azure/storage-blob/src/generated/src/operations/container.ts","node_modules/@azure/storage-blob/src/generated/src/operations/blob.ts","node_modules/@azure/storage-blob/src/generated/src/operations/pageBlob.ts","node_modules/@azure/storage-blob/src/generated/src/operations/appendBlob.ts","node_modules/@azure/storage-blob/src/generated/src/operations/blockBlob.ts","node_modules/@azure/storage-blob/src/Pipeline.ts","node_modules/@azure/storage-blob/src/log.ts","node_modules/@azure/storage-blob/src/StorageBrowserPolicyFactory.ts","node_modules/@azure/storage-blob/src/policies/StorageBrowserPolicy.ts","node_modules/@azure/storage-blob/src/utils/constants.ts","node_modules/@azure/storage-blob/src/utils/utils.common.ts","node_modules/buffer/index.js","node_modules/base64-js/index.js","node_modules/ieee754/index.js","node_modules/@azure/storage-blob/src/StorageRetryPolicyFactory.ts","node_modules/@azure/storage-blob/src/policies/StorageRetryPolicy.ts","node_modules/@azure/storage-blob/src/credentials/AnonymousCredential.ts","node_modules/@azure/storage-blob/src/policies/AnonymousCredentialPolicy.ts","node_modules/@azure/storage-blob/src/policies/CredentialPolicy.ts","node_modules/@azure/storage-blob/src/credentials/Credential.ts","node_modules/@azure/storage-blob/src/TelemetryPolicyFactory.ts","node_modules/@azure/storage-blob/src/policies/TelemetryPolicy.ts","node_modules/@azure/storage-blob/src/utils/cache.ts","node_modules/@azure/storage-blob/src/policies/StorageBearerTokenChallengeAuthenticationPolicy.ts","node_modules/@azure/storage-blob/src/ContainerClient.ts","node_modules/@azure/storage-blob/src/credentials/StorageSharedKeyCredential.browser.ts","node_modules/@azure/storage-blob/src/StorageClient.ts","node_modules/@azure/storage-blob/src/generated/src/storageClientContext.ts","node_modules/@azure/storage-blob/src/utils/tracing.ts","node_modules/@azure/storage-blob/src/sas/BlobSASSignatureValues.ts","node_modules/@azure/storage-blob/src/sas/BlobSASPermissions.ts","node_modules/@azure/storage-blob/src/sas/ContainerSASPermissions.ts","node_modules/@azure/storage-blob/src/credentials/UserDelegationKeyCredential.browser.ts","node_modules/@azure/storage-blob/src/sas/SasIPRange.ts","node_modules/@azure/storage-blob/src/sas/SASQueryParameters.ts","node_modules/@azure/storage-blob/src/BlobLeaseClient.ts","node_modules/@azure/storage-blob/src/Clients.ts","node_modules/@azure/storage-blob/src/BlobDownloadResponse.browser.ts","node_modules/@azure/storage-blob/src/BlobQueryResponse.browser.ts","node_modules/@azure/storage-blob/src/models.ts","node_modules/@azure/storage-blob/src/PageBlobRangeResponse.ts","node_modules/@azure/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.ts","node_modules/@azure/core-lro/src/poller.ts","node_modules/@azure/storage-blob/src/Range.ts","node_modules/@azure/storage-blob/src/utils/Batch.ts","node_modules/events/events.js","node_modules/@azure/storage-common/src/BufferScheduler.browser.ts","node_modules/@azure/storage-blob/src/utils/utils.browser.ts","node_modules/@azure/storage-blob/src/BlobBatchClient.ts","node_modules/@azure/storage-blob/src/BatchResponseParser.ts","node_modules/@azure/storage-blob/src/BatchUtils.browser.ts","node_modules/@azure/storage-blob/src/BlobBatch.ts","node_modules/@azure/storage-blob/src/utils/Mutex.ts","node_modules/@azure/storage-blob/src/sas/AccountSASPermissions.ts","node_modules/@azure/storage-blob/src/sas/AccountSASSignatureValues.ts","node_modules/@azure/storage-blob/src/sas/AccountSASResourceTypes.ts","node_modules/@azure/storage-blob/src/sas/AccountSASServices.ts","db.json"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountInfo, AuthenticationResult, RequestThumbprint } from \"@azure/msal-common\";\nimport { Configuration } from \"../config/Configuration\";\nimport { DEFAULT_REQUEST, InteractionType } from \"../utils/BrowserConstants\";\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { ClientApplication } from \"./ClientApplication\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { EventType } from \"../event/EventType\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { SilentCacheClient } from \"../interaction_client/SilentCacheClient\";\n\n/**\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\n */\nexport class PublicClientApplication extends ClientApplication implements IPublicClientApplication {\n\n    // Active requests\n    private activeSilentTokenRequests: Map<string, Promise<AuthenticationResult>>;\n\n    /**\n     * @constructor\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\n     *\n     * Important attributes in the Configuration object for auth are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\n     * - authority: the authority URL for your application.\n     * - redirect_uri: the uri of your application registered in the portal.\n     *\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\n     * Full B2C functionality will be available in this library in future versions.\n     *\n     * @param configuration object for the MSAL PublicClientApplication instance\n     */\n    constructor(configuration: Configuration) {\n        super(configuration);\n\n        this.activeSilentTokenRequests = new Map();\n    }\n\n    /**\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\n     * any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    async loginRedirect(request?: RedirectRequest): Promise<void> {\n        this.logger.verbose(\"loginRedirect called\");\n        return this.acquireTokenRedirect(request || DEFAULT_REQUEST);\n    }\n\n    /**\n     * Use when initiating the login process via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult> {\n        this.logger.verbose(\"loginPopup called\");\n        return this.acquireTokenPopup(request || DEFAULT_REQUEST);\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\n     *\n     * @param {@link (SilentRequest:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\n     */\n    async acquireTokenSilent(request: SilentRequest): Promise<AuthenticationResult> {\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", request.correlationId);\n        const account = request.account || this.getActiveAccount();\n        if (!account) {\n            throw BrowserAuthError.createNoAccountError();\n        }\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.auth.clientId,\n            authority: request.authority || \"\",\n            scopes: request.scopes,\n            homeAccountIdentifier: account.homeAccountId,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        const silentRequestKey = JSON.stringify(thumbprint);\n        const cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n        if (typeof cachedResponse === \"undefined\") {\n            this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", request.correlationId);\n            const response = this.acquireTokenSilentAsync(request, account)\n                .then((result) => {\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\n                    return result;\n                })\n                .catch((error) => {\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\n                    throw error;\n                });\n            this.activeSilentTokenRequests.set(silentRequestKey, response);\n            return response;\n        } else {\n            this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", request.correlationId);\n            return cachedResponse;\n        }\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\n     * @param {@link (SilentRequest:type)}\n     * @param {@link (AccountInfo:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} \n     */\n    protected async acquireTokenSilentAsync(request: SilentRequest, account: AccountInfo): Promise<AuthenticationResult>{\n        const silentCacheClient = new SilentCacheClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, request.correlationId);\n        const silentRequest = await silentCacheClient.initializeSilentRequest(request, account);\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n\n        return silentCacheClient.acquireToken(silentRequest).catch(async () => {\n            try {\n                const tokenRenewalResult = await this.acquireTokenByRefreshToken(silentRequest);\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, tokenRenewalResult);\n                return tokenRenewalResult;\n            } catch (tokenRenewalError) {\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\n                throw tokenRenewalError;\n            }\n        });\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { OIDC_DEFAULT_SCOPES } from \"@azure/msal-common\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\n\n/**\n * Constants\n */\nexport const BrowserConstants = {\n    /**\n     * Interaction in progress cache value\n     */\n    INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n    /**\n     * Invalid grant error code\n     */\n    INVALID_GRANT_ERROR: \"invalid_grant\",\n    /**\n     * Default popup window width\n     */\n    POPUP_WIDTH: 483,\n    /**\n     * Default popup window height\n     */\n    POPUP_HEIGHT: 600,\n    /**\n     * Name of the popup window starts with\n     */\n    POPUP_NAME_PREFIX: \"msal\",\n    /**\n     * Default popup monitor poll interval in milliseconds\n     */\n    POLL_INTERVAL_MS: 50,\n    /**\n     * Msal-browser SKU\n     */\n    MSAL_SKU: \"msal.js.browser\",\n};\n\nexport enum BrowserCacheLocation {\n    LocalStorage = \"localStorage\",\n    SessionStorage = \"sessionStorage\",\n    MemoryStorage = \"memoryStorage\"\n}\n\n/**\n * HTTP Request types supported by MSAL.\n */\nexport enum HTTP_REQUEST_TYPE {\n    GET = \"GET\",\n    POST = \"POST\"\n}\n\n/**\n * Temporary cache keys for MSAL, deleted after any request.\n */\nexport enum TemporaryCacheKeys {\n    AUTHORITY = \"authority\",\n    ACQUIRE_TOKEN_ACCOUNT = \"acquireToken.account\",\n    SESSION_STATE = \"session.state\",\n    REQUEST_STATE = \"request.state\",\n    NONCE_IDTOKEN = \"nonce.id_token\",\n    ORIGIN_URI = \"request.origin\",\n    RENEW_STATUS = \"token.renew.status\",\n    URL_HASH = \"urlHash\",\n    REQUEST_PARAMS = \"request.params\",\n    SCOPES = \"scopes\",\n    INTERACTION_STATUS_KEY = \"interaction.status\",\n    CCS_CREDENTIAL = \"ccs.credential\",\n    CORRELATION_ID = \"request.correlationId\"\n}\n\n/**\n * Cache keys stored in-memory\n */\nexport enum InMemoryCacheKeys {\n    WRAPPER_SKU = \"wrapper.sku\",\n    WRAPPER_VER = \"wrapper.version\"\n}\n\n/**\n * API Codes for Telemetry purposes. \n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\n * 0-99 Silent Flow\n * 800-899 Auth Code Flow\n */\nexport enum ApiId {\n    acquireTokenRedirect = 861,\n    acquireTokenPopup = 862,\n    ssoSilent = 863,\n    acquireTokenSilent_authCode = 864,\n    handleRedirectPromise = 865,\n    acquireTokenByCode = 866,\n    acquireTokenSilent_silentFlow = 61,\n    logout = 961,\n    logoutPopup = 962\n}\n\n/*\n * Interaction type of the API - used for state and telemetry\n */\nexport enum InteractionType {\n    Redirect = \"redirect\",\n    Popup = \"popup\",\n    Silent = \"silent\",\n    None = \"none\"\n}\n\n/**\n * Types of interaction currently in progress.\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\n */\nexport enum InteractionStatus {\n    /**\n     * Initial status before interaction occurs\n     */\n    Startup = \"startup\",\n    /**\n     * Status set when all login calls occuring\n     */\n    Login = \"login\",\n    /**\n     * Status set when logout call occuring\n     */ \n    Logout = \"logout\",\n    /**\n     * Status set for acquireToken calls\n     */\n    AcquireToken = \"acquireToken\",\n    /**\n     * Status set for ssoSilent calls\n     */\n    SsoSilent = \"ssoSilent\",\n    /**\n     * Status set when handleRedirect in progress\n     */\n    HandleRedirect = \"handleRedirect\",\n    /**\n     * Status set when interaction is complete\n     */\n    None = \"none\"\n}\n\nexport const DEFAULT_REQUEST: RedirectRequest|PopupRequest = {\n    scopes: OIDC_DEFAULT_SCOPES\n};\n\n/**\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\n */\nexport const KEY_FORMAT_JWK = \"jwk\";\n\n// Supported wrapper SKUs\nexport enum WrapperSKU {\n    React = \"@azure/msal-react\",\n    Angular = \"@azure/msal-angular\"\n}\n\n// DatabaseStorage Constants\nexport const DB_NAME = \"msal.db\";\nexport const DB_VERSION = 1;\nexport const DB_TABLE_NAME = `${DB_NAME}.keys`;\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonAuthorizationUrlRequest } from \"../request/CommonAuthorizationUrlRequest\";\nimport { CommonAuthorizationCodeRequest } from \"../request/CommonAuthorizationCodeRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType, AuthenticationScheme, PromptValue, Separators, AADServerParamKeys } from \"../utils/Constants\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { UrlString } from \"../url/UrlString\";\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\nimport { CommonEndSessionRequest } from \"../request/CommonEndSessionRequest\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { AuthorizationCodePayload } from \"../response/AuthorizationCodePayload\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { TokenClaims } from \"../account/TokenClaims\";\nimport { AccountInfo } from \"../account/AccountInfo\";\nimport { buildClientInfoFromHomeAccountId, buildClientInfo } from \"../account/ClientInfo\";\nimport { CcsCredentialType, CcsCredential } from \"../account/CcsCredential\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { RequestValidator } from \"../request/RequestValidator\";\n\n/**\n * Oauth2.0 Authorization Code client\n */\nexport class AuthorizationCodeClient extends BaseClient {\n    // Flag to indicate if client is for hybrid spa auth code redemption\n    protected includeRedirectUri: boolean = true;\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\n     * application. The URL target the /authorize endpoint of the authority configured in the\n     * application object.\n     *\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\n     * acquireToken(AuthorizationCodeRequest)\n     * @param request\n     */\n    async getAuthCodeUrl(request: CommonAuthorizationUrlRequest): Promise<string> {\n        const queryString = this.createAuthCodeUrlQueryString(request);\n\n        return UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\n    }\n\n    /**\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\n     * authorization_code_grant\n     * @param request\n     */\n    async acquireToken(request: CommonAuthorizationCodeRequest, authCodePayload?: AuthorizationCodePayload): Promise<AuthenticationResult> {\n        this.logger.info(\"in acquireToken call\");\n        if (!request || StringUtils.isEmpty(request.code)) {\n            throw ClientAuthError.createTokenRequestCannotBeMadeError();\n        }\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(this.authority, request);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        return await responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload);\n    }\n\n    /**\n     * Handles the hash fragment response from public client code request. Returns a code response used by\n     * the client to exchange for a token in acquireToken.\n     * @param hashFragment\n     */\n    handleFragmentResponse(hashFragment: string, cachedState: string): AuthorizationCodePayload {\n        // Handle responses.\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n\n        // Deserialize hash fragment response parameters.\n        const hashUrlString = new UrlString(hashFragment);\n        // Deserialize hash fragment response parameters.\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hashUrlString.getHash());\n\n        // Get code response\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n\n        // throw when there is no auth code in the response\n        if (!serverParams.code) {\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\n        }\n        return {\n            ...serverParams,\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n            code: serverParams.code\n        };\n    }\n\n    /**\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param authorityUri\n     */\n    getLogoutUri(logoutRequest: CommonEndSessionRequest): string {\n        // Throw error if logoutRequest is null/undefined\n        if (!logoutRequest) {\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\n        }\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\n\n        // Construct logout URI.\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n    }\n\n    /**\n     * Executes POST request to token endpoint\n     * @param authority\n     * @param request\n     */\n    private async executeTokenRequest(authority: Authority, request: CommonAuthorizationCodeRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const requestBody = await this.createTokenRequestBody(request);\n        const queryParameters = this.createTokenQueryParameters(request);\n        let ccsCredential: CcsCredential | undefined = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        }\n        const headers: Record<string, string> = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n        const endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : `${authority.tokenEndpoint}?${queryParameters}`;\n\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request \n     */\n    private createTokenQueryParameters(request: CommonAuthorizationCodeRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Generates a map for all the params to be sent to the service\n     * @param request\n     */\n    private async createTokenRequestBody(request: CommonAuthorizationCodeRequest): Promise<string> {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        /*\n         * For hybrid spa flow, there will be a code but no verifier\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\n         */\n        if (!this.includeRedirectUri) {\n            // Just validate\n            RequestValidator.validateRedirectUri(request.redirectUri);\n        } else {\n            // Validate and include redirect uri\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n\n        // Add scope array, parameter builder will add default scopes and dedupe\n        parameterBuilder.addScopes(request.scopes);\n\n        // add code: user set, not validated\n        parameterBuilder.addAuthorizationCode(request.code);\n\n        // Add library metadata\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        parameterBuilder.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        // add code_verifier if passed\n        if (request.codeVerifier) {\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\n        }\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n        parameterBuilder.addClientInfo();\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            const cnfString = await popTokenGenerator.generateCnf(request);\n            parameterBuilder.addPopToken(cnfString);\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if(request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n            }\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        \n        let ccsCred: CcsCredential | undefined = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        } else {\n            ccsCred = request.ccsCredential;\n        }\n\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\n                    break;\n            }\n        }\n\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n        }\n\n        // Add hybrid spa parameters if not already provided\n        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n            parameterBuilder.addExtraQueryParameters({\n                [AADServerParamKeys.RETURN_SPA_CODE]: \"1\"\n            });\n        }\n        \n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\n     * @param request\n     */\n    private createAuthCodeUrlQueryString(request: CommonAuthorizationUrlRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        const requestScopes = [...request.scopes || [], ...request.extraScopesToConsent || []];\n        parameterBuilder.addScopes(requestScopes);\n\n        // validate the redirectUri (to be a non null value)\n        parameterBuilder.addRedirectUri(request.redirectUri);\n\n        // generate the correlationId if not set by the user and add\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        // add response_mode. If not passed in it defaults to query.\n        parameterBuilder.addResponseMode(request.responseMode);\n\n        // add response_type = code\n        parameterBuilder.addResponseTypeCode();\n\n        // add library info parameters\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        // add client_info=1\n        parameterBuilder.addClientInfo();\n\n        if (request.codeChallenge && request.codeChallengeMethod) {\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n        }\n\n        if (request.prompt) {\n            parameterBuilder.addPrompt(request.prompt);\n        }\n\n        if (request.domainHint) {\n            parameterBuilder.addDomainHint(request.domainHint);\n        }\n\n        // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n            // AAD will throw if prompt=select_account is passed with an account hint\n            if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n            } else if (request.account) {\n                const accountSid = this.extractAccountSid(request.account);\n                // If account and loginHint are provided, we will check account first for sid before adding loginHint\n                if (accountSid && request.prompt === PromptValue.NONE) {\n                    // SessionId is only used in silent calls\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                    parameterBuilder.addSid(accountSid);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                } else if (request.loginHint) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                    parameterBuilder.addLoginHint(request.loginHint);\n                    parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                    // Fallback to account username if provided\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                    parameterBuilder.addLoginHint(request.account.username);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +  e);\n                    }\n                }\n            } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n            }\n        } else {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n        }\n\n        if (request.nonce) {\n            parameterBuilder.addNonce(request.nonce);\n        }\n\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * This API validates the `EndSessionRequest` and creates a URL\n     * @param request\n     */\n    private createLogoutUrlQueryString(request: CommonEndSessionRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.postLogoutRedirectUri) {\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n        }\n\n        if (request.correlationId) {\n            parameterBuilder.addCorrelationId(request.correlationId);\n        }\n\n        if (request.idTokenHint) {\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\n        }\n        \n        if(request.state) {\n            parameterBuilder.addState(request.state);\n        }\n\n        if (request.logoutHint) {\n            parameterBuilder.addLogoutHint(request.logoutHint);\n        }\n\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\n     * @param account \n     */\n    private extractAccountSid(account: AccountInfo): string | null {\n        if (account.idTokenClaims) {\n            const tokenClaims = account.idTokenClaims as TokenClaims;\n            return tokenClaims.sid || null;\n        }\n        return null;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration, buildClientConfiguration, CommonClientConfiguration } from \"../config/ClientConfiguration\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { NetworkManager, NetworkResponse } from \"../network/NetworkManager\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { Authority } from \"../authority/Authority\";\nimport { Logger } from \"../logger/Logger\";\nimport { Constants, HeaderNames } from \"../utils/Constants\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { version, name } from \"../packageMetadata\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { CcsCredential, CcsCredentialType } from \"../account/CcsCredential\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\n\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n */\nexport abstract class BaseClient {\n    // Logger object\n    public logger: Logger;\n\n    // Application config\n    protected config: CommonClientConfiguration;\n\n    // Crypto Interface\n    protected cryptoUtils: ICrypto;\n\n    // Storage Interface\n    protected cacheManager: CacheManager;\n\n    // Network Interface\n    protected networkClient: INetworkModule;\n\n    // Server Telemetry Manager\n    protected serverTelemetryManager: ServerTelemetryManager | null;\n\n    // Network Manager\n    protected networkManager: NetworkManager;\n\n    // Default authority object\n    public authority: Authority;\n\n    protected constructor(configuration: ClientConfiguration) {\n        // Set the configuration\n        this.config = buildClientConfiguration(configuration);\n\n        // Initialize the logger\n        this.logger = new Logger(this.config.loggerOptions, name, version);\n\n        // Initialize crypto\n        this.cryptoUtils = this.config.cryptoInterface;\n\n        // Initialize storage interface\n        this.cacheManager = this.config.storageInterface;\n\n        // Set the network interface\n        this.networkClient = this.config.networkInterface;\n\n        // Set the NetworkManager\n        this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\n\n        // Set TelemetryManager\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\n\n        // set Authority\n        this.authority = this.config.authOptions.authority;\n    }\n\n    /**\n     * Creates default headers for requests to token endpoint\n     */\n    protected createTokenRequestHeaders(ccsCred?: CcsCredential): Record<string, string> {\n        const headers: Record<string, string> = {};\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                        headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n                    break;\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Http post to token endpoint\n     * @param tokenEndpoint\n     * @param queryString\n     * @param headers\n     * @param thumbprint\n     */\n    protected async executePostToTokenEndpoint(tokenEndpoint: string, queryString: string, headers: Record<string, string>, thumbprint: RequestThumbprint): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const response = await this.networkManager.sendPostRequest<ServerAuthorizationTokenResponse>(\n            thumbprint,\n            tokenEndpoint,\n            { body: queryString, headers: headers, proxyUrl: this.config.systemOptions.proxyUrl }\n        );\n\n        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n            // Telemetry data successfully logged by server, clear Telemetry cache\n            this.config.serverTelemetryManager.clearTelemetryCache();\n        }\n\n        return response;\n    }\n\n    /**\n     * Updates the authority object of the client. Endpoint discovery must be completed.\n     * @param updatedAuthority\n     */\n    updateAuthority(updatedAuthority: Authority): void {\n        if (!updatedAuthority.discoveryComplete()) {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\n        }\n        this.authority = updatedAuthority;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, ICrypto } from \"../crypto/ICrypto\";\nimport { AuthError } from \"../error/AuthError\";\nimport { ILoggerCallback, LogLevel } from \"../logger/Logger\";\nimport { Constants } from \"../utils/Constants\";\nimport { version } from \"../packageMetadata\";\nimport { Authority } from \"../authority/Authority\";\nimport { AzureCloudInstance } from \"../authority/AuthorityOptions\";\nimport { CacheManager, DefaultStorageClass } from \"../cache/CacheManager\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\n\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\n\n/**\n * Use the configuration object to configure MSAL Modules and initialize the base interfaces for MSAL.\n *\n * This object allows you to configure important elements of MSAL functionality:\n * - authOptions                - Authentication for application\n * - cryptoInterface            - Implementation of crypto functions\n * - libraryInfo                - Library metadata\n * - loggerOptions              - Logging for application\n * - networkInterface           - Network implementation\n * - storageInterface           - Storage implementation\n * - systemOptions              - Additional library options\n * - clientCredentials          - Credentials options for confidential clients\n */\nexport type ClientConfiguration = {\n    authOptions: AuthOptions,\n    systemOptions?: SystemOptions,\n    loggerOptions?: LoggerOptions,\n    storageInterface?: CacheManager,\n    networkInterface?: INetworkModule,\n    cryptoInterface?: ICrypto,\n    clientCredentials?: ClientCredentials,\n    libraryInfo?: LibraryInfo\n    serverTelemetryManager?: ServerTelemetryManager | null,\n    persistencePlugin?: ICachePlugin | null,\n    serializableCache?: ISerializableTokenCache | null\n};\n\nexport type CommonClientConfiguration = {\n    authOptions: Required<AuthOptions>,\n    systemOptions: Required<SystemOptions>,\n    loggerOptions : Required<LoggerOptions>,\n    storageInterface: CacheManager,\n    networkInterface : INetworkModule,\n    cryptoInterface : Required<ICrypto>,\n    libraryInfo : LibraryInfo,\n    serverTelemetryManager: ServerTelemetryManager | null,\n    clientCredentials: ClientCredentials,\n    persistencePlugin: ICachePlugin | null,\n    serializableCache: ISerializableTokenCache | null\n};\n\n/**\n * Use this to configure the auth options in the ClientConfiguration object\n *\n * - clientId                    - Client ID of your app registered with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview in Microsoft Identity Platform\n * - authority                   - You can configure a specific authority, defaults to \" \" or \"https://login.microsoftonline.com/common\"\n * - knownAuthorities            - An array of URIs that are known to be valid. Used in B2C scenarios.\n * - cloudDiscoveryMetadata      - A string containing the cloud discovery response. Used in AAD scenarios.\n * - clientCapabilities          - Array of capabilities which will be added to the claims.access_token.xms_cc request property on every network request.\n * - protocolMode                - Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\n */\nexport type AuthOptions = {\n    clientId: string;\n    authority: Authority;\n    clientCapabilities?: Array<string>;\n    azureCloudOptions?: AzureCloudOptions;\n};\n\n/**\n * Use this to configure token renewal info in the Configuration object\n *\n * - tokenRenewalOffsetSeconds    - Sets the window of offset needed to renew the token before expiry\n */\nexport type SystemOptions = {\n    tokenRenewalOffsetSeconds?: number;\n    preventCorsPreflight?: boolean;\n    proxyUrl?: string;\n};\n\n/**\n *  Use this to configure the logging that MSAL does, by configuring logger options in the Configuration object\n *\n * - loggerCallback                - Callback for logger\n * - piiLoggingEnabled             - Sets whether pii logging is enabled\n * - logLevel                      - Sets the level at which logging happens\n * - correlationId                 - Sets the correlationId printed by the logger\n */\nexport type LoggerOptions = {\n    loggerCallback?: ILoggerCallback,\n    piiLoggingEnabled?: boolean,\n    logLevel?: LogLevel,\n    correlationId?: string\n};\n\n/**\n * Library-specific options\n */\nexport type LibraryInfo = {\n    sku: string,\n    version: string,\n    cpu: string,\n    os: string\n};\n\n/**\n * Credentials for confidential clients\n */\nexport type ClientCredentials = {\n    clientSecret?: string,\n    clientAssertion? : {\n        assertion: string,\n        assertionType: string\n    };\n};\n\n/**\n * AzureCloudInstance specific options\n *\n * - azureCloudInstance             - string enum providing short notation for soverign and public cloud authorities\n * - tenant                         - provision to provide the tenant info\n */\nexport type AzureCloudOptions = {\n    azureCloudInstance: AzureCloudInstance;\n    tenant?: string,\n};\n\nexport const DEFAULT_SYSTEM_OPTIONS: Required<SystemOptions> = {\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n    preventCorsPreflight: false,\n    proxyUrl: \"\",\n};\n\nconst DEFAULT_LOGGER_IMPLEMENTATION: Required<LoggerOptions> = {\n    loggerCallback: () => {\n        // allow users to not set loggerCallback\n    },\n    piiLoggingEnabled: false,\n    logLevel: LogLevel.Info,\n    correlationId: \"\"\n};\n\nconst DEFAULT_NETWORK_IMPLEMENTATION: INetworkModule = {\n    async sendGetRequestAsync<T>(): Promise<T> {\n        const notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async sendPostRequestAsync<T>(): Promise<T> {\n        const notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n};\n\nconst DEFAULT_LIBRARY_INFO: LibraryInfo = {\n    sku: Constants.SKU,\n    version: version,\n    cpu: \"\",\n    os: \"\"\n};\n\nconst DEFAULT_CLIENT_CREDENTIALS: ClientCredentials = {\n    clientSecret: \"\",\n    clientAssertion: undefined\n};\n\nconst DEFAULT_AZURE_CLOUD_OPTIONS: AzureCloudOptions = {\n    azureCloudInstance: AzureCloudInstance.None,\n    tenant: `${Constants.DEFAULT_COMMON_TENANT}`\n};\n\n/**\n * Function that sets the default options when not explicitly configured from app developer\n *\n * @param Configuration\n *\n * @returns Configuration\n */\nexport function buildClientConfiguration(\n    {\n        authOptions: userAuthOptions,\n        systemOptions: userSystemOptions,\n        loggerOptions: userLoggerOption,\n        storageInterface: storageImplementation,\n        networkInterface: networkImplementation,\n        cryptoInterface: cryptoImplementation,\n        clientCredentials: clientCredentials,\n        libraryInfo: libraryInfo,\n        serverTelemetryManager: serverTelemetryManager,\n        persistencePlugin: persistencePlugin,\n        serializableCache: serializableCache\n    }: ClientConfiguration): CommonClientConfiguration {\n\n    const loggerOptions = { ...DEFAULT_LOGGER_IMPLEMENTATION, ...userLoggerOption };\n\n    return {\n        authOptions: buildAuthOptions(userAuthOptions),\n        systemOptions: { ...DEFAULT_SYSTEM_OPTIONS, ...userSystemOptions },\n        loggerOptions: loggerOptions,\n        storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION),\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n        libraryInfo: { ...DEFAULT_LIBRARY_INFO, ...libraryInfo },\n        serverTelemetryManager: serverTelemetryManager || null,\n        persistencePlugin: persistencePlugin || null,\n        serializableCache: serializableCache || null\n    };\n}\n\n/**\n * Construct authoptions from the client and platform passed values\n * @param authOptions\n */\nfunction buildAuthOptions(authOptions: AuthOptions): Required<AuthOptions> {\n    return {\n        clientCapabilities: [],\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n        ...authOptions\n    };\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"../error/AuthError\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\nimport { SignedHttpRequest } from \"./SignedHttpRequest\";\n\n/**\n * The PkceCodes type describes the structure\n * of objects that contain PKCE code\n * challenge and verifier pairs\n */\nexport type PkceCodes = {\n    verifier: string,\n    challenge: string\n};\n\nexport type SignedHttpRequestParameters = Pick<BaseAuthRequest, \"resourceRequestMethod\" | \"resourceRequestUri\" | \"shrClaims\" | \"shrNonce\">;\n\n/**\n * Interface for crypto functions used by library\n */\nexport interface ICrypto {\n    /**\n     * Creates a guid randomly.\n     */\n    createNewGuid(): string;\n    /**\n     * base64 Encode string\n     * @param input \n     */\n    base64Encode(input: string): string;\n    /**\n     * base64 decode string\n     * @param input \n     */\n    base64Decode(input: string): string;\n    /**\n     * Generate PKCE codes for OAuth. See RFC here: https://tools.ietf.org/html/rfc7636\n     */\n    generatePkceCodes(): Promise<PkceCodes>;\n    /**\n     * Generates an JWK RSA S256 Thumbprint\n     * @param request\n     */\n    getPublicKeyThumbprint(request: SignedHttpRequestParameters): Promise<string>;\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid \n     */\n    removeTokenBindingKey(kid: string): Promise<boolean>;\n    /**\n     * Removes all cryptographic keys from IndexedDB storage\n     */\n    clearKeystore(): Promise<boolean>;\n    /** \n     * Returns a signed proof-of-possession token with a given acces token that contains a cnf claim with the required kid.\n     * @param accessToken \n     */\n    signJwt(payload: SignedHttpRequest, kid: string): Promise<string>;\n    /**\n     * Returns the SHA-256 hash of an input string\n     * @param plainText\n     */\n    hashString(plainText: string): Promise<string>;\n}\n\nexport const DEFAULT_CRYPTO_IMPLEMENTATION: ICrypto = {\n    createNewGuid: (): string => {\n        const notImplErr = \"Crypto interface - createNewGuid() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    base64Decode: (): string => {\n        const notImplErr = \"Crypto interface - base64Decode() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    base64Encode: (): string => {\n        const notImplErr = \"Crypto interface - base64Encode() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async generatePkceCodes(): Promise<PkceCodes> {\n        const notImplErr = \"Crypto interface - generatePkceCodes() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async getPublicKeyThumbprint(): Promise<string> {\n        const notImplErr = \"Crypto interface - getPublicKeyThumbprint() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async removeTokenBindingKey(): Promise<boolean> {\n        const notImplErr = \"Crypto interface - removeTokenBindingKey() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async clearKeystore(): Promise<boolean> {\n        const notImplErr = \"Crypto interface - clearKeystore() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async signJwt(): Promise<string> {\n        const notImplErr = \"Crypto interface - signJwt() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async hashString(): Promise<string> {\n        const notImplErr = \"Crypto interface - hashString() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Constants } from \"../utils/Constants\";\n\n/**\n * AuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const AuthErrorMessage = {\n    unexpectedError: {\n        code: \"unexpected_error\",\n        desc: \"Unexpected error in authentication.\"\n    }\n};\n\n/**\n * General error class thrown by the MSAL.js library.\n */\nexport class AuthError extends Error {\n\n    /**\n     * Short string denoting error\n     */\n    errorCode: string;\n\n    /**\n     * Detailed description of error\n     */\n    errorMessage: string;\n\n    /**\n     * Describes the subclass of an error\n     */\n    subError: string;\n\n    /**\n     * CorrelationId associated with the error\n     */\n    correlationId: string;\n\n    constructor(errorCode?: string, errorMessage?: string, suberror?: string) {\n        const errorString = errorMessage ? `${errorCode}: ${errorMessage}` : errorCode;\n        super(errorString);\n        Object.setPrototypeOf(this, AuthError.prototype);\n\n        this.errorCode = errorCode || Constants.EMPTY_STRING;\n        this.errorMessage = errorMessage || \"\";\n        this.subError = suberror || \"\";\n        this.name = \"AuthError\";\n    }\n\n    setCorrelationId(correlationId: string): void {\n        this.correlationId = correlationId;\n    }\n\n    /**\n     * Creates an error that is thrown when something unexpected happens in the library.\n     * @param errDesc\n     */\n    static createUnexpectedError(errDesc: string): AuthError {\n        return new AuthError(AuthErrorMessage.unexpectedError.code, `${AuthErrorMessage.unexpectedError.desc}: ${errDesc}`);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const Constants = {\n    LIBRARY_NAME: \"MSAL.JS\",\n    SKU: \"msal.js.common\",\n    // Prefix for all library cache entries\n    CACHE_PREFIX: \"msal\",\n    // default authority\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\n    DEFAULT_COMMON_TENANT: \"common\",\n    // ADFS String\n    ADFS: \"adfs\",\n    // Default AAD Instance Discovery Endpoint\n    AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\n    // Resource delimiter - used for certain cache entries\n    RESOURCE_DELIM: \"|\",\n    // Placeholder for non-existent account ids/objects\n    NO_ACCOUNT: \"NO_ACCOUNT\",\n    // Claims\n    CLAIMS: \"claims\",\n    // Consumer UTID\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n    // Default scopes\n    OPENID_SCOPE: \"openid\",\n    PROFILE_SCOPE: \"profile\",\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\n    EMAIL_SCOPE: \"email\",\n    // Default response type for authorization code flow\n    CODE_RESPONSE_TYPE: \"code\",\n    CODE_GRANT_TYPE: \"authorization_code\",\n    RT_GRANT_TYPE: \"refresh_token\",\n    FRAGMENT_RESPONSE_MODE: \"fragment\",\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\n    AUTHORIZATION_PENDING: \"authorization_pending\",\n    NOT_DEFINED: \"not_defined\",\n    EMPTY_STRING: \"\",\n    FORWARD_SLASH: \"/\",\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\n    IMDS_VERSION: \"2020-06-01\",\n    IMDS_TIMEOUT: 2000,\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\n    KNOWN_PUBLIC_CLOUDS: [\"login.microsoftonline.com\", \"login.windows.net\", \"login.microsoft.com\", \"sts.windows.net\"]\n};\n\nexport const OIDC_DEFAULT_SCOPES = [\n    Constants.OPENID_SCOPE,\n    Constants.PROFILE_SCOPE,\n    Constants.OFFLINE_ACCESS_SCOPE\n];\n\nexport const OIDC_SCOPES = [\n    ...OIDC_DEFAULT_SCOPES,\n    Constants.EMAIL_SCOPE\n];\n\n/**\n * Request header names\n */\nexport enum HeaderNames {\n    CONTENT_TYPE = \"Content-Type\",\n    RETRY_AFTER = \"Retry-After\",\n    CCS_HEADER = \"X-AnchorMailbox\",\n    WWWAuthenticate = \"WWW-Authenticate\",\n    AuthenticationInfo = \"Authentication-Info\"\n}\n\n/**\n * Persistent cache keys MSAL which stay while user is logged in.\n */\nexport enum PersistentCacheKeys {\n    ID_TOKEN = \"idtoken\",\n    CLIENT_INFO = \"client.info\",\n    ADAL_ID_TOKEN = \"adal.idtoken\",\n    ERROR = \"error\",\n    ERROR_DESC = \"error.description\",\n    ACTIVE_ACCOUNT = \"active-account\"\n}\n\n/**\n * String constants related to AAD Authority\n */\nexport enum AADAuthorityConstants {\n    COMMON = \"common\",\n    ORGANIZATIONS = \"organizations\",\n    CONSUMERS = \"consumers\"\n}\n\n/**\n * Keys in the hashParams sent by AAD Server\n */\nexport enum AADServerParamKeys {\n    CLIENT_ID = \"client_id\",\n    REDIRECT_URI = \"redirect_uri\",\n    RESPONSE_TYPE = \"response_type\",\n    RESPONSE_MODE = \"response_mode\",\n    GRANT_TYPE = \"grant_type\",\n    CLAIMS = \"claims\",\n    SCOPE = \"scope\",\n    ERROR = \"error\",\n    ERROR_DESCRIPTION = \"error_description\",\n    ACCESS_TOKEN = \"access_token\",\n    ID_TOKEN = \"id_token\",\n    REFRESH_TOKEN = \"refresh_token\",\n    EXPIRES_IN = \"expires_in\",\n    STATE = \"state\",\n    NONCE = \"nonce\",\n    PROMPT = \"prompt\",\n    SESSION_STATE = \"session_state\",\n    CLIENT_INFO = \"client_info\",\n    CODE = \"code\",\n    CODE_CHALLENGE = \"code_challenge\",\n    CODE_CHALLENGE_METHOD = \"code_challenge_method\",\n    CODE_VERIFIER = \"code_verifier\",\n    CLIENT_REQUEST_ID = \"client-request-id\",\n    X_CLIENT_SKU = \"x-client-SKU\",\n    X_CLIENT_VER = \"x-client-VER\",\n    X_CLIENT_OS = \"x-client-OS\",\n    X_CLIENT_CPU = \"x-client-CPU\",\n    X_CLIENT_CURR_TELEM = \"x-client-current-telemetry\",\n    X_CLIENT_LAST_TELEM = \"x-client-last-telemetry\",\n    X_MS_LIB_CAPABILITY = \"x-ms-lib-capability\",\n    POST_LOGOUT_URI = \"post_logout_redirect_uri\",\n    ID_TOKEN_HINT= \"id_token_hint\",\n    DEVICE_CODE = \"device_code\",\n    CLIENT_SECRET = \"client_secret\",\n    CLIENT_ASSERTION = \"client_assertion\",\n    CLIENT_ASSERTION_TYPE = \"client_assertion_type\",\n    TOKEN_TYPE = \"token_type\",\n    REQ_CNF = \"req_cnf\",\n    OBO_ASSERTION = \"assertion\",\n    REQUESTED_TOKEN_USE = \"requested_token_use\",\n    ON_BEHALF_OF = \"on_behalf_of\",\n    FOCI = \"foci\",\n    CCS_HEADER = \"X-AnchorMailbox\",\n    RETURN_SPA_CODE = \"return_spa_code\",\n    LOGOUT_HINT = \"logout_hint\"\n}\n\n/**\n * Claims request keys\n */\nexport enum ClaimsRequestKeys {\n    ACCESS_TOKEN = \"access_token\",\n    XMS_CC = \"xms_cc\"\n}\n\n/**\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\n */\nexport const PromptValue = {\n    LOGIN: \"login\",\n    SELECT_ACCOUNT: \"select_account\",\n    CONSENT: \"consent\",\n    NONE: \"none\",\n    CREATE: \"create\"\n};\n\n/**\n * SSO Types - generated to populate hints\n */\nexport enum SSOTypes {\n    ACCOUNT = \"account\",\n    SID = \"sid\",\n    LOGIN_HINT = \"login_hint\",\n    ID_TOKEN = \"id_token\",\n    DOMAIN_HINT = \"domain_hint\",\n    ORGANIZATIONS = \"organizations\",\n    CONSUMERS = \"consumers\",\n    ACCOUNT_ID = \"accountIdentifier\",\n    HOMEACCOUNT_ID = \"homeAccountIdentifier\"\n}\n\n/**\n * Disallowed extra query parameters.\n */\nexport const BlacklistedEQParams = [\n    SSOTypes.SID,\n    SSOTypes.LOGIN_HINT\n];\n\n/**\n * allowed values for codeVerifier\n */\nexport const CodeChallengeMethodValues = {\n    PLAIN: \"plain\",\n    S256: \"S256\"\n};\n\n/**\n * The method used to encode the code verifier for the code challenge parameter. can be one\n * of plain or s256. if excluded, code challenge is assumed to be plaintext. for more\n * information, see the pkce rcf: https://tools.ietf.org/html/rfc7636\n */\nexport const CodeChallengeMethodValuesArray: string[] = [\n    CodeChallengeMethodValues.PLAIN,\n    CodeChallengeMethodValues.S256\n];\n\n/**\n * allowed values for response_mode\n */\nexport enum ResponseMode {\n    QUERY = \"query\",\n    FRAGMENT = \"fragment\",\n    FORM_POST = \"form_post\"\n}\n\n/**\n * allowed grant_type\n */\nexport enum GrantType {\n    IMPLICIT_GRANT = \"implicit\",\n    AUTHORIZATION_CODE_GRANT = \"authorization_code\",\n    CLIENT_CREDENTIALS_GRANT = \"client_credentials\",\n    RESOURCE_OWNER_PASSWORD_GRANT = \"password\",\n    REFRESH_TOKEN_GRANT = \"refresh_token\",\n    DEVICE_CODE_GRANT = \"device_code\",\n    JWT_BEARER = \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n}\n\n/**\n * Account types in Cache\n */\nexport enum CacheAccountType {\n    MSSTS_ACCOUNT_TYPE = \"MSSTS\",\n    ADFS_ACCOUNT_TYPE = \"ADFS\",\n    MSAV1_ACCOUNT_TYPE = \"MSA\",\n    GENERIC_ACCOUNT_TYPE = \"Generic\" // NTLM, Kerberos, FBA, Basic etc\n}\n\n/**\n * Separators used in cache\n */\nexport enum Separators {\n    CACHE_KEY_SEPARATOR = \"-\",\n    CLIENT_INFO_SEPARATOR = \".\"\n}\n\n/**\n * Credential Type stored in the cache\n */\nexport enum CredentialType {\n    ID_TOKEN = \"IdToken\",\n    ACCESS_TOKEN = \"AccessToken\",\n    ACCESS_TOKEN_WITH_AUTH_SCHEME = \"AccessToken_With_AuthScheme\",\n    REFRESH_TOKEN = \"RefreshToken\",\n}\n\n/**\n * Credential Type stored in the cache\n */\nexport enum CacheSchemaType {\n    ACCOUNT = \"Account\",\n    CREDENTIAL = \"Credential\",\n    ID_TOKEN = \"IdToken\",\n    ACCESS_TOKEN = \"AccessToken\",\n    REFRESH_TOKEN = \"RefreshToken\",\n    APP_METADATA = \"AppMetadata\",\n    TEMPORARY = \"TempCache\",\n    TELEMETRY = \"Telemetry\",\n    UNDEFINED = \"Undefined\",\n    THROTTLING = \"Throttling\"\n}\n\n/**\n * Combine all cache types\n */\nexport enum CacheType {\n    ADFS = 1001,\n    MSA = 1002,\n    MSSTS = 1003,\n    GENERIC = 1004,\n    ACCESS_TOKEN = 2001,\n    REFRESH_TOKEN = 2002,\n    ID_TOKEN = 2003,\n    APP_METADATA = 3001,\n    UNDEFINED = 9999\n}\n\n/**\n * More Cache related constants\n */\nexport const APP_METADATA = \"appmetadata\";\nexport const CLIENT_INFO = \"client_info\";\nexport const THE_FAMILY_ID = \"1\";\n\nexport const AUTHORITY_METADATA_CONSTANTS = {\n    CACHE_KEY: \"authority-metadata\",\n    REFRESH_TIME_SECONDS: 3600 * 24 // 24 Hours\n};\n\nexport enum AuthorityMetadataSource {\n    CONFIG = \"config\",\n    CACHE = \"cache\",\n    NETWORK = \"network\"\n}\n\nexport const SERVER_TELEM_CONSTANTS = {\n    SCHEMA_VERSION: 5,\n    MAX_CUR_HEADER_BYTES: 80, // ESTS limit is 100B, set to 80 to provide a 20B buffer\n    MAX_LAST_HEADER_BYTES: 330, // ESTS limit is 350B, set to 330 to provide a 20B buffer,\n    MAX_CACHED_ERRORS: 50, // Limit the number of errors that can be stored to prevent uncontrolled size gains\n    CACHE_KEY: \"server-telemetry\",\n    CATEGORY_SEPARATOR: \"|\",\n    VALUE_SEPARATOR: \",\",\n    OVERFLOW_TRUE: \"1\",\n    OVERFLOW_FALSE: \"0\",\n    UNKNOWN_ERROR: \"unknown_error\"\n};\n\n/**\n * Type of the authentication request\n */\nexport enum AuthenticationScheme {\n    BEARER = \"Bearer\",\n    POP = \"pop\",\n    SSH = \"ssh-cert\"\n}\n\n/**\n * Constants related to throttling\n */\nexport const ThrottlingConstants = {\n    // Default time to throttle RequestThumbprint in seconds\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\n    // Default maximum time to throttle in seconds, overrides what the server sends back\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\n    // Prefix for storing throttling entries\n    THROTTLING_PREFIX: \"throttling\",\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\"\n};\n\nexport const Errors = {\n    INVALID_GRANT_ERROR: \"invalid_grant\",\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\",\n};\n\n/**\n * Password grant parameters\n */\nexport enum PasswordGrantConstants {\n    username = \"username\",\n    password = \"password\"\n}\n\n/**\n * Response codes\n */\nexport enum  ResponseCodes {\n    httpSuccess = 200,\n    httpBadRequest = 400\n}\n\n/**\n * Region Discovery Sources\n */\nexport enum RegionDiscoverySources {\n    FAILED_AUTO_DETECTION = \"1\",\n    INTERNAL_CACHE = \"2\",\n    ENVIRONMENT_VARIABLE = \"3\",\n    IMDS = \"4\",\n}\n\n/**\n * Region Discovery Outcomes\n */\nexport enum RegionDiscoveryOutcomes {\n    CONFIGURED_MATCHES_DETECTED = \"1\",\n    CONFIGURED_NO_AUTO_DETECTION = \"2\",\n    CONFIGURED_NOT_DETECTED = \"3\",\n    AUTO_DETECTION_REQUESTED_SUCCESSFUL = \"4\",\n    AUTO_DETECTION_REQUESTED_FAILED = \"5\"\n}\n\nexport enum CacheOutcome {\n    NO_CACHE_HIT = \"0\",\n    FORCE_REFRESH = \"1\",\n    NO_CACHED_ACCESS_TOKEN = \"2\",\n    CACHED_ACCESS_TOKEN_EXPIRED = \"3\",\n    REFRESH_CACHED_ACCESS_TOKEN = \"4\"\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { LoggerOptions } from \"../config/ClientConfiguration\";\nimport { Constants } from \"../utils/Constants\";\n\n/**\n * Options for logger messages.\n */\nexport type LoggerMessageOptions = {\n    logLevel: LogLevel,\n    containsPii?: boolean,\n    context?: string,\n    correlationId?: string\n};\n\n/**\n * Log message level.\n */\nexport enum LogLevel {\n    Error,\n    Warning,\n    Info,\n    Verbose,\n    Trace\n}\n\n/**\n * Callback to send the messages to.\n */\nexport interface ILoggerCallback {\n    (level: LogLevel, message: string, containsPii: boolean): void;\n}\n\n/**\n * Class which facilitates logging of messages to a specific place.\n */\nexport class Logger {\n\n    // Correlation ID for request, usually set by user.\n    private correlationId: string;\n\n    // Current log level, defaults to info.\n    private level: LogLevel = LogLevel.Info;\n\n    // Boolean describing whether PII logging is allowed.\n    private piiLoggingEnabled: boolean;\n\n    // Callback to send messages to.\n    private localCallback: ILoggerCallback;\n\n    // Package name implementing this logger\n    private packageName: string;\n\n    // Package version implementing this logger\n    private packageVersion: string;\n\n    constructor(loggerOptions: LoggerOptions, packageName?: string, packageVersion?: string) {\n        const defaultLoggerCallback = () => {\n            return;\n        };\n        this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;\n        this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;\n        this.level = typeof(loggerOptions.logLevel) === \"number\" ? loggerOptions.logLevel : LogLevel.Info;\n        this.correlationId = loggerOptions.correlationId || \"\";\n\n        this.packageName = packageName || Constants.EMPTY_STRING;\n        this.packageVersion = packageVersion || Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Create new Logger with existing configurations.\n     */\n    public clone(packageName: string, packageVersion: string, correlationId?: string): Logger {\n        return new Logger({loggerCallback: this.localCallback, piiLoggingEnabled: this.piiLoggingEnabled, logLevel: this.level, correlationId: correlationId || this.correlationId}, packageName, packageVersion);\n    }\n\n    /**\n     * Log message with required options.\n     */\n    private logMessage(logMessage: string, options: LoggerMessageOptions): void {\n        if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {\n            return;\n        }\n        const timestamp = new Date().toUTCString();\n\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\n        let logHeader: string;\n        if (!StringUtils.isEmpty(options.correlationId)) {\n            logHeader = `[${timestamp}] : [${options.correlationId}]`;\n        } else if (!StringUtils.isEmpty(this.correlationId)) {\n            logHeader = `[${timestamp}] : [${this.correlationId}]`;\n        } else {\n            logHeader = `[${timestamp}]`;\n        }\n\n        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": \"\"}${options.context ? `:${options.context}` : \"\"}`)(logMessage);\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\n    }\n\n    /**\n     * Execute callback with message.\n     */\n    executeCallback(level: LogLevel, message: string, containsPii: boolean): void {\n        if (this.localCallback) {\n            this.localCallback(level, message, containsPii);\n        }\n    }\n\n    /**\n     * Logs error messages.\n     */\n    error(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs error messages with PII.\n     */\n    errorPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs warning messages.\n     */\n    warning(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs warning messages with PII.\n     */\n    warningPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs info messages.\n     */\n    info(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs info messages with PII.\n     */\n    infoPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs verbose messages.\n     */\n    verbose(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs verbose messages with PII.\n     */\n    verbosePii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs trace messages.\n     */\n    trace(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs trace messages with PII.\n     */\n    tracePii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Returns whether PII Logging is enabled or not.\n     */\n    isPiiLoggingEnabled(): boolean {\n        return this.piiLoggingEnabled || false;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { DecodedAuthToken } from \"../account/DecodedAuthToken\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n\n/**\n * @hidden\n */\nexport class StringUtils {\n\n    /**\n     * decode a JWT\n     *\n     * @param authToken\n     */\n    static decodeAuthToken(authToken: string): DecodedAuthToken {\n        if (StringUtils.isEmpty(authToken)) {\n            throw ClientAuthError.createTokenNullOrEmptyError(authToken);\n        }\n        const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n        const matches = tokenPartsRegex.exec(authToken);\n        if (!matches || matches.length < 4) {\n            throw ClientAuthError.createTokenParsingError(`Given token is malformed: ${JSON.stringify(authToken)}`);\n        }\n        const crackedToken: DecodedAuthToken = {\n            header: matches[1],\n            JWSPayload: matches[2],\n            JWSSig: matches[3]\n        };\n        return crackedToken;\n    }\n\n    /**\n     * Check if a string is empty.\n     *\n     * @param str\n     */\n    static isEmpty(str?: string): boolean {\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\n    }\n\n    /**\n     * Check if stringified object is empty\n     * @param strObj \n     */\n    static isEmptyObj(strObj?: string): boolean {\n        if (strObj && !StringUtils.isEmpty(strObj)) {\n            try {\n                const obj = JSON.parse(strObj);\n                return Object.keys(obj).length === 0;\n            } catch (e) {}\n        }\n        return true;\n    }\n\n    static startsWith(str: string, search: string): boolean {\n        return str.indexOf(search) === 0;\n    }\n\n    static endsWith(str: string, search: string): boolean {\n        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));\n    }\n\n    /**\n     * Parses string into an object.\n     *\n     * @param query\n     */\n    static queryStringToObject<T>(query: string): T {\n        const obj: {} = {};\n        const params = query.split(\"&\");\n        const decode = (s: string) => decodeURIComponent(s.replace(/\\+/g, \" \"));\n        params.forEach((pair) => {\n            if (pair.trim()) {\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n                if (key && value) {\n                    obj[decode(key)] = decode(value);\n                }\n            }\n        });\n        return obj as T;\n    }\n\n    /**\n     * Trims entries in an array.\n     *\n     * @param arr\n     */\n    static trimArrayEntries(arr: Array<string>): Array<string> {\n        return arr.map(entry => entry.trim());\n    }\n\n    /**\n     * Removes empty strings from array\n     * @param arr\n     */\n    static removeEmptyStringsFromArray(arr: Array<string>): Array<string> {\n        return arr.filter(entry => {\n            return !StringUtils.isEmpty(entry);\n        });\n    }\n\n    /**\n     * Attempts to parse a string into JSON\n     * @param str\n     */\n    static jsonParseHelper<T>(str: string): T | null {\n        try {\n            return JSON.parse(str) as T;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\n     * @param input String to match against\n     */\n    static matchPattern(pattern: string, input: string): boolean {\n        /**\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\n         */\n        const regex: RegExp = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\")); // eslint-disable-line security/detect-non-literal-regexp\n\n        return regex.test(input);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"./AuthError\";\n\n/**\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const ClientAuthErrorMessage = {\n    clientInfoDecodingError: {\n        code: \"client_info_decoding_error\",\n        desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\n    },\n    clientInfoEmptyError: {\n        code: \"client_info_empty_error\",\n        desc: \"The client info was empty. Please review the trace to determine the root cause.\"\n    },\n    tokenParsingError: {\n        code: \"token_parsing_error\",\n        desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\n    },\n    nullOrEmptyToken: {\n        code: \"null_or_empty_token\",\n        desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\n    },\n    endpointResolutionError: {\n        code: \"endpoints_resolution_error\",\n        desc: \"Error: could not resolve endpoints. Please check network and try again.\"\n    },\n    networkError: {\n        code: \"network_error\",\n        desc: \"Network request failed. Please check network trace to determine root cause.\"\n    },\n    unableToGetOpenidConfigError: {\n        code: \"openid_config_error\",\n        desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\n    },\n    hashNotDeserialized: {\n        code: \"hash_not_deserialized\",\n        desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\n    },\n    blankGuidGenerated: {\n        code: \"blank_guid_generated\",\n        desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\n    },\n    invalidStateError: {\n        code: \"invalid_state\",\n        desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\n    },\n    stateMismatchError: {\n        code: \"state_mismatch\",\n        desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\n    },\n    stateNotFoundError: {\n        code: \"state_not_found\",\n        desc: \"State not found\"\n    },\n    nonceMismatchError: {\n        code: \"nonce_mismatch\",\n        desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\n    },\n    nonceNotFoundError: {\n        code: \"nonce_not_found\",\n        desc: \"nonce not found\"\n    },\n    noTokensFoundError: {\n        code: \"no_tokens_found\",\n        desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\n    },\n    multipleMatchingTokens: {\n        code: \"multiple_matching_tokens\",\n        desc: \"The cache contains multiple tokens satisfying the requirements. \" +\n            \"Call AcquireToken again providing more requirements such as authority or account.\"\n    },\n    multipleMatchingAccounts: {\n        code: \"multiple_matching_accounts\",\n        desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\n    },\n    multipleMatchingAppMetadata: {\n        code: \"multiple_matching_appMetadata\",\n        desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\n    },\n    tokenRequestCannotBeMade: {\n        code: \"request_cannot_be_made\",\n        desc: \"Token request cannot be made without authorization code or refresh token.\"\n    },\n    appendEmptyScopeError: {\n        code: \"cannot_append_empty_scope\",\n        desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\n    },\n    removeEmptyScopeError: {\n        code: \"cannot_remove_empty_scope\",\n        desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\n    },\n    appendScopeSetError: {\n        code: \"cannot_append_scopeset\",\n        desc: \"Cannot append ScopeSet due to error.\"\n    },\n    emptyInputScopeSetError: {\n        code: \"empty_input_scopeset\",\n        desc: \"Empty input ScopeSet cannot be processed.\"\n    },\n    DeviceCodePollingCancelled: {\n        code: \"device_code_polling_cancelled\",\n        desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\n    },\n    DeviceCodeExpired: {\n        code: \"device_code_expired\",\n        desc: \"Device code is expired.\"\n    },\n    DeviceCodeUnknownError: {\n        code: \"device_code_unknown_error\",\n        desc: \"Device code stopped polling for unknown reasons.\"\n    },\n    NoAccountInSilentRequest: {\n        code: \"no_account_in_silent_request\",\n        desc: \"Please pass an account object, silent flow is not supported without account information\"\n    },\n    invalidCacheRecord: {\n        code: \"invalid_cache_record\",\n        desc: \"Cache record object was null or undefined.\"\n    },\n    invalidCacheEnvironment: {\n        code: \"invalid_cache_environment\",\n        desc: \"Invalid environment when attempting to create cache entry\"\n    },\n    noAccountFound: {\n        code: \"no_account_found\",\n        desc: \"No account found in cache for given key.\"\n    },\n    CachePluginError: {\n        code: \"no cache plugin set on CacheManager\",\n        desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\n    },\n    noCryptoObj: {\n        code: \"no_crypto_object\",\n        desc: \"No crypto object detected. This is required for the following operation: \"\n    },\n    invalidCacheType: {\n        code: \"invalid_cache_type\",\n        desc: \"Invalid cache type\"\n    },\n    unexpectedAccountType: {\n        code: \"unexpected_account_type\",\n        desc: \"Unexpected account type.\"\n    },\n    unexpectedCredentialType: {\n        code: \"unexpected_credential_type\",\n        desc: \"Unexpected credential type.\"\n    },\n    invalidAssertion: {\n        code: \"invalid_assertion\",\n        desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\n    },\n    invalidClientCredential: {\n        code: \"invalid_client_credential\",\n        desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\n    },\n    tokenRefreshRequired: {\n        code: \"token_refresh_required\",\n        desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\n    },\n    userTimeoutReached: {\n        code: \"user_timeout_reached\",\n        desc: \"User defined timeout for device code polling reached\",\n    },\n    tokenClaimsRequired: {\n        code: \"token_claims_cnf_required_for_signedjwt\",\n        desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\n    },\n    noAuthorizationCodeFromServer: {\n        code: \"authorization_code_missing_from_server_response\",\n        desc: \"Server response does not contain an authorization code to proceed\"\n    },\n    noAzureRegionDetected: {\n        code: \"no_azure_region_detected\",\n        desc: \"No azure region was detected and no fallback was made available\"\n    },\n    accessTokenEntityNullError: {\n        code: \"access_token_entity_null\",\n        desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\n    },\n    bindingKeyNotRemovedError: {\n        code: \"binding_key_not_removed\",\n        desc: \"Could not remove the credential's binding key from storage.\"\n    },\n    logoutNotSupported: {\n        code: \"end_session_endpoint_not_supported\",\n        desc: \"Provided authority does not support logout.\"\n    }\n};\n\n/**\n * Error thrown when there is an error in the client code running on the browser.\n */\nexport class ClientAuthError extends AuthError {\n\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n        this.name = \"ClientAuthError\";\n\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\n    }\n\n    /**\n     * Creates an error thrown when client info object doesn't decode correctly.\n     * @param caughtError\n     */\n    static createClientInfoDecodingError(caughtError: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code,\n            `${ClientAuthErrorMessage.clientInfoDecodingError.desc} Failed with error: ${caughtError}`);\n    }\n\n    /**\n     * Creates an error thrown if the client info is empty.\n     * @param rawClientInfo\n     */\n    static createClientInfoEmptyError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code,\n            `${ClientAuthErrorMessage.clientInfoEmptyError.desc}`);\n    }\n\n    /**\n     * Creates an error thrown when the id token extraction errors out.\n     * @param err\n     */\n    static createTokenParsingError(caughtExtractionError: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code,\n            `${ClientAuthErrorMessage.tokenParsingError.desc} Failed with error: ${caughtExtractionError}`);\n    }\n\n    /**\n     * Creates an error thrown when the id token string is null or empty.\n     * @param invalidRawTokenString\n     */\n    static createTokenNullOrEmptyError(invalidRawTokenString: string) : ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code,\n            `${ClientAuthErrorMessage.nullOrEmptyToken.desc} Raw Token Value: ${invalidRawTokenString}`);\n    }\n\n    /**\n     * Creates an error thrown when the endpoint discovery doesn't complete correctly.\n     */\n    static createEndpointDiscoveryIncompleteError(errDetail: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code,\n            `${ClientAuthErrorMessage.endpointResolutionError.desc} Detail: ${errDetail}`);\n    }\n\n    /**\n     * Creates an error thrown when the fetch client throws\n     */\n    static createNetworkError(endpoint: string, errDetail: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.networkError.code,\n            `${ClientAuthErrorMessage.networkError.desc} | Fetch client threw: ${errDetail} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n    }\n\n    /**\n     * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\n     */\n    static createUnableToGetOpenidConfigError(errDetail: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code,\n            `${ClientAuthErrorMessage.unableToGetOpenidConfigError.desc} Attempted to retrieve endpoints from: ${errDetail}`);\n    }\n\n    /**\n     * Creates an error thrown when the hash cannot be deserialized.\n     * @param hashParamObj\n     */\n    static createHashNotDeserializedError(hashParamObj: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code,\n            `${ClientAuthErrorMessage.hashNotDeserialized.desc} Given Object: ${hashParamObj}`);\n    }\n\n    /**\n     * Creates an error thrown when the state cannot be parsed.\n     * @param invalidState\n     */\n    static createInvalidStateError(invalidState: string, errorString?: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code,\n            `${ClientAuthErrorMessage.invalidStateError.desc} Invalid State: ${invalidState}, Root Err: ${errorString}`);\n    }\n\n    /**\n     * Creates an error thrown when two states do not match.\n     */\n    static createStateMismatchError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code,\n            ClientAuthErrorMessage.stateMismatchError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the state is not present\n     * @param missingState\n     */\n    static createStateNotFoundError(missingState: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code,\n            `${ClientAuthErrorMessage.stateNotFoundError.desc}:  ${missingState}`);\n    }\n\n    /**\n     * Creates an error thrown when the nonce does not match.\n     */\n    static createNonceMismatchError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code,\n            ClientAuthErrorMessage.nonceMismatchError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the mnonce is not present\n     * @param missingNonce\n     */\n    static createNonceNotFoundError(missingNonce: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code,\n            `${ClientAuthErrorMessage.nonceNotFoundError.desc}:  ${missingNonce}`);\n    }\n\n    /**\n     * Throws error when multiple tokens are in cache.\n     */\n    static createMultipleMatchingTokensInCacheError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code,\n            `${ClientAuthErrorMessage.multipleMatchingTokens.desc}.`);\n    }\n\n    /**\n     * Throws error when multiple accounts are in cache for the given params\n     */\n    static createMultipleMatchingAccountsInCacheError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code,\n            ClientAuthErrorMessage.multipleMatchingAccounts.desc);\n    }\n\n    /**\n     * Throws error when multiple appMetada are in cache for the given clientId.\n     */\n    static createMultipleMatchingAppMetadataInCacheError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code,\n            ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\n    }\n\n    /**\n     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\n     */\n    static createTokenRequestCannotBeMadeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\n    }\n\n    /**\n     * Throws error when attempting to append a null, undefined or empty scope to a set\n     * @param givenScope\n     */\n    static createAppendEmptyScopeToSetError(givenScope: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, `${ClientAuthErrorMessage.appendEmptyScopeError.desc} Given Scope: ${givenScope}`);\n    }\n\n    /**\n     * Throws error when attempting to append a null, undefined or empty scope to a set\n     * @param givenScope\n     */\n    static createRemoveEmptyScopeFromSetError(givenScope: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, `${ClientAuthErrorMessage.removeEmptyScopeError.desc} Given Scope: ${givenScope}`);\n    }\n\n    /**\n     * Throws error when attempting to append null or empty ScopeSet.\n     * @param appendError\n     */\n    static createAppendScopeSetError(appendError: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, `${ClientAuthErrorMessage.appendScopeSetError.desc} Detail Error: ${appendError}`);\n    }\n\n    /**\n     * Throws error if ScopeSet is null or undefined.\n     * @param givenScopeSet\n     */\n    static createEmptyInputScopeSetError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, `${ClientAuthErrorMessage.emptyInputScopeSetError.desc}`);\n    }\n\n    /**\n     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\n     */\n    static createDeviceCodeCancelledError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, `${ClientAuthErrorMessage.DeviceCodePollingCancelled.desc}`);\n    }\n\n    /**\n     * Throws error if device code is expired\n     */\n    static createDeviceCodeExpiredError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, `${ClientAuthErrorMessage.DeviceCodeExpired.desc}`);\n    }\n\n    /**\n     * Throws error if device code is expired\n     */\n    static createDeviceCodeUnknownError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, `${ClientAuthErrorMessage.DeviceCodeUnknownError.desc}`);\n    }\n\n    /**\n     * Throws error when silent requests are made without an account object\n     */\n    static createNoAccountInSilentRequestError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, `${ClientAuthErrorMessage.NoAccountInSilentRequest.desc}`);\n    }\n\n    /**\n     * Throws error when cache record is null or undefined.\n     */\n    static createNullOrUndefinedCacheRecord(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\n    }\n\n    /**\n     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\n     */\n    static createInvalidCacheEnvironmentError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\n    }\n\n    /**\n     * Throws error when account is not found in cache.\n     */\n    static createNoAccountFoundError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\n    }\n\n    /**\n     * Throws error if ICachePlugin not set on CacheManager.\n     */\n    static createCachePluginError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, `${ClientAuthErrorMessage.CachePluginError.desc}`);\n    }\n\n    /**\n     * Throws error if crypto object not found.\n     * @param operationName\n     */\n    static createNoCryptoObjectError(operationName: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, `${ClientAuthErrorMessage.noCryptoObj.desc}${operationName}`);\n    }\n\n    /**\n     * Throws error if cache type is invalid.\n     */\n    static createInvalidCacheTypeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, `${ClientAuthErrorMessage.invalidCacheType.desc}`);\n    }\n\n    /**\n     * Throws error if unexpected account type.\n     */\n    static createUnexpectedAccountTypeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, `${ClientAuthErrorMessage.unexpectedAccountType.desc}`);\n    }\n\n    /**\n     * Throws error if unexpected credential type.\n     */\n    static createUnexpectedCredentialTypeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, `${ClientAuthErrorMessage.unexpectedCredentialType.desc}`);\n    }\n\n    /**\n     * Throws error if client assertion is not valid.\n     */\n    static createInvalidAssertionError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, `${ClientAuthErrorMessage.invalidAssertion.desc}`);\n    }\n\n    /**\n     * Throws error if client assertion is not valid.\n     */\n    static createInvalidCredentialError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, `${ClientAuthErrorMessage.invalidClientCredential.desc}`);\n    }\n\n    /**\n     * Throws error if token cannot be retrieved from cache due to refresh being required.\n     */\n    static createRefreshRequiredError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\n    }\n\n    /**\n     * Throws error if the user defined timeout is reached.\n     */\n    static createUserTimeoutReachedError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\n    }\n\n    /*\n     * Throws error if token claims are not populated for a signed jwt generation\n     */\n    static createTokenClaimsRequiredError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\n    }\n\n    /**\n     * Throws error when the authorization code is missing from the server response\n     */\n    static createNoAuthCodeInServerResponseError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\n    }\n\n    static createBindingKeyNotRemovedError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.bindingKeyNotRemovedError.code, ClientAuthErrorMessage.bindingKeyNotRemovedError.desc);\n    }\n\n    /**\n     * Thrown when logout is attempted for an authority that doesnt have an end_session_endpoint\n     */\n    static createLogoutNotSupportedError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.logoutNotSupported.code, ClientAuthErrorMessage.logoutNotSupported.desc);\n    }\n}\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-common\";\nexport const version = \"6.1.0\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ProtocolMode } from \"./ProtocolMode\";\nimport { AzureRegionConfiguration } from \"./AzureRegionConfiguration\";\n\nexport type AuthorityOptions = {\n    protocolMode: ProtocolMode;\n    knownAuthorities: Array<string>;\n    cloudDiscoveryMetadata: string;\n    authorityMetadata: string;\n    azureRegionConfiguration?: AzureRegionConfiguration;\n};\n\nexport enum AzureCloudInstance {\n    // AzureCloudInstance is not specified.\n    None,\n\n    // Microsoft Azure public cloud\n    AzurePublic = \"https://login.microsoftonline.com\",\n\n    // Microsoft Chinese national cloud\n    AzureChina = \"https://login.chinacloudapi.cn\",\n\n    // Microsoft German national cloud (\"Black Forest\")\n    AzureGermany = \"https://login.microsoftonline.de\",\n\n    // US Government cloud\n    AzureUsGovernment = \"https://login.microsoftonline.us\",\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountCache, AccountFilter, CredentialFilter, CredentialCache, ValidCredentialType, AppMetadataFilter, AppMetadataCache } from \"./utils/CacheTypes\";\nimport { CacheRecord } from \"./entities/CacheRecord\";\nimport { CacheSchemaType, CredentialType, Constants, APP_METADATA, THE_FAMILY_ID, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme } from \"../utils/Constants\";\nimport { CredentialEntity } from \"./entities/CredentialEntity\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { AccountEntity } from \"./entities/AccountEntity\";\nimport { AccessTokenEntity } from \"./entities/AccessTokenEntity\";\nimport { IdTokenEntity } from \"./entities/IdTokenEntity\";\nimport { RefreshTokenEntity } from \"./entities/RefreshTokenEntity\";\nimport { AuthError } from \"../error/AuthError\";\nimport { ICacheManager } from \"./interface/ICacheManager\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { AccountInfo } from \"../account/AccountInfo\";\nimport { AppMetadataEntity } from \"./entities/AppMetadataEntity\";\nimport { ServerTelemetryEntity } from \"./entities/ServerTelemetryEntity\";\nimport { ThrottlingEntity } from \"./entities/ThrottlingEntity\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { AuthorityMetadataEntity } from \"./entities/AuthorityMetadataEntity\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\n/**\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\n */\nexport abstract class CacheManager implements ICacheManager {\n    protected clientId: string;\n    protected cryptoImpl: ICrypto;\n\n    constructor(clientId: string, cryptoImpl: ICrypto) {\n        this.clientId = clientId;\n        this.cryptoImpl = cryptoImpl;\n    }\n\n    /**\n     * fetch the account entity from the platform cache\n     *  @param accountKey\n     */\n    abstract getAccount(accountKey: string): AccountEntity | null;\n\n    /**\n     * set account entity in the platform cache\n     * @param account\n     */\n    abstract setAccount(account: AccountEntity): void;\n\n    /**\n     * fetch the idToken entity from the platform cache\n     * @param idTokenKey\n     */\n    abstract getIdTokenCredential(idTokenKey: string): IdTokenEntity | null;\n\n    /**\n     * set idToken entity to the platform cache\n     * @param idToken\n     */\n    abstract setIdTokenCredential(idToken: IdTokenEntity): void;\n\n    /**\n     * fetch the idToken entity from the platform cache\n     * @param accessTokenKey\n     */\n    abstract getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null;\n\n    /**\n     * set idToken entity to the platform cache\n     * @param accessToken\n     */\n    abstract setAccessTokenCredential(accessToken: AccessTokenEntity): void;\n\n    /**\n     * fetch the idToken entity from the platform cache\n     * @param refreshTokenKey\n     */\n    abstract getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null;\n\n    /**\n     * set idToken entity to the platform cache\n     * @param refreshToken\n     */\n    abstract setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void;\n\n    /**\n     * fetch appMetadata entity from the platform cache\n     * @param appMetadataKey\n     */\n    abstract getAppMetadata(appMetadataKey: string): AppMetadataEntity | null;\n\n    /**\n     * set appMetadata entity to the platform cache\n     * @param appMetadata\n     */\n    abstract setAppMetadata(appMetadata: AppMetadataEntity): void;\n\n    /**\n     * fetch server telemetry entity from the platform cache\n     * @param serverTelemetryKey\n     */\n    abstract getServerTelemetry(serverTelemetryKey: string): ServerTelemetryEntity | null;\n\n    /**\n     * set server telemetry entity to the platform cache\n     * @param serverTelemetryKey\n     * @param serverTelemetry\n     */\n    abstract setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void;\n\n    /**\n     * fetch cloud discovery metadata entity from the platform cache\n     * @param key\n     */\n    abstract getAuthorityMetadata(key: string): AuthorityMetadataEntity | null;\n\n    /**\n     * \n     */\n    abstract getAuthorityMetadataKeys(): Array<string>;\n\n    /**\n     * set cloud discovery metadata entity to the platform cache\n     * @param key\n     * @param value\n     */\n    abstract setAuthorityMetadata(key: string, value: AuthorityMetadataEntity): void;\n\n    /**\n     * fetch throttling entity from the platform cache\n     * @param throttlingCacheKey\n     */\n    abstract getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null;\n\n    /**\n     * set throttling entity to the platform cache\n     * @param throttlingCacheKey\n     * @param throttlingCache\n     */\n    abstract setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void;;\n\n    /**\n     * Function to remove an item from cache given its key.\n     * @param key\n     */\n    abstract removeItem(key: string, type?: string): boolean;\n\n    /**\n     * Function which returns boolean whether cache contains a specific key.\n     * @param key\n     */\n    abstract containsKey(key: string, type?: string): boolean;\n\n    /**\n     * Function which retrieves all current keys from the cache.\n     */\n    abstract getKeys(): string[];\n\n    /**\n     * Function which clears cache.\n     */\n    abstract clear(): Promise<void>;\n\n    /**\n     * Function which updates an outdated credential cache key\n     */\n    abstract updateCredentialCacheKey(currentCacheKey: string, credential: ValidCredentialType): string;\n\n    /**\n     * Returns all accounts in cache\n     */\n    getAllAccounts(): AccountInfo[] {\n        const currentAccounts: AccountCache = this.getAccountsFilteredBy();\n        const accountValues: AccountEntity[] = Object.keys(currentAccounts).map(accountKey => currentAccounts[accountKey]);\n        const numAccounts = accountValues.length;\n        if (numAccounts < 1) {\n            return [];\n        } else {\n            const allAccounts = accountValues.map<AccountInfo>((value) => {\n                const accountEntity = CacheManager.toObject<AccountEntity>(new AccountEntity(), value);\n                const accountInfo = accountEntity.getAccountInfo();\n                const idToken = this.readIdTokenFromCache(this.clientId, accountInfo);\n                if (idToken && !accountInfo.idTokenClaims) {\n                    accountInfo.idTokenClaims = new AuthToken(idToken.secret, this.cryptoImpl).claims;\n                }\n\n                return accountInfo;\n                \n            });\n            return allAccounts;\n        }\n    }\n\n    /**\n     * saves a cache record\n     * @param cacheRecord\n     */\n    async saveCacheRecord(cacheRecord: CacheRecord): Promise<void> {\n        if (!cacheRecord) {\n            throw ClientAuthError.createNullOrUndefinedCacheRecord();\n        }\n\n        if (!!cacheRecord.account) {\n            this.setAccount(cacheRecord.account);\n        }\n\n        if (!!cacheRecord.idToken) {\n            this.setIdTokenCredential(cacheRecord.idToken);\n        }\n\n        if (!!cacheRecord.accessToken) {\n            await this.saveAccessToken(cacheRecord.accessToken);\n        }\n\n        if (!!cacheRecord.refreshToken) {\n            this.setRefreshTokenCredential(cacheRecord.refreshToken);\n        }\n\n        if (!!cacheRecord.appMetadata) {\n            this.setAppMetadata(cacheRecord.appMetadata);\n        }\n    }\n\n    /**\n     * saves access token credential\n     * @param credential\n     */\n    private async saveAccessToken(credential: AccessTokenEntity): Promise<void> {\n        const currentTokenCache = this.getCredentialsFilteredBy({\n            clientId: credential.clientId,\n            credentialType: credential.credentialType,\n            environment: credential.environment,\n            homeAccountId: credential.homeAccountId,\n            realm: credential.realm,\n            tokenType: credential.tokenType,\n            requestedClaimsHash: credential.requestedClaimsHash\n        });\n\n        const currentScopes = ScopeSet.fromString(credential.target);\n        const currentAccessTokens: AccessTokenEntity[] = Object.keys(currentTokenCache.accessTokens).map(key => currentTokenCache.accessTokens[key]);\n\n        if (currentAccessTokens) {\n            const removedAccessTokens: Array<Promise<boolean>> = [];\n            currentAccessTokens.forEach((tokenEntity) => {\n                const tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n                    removedAccessTokens.push(this.removeCredential(tokenEntity));\n                }\n            });\n            await Promise.all(removedAccessTokens);\n        }\n        this.setAccessTokenCredential(credential);\n    }\n\n    /**\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\n     * @param homeAccountId\n     * @param environment\n     * @param realm\n     */\n    getAccountsFilteredBy(accountFilter?: AccountFilter): AccountCache {\n        return this.getAccountsFilteredByInternal(\n            accountFilter ? accountFilter.homeAccountId : \"\",\n            accountFilter ? accountFilter.environment : \"\",\n            accountFilter ? accountFilter.realm : \"\"\n        );\n    }\n\n    /**\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\n     * @param homeAccountId\n     * @param environment\n     * @param realm\n     */\n    private getAccountsFilteredByInternal(\n        homeAccountId?: string,\n        environment?: string,\n        realm?: string\n    ): AccountCache {\n        const allCacheKeys = this.getKeys();\n        const matchingAccounts: AccountCache = {};\n\n        allCacheKeys.forEach((cacheKey) => {\n            const entity: AccountEntity | null = this.getAccount(cacheKey);\n\n            if (!entity) {\n                return;\n            }\n\n            if (!!homeAccountId && !this.matchHomeAccountId(entity, homeAccountId)) {\n                return;\n            }\n\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\n                return;\n            }\n\n            if (!!realm && !this.matchRealm(entity, realm)) {\n                return;\n            }\n\n            matchingAccounts[cacheKey] = entity;\n        });\n\n        return matchingAccounts;\n    }\n\n    /**\n     * retrieve credentails matching all provided filters; if no filter is set, get all credentials\n     * @param homeAccountId\n     * @param environment\n     * @param credentialType\n     * @param clientId\n     * @param realm\n     * @param target\n     */\n    getCredentialsFilteredBy(filter: CredentialFilter): CredentialCache {\n        return this.getCredentialsFilteredByInternal(\n            filter.homeAccountId,\n            filter.environment,\n            filter.credentialType,\n            filter.clientId,\n            filter.familyId,\n            filter.realm,\n            filter.target,\n            filter.oboAssertion,\n            filter.tokenType,\n            filter.keyId,\n            filter.requestedClaimsHash\n        );\n    }\n\n    /**\n     * Support function to help match credentials\n     * @param homeAccountId\n     * @param environment\n     * @param credentialType\n     * @param clientId\n     * @param realm\n     * @param target\n     * @param oboAssertion\n     * @param tokenType\n     */\n    private getCredentialsFilteredByInternal(\n        homeAccountId?: string,\n        environment?: string,\n        credentialType?: string,\n        clientId?: string,\n        familyId?: string,\n        realm?: string,\n        target?: string,\n        oboAssertion?: string,\n        tokenType?: AuthenticationScheme,\n        keyId?: string,\n        requestedClaimsHash?: string\n    ): CredentialCache {\n        const allCacheKeys = this.getKeys();\n        const matchingCredentials: CredentialCache = {\n            idTokens: {},\n            accessTokens: {},\n            refreshTokens: {},\n        };\n        \n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-credential type cache entities\n            const credType = CredentialEntity.getCredentialType(cacheKey);\n\n            if (credType === Constants.NOT_DEFINED) {\n                return;\n            }\n\n            // Attempt retrieval\n            const entity = this.getSpecificCredential(cacheKey, credType);\n\n            if (!entity) {\n                return;\n            }\n\n            if (!!oboAssertion && !this.matchOboAssertion(entity, oboAssertion)) {\n                return;\n            }\n\n            if (!!homeAccountId && !this.matchHomeAccountId(entity, homeAccountId)) {\n                return;\n            }\n\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\n                return;\n            }\n\n            if (!!realm && !this.matchRealm(entity, realm)) {\n                return;\n            }\n\n            if (!!credentialType && !this.matchCredentialType(entity, credentialType)) {\n                return;\n            }\n\n            if (!!clientId && !this.matchClientId(entity, clientId)) {\n                return;\n            }\n\n            if (!!familyId && !this.matchFamilyId(entity, familyId)) {\n                return;\n            }\n\n            /*\n             * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\n             * Resource specific refresh tokens case will be added when the support is deemed necessary\n             */\n            if (!!target && !this.matchTarget(entity, target)) {\n                return;\n            }\n            \n            // If request OR cached entity has requested Claims Hash, check if they match\n            if (requestedClaimsHash || entity.requestedClaimsHash) {\n                // Don't match if either is undefined or they are different\n                if (entity.requestedClaimsHash !== requestedClaimsHash) {\n                    return;\n                }\n            }\n\n            // Access Token with Auth Scheme specific matching\n            if (credentialType === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\n                if(!!tokenType && !this.matchTokenType(entity, tokenType)) {\n                    return;\n                }\n\n                // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\n                if (tokenType === AuthenticationScheme.SSH) {\n                    if(keyId && !this.matchKeyId(entity, keyId)) {\n                        return;\n                    }\n                }\n            }\n\n            // At this point, the entity matches the request, update cache key if key schema has changed\n            const updatedCacheKey = this.updateCredentialCacheKey(cacheKey, entity);\n\n            switch (credType) {\n                case CredentialType.ID_TOKEN:\n                    matchingCredentials.idTokens[updatedCacheKey] = entity as IdTokenEntity;\n                    break;\n                case CredentialType.ACCESS_TOKEN:\n                case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                    matchingCredentials.accessTokens[updatedCacheKey] = entity as AccessTokenEntity;\n                    break;\n                case CredentialType.REFRESH_TOKEN:\n                    matchingCredentials.refreshTokens[updatedCacheKey] = entity as RefreshTokenEntity;\n                    break;\n            }\n        });\n\n        return matchingCredentials;\n    }\n\n    /**\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\n     * @param filter\n     */\n    getAppMetadataFilteredBy(filter: AppMetadataFilter): AppMetadataCache {\n        return this.getAppMetadataFilteredByInternal(\n            filter.environment,\n            filter.clientId,\n        );\n    }\n\n    /**\n     * Support function to help match appMetadata\n     * @param environment\n     * @param clientId\n     */\n    private getAppMetadataFilteredByInternal(\n        environment?: string,\n        clientId?: string\n    ): AppMetadataCache {\n\n        const allCacheKeys = this.getKeys();\n        const matchingAppMetadata: AppMetadataCache = {};\n\n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-appMetadata type cache entities\n            if (!this.isAppMetadata(cacheKey)) {\n                return;\n            }\n\n            // Attempt retrieval\n            const entity = this.getAppMetadata(cacheKey);\n\n            if (!entity) {\n                return;\n            }\n\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\n                return;\n            }\n\n            if (!!clientId && !this.matchClientId(entity, clientId)) {\n                return;\n            }\n\n            matchingAppMetadata[cacheKey] = entity;\n\n        });\n\n        return matchingAppMetadata;\n    }\n\n    /**\n     * retrieve authorityMetadata that contains a matching alias\n     * @param filter\n     */\n    getAuthorityMetadataByAlias(host: string): AuthorityMetadataEntity | null {\n        const allCacheKeys = this.getAuthorityMetadataKeys();\n        let matchedEntity = null;\n\n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-authorityMetadata type cache entities\n            if (!this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(this.clientId) === -1) {\n                return;\n            }\n\n            // Attempt retrieval\n            const entity = this.getAuthorityMetadata(cacheKey);\n\n            if (!entity) {\n                return;\n            }\n\n            if (entity.aliases.indexOf(host) === -1) {\n                return;\n            }\n\n            matchedEntity = entity;\n\n        });\n        \n        return matchedEntity;\n    }\n\n    /**\n     * Removes all accounts and related tokens from cache.\n     */\n    async removeAllAccounts(): Promise<boolean> {\n        const allCacheKeys = this.getKeys();\n        const removedAccounts: Array<Promise<boolean>> = [];\n\n        allCacheKeys.forEach((cacheKey) => {\n            const entity = this.getAccount(cacheKey);\n            if (!entity) {\n                return;\n            }\n            removedAccounts.push(this.removeAccount(cacheKey));\n        });\n        \n        await Promise.all(removedAccounts);\n        return true;\n    }\n\n    /**\n     * returns a boolean if the given account is removed\n     * @param account\n     */\n    async removeAccount(accountKey: string): Promise<boolean> {\n        const account = this.getAccount(accountKey);\n        if (!account) {\n            throw ClientAuthError.createNoAccountFoundError();\n        }\n        return (await this.removeAccountContext(account) && this.removeItem(accountKey, CacheSchemaType.ACCOUNT));\n    }\n\n    /**\n     * returns a boolean if the given account is removed\n     * @param account\n     */\n    async removeAccountContext(account: AccountEntity): Promise<boolean> {\n        const allCacheKeys = this.getKeys();\n        const accountId = account.generateAccountId();\n        const removedCredentials: Array<Promise<boolean>> = [];\n\n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-credential type cache entities\n            const credType = CredentialEntity.getCredentialType(cacheKey);\n            if (credType === Constants.NOT_DEFINED) {\n                return;\n            }\n\n            const cacheEntity = this.getSpecificCredential(cacheKey, credType);\n            if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) {\n                removedCredentials.push(this.removeCredential(cacheEntity));\n            }\n        });\n\n        await Promise.all(removedCredentials);\n        return true;\n    }\n\n    /**\n     * returns a boolean if the given credential is removed\n     * @param credential\n     */\n    async removeCredential(credential: CredentialEntity): Promise<boolean> {\n        const key = credential.generateCredentialKey();\n\n        // Remove Token Binding Key from key store for PoP Tokens Credentials\n        if (credential.credentialType.toLowerCase() === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) {\n            if(credential.tokenType === AuthenticationScheme.POP) {\n                const accessTokenWithAuthSchemeEntity = credential as AccessTokenEntity;\n                const kid = accessTokenWithAuthSchemeEntity.keyId;\n    \n                if (kid) {\n                    try {\n                        await this.cryptoImpl.removeTokenBindingKey(kid);\n                    } catch (error) {\n                        throw ClientAuthError.createBindingKeyNotRemovedError();\n                    }\n                }\n            }\n        }\n\n        return this.removeItem(key, CacheSchemaType.CREDENTIAL);\n    }\n\n    /**\n     * Removes all app metadata objects from cache.\n     */\n    removeAppMetadata(): boolean {\n        const allCacheKeys = this.getKeys();\n        allCacheKeys.forEach((cacheKey) => {\n            if (this.isAppMetadata(cacheKey)) {\n                this.removeItem(cacheKey, CacheSchemaType.APP_METADATA);\n            }\n        });\n\n        return true;\n    }\n\n    /**\n     * Retrieve the cached credentials into a cacherecord\n     * @param account\n     * @param clientId\n     * @param scopes\n     * @param environment\n     * @param authScheme\n     */\n    readCacheRecord(account: AccountInfo, clientId: string, request: BaseAuthRequest, environment: string): CacheRecord {\n\n        const cachedAccount = this.readAccountFromCache(account);\n        const cachedIdToken = this.readIdTokenFromCache(clientId, account);\n        const cachedAccessToken = this.readAccessTokenFromCache(clientId, account, request);\n        const cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);\n        const cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);\n\n        if (cachedAccount && cachedIdToken) {\n            cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\n        }\n\n        return {\n            account: cachedAccount,\n            idToken: cachedIdToken,\n            accessToken: cachedAccessToken,\n            refreshToken: cachedRefreshToken,\n            appMetadata: cachedAppMetadata,\n        };\n    }\n\n    /**\n     * Retrieve AccountEntity from cache\n     * @param account\n     */\n    readAccountFromCache(account: AccountInfo): AccountEntity | null {\n        const accountKey: string = AccountEntity.generateAccountCacheKey(account);\n        return this.getAccount(accountKey);\n    }\n\n    /**\n     * Retrieve IdTokenEntity from cache\n     * @param clientId\n     * @param account\n     * @param inputRealm\n     */\n    readIdTokenFromCache(clientId: string, account: AccountInfo): IdTokenEntity | null {\n        const idTokenFilter: CredentialFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: CredentialType.ID_TOKEN,\n            clientId: clientId,\n            realm: account.tenantId,\n        };\n\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(idTokenFilter);\n        const idTokens = Object.keys(credentialCache.idTokens).map((key) => credentialCache.idTokens[key]);\n        const numIdTokens = idTokens.length;\n\n        if (numIdTokens < 1) {\n            return null;\n        } else if (numIdTokens > 1) {\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n        }\n\n        return idTokens[0] as IdTokenEntity;\n    }\n\n    /**\n     * Retrieve AccessTokenEntity from cache\n     * @param clientId\n     * @param account\n     * @param scopes\n     * @param authScheme\n     */\n    readAccessTokenFromCache(clientId: string, account: AccountInfo, request: BaseAuthRequest): AccessTokenEntity | null {\n        const scopes =  new ScopeSet(request.scopes || []);\n        const authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n        /*\n         * Distinguish between Bearer and PoP/SSH token cache types\n         * Cast to lowercase to handle \"bearer\" from ADFS\n         */\n        const credentialType = (authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n\n        const accessTokenFilter: CredentialFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: credentialType,\n            clientId,\n            realm: account.tenantId,\n            target: scopes.printScopesLowerCase(),\n            tokenType: authScheme,\n            keyId: request.sshKid,\n            requestedClaimsHash: request.requestedClaimsHash\n        };\n\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(accessTokenFilter);\n        \n        const accessTokens = Object.keys(credentialCache.accessTokens).map((key) => credentialCache.accessTokens[key]);\n        \n        const numAccessTokens = accessTokens.length;\n        if (numAccessTokens < 1) {\n            return null;\n        } else if (numAccessTokens > 1) {\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n        }\n\n        return accessTokens[0] as AccessTokenEntity;\n    }\n\n    /**\n     * Helper to retrieve the appropriate refresh token from cache\n     * @param clientId\n     * @param account\n     * @param familyRT\n     */\n    readRefreshTokenFromCache(clientId: string, account: AccountInfo, familyRT: boolean): RefreshTokenEntity | null {\n        const id = familyRT ? THE_FAMILY_ID : undefined;\n        const refreshTokenFilter: CredentialFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: CredentialType.REFRESH_TOKEN,\n            clientId: clientId,\n            familyId: id\n        };\n\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);\n        const refreshTokens = Object.keys(credentialCache.refreshTokens).map((key) => credentialCache.refreshTokens[key]);\n\n        const numRefreshTokens = refreshTokens.length;\n        if (numRefreshTokens < 1) {\n            return null;\n        }\n        // address the else case after remove functions address environment aliases\n\n        return refreshTokens[0] as RefreshTokenEntity;\n    }\n\n    /**\n     * Retrieve AppMetadataEntity from cache\n     */\n    readAppMetadataFromCache(environment: string, clientId: string): AppMetadataEntity | null {\n        const appMetadataFilter: AppMetadataFilter = {\n            environment,\n            clientId,\n        };\n\n        const appMetadata: AppMetadataCache = this.getAppMetadataFilteredBy(appMetadataFilter);\n        const appMetadataEntries: AppMetadataEntity[] = Object.keys(appMetadata).map((key) => appMetadata[key]);\n\n        const numAppMetadata = appMetadataEntries.length;\n        if (numAppMetadata < 1) {\n            return null;\n        } else if (numAppMetadata > 1) {\n            throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\n        }\n\n        return appMetadataEntries[0] as AppMetadataEntity;\n    }\n\n    /**\n     * Return the family_id value associated  with FOCI\n     * @param environment\n     * @param clientId\n     */\n    isAppMetadataFOCI(environment: string, clientId: string): boolean {\n        const appMetadata = this.readAppMetadataFromCache(environment, clientId);\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\n    }\n\n    /**\n     * helper to match account ids\n     * @param value\n     * @param homeAccountId\n     */\n    private matchHomeAccountId(entity: AccountEntity | CredentialEntity, homeAccountId: string): boolean {\n        return !!(entity.homeAccountId && homeAccountId === entity.homeAccountId);\n    }\n\n    /**\n     * helper to match assertion\n     * @param value\n     * @param oboAssertion\n     */\n    private matchOboAssertion(entity: AccountEntity | CredentialEntity, oboAssertion: string): boolean {\n        return !!(entity.oboAssertion && oboAssertion === entity.oboAssertion);\n    }\n\n    /**\n     * helper to match environment\n     * @param value\n     * @param environment\n     */\n    private matchEnvironment(entity: AccountEntity | CredentialEntity | AppMetadataEntity, environment: string): boolean {\n        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * helper to match credential type\n     * @param entity\n     * @param credentialType\n     */\n    private matchCredentialType(entity: CredentialEntity, credentialType: string): boolean {\n        return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());\n    }\n\n    /**\n     * helper to match client ids\n     * @param entity\n     * @param clientId\n     */\n    private matchClientId(entity: CredentialEntity | AppMetadataEntity, clientId: string): boolean {\n        return !!(entity.clientId && clientId === entity.clientId);\n    }\n\n    /**\n     * helper to match family ids\n     * @param entity\n     * @param familyId\n     */\n    private matchFamilyId(entity: CredentialEntity | AppMetadataEntity, familyId: string): boolean {\n        return !!(entity.familyId && familyId === entity.familyId);\n    }\n\n    /**\n     * helper to match realm\n     * @param entity\n     * @param realm\n     */\n    private matchRealm(entity: AccountEntity | CredentialEntity, realm: string): boolean {\n        return !!(entity.realm && realm === entity.realm);\n    }\n\n    /**\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\n     * @param entity\n     * @param target\n     */\n    private matchTarget(entity: CredentialEntity, target: string): boolean {\n        const isNotAccessTokenCredential = (entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\n\n        if ( isNotAccessTokenCredential || !entity.target) {\n            return false;\n        }\n\n        const entityScopeSet: ScopeSet = ScopeSet.fromString(entity.target);\n        const requestTargetScopeSet: ScopeSet = ScopeSet.fromString(target);\n\n        if (!requestTargetScopeSet.containsOnlyOIDCScopes()) {\n            requestTargetScopeSet.removeOIDCScopes(); // ignore OIDC scopes\n        } else {\n            requestTargetScopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n        }\n        return entityScopeSet.containsScopeSet(requestTargetScopeSet);\n    }\n\n    /**\n     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\n     * @param entity \n     * @param tokenType \n     */\n    private matchTokenType(entity: CredentialEntity, tokenType: AuthenticationScheme): boolean {\n        return !!(entity.tokenType && entity.tokenType === tokenType);\n    }\n\n    /**\n     * Returns true if the credential's keyId matches the one in the request, false otherwise\n     * @param entity \n     * @param tokenType \n     */\n    private matchKeyId(entity: CredentialEntity, keyId: string): boolean {\n        return !!(entity.keyId && entity.keyId === keyId);\n    }\n\n    /**\n     * returns if a given cache entity is of the type appmetadata\n     * @param key\n     */\n    private isAppMetadata(key: string): boolean {\n        return key.indexOf(APP_METADATA) !== -1;\n    }\n\n    /**\n     * returns if a given cache entity is of the type authoritymetadata\n     * @param key\n     */\n    protected isAuthorityMetadata(key: string): boolean {\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n    }\n\n    /**\n     * returns cache key used for cloud instance metadata\n     */\n    generateAuthorityMetadataCacheKey(authority: string): string {\n        return `${AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\n    }\n\n    /**\n     * Returns the specific credential (IdToken/AccessToken/RefreshToken) from the cache\n     * @param key\n     * @param credType\n     */\n    private getSpecificCredential(key: string, credType: string): ValidCredentialType | null {\n        switch (credType) {\n            case CredentialType.ID_TOKEN: {\n                return this.getIdTokenCredential(key);\n            }\n            case CredentialType.ACCESS_TOKEN:\n            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME: {\n                return this.getAccessTokenCredential(key);\n            }\n            case CredentialType.REFRESH_TOKEN: {\n                return this.getRefreshTokenCredential(key);\n            }\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * Helper to convert serialized data to object\n     * @param obj\n     * @param json\n     */\n    static toObject<T>(obj: T, json: object): T {\n        for (const propertyName in json) {\n            obj[propertyName] = json[propertyName];\n        }\n        return obj;\n    }\n}\n\nexport class DefaultStorageClass extends CacheManager {\n    setAccount(): void {\n        const notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAccount(): AccountEntity {\n        const notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setIdTokenCredential(): void {\n        const notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getIdTokenCredential(): IdTokenEntity {\n        const notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setAccessTokenCredential(): void {\n        const notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAccessTokenCredential(): AccessTokenEntity {\n        const notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setRefreshTokenCredential(): void {\n        const notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getRefreshTokenCredential(): RefreshTokenEntity {\n        const notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setAppMetadata(): void {\n        const notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAppMetadata(): AppMetadataEntity {\n        const notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setServerTelemetry(): void {\n        const notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getServerTelemetry(): ServerTelemetryEntity {\n        const notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setAuthorityMetadata(): void {\n        const notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAuthorityMetadata(): AuthorityMetadataEntity | null {\n        const notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAuthorityMetadataKeys(): Array<string> {\n        const notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setThrottlingCache(): void {\n        const notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getThrottlingCache(): ThrottlingEntity {\n        const notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    removeItem(): boolean {\n        const notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    containsKey(): boolean {\n        const notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getKeys(): string[] {\n        const notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    async clear(): Promise<void> {\n        const notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    updateCredentialCacheKey(): string {\n        const notImplErr = \"Storage interface - updateCredentialCacheKey() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Separators, CredentialType, CacheType, Constants, AuthenticationScheme } from \"../../utils/Constants\";\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\n\n/**\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\n *\n * Key:Value Schema:\n *\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      familyId: Family ID identifier, usually only used for refresh tokens\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\n *      oboAssertion: access token passed in as part of OBO request\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\n *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request\n * }\n */\nexport class CredentialEntity {\n    homeAccountId: string;\n    environment: string;\n    credentialType: CredentialType;\n    clientId: string;\n    secret: string;\n    familyId?: string;\n    realm?: string;\n    target?: string;\n    oboAssertion?: string;\n    tokenType?: AuthenticationScheme;\n    keyId?: string;\n    requestedClaimsHash?: string;\n\n    /**\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n     */\n    generateAccountId(): string {\n        return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\n    }\n\n    /**\n     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\n     */\n    generateCredentialId(): string {\n        return CredentialEntity.generateCredentialIdForCacheKey(\n            this.credentialType,\n            this.clientId,\n            this.realm,\n            this.familyId\n        );\n    }\n\n    /**\n     * Generate target key component as per schema: <target>\n     */\n    generateTarget(): string {\n        return CredentialEntity.generateTargetForCacheKey(this.target);\n    }\n\n    /**\n     * generates credential key\n     */\n    generateCredentialKey(): string {\n        return CredentialEntity.generateCredentialCacheKey(\n            this.homeAccountId,\n            this.environment,\n            this.credentialType,\n            this.clientId,\n            this.realm,\n            this.target,\n            this.familyId,\n            this.tokenType,\n            this.requestedClaimsHash\n        );\n    }\n\n    /**\n     * returns the type of the cache (in this case credential)\n     */\n    generateType(): number {\n        switch (this.credentialType) {\n            case CredentialType.ID_TOKEN:\n                return CacheType.ID_TOKEN;\n            case CredentialType.ACCESS_TOKEN:\n            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                return CacheType.ACCESS_TOKEN;\n            case CredentialType.REFRESH_TOKEN:\n                return CacheType.REFRESH_TOKEN;\n            default: {\n                throw ClientAuthError.createUnexpectedCredentialTypeError();\n            }\n        }\n    }\n\n    /**\n     * helper function to return `CredentialType`\n     * @param key\n     */\n    static getCredentialType(key: string): string {\n        // First keyword search will match all \"AccessToken\" and \"AccessToken_With_AuthScheme\" credentials\n        if (key.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) !== -1) {\n            // Perform second search to differentiate between \"AccessToken\" and \"AccessToken_With_AuthScheme\" credential types\n            if (key.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) !== -1) {\n                return CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n            }\n            return CredentialType.ACCESS_TOKEN;\n        } else if (key.indexOf(CredentialType.ID_TOKEN.toLowerCase()) !== -1) {\n            return CredentialType.ID_TOKEN;\n        } else if (key.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) !== -1) {\n            return CredentialType.REFRESH_TOKEN;\n        }\n\n        return Constants.NOT_DEFINED;\n    }\n\n    /**\n     * generates credential key\n     * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\n     */\n    static generateCredentialCacheKey(\n        homeAccountId: string,\n        environment: string,\n        credentialType: CredentialType,\n        clientId: string,\n        realm?: string,\n        target?: string,\n        familyId?: string,\n        tokenType?: AuthenticationScheme,\n        requestedClaimsHash?: string\n    ): string {\n        const credentialKey = [\n            this.generateAccountIdForCacheKey(homeAccountId, environment),\n            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),\n            this.generateTargetForCacheKey(target),\n            this.generateClaimsHashForCacheKey(requestedClaimsHash),\n            this.generateSchemeForCacheKey(tokenType)\n        ];\n\n        return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * generates Account Id for keys\n     * @param homeAccountId\n     * @param environment\n     */\n    private static generateAccountIdForCacheKey(\n        homeAccountId: string,\n        environment: string\n    ): string {\n        const accountId: Array<string> = [homeAccountId, environment];\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Generates Credential Id for keys\n     * @param credentialType\n     * @param realm\n     * @param clientId\n     * @param familyId\n     */\n    private static generateCredentialIdForCacheKey(\n        credentialType: CredentialType,\n        clientId: string,\n        realm?: string,\n        familyId?: string\n    ): string {\n        const clientOrFamilyId =\n            credentialType === CredentialType.REFRESH_TOKEN\n                ? familyId || clientId\n                : clientId;\n        const credentialId: Array<string> = [\n            credentialType,\n            clientOrFamilyId,\n            realm || \"\",\n        ];\n\n        return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Generate target key component as per schema: <target>\n     */\n    private static generateTargetForCacheKey(scopes?: string): string {\n        return (scopes || \"\").toLowerCase();\n    }\n\n    /**\n     * Generate requested claims key component as per schema: <requestedClaims>\n     */\n    private static generateClaimsHashForCacheKey(requestedClaimsHash?: string): string {\n        return(requestedClaimsHash || \"\").toLowerCase();\n    }\n\n    /**\n     * Generate scheme key componenet as per schema: <scheme>\n     */\n    private static generateSchemeForCacheKey(tokenType?: string): string {\n        /*\n         * PoP Tokens and SSH certs include scheme in cache key\n         * Cast to lowercase to handle \"bearer\" from ADFS\n         */\n        return (tokenType && tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? tokenType.toLowerCase() : \"\";\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { OIDC_SCOPES } from \"../utils/Constants\";\n\n/**\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\n * to ensure uniqueness of strings.\n */\nexport class ScopeSet {\n    // Scopes as a Set of strings\n    private scopes: Set<string>;\n\n    constructor(inputScopes: Array<string>) {\n        // Filter empty string and null/undefined array items\n        const scopeArr = inputScopes ? StringUtils.trimArrayEntries([...inputScopes]) : [];\n        const filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n\n        // Validate and filter scopes (validate function throws if validation fails)\n        this.validateInputScopes(filteredInput);\n\n        this.scopes = new Set<string>(); // Iterator in constructor not supported by IE11\n        filteredInput.forEach(scope => this.scopes.add(scope));\n    }\n\n    /**\n     * Factory method to create ScopeSet from space-delimited string\n     * @param inputScopeString\n     * @param appClientId\n     * @param scopesRequired\n     */\n    static fromString(inputScopeString: string): ScopeSet {\n        const scopeString = inputScopeString || \"\";\n        const inputScopes: Array<string> = scopeString.split(\" \");\n        return new ScopeSet(inputScopes);\n    }\n\n    /**\n     * Used to validate the scopes input parameter requested  by the developer.\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n     */\n    private validateInputScopes(inputScopes: Array<string>): void {\n        // Check if scopes are required but not given or is an empty array\n        if (!inputScopes || inputScopes.length < 1) {\n            throw ClientConfigurationError.createEmptyScopesArrayError();\n        }\n    }\n\n    /**\n     * Check if a given scope is present in this set of scopes.\n     * @param scope\n     */\n    containsScope(scope: string): boolean {\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n        // compare lowercase scopes\n        return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n    }\n\n    /**\n     * Check if a set of scopes is present in this set of scopes.\n     * @param scopeSet\n     */\n    containsScopeSet(scopeSet: ScopeSet): boolean {\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\n            return false;\n        }\n\n        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(scope => this.containsScope(scope)));\n    }\n\n    /**\n     * Check if set of scopes contains only the defaults\n     */\n    containsOnlyOIDCScopes(): boolean {\n        let defaultScopeCount = 0;\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            if (this.containsScope(defaultScope)) {\n                defaultScopeCount += 1;\n            }\n        });\n\n        return this.scopes.size === defaultScopeCount;\n    }\n\n    /**\n     * Appends single scope if passed\n     * @param newScope\n     */\n    appendScope(newScope: string): void {\n        if (!StringUtils.isEmpty(newScope)) {\n            this.scopes.add(newScope.trim());\n        }\n    }\n\n    /**\n     * Appends multiple scopes if passed\n     * @param newScopes\n     */\n    appendScopes(newScopes: Array<string>): void {\n        try {\n            newScopes.forEach(newScope => this.appendScope(newScope));\n        } catch (e) {\n            throw ClientAuthError.createAppendScopeSetError(e);\n        }\n    }\n\n    /**\n     * Removes element from set of scopes.\n     * @param scope\n     */\n    removeScope(scope: string): void {\n        if (StringUtils.isEmpty(scope)) {\n            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n        }\n        this.scopes.delete(scope.trim());\n    }\n\n    /**\n     * Removes default scopes from set of scopes\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\n     */\n    removeOIDCScopes(): void {\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            this.scopes.delete(defaultScope);\n        });\n    }\n\n    /**\n     * Combines an array of scopes with the current set of scopes.\n     * @param otherScopes\n     */\n    unionScopeSets(otherScopes: ScopeSet): Set<string> {\n        if (!otherScopes) {\n            throw ClientAuthError.createEmptyInputScopeSetError();\n        }\n        const unionScopes = new Set<string>(); // Iterator in constructor not supported in IE11\n        otherScopes.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n        this.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n        return unionScopes;\n    }\n\n    /**\n     * Check if scopes intersect between this set and another.\n     * @param otherScopes\n     */\n    intersectingScopeSets(otherScopes: ScopeSet): boolean {\n        if (!otherScopes) {\n            throw ClientAuthError.createEmptyInputScopeSetError();\n        }\n        \n        // Do not allow OIDC scopes to be the only intersecting scopes\n        if (!otherScopes.containsOnlyOIDCScopes()) {\n            otherScopes.removeOIDCScopes();\n        }\n        const unionScopes = this.unionScopeSets(otherScopes);\n        const sizeOtherScopes = otherScopes.getScopeCount();\n        const sizeThisScopes = this.getScopeCount();\n        const sizeUnionScopes = unionScopes.size;\n        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);\n    }\n\n    /**\n     * Returns size of set of scopes.\n     */\n    getScopeCount(): number {\n        return this.scopes.size;\n    }\n\n    /**\n     * Returns the scopes as an array of string values\n     */\n    asArray(): Array<string> {\n        const array: Array<string> = [];\n        this.scopes.forEach(val => array.push(val));\n        return array;\n    }\n\n    /**\n     * Prints scopes into a space-delimited string\n     */\n    printScopes(): string {\n        if (this.scopes) {\n            const scopeArr = this.asArray();\n            return scopeArr.join(\" \");\n        }\n        return \"\";\n    }\n\n    /**\n     * Prints scopes into a space-delimited lower-case string (used for caching)\n     */\n    printScopesLowerCase(): string {\n        return this.printScopes().toLowerCase();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientAuthError } from \"./ClientAuthError\";\n\n/**\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\n */\nexport const ClientConfigurationErrorMessage = {\n    redirectUriNotSet: {\n        code: \"redirect_uri_empty\",\n        desc: \"A redirect URI is required for all calls, and none has been set.\"\n    },\n    postLogoutUriNotSet: {\n        code: \"post_logout_uri_empty\",\n        desc: \"A post logout redirect has not been set.\"\n    },\n    claimsRequestParsingError: {\n        code: \"claims_request_parsing_error\",\n        desc: \"Could not parse the given claims request object.\"\n    },\n    authorityUriInsecure: {\n        code: \"authority_uri_insecure\",\n        desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\n    },\n    urlParseError: {\n        code: \"url_parse_error\",\n        desc: \"URL could not be parsed into appropriate segments.\"\n    },\n    urlEmptyError: {\n        code: \"empty_url_error\",\n        desc: \"URL was empty or null.\"\n    },\n    emptyScopesError: {\n        code: \"empty_input_scopes_error\",\n        desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\"\n    },\n    nonArrayScopesError: {\n        code: \"nonarray_input_scopes_error\",\n        desc: \"Scopes cannot be passed as non-array.\"\n    },\n    clientIdSingleScopeError: {\n        code: \"clientid_input_scopes_error\",\n        desc: \"Client ID can only be provided as a single scope.\"\n    },\n    invalidPrompt: {\n        code: \"invalid_prompt_value\",\n        desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create' and 'none'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\n    },\n    invalidClaimsRequest: {\n        code: \"invalid_claims\",\n        desc: \"Given claims parameter must be a stringified JSON object.\"\n    },\n    tokenRequestEmptyError: {\n        code: \"token_request_empty\",\n        desc: \"Token request was empty and not found in cache.\"\n    },\n    logoutRequestEmptyError: {\n        code: \"logout_request_empty\",\n        desc: \"The logout request was null or undefined.\"\n    },\n    invalidCodeChallengeMethod: {\n        code: \"invalid_code_challenge_method\",\n        desc: \"code_challenge_method passed is invalid. Valid values are \\\"plain\\\" and \\\"S256\\\".\"\n    },\n    invalidCodeChallengeParams: {\n        code: \"pkce_params_missing\",\n        desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\"\n    },\n    invalidCloudDiscoveryMetadata: {\n        code: \"invalid_cloud_discovery_metadata\",\n        desc: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\"\n    },\n    invalidAuthorityMetadata: {\n        code: \"invalid_authority_metadata\",\n        desc: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\"\n    },\n    untrustedAuthority: {\n        code: \"untrusted_authority\",\n        desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\"\n    },\n    invalidAzureCloudInstance: {\n        code: \"invalid_azure_cloud_instance\",\n        desc: \"Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values\"\n    },\n    missingSshJwk: {\n        code: \"missing_ssh_jwk\",\n        desc: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\"\n    },\n    missingSshKid: {\n        code: \"missing_ssh_kid\",\n        desc: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\"\n    },\n    missingNonceAuthenticationHeader: {\n        code: \"missing_nonce_authentication_header\",\n        desc: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\"\n    },\n    invalidAuthenticationHeader: {\n        code: \"invalid_authentication_header\",\n        desc: \"Invalid authentication header provided\"\n    }\n};\n\n/**\n * Error thrown when there is an error in configuration of the MSAL.js library.\n */\nexport class ClientConfigurationError extends ClientAuthError {\n\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n        this.name = \"ClientConfigurationError\";\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n    }\n\n    /**\n     * Creates an error thrown when the redirect uri is empty (not set by caller)\n     */\n    static createRedirectUriEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code,\n            ClientConfigurationErrorMessage.redirectUriNotSet.desc);\n    }\n\n    /**\n     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\n     */\n    static createPostLogoutRedirectUriEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code,\n            ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\n    }\n\n    /**\n     * Creates an error thrown when the claims request could not be successfully parsed\n     */\n    static createClaimsRequestParsingError(claimsRequestParseError: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code,\n            `${ClientConfigurationErrorMessage.claimsRequestParsingError.desc} Given value: ${claimsRequestParseError}`);\n    }\n\n    /**\n     * Creates an error thrown if authority uri is given an insecure protocol.\n     * @param urlString\n     */\n    static createInsecureAuthorityUriError(urlString: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code,\n            `${ClientConfigurationErrorMessage.authorityUriInsecure.desc} Given URI: ${urlString}`);\n    }\n\n    /**\n     * Creates an error thrown if URL string does not parse into separate segments.\n     * @param urlString\n     */\n    static createUrlParseError(urlParseError: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code,\n            `${ClientConfigurationErrorMessage.urlParseError.desc} Given Error: ${urlParseError}`);\n    }\n\n    /**\n     * Creates an error thrown if URL string is empty or null.\n     * @param urlString\n     */\n    static createUrlEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code,\n            ClientConfigurationErrorMessage.urlEmptyError.desc);\n    }\n\n    /**\n     * Error thrown when scopes are empty.\n     * @param scopesValue\n     */\n    static createEmptyScopesArrayError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code,\n            `${ClientConfigurationErrorMessage.emptyScopesError.desc}`);\n    }\n\n    /**\n     * Error thrown when client id scope is not provided as single scope.\n     * @param inputScopes\n     */\n    static createClientIdSingleScopeError(inputScopes: Array<string>): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code,\n            `${ClientConfigurationErrorMessage.clientIdSingleScopeError.desc} Given Scopes: ${inputScopes}`);\n    }\n\n    /**\n     * Error thrown when prompt is not an allowed type.\n     * @param promptValue\n     */\n    static createInvalidPromptError(promptValue: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code,\n            `${ClientConfigurationErrorMessage.invalidPrompt.desc} Given value: ${promptValue}`);\n    }\n\n    /**\n     * Creates error thrown when claims parameter is not a stringified JSON object\n     */\n    static createInvalidClaimsRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code,\n            ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\n    }\n\n    /**\n     * Throws error when token request is empty and nothing cached in storage.\n     */\n    static createEmptyLogoutRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.logoutRequestEmptyError.code,\n            ClientConfigurationErrorMessage.logoutRequestEmptyError.desc\n        );\n    }\n\n    /**\n     * Throws error when token request is empty and nothing cached in storage.\n     */\n    static createEmptyTokenRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.tokenRequestEmptyError.code,\n            ClientConfigurationErrorMessage.tokenRequestEmptyError.desc\n        );\n    }\n\n    /**\n     * Throws error when an invalid code_challenge_method is passed by the user\n     */\n    static createInvalidCodeChallengeMethodError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code,\n            ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc\n        );\n    }\n\n    /**\n     * Throws error when both params: code_challenge and code_challenge_method are not passed together\n     */\n    static createInvalidCodeChallengeParamsError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidCodeChallengeParams.code,\n            ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc\n        );\n    }\n\n    /**\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\n     */\n    static createInvalidCloudDiscoveryMetadataError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code,\n            ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\n    }\n\n    /**\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\n     */\n    static createInvalidAuthorityMetadataError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code,\n            ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\n    }\n\n    /**\n     * Throws error when provided authority is not a member of the trusted host list\n     */\n    static createUntrustedAuthorityError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code,\n            ClientConfigurationErrorMessage.untrustedAuthority.desc);\n    }\n\n    /**\n     * Throws error when the AzureCloudInstance is set to an invalid value\n     */\n    static createInvalidAzureCloudInstanceError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAzureCloudInstance.code,\n            ClientConfigurationErrorMessage.invalidAzureCloudInstance.desc);\n    }\n\n    /**\n     * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request\n     */\n    static createMissingSshJwkError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshJwk.code,\n            ClientConfigurationErrorMessage.missingSshJwk.desc);\n    }\n\n    /**\n     * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request\n     */\n    static createMissingSshKidError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshKid.code,\n            ClientConfigurationErrorMessage.missingSshKid.desc);\n    }\n\n    /**\n     * Throws error when provided headers don't contain a header that a server nonce can be extracted from\n     */\n    static createMissingNonceAuthenticationHeadersError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code,\n            ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc);\n    }\n\n    /**\n     * Throws error when a provided header is invalid in any way\n     */\n    static createInvalidAuthenticationHeaderError(invalidHeaderName: string, details: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthenticationHeader.code,\n            `${ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc}. Invalid header: ${invalidHeaderName}. Details: ${details}`);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Separators,\n    CacheAccountType,\n    CacheType,\n    Constants,\n} from \"../../utils/Constants\";\nimport { Authority } from \"../../authority/Authority\";\nimport { AuthToken } from \"../../account/AuthToken\";\nimport { ICrypto } from \"../../crypto/ICrypto\";\nimport { buildClientInfo } from \"../../account/ClientInfo\";\nimport { StringUtils } from \"../../utils/StringUtils\";\nimport { AccountInfo } from \"../../account/AccountInfo\";\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\nimport { AuthorityType } from \"../../authority/AuthorityType\";\nimport { Logger } from \"../../logger/Logger\";\nimport { TokenClaims } from \"../../account/TokenClaims\";\n\n/**\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\n *\n * Key : Value Schema\n *\n * Key: <home_account_id>-<environment>-<realm*>\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\n *      authorityType: Accounts authority type as a string\n *      name: Full name for the account, including given name and family name,\n *      clientInfo: Full base64 encoded client info received from ESTS\n *      lastModificationTime: last time this entity was modified in the cache\n *      lastModificationApp:\n *      oboAssertion: access token passed in as part of OBO request\n *      idTokenClaims: Object containing claims parsed from ID token\n * }\n */\nexport class AccountEntity {\n    homeAccountId: string;\n    environment: string;\n    realm: string;\n    localAccountId: string;\n    username: string;\n    authorityType: string;\n    name?: string;\n    clientInfo?: string;\n    lastModificationTime?: string;\n    lastModificationApp?: string;\n    oboAssertion?: string;\n    cloudGraphHostName?: string;\n    msGraphHost?: string; \n    idTokenClaims?: TokenClaims;\n\n    /**\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n     */\n    generateAccountId(): string {\n        const accountId: Array<string> = [this.homeAccountId, this.environment];\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\n     */\n    generateAccountKey(): string {\n        return AccountEntity.generateAccountCacheKey({\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId\n        });\n    }\n\n    /**\n     * returns the type of the cache (in this case account)\n     */\n    generateType(): number {\n        switch (this.authorityType) {\n            case CacheAccountType.ADFS_ACCOUNT_TYPE:\n                return CacheType.ADFS;\n            case CacheAccountType.MSAV1_ACCOUNT_TYPE:\n                return CacheType.MSA;\n            case CacheAccountType.MSSTS_ACCOUNT_TYPE:\n                return CacheType.MSSTS;\n            case CacheAccountType.GENERIC_ACCOUNT_TYPE:\n                return CacheType.GENERIC;\n            default: {\n                throw ClientAuthError.createUnexpectedAccountTypeError();\n            }\n        }\n    }\n\n    /**\n     * Returns the AccountInfo interface for this account.\n     */\n    getAccountInfo(): AccountInfo {\n        return {\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n            name: this.name,\n            idTokenClaims: this.idTokenClaims\n        };\n    }\n\n    /**\n     * Generates account key from interface\n     * @param accountInterface\n     */\n    static generateAccountCacheKey(accountInterface: AccountInfo): string {\n        const accountKey = [\n            accountInterface.homeAccountId,\n            accountInterface.environment || \"\",\n            accountInterface.tenantId || \"\",\n        ];\n\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\n     * @param clientInfo\n     * @param authority\n     * @param idToken\n     * @param policy\n     */\n    static createAccount(\n        clientInfo: string,\n        homeAccountId: string,\n        idToken: AuthToken,\n        authority?: Authority,\n        oboAssertion?: string,\n        cloudGraphHostName?: string,\n        msGraphHost?: string,\n        environment?: string\n    ): AccountEntity {\n        const account: AccountEntity = new AccountEntity();\n\n        account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n        account.clientInfo = clientInfo;\n        account.homeAccountId = homeAccountId;\n\n        const env = environment || (authority && authority.getPreferredCache());\n\n        if (!env) {\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\n        }\n\n        account.environment = env;\n        // non AAD scenarios can have empty realm\n        account.realm = idToken?.claims?.tid || \"\";\n        account.oboAssertion = oboAssertion;\n        \n        if (idToken) {\n            account.idTokenClaims = idToken.claims;\n\n            // How do you account for MSA CID here?\n            account.localAccountId = idToken?.claims?.oid || idToken?.claims?.sub || \"\";\n\n            /*\n             * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.\n             * This field should not be relied upon if a custom policy is configured to return more than 1 email.\n             */\n            account.username = idToken?.claims?.preferred_username || (idToken?.claims?.emails? idToken.claims.emails[0]: \"\");\n            account.name = idToken?.claims?.name;\n        }\n\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n\n        return account;\n    }\n\n    /**\n     * Builds non-AAD/ADFS account.\n     * @param authority\n     * @param idToken\n     */\n    static createGenericAccount(\n        homeAccountId: string,\n        idToken: AuthToken,\n        authority?: Authority,\n        oboAssertion?: string,\n        cloudGraphHostName?: string,\n        msGraphHost?: string,\n        environment?: string\n    ): AccountEntity {\n        const account: AccountEntity = new AccountEntity();\n\n        account.authorityType = (authority && authority.authorityType === AuthorityType.Adfs) ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        account.homeAccountId = homeAccountId;\n        // non AAD scenarios can have empty realm\n        account.realm = \"\";\n        account.oboAssertion = oboAssertion;\n\n        const env = environment || authority && authority.getPreferredCache();\n\n        if (!env) {\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\n        }\n\n        if (idToken) {\n            // How do you account for MSA CID here?\n            account.localAccountId = idToken?.claims?.oid || idToken?.claims?.sub || \"\";\n            // upn claim for most ADFS scenarios\n            account.username = idToken?.claims?.upn || \"\";\n            account.name = idToken?.claims?.name || \"\";\n            account.idTokenClaims = idToken?.claims;\n        }\n\n        account.environment = env;\n\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n\n        /*\n         * add uniqueName to claims\n         * account.name = idToken.claims.uniqueName;\n         */\n\n        return account;\n    }\n\n    /**\n     * Generate HomeAccountId from server response\n     * @param serverClientInfo\n     * @param authType\n     */\n    static generateHomeAccountId(serverClientInfo: string, authType: AuthorityType, logger: Logger, cryptoObj: ICrypto, idToken?: AuthToken): string {\n\n        const accountId = idToken?.claims?.sub ? idToken.claims.sub : Constants.EMPTY_STRING;\n\n        // since ADFS does not have tid and does not set client_info\n        if (authType === AuthorityType.Adfs) {\n            return accountId;\n        }\n\n        // for cases where there is clientInfo\n        if (serverClientInfo) {\n            try {\n                const clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n                if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\n                    return `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`;\n                }\n            } catch (e) {}\n        }\n\n        // default to \"sub\" claim\n        logger.verbose(\"No client info in response\");\n        return accountId;\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAccountEntity(entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"realm\") &&\n            entity.hasOwnProperty(\"localAccountId\") &&\n            entity.hasOwnProperty(\"username\") &&\n            entity.hasOwnProperty(\"authorityType\")\n        );\n    }\n\n    /**\n     * Helper function to determine whether 2 accountInfo objects represent the same account\n     * @param accountA \n     * @param accountB \n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\n     */\n    static accountInfoIsEqual(accountA: AccountInfo | null, accountB: AccountInfo | null, compareClaims?: boolean): boolean {\n        if (!accountA || !accountB) {\n            return false;\n        }\n\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n        if (compareClaims) {\n            const accountAClaims = (accountA.idTokenClaims || {}) as TokenClaims;\n            const accountBClaims = (accountB.idTokenClaims || {}) as TokenClaims;\n\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\n            claimsMatch = (accountAClaims.iat === accountBClaims.iat) &&\n            (accountAClaims.nonce === accountBClaims.nonce);\n        }\n\n        return (accountA.homeAccountId === accountB.homeAccountId) && \n            (accountA.localAccountId === accountB.localAccountId) &&\n            (accountA.username === accountB.username) &&\n            (accountA.tenantId === accountB.tenantId) &&\n            (accountA.environment === accountB.environment) &&\n            claimsMatch;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { Separators, Constants } from \"../utils/Constants\";\n\n/**\n * Client info object which consists of two IDs. Need to add more info here.\n */\nexport type ClientInfo = {\n    uid: string,\n    utid: string\n};\n\n/**\n * Function to build a client info object from server clientInfo string\n * @param rawClientInfo\n * @param crypto\n */\nexport function buildClientInfo(rawClientInfo: string, crypto: ICrypto): ClientInfo {\n    if (StringUtils.isEmpty(rawClientInfo)) {\n        throw ClientAuthError.createClientInfoEmptyError();\n    }\n\n    try {\n        const decodedClientInfo: string = crypto.base64Decode(rawClientInfo);\n        return JSON.parse(decodedClientInfo) as ClientInfo;\n    } catch (e) {\n        throw ClientAuthError.createClientInfoDecodingError(e);\n    }\n}\n\n/**\n * Function to build a client info object from cached homeAccountId string\n * @param homeAccountId \n */\nexport function buildClientInfoFromHomeAccountId(homeAccountId: string): ClientInfo {\n    if (StringUtils.isEmpty(homeAccountId)) {\n        throw ClientAuthError.createClientInfoDecodingError(\"Home account ID was empty.\");\n    }\n    const clientInfoParts: string[] = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\n    return {\n        uid: clientInfoParts[0],\n        utid: clientInfoParts.length < 2 ? Constants.EMPTY_STRING : clientInfoParts[1]\n    };\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Authority types supported by MSAL.\n */\nexport enum AuthorityType {\n    Default,\n    Adfs\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenClaims } from \"./TokenClaims\";\nimport { DecodedAuthToken } from \"./DecodedAuthToken\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ICrypto } from \"../crypto/ICrypto\";\n\n/**\n * JWT Token representation class. Parses token string and generates claims object.\n */\nexport class AuthToken {\n\n    // Raw Token string\n    rawToken: string;\n    // Claims inside token\n    claims: TokenClaims;\n    constructor(rawToken: string, crypto: ICrypto) {\n        if (StringUtils.isEmpty(rawToken)) {\n            throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\n        }\n\n        this.rawToken = rawToken;\n        this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\n    }\n\n    /**\n     * Extract token by decoding the rawToken\n     *\n     * @param encodedToken\n     */\n    static extractTokenClaims(encodedToken: string, crypto: ICrypto): TokenClaims {\n\n        const decodedToken: DecodedAuthToken = StringUtils.decodeAuthToken(encodedToken);\n\n        // token will be decoded to get the username\n        try {\n            const base64TokenPayload = decodedToken.JWSPayload;\n\n            // base64Decode() should throw an error if there is an issue\n            const base64Decoded = crypto.base64Decode(base64TokenPayload);\n            return JSON.parse(base64Decoded) as TokenClaims;\n        } catch (err) {\n            throw ClientAuthError.createTokenParsingError(err);\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule, NetworkRequestOptions } from \"./INetworkModule\";\nimport { RequestThumbprint } from \"./RequestThumbprint\";\nimport { ThrottlingUtils } from \"./ThrottlingUtils\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { AuthError } from \"../error/AuthError\";\n\nexport type NetworkResponse<T> = {\n    headers: Record<string, string>;\n    body: T;\n    status: number;\n};\n\nexport class NetworkManager {\n    private networkClient: INetworkModule;\n    private cacheManager: CacheManager;\n\n    constructor(networkClient: INetworkModule, cacheManager: CacheManager) {\n        this.networkClient = networkClient;\n        this.cacheManager = cacheManager;\n    }\n\n    /**\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\n     * @param thumbprint\n     * @param tokenEndpoint\n     * @param options\n     */\n    async sendPostRequest<T>(thumbprint: RequestThumbprint, tokenEndpoint: string, options: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n\n        let response;\n        try {\n            response = await this.networkClient.sendPostRequestAsync<T>(tokenEndpoint, options);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                throw e;\n            } else {\n                throw ClientAuthError.createNetworkError(tokenEndpoint, e);\n            }\n        }\n\n        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n\n        return response;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { NetworkResponse } from \"./NetworkManager\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { HeaderNames, CacheSchemaType, ThrottlingConstants, Constants } from \"../utils/Constants\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ServerError } from \"../error/ServerError\";\nimport { RequestThumbprint } from \"./RequestThumbprint\";\nimport { ThrottlingEntity } from \"../cache/entities/ThrottlingEntity\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\nexport class ThrottlingUtils {\n\n    /**\n     * Prepares a RequestThumbprint to be stored as a key.\n     * @param thumbprint\n     */\n    static generateThrottlingStorageKey(thumbprint: RequestThumbprint): string {\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\n    }\n\n    /**\n     * Performs necessary throttling checks before a network request.\n     * @param cacheManager\n     * @param thumbprint\n     */\n    static preProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint): void {\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n        const value = cacheManager.getThrottlingCache(key);\n\n        if (value) {\n            if (value.throttleTime < Date.now()) {\n                cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\n                return;\n            }\n            throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n        }\n    }\n\n    /**\n     * Performs necessary throttling checks after a network request.\n     * @param cacheManager\n     * @param thumbprint\n     * @param response\n     */\n    static postProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint, response: NetworkResponse<ServerAuthorizationTokenResponse>): void {\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n            const thumbprintValue: ThrottlingEntity = {\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n                error: response.body.error,\n                errorCodes: response.body.error_codes,\n                errorMessage: response.body.error_description,\n                subError: response.body.suberror\n            };\n            cacheManager.setThrottlingCache(\n                ThrottlingUtils.generateThrottlingStorageKey(thumbprint),\n                thumbprintValue\n            );\n        }\n    }\n\n    /**\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\n     * @param response\n     */\n    static checkResponseStatus(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean {\n        return response.status === 429 || response.status >= 500 && response.status < 600;\n    }\n\n    /**\n     * Checks a NetworkResponse object's RetryAfter header\n     * @param response\n     */\n    static checkResponseForRetryAfter(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean {\n        if (response.headers) {\n            return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n        }\n        return false;\n    }\n\n    /**\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\n     * @param throttleTime\n     */\n    static calculateThrottleTime(throttleTime: number): number {\n        const time = throttleTime <= 0 ? 0 : throttleTime;\n\n        const currentSeconds = Date.now() / 1000;\n        return Math.floor(Math.min(\n            currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS),\n            currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS\n        ) * 1000);\n    }\n\n    static removeThrottle(cacheManager: CacheManager, clientId: string, request: BaseAuthRequest, homeAccountIdentifier?: string): boolean {\n        const thumbprint: RequestThumbprint = {\n            clientId: clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            homeAccountIdentifier: homeAccountIdentifier,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const key = this.generateThrottlingStorageKey(thumbprint);\n        return cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"./AuthError\";\n\n/**\n * Error thrown when there is an error with the server code, for example, unavailability.\n */\nexport class ServerError extends AuthError {\n\n    constructor(errorCode?: string, errorMessage?: string, subError?: string) {\n        super(errorCode, errorMessage, subError);\n        this.name = \"ServerError\";\n\n        Object.setPrototypeOf(this, ServerError.prototype);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport type CcsCredential = {\n    credential: string,\n    type: CcsCredentialType\n};\n\nexport enum CcsCredentialType {\n    HOME_ACCOUNT_ID = \"home_account_id\",\n    UPN = \"UPN\"\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AADServerParamKeys, Constants, ResponseMode, SSOTypes, CLIENT_INFO, AuthenticationScheme, ClaimsRequestKeys, PasswordGrantConstants, OIDC_DEFAULT_SCOPES, ThrottlingConstants, HeaderNames} from \"../utils/Constants\";\nimport { ScopeSet } from \"./ScopeSet\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { StringDict } from \"../utils/MsalTypes\";\nimport { RequestValidator } from \"./RequestValidator\";\nimport { LibraryInfo } from \"../config/ClientConfiguration\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { ClientInfo } from \"../account/ClientInfo\";\n\nexport class RequestParameterBuilder {\n\n    private parameters: Map<string, string>;\n\n    constructor() {\n        this.parameters = new Map<string, string>();\n    }\n\n    /**\n     * add response_type = code\n     */\n    addResponseTypeCode(): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE)\n        );\n    }\n\n    /**\n     * add response_mode. defaults to query.\n     * @param responseMode\n     */\n    addResponseMode(responseMode?: ResponseMode): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_MODE,\n            encodeURIComponent((responseMode) ? responseMode : ResponseMode.QUERY)\n        );\n    }\n\n    /**\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n     * @param scopeSet\n     * @param addOidcScopes\n     */\n    addScopes(scopes: string[], addOidcScopes: boolean = true): void {\n        const requestScopes = addOidcScopes ? [...scopes || [], ...OIDC_DEFAULT_SCOPES] : scopes || [];\n        const scopeSet = new ScopeSet(requestScopes);\n        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n    }\n\n    /**\n     * add clientId\n     * @param clientId\n     */\n    addClientId(clientId: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n    }\n\n    /**\n     * add redirect_uri\n     * @param redirectUri\n     */\n    addRedirectUri(redirectUri: string): void {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n    }\n\n    /**\n     * add post logout redirectUri\n     * @param redirectUri\n     */\n    addPostLogoutRedirectUri(redirectUri: string): void {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n    }\n\n    /**\n     * add id_token_hint to logout request\n     * @param idTokenHint\n     */\n    addIdTokenHint(idTokenHint: string): void {\n        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n    }\n\n    /**\n     * add domain_hint\n     * @param domainHint\n     */\n    addDomainHint(domainHint: string): void {\n        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n    }\n\n    /**\n     * add login_hint\n     * @param loginHint\n     */\n    addLoginHint(loginHint: string): void {\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n    }\n\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\n     * @param loginHint \n     */\n    addCcsUpn(loginHint: string): void {\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\n    }\n\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for account object\n     * @param loginHint \n     */\n    addCcsOid(clientInfo: ClientInfo): void {\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\n    }\n\n    /**\n     * add sid\n     * @param sid\n     */\n    addSid(sid: string): void {\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n    }\n\n    /**\n     * add claims\n     * @param claims\n     */\n    addClaims(claims?: string, clientCapabilities?: Array<string>): void {\n        const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n        RequestValidator.validateClaims(mergedClaims);\n        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n    }\n\n    /**\n     * add correlationId\n     * @param correlationId\n     */\n    addCorrelationId(correlationId: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n    }\n\n    /**\n     * add library info query params\n     * @param libraryInfo\n     */\n    addLibraryInfo(libraryInfo: LibraryInfo): void {\n        // Telemetry Info\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n        this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n    }\n\n    /**\n     * add prompt\n     * @param prompt\n     */\n    addPrompt(prompt: string): void {\n        RequestValidator.validatePrompt(prompt);\n        this.parameters.set(`${AADServerParamKeys.PROMPT}`, encodeURIComponent(prompt));\n    }\n\n    /**\n     * add state\n     * @param state\n     */\n    addState(state: string): void {\n        if (!StringUtils.isEmpty(state)) {\n            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n        }\n    }\n\n    /**\n     * add nonce\n     * @param nonce\n     */\n    addNonce(nonce: string): void {\n        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n    }\n\n    /**\n     * add code_challenge and code_challenge_method\n     * - throw if either of them are not passed\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    addCodeChallengeParams(\n        codeChallenge: string,\n        codeChallengeMethod: string\n    ): void {\n        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n        if (codeChallenge && codeChallengeMethod) {\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n        } else {\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n        }\n    }\n\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addAuthorizationCode(code: string): void {\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n    }\n\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addDeviceCode(code: string): void {\n        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n    }\n\n    /**\n     * add the `refreshToken` passed by the user\n     * @param refreshToken\n     */\n    addRefreshToken(refreshToken: string): void {\n        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n    }\n\n    /**\n     * add the `code_verifier` passed by the user to exchange for a token\n     * @param codeVerifier\n     */\n    addCodeVerifier(codeVerifier: string): void {\n        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n    }\n\n    /**\n     * add client_secret\n     * @param clientSecret\n     */\n    addClientSecret(clientSecret: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n    }\n\n    /**\n     * add clientAssertion for confidential client flows\n     * @param clientAssertion\n     */\n    addClientAssertion(clientAssertion: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n    }\n\n    /**\n     * add clientAssertionType for confidential client flows\n     * @param clientAssertionType\n     */\n    addClientAssertionType(clientAssertionType: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n    }\n\n    /**\n     * add OBO assertion for confidential client flows\n     * @param clientAssertion\n     */\n    addOboAssertion(oboAssertion: string): void {\n        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n    }\n\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addRequestTokenUse(tokenUse: string): void {\n        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n    }\n\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addGrantType(grantType: string): void {\n        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n    }\n\n    /**\n     * add client info\n     *\n     */\n    addClientInfo(): void {\n        this.parameters.set(CLIENT_INFO, \"1\");\n    }\n\n    /**\n     * add extraQueryParams\n     * @param eQparams\n     */\n    addExtraQueryParameters(eQparams: StringDict): void {\n        RequestValidator.sanitizeEQParams(eQparams, this.parameters);\n        Object.keys(eQparams).forEach((key) => {\n            this.parameters.set(key, eQparams[key]);\n        });\n    }\n\n    addClientCapabilitiesToClaims(claims?: string, clientCapabilities?: Array<string>): string {\n        let mergedClaims: object;\n\n        // Parse provided claims into JSON object or initialize empty object\n        if (!claims) {\n            mergedClaims = {};\n        } else {\n            try {\n                mergedClaims = JSON.parse(claims);\n            } catch(e) {\n                throw ClientConfigurationError.createInvalidClaimsRequestError();\n            }\n        }\n\n        if (clientCapabilities && clientCapabilities.length > 0) {\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)){\n                // Add access_token key to claims object\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n            }\n\n            // Add xms_cc claim with provided clientCapabilities to access_token key\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n                values: clientCapabilities\n            };\n        }\n\n        return JSON.stringify(mergedClaims);\n    }\n\n    /**\n     * adds `username` for Password Grant flow\n     * @param username\n     */\n    addUsername(username: string): void {\n        this.parameters.set(PasswordGrantConstants.username, username);\n    }\n\n    /**\n     * adds `password` for Password Grant flow\n     * @param password\n     */\n    addPassword(password: string): void {\n        this.parameters.set(PasswordGrantConstants.password, password);\n    }\n\n    /**\n     * add pop_jwk to query params\n     * @param cnfString\n     */\n    addPopToken(cnfString: string): void {\n        if (!StringUtils.isEmpty(cnfString)) {\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n        }\n    }\n\n    /**\n     * add SSH JWK and key ID to query params \n     */\n    addSshJwk(sshJwkString: string): void {\n        if(!StringUtils.isEmpty(sshJwkString)) {\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\n        }\n    }\n\n    /**\n     * add server telemetry fields\n     * @param serverTelemetryManager \n     */\n    addServerTelemetry(serverTelemetryManager: ServerTelemetryManager): void {\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n    }\n\n    /**\n     * Adds parameter that indicates to the server that throttling is supported\n     */\n    addThrottling(): void {\n        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n    }\n\n    /**\n     * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\n     */\n    addLogoutHint(logoutHint: string): void {\n        this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));\n    }\n\n    /**\n     * Utility to create a URL from the params map\n     */\n    createQueryString(): string {\n        const queryParameterArray: Array<string> = new Array<string>();\n\n        this.parameters.forEach((value, key) => {\n            queryParameterArray.push(`${key}=${value}`);\n        });\n\n        return queryParameterArray.join(\"&\");\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { PromptValue, CodeChallengeMethodValues} from \"../utils/Constants\";\nimport { StringDict } from \"../utils/MsalTypes\";\n\n/**\n * Validates server consumable params from the \"request\" objects\n */\nexport class RequestValidator {\n\n    /**\n     * Utility to check if the `redirectUri` in the request is a non-null value\n     * @param redirectUri\n     */\n    static validateRedirectUri(redirectUri: string) : void {\n        if (StringUtils.isEmpty(redirectUri)) {\n            throw ClientConfigurationError.createRedirectUriEmptyError();\n        }\n    }\n\n    /**\n     * Utility to validate prompt sent by the user in the request\n     * @param prompt\n     */\n    static validatePrompt(prompt: string) : void {\n        const promptValues = [];\n\n        for (const value in PromptValue) {\n            promptValues.push(PromptValue[value]);\n        }\n\n        if (promptValues.indexOf(prompt) < 0) {\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\n        }\n    }\n\n    static validateClaims(claims: string) : void {\n        try {\n            JSON.parse(claims);\n        } catch(e) {\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\n        }\n    }\n\n    /**\n     * Utility to validate code_challenge and code_challenge_method\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeParams(codeChallenge: string, codeChallengeMethod: string) : void  {\n        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n        } else {\n            this.validateCodeChallengeMethod(codeChallengeMethod);\n        }\n    }\n\n    /**\n     * Utility to validate code_challenge_method\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeMethod(codeChallengeMethod: string) : void {\n        if (\n            [\n                CodeChallengeMethodValues.PLAIN,\n                CodeChallengeMethodValues.S256\n            ].indexOf(codeChallengeMethod) < 0\n        ) {\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n        }\n    }\n\n    /**\n     * Removes unnecessary or duplicate query parameters from extraQueryParameters\n     * @param request\n     */\n    static sanitizeEQParams(eQParams: StringDict, queryParams: Map<string, string>) : StringDict {\n        if (!eQParams) {\n            return {};\n        }\n\n        // Remove any query parameters already included in SSO params\n        queryParams.forEach((value, key) => {\n            if (eQParams[key]) {\n                delete eQParams[key];\n            }\n        });\n\n        return eQParams;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerAuthorizationTokenResponse } from \"./ServerAuthorizationTokenResponse\";\nimport { buildClientInfo} from \"../account/ClientInfo\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ServerAuthorizationCodeResponse } from \"./ServerAuthorizationCodeResponse\";\nimport { Logger } from \"../logger/Logger\";\nimport { ServerError } from \"../error/ServerError\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { AuthenticationResult } from \"./AuthenticationResult\";\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\nimport { Authority } from \"../authority/Authority\";\nimport { AuthorityType } from \"../authority/AuthorityType\";\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\nimport { RefreshTokenEntity } from \"../cache/entities/RefreshTokenEntity\";\nimport { InteractionRequiredAuthError } from \"../error/InteractionRequiredAuthError\";\nimport { CacheRecord } from \"../cache/entities/CacheRecord\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ProtocolUtils, RequestStateObject } from \"../utils/ProtocolUtils\";\nimport { AuthenticationScheme, Constants, THE_FAMILY_ID } from \"../utils/Constants\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { AppMetadataEntity } from \"../cache/entities/AppMetadataEntity\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\nimport { TokenCacheContext } from \"../cache/persistence/TokenCacheContext\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\nimport { AuthorizationCodePayload } from \"./AuthorizationCodePayload\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\n/**\n * Class that handles response parsing.\n */\nexport class ResponseHandler {\n    private clientId: string;\n    private cacheStorage: CacheManager;\n    private cryptoObj: ICrypto;\n    private logger: Logger;\n    private homeAccountIdentifier: string;\n    private serializableCache: ISerializableTokenCache | null;\n    private persistencePlugin: ICachePlugin | null;\n\n    constructor(clientId: string, cacheStorage: CacheManager, cryptoObj: ICrypto, logger: Logger, serializableCache: ISerializableTokenCache | null, persistencePlugin: ICachePlugin | null) {\n        this.clientId = clientId;\n        this.cacheStorage = cacheStorage;\n        this.cryptoObj = cryptoObj;\n        this.logger = logger;\n        this.serializableCache = serializableCache;\n        this.persistencePlugin = persistencePlugin;\n    }\n\n    /**\n     * Function which validates server authorization code response.\n     * @param serverResponseHash\n     * @param cachedState\n     * @param cryptoObj\n     */\n    validateServerAuthorizationCodeResponse(serverResponseHash: ServerAuthorizationCodeResponse, cachedState: string, cryptoObj: ICrypto): void {\n\n        if (!serverResponseHash.state || !cachedState) {\n            throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError(\"Server State\") : ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n\n        if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {\n            throw ClientAuthError.createStateMismatchError();\n        }\n\n        // Check for error\n        if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {\n                throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n            }\n\n            throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n        }\n\n        if (serverResponseHash.client_info) {\n            buildClientInfo(serverResponseHash.client_info, cryptoObj);\n        }\n    }\n\n    /**\n     * Function which validates server authorization token response.\n     * @param serverResponse\n     */\n    validateTokenResponse(serverResponse: ServerAuthorizationTokenResponse): void {\n        // Check for error\n        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n                throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);\n            }\n\n            const errString = `${serverResponse.error_codes} - [${serverResponse.timestamp}]: ${serverResponse.error_description} - Correlation ID: ${serverResponse.correlation_id} - Trace ID: ${serverResponse.trace_id}`;\n            throw new ServerError(serverResponse.error, errString, serverResponse.suberror);\n        }\n    }\n\n    /**\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\n     * @param serverTokenResponse\n     * @param authority\n     */\n    async handleServerTokenResponse(\n        serverTokenResponse: ServerAuthorizationTokenResponse,\n        authority: Authority,\n        reqTimestamp: number,\n        request: BaseAuthRequest,\n        authCodePayload?: AuthorizationCodePayload,\n        oboAssertion?: string,\n        handlingRefreshTokenResponse?: boolean): Promise<AuthenticationResult> {\n\n        // create an idToken object (not entity)\n        let idTokenObj: AuthToken | undefined;\n        if (serverTokenResponse.id_token) {\n            idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj);\n            \n            // token nonce check (TODO: Add a warning if no nonce is given?)\n            if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {\n                if (idTokenObj.claims.nonce !== authCodePayload.nonce) {\n                    throw ClientAuthError.createNonceMismatchError();\n                }\n            }\n        }\n\n        // generate homeAccountId\n        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);\n\n        // save the response tokens\n        let requestStateObj: RequestStateObject | undefined;\n        if (!!authCodePayload && !!authCodePayload.state) {\n            requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n        }\n\n        // Add keyId from request to serverTokenResponse if defined\n        serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;\n\n        const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenObj, oboAssertion, authCodePayload);\n        let cacheContext;\n        try {\n            if (this.persistencePlugin && this.serializableCache) {\n                this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n                cacheContext = new TokenCacheContext(this.serializableCache, true);\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\n            }\n            /*\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.\n             */\n            if (handlingRefreshTokenResponse && cacheRecord.account) {\n                const key = cacheRecord.account.generateAccountKey();\n                const account = this.cacheStorage.getAccount(key);\n                if (!account) {\n                    this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n                    return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj);\n                }\n            }\n            await this.cacheStorage.saveCacheRecord(cacheRecord);\n        } finally {\n            if (this.persistencePlugin && this.serializableCache && cacheContext) {\n                this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\n            }\n        }\n        return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj, serverTokenResponse.spa_code);\n    }\n\n    /**\n     * Generates CacheRecord\n     * @param serverTokenResponse\n     * @param idTokenObj\n     * @param authority\n     */\n    private generateCacheRecord(serverTokenResponse: ServerAuthorizationTokenResponse, authority: Authority, reqTimestamp: number, request: BaseAuthRequest, idTokenObj?: AuthToken, oboAssertion?: string, authCodePayload?: AuthorizationCodePayload): CacheRecord {\n        const env = authority.getPreferredCache();\n        if (StringUtils.isEmpty(env)) {\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\n        }\n\n        // IdToken: non AAD scenarios can have empty realm\n        let cachedIdToken: IdTokenEntity | undefined;\n        let cachedAccount: AccountEntity | undefined;\n        if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {\n            cachedIdToken = IdTokenEntity.createIdTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.id_token || Constants.EMPTY_STRING,\n                this.clientId,\n                idTokenObj.claims.tid || Constants.EMPTY_STRING,\n                oboAssertion\n            );\n\n            cachedAccount = this.generateAccountEntity(\n                serverTokenResponse,\n                idTokenObj,\n                authority,\n                oboAssertion,\n                authCodePayload\n            );\n        }\n\n        // AccessToken\n        let cachedAccessToken: AccessTokenEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {\n\n            // If scopes not returned in server response, use request scopes\n            const responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(request.scopes || []);\n\n            /*\n             * Use timestamp calculated before request\n             * Server may return timestamps as strings, parse to numbers if so.\n             */\n            const expiresIn: number = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n            const extExpiresIn: number = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n            const refreshIn: number | undefined = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\n            const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n            const refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\n\n            // non AAD scenarios can have empty realm\n            cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.access_token || Constants.EMPTY_STRING,\n                this.clientId,\n                idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant,\n                responseScopes.printScopes(),\n                tokenExpirationSeconds,\n                extendedTokenExpirationSeconds,\n                this.cryptoObj,\n                refreshOnSeconds,\n                serverTokenResponse.token_type,\n                oboAssertion,\n                serverTokenResponse.key_id,\n                request.claims,\n                request.requestedClaimsHash\n            );\n        }\n        \n        // refreshToken\n        let cachedRefreshToken: RefreshTokenEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {\n            cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.refresh_token || Constants.EMPTY_STRING,\n                this.clientId,\n                serverTokenResponse.foci,\n                oboAssertion\n            );\n        }\n\n        // appMetadata\n        let cachedAppMetadata: AppMetadataEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.foci)) {\n            cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);\n        }\n\n        return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);\n    }\n\n    /**\n     * Generate Account\n     * @param serverTokenResponse\n     * @param idToken\n     * @param authority\n     */\n    private generateAccountEntity(serverTokenResponse: ServerAuthorizationTokenResponse, idToken: AuthToken, authority: Authority, oboAssertion?: string, authCodePayload?: AuthorizationCodePayload): AccountEntity {\n        const authorityType = authority.authorityType;\n        const cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : \"\";\n        const msGraphhost = authCodePayload ? authCodePayload.msgraph_host : \"\";\n\n        // ADFS does not require client_info in the response\n        if (authorityType === AuthorityType.Adfs) {\n            this.logger.verbose(\"Authority type is ADFS, creating ADFS account\");\n            return AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost);\n        }\n\n        // This fallback applies to B2C as well as they fall under an AAD account type.\n        if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === \"AAD\") {\n            throw ClientAuthError.createClientInfoEmptyError();\n        }\n\n        return serverTokenResponse.client_info ?\n            AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost) :\n            AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost);\n    }\n\n    /**\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\n     *\n     * Optionally takes a state string that is set as-is in the response.\n     *\n     * @param cacheRecord\n     * @param idTokenObj\n     * @param fromTokenCache\n     * @param stateString\n     */\n    static async generateAuthenticationResult(\n        cryptoObj: ICrypto, \n        authority: Authority,\n        cacheRecord: CacheRecord, \n        fromTokenCache: boolean, \n        request: BaseAuthRequest,\n        idTokenObj?: AuthToken,\n        requestState?: RequestStateObject,\n        code?: string\n    ): Promise<AuthenticationResult> {\n        let accessToken: string = \"\";\n        let responseScopes: Array<string> = [];\n        let expiresOn: Date | null = null;\n        let extExpiresOn: Date | undefined;\n        let familyId: string = Constants.EMPTY_STRING;\n\n        if (cacheRecord.accessToken) {\n            if (cacheRecord.accessToken.tokenType === AuthenticationScheme.POP) {\n                const popTokenGenerator: PopTokenGenerator = new PopTokenGenerator(cryptoObj);\n                accessToken = await popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, request);\n            } else {\n                accessToken = cacheRecord.accessToken.secret;\n            }\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n        }\n\n        if (cacheRecord.appMetadata) {\n            familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;\n        }\n        const uid = idTokenObj?.claims.oid || idTokenObj?.claims.sub || Constants.EMPTY_STRING;\n        const tid = idTokenObj?.claims.tid || Constants.EMPTY_STRING;\n\n        return {\n            authority: authority.canonicalAuthority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes,\n            account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,\n            idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n            idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n            accessToken: accessToken,\n            fromCache: fromTokenCache,\n            expiresOn: expiresOn,\n            correlationId: request.correlationId,\n            extExpiresOn: extExpiresOn,\n            familyId: familyId,\n            tokenType: cacheRecord.accessToken?.tokenType || Constants.EMPTY_STRING,\n            state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,\n            cloudGraphHostName: cacheRecord.account?.cloudGraphHostName || Constants.EMPTY_STRING,\n            msGraphHost: cacheRecord.account?.msGraphHost || Constants.EMPTY_STRING,\n            code\n        };\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CredentialEntity } from \"./CredentialEntity\";\nimport { CredentialType } from \"../../utils/Constants\";\n\n/**\n * ID_TOKEN Cache\n *\n * Key:Value Schema:\n *\n * Key Example: uid.utid-login.microsoftonline.com-idtoken-clientId-contoso.com-\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      realm: Full tenant or organizational identifier that the account belongs to\n * }\n */\nexport class IdTokenEntity extends CredentialEntity {\n    realm: string;\n\n    /**\n     * Create IdTokenEntity\n     * @param homeAccountId\n     * @param authenticationResult\n     * @param clientId\n     * @param authority\n     */\n    static createIdTokenEntity(\n        homeAccountId: string,\n        environment: string,\n        idToken: string,\n        clientId: string,\n        tenantId: string,\n        oboAssertion?: string\n    ): IdTokenEntity {\n        const idTokenEntity = new IdTokenEntity();\n\n        idTokenEntity.credentialType = CredentialType.ID_TOKEN;\n        idTokenEntity.homeAccountId = homeAccountId;\n        idTokenEntity.environment = environment;\n        idTokenEntity.clientId = clientId;\n        idTokenEntity.secret = idToken;\n        idTokenEntity.realm = tenantId;\n        idTokenEntity.oboAssertion = oboAssertion;\n\n        return idTokenEntity;\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isIdTokenEntity(entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"credentialType\") &&\n            entity.hasOwnProperty(\"realm\") &&\n            entity.hasOwnProperty(\"clientId\") &&\n            entity.hasOwnProperty(\"secret\") &&\n            entity[\"credentialType\"] === CredentialType.ID_TOKEN\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CredentialEntity } from \"./CredentialEntity\";\nimport { CredentialType, AuthenticationScheme } from \"../../utils/Constants\";\nimport { TimeUtils } from \"../../utils/TimeUtils\";\nimport { StringUtils } from \"../../utils/StringUtils\";\nimport { ICrypto } from \"../../crypto/ICrypto\";\nimport { TokenClaims } from \"../../account/TokenClaims\";\nimport { AuthToken } from \"../../account/AuthToken\";\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\n\n/**\n * ACCESS_TOKEN Credential Type\n *\n * Key:Value Schema:\n *\n * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      familyId: Family ID identifier, usually only used for refresh tokens\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\n *      cachedAt: Absolute device time when entry was created in the cache.\n *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.\n *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.\n *      keyId: used for POP and SSH tokenTypes\n *      tokenType: Type of the token issued. Usually \"Bearer\"\n * }\n */\nexport class AccessTokenEntity extends CredentialEntity {\n    realm: string;\n    target: string;\n    cachedAt: string;\n    expiresOn: string;\n    extendedExpiresOn?: string;\n    refreshOn?: string;\n    keyId?: string; // for POP and SSH tokenTypes\n    tokenType?: AuthenticationScheme;\n    requestedClaims?: string;\n    requestedClaimsHash?: string;\n\n    /**\n     * Create AccessTokenEntity\n     * @param homeAccountId\n     * @param environment\n     * @param accessToken\n     * @param clientId\n     * @param tenantId\n     * @param scopes\n     * @param expiresOn\n     * @param extExpiresOn\n     */\n    static createAccessTokenEntity(\n        homeAccountId: string,\n        environment: string,\n        accessToken: string,\n        clientId: string,\n        tenantId: string,\n        scopes: string,\n        expiresOn: number,\n        extExpiresOn: number,\n        cryptoUtils: ICrypto,\n        refreshOn?: number,\n        tokenType?: AuthenticationScheme,\n        oboAssertion?: string,\n        keyId?: string,\n        requestedClaims?: string,\n        requestedClaimsHash?: string \n    ): AccessTokenEntity {\n        const atEntity: AccessTokenEntity = new AccessTokenEntity();\n\n        atEntity.homeAccountId = homeAccountId;\n        atEntity.credentialType = CredentialType.ACCESS_TOKEN;\n        atEntity.secret = accessToken;\n\n        const currentTime = TimeUtils.nowSeconds();\n        atEntity.cachedAt = currentTime.toString();\n\n        /*\n         * Token expiry time.\n         * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.\n         */\n        atEntity.expiresOn = expiresOn.toString();\n        atEntity.extendedExpiresOn = extExpiresOn.toString();\n        if (refreshOn) {\n            atEntity.refreshOn = refreshOn.toString();\n        }\n\n        atEntity.environment = environment;\n        atEntity.clientId = clientId;\n        atEntity.realm = tenantId;\n        atEntity.target = scopes;\n        atEntity.oboAssertion = oboAssertion;\n\n        atEntity.tokenType = StringUtils.isEmpty(tokenType) ? AuthenticationScheme.BEARER : tokenType;\n\n        if (requestedClaims) {\n            atEntity.requestedClaims = requestedClaims;\n            atEntity.requestedClaimsHash = requestedClaimsHash;\n        }\n\n        /*\n         * Create Access Token With Auth Scheme instead of regular access token\n         * Cast to lower to handle \"bearer\" from ADFS\n         */\n        if (atEntity.tokenType?.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) {\n            atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n            switch (atEntity.tokenType) {\n                case AuthenticationScheme.POP:\n                    // Make sure keyId is present and add it to credential\n                    const tokenClaims: TokenClaims | null = AuthToken.extractTokenClaims(accessToken, cryptoUtils);\n                    if (!tokenClaims?.cnf?.kid) {\n                        throw ClientAuthError.createTokenClaimsRequiredError();\n                    }\n                    atEntity.keyId = tokenClaims.cnf.kid;\n                    break;\n                case AuthenticationScheme.SSH:\n                    atEntity.keyId = keyId;\n            }\n        }\n\n        return atEntity;\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAccessTokenEntity(entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"credentialType\") &&\n            entity.hasOwnProperty(\"realm\") &&\n            entity.hasOwnProperty(\"clientId\") &&\n            entity.hasOwnProperty(\"secret\") &&\n            entity.hasOwnProperty(\"target\") &&\n            (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME)\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Utility class which exposes functions for managing date and time operations.\n */\nexport class TimeUtils {\n\n    /**\n     * return the current time in Unix time (seconds).\n     */\n    static nowSeconds(): number {\n        // Date.getTime() returns in milliseconds.\n        return Math.round(new Date().getTime() / 1000.0);\n    }\n    \n    /**\n     * check if a token is expired based on given UTC time in seconds.\n     * @param expiresOn\n     */\n    static isTokenExpired(expiresOn: string, offset: number): boolean {\n        // check for access token expiry\n        const expirationSec = Number(expiresOn) || 0;\n        const offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\n\n        // If current time + offset is greater than token expiration time, then token is expired.\n        return (offsetCurrentTimeSec > expirationSec);\n    }\n\n    /**\n     * If the current time is earlier than the time that a token was cached at, we must discard the token\n     * i.e. The system clock was turned back after acquiring the cached token\n     * @param cachedAt \n     * @param offset \n     */\n    static wasClockTurnedBack(cachedAt: string): boolean {\n        const cachedAtSec = Number(cachedAt);\n\n        return cachedAtSec > TimeUtils.nowSeconds();\n    }\n\n    /**\n     * Waits for t number of milliseconds\n     * @param t number\n     * @param value T\n     */\n    static delay<T>(t: number, value?: T): Promise<T | void> {\n        return new Promise((resolve) => setTimeout(() => resolve(value), t));\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CredentialEntity } from \"./CredentialEntity\";\nimport { CredentialType } from \"../../utils/Constants\";\n\n/**\n * REFRESH_TOKEN Cache\n *\n * Key:Value Schema:\n *\n * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--\n *\n * Value:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      familyId: Family ID identifier, '1' represents Microsoft Family\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\n * }\n */\nexport class RefreshTokenEntity extends CredentialEntity {\n    familyId?: string;\n\n    /**\n     * Create RefreshTokenEntity\n     * @param homeAccountId\n     * @param authenticationResult\n     * @param clientId\n     * @param authority\n     */\n    static createRefreshTokenEntity(\n        homeAccountId: string,\n        environment: string,\n        refreshToken: string,\n        clientId: string,\n        familyId?: string,\n        oboAssertion?: string\n    ): RefreshTokenEntity {\n        const rtEntity = new RefreshTokenEntity();\n\n        rtEntity.clientId = clientId;\n        rtEntity.credentialType = CredentialType.REFRESH_TOKEN;\n        rtEntity.environment = environment;\n        rtEntity.homeAccountId = homeAccountId;\n        rtEntity.secret = refreshToken;\n        rtEntity.oboAssertion = oboAssertion;\n\n        if (familyId)\n            rtEntity.familyId = familyId;\n\n        return rtEntity;\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isRefreshTokenEntity(entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"credentialType\") &&\n            entity.hasOwnProperty(\"clientId\") &&\n            entity.hasOwnProperty(\"secret\") &&\n            entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"./AuthError\";\n\n/**\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\n */\nexport const InteractionRequiredServerErrorMessage = [\n    \"interaction_required\",\n    \"consent_required\",\n    \"login_required\"\n];\n\nexport const InteractionRequiredAuthSubErrorMessage = [\n    \"message_only\",\n    \"additional_action\",\n    \"basic_action\",\n    \"user_password_expired\",\n    \"consent_required\"\n];\n\n/**\n * Interaction required errors defined by the SDK\n */\nexport const InteractionRequiredAuthErrorMessage = {\n    noTokensFoundError: {\n        code: \"no_tokens_found\",\n        desc: \"No refresh token found in the cache. Please sign-in.\"\n    }\n};\n\n/**\n * Error thrown when user interaction is required.\n */\nexport class InteractionRequiredAuthError extends AuthError {\n\n    constructor(errorCode?: string, errorMessage?: string, subError?: string) {\n        super(errorCode, errorMessage, subError);\n        this.name = \"InteractionRequiredAuthError\";\n\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n    }\n\n    /**\n     * Helper function used to determine if an error thrown by the server requires interaction to resolve\n     * @param errorCode \n     * @param errorString \n     * @param subError \n     */\n    static isInteractionRequiredError(errorCode?: string, errorString?: string, subError?: string) : boolean {\n        const isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n        const isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n        const isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some((irErrorCode) => {\n            return errorString.indexOf(irErrorCode) > -1;\n        });\n\n        return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\n    }\n\n    /**\n     * Creates an error thrown when the authorization code required for a token request is null or empty.\n     */\n    static createNoTokensFoundError(): InteractionRequiredAuthError {\n        return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.noTokensFoundError.code, InteractionRequiredAuthErrorMessage.noTokensFoundError.desc);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IdTokenEntity } from \"./IdTokenEntity\";\nimport { AccessTokenEntity } from \"./AccessTokenEntity\";\nimport { RefreshTokenEntity } from \"./RefreshTokenEntity\";\nimport { AccountEntity } from \"./AccountEntity\";\nimport { AppMetadataEntity } from \"./AppMetadataEntity\";\n\nexport class CacheRecord {\n    account: AccountEntity | null;\n    idToken: IdTokenEntity | null;\n    accessToken: AccessTokenEntity | null;\n    refreshToken: RefreshTokenEntity | null;\n    appMetadata: AppMetadataEntity | null;\n\n    constructor(accountEntity?: AccountEntity | null, idTokenEntity?: IdTokenEntity | null, accessTokenEntity?: AccessTokenEntity | null, refreshTokenEntity?: RefreshTokenEntity | null, appMetadataEntity?: AppMetadataEntity | null) {\n        this.account = accountEntity || null;\n        this.idToken = idTokenEntity || null;\n        this.accessToken = accessTokenEntity || null;\n        this.refreshToken = refreshTokenEntity || null;\n        this.appMetadata = appMetadataEntity || null;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils } from \"./StringUtils\";\nimport { Constants } from \"./Constants\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n\n/**\n * Type which defines the object that is stringified, encoded and sent in the state value.\n * Contains the following:\n * - id - unique identifier for this request\n * - ts - timestamp for the time the request was made. Used to ensure that token expiration is not calculated incorrectly.\n * - platformState - string value sent from the platform.\n */\nexport type LibraryStateObject = {\n    id: string,\n    meta?: Record<string, string>\n};\n\n/**\n * Type which defines the stringified and encoded object sent to the service in the authorize request.\n */\nexport type RequestStateObject = {\n    userRequestState: string,\n    libraryState: LibraryStateObject\n};\n\n/**\n * Class which provides helpers for OAuth 2.0 protocol specific values\n */\nexport class ProtocolUtils {\n\n    /**\n     * Appends user state with random guid, or returns random guid.\n     * @param userState \n     * @param randomGuid \n     */\n    static setRequestState(cryptoObj: ICrypto, userState?: string, meta?: Record<string, string>): string {\n        const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n        return !StringUtils.isEmpty(userState) ? `${libraryState}${Constants.RESOURCE_DELIM}${userState}` : libraryState;\n    }\n\n    /**\n     * Generates the state value used by the common library.\n     * @param randomGuid \n     * @param cryptoObj \n     */\n    static generateLibraryState(cryptoObj: ICrypto, meta?: Record<string, string>): string {\n        if (!cryptoObj) {\n            throw ClientAuthError.createNoCryptoObjectError(\"generateLibraryState\");\n        }\n\n        // Create a state object containing a unique id and the timestamp of the request creation\n        const stateObj: LibraryStateObject = {\n            id: cryptoObj.createNewGuid()\n        };\n\n        if (meta) {\n            stateObj.meta = meta;\n        }\n\n        const stateString = JSON.stringify(stateObj);\n\n        return cryptoObj.base64Encode(stateString);\n    }\n\n    /**\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\n     * @param state \n     * @param cryptoObj \n     */\n    static parseRequestState(cryptoObj: ICrypto, state: string): RequestStateObject {\n        if (!cryptoObj) {\n            throw ClientAuthError.createNoCryptoObjectError(\"parseRequestState\");\n        }\n\n        if (StringUtils.isEmpty(state)) {\n            throw ClientAuthError.createInvalidStateError(state, \"Null, undefined or empty state\");\n        }\n\n        try {\n            // Split the state between library state and user passed state and decode them separately\n            const splitState = state.split(Constants.RESOURCE_DELIM);\n            const libraryState = splitState[0];\n            const userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : \"\";\n            const libraryStateString = cryptoObj.base64Decode(libraryState);\n            const libraryStateObj = JSON.parse(libraryStateString) as LibraryStateObject;\n            return {\n                userRequestState: !StringUtils.isEmpty(userState) ? userState : \"\",\n                libraryState: libraryStateObj\n            };\n        } catch(e) {\n            throw ClientAuthError.createInvalidStateError(state, e);\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, SignedHttpRequestParameters } from \"./ICrypto\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { TokenClaims } from \"../account/TokenClaims\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n\n/**\n * See eSTS docs for more info.\n * - A kid element, with the value containing an RFC 7638-compliant JWK thumbprint that is base64 encoded.\n * -  xms_ksl element, representing the storage location of the key's secret component on the client device. One of two values:\n *      - sw: software storage\n *      - uhw: hardware storage\n */\ntype ReqCnf = {\n    kid: string;\n    xms_ksl: KeyLocation;\n};\n\nenum KeyLocation {\n    SW = \"sw\",\n    UHW = \"uhw\"\n}\n\nexport class PopTokenGenerator {\n\n    private cryptoUtils: ICrypto;\n\n    constructor(cryptoUtils: ICrypto) {\n        this.cryptoUtils = cryptoUtils;\n    }\n\n    async generateCnf(request: SignedHttpRequestParameters): Promise<string> {\n        const reqCnf = await this.generateKid(request);\n        return this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n    }\n\n    async generateKid(request: SignedHttpRequestParameters): Promise<ReqCnf> {\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\n\n        return {\n            kid: kidThumbprint,\n            xms_ksl: KeyLocation.SW\n        };\n    }\n\n    async signPopToken(accessToken: string, request: SignedHttpRequestParameters): Promise<string> {\n        const tokenClaims: TokenClaims | null = AuthToken.extractTokenClaims(accessToken, this.cryptoUtils);\n        if (!tokenClaims?.cnf?.kid) {\n            throw ClientAuthError.createTokenClaimsRequiredError();\n        }\n        \n        return this.signPayload(accessToken, tokenClaims.cnf.kid, request);\n    }\n\n    async signPayload(payload: string, kid: string, request: SignedHttpRequestParameters, claims?: object): Promise<string> {\n        // Deconstruct request to extract SHR parameters\n        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce } = request;\n\n        const resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n\n        return await this.cryptoUtils.signJwt({\n            at: payload,\n            ts: TimeUtils.nowSeconds(),\n            m: resourceRequestMethod?.toUpperCase(),\n            u: resourceUrlComponents?.HostNameAndPort,\n            nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n            p: resourceUrlComponents?.AbsolutePath,\n            q: (resourceUrlComponents?.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n            client_claims: shrClaims || undefined,\n            ...claims\n        }, kid);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { IUri } from \"./IUri\";\nimport { AADAuthorityConstants, Constants } from \"../utils/Constants\";\n\n/**\n * Url object class which can perform various transformations on url strings.\n */\nexport class UrlString {\n\n    // internal url string field\n    private _urlString: string;\n    public get urlString(): string {\n        return this._urlString;\n    }\n\n    constructor(url: string) {\n        this._urlString = url;\n        if (StringUtils.isEmpty(this._urlString)) {\n            // Throws error if url is empty\n            throw ClientConfigurationError.createUrlEmptyError();\n        }\n\n        if (StringUtils.isEmpty(this.getHash())) {\n            this._urlString = UrlString.canonicalizeUri(url);\n        }\n    }\n\n    /**\n     * Ensure urls are lower case and end with a / character.\n     * @param url\n     */\n    static canonicalizeUri(url: string): string {\n        if (url) {\n            let lowerCaseUrl = url.toLowerCase();\n\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n            } else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n            }\n\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n                lowerCaseUrl += \"/\";\n            }\n\n            return lowerCaseUrl;\n        }\n\n        return url;\n    }\n\n    /**\n     * Throws if urlString passed is not a valid authority URI string.\n     */\n    validateAsUri(): void {\n        // Attempts to parse url for uri components\n        let components;\n        try {\n            components = this.getUrlComponents();\n        } catch (e) {\n            throw ClientConfigurationError.createUrlParseError(e);\n        }\n\n        // Throw error if URI or path segments are not parseable.\n        if (!components.HostNameAndPort || !components.PathSegments) {\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${this.urlString}`);\n        }\n\n        // Throw error if uri is insecure.\n        if(!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n            throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\n        }\n    }\n\n    /**\n     * Given a url and a query string return the url with provided query string appended\n     * @param url\n     * @param queryString\n     */\n    static appendQueryString(url: string, queryString: string): string {\n        if (StringUtils.isEmpty(queryString)) {\n            return url;\n        }\n\n        return url.indexOf(\"?\") < 0 ? `${url}?${queryString}` : `${url}&${queryString}`;\n    }\n\n    /**\n     * Returns a url with the hash removed\n     * @param url\n     */\n    static removeHashFromUrl(url: string): string {\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n    }\n\n    /**\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\n     * @param href The url\n     * @param tenantId The tenant id to replace\n     */\n    replaceTenantPath(tenantId: string): UrlString {\n        const urlObject = this.getUrlComponents();\n        const pathArray = urlObject.PathSegments;\n        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {\n            pathArray[0] = tenantId;\n        }\n        return UrlString.constructAuthorityUriFromObject(urlObject);\n    }\n\n    /**\n     * Returns the anchor part(#) of the URL\n     */\n    getHash(): string {\n        return UrlString.parseHash(this.urlString);\n    }\n\n    /**\n     * Parses out the components from a url string.\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\n     */\n    getUrlComponents(): IUri {\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n        const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\n\n        // If url string does not match regEx, we throw an error\n        const match = this.urlString.match(regEx);\n        if (!match) {\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${this.urlString}`);\n        }\n\n        // Url component object\n        const urlComponents = {\n            Protocol: match[1],\n            HostNameAndPort: match[4],\n            AbsolutePath: match[5],\n            QueryString: match[7]\n        } as IUri;\n\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\n        pathSegments = pathSegments.filter((val) => val && val.length > 0); // remove empty elements\n        urlComponents.PathSegments = pathSegments;\n\n        if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length-1);\n        }\n        return urlComponents;\n    }\n\n    static getDomainFromUrl(url: string): string {\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n\n        const match = url.match(regEx);\n\n        if (!match) {\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${url}`);\n        }\n\n        return match[2];\n    }\n\n    static getAbsoluteUrl(relativeUrl: string, baseUrl: string): string {\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\n            const url = new UrlString(baseUrl);\n            const baseComponents = url.getUrlComponents();\n\n            return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n        }\n\n        return relativeUrl;\n    }\n\n    /**\n     * Parses hash string from given string. Returns empty string if no hash symbol is found.\n     * @param hashString\n     */\n    static parseHash(hashString: string): string {\n        const hashIndex1 = hashString.indexOf(\"#\");\n        const hashIndex2 = hashString.indexOf(\"#/\");\n        if (hashIndex2 > -1) {\n            return hashString.substring(hashIndex2 + 2);\n        } else if (hashIndex1 > -1) {\n            return hashString.substring(hashIndex1 + 1);\n        }\n        return \"\";\n    }\n\n    static constructAuthorityUriFromObject(urlObject: IUri): UrlString {\n        return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n    }\n\n    /**\n     * Returns URL hash as server auth code response object.\n     */\n    static getDeserializedHash(hash: string): ServerAuthorizationCodeResponse {\n        // Check if given hash is empty\n        if (StringUtils.isEmpty(hash)) {\n            return {};\n        }\n        // Strip the # symbol if present\n        const parsedHash = UrlString.parseHash(hash);\n        // If # symbol was not present, above will return empty string, so give original hash value\n        const deserializedHash: ServerAuthorizationCodeResponse = StringUtils.queryStringToObject<ServerAuthorizationCodeResponse>(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);\n        // Check if deserialization didn't work\n        if (!deserializedHash) {\n            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\n        }\n        return deserializedHash;\n    }\n\n    /**\n     * Check if the hash of the URL string contains known properties\n     */\n    static hashContainsKnownProperties(hash: string): boolean {\n        if (StringUtils.isEmpty(hash) || hash.indexOf(\"=\") < 0) {\n            // Hash doesn't contain key/value pairs\n            return false;\n        }\n\n        const parameters: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\n        return !!(\n            parameters.code ||\n            parameters.error_description ||\n            parameters.error ||\n            parameters.state\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { APP_METADATA, Separators } from \"../../utils/Constants\";\n\n/**\n * APP_METADATA Cache\n *\n * Key:Value Schema:\n *\n * Key: appmetadata-<environment>-<client_id>\n *\n * Value:\n * {\n *      clientId: client ID of the application\n *      environment: entity that issued the token, represented as a full host\n *      familyId: Family ID identifier, '1' represents Microsoft Family\n * }\n */\nexport class AppMetadataEntity {\n    clientId: string;\n    environment: string;\n    familyId?: string;\n\n    /**\n     * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\n     */\n    generateAppMetadataKey(): string {\n        return AppMetadataEntity.generateAppMetadataCacheKey(this.environment, this.clientId);\n    }\n\n    /**\n     * Generate AppMetadata Cache Key\n     */\n    static generateAppMetadataCacheKey(environment: string, clientId: string): string {\n        const appMetaDataKeyArray: Array<string> = [\n            APP_METADATA,\n            environment,\n            clientId,\n        ];\n        return appMetaDataKeyArray.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Creates AppMetadataEntity\n     * @param clientId\n     * @param environment\n     * @param familyId\n     */\n    static createAppMetadataEntity(clientId: string, environment: string, familyId?: string): AppMetadataEntity {\n        const appMetadata = new AppMetadataEntity();\n\n        appMetadata.clientId = clientId;\n        appMetadata.environment = environment;\n        if (familyId) {\n            appMetadata.familyId = familyId;\n        }\n\n        return appMetadata;\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAppMetadataEntity(key: string, entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            key.indexOf(APP_METADATA) === 0 &&\n            entity.hasOwnProperty(\"clientId\") &&\n            entity.hasOwnProperty(\"environment\")\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ISerializableTokenCache } from \"../interface/ISerializableTokenCache\";\n\n/**\n * This class instance helps track the memory changes facilitating\n * decisions to read from and write to the persistent cache\n */export class TokenCacheContext {\n    /**\n     * boolean indicating cache change\n     */\n    hasChanged: boolean;\n    /**\n     * serializable token cache interface\n     */\n    cache: ISerializableTokenCache;\n\n    constructor(tokenCache: ISerializableTokenCache, hasChanged: boolean) {\n        this.cache = tokenCache;\n        this.hasChanged = hasChanged;\n    }\n\n    /**\n     * boolean which indicates the changes in cache\n     */\n    get cacheHasChanged(): boolean {\n        return this.hasChanged;\n    }\n\n    /**\n     * function to retrieve the token cache\n     */\n    get tokenCache(): ISerializableTokenCache {\n        return this.cache;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonRefreshTokenRequest } from \"../request/CommonRefreshTokenRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType, AuthenticationScheme, Errors  } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ServerError } from \"../error/ServerError\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\nimport { CcsCredentialType } from \"../account/CcsCredential\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from \"../error/InteractionRequiredAuthError\";\n\n/**\n * OAuth2.0 refresh token client\n */\nexport class RefreshTokenClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    public async acquireToken(request: CommonRefreshTokenRequest): Promise<AuthenticationResult>{\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(request, this.authority);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        responseHandler.validateTokenResponse(response.body);\n        return responseHandler.handleServerTokenResponse(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request,\n            undefined,\n            undefined,\n            true\n        );\n    }\n\n    /**\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\n     * @param request\n     */\n    public async acquireTokenByRefreshToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        // try checking if FOCI is enabled for the given application\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\n\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n            try {\n                return this.acquireTokenWithCachedRefreshToken(request, true);\n            } catch (e) {\n                const noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n                    return this.acquireTokenWithCachedRefreshToken(request, false);\n                // throw in all other cases\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        // fall back to application refresh token acquisition\n        return this.acquireTokenWithCachedRefreshToken(request, false);\n    }\n\n    /**\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\n     * @param request\n     */\n    private async acquireTokenWithCachedRefreshToken(request: CommonSilentFlowRequest, foci: boolean) {\n        // fetches family RT or application RT based on FOCI value\n        const refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\n\n        // no refresh Token\n        if (!refreshToken) {\n            throw InteractionRequiredAuthError.createNoTokensFoundError();\n        }\n\n        const refreshTokenRequest: CommonRefreshTokenRequest = {\n            ...request,\n            refreshToken: refreshToken.secret,\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n            ccsCredential: {\n                credential: request.account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID\n            }\n        };\n\n        return this.acquireToken(refreshTokenRequest);\n    }\n\n    /**\n     * Constructs the network message and makes a NW call to the underlying secure token service\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonRefreshTokenRequest, authority: Authority)\n        : Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n\n        const requestBody = await this.createTokenRequestBody(request);\n        const queryParameters = this.createTokenQueryParameters(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders(request.ccsCredential);\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request \n     */\n    private createTokenQueryParameters(request: CommonRefreshTokenRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Helper function to create the token request body\n     * @param request\n     */\n    private async createTokenRequestBody(request: CommonRefreshTokenRequest): Promise<string> {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        parameterBuilder.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        parameterBuilder.addRefreshToken(request.refreshToken);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            const cnfString = await popTokenGenerator.generateCnf(request);\n            parameterBuilder.addPopToken(cnfString);\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if(request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n            }\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n            switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                    break;\n            }\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { RefreshTokenClient } from \"./RefreshTokenClient\";\nimport { ClientAuthError, ClientAuthErrorMessage } from \"../error/ClientAuthError\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { CacheRecord } from \"../cache/entities/CacheRecord\";\nimport { CacheOutcome } from \"../utils/Constants\";\n\nexport class SilentFlowClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\n     * the given token and returns the renewed token\n     * @param request\n     */\n    async acquireToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        try {\n            return await this.acquireCachedToken(request);\n        } catch (e) {\n            if (e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\n                const refreshTokenClient = new RefreshTokenClient(this.config);\n                return refreshTokenClient.acquireTokenByRefreshToken(request);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    /**\n     * Retrieves token from cache or throws an error if it must be refreshed.\n     * @param request\n     */\n    async acquireCachedToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n\n        if (request.forceRefresh) {\n            // Must refresh due to present force_refresh flag.\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\n            throw ClientAuthError.createRefreshRequiredError();\n        }\n\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        const environment = request.authority || this.authority.getPreferredCache();\n\n        const cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, request, environment);\n        \n        if (!cacheRecord.accessToken) {\n            // Must refresh due to non-existent access_token.\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n            throw ClientAuthError.createRefreshRequiredError();\n        } else if (\n            TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) ||\n            TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)\n        ) {\n            // Must refresh due to expired access_token.\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n            this.logger.info(`SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within ${this.config.systemOptions.tokenRenewalOffsetSeconds} seconds.`);\n            throw ClientAuthError.createRefreshRequiredError();\n        } else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\n            // Must refresh due to the refresh_in value.\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\n            throw ClientAuthError.createRefreshRequiredError();\n        }\n\n        if (this.config.serverTelemetryManager) {\n            this.config.serverTelemetryManager.incrementCacheHits();\n        }\n\n        return await this.generateResultFromCacheRecord(cacheRecord, request);\n    }\n\n    /**\n     * Helper function to build response object from the CacheRecord\n     * @param cacheRecord\n     */\n    private async generateResultFromCacheRecord(cacheRecord: CacheRecord, request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        let idTokenObj: AuthToken | undefined;\n        if (cacheRecord.idToken) {\n            idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\n        }\n        return await ResponseHandler.generateAuthenticationResult(\n            this.cryptoUtils,\n            this.authority,\n            cacheRecord,\n            true,\n            request,\n            idTokenObj\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorityType } from \"./AuthorityType\";\nimport { isOpenIdConfigResponse, OpenIdConfigResponse } from \"./OpenIdConfigResponse\";\nimport { UrlString } from \"../url/UrlString\";\nimport { IUri } from \"../url/IUri\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { AuthorityMetadataSource, Constants, RegionDiscoveryOutcomes } from \"../utils/Constants\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ProtocolMode } from \"./ProtocolMode\";\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\nimport { AuthorityMetadataEntity } from \"../cache/entities/AuthorityMetadataEntity\";\nimport { AuthorityOptions , AzureCloudInstance } from \"./AuthorityOptions\";\nimport { CloudInstanceDiscoveryResponse, isCloudInstanceDiscoveryResponse } from \"./CloudInstanceDiscoveryResponse\";\nimport { CloudDiscoveryMetadata } from \"./CloudDiscoveryMetadata\";\nimport { RegionDiscovery } from \"./RegionDiscovery\";\nimport { RegionDiscoveryMetadata } from \"./RegionDiscoveryMetadata\";\nimport { ImdsOptions } from \"./ImdsOptions\";\nimport { AzureCloudOptions } from \"../config/ClientConfiguration\";\n\n/**\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\n * endpoint. It will store the pertinent config data in this object for use during token calls.\n */\nexport class Authority {\n\n    // Canonical authority url string\n    private _canonicalAuthority: UrlString;\n    // Canonicaly authority url components\n    private _canonicalAuthorityUrlComponents: IUri | null;\n    // Network interface to make requests with.\n    protected networkInterface: INetworkModule;\n    // Cache Manager to cache network responses\n    protected cacheManager: ICacheManager;\n    // Protocol mode to construct endpoints\n    private authorityOptions: AuthorityOptions;\n    // Authority metadata\n    private metadata: AuthorityMetadataEntity;\n    // Region discovery service\n    private regionDiscovery: RegionDiscovery;\n    // Region discovery metadata\n    public regionDiscoveryMetadata: RegionDiscoveryMetadata;\n    // Proxy url string\n    private proxyUrl: string;\n\n    constructor(authority: string, networkInterface: INetworkModule, cacheManager: ICacheManager, authorityOptions: AuthorityOptions, proxyUrl?: string) {\n        this.canonicalAuthority = authority;\n        this._canonicalAuthority.validateAsUri();\n        this.networkInterface = networkInterface;\n        this.cacheManager = cacheManager;\n        this.authorityOptions = authorityOptions;\n        this.regionDiscovery = new RegionDiscovery(networkInterface);\n        this.regionDiscoveryMetadata = { region_used: undefined, region_source: undefined, region_outcome: undefined };\n        this.proxyUrl = proxyUrl || Constants.EMPTY_STRING;\n    }\n\n    // See above for AuthorityType\n    public get authorityType(): AuthorityType {\n        const pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\n\n        if (pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS) {\n            return AuthorityType.Adfs;\n        }\n\n        return AuthorityType.Default;\n    }\n\n    /**\n     * ProtocolMode enum representing the way endpoints are constructed.\n     */\n    public get protocolMode(): ProtocolMode {\n        return this.authorityOptions.protocolMode;\n    }\n\n    /**\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\n     */\n    public get options(): AuthorityOptions {\n        return this.authorityOptions;\n    }\n\n    /**\n     * A URL that is the authority set by the developer\n     */\n    public get canonicalAuthority(): string {\n        return this._canonicalAuthority.urlString;\n    }\n\n    /**\n     * Sets canonical authority.\n     */\n    public set canonicalAuthority(url: string) {\n        this._canonicalAuthority = new UrlString(url);\n        this._canonicalAuthority.validateAsUri();\n        this._canonicalAuthorityUrlComponents = null;\n    }\n\n    /**\n     * Get authority components.\n     */\n    public get canonicalAuthorityUrlComponents(): IUri {\n        if (!this._canonicalAuthorityUrlComponents) {\n            this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n        }\n\n        return this._canonicalAuthorityUrlComponents;\n    }\n\n    /**\n     * Get hostname and port i.e. login.microsoftonline.com\n     */\n    public get hostnameAndPort(): string {\n        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    }\n\n    /**\n     * Get tenant for authority.\n     */\n    public get tenant(): string {\n        return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    }\n\n    /**\n     * OAuth /authorize endpoint for requests\n     */\n    public get authorizationEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.authorization_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth /token endpoint for requests\n     */\n    public get tokenEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.token_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    public get deviceCodeEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth logout endpoint for requests\n     */\n    public get endSessionEndpoint(): string {\n        if(this.discoveryComplete()) {\n            // ROPC policies may not have end_session_endpoint set\n            if (!this.metadata.end_session_endpoint) {\n                throw ClientAuthError.createLogoutNotSupportedError();\n            }\n            const endpoint = this.replacePath(this.metadata.end_session_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth issuer for requests\n     */\n    public get selfSignedJwtAudience(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.issuer);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * Replaces tenant in url path with current tenant. Defaults to common.\n     * @param urlString\n     */\n    private replaceTenant(urlString: string): string {\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n    }\n\n    /**\n     * Replaces path such as tenant or policy with the current tenant or policy.\n     * @param urlString\n     */\n    private replacePath(urlString: string): string {\n        let endpoint = urlString;\n        const cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\n        const cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n        const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n\n        currentAuthorityParts.forEach((currentPart, index) => {\n            const cachedPart = cachedAuthorityParts[index];\n            if (currentPart !== cachedPart) {\n                endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);\n            }\n        });\n\n        return endpoint;\n    }\n\n    /**\n     * The default open id configuration endpoint for any canonical authority.\n     */\n    protected get defaultOpenIdConfigurationEndpoint(): string {\n        if (this.authorityType === AuthorityType.Adfs || this.protocolMode === ProtocolMode.OIDC) {\n            return `${this.canonicalAuthority}.well-known/openid-configuration`;\n        }\n        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\n    }\n\n    /**\n     * Boolean that returns whethr or not tenant discovery has been completed.\n     */\n    discoveryComplete(): boolean {\n        return !!this.metadata;\n    }\n\n    /**\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\n     * and the /authorize, /token and logout endpoints.\n     */\n    public async resolveEndpointsAsync(): Promise<void> {\n        let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n        if (!metadataEntity) {\n            metadataEntity = new AuthorityMetadataEntity();\n            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n        }\n\n        const cloudDiscoverySource = await this.updateCloudDiscoveryMetadata(metadataEntity);\n        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n        const endpointSource = await this.updateEndpointMetadata(metadataEntity);\n\n        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\n            // Reset the expiration time unless both values came from a successful cache lookup\n            metadataEntity.resetExpiresAt();\n            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n        }\n\n        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n        this.metadata = metadataEntity;\n    }\n\n    /**\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\n     * @param metadataEntity\n     */\n    private async updateEndpointMetadata(metadataEntity: AuthorityMetadataEntity): Promise<AuthorityMetadataSource> {\n        let metadata = this.getEndpointMetadataFromConfig();\n        if (metadata) {\n            metadataEntity.updateEndpointMetadata(metadata, false);\n            return AuthorityMetadataSource.CONFIG;\n        }\n\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\n            // No need to update\n            return AuthorityMetadataSource.CACHE;\n        }\n\n        metadata = await this.getEndpointMetadataFromNetwork();\n        if (metadata) {\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                const autodetectedRegionName = await this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration.environmentRegion, this.regionDiscoveryMetadata, this.proxyUrl);\n\n                const azureRegion = this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG\n                    ? autodetectedRegionName\n                    : this.authorityOptions.azureRegionConfiguration.azureRegion;\n\n                if (this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n                    this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ?\n                        RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL :\n                        RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n                } else {\n                    if (autodetectedRegionName) {\n                        this.regionDiscoveryMetadata.region_outcome = (this.authorityOptions.azureRegionConfiguration.azureRegion === autodetectedRegionName) ?\n                            RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED :\n                            RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\n                    } else {\n                        this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n                    }\n                }\n\n                if (azureRegion) {\n                    this.regionDiscoveryMetadata.region_used = azureRegion;\n                    metadata = Authority.replaceWithRegionalInformation(metadata, azureRegion);\n                }\n            }\n\n            metadataEntity.updateEndpointMetadata(metadata, true);\n            return AuthorityMetadataSource.NETWORK;\n        } else {\n            throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\n        }\n    }\n\n    /**\n     * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority\n     * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\n     * @param metadataEntity\n     */\n    private isAuthoritySameType(metadataEntity: AuthorityMetadataEntity): boolean {\n        const cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\n        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n\n        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n    }\n\n    /**\n     * Parse authorityMetadata config option\n     */\n    private getEndpointMetadataFromConfig(): OpenIdConfigResponse | null {\n        if (this.authorityOptions.authorityMetadata) {\n            try {\n                return JSON.parse(this.authorityOptions.authorityMetadata) as OpenIdConfigResponse;\n            } catch (e) {\n                throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\n     */\n    private async getEndpointMetadataFromNetwork(): Promise<OpenIdConfigResponse | null> {\n        const options: ImdsOptions = {};\n        if (this.proxyUrl) {\n            options.proxyUrl = this.proxyUrl;\n        }\n\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync<OpenIdConfigResponse>(this.defaultOpenIdConfigurationEndpoint, options);\n            return isOpenIdConfigResponse(response.body) ? response.body : null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from\n     * @param cachedMetadata\n     * @param newMetadata\n     */\n    private async updateCloudDiscoveryMetadata(metadataEntity: AuthorityMetadataEntity): Promise<AuthorityMetadataSource> {\n        let metadata = this.getCloudDiscoveryMetadataFromConfig();\n        if (metadata) {\n            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\n            return AuthorityMetadataSource.CONFIG;\n        }\n\n        // If The cached metadata came from config but that config was not passed to this instance, we must go to the network\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {\n            // No need to update\n            return AuthorityMetadataSource.CACHE;\n        }\n\n        metadata = await this.getCloudDiscoveryMetadataFromNetwork();\n        if (metadata) {\n            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\n            return AuthorityMetadataSource.NETWORK;\n        } else {\n            // Metadata could not be obtained from config, cache or network\n            throw ClientConfigurationError.createUntrustedAuthorityError();\n        }\n    }\n\n    /**\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\n     */\n    private getCloudDiscoveryMetadataFromConfig(): CloudDiscoveryMetadata | null {\n        // Check if network response was provided in config\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\n            try {\n                const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata) as CloudInstanceDiscoveryResponse;\n                const metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\n                if (metadata) {\n                    return metadata;\n                }\n            } catch (e) {\n                throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\n            }\n        }\n\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n        if (this.isInKnownAuthorities()) {\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n\n        return null;\n    }\n\n    /**\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\n     * @param networkInterface\n     */\n    private async getCloudDiscoveryMetadataFromNetwork(): Promise<CloudDiscoveryMetadata | null> {\n        const instanceDiscoveryEndpoint = `${Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\n        const options: ImdsOptions = {};\n        if (this.proxyUrl) {\n            options.proxyUrl = this.proxyUrl;\n        }\n\n        let match = null;\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync<CloudInstanceDiscoveryResponse>(instanceDiscoveryEndpoint, options);\n            const metadata = isCloudInstanceDiscoveryResponse(response.body) ? response.body.metadata : [];\n            if (metadata.length === 0) {\n                // If no metadata is returned, authority is untrusted\n                return null;\n            }\n            match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\n        } catch(e) {\n            return null;\n        }\n\n        if (!match) {\n            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        return match;\n    }\n\n    /**\n     * Helper function to determine if this host is included in the knownAuthorities config option\n     */\n    private isInKnownAuthorities(): boolean {\n        const matches = this.authorityOptions.knownAuthorities.filter((authority) => {\n            return UrlString.getDomainFromUrl(authority).toLowerCase() === this.hostnameAndPort;\n        });\n\n        return matches.length > 0;\n    }\n\n    /**\n     * helper function to populate the authority based on azureCloudOptions\n     * @param authorityString\n     * @param azureCloudOptions\n     */\n    static generateAuthority(authorityString: string, azureCloudOptions?: AzureCloudOptions): string {\n        let authorityAzureCloudInstance;\n\n        if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\n            const tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : Constants.DEFAULT_COMMON_TENANT;\n            authorityAzureCloudInstance = `${azureCloudOptions.azureCloudInstance}/${tenant}/`;\n        }\n\n        return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\n    }\n\n    /**\n     * Creates cloud discovery metadata object from a given host\n     * @param host\n     */\n    static createCloudDiscoveryMetadataFromHost(host: string): CloudDiscoveryMetadata {\n        return {\n            preferred_network: host,\n            preferred_cache: host,\n            aliases: [host]\n        };\n    }\n\n    /**\n     * Searches instance discovery network response for the entry that contains the host in the aliases list\n     * @param response\n     * @param authority\n     */\n    static getCloudDiscoveryMetadataFromNetworkResponse(response: CloudDiscoveryMetadata[], authority: string): CloudDiscoveryMetadata | null {\n        for (let i = 0; i < response.length; i++) {\n            const metadata = response[i];\n            if (metadata.aliases.indexOf(authority) > -1) {\n                return metadata;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * helper function to generate environment from authority object\n     */\n    getPreferredCache(): string {\n        if(this.discoveryComplete()) {\n            return this.metadata.preferred_cache;\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * Returns whether or not the provided host is an alias of this authority instance\n     * @param host\n     */\n    isAlias(host: string): boolean {\n        return this.metadata.aliases.indexOf(host) > -1;\n    }\n\n    /**\n     * Checks whether the provided host is that of a public cloud authority\n     *\n     * @param authority string\n     * @returns bool\n     */\n    static isPublicCloudAuthority(host: string): boolean {\n        return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n    }\n\n    /**\n     * Rebuild the authority string with the region\n     *\n     * @param host string\n     * @param region string\n     */\n    static buildRegionalAuthorityString(host: string, region: string, queryString?: string): string {\n        // Create and validate a Url string object with the initial authority string\n        const authorityUrlInstance = new UrlString(host);\n        authorityUrlInstance.validateAsUri();\n\n        const authorityUrlParts = authorityUrlInstance.getUrlComponents();\n\n        let hostNameAndPort= `${region}.${authorityUrlParts.HostNameAndPort}`;\n\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n            hostNameAndPort = `${region}.${Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\n        }\n\n        // Include the query string portion of the url\n        const url = UrlString.constructAuthorityUriFromObject({\n            ...authorityUrlInstance.getUrlComponents(),\n            HostNameAndPort: hostNameAndPort\n        }).urlString;\n\n        // Add the query string if a query string was provided\n        if (queryString) return `${url}?${queryString}`;\n\n        return url;\n    }\n\n    /**\n     * Replace the endpoints in the metadata object with their regional equivalents.\n     *\n     * @param metadata OpenIdConfigResponse\n     * @param azureRegion string\n     */\n    static replaceWithRegionalInformation(metadata: OpenIdConfigResponse, azureRegion: string): OpenIdConfigResponse {\n        metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);\n        // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\n        metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, \"allowestsrnonmsi=true\");\n\n        if (metadata.end_session_endpoint) {\n            metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\n        }\n\n        return metadata;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Protocol modes supported by MSAL.\n */\nexport enum ProtocolMode {\n    AAD = \"AAD\",\n    OIDC = \"OIDC\"\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CloudDiscoveryMetadata } from \"../../authority/CloudDiscoveryMetadata\";\nimport { OpenIdConfigResponse } from \"../../authority/OpenIdConfigResponse\";\nimport { AUTHORITY_METADATA_CONSTANTS } from \"../../utils/Constants\";\nimport { TimeUtils } from \"../../utils/TimeUtils\";\n\nexport class AuthorityMetadataEntity {\n    aliases: Array<string>;\n    preferred_cache: string;\n    preferred_network: string;\n    canonical_authority: string;\n    authorization_endpoint: string;\n    token_endpoint: string;\n    end_session_endpoint?: string;\n    issuer: string;\n    aliasesFromNetwork: boolean;\n    endpointsFromNetwork: boolean;\n    expiresAt: number;\n\n    constructor() {\n        this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n    }\n\n    /**\n     * Update the entity with new aliases, preferred_cache and preferred_network values\n     * @param metadata \n     * @param fromNetwork \n     */\n    updateCloudDiscoveryMetadata(metadata: CloudDiscoveryMetadata, fromNetwork: boolean): void {\n        this.aliases = metadata.aliases;\n        this.preferred_cache = metadata.preferred_cache;\n        this.preferred_network = metadata.preferred_network;\n        this.aliasesFromNetwork = fromNetwork;\n    }\n\n    /**\n     * Update the entity with new endpoints\n     * @param metadata \n     * @param fromNetwork \n     */\n    updateEndpointMetadata(metadata: OpenIdConfigResponse, fromNetwork: boolean): void {\n        this.authorization_endpoint = metadata.authorization_endpoint;\n        this.token_endpoint = metadata.token_endpoint;\n        this.end_session_endpoint = metadata.end_session_endpoint;\n        this.issuer = metadata.issuer;\n        this.endpointsFromNetwork = fromNetwork;\n    }\n\n    /**\n     * Save the authority that was used to create this cache entry\n     * @param authority \n     */\n    updateCanonicalAuthority(authority: string): void {\n        this.canonical_authority = authority;\n    }\n\n    /**\n     * Reset the exiresAt value\n     */\n    resetExpiresAt(): void {\n        this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n    }\n\n    /**\n     * Returns whether or not the data needs to be refreshed\n     */\n    isExpired(): boolean {\n        return this.expiresAt <= TimeUtils.nowSeconds();\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAuthorityMetadataEntity(key: string, entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&\n            entity.hasOwnProperty(\"aliases\") &&\n            entity.hasOwnProperty(\"preferred_cache\") &&\n            entity.hasOwnProperty(\"preferred_network\") &&\n            entity.hasOwnProperty(\"canonical_authority\") &&\n            entity.hasOwnProperty(\"authorization_endpoint\") &&\n            entity.hasOwnProperty(\"token_endpoint\") &&\n            entity.hasOwnProperty(\"issuer\") &&\n            entity.hasOwnProperty(\"aliasesFromNetwork\") &&\n            entity.hasOwnProperty(\"endpointsFromNetwork\") &&\n            entity.hasOwnProperty(\"expiresAt\")\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { IMDSBadResponse } from \"../response/IMDSBadResponse\";\nimport { Constants, RegionDiscoverySources, ResponseCodes } from \"../utils/Constants\";\nimport { RegionDiscoveryMetadata } from \"./RegionDiscoveryMetadata\";\nimport { ImdsOptions } from \"./ImdsOptions\";\n\nexport class RegionDiscovery {\n    // Network interface to make requests with.\n    protected networkInterface: INetworkModule;\n    // Options for the IMDS endpoint request\n    protected static IMDS_OPTIONS: ImdsOptions = {\n        headers: {\n            Metadata: \"true\",\n        },\n    };\n\n    constructor(networkInterface: INetworkModule) {\n        this.networkInterface = networkInterface;\n    }\n\n    /**\n     * Detect the region from the application's environment.\n     * \n     * @returns Promise<string | null>\n     */\n    public async detectRegion(environmentRegion: string | undefined, regionDiscoveryMetadata: RegionDiscoveryMetadata, proxyUrl: string): Promise<string | null> {\n        // Initialize auto detected region with the region from the envrionment \n        let autodetectedRegionName = environmentRegion;\n\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS \n        if (!autodetectedRegionName) {\n            const options = RegionDiscovery.IMDS_OPTIONS;\n            if (proxyUrl) {\n                options.proxyUrl = proxyUrl;\n            }\n\n            try {\n                const localIMDSVersionResponse = await this.getRegionFromIMDS(Constants.IMDS_VERSION, options);\n                if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n                    autodetectedRegionName = localIMDSVersionResponse.body;\n                    regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n                } \n                \n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry. \n                if (localIMDSVersionResponse.status === ResponseCodes.httpBadRequest) {\n                    const currentIMDSVersion = await this.getCurrentVersion(options);\n                    if (!currentIMDSVersion) {\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                        return null;\n                    }\n\n                    const currentIMDSVersionResponse = await this.getRegionFromIMDS(currentIMDSVersion, options);\n                    if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n                        autodetectedRegionName = currentIMDSVersionResponse.body;\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n                    }\n                }\n            } catch(e) {\n                regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                return null;\n            } \n        } else {\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n        }\n\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n        if (!autodetectedRegionName) {\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n        }\n\n        return autodetectedRegionName || null;\n    }\n\n    /**\n     * Make the call to the IMDS endpoint\n     * \n     * @param imdsEndpointUrl\n     * @returns Promise<NetworkResponse<string>>\n     */\n    private async getRegionFromIMDS(version: string, options: ImdsOptions): Promise<NetworkResponse<string>> {\n        return this.networkInterface.sendGetRequestAsync<string>(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, options, Constants.IMDS_TIMEOUT);\n    }\n\n    /**\n     * Get the most recent version of the IMDS endpoint available\n     *  \n     * @returns Promise<string | null>\n     */\n    private async getCurrentVersion(options: ImdsOptions): Promise<string | null> {\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync<IMDSBadResponse>(`${Constants.IMDS_ENDPOINT}?format=json`, options);\n\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n                return response.body[\"newest-versions\"][0];\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Authority } from \"./Authority\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\nimport { AuthorityOptions } from \"./AuthorityOptions\";\n\nexport class AuthorityFactory {\n\n    /**\n     * Create an authority object of the correct type based on the url\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n     *\n     * Also performs endpoint discovery.\n     *\n     * @param authorityUri\n     * @param networkClient\n     * @param protocolMode\n     */\n    static async createDiscoveredInstance(authorityUri: string, networkClient: INetworkModule, cacheManager: ICacheManager, authorityOptions: AuthorityOptions, proxyUrl?: string): Promise<Authority> {\n        // Initialize authority and perform discovery endpoint check.\n        const acquireTokenAuthority: Authority = AuthorityFactory.createInstance(authorityUri, networkClient, cacheManager, authorityOptions, proxyUrl);\n\n        try {\n            await acquireTokenAuthority.resolveEndpointsAsync();\n            return acquireTokenAuthority;\n        } catch (e) {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e);\n        }\n    }\n\n    /**\n     * Create an authority object of the correct type based on the url\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n     *\n     * Does not perform endpoint discovery.\n     *\n     * @param authorityUrl\n     * @param networkInterface\n     * @param protocolMode\n     */\n    static createInstance(authorityUrl: string, networkInterface: INetworkModule, cacheManager: ICacheManager, authorityOptions: AuthorityOptions, proxyUrl?: string): Authority {\n        // Throw error if authority url is empty\n        if (StringUtils.isEmpty(authorityUrl)) {\n            throw ClientConfigurationError.createUrlEmptyError();\n        }\n\n        return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, proxyUrl);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { SERVER_TELEM_CONSTANTS } from \"../../utils/Constants\";\n\nexport class ServerTelemetryEntity {\n    failedRequests: Array<string|number>;\n    errors: string[];\n    cacheHits: number;\n\n    constructor() {\n        this.failedRequests = [];\n        this.errors = [];\n        this.cacheHits = 0;\n    }\n\n    /**\n     * validates if a given cache entry is \"Telemetry\", parses <key,value>\n     * @param key\n     * @param entity\n     */\n    static isServerTelemetryEntity(key: string, entity?: object): boolean {\n\n        const validateKey: boolean = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\n        let validateEntity: boolean = true;\n\n        if (entity) {\n            validateEntity =\n                entity.hasOwnProperty(\"failedRequests\") &&\n                entity.hasOwnProperty(\"errors\") &&\n                entity.hasOwnProperty(\"cacheHits\");\n        }\n\n        return validateKey && validateEntity;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ThrottlingConstants } from \"../../utils/Constants\";\n\nexport class ThrottlingEntity {\n    // Unix-time value representing the expiration of the throttle\n    throttleTime: number;\n    // Information provided by the server\n    error?: string;\n    errorCodes?: Array<string>;\n    errorMessage?: string;\n    subError?: string;\n\n    /**\n     * validates if a given cache entry is \"Throttling\", parses <key,value>\n     * @param key\n     * @param entity\n     */\n    static isThrottlingEntity(key: string, entity?: object): boolean {\n        \n        let validateKey: boolean = false;\n        if (key) {\n            validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;\n        }\n        \n        let validateEntity: boolean = true;\n        if (entity) {\n            validateEntity = entity.hasOwnProperty(\"throttleTime\");\n        }\n\n        return validateKey && validateEntity;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"../error/AuthError\";\nimport { NetworkResponse } from \"./NetworkManager\";\n\n/**\n * Options allowed by network request APIs.\n */\nexport type NetworkRequestOptions = {\n    headers?: Record<string, string>,\n    body?: string;\n    proxyUrl?: string;\n};\n\n/**\n * Client network interface to send backend requests.\n * @interface\n */\nexport interface INetworkModule {\n\n    /**\n     * Interface function for async network \"GET\" requests. Based on the Fetch standard: https://fetch.spec.whatwg.org/\n     * @param url\n     * @param requestParams\n     * @param enableCaching\n     */\n    sendGetRequestAsync<T>(url: string, options?: NetworkRequestOptions, cancellationToken?: number): Promise<NetworkResponse<T>>;\n\n    /**\n     * Interface function for async network \"POST\" requests. Based on the Fetch standard: https://fetch.spec.whatwg.org/\n     * @param url\n     * @param requestParams\n     * @param enableCaching\n     */\n    sendPostRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>>;\n}\n\nexport const StubbedNetworkModule: INetworkModule = {\n    sendGetRequestAsync: () => {\n        const notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented for the Network interface.\";\n        return Promise.reject(AuthError.createUnexpectedError(notImplErr));\n    },\n    sendPostRequestAsync: () => {\n        const notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented for the Network interface.\";\n        return Promise.reject(AuthError.createUnexpectedError(notImplErr));\n    }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { SERVER_TELEM_CONSTANTS, Separators, CacheOutcome, Constants, RegionDiscoverySources, RegionDiscoveryOutcomes } from \"../../utils/Constants\";\nimport { CacheManager } from \"../../cache/CacheManager\";\nimport { AuthError } from \"../../error/AuthError\";\nimport { ServerTelemetryRequest } from \"./ServerTelemetryRequest\";\nimport { ServerTelemetryEntity } from \"../../cache/entities/ServerTelemetryEntity\";\nimport { StringUtils } from \"../../utils/StringUtils\";\nimport { RegionDiscoveryMetadata } from \"../../authority/RegionDiscoveryMetadata\";\n\nexport class ServerTelemetryManager {\n    private cacheManager: CacheManager;\n    private apiId: number;\n    private correlationId: string;\n    private telemetryCacheKey: string;\n    private wrapperSKU: String;\n    private wrapperVer: String;\n    private regionUsed: string | undefined;\n    private regionSource: RegionDiscoverySources | undefined;\n    private regionOutcome: RegionDiscoveryOutcomes | undefined;\n    private cacheOutcome: CacheOutcome = CacheOutcome.NO_CACHE_HIT;\n\n    constructor(telemetryRequest: ServerTelemetryRequest, cacheManager: CacheManager) {\n        this.cacheManager = cacheManager;\n        this.apiId = telemetryRequest.apiId;\n        this.correlationId = telemetryRequest.correlationId;\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n\n        this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n    }\n\n    /**\n     * API to add MSER Telemetry to request\n     */\n    generateCurrentRequestHeaderValue(): string {\n        const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\n        const platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\n        const requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n\n    /**\n     * API to add MSER Telemetry for the last failed request\n     */\n    generateLastRequestHeaderValue(): string {\n        const lastRequests = this.getLastRequests();\n\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const failedRequests = lastRequests.failedRequests.slice(0, 2*maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errorCount = lastRequests.errors.length;\n\n        // Indicate whether this header contains all data or partial data\n        const overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n        const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n\n    /**\n     * API to cache token failures for MSER data capture\n     * @param error\n     */\n    cacheFailedRequest(error: AuthError): void {\n        const lastRequests = this.getLastRequests();\n        if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n            // Remove a cached error to make room, first in first out\n            lastRequests.failedRequests.shift(); // apiId\n            lastRequests.failedRequests.shift(); // correlationId\n            lastRequests.errors.shift();\n        }\n        \n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\n\n        if (!StringUtils.isEmpty(error.subError)) {\n            lastRequests.errors.push(error.subError);\n        } else if (!StringUtils.isEmpty(error.errorCode)) {\n            lastRequests.errors.push(error.errorCode);\n        } else if (!!error && error.toString()) {\n            lastRequests.errors.push(error.toString());\n        } else {\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n        }\n\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n\n        return;\n    }\n\n    /**\n     * Update server telemetry cache entry by incrementing cache hit counter\n     */\n    incrementCacheHits(): number {\n        const lastRequests = this.getLastRequests();\n        lastRequests.cacheHits += 1;\n\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n        return lastRequests.cacheHits;\n    }\n\n    /**\n     * Get the server telemetry entity from cache or initialize a new one\n     */\n    getLastRequests(): ServerTelemetryEntity {\n        const initialValue: ServerTelemetryEntity = new ServerTelemetryEntity();\n        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey) as ServerTelemetryEntity;\n\n        return lastRequests || initialValue;\n    }\n\n    /**\n     * Remove server telemetry cache entry\n     */\n    clearTelemetryCache(): void {\n        const lastRequests = this.getLastRequests();\n        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const errorCount = lastRequests.errors.length;\n        if (numErrorsFlushed === errorCount) {\n            // All errors were sent on last request, clear Telemetry cache\n            this.cacheManager.removeItem(this.telemetryCacheKey);\n        } else {\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n            const serverTelemEntity = new ServerTelemetryEntity();\n            serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed*2); // failedRequests contains 2 items for each error\n            serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\n\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n        }\n    }\n\n    /**\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\n     * @param serverTelemetryEntity\n     */\n    static maxErrorsToSend(serverTelemetryEntity: ServerTelemetryEntity): number {\n        let i;\n        let maxErrors = 0;\n        let dataSize = 0;\n        const errorCount = serverTelemetryEntity.errors.length;\n        for (i = 0; i < errorCount; i++) {\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n            const apiId = serverTelemetryEntity.failedRequests[2*i] || Constants.EMPTY_STRING;\n            const correlationId = serverTelemetryEntity.failedRequests[2*i + 1] || Constants.EMPTY_STRING;\n            const errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n                // Adding this entry to the header would still keep header size below the limit\n                maxErrors += 1;\n            } else {\n                break;\n            }\n        }\n\n        return maxErrors;\n    }\n\n    /**\n     * Get the region discovery fields\n     * \n     * @returns string\n     */\n    getRegionDiscoveryFields(): string {\n        const regionDiscoveryFields: string[] = [];\n\n        regionDiscoveryFields.push(this.regionUsed || \"\");\n        regionDiscoveryFields.push(this.regionSource || \"\");\n        regionDiscoveryFields.push(this.regionOutcome || \"\");\n\n        return regionDiscoveryFields.join(\",\");\n    }\n\n    /**\n     * Update the region discovery metadata\n     * \n     * @param regionDiscoveryMetadata\n     * @returns void\n     */\n    updateRegionDiscoveryMetadata(regionDiscoveryMetadata: RegionDiscoveryMetadata): void {\n        this.regionUsed = regionDiscoveryMetadata.region_used;\n        this.regionSource = regionDiscoveryMetadata.region_source;\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n    }\n\n    /**\n     * Set cache outcome \n     */\n    setCacheOutcome(cacheOutcome: CacheOutcome): void {\n        this.cacheOutcome = cacheOutcome;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CryptoOps } from \"../crypto/CryptoOps\";\nimport { StringUtils, ServerError, InteractionRequiredAuthError, AccountInfo, Constants, INetworkModule, AuthenticationResult, Logger, CommonSilentFlowRequest, ICrypto, DEFAULT_CRYPTO_IMPLEMENTATION } from \"@azure/msal-common\";\nimport { BrowserCacheManager, DEFAULT_BROWSER_CACHE_MANAGER } from \"../cache/BrowserCacheManager\";\nimport { BrowserConfiguration, buildConfiguration, Configuration } from \"../config/Configuration\";\nimport { InteractionType, ApiId, BrowserConstants, BrowserCacheLocation, WrapperSKU, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { version, name } from \"../packageMetadata\";\nimport { EventCallbackFunction } from \"../event/EventMessage\";\nimport { EventType } from \"../event/EventType\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { BrowserConfigurationAuthError } from \"../error/BrowserConfigurationAuthError\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { PopupClient } from \"../interaction_client/PopupClient\";\nimport { RedirectClient } from \"../interaction_client/RedirectClient\";\nimport { SilentIframeClient } from \"../interaction_client/SilentIframeClient\";\nimport { SilentRefreshClient } from \"../interaction_client/SilentRefreshClient\";\nimport { TokenCache } from \"../cache/TokenCache\";\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { SilentAuthCodeClient } from \"../interaction_client/SilentAuthCodeClient\";\nimport { BrowserAuthError  } from \"../error/BrowserAuthError\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\n\nexport abstract class ClientApplication {\n\n    // Crypto interface implementation\n    protected readonly browserCrypto: ICrypto;\n\n    // Storage interface implementation\n    protected readonly browserStorage: BrowserCacheManager;\n\n    // Network interface implementation\n    protected readonly networkClient: INetworkModule;\n\n    // Navigation interface implementation\n    protected navigationClient: INavigationClient;\n\n    // Input configuration by developer/user\n    protected config: BrowserConfiguration;\n\n    // Token cache implementation\n    private tokenCache: TokenCache;\n\n    // Logger\n    protected logger: Logger;\n\n    // Flag to indicate if in browser environment\n    protected isBrowserEnvironment: boolean;\n\n    protected eventHandler: EventHandler;\n\n    // Redirect Response Object\n    protected redirectResponse: Map<string, Promise<AuthenticationResult | null>>;\n\n    // Hybrid auth code responses\n    private hybridAuthCodeResponses: Map<string, Promise<AuthenticationResult>>;\n\n    /**\n     * @constructor\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\n     *\n     * Important attributes in the Configuration object for auth are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\n     * - authority: the authority URL for your application.\n     * - redirect_uri: the uri of your application registered in the portal.\n     *\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\n     * Full B2C functionality will be available in this library in future versions.\n     *\n     * @param configuration Object for the MSAL PublicClientApplication instance\n     */\n    constructor(configuration: Configuration) {\n        /*\n         * If loaded in an environment where window is not available,\n         * set internal flag to false so that further requests fail.\n         * This is to support server-side rendering environments.\n         */\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\n        // Set the configuration.\n        this.config = buildConfiguration(configuration, this.isBrowserEnvironment);\n\n        // Initialize logger\n        this.logger = new Logger(this.config.system.loggerOptions, name, version);\n        \n        // Initialize the network module class.\n        this.networkClient = this.config.system.networkClient;\n        \n        // Initialize the navigation client class.\n        this.navigationClient = this.config.system.navigationClient;\n        \n        // Initialize redirectResponse Map\n        this.redirectResponse = new Map();\n\n        // Initial hybrid spa map\n        this.hybridAuthCodeResponses = new Map();\n        \n        // Initialize the crypto class.\n        this.browserCrypto = this.isBrowserEnvironment ? new CryptoOps(this.logger) : DEFAULT_CRYPTO_IMPLEMENTATION;\n\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n\n        // Initialize the browser storage class.\n        this.browserStorage = this.isBrowserEnvironment ? \n            new BrowserCacheManager(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger) : \n            DEFAULT_BROWSER_CACHE_MANAGER(this.config.auth.clientId, this.logger);\n\n        // Initialize the token cache\n        this.tokenCache = new TokenCache(this.config, this.browserStorage, this.logger, this.browserCrypto);\n    }\n\n    // #region Redirect Flow\n\n    /**\n     * Event handler function which allows users to fire events after the PublicClientApplication object\n     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect\n     * auth flows.\n     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.\n     * @returns Token response or null. If the return value is null, then no auth redirect was detected.\n     */\n    async handleRedirectPromise(hash?: string): Promise<AuthenticationResult | null> {\n        this.logger.verbose(\"handleRedirectPromise called\");\n        const loggedInAccounts = this.getAllAccounts();\n        if (this.isBrowserEnvironment) {\n            /**\n             * Store the promise on the PublicClientApplication instance if this is the first invocation of handleRedirectPromise,\n             * otherwise return the promise from the first invocation. Prevents race conditions when handleRedirectPromise is called\n             * several times concurrently.\n             */\n            const redirectResponseKey = hash || Constants.EMPTY_STRING;\n            let response = this.redirectResponse.get(redirectResponseKey);\n            if (typeof response === \"undefined\") {\n                this.eventHandler.emitEvent(EventType.HANDLE_REDIRECT_START, InteractionType.Redirect);\n                this.logger.verbose(\"handleRedirectPromise has been called for the first time, storing the promise\");\n                const correlationId = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, true) || \"\";\n                const redirectClient = new RedirectClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, correlationId);\n                response = redirectClient.handleRedirectPromise(hash)\n                    .then((result: AuthenticationResult | null) => {\n                        if (result) {\n                            // Emit login event if number of accounts change\n                            const isLoggingIn = loggedInAccounts.length < this.getAllAccounts().length;\n                            if (isLoggingIn) {\n                                this.eventHandler.emitEvent(EventType.LOGIN_SUCCESS, InteractionType.Redirect, result);\n                                this.logger.verbose(\"handleRedirectResponse returned result, login success\");\n                            } else {\n                                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Redirect, result);\n                                this.logger.verbose(\"handleRedirectResponse returned result, acquire token success\");\n                            }\n                        }\n                        this.eventHandler.emitEvent(EventType.HANDLE_REDIRECT_END, InteractionType.Redirect);\n\n                        return result;\n                    })\n                    .catch((e) => {\n                    // Emit login event if there is an account\n                        if (loggedInAccounts.length > 0) {\n                            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Redirect, null, e);\n                        } else {\n                            this.eventHandler.emitEvent(EventType.LOGIN_FAILURE, InteractionType.Redirect, null, e);\n                        }\n                        this.eventHandler.emitEvent(EventType.HANDLE_REDIRECT_END, InteractionType.Redirect);\n\n                        throw e;\n                    });\n                this.redirectResponse.set(redirectResponseKey, response);\n            } else {\n                this.logger.verbose(\"handleRedirectPromise has been called previously, returning the result from the first call\");\n            }\n            \n            return response;\n        }\n        this.logger.verbose(\"handleRedirectPromise returns null, not browser environment\");\n        return null;\n    }\n\n    /**\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects\n     * the page, so any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    async acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        // Preflight request\n        this.logger.verbose(\"acquireTokenRedirect called\");\n        this.preflightBrowserEnvironmentCheck(InteractionType.Redirect);\n\n        // If logged in, emit acquire token events\n        const isLoggedIn = this.getAllAccounts().length > 0;\n        if (isLoggedIn) {\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Redirect, request);\n        } else {\n            this.eventHandler.emitEvent(EventType.LOGIN_START, InteractionType.Redirect, request);\n        }\n        \n        const redirectClient = new RedirectClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, request.correlationId);\n        return redirectClient.acquireToken(request).catch((e) => {\n            // If logged in, emit acquire token events\n            if (isLoggedIn) {\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Redirect, null, e);\n            } else {\n                this.eventHandler.emitEvent(EventType.LOGIN_FAILURE, InteractionType.Redirect, null, e);\n            }\n            throw e;\n        });\n    }\n\n    // #endregion\n\n    // #region Popup Flow\n\n    /**\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    acquireTokenPopup(request: PopupRequest): Promise<AuthenticationResult> {\n        try {\n            this.logger.verbose(\"acquireTokenPopup called\", request.correlationId);\n            this.preflightBrowserEnvironmentCheck(InteractionType.Popup);\n        } catch (e) {\n            // Since this function is syncronous we need to reject\n            return Promise.reject(e);\n        }\n\n        // If logged in, emit acquire token events\n        const loggedInAccounts = this.getAllAccounts();\n        if (loggedInAccounts.length > 0) {\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Popup, request);\n        } else {\n            this.eventHandler.emitEvent(EventType.LOGIN_START, InteractionType.Popup, request);\n        }\n\n        const popupClient = new PopupClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, request.correlationId);\n\n        return popupClient.acquireToken(request).then((result) => {\n            // If logged in, emit acquire token events\n            const isLoggingIn = loggedInAccounts.length < this.getAllAccounts().length;\n            if (isLoggingIn) {\n                this.eventHandler.emitEvent(EventType.LOGIN_SUCCESS, InteractionType.Popup, result);\n            } else {\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Popup, result);\n            }\n\n            return result;\n        }).catch((e) => {\n            if (loggedInAccounts.length > 0) {\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Popup, null, e);\n            } else {\n                this.eventHandler.emitEvent(EventType.LOGIN_FAILURE, InteractionType.Popup, null, e);\n            }\n            // Since this function is syncronous we need to reject\n            return Promise.reject(e);\n        });\n    }\n\n    // #endregion\n\n    // #region Silent Flow\n\n    /**\n     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:\n     * - Any browser using a form of Intelligent Tracking Prevention\n     * - If there is not an established session with the service\n     *\n     * In these cases, the request must be done inside a popup or full frame redirect.\n     *\n     * For the cases where interaction is required, you cannot send a request with prompt=none.\n     *\n     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as\n     * you session on the server still exists.\n     * @param request {@link SsoSilentRequest}\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    async ssoSilent(request: SsoSilentRequest): Promise<AuthenticationResult> {\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"ssoSilent called\", request.correlationId);\n        this.eventHandler.emitEvent(EventType.SSO_SILENT_START, InteractionType.Silent, request);\n\n        try {\n            const silentIframeClient = new SilentIframeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.ssoSilent, request.correlationId);\n            const silentTokenResult = await silentIframeClient.acquireToken(request);\n            this.eventHandler.emitEvent(EventType.SSO_SILENT_SUCCESS, InteractionType.Silent, silentTokenResult);\n            return silentTokenResult;\n        } catch (e) {\n            this.eventHandler.emitEvent(EventType.SSO_SILENT_FAILURE, InteractionType.Silent, null, e);\n            throw e;\n        }\n    }\n\n    /**\n     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.\n     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.\n     * This API is not indended for normal authorization code acquisition and redemption.\n     * \n     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.\n     * \n     * @param request {@link AuthorizationCodeRequest}\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    async acquireTokenByCode(request: AuthorizationCodeRequest): Promise<AuthenticationResult> {\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.trace(\"acquireTokenByCode called\", request.correlationId);\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_BY_CODE_START, InteractionType.Silent, request);\n\n        try {\n            if (!request.code) {\n                throw BrowserAuthError.createAuthCodeRequiredError();\n            }\n\n            let response = this.hybridAuthCodeResponses.get(request.code);\n            if (!response) {\n                this.logger.verbose(\"Initiating new acquireTokenByCode request\", request.correlationId);\n                response = this.acquireTokenByCodeAsync(request)\n                    .then((result: AuthenticationResult) => {\n                        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_BY_CODE_SUCCESS, InteractionType.Silent, result);\n                        this.hybridAuthCodeResponses.delete(request.code);\n                        return result;\n                    })\n                    .catch((error: Error) => {\n                        this.hybridAuthCodeResponses.delete(request.code);\n                        throw error;\n                    });\n\n                this.hybridAuthCodeResponses.set(request.code, response);\n            } else {\n                this.logger.verbose(\"Existing acquireTokenByCode request found\", request.correlationId);\n            }\n            \n            return response;\n        } catch (e) {\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE, InteractionType.Silent, null, e);\n            throw e;\n        }\n    }\n\n    /**\n     * Creates a SilentAuthCodeClient to redeem an authorization code.\n     * @param request \n     * @returns Result of the operation to redeem the authorization code\n     */\n    private async acquireTokenByCodeAsync(request: AuthorizationCodeRequest): Promise<AuthenticationResult> {\n        this.logger.trace(\"acquireTokenByCodeAsync called\", request.correlationId);\n        const silentAuthCodeClient = new SilentAuthCodeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenByCode, request.correlationId);\n        const silentTokenResult = await silentAuthCodeClient.acquireToken(request);\n        return silentTokenResult;\n    }\n\n    /**\n     * Use this function to obtain a token before every call to the API / resource provider\n     *\n     * MSAL return's a cached token when available\n     * Or it send's a request to the STS to obtain a new token using a refresh token.\n     *\n     * @param {@link SilentRequest}\n     *\n     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    protected async acquireTokenByRefreshToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, request);\n        // block the reload if it occurred inside a hidden iframe\n        BrowserUtils.blockReloadInHiddenIframes();\n\n        const silentRefreshClient = new SilentRefreshClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, request.correlationId);\n\n        return silentRefreshClient.acquireToken(request).catch(e => {\n            const isServerError = e instanceof ServerError;\n            const isInteractionRequiredError = e instanceof InteractionRequiredAuthError;\n            const isInvalidGrantError = (e.errorCode === BrowserConstants.INVALID_GRANT_ERROR);\n            if (isServerError && isInvalidGrantError && !isInteractionRequiredError) {\n                this.logger.verbose(\"Refresh token expired or invalid, attempting acquire token by iframe\", request.correlationId);\n\n                const silentIframeClient = new SilentIframeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenSilent_authCode, request.correlationId);\n                return silentIframeClient.acquireToken(request);\n            }\n            throw e;\n        });\n    }\n\n    // #endregion\n\n    // #region Logout\n\n    /**\n     * Deprecated logout function. Use logoutRedirect or logoutPopup instead\n     * @param logoutRequest \n     * @deprecated\n     */\n    async logout(logoutRequest?: EndSessionRequest): Promise<void> {\n        this.logger.warning(\"logout API is deprecated and will be removed in msal-browser v3.0.0. Use logoutRedirect instead.\");\n        return this.logoutRedirect(logoutRequest);\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param logoutRequest\n     */\n    async logoutRedirect(logoutRequest?: EndSessionRequest): Promise<void> {\n        this.preflightBrowserEnvironmentCheck(InteractionType.Redirect);\n        const redirectClient = new RedirectClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, logoutRequest?.correlationId);\n        return redirectClient.logout(logoutRequest);\n    }\n\n    /**\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\n     * @param logoutRequest \n     */\n    logoutPopup(logoutRequest?: EndSessionPopupRequest): Promise<void> {\n        try{\n            this.preflightBrowserEnvironmentCheck(InteractionType.Popup);\n            const popupClient = new PopupClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, logoutRequest?.correlationId);\n            return popupClient.logout(logoutRequest);\n        } catch (e) {\n            // Since this function is syncronous we need to reject\n            return Promise.reject(e);\n        }\n    }\n\n    // #endregion\n\n    // #region Account APIs\n\n    /**\n     * Returns all accounts that MSAL currently has data for.\n     * (the account object is created at the time of successful login)\n     * or empty array when no accounts are found\n     * @returns Array of account objects in cache\n     */\n    getAllAccounts(): AccountInfo[] {\n        this.logger.verbose(\"getAllAccounts called\");\n        return this.isBrowserEnvironment ? this.browserStorage.getAllAccounts() : [];\n    }\n\n    /**\n     * Returns the signed in account matching username.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found.\n     * This API is provided for convenience but getAccountById should be used for best reliability\n     * @param userName\n     * @returns The account object stored in MSAL\n     */\n    getAccountByUsername(userName: string): AccountInfo|null {\n        const allAccounts = this.getAllAccounts();\n        if (!StringUtils.isEmpty(userName) && allAccounts && allAccounts.length) {\n            this.logger.verbose(\"Account matching username found, returning\");\n            this.logger.verbosePii(`Returning signed-in accounts matching username: ${userName}`);\n            return allAccounts.filter(accountObj => accountObj.username.toLowerCase() === userName.toLowerCase())[0] || null;\n        } else {\n            this.logger.verbose(\"getAccountByUsername: No matching account found, returning null\");\n            return null;\n        }\n    }\n\n    /**\n     * Returns the signed in account matching homeAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param homeAccountId\n     * @returns The account object stored in MSAL\n     */\n    getAccountByHomeId(homeAccountId: string): AccountInfo|null {\n        const allAccounts = this.getAllAccounts();\n        if (!StringUtils.isEmpty(homeAccountId) && allAccounts && allAccounts.length) {\n            this.logger.verbose(\"Account matching homeAccountId found, returning\");\n            this.logger.verbosePii(`Returning signed-in accounts matching homeAccountId: ${homeAccountId}`);\n            return allAccounts.filter(accountObj => accountObj.homeAccountId === homeAccountId)[0] || null;\n        } else {\n            this.logger.verbose(\"getAccountByHomeId: No matching account found, returning null\");\n            return null;\n        }\n    }\n\n    /**\n     * Returns the signed in account matching localAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param localAccountId\n     * @returns The account object stored in MSAL\n     */\n    getAccountByLocalId(localAccountId: string): AccountInfo | null {\n        const allAccounts = this.getAllAccounts();\n        if (!StringUtils.isEmpty(localAccountId) && allAccounts && allAccounts.length) {\n            this.logger.verbose(\"Account matching localAccountId found, returning\");\n            this.logger.verbosePii(`Returning signed-in accounts matching localAccountId: ${localAccountId}`);\n            return allAccounts.filter(accountObj => accountObj.localAccountId === localAccountId)[0] || null;\n        } else {\n            this.logger.verbose(\"getAccountByLocalId: No matching account found, returning null\");\n            return null;\n        }\n    }\n\n    /**\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\n     * @param account\n     */\n    setActiveAccount(account: AccountInfo | null): void {\n        this.browserStorage.setActiveAccount(account);\n    }\n\n    /**\n     * Gets the currently active account\n     */\n    getActiveAccount(): AccountInfo | null {\n        return this.browserStorage.getActiveAccount();\n    }\n\n    // #endregion\n\n    // #region Helpers\n\n    /**\n     * Helper to validate app environment before making an auth request\n     * * @param interactionType\n     */\n    protected preflightBrowserEnvironmentCheck(interactionType: InteractionType): void {\n        this.logger.verbose(\"preflightBrowserEnvironmentCheck started\");\n        // Block request if not in browser environment\n        BrowserUtils.blockNonBrowserEnvironment(this.isBrowserEnvironment);\n\n        // Block redirects if in an iframe\n        BrowserUtils.blockRedirectInIframe(interactionType, this.config.system.allowRedirectInIframe);\n\n        // Block auth requests inside a hidden iframe\n        BrowserUtils.blockReloadInHiddenIframes();\n\n        // Block redirectUri opened in a popup from calling MSAL APIs\n        BrowserUtils.blockAcquireTokenInPopups();\n\n        // Block redirects if memory storage is enabled but storeAuthStateInCookie is not\n        if (interactionType === InteractionType.Redirect &&\n            this.config.cache.cacheLocation === BrowserCacheLocation.MemoryStorage &&\n            !this.config.cache.storeAuthStateInCookie) {\n            throw BrowserConfigurationAuthError.createInMemoryRedirectUnavailableError();\n        }\n\n        if (interactionType === InteractionType.Redirect || interactionType === InteractionType.Popup) {\n            this.preflightInteractiveRequest();\n        }\n    }\n\n    /**\n     * Helper to validate app environment before making a request.\n     * @param request\n     * @param interactionType\n     */\n    protected preflightInteractiveRequest(): void {\n        this.logger.verbose(\"preflightInteractiveRequest called, validating app environment\");\n        // block the reload if it occurred inside a hidden iframe\n        BrowserUtils.blockReloadInHiddenIframes();\n\n        // Set interaction in progress temporary cache or throw if alread set.\n        this.browserStorage.setInteractionInProgress(true);\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        return this.eventHandler.addEventCallback(callback);\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n\n    /**\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    enableAccountStorageEvents(): void {\n        this.eventHandler.enableAccountStorageEvents();\n    }\n\n    /**\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    disableAccountStorageEvents(): void {\n        this.eventHandler.disableAccountStorageEvents();\n    }\n\n    /**\n     * Gets the token cache for the application.\n     */\n    getTokenCache(): ITokenCache {\n        return this.tokenCache;\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    getLogger(): Logger {\n        return this.logger;\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.logger = logger;\n    }\n\n    /**\n     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.\n     * @param sku\n     * @param version\n     */\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\n        // Validate the SKU passed in is one we expect\n        this.browserStorage.setWrapperMetadata(sku, version);\n    }\n\n    /**\n     * Sets navigation client\n     * @param navigationClient\n     */\n    setNavigationClient(navigationClient: INavigationClient): void {\n        this.navigationClient = navigationClient;\n    }\n\n    /**\n     * Returns the configuration object\n     */\n    getConfiguration(): BrowserConfiguration {\n        return this.config;\n    }\n\n    // #endregion\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, Logger, PkceCodes, SignedHttpRequest, SignedHttpRequestParameters } from \"@azure/msal-common\";\nimport { GuidGenerator } from \"./GuidGenerator\";\nimport { Base64Encode } from \"../encode/Base64Encode\";\nimport { Base64Decode } from \"../encode/Base64Decode\";\nimport { PkceGenerator } from \"./PkceGenerator\";\nimport { BrowserCrypto } from \"./BrowserCrypto\";\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { AsyncMemoryStorage } from \"../cache/AsyncMemoryStorage\";\n\nexport type CachedKeyPair = {\n    publicKey: CryptoKey,\n    privateKey: CryptoKey,\n    requestMethod?: string,\n    requestUri?: string\n};\n\n/**\n * MSAL CryptoKeyStore DB Version 2\n */\nexport type CryptoKeyStore = {\n    asymmetricKeys: AsyncMemoryStorage<CachedKeyPair>;\n    symmetricKeys: AsyncMemoryStorage<CryptoKey>;\n};\n\n/**\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and \n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\n */\nexport class CryptoOps implements ICrypto {\n\n    private browserCrypto: BrowserCrypto;\n    private guidGenerator: GuidGenerator;\n    private b64Encode: Base64Encode;\n    private b64Decode: Base64Decode;\n    private pkceGenerator: PkceGenerator;\n    private logger: Logger;\n\n    private static POP_KEY_USAGES: Array<KeyUsage> = [\"sign\", \"verify\"];\n    private static EXTRACTABLE: boolean = true;\n    private cache: CryptoKeyStore;\n\n    constructor(logger: Logger) {\n        this.logger = logger;\n        // Browser crypto needs to be validated first before any other classes can be set.\n        this.browserCrypto = new BrowserCrypto(this.logger);\n        this.b64Encode = new Base64Encode();\n        this.b64Decode = new Base64Decode();\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\n        this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n        this.cache = {\n            asymmetricKeys: new AsyncMemoryStorage<CachedKeyPair>(this.logger),\n            symmetricKeys: new AsyncMemoryStorage<CryptoKey>(this.logger)\n        };\n    }\n\n    /**\n     * Creates a new random GUID - used to populate state and nonce.\n     * @returns string (GUID)\n     */\n    createNewGuid(): string {\n        return this.guidGenerator.generateGuid();\n    }\n\n    /**\n     * Encodes input string to base64.\n     * @param input \n     */\n    base64Encode(input: string): string {\n        return this.b64Encode.encode(input);\n    }    \n    \n    /**\n     * Decodes input string from base64.\n     * @param input \n     */\n    base64Decode(input: string): string {\n        return this.b64Decode.decode(input);\n    }\n\n    /**\n     * Generates PKCE codes used in Authorization Code Flow.\n     */\n    async generatePkceCodes(): Promise<PkceCodes> {\n        return this.pkceGenerator.generateCodes();\n    }\n\n    /**\n     * Generates a keypair, stores it and returns a thumbprint\n     * @param request\n     */\n    async getPublicKeyThumbprint(request: SignedHttpRequestParameters): Promise<string> {\n        // Generate Keypair\n        const keyPair: CryptoKeyPair = await this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\n\n        // Generate Thumbprint for Public Key\n        const publicKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.publicKey);\n        \n        const pubKeyThumprintObj: JsonWebKey = {\n            e: publicKeyJwk.e,\n            kty: publicKeyJwk.kty,\n            n: publicKeyJwk.n\n        };\n\n        const publicJwkString: string = BrowserCrypto.getJwkString(pubKeyThumprintObj);\n        const publicJwkHash = await this.hashString(publicJwkString);\n\n        // Generate Thumbprint for Private Key\n        const privateKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.privateKey);\n        // Re-import private key to make it unextractable\n        const unextractablePrivateKey: CryptoKey = await this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"]);\n\n        // Store Keypair data in keystore\n        await this.cache.asymmetricKeys.setItem(\n            publicJwkHash, \n            {\n                privateKey: unextractablePrivateKey,\n                publicKey: keyPair.publicKey,\n                requestMethod: request.resourceRequestMethod,\n                requestUri: request.resourceRequestUri\n            }\n        );\n\n        return publicJwkHash;\n    }\n\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid \n     */\n    async removeTokenBindingKey(kid: string): Promise<boolean> {\n        await this.cache.asymmetricKeys.removeItem(kid);\n        const keyFound = await this.cache.asymmetricKeys.containsKey(kid);\n        return !keyFound;\n    }\n\n    /**\n     * Removes all cryptographic keys from IndexedDB storage\n     */\n    async clearKeystore(): Promise<boolean> {\n        const dataStoreNames = Object.keys(this.cache);\n        const databaseStorage = this.cache[dataStoreNames[0]];\n        return databaseStorage ? await databaseStorage.deleteDatabase() : false;\n    }\n\n    /**\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\n     * @param payload \n     * @param kid \n     */\n    async signJwt(payload: SignedHttpRequest, kid: string): Promise<string> {\n        const cachedKeyPair = await this.cache.asymmetricKeys.getItem(kid);\n        \n        if (!cachedKeyPair) {\n            throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n        }\n\n        // Get public key as JWK\n        const publicKeyJwk = await this.browserCrypto.exportJwk(cachedKeyPair.publicKey);\n        const publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);\n\n        // Generate header\n        const header = {\n            alg: publicKeyJwk.alg,\n            type: KEY_FORMAT_JWK\n        };\n        const encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header));\n\n        // Generate payload\n        payload.cnf = {\n            jwk: JSON.parse(publicKeyJwkString)\n        };\n        const encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n\n        // Form token string\n        const tokenString = `${encodedHeader}.${encodedPayload}`;\n\n        // Sign token\n        const tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n        const signatureBuffer = await this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer);\n        const encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n\n        return `${tokenString}.${encodedSignature}`;\n    }\n\n    /**\n     * Returns the SHA-256 hash of an input string\n     * @param plainText\n     */\n    async hashString(plainText: string): Promise<string> {\n        const hashBuffer: ArrayBuffer = await this.browserCrypto.sha256Digest(plainText);\n        const hashBytes = new Uint8Array(hashBuffer);\n        return this.b64Encode.urlEncodeArr(hashBytes);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { MathUtils } from \"../utils/MathUtils\";\nimport { BrowserCrypto } from \"./BrowserCrypto\";\n\nexport class GuidGenerator {\n\n    // browser crypto object used to generate random values\n    private cryptoObj: BrowserCrypto;\n\n    constructor(cryptoObj: BrowserCrypto) {\n        this.cryptoObj = cryptoObj;\n    }\n\n    /*\n     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\n     * pseudo-random numbers.\n     * The algorithm is as follows:\n     *     Set the two most significant bits (bits 6 and 7) of the\n     *        clock_seq_hi_and_reserved to zero and one, respectively.\n     *     Set the four most significant bits (bits 12 through 15) of the\n     *        time_hi_and_version field to the 4-bit version number from\n     *        Section 4.1.3. Version4\n     *     Set all the other bits to randomly (or pseudo-randomly) chosen\n     *     values.\n     * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\n     * time-low               = 4hexOctet\n     * time-mid               = 2hexOctet\n     * time-high-and-version  = 2hexOctet\n     * clock-seq-and-reserved = hexOctet:\n     * clock-seq-low          = hexOctet\n     * node                   = 6hexOctet\n     * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\n     * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\n     * y values are 8, 9, A, B\n     */\n    generateGuid(): string {\n        try {\n            const buffer: Uint8Array = new Uint8Array(16);\n            this.cryptoObj.getRandomValues(buffer);\n\n            // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\n            buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\n            buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\n\n            // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\n            buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\n            buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\n\n            return MathUtils.decimalToHex(buffer[0]) + MathUtils.decimalToHex(buffer[1])\n                + MathUtils.decimalToHex(buffer[2]) + MathUtils.decimalToHex(buffer[3])\n                + \"-\" + MathUtils.decimalToHex(buffer[4]) + MathUtils.decimalToHex(buffer[5])\n                + \"-\" + MathUtils.decimalToHex(buffer[6]) + MathUtils.decimalToHex(buffer[7])\n                + \"-\" + MathUtils.decimalToHex(buffer[8]) + MathUtils.decimalToHex(buffer[9])\n                + \"-\" + MathUtils.decimalToHex(buffer[10]) + MathUtils.decimalToHex(buffer[11])\n                + MathUtils.decimalToHex(buffer[12]) + MathUtils.decimalToHex(buffer[13])\n                + MathUtils.decimalToHex(buffer[14]) + MathUtils.decimalToHex(buffer[15]);\n        }\n        catch (err) {\n            const guidHolder: string = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\n            const hex: string = \"0123456789abcdef\";\n            let r: number = 0;\n            let guidResponse: string = \"\";\n            for (let i: number = 0; i < 36; i++) {\n                if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\n                    // each x and y needs to be random\n                    r = Math.random() * 16 | 0;\n                }\n                if (guidHolder[i] === \"x\") {\n                    guidResponse += hex[r];\n                } else if (guidHolder[i] === \"y\") {\n                    // clock-seq-and-reserved first hex is filtered and remaining hex values are random\n                    r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\n                    r |= 0x8; // set pos 3 to 1 as 1???\n                    guidResponse += hex[r];\n                } else {\n                    guidResponse += guidHolder[i];\n                }\n            }\n            return guidResponse;\n        }\n    }\n\n    /**\n     * verifies if a string is  GUID\n     * @param guid\n     */\n    static isGuid(guid: string): boolean {\n        const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n        return regexGuid.test(guid);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Utility class for math specific functions in browser.\n */\nexport class MathUtils {\n\n    /**\n     * Decimal to Hex\n     *\n     * @param num\n     */\n    static decimalToHex(num: number): string {\n        let hex: string = num.toString(16);\n        while (hex.length < 2) {\n            hex = \"0\" + hex;\n        }\n        return hex;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\n\n/**\n * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\n */\nexport class Base64Encode {\n    \n    /**\n     * Returns URL Safe b64 encoded string from a plaintext string.\n     * @param input \n     */\n    urlEncode(input: string): string {\n        return encodeURIComponent(this.encode(input)\n            .replace(/=/g, \"\")\n            .replace(/\\+/g, \"-\")\n            .replace(/\\//g, \"_\"));\n    }\n\n    /**\n     * Returns URL Safe b64 encoded string from an int8Array.\n     * @param inputArr \n     */\n    urlEncodeArr(inputArr: Uint8Array): string {\n        return this.base64EncArr(inputArr)\n            .replace(/=/g, \"\")\n            .replace(/\\+/g, \"-\")\n            .replace(/\\//g, \"_\");\n    }\n\n    /**\n     * Returns b64 encoded string from plaintext string.\n     * @param input \n     */\n    encode(input: string): string {\n        const inputUtf8Arr = BrowserStringUtils.stringToUtf8Arr(input);\n        return this.base64EncArr(inputUtf8Arr);\n    }\n\n    /**\n     * Base64 encode byte array\n     * @param aBytes \n     */\n    private base64EncArr(aBytes: Uint8Array): string {  \n        const eqLen = (3 - (aBytes.length % 3)) % 3;\n        let sB64Enc = \"\";\n      \n        for (let nMod3, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {\n            nMod3 = nIdx % 3;\n            /* Uncomment the following line in order to split the output in lines 76-character long: */\n            /*\n             *if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) { sB64Enc += \"\\r\\n\"; }\n             */\n            nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);\n            if (nMod3 === 2 || aBytes.length - nIdx === 1) {\n                sB64Enc += String.fromCharCode(\n                    this.uint6ToB64(nUint24 >>> 18 & 63), \n                    this.uint6ToB64(nUint24 >>> 12 & 63), \n                    this.uint6ToB64(nUint24 >>> 6 & 63), \n                    this.uint6ToB64(nUint24 & 63)\n                );\n                nUint24 = 0;\n            }\n        }\n\n        return  eqLen === 0 ? sB64Enc : sB64Enc.substring(0, sB64Enc.length - eqLen) + (eqLen === 1 ? \"=\" : \"==\");\n    }\n\n    /**\n     * Base64 string to array encoding helper\n     * @param nUint6 \n     */\n    private uint6ToB64 (nUint6: number): number {\n        return nUint6 < 26 ?\n            nUint6 + 65\n            : nUint6 < 52 ?\n                nUint6 + 71\n                : nUint6 < 62 ?\n                    nUint6 - 4\n                    : nUint6 === 62 ?\n                        43\n                        : nUint6 === 63 ?\n                            47\n                            :\n                            65;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Utility functions for strings in a browser. See here for implementation details:\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\n */\nexport class BrowserStringUtils {\n\n    /**\n     * Converts string to Uint8Array\n     * @param sDOMStr \n     */\n    static stringToUtf8Arr (sDOMStr: string): Uint8Array {\n        let nChr;\n        let nArrLen = 0;\n        const nStrLen = sDOMStr.length;\n        /* mapping... */\n        for (let nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {\n            nChr = sDOMStr.charCodeAt(nMapIdx);\n            nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6;\n        }\n\n        const aBytes = new Uint8Array(nArrLen);\n\n        /* transcription... */\n\n        for (let nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {\n            nChr = sDOMStr.charCodeAt(nChrIdx);\n            if (nChr < 128) {\n                /* one byte */\n                aBytes[nIdx++] = nChr;\n            } else if (nChr < 0x800) {\n                /* two bytes */\n                aBytes[nIdx++] = 192 + (nChr >>> 6);\n                aBytes[nIdx++] = 128 + (nChr & 63);\n            } else if (nChr < 0x10000) {\n                /* three bytes */\n                aBytes[nIdx++] = 224 + (nChr >>> 12);\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n                aBytes[nIdx++] = 128 + (nChr & 63);\n            } else if (nChr < 0x200000) {\n                /* four bytes */\n                aBytes[nIdx++] = 240 + (nChr >>> 18);\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n                aBytes[nIdx++] = 128 + (nChr & 63);\n            } else if (nChr < 0x4000000) {\n                /* five bytes */\n                aBytes[nIdx++] = 248 + (nChr >>> 24);\n                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n                aBytes[nIdx++] = 128 + (nChr & 63);\n            } else /* if (nChr <= 0x7fffffff) */ {\n                /* six bytes */\n                aBytes[nIdx++] = 252 + (nChr >>> 30);\n                aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);\n                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n                aBytes[nIdx++] = 128 + (nChr & 63);\n            }\n        }\n\n        return aBytes;      \n    }\n\n    /**\n     * Converst string to ArrayBuffer\n     * @param dataString \n     */\n    static stringToArrayBuffer(dataString: string): ArrayBuffer {\n        const data = new ArrayBuffer(dataString.length);\n        const dataView = new Uint8Array(data);\n        for (let i: number = 0; i < dataString.length; i++) {\n            dataView[i] = dataString.charCodeAt(i);\n        }\n        return data;\n    }\n\n    /**\n     * Converts Uint8Array to a string\n     * @param aBytes \n     */\n    static utf8ArrToString (aBytes: Uint8Array): string {\n        let sView = \"\";\n        for (let nPart, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {\n            nPart = aBytes[nIdx];\n            sView += String.fromCharCode(\n                nPart > 251 && nPart < 254 && nIdx + 5 < nLen ? /* six bytes */\n                    /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\n                    (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\n                    : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ? /* five bytes */\n                        (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\n                        : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ? /* four bytes */\n                            (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\n                            : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ? /* three bytes */\n                                (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\n                                : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ? /* two bytes */\n                                    (nPart - 192 << 6) + aBytes[++nIdx] - 128\n                                    : /* nPart < 127 ? */ /* one byte */\n                                    nPart\n            );\n        }\n        return sView;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\n\n/**\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\n */\nexport class Base64Decode {\n\n    /**\n     * Returns a URL-safe plaintext decoded string from b64 encoded input.\n     * @param input \n     */\n    decode(input: string): string {\n        let encodedString = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\n        switch (encodedString.length % 4) {\n            case 0:\n                break;\n            case 2:\n                encodedString += \"==\";\n                break;\n            case 3:\n                encodedString += \"=\";\n                break;\n            default:\n                throw new Error(\"Invalid base64 string\");\n        }\n\n        const inputUtf8Arr = this.base64DecToArr(encodedString);\n        return BrowserStringUtils.utf8ArrToString(inputUtf8Arr);\n    }\n\n    /**\n     * Decodes base64 into Uint8Array\n     * @param base64String \n     * @param nBlockSize \n     */\n    private base64DecToArr(base64String: string, nBlockSize?: number): Uint8Array {\n        const sB64Enc = base64String.replace(/[^A-Za-z0-9\\+\\/]/g, \"\");\n        const nInLen = sB64Enc.length;\n        const nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2;\n        const aBytes = new Uint8Array(nOutLen);\n\n        for (let nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n            nMod4 = nInIdx & 3;\n            nUint24 |= this.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\n            if (nMod4 === 3 || nInLen - nInIdx === 1) {\n                for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n                    aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\n                }\n                nUint24 = 0;\n            }\n        }\n\n        return aBytes;\n    }\n\n    /**\n     * Base64 string to array decoding helper\n     * @param charNum \n     */\n    private b64ToUint6(charNum: number): number {\n        return charNum > 64 && charNum < 91 ?\n            charNum - 65\n            : charNum > 96 && charNum < 123 ? \n                charNum - 71\n                : charNum > 47 && charNum < 58 ?\n                    charNum + 4\n                    : charNum === 43 ?\n                        62\n                        : charNum === 47 ?\n                            63\n                            :\n                            0;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { PkceCodes } from \"@azure/msal-common\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { Base64Encode } from \"../encode/Base64Encode\";\nimport { BrowserCrypto } from \"./BrowserCrypto\";\n\n// Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n\n/**\n * Class which exposes APIs to generate PKCE codes and code verifiers.\n */\nexport class PkceGenerator {\n\n    private base64Encode: Base64Encode;\n    private cryptoObj: BrowserCrypto;\n\n    constructor(cryptoObj: BrowserCrypto) {\n        this.base64Encode = new Base64Encode();\n        this.cryptoObj = cryptoObj;\n    }\n\n    /**\n     * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\n     */\n    async generateCodes(): Promise<PkceCodes> {\n        const codeVerifier = this.generateCodeVerifier();\n        const codeChallenge = await this.generateCodeChallengeFromVerifier(codeVerifier);\n        return {\n            verifier: codeVerifier,\n            challenge: codeChallenge\n        };\n    }\n\n    /**\n     * Generates a random 32 byte buffer and returns the base64\n     * encoded string to be used as a PKCE Code Verifier\n     */\n    private generateCodeVerifier(): string {\n        try {\n            // Generate random values as utf-8\n            const buffer: Uint8Array = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n            this.cryptoObj.getRandomValues(buffer);\n            // encode verifier as base64\n            const pkceCodeVerifierB64: string = this.base64Encode.urlEncodeArr(buffer);\n            return pkceCodeVerifierB64;\n        } catch (e) {\n            throw BrowserAuthError.createPkceNotGeneratedError(e);\n        }\n    }\n\n    /**\n     * Creates a base64 encoded PKCE Code Challenge string from the\n     * hash created from the PKCE Code Verifier supplied\n     */\n    private async generateCodeChallengeFromVerifier(pkceCodeVerifier: string): Promise<string> {\n        try {\n            // hashed verifier\n            const pkceHashedCodeVerifier = await this.cryptoObj.sha256Digest(pkceCodeVerifier);\n            // encode hash as base64\n            return this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\n        } catch (e) {\n            throw BrowserAuthError.createPkceNotGeneratedError(e);\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError, StringUtils } from \"@azure/msal-common\";\n\n/**\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const BrowserAuthErrorMessage = {\n    pkceNotGenerated: {\n        code: \"pkce_not_created\",\n        desc: \"The PKCE code challenge and verifier could not be generated.\"\n    },\n    cryptoDoesNotExist: {\n        code: \"crypto_nonexistent\",\n        desc: \"The crypto object or function is not available.\"\n    },\n    httpMethodNotImplementedError: {\n        code: \"http_method_not_implemented\",\n        desc: \"The HTTP method given has not been implemented in this library.\"\n    },\n    emptyNavigateUriError: {\n        code: \"empty_navigate_uri\",\n        desc: \"Navigation URI is empty. Please check stack trace for more info.\"\n    },\n    hashEmptyError: {\n        code: \"hash_empty_error\",\n        desc: \"Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash.\"\n    },\n    hashDoesNotContainStateError: {\n        code: \"no_state_in_hash\",\n        desc: \"Hash does not contain state. Please verify that the request originated from msal.\"\n    },\n    hashDoesNotContainKnownPropertiesError: {\n        code: \"hash_does_not_contain_known_properties\",\n        desc: \"Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.\"\n    },\n    unableToParseStateError: {\n        code: \"unable_to_parse_state\",\n        desc: \"Unable to parse state. Please verify that the request originated from msal.\"\n    },\n    stateInteractionTypeMismatchError: {\n        code: \"state_interaction_type_mismatch\",\n        desc: \"Hash contains state but the interaction type does not match the caller.\"\n    },\n    interactionInProgress: {\n        code: \"interaction_in_progress\",\n        desc: \"Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.  For more visit: aka.ms/msaljs/browser-errors.\"\n    },\n    popupWindowError: {\n        code: \"popup_window_error\",\n        desc: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\"\n    },\n    emptyWindowError: {\n        code: \"empty_window_error\",\n        desc: \"window.open returned null or undefined window object.\"\n    },\n    userCancelledError: {\n        code: \"user_cancelled\",\n        desc: \"User cancelled the flow.\"\n    },\n    monitorPopupTimeoutError: {\n        code: \"monitor_window_timeout\",\n        desc: \"Token acquisition in popup failed due to timeout. For more visit: aka.ms/msaljs/browser-errors.\"\n    },\n    monitorIframeTimeoutError: {\n        code: \"monitor_window_timeout\",\n        desc: \"Token acquisition in iframe failed due to timeout. For more visit: aka.ms/msaljs/browser-errors.\"\n    },\n    redirectInIframeError: {\n        code: \"redirect_in_iframe\",\n        desc: \"Code flow is not supported inside an iframe. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\"\n    },\n    blockTokenRequestsInHiddenIframeError: {\n        code: \"block_iframe_reload\",\n        desc: \"Request was blocked inside an iframe because MSAL detected an authentication response. For more visit: aka.ms/msaljs/browser-errors\"\n    },\n    blockAcquireTokenInPopupsError: {\n        code: \"block_nested_popups\",\n        desc: \"Request was blocked inside a popup because MSAL detected it was running in a popup.\"\n    },\n    iframeClosedPrematurelyError: {\n        code: \"iframe_closed_prematurely\",\n        desc: \"The iframe being monitored was closed prematurely.\"\n    },\n    silentLogoutUnsupportedError: {\n        code: \"silent_logout_unsupported\",\n        desc: \"Silent logout not supported. Please call logoutRedirect or logoutPopup instead.\"\n    },\n    noAccountError: {\n        code: \"no_account_error\",\n        desc: \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\"\n    },\n    silentPromptValueError: {\n        code: \"silent_prompt_value_error\",\n        desc: \"The value given for the prompt value is not valid for silent requests - must be set to 'none'.\"\n    },\n    noTokenRequestCacheError: {\n        code: \"no_token_request_cache_error\",\n        desc: \"No token request found in cache.\"\n    },\n    unableToParseTokenRequestCacheError: {\n        code: \"unable_to_parse_token_request_cache_error\",\n        desc: \"The cached token request could not be parsed.\"\n    },\n    noCachedAuthorityError: {\n        code: \"no_cached_authority_error\",\n        desc: \"No cached authority found.\"\n    },\n    authRequestNotSet: {\n        code: \"auth_request_not_set_error\",\n        desc: \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\"\n    },\n    invalidCacheType: {\n        code: \"invalid_cache_type\",\n        desc: \"Invalid cache type\"\n    },\n    notInBrowserEnvironment: {\n        code: \"non_browser_environment\",\n        desc: \"Login and token requests are not supported in non-browser environments.\"\n    },\n    databaseNotOpen: {\n        code: \"database_not_open\",\n        desc: \"Database is not open!\"\n    },\n    noNetworkConnectivity: {\n        code: \"no_network_connectivity\",\n        desc: \"No network connectivity. Check your internet connection.\"\n    },\n    postRequestFailed: {\n        code: \"post_request_failed\",\n        desc: \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\"\n    },\n    getRequestFailed: {\n        code: \"get_request_failed\",\n        desc: \"Network request failed. Please check the network trace to determine root cause.\"\n    },\n    failedToParseNetworkResponse: {\n        code: \"failed_to_parse_response\",\n        desc: \"Failed to parse network response. Check network trace.\"\n    },\n    unableToLoadTokenError: {\n        code: \"unable_to_load_token\",\n        desc: \"Error loading token to cache.\"\n    },\n    signingKeyNotFoundInStorage: {\n        code: \"crypto_key_not_found\",\n        desc: \"Cryptographic Key or Keypair not found in browser storage.\"\n    },\n    authCodeRequired: {\n        code: \"auth_code_required\",\n        desc: \"An authorization code must be provided (as the `code` property on the request) to this flow.\"\n    },\n    databaseUnavailable: {\n        code: \"database_unavailable\",\n        desc: \"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.\"\n    }\n};\n\n/**\n * Browser library error class thrown by the MSAL.js library for SPAs\n */\nexport class BrowserAuthError extends AuthError {\n\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n\n        Object.setPrototypeOf(this, BrowserAuthError.prototype);\n        this.name = \"BrowserAuthError\";\n    }\n\n    /**\n     * Creates an error thrown when PKCE is not implemented.\n     * @param errDetail \n     */\n    static createPkceNotGeneratedError(errDetail: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.pkceNotGenerated.code,\n            `${BrowserAuthErrorMessage.pkceNotGenerated.desc} Detail:${errDetail}`);\n    }\n\n    /**\n     * Creates an error thrown when the crypto object is unavailable.\n     * @param errDetail \n     */\n    static createCryptoNotAvailableError(errDetail: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.cryptoDoesNotExist.code,\n            `${BrowserAuthErrorMessage.cryptoDoesNotExist.desc} Detail:${errDetail}`);\n    }\n\n    /**\n     * Creates an error thrown when an HTTP method hasn't been implemented by the browser class.\n     * @param method \n     */\n    static createHttpMethodNotImplementedError(method: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.httpMethodNotImplementedError.code,\n            `${BrowserAuthErrorMessage.httpMethodNotImplementedError.desc} Given Method: ${method}`);\n    }\n\n    /**\n     * Creates an error thrown when the navigation URI is empty.\n     */\n    static createEmptyNavigationUriError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.emptyNavigateUriError.code, BrowserAuthErrorMessage.emptyNavigateUriError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the hash string value is unexpectedly empty.\n     * @param hashValue \n     */\n    static createEmptyHashError(hashValue: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.hashEmptyError.code, `${BrowserAuthErrorMessage.hashEmptyError.desc} Given Url: ${hashValue}`);\n    }\n\n    /**\n     * Creates an error thrown when the hash string value is unexpectedly empty.\n     */\n    static createHashDoesNotContainStateError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainStateError.code, BrowserAuthErrorMessage.hashDoesNotContainStateError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the hash string value does not contain known properties\n     */\n    static createHashDoesNotContainKnownPropertiesError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.code, BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the hash string value is unexpectedly empty.\n     */\n    static createUnableToParseStateError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseStateError.code, BrowserAuthErrorMessage.unableToParseStateError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the state value in the hash does not match the interaction type of the API attempting to consume it.\n     */\n    static createStateInteractionTypeMismatchError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.stateInteractionTypeMismatchError.code, BrowserAuthErrorMessage.stateInteractionTypeMismatchError.desc);\n    }\n\n    /**\n     * Creates an error thrown when a browser interaction (redirect or popup) is in progress.\n     */\n    static createInteractionInProgressError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.interactionInProgress.code, BrowserAuthErrorMessage.interactionInProgress.desc);\n    }\n\n    /**\n     * Creates an error thrown when the popup window could not be opened.\n     * @param errDetail \n     */\n    static createPopupWindowError(errDetail?: string): BrowserAuthError {\n        let errorMessage = BrowserAuthErrorMessage.popupWindowError.desc;\n        errorMessage = !StringUtils.isEmpty(errDetail) ? `${errorMessage} Details: ${errDetail}` : errorMessage;\n        return new BrowserAuthError(BrowserAuthErrorMessage.popupWindowError.code, errorMessage);\n    }\n\n    /**\n     * Creates an error thrown when window.open returns an empty window object.\n     * @param errDetail \n     */\n    static createEmptyWindowCreatedError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.emptyWindowError.code, BrowserAuthErrorMessage.emptyWindowError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the user closes a popup.\n     */\n    static createUserCancelledError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.userCancelledError.code,\n            BrowserAuthErrorMessage.userCancelledError.desc);\n    }\n\n    /**\n     * Creates an error thrown when monitorPopupFromHash times out for a given popup.\n     */\n    static createMonitorPopupTimeoutError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.monitorPopupTimeoutError.code,\n            BrowserAuthErrorMessage.monitorPopupTimeoutError.desc);\n    }\n\n    /**\n     * Creates an error thrown when monitorIframeFromHash times out for a given iframe.\n     */\n    static createMonitorIframeTimeoutError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.monitorIframeTimeoutError.code,\n            BrowserAuthErrorMessage.monitorIframeTimeoutError.desc);\n    }\n\n    /**\n     * Creates an error thrown when navigateWindow is called inside an iframe.\n     * @param windowParentCheck \n     */\n    static createRedirectInIframeError(windowParentCheck: boolean): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.redirectInIframeError.code, \n            `${BrowserAuthErrorMessage.redirectInIframeError.desc} (window.parent !== window) => ${windowParentCheck}`);\n    }\n\n    /**\n     * Creates an error thrown when an auth reload is done inside an iframe.\n     */\n    static createBlockReloadInHiddenIframeError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.code,\n            BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.desc);\n    }\n\n    /**\n     * Creates an error thrown when a popup attempts to call an acquireToken API\n     * @returns \n     */\n    static createBlockAcquireTokenInPopupsError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.code, \n            BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.desc);\n    }\n\n    /**\n     * Creates an error thrown when an iframe is found to be closed before the timeout is reached.\n     */\n    static createIframeClosedPrematurelyError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.iframeClosedPrematurelyError.code, BrowserAuthErrorMessage.iframeClosedPrematurelyError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the logout API is called on any of the silent interaction clients\n     */\n    static createSilentLogoutUnsupportedError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.silentLogoutUnsupportedError.code, BrowserAuthErrorMessage.silentLogoutUnsupportedError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the account object is not provided in the acquireTokenSilent API.\n     */\n    static createNoAccountError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.noAccountError.code, BrowserAuthErrorMessage.noAccountError.desc);\n    }\n\n    /**\n     * Creates an error thrown when a given prompt value is invalid for silent requests.\n     */\n    static createSilentPromptValueError(givenPrompt: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.silentPromptValueError.code, `${BrowserAuthErrorMessage.silentPromptValueError.desc} Given value: ${givenPrompt}`);\n    }\n\n    /**\n     * Creates an error thrown when the cached token request could not be retrieved from the cache\n     */\n    static createUnableToParseTokenRequestCacheError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.code,\n            BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the token request could not be retrieved from the cache\n     */\n    static createNoTokenRequestCacheError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.noTokenRequestCacheError.code,\n            BrowserAuthErrorMessage.noTokenRequestCacheError.desc);\n    }\n\n    /**\n     * Creates an error thrown when handleCodeResponse is called before initiateAuthRequest (InteractionHandler)\n     */\n    static createAuthRequestNotSetError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.authRequestNotSet.code,\n            BrowserAuthErrorMessage.authRequestNotSet.desc);\n    }\n\n    /**\n     * Creates an error thrown when the authority could not be retrieved from the cache\n     */\n    static createNoCachedAuthorityError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.noCachedAuthorityError.code,\n            BrowserAuthErrorMessage.noCachedAuthorityError.desc);\n    }\n\n    /**\n     * Creates an error thrown if cache type is invalid.\n     */\n    static createInvalidCacheTypeError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.invalidCacheType.code, `${BrowserAuthErrorMessage.invalidCacheType.desc}`);\n    }\n\n    /**\n     * Create an error thrown when login and token requests are made from a non-browser environment\n     */\n    static createNonBrowserEnvironmentError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.notInBrowserEnvironment.code, BrowserAuthErrorMessage.notInBrowserEnvironment.desc);\n    }\n\n    /**\n     * Create an error thrown when indexDB database is not open\n     */\n    static createDatabaseNotOpenError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.databaseNotOpen.code, BrowserAuthErrorMessage.databaseNotOpen.desc);\n    }\n\n    /**\n     * Create an error thrown when token fetch fails due to no internet\n     */\n    static createNoNetworkConnectivityError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.noNetworkConnectivity.code, BrowserAuthErrorMessage.noNetworkConnectivity.desc);\n    }\n\n    /**\n     * Create an error thrown when token fetch fails due to reasons other than internet connectivity\n     */\n    static createPostRequestFailedError(errorDesc: string, endpoint: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.postRequestFailed.code, `${BrowserAuthErrorMessage.postRequestFailed.desc} | Network client threw: ${errorDesc} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n    }\n\n    /**\n     * Create an error thrown when get request fails due to reasons other than internet connectivity\n     */\n    static createGetRequestFailedError(errorDesc: string, endpoint: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.getRequestFailed.code, `${BrowserAuthErrorMessage.getRequestFailed.desc} | Network client threw: ${errorDesc} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n    }\n\n    /**\n     * Create an error thrown when network client fails to parse network response\n     */\n    static createFailedToParseNetworkResponseError(endpoint: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.failedToParseNetworkResponse.code, `${BrowserAuthErrorMessage.failedToParseNetworkResponse.desc} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n    }\n\n    /**\n     * Create an error thrown when the necessary information is not available to sideload tokens \n     */\n    static createUnableToLoadTokenError(errorDetail: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.unableToLoadTokenError.code, `${BrowserAuthErrorMessage.unableToLoadTokenError.desc} | ${errorDetail}`);\n    }\n  \n    /**\n     * Create an error thrown when the queried cryptographic key is not found in IndexedDB\n     */\n    static createSigningKeyNotFoundInStorageError(keyId: string): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code, `${BrowserAuthErrorMessage.signingKeyNotFoundInStorage.desc} | No match found for KeyId: ${keyId}`);\n    }\n\n    /**\n     * Create an error when an authorization code is required but not provided\n     */\n    static createAuthCodeRequiredError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.authCodeRequired.code, BrowserAuthErrorMessage.authCodeRequired.desc);\n    }\n\n    /**\n     * Create an error when IndexedDB is unavailable\n     */\n    static createDatabaseUnavailableError(): BrowserAuthError {\n        return new BrowserAuthError(BrowserAuthErrorMessage.databaseUnavailable.code, BrowserAuthErrorMessage.databaseUnavailable.desc);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\nimport { Logger } from \"..\";\n/**\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\n */\n// RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT: Uint8Array = new Uint8Array([0x01, 0x00, 0x01]);\n\n/**\n * This class implements functions used by the browser library to perform cryptography operations such as\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\n */\nexport class BrowserCrypto {\n\n    private _keygenAlgorithmOptions: RsaHashedKeyGenParams;\n    private logger: Logger;\n\n    constructor(logger: Logger) {\n        this.logger = logger;\n        \n        if (!(this.hasCryptoAPI())) {\n            throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto or msCrypto object not available.\");\n        }\n\n        this._keygenAlgorithmOptions = {\n            name: PKCS1_V15_KEYGEN_ALG,\n            hash: S256_HASH_ALG,\n            modulusLength: MODULUS_LENGTH,\n            publicExponent: PUBLIC_EXPONENT\n        };\n    }\n\n    /**\n     * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\n     * @param dataString \n     */\n    async sha256Digest(dataString: string): Promise<ArrayBuffer> {\n        const data = BrowserStringUtils.stringToUtf8Arr(dataString);\n\n        return this.hasIECrypto() ? this.getMSCryptoDigest(S256_HASH_ALG, data) : this.getSubtleCryptoDigest(S256_HASH_ALG, data);\n    }\n\n    /**\n     * Populates buffer with cryptographically random values.\n     * @param dataBuffer \n     */\n    getRandomValues(dataBuffer: Uint8Array): void {\n        const cryptoObj = window[\"msCrypto\"] || window.crypto;\n        if (!cryptoObj.getRandomValues) {\n            throw BrowserAuthError.createCryptoNotAvailableError(\"getRandomValues does not exist.\");\n        }\n        cryptoObj.getRandomValues(dataBuffer);\n    }\n\n    /**\n     * Generates a keypair based on current keygen algorithm config.\n     * @param extractable \n     * @param usages \n     */\n    async generateKeyPair(extractable: boolean, usages: Array<KeyUsage>): Promise<CryptoKeyPair> {\n        return (\n            this.hasIECrypto() ? \n                this.msCryptoGenerateKey(extractable, usages) \n                : window.crypto.subtle.generateKey(this._keygenAlgorithmOptions, extractable, usages)\n        ) as Promise<CryptoKeyPair>;\n    }\n\n    /**\n     * Export key as Json Web Key (JWK)\n     * @param key \n     * @param format \n     */\n    async exportJwk(key: CryptoKey): Promise<JsonWebKey> {\n        return this.hasIECrypto() ? this.msCryptoExportJwk(key) : window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key);\n    }\n\n    /**\n     * Imports key as Json Web Key (JWK), can set extractable and usages.\n     * @param key \n     * @param format \n     * @param extractable \n     * @param usages \n     */\n    async importJwk(key: JsonWebKey, extractable: boolean, usages: Array<KeyUsage>): Promise<CryptoKey> {\n        const keyString = BrowserCrypto.getJwkString(key);\n        const keyBuffer = BrowserStringUtils.stringToArrayBuffer(keyString);\n\n        return this.hasIECrypto() ? \n            this.msCryptoImportKey(keyBuffer, extractable, usages) \n            : window.crypto.subtle.importKey(KEY_FORMAT_JWK, key, this._keygenAlgorithmOptions, extractable, usages);\n    }\n\n    /**\n     * Signs given data with given key\n     * @param key \n     * @param data \n     */\n    async sign(key: CryptoKey, data: ArrayBuffer): Promise<ArrayBuffer> {\n        return this.hasIECrypto() ?\n            this.msCryptoSign(key, data)\n            : window.crypto.subtle.sign(this._keygenAlgorithmOptions, key, data);\n    }\n\n    /**\n     * Check whether IE crypto or other browser cryptography is available.\n     */\n    private hasCryptoAPI(): boolean {\n        return this.hasIECrypto() || this.hasBrowserCrypto();\n    }\n\n    /**\n     * Checks whether IE crypto (AKA msCrypto) is available.\n     */\n    private hasIECrypto(): boolean {\n        return \"msCrypto\" in window;\n    }\n\n    /**\n     * Check whether browser crypto is available.\n     */\n    private hasBrowserCrypto(): boolean {\n        return \"crypto\" in window;\n    }\n\n    /**\n     * Helper function for SHA digest.\n     * @param algorithm \n     * @param data \n     */\n    private async getSubtleCryptoDigest(algorithm: string, data: Uint8Array): Promise<ArrayBuffer> {\n        return window.crypto.subtle.digest(algorithm, data);\n    }\n\n    /**\n     * IE Helper function for SHA digest.\n     * @param algorithm \n     * @param data \n     */\n    private async getMSCryptoDigest(algorithm: string, data: Uint8Array): Promise<ArrayBuffer> {\n        return new Promise((resolve, reject) => {\n            const digestOperation = window[\"msCrypto\"].subtle.digest(algorithm, data.buffer);\n            digestOperation.addEventListener(\"complete\", (e: { target: { result: ArrayBuffer | PromiseLike<ArrayBuffer>; }; }) => {\n                resolve(e.target.result);\n            });\n            digestOperation.addEventListener(\"error\", (error: string) => {\n                reject(error);\n            });\n        });\n    }\n\n    /**\n     * IE Helper function for generating a keypair\n     * @param extractable \n     * @param usages \n     */\n    private async msCryptoGenerateKey(extractable: boolean, usages: Array<KeyUsage>): Promise<CryptoKeyPair> {\n        return new Promise((resolve: Function, reject: Function) => {\n            const msGenerateKey = window[\"msCrypto\"].subtle.generateKey(this._keygenAlgorithmOptions, extractable, usages);\n            msGenerateKey.addEventListener(\"complete\", (e: { target: { result: CryptoKeyPair | PromiseLike<CryptoKeyPair>; }; }) => {\n                resolve(e.target.result);\n            });\n\n            msGenerateKey.addEventListener(\"error\", (error: string) => {\n                reject(error);\n            });\n        });\n    }\n\n    /**\n     * IE Helper function for exportKey\n     * @param key \n     * @param format \n     */\n    private async msCryptoExportJwk(key: CryptoKey): Promise<JsonWebKey> {\n        return new Promise((resolve: Function, reject: Function) => {\n            const msExportKey = window[\"msCrypto\"].subtle.exportKey(KEY_FORMAT_JWK, key);\n            msExportKey.addEventListener(\"complete\", (e: { target: { result: ArrayBuffer; }; }) => {\n                const resultBuffer: ArrayBuffer = e.target.result;\n\n                const resultString = BrowserStringUtils.utf8ArrToString(new Uint8Array(resultBuffer))\n                    .replace(/\\r/g, \"\")\n                    .replace(/\\n/g, \"\")\n                    .replace(/\\t/g, \"\")\n                    .split(\" \").join(\"\")\n                    .replace(\"\\u0000\", \"\");\n\n                try {\n                    resolve(JSON.parse(resultString));\n                } catch (e) {\n                    reject(e);\n                }\n            });\n\n            msExportKey.addEventListener(\"error\", (error: string) => {\n                reject(error);\n            });\n        });\n    }\n\n    /**\n     * IE Helper function for importKey\n     * @param key \n     * @param format \n     * @param extractable \n     * @param usages \n     */\n    private async msCryptoImportKey(keyBuffer: ArrayBuffer, extractable: boolean, usages: Array<KeyUsage>): Promise<CryptoKey> {\n        return new Promise((resolve: Function, reject: Function) => {\n            const msImportKey = window[\"msCrypto\"].subtle.importKey(KEY_FORMAT_JWK, keyBuffer, this._keygenAlgorithmOptions, extractable, usages);\n            msImportKey.addEventListener(\"complete\", (e: { target: { result: CryptoKey | PromiseLike<CryptoKey>; }; }) => {\n                resolve(e.target.result);\n            });\n\n            msImportKey.addEventListener(\"error\", (error: string) => {\n                reject(error);\n            });\n        });\n    }\n\n    /**\n     * IE Helper function for sign JWT\n     * @param key \n     * @param data \n     */\n    private async msCryptoSign(key: CryptoKey, data: ArrayBuffer): Promise<ArrayBuffer> {\n        return new Promise((resolve: Function, reject: Function) => {\n            const msSign = window[\"msCrypto\"].subtle.sign(this._keygenAlgorithmOptions, key, data);\n            msSign.addEventListener(\"complete\", (e: { target: { result: ArrayBuffer | PromiseLike<ArrayBuffer>; }; }) => {\n                resolve(e.target.result);\n            });\n\n            msSign.addEventListener(\"error\", (error: string) => {\n                reject(error);\n            });\n        });\n    }\n\n    /**\n     * Returns stringified jwk.\n     * @param jwk \n     */\n    static getJwkString(jwk: JsonWebKey): string {\n        return JSON.stringify(jwk, Object.keys(jwk).sort());\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger } from \"@azure/msal-common\";\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\nimport { DatabaseStorage } from \"./DatabaseStorage\";\nimport { IAsyncStorage } from \"./IAsyncMemoryStorage\";\nimport { MemoryStorage } from \"./MemoryStorage\";\n\n/**\n * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,\n * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.\n */\nexport class AsyncMemoryStorage<T> implements IAsyncStorage<T> {\n    private inMemoryCache: MemoryStorage<T>;\n    private indexedDBCache: DatabaseStorage<T>;\n    private logger: Logger;\n\n    constructor(logger: Logger) {\n        this.inMemoryCache = new MemoryStorage<T>();\n        this.indexedDBCache = new DatabaseStorage<T>();\n        this.logger = logger;\n    }\n\n    private handleDatabaseAccessError(error: unknown): void {\n        if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.databaseUnavailable.code) {\n            this.logger.error(\"Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.\");\n        }\n    }\n    /**\n     * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous\n     * storage object if item isn't found in-memory.\n     * @param key \n     */\n    async getItem(key: string): Promise<T | null> {\n        const item = this.inMemoryCache.getItem(key);\n        if(!item) {\n            try {\n                this.logger.verbose(\"Queried item not found in in-memory cache, now querying persistent storage.\");\n                return await this.indexedDBCache.getItem(key);\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return item;\n    }\n\n    /**\n     * Sets the item in the in-memory cache and then tries to set it in the asynchronous\n     * storage object with the given key.\n     * @param key \n     * @param value \n     */\n    async setItem(key: string, value: T): Promise<void> {\n        this.inMemoryCache.setItem(key, value);\n        try {\n            await this.indexedDBCache.setItem(key, value);\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n        }\n    }\n\n    /**\n     * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.\n     * @param key \n     */\n    async removeItem(key: string): Promise<void> {\n        this.inMemoryCache.removeItem(key);\n        try {\n            await this.indexedDBCache.removeItem(key);\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n        }\n    }\n\n    /**\n     * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the \n     * asynchronous storage object.\n     */\n    async getKeys(): Promise<string[]> {\n        const cacheKeys = this.inMemoryCache.getKeys();\n        if (cacheKeys.length === 0) {\n            try {\n                this.logger.verbose(\"In-memory cache is empty, now querying persistent storage.\");\n                return await this.indexedDBCache.getKeys();\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return cacheKeys;\n    }\n\n    /**\n     * Returns true or false if the given key is present in the cache.\n     * @param key \n     */\n    async containsKey(key: string): Promise<boolean> {\n        const containsKey = this.inMemoryCache.containsKey(key);\n        if(!containsKey) {\n            try {\n                this.logger.verbose(\"Key not found in in-memory cache, now querying persistent storage.\");\n                return await this.indexedDBCache.containsKey(key);\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return containsKey;\n    }\n\n    /**\n     * Clears in-memory Map and tries to delete the IndexedDB database.\n     */\n    async clear(): Promise<void> {\n        this.inMemoryCache.clear();\n        try {\n            await this.indexedDBCache.deleteDatabase();\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { DB_NAME, DB_TABLE_NAME, DB_VERSION } from \"../utils/BrowserConstants\";\nimport { IAsyncStorage } from \"./IAsyncMemoryStorage\";\n\ninterface IDBOpenDBRequestEvent extends Event {\n    target: IDBOpenDBRequest & EventTarget;\n}\n\ninterface IDBOpenOnUpgradeNeededEvent extends IDBVersionChangeEvent {\n    target: IDBOpenDBRequest & EventTarget;\n}\n\ninterface IDBRequestEvent extends Event {\n    target: IDBRequest & EventTarget;\n}\n\n/**\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\n */\nexport class DatabaseStorage<T> implements IAsyncStorage<T> {\n    private db: IDBDatabase|undefined;\n    private dbName: string;\n    private tableName: string;\n    private version: number;\n    private dbOpen: boolean;\n\n    constructor() {\n        this.dbName = DB_NAME;\n        this.version = DB_VERSION;\n        this.tableName = DB_TABLE_NAME;\n        this.dbOpen = false;\n    }\n\n    /**\n     * Opens IndexedDB instance.\n     */\n    async open(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const openDB = window.indexedDB.open(this.dbName, this.version);\n            openDB.addEventListener(\"upgradeneeded\", (e: IDBVersionChangeEvent) => {\n                const event = e as IDBOpenOnUpgradeNeededEvent;\n                event.target.result.createObjectStore(this.tableName);\n            });\n            openDB.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBOpenDBRequestEvent;\n                this.db = event.target.result;\n                this.dbOpen = true;\n                resolve();\n            });\n            openDB.addEventListener(\"error\",  () => reject(BrowserAuthError.createDatabaseUnavailableError()));\n        });\n    }\n\n    /**\n     * Opens database if it's not already open\n     */\n    private async validateDbIsOpen(): Promise<void> {\n        if (!this.dbOpen) {\n            return await this.open();\n        }\n    }\n\n    /**\n     * Retrieves item from IndexedDB instance.\n     * @param key \n     */\n    async getItem(key: string): Promise<T | null> {\n        await this.validateDbIsOpen();\n\n        return new Promise<T>((resolve, reject) => {\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGet = objectStore.get(key);\n            dbGet.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                resolve(event.target.result);\n            });\n            dbGet.addEventListener(\"error\", (e) => reject(e));\n        });\n    }\n\n    /**\n     * Adds item to IndexedDB under given key\n     * @param key \n     * @param payload \n     */\n    async setItem(key: string, payload: T): Promise<void> {\n        await this.validateDbIsOpen();\n\n        return new Promise<void>((resolve: Function, reject: Function) => {\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\n\n            const objectStore = transaction.objectStore(this.tableName);\n\n            const dbPut = objectStore.put(payload, key);\n\n            dbPut.addEventListener(\"success\", () => resolve());\n            dbPut.addEventListener(\"error\", (e) => reject(e));\n        });\n    }\n\n    /**\n     * Removes item from IndexedDB under given key\n     * @param key\n     */\n    async removeItem(key: string): Promise<void> {\n        await this.validateDbIsOpen();\n\n        return new Promise<void>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbDelete = objectStore.delete(key);\n            dbDelete.addEventListener(\"success\", () => resolve());\n            dbDelete.addEventListener(\"error\", (e) => reject(e));\n        });\n    }\n\n    /**\n     * Get all the keys from the storage object as an iterable array of strings.\n     */\n    async getKeys(): Promise<string[]> {\n        await this.validateDbIsOpen();\n\n        return new Promise<string[]>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGetKeys = objectStore.getAllKeys();\n            dbGetKeys.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                resolve(event.target.result);\n            });\n            dbGetKeys.addEventListener(\"error\",  (e: Event) => reject(e));\n        });\n    }\n\n    /**\n     * \n     * Checks whether there is an object under the search key in the object store\n     */\n    async containsKey(key: string): Promise<boolean> {\n        await this.validateDbIsOpen();\n\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbContainsKey = objectStore.count(key);\n            dbContainsKey.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                resolve(event.target.result === 1);\n            });\n            dbContainsKey.addEventListener(\"error\", (e: Event) => reject(e));\n        });\n    }\n\n    /**\n     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\n     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\n     * with IndexedDB database versions.\n     */\n    async deleteDatabase(): Promise<boolean> {\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\n            const deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n            deleteDbRequest.addEventListener(\"success\", () => resolve(true));\n            deleteDbRequest.addEventListener(\"error\", () => reject(false));\n        });\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IWindowStorage } from \"./IWindowStorage\";\n\nexport class MemoryStorage<T> implements IWindowStorage<T> {\n\n    private cache: Map<string, T>;\n\n    constructor() {\n        this.cache = new Map<string, T>();\n    }\n\n    getItem(key: string): T | null {\n        return this.cache.get(key) || null;\n    }\n\n    setItem(key: string, value: T): void {\n        this.cache.set(key, value);\n    }\n\n    removeItem(key: string): void {\n        this.cache.delete(key);\n    }\n\n    getKeys(): string[] {\n        const cacheKeys: string[] = [];\n        this.cache.forEach((value: T, key: string) => {\n            cacheKeys.push(key);\n        });\n        return cacheKeys;\n    }\n\n    containsKey(key: string): boolean {\n        return this.cache.has(key);\n    }\n\n    clear() :void {\n        this.cache.clear();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Constants, PersistentCacheKeys, StringUtils, CommonAuthorizationCodeRequest, ICrypto, AccountEntity, IdTokenEntity, AccessTokenEntity, RefreshTokenEntity, AppMetadataEntity, CacheManager, ServerTelemetryEntity, ThrottlingEntity, ProtocolUtils, Logger, AuthorityMetadataEntity, DEFAULT_CRYPTO_IMPLEMENTATION, AccountInfo, CcsCredential, CcsCredentialType, IdToken, ValidCredentialType } from \"@azure/msal-common\";\nimport { CacheOptions } from \"../config/Configuration\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { BrowserCacheLocation, InteractionType, TemporaryCacheKeys, InMemoryCacheKeys } from \"../utils/BrowserConstants\";\nimport { BrowserStorage } from \"./BrowserStorage\";\nimport { MemoryStorage } from \"./MemoryStorage\";\nimport { IWindowStorage } from \"./IWindowStorage\";\nimport { BrowserProtocolUtils } from \"../utils/BrowserProtocolUtils\";\n\n/**\n * This class implements the cache storage interface for MSAL through browser local or session storage.\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\n * parameters such as state and nonce, generally.\n */\nexport class BrowserCacheManager extends CacheManager {\n\n    // Cache configuration, either set by user or default values.\n    protected cacheConfig: Required<CacheOptions>;\n    // Window storage object (either local or sessionStorage)\n    protected browserStorage: IWindowStorage<string>;\n    // Internal in-memory storage object used for data used by msal that does not need to persist across page loads\n    protected internalStorage: MemoryStorage<string>;\n    // Temporary cache\n    protected temporaryCacheStorage: IWindowStorage<string>;\n    // Client id of application. Used in cache keys to partition cache correctly in the case of multiple instances of MSAL.\n    protected logger: Logger;\n\n    // Cookie life calculation (hours * minutes * seconds * ms)\n    protected readonly COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\n\n    constructor(clientId: string, cacheConfig: Required<CacheOptions>, cryptoImpl: ICrypto, logger: Logger) {\n        super(clientId, cryptoImpl);\n\n        this.cacheConfig = cacheConfig;\n        this.logger = logger;\n        this.internalStorage = new MemoryStorage();\n        this.browserStorage = this.setupBrowserStorage(this.cacheConfig.cacheLocation);\n        this.temporaryCacheStorage = this.setupTemporaryCacheStorage(this.cacheConfig.cacheLocation);\n\n        // Migrate any cache entries from older versions of MSAL.\n        this.migrateCacheEntries();\n    }\n\n    /**\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\n     * @param cacheLocation\n     */\n    protected setupBrowserStorage(cacheLocation: BrowserCacheLocation | string): IWindowStorage<string> {\n        switch (cacheLocation) {\n            case BrowserCacheLocation.LocalStorage:\n            case BrowserCacheLocation.SessionStorage:\n                try {\n                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n                    return new BrowserStorage(cacheLocation);\n                } catch (e) {\n                    this.logger.verbose(e);\n                    break;\n                }\n            case BrowserCacheLocation.MemoryStorage:\n            default:\n                break;\n        }\n        this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\n        return new MemoryStorage();\n    }\n\n    /**\n     *\n     * @param cacheLocation\n     */\n    protected setupTemporaryCacheStorage(cacheLocation: BrowserCacheLocation | string): IWindowStorage<string> {\n        switch (cacheLocation) {\n            case BrowserCacheLocation.LocalStorage:\n            case BrowserCacheLocation.SessionStorage:\n                try {\n                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n                    return new BrowserStorage(BrowserCacheLocation.SessionStorage);\n                } catch (e) {\n                    this.logger.verbose(e);\n                    return this.internalStorage;\n                }\n            case BrowserCacheLocation.MemoryStorage:\n            default:\n                return this.internalStorage;\n        }\n    }\n\n    /**\n     * Migrate all old cache entries to new schema. No rollback supported.\n     * @param storeAuthStateInCookie\n     */\n    protected migrateCacheEntries(): void {\n        const idTokenKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ID_TOKEN}`;\n        const clientInfoKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.CLIENT_INFO}`;\n        const errorKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR}`;\n        const errorDescKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR_DESC}`;\n\n        const idTokenValue = this.browserStorage.getItem(idTokenKey);\n        const clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n        const errorValue = this.browserStorage.getItem(errorKey);\n        const errorDescValue = this.browserStorage.getItem(errorDescKey);\n\n        const values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\n        const keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\n\n        keysToMigrate.forEach((cacheKey:string, index: number) => this.migrateCacheEntry(cacheKey, values[index]));\n    }\n\n    /**\n     * Utility function to help with migration.\n     * @param newKey\n     * @param value\n     * @param storeAuthStateInCookie\n     */\n    protected migrateCacheEntry(newKey: string, value: string|null): void {\n        if (value) {\n            this.setTemporaryCache(newKey, value, true);\n        }\n    }\n\n    /**\n     * Parses passed value as JSON object, JSON.parse() will throw an error.\n     * @param input\n     */\n    protected validateAndParseJson(jsonValue: string): object | null {\n        try {\n            const parsedJson = JSON.parse(jsonValue);\n            /**\n             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\n             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\n             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\n             *\n             */\n            return (parsedJson && typeof parsedJson === \"object\") ? parsedJson : null;\n        } catch (error) {\n            return null;\n        }\n    }\n\n    /**\n     * fetches the entry from the browser storage based off the key\n     * @param key\n     */\n    getItem(key: string): string | null {\n        return this.browserStorage.getItem(key);\n    }\n\n    /**\n     * sets the entry in the browser storage\n     * @param key\n     * @param value\n     */\n    setItem(key: string, value: string): void {\n        this.browserStorage.setItem(key, value);\n    }\n\n    /**\n     * fetch the account entity from the platform cache\n     * @param accountKey\n     */\n    getAccount(accountKey: string): AccountEntity | null {\n        const account = this.getItem(accountKey);\n        if (!account) {\n            return null;\n        }\n\n        const parsedAccount = this.validateAndParseJson(account);\n        if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\n            return null;\n        }\n\n        return CacheManager.toObject<AccountEntity>(new AccountEntity(), parsedAccount);\n    }\n\n    /**\n     * set account entity in the platform cache\n     * @param key\n     * @param value\n     */\n    setAccount(account: AccountEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAccount called\");\n        const key = account.generateAccountKey();\n        this.setItem(key, JSON.stringify(account));\n    }\n\n    /**\n     * generates idToken entity from a string\n     * @param idTokenKey\n     */\n    getIdTokenCredential(idTokenKey: string): IdTokenEntity | null {\n        const value = this.getItem(idTokenKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n            return null;\n        }\n\n        const parsedIdToken = this.validateAndParseJson(value);\n        if (!parsedIdToken || !IdTokenEntity.isIdTokenEntity(parsedIdToken)) {\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\n        return CacheManager.toObject(new IdTokenEntity(), parsedIdToken);\n    }\n\n    /**\n     * set IdToken credential to the platform cache\n     * @param idToken\n     */\n    setIdTokenCredential(idToken: IdTokenEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n        const idTokenKey = idToken.generateCredentialKey();\n        this.setItem(idTokenKey, JSON.stringify(idToken));\n    }\n\n    /**\n     * generates accessToken entity from a string\n     * @param key\n     */\n    getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null {\n        const value = this.getItem(accessTokenKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n            return null;\n        }\n        const parsedAccessToken = this.validateAndParseJson(value);\n        if (!parsedAccessToken || !AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\n        return CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);\n    }\n\n    /**\n     * set accessToken credential to the platform cache\n     * @param accessToken\n     */\n    setAccessTokenCredential(accessToken: AccessTokenEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\n        const accessTokenKey = accessToken.generateCredentialKey();\n        this.setItem(accessTokenKey, JSON.stringify(accessToken));\n    }\n\n    /**\n     * generates refreshToken entity from a string\n     * @param refreshTokenKey\n     */\n    getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null {\n        const value = this.getItem(refreshTokenKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n            return null;\n        }\n        const parsedRefreshToken = this.validateAndParseJson(value);\n        if (!parsedRefreshToken || !RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\n        return CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);\n    }\n\n    /**\n     * set refreshToken credential to the platform cache\n     * @param refreshToken\n     */\n    setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\n        const refreshTokenKey = refreshToken.generateCredentialKey();\n        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n    }\n\n    /**\n     * fetch appMetadata entity from the platform cache\n     * @param appMetadataKey\n     */\n    getAppMetadata(appMetadataKey: string): AppMetadataEntity | null {\n        const value = this.getItem(appMetadataKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n            return null;\n        }\n\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (!parsedMetadata || !AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n        return CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);\n    }\n\n    /**\n     * set appMetadata entity to the platform cache\n     * @param appMetadata\n     */\n    setAppMetadata(appMetadata: AppMetadataEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n        const appMetadataKey = appMetadata.generateAppMetadataKey();\n        this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n    }\n\n    /**\n     * fetch server telemetry entity from the platform cache\n     * @param serverTelemetryKey\n     */\n    getServerTelemetry(serverTelemetryKey: string): ServerTelemetryEntity | null {\n        const value = this.getItem(serverTelemetryKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n            return null;\n        }\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (!parsedMetadata || !ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n        return CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);\n    }\n\n    /**\n     * set server telemetry entity to the platform cache\n     * @param serverTelemetryKey\n     * @param serverTelemetry\n     */\n    setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n    }\n\n    /**\n     *\n     */\n    getAuthorityMetadata(key: string) : AuthorityMetadataEntity | null {\n        const value = this.internalStorage.getItem(key);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\n            return null;\n        }\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (parsedMetadata && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\n            return CacheManager.toObject(new AuthorityMetadataEntity(), parsedMetadata);\n        }\n        return null;\n    }\n\n    /**\n     *\n     */\n    getAuthorityMetadataKeys(): Array<string> {\n        const allKeys = this.internalStorage.getKeys();\n        return allKeys.filter((key) => {\n            return this.isAuthorityMetadata(key);\n        });\n    }\n\n    /**\n     * Sets wrapper metadata in memory\n     * @param wrapperSKU \n     * @param wrapperVersion \n     */\n    setWrapperMetadata(wrapperSKU: string, wrapperVersion: string): void {\n        this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\n        this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);\n    }\n\n    /**\n     * Returns wrapper metadata from in-memory storage\n     */\n    getWrapperMetadata(): [string, string] {\n        const sku = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) || \"\";\n        const version = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) || \"\";\n        return [sku, version];\n    }\n\n    /**\n     *\n     * @param entity\n     */\n    setAuthorityMetadata(key: string, entity: AuthorityMetadataEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n        this.internalStorage.setItem(key, JSON.stringify(entity));\n    }\n\n    /**\n     * Gets the active account\n     */\n    getActiveAccount(): AccountInfo | null {\n        const activeAccountIdKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n        const activeAccountId = this.browserStorage.getItem(activeAccountIdKey);\n        if (!activeAccountId) {\n            return null;\n        }\n        return this.getAccountInfoByFilter({localAccountId: activeAccountId})[0] || null;\n    }\n\n    /**\n     * Sets the active account's localAccountId in cache\n     * @param account \n     */\n    setActiveAccount(account: AccountInfo | null): void {\n        const activeAccountIdKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n        if (account) {\n            this.logger.verbose(\"setActiveAccount: Active account set\");\n            this.browserStorage.setItem(activeAccountIdKey, account.localAccountId);\n        } else {\n            this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\n            this.browserStorage.removeItem(activeAccountIdKey);\n        }\n    }\n\n    /**\n     * Gets a list of accounts that match all of the filters provided\n     * @param account \n     */\n    getAccountInfoByFilter(accountFilter: Partial<Omit<AccountInfo, \"idTokenClaims\"|\"name\">>): AccountInfo[] {\n        const allAccounts = this.getAllAccounts();\n        return allAccounts.filter((accountObj) => {\n            if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n                return false;\n            }\n\n            if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) {\n                return false;\n            }\n\n            if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) {\n                return false;\n            }\n\n            if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) {\n                return false;\n            }\n\n            if (accountFilter.environment && accountFilter.environment !== accountObj.environment) {\n                return false;\n            }\n            \n            return true;\n        });\n    }\n\n    /**\n     * fetch throttling entity from the platform cache\n     * @param throttlingCacheKey\n     */\n    getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null {\n        const value = this.getItem(throttlingCacheKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n            return null;\n        }\n\n        const parsedThrottlingCache = this.validateAndParseJson(value);\n        if (!parsedThrottlingCache || !ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n        return CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);\n    }\n\n    /**\n     * set throttling entity to the platform cache\n     * @param throttlingCacheKey\n     * @param throttlingCache\n     */\n    setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n    }\n\n    /**\n     * Gets cache item with given key.\n     * Will retrieve from cookies if storeAuthStateInCookie is set to true.\n     * @param key\n     */\n    getTemporaryCache(cacheKey: string, generateKey?: boolean): string | null {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            const itemCookie = this.getItemCookie(key);\n            if (itemCookie) {\n                this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\n                return itemCookie;\n            }\n        }\n\n        const value = this.temporaryCacheStorage.getItem(key);\n        if (!value) {\n            // If temp cache item not found in session/memory, check local storage for items set by old versions\n            if (this.cacheConfig.cacheLocation === BrowserCacheLocation.LocalStorage) {\n                const item = this.browserStorage.getItem(key);\n                if (item) {\n                    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\n                    return item;\n                }\n            }\n            this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\n        return value;\n    }\n\n    /**\n     * Sets the cache item with the key and value given.\n     * Stores in cookie if storeAuthStateInCookie is set to true.\n     * This can cause cookie overflow if used incorrectly.\n     * @param key\n     * @param value\n     */\n    setTemporaryCache(cacheKey: string, value: string, generateKey?: boolean): void {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n\n        this.temporaryCacheStorage.setItem(key, value);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\n            this.setItemCookie(key, value);\n        }\n    }\n\n    /**\n     * Removes the cache item with the given key.\n     * Will also clear the cookie item if storeAuthStateInCookie is set to true.\n     * @param key\n     */\n    removeItem(key: string): boolean {\n        this.browserStorage.removeItem(key);\n        this.temporaryCacheStorage.removeItem(key);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\n            this.clearItemCookie(key);\n        }\n        return true;\n    }\n\n    /**\n     * Checks whether key is in cache.\n     * @param key\n     */\n    containsKey(key: string): boolean {\n        return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);\n    }\n\n    /**\n     * Gets all keys in window.\n     */\n    getKeys(): string[] {\n        return [\n            ...this.browserStorage.getKeys(),\n            ...this.temporaryCacheStorage.getKeys()\n        ];\n    }\n\n    /**\n     * Clears all cache entries created by MSAL.\n     */\n    async clear(): Promise<void> {\n        // Removes all accounts and their credentials\n        await this.removeAllAccounts();\n        this.removeAppMetadata();\n\n        // Removes all remaining MSAL cache items\n        this.getKeys().forEach((cacheKey: string) => {\n            // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\n            if ((this.browserStorage.containsKey(cacheKey) || this.temporaryCacheStorage.containsKey(cacheKey)) && ((cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1) || (cacheKey.indexOf(this.clientId) !== -1))) {\n                this.removeItem(cacheKey);\n            }\n        });\n\n        this.internalStorage.clear();\n    }\n\n    /**\n     * Add value to cookies\n     * @param cookieName\n     * @param cookieValue\n     * @param expires\n     */\n    setItemCookie(cookieName: string, cookieValue: string, expires?: number): void {\n        let cookieStr = `${encodeURIComponent(cookieName)}=${encodeURIComponent(cookieValue)};path=/;`;\n        if (expires) {\n            const expireTime = this.getCookieExpirationTime(expires);\n            cookieStr += `expires=${expireTime};`;\n        }\n\n        if (this.cacheConfig.secureCookies) {\n            cookieStr += \"Secure;\";\n        }\n        \n        document.cookie = cookieStr;\n    }\n\n    /**\n     * Get one item by key from cookies\n     * @param cookieName\n     */\n    getItemCookie(cookieName: string): string {\n        const name = `${encodeURIComponent(cookieName)}=`;\n        const cookieList = document.cookie.split(\";\");\n        for (let i: number = 0; i < cookieList.length; i++) {\n            let cookie = cookieList[i];\n            while (cookie.charAt(0) === \" \") {\n                cookie = cookie.substring(1);\n            }\n            if (cookie.indexOf(name) === 0) {\n                return decodeURIComponent(cookie.substring(name.length, cookie.length));\n            }\n        }\n        return \"\";\n    }\n\n    /**\n     * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\n     */\n    clearMsalCookies(): void {\n        const cookiePrefix = `${Constants.CACHE_PREFIX}.${this.clientId}`;\n        const cookieList = document.cookie.split(\";\");\n        cookieList.forEach((cookie: string): void => {\n            while (cookie.charAt(0) === \" \") {\n                // eslint-disable-next-line no-param-reassign\n                cookie = cookie.substring(1);\n            }\n            if (cookie.indexOf(cookiePrefix) === 0) {\n                const cookieKey = cookie.split(\"=\")[0];\n                this.clearItemCookie(cookieKey);\n            }\n        });\n    }\n\n    /**\n     * Clear an item in the cookies by key\n     * @param cookieName\n     */\n    clearItemCookie(cookieName: string): void {\n        this.setItemCookie(cookieName, \"\", -1);\n    }\n\n    /**\n     * Get cookie expiration time\n     * @param cookieLifeDays\n     */\n    getCookieExpirationTime(cookieLifeDays: number): string {\n        const today = new Date();\n        const expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);\n        return expr.toUTCString();\n    }\n\n    /**\n     * Gets the cache object referenced by the browser\n     */\n    getCache(): object {\n        return this.browserStorage;\n    }\n\n    /**\n     * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser\n     */\n    setCache(): void {\n        // sets nothing\n    }\n\n    /**\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\n     * @param key\n     * @param addInstanceId\n     */\n    generateCacheKey(key: string): string {\n        const generatedKey = this.validateAndParseJson(key);\n        if (!generatedKey) {\n            if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {\n                return key;\n            }\n            return `${Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\n        }\n\n        return JSON.stringify(key);\n    }\n\n    /**\n     * Create authorityKey to cache authority\n     * @param state\n     */\n    generateAuthorityKey(stateString: string): string {\n        const {\n            libraryState: {\n                id: stateId\n            }\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n\n        return this.generateCacheKey(`${TemporaryCacheKeys.AUTHORITY}.${stateId}`);\n    }\n\n    /**\n     * Create Nonce key to cache nonce\n     * @param state\n     */\n    generateNonceKey(stateString: string): string {\n        const {\n            libraryState: {\n                id: stateId\n            }\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n\n        return this.generateCacheKey(`${TemporaryCacheKeys.NONCE_IDTOKEN}.${stateId}`);\n    }\n\n    /**\n     * Creates full cache key for the request state\n     * @param stateString State string for the request\n     */\n    generateStateKey(stateString: string): string {\n        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n        const {\n            libraryState: {\n                id: stateId\n            }\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n        return this.generateCacheKey(`${TemporaryCacheKeys.REQUEST_STATE}.${stateId}`);\n    } \n\n    /**\n     * Gets the cached authority based on the cached state. Returns empty if no cached state found.\n     */\n    getCachedAuthority(cachedState: string): string | null {\n        const stateCacheKey = this.generateStateKey(cachedState);\n        const state = this.getTemporaryCache(stateCacheKey);\n        if (!state) {\n            return null;\n        }\n\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        return this.getTemporaryCache(authorityCacheKey);\n    }\n\n    /**\n     * Updates account, authority, and state in cache\n     * @param serverAuthenticationRequest\n     * @param account\n     */\n    updateCacheEntries(state: string, nonce: string, authorityInstance: string, loginHint: string, account: AccountInfo|null): void {\n        this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\n        // Cache the request state\n        const stateCacheKey = this.generateStateKey(state);\n        this.setTemporaryCache(stateCacheKey, state, false);\n\n        // Cache the nonce\n        const nonceCacheKey = this.generateNonceKey(state);\n        this.setTemporaryCache(nonceCacheKey, nonce, false);\n\n        // Cache authorityKey\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n\n        if (account) {\n            const ccsCredential: CcsCredential = {\n                credential: account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID\n            };\n            this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n        } else if (!StringUtils.isEmpty(loginHint)) {\n            const ccsCredential: CcsCredential = {\n                credential: loginHint,\n                type: CcsCredentialType.UPN\n            };\n            this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n        }\n    }\n\n    /**\n     * Reset all temporary cache items\n     * @param state\n     */\n    resetRequestCache(state: string): void {\n        this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\n        // check state and remove associated cache items\n        if (!StringUtils.isEmpty(state)) {\n            this.getKeys().forEach(key => {\n                if (key.indexOf(state) !== -1) {\n                    this.removeItem(key);\n                }\n            });\n        }\n\n        // delete generic interactive request parameters\n        if (state) {\n            this.removeItem(this.generateStateKey(state));\n            this.removeItem(this.generateNonceKey(state));\n            this.removeItem(this.generateAuthorityKey(state));\n        }\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID));\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));\n        this.setInteractionInProgress(false);\n    }\n\n    /**\n     * Removes temporary cache for the provided state\n     * @param stateString \n     */\n    cleanRequestByState(stateString: string): void {\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\n        // Interaction is completed - remove interaction status.\n        if (stateString) {\n            const stateKey = this.generateStateKey(stateString);\n            const cachedState = this.temporaryCacheStorage.getItem(stateKey);\n            this.logger.infoPii(`BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`);\n            this.resetRequestCache(cachedState || \"\");\n        }\n        this.clearMsalCookies();\n    }\n\n    /**\n     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\n     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\n     * @param interactionType \n     */\n    cleanRequestByInteractionType(interactionType: InteractionType): void {\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\");\n        // Loop through all keys to find state key\n        this.getKeys().forEach((key) => {\n            // If this key is not the state key, move on\n            if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\n                return;\n            }\n            \n            // Retrieve state value, return if not a valid value\n            const stateValue = this.temporaryCacheStorage.getItem(key);\n            if (!stateValue) {\n                return;\n            }\n            // Extract state and ensure it matches given InteractionType, then clean request cache\n            const parsedState = BrowserProtocolUtils.extractBrowserRequestState(this.cryptoImpl, stateValue);\n            if (parsedState && parsedState.interactionType === interactionType) {\n                this.logger.infoPii(`BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`);\n                this.resetRequestCache(stateValue);\n            }\n        });\n        this.clearMsalCookies();\n        this.setInteractionInProgress(false);\n    }\n\n    cacheCodeRequest(authCodeRequest: CommonAuthorizationCodeRequest, browserCrypto: ICrypto): void {\n        this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n\n        const encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));\n        this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\n    }\n\n    /**\n     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\n     */\n    getCachedRequest(state: string, browserCrypto: ICrypto): CommonAuthorizationCodeRequest {\n        this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\n        // Get token request from cache and parse as TokenExchangeParameters.\n        const encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);\n        if (!encodedTokenRequest) {\n            throw BrowserAuthError.createNoTokenRequestCacheError();\n        }\n\n        const parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest)) as CommonAuthorizationCodeRequest;\n        if (!parsedRequest) {\n            throw BrowserAuthError.createUnableToParseTokenRequestCacheError();\n        }\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n\n        // Get cached authority and use if no authority is cached with request.\n        if (StringUtils.isEmpty(parsedRequest.authority)) {\n            const authorityCacheKey: string = this.generateAuthorityKey(state);\n            const cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n            if (!cachedAuthority) {\n                throw BrowserAuthError.createNoCachedAuthorityError();\n            }\n            parsedRequest.authority = cachedAuthority;\n        }\n\n        return parsedRequest;\n    }\n\n    isInteractionInProgress(matchClientId?: boolean): boolean {\n        const clientId = this.getInteractionInProgress();\n\n        if (matchClientId) {\n            return clientId === this.clientId;\n        } else {\n            return !!clientId;\n        }\n    }\n\n    getInteractionInProgress(): string | null {\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        return this.getTemporaryCache(key, false);\n    }\n\n    setInteractionInProgress(inProgress: boolean): void {\n        // Ensure we don't overwrite interaction in progress for a different clientId\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        if (inProgress) {\n            if (this.getInteractionInProgress()) {\n                throw BrowserAuthError.createInteractionInProgressError();\n            } else {\n                // No interaction is in progress\n                this.setTemporaryCache(key, this.clientId, false);\n            }\n        } else if (!inProgress && this.getInteractionInProgress() === this.clientId) {\n            this.removeItem(key);\n        }\n    }\n\n    /**\n     * Returns username retrieved from ADAL or MSAL v1 idToken\n     */\n    getLegacyLoginHint(): string | null {\n        // Only check for adal/msal token if no SSO params are being used\n        const adalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ADAL_ID_TOKEN);\n        if (adalIdTokenString) {\n            this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\n            this.logger.verbose(\"Cached ADAL id token retrieved.\");\n        }\n\n        // Check for cached MSAL v1 id token\n        const msalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ID_TOKEN, true);\n        if (msalIdTokenString) {\n            this.removeItem(this.generateCacheKey(PersistentCacheKeys.ID_TOKEN));\n            this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\n        }\n\n        const cachedIdTokenString = msalIdTokenString || adalIdTokenString;\n        if (cachedIdTokenString) {\n            const cachedIdToken = new IdToken(cachedIdTokenString, this.cryptoImpl);\n            if (cachedIdToken.claims && cachedIdToken.claims.preferred_username) {\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\");\n                return cachedIdToken.claims.preferred_username;\n            }\n            else if (cachedIdToken.claims && cachedIdToken.claims.upn) {\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\");\n                return cachedIdToken.claims.upn;\n            }\n            else {\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\");\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Updates a credential's cache key if the current cache key is outdated\n     */\n    updateCredentialCacheKey(currentCacheKey: string, credential: ValidCredentialType): string {\n        const updatedCacheKey = credential.generateCredentialKey();\n\n        if (currentCacheKey !== updatedCacheKey) {\n            const cacheItem = this.getItem(currentCacheKey);\n            if (cacheItem) {\n                this.removeItem(currentCacheKey);\n                this.setItem(updatedCacheKey, cacheItem);\n                this.logger.verbose(`Updated an outdated ${credential.credentialType} cache key`);\n                return updatedCacheKey;\n            } else {\n                this.logger.error(`Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`);\n            }\n        }\n\n        return currentCacheKey;\n    }\n}\n\nexport const DEFAULT_BROWSER_CACHE_MANAGER = (clientId: string, logger: Logger): BrowserCacheManager => {\n    const cacheOptions = {\n        cacheLocation: BrowserCacheLocation.MemoryStorage,\n        storeAuthStateInCookie: false,\n        secureCookies: false\n    };\n    return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BrowserConfigurationAuthError } from \"../error/BrowserConfigurationAuthError\";\nimport { BrowserCacheLocation } from \"../utils/BrowserConstants\";\nimport { IWindowStorage } from \"./IWindowStorage\";\n\nexport class BrowserStorage implements IWindowStorage<string> {\n\n    private windowStorage: Storage;\n\n    constructor(cacheLocation: string) {\n        this.validateWindowStorage(cacheLocation);\n        this.windowStorage = window[cacheLocation];\n    }\n\n    private validateWindowStorage(cacheLocation: string): void {\n        if (cacheLocation !== BrowserCacheLocation.LocalStorage && cacheLocation !== BrowserCacheLocation.SessionStorage) {\n            throw BrowserConfigurationAuthError.createStorageNotSupportedError(cacheLocation);\n        }\n        const storageSupported = !!window[cacheLocation];\n        if (!storageSupported) {\n            throw BrowserConfigurationAuthError.createStorageNotSupportedError(cacheLocation);\n        }\n    }\n\n    getItem(key: string): string | null {\n        return this.windowStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        this.windowStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        this.windowStorage.removeItem(key);\n    }\n\n    getKeys(): string[] {\n        return Object.keys(this.windowStorage);\n    }\n\n    containsKey(key: string): boolean {\n        return this.windowStorage.hasOwnProperty(key);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"@azure/msal-common\";\n\n/**\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const BrowserConfigurationAuthErrorMessage = {\n    redirectUriNotSet: {\n        code: \"redirect_uri_empty\",\n        desc: \"A redirect URI is required for all calls, and none has been set.\"\n    },\n    postLogoutUriNotSet: {\n        code: \"post_logout_uri_empty\",\n        desc: \"A post logout redirect has not been set.\"\n    },\n    storageNotSupportedError: {\n        code: \"storage_not_supported\",\n        desc: \"Given storage configuration option was not supported.\"\n    },\n    noRedirectCallbacksSet: {\n        code: \"no_redirect_callbacks\",\n        desc: \"No redirect callbacks have been set. Please call setRedirectCallbacks() with the appropriate function arguments before continuing. \" +\n            \"More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics.\"\n    },\n    invalidCallbackObject: {\n        code: \"invalid_callback_object\",\n        desc: \"The object passed for the callback was invalid. \" +\n          \"More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics.\"\n    },\n    stubPcaInstanceCalled: {\n        code: \"stubbed_public_client_application_called\",\n        desc: \"Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors\"\n    },\n    inMemRedirectUnavailable: {\n        code: \"in_mem_redirect_unavailable\",\n        desc: \"Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true.\"\n    }\n};\n\n/**\n * Browser library error class thrown by the MSAL.js library for SPAs\n */\nexport class BrowserConfigurationAuthError extends AuthError {\n\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n        this.name = \"BrowserConfigurationAuthError\";\n\n        Object.setPrototypeOf(this, BrowserConfigurationAuthError.prototype);\n    }\n\n    /**\n     * Creates an error thrown when the redirect uri is empty (not set by caller)\n     */\n    static createRedirectUriEmptyError(): BrowserConfigurationAuthError {\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.redirectUriNotSet.code,\n            BrowserConfigurationAuthErrorMessage.redirectUriNotSet.desc);\n    }\n\n    /**\n     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\n     */\n    static createPostLogoutRedirectUriEmptyError(): BrowserConfigurationAuthError {\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.code,\n            BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.desc);\n    }\n\n    /**\n     * Creates error thrown when given storage location is not supported.\n     * @param givenStorageLocation \n     */\n    static createStorageNotSupportedError(givenStorageLocation: string): BrowserConfigurationAuthError {\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.storageNotSupportedError.code, `${BrowserConfigurationAuthErrorMessage.storageNotSupportedError.desc} Given Location: ${givenStorageLocation}`);\n    }\n\n    /**\n     * Creates error thrown when redirect callbacks are not set before calling loginRedirect() or acquireTokenRedirect().\n     */\n    static createRedirectCallbacksNotSetError(): BrowserConfigurationAuthError {\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.code, \n            BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.desc);\n    }\n\n    /**\n     * Creates error thrown when the stub instance of PublicClientApplication is called.\n     */\n    static createStubPcaInstanceCalledError(): BrowserConfigurationAuthError {\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.code,\n            BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.desc);\n    }\n\n    /*\n     * Create an error thrown when in-memory storage is used and storeAuthStateInCookie=false.\n     */\n    static createInMemoryRedirectUnavailableError(): BrowserConfigurationAuthError {\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.code, BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.desc);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { InteractionType } from \"./BrowserConstants\";\nimport { StringUtils, ClientAuthError, ICrypto, RequestStateObject, ProtocolUtils, ServerAuthorizationCodeResponse, UrlString } from \"@azure/msal-common\";\n\nexport type BrowserStateObject = {\n    interactionType: InteractionType\n};\n\nexport class BrowserProtocolUtils {\n\n    /**\n     * Extracts the BrowserStateObject from the state string.\n     * @param browserCrypto \n     * @param state \n     */\n    static extractBrowserRequestState(browserCrypto: ICrypto, state: string): BrowserStateObject | null {\n        if (StringUtils.isEmpty(state)) {\n            return null;\n        }\n\n        try {\n            const requestStateObj: RequestStateObject = ProtocolUtils.parseRequestState(browserCrypto, state);\n            return requestStateObj.libraryState.meta as BrowserStateObject;\n        } catch (e) {\n            throw ClientAuthError.createInvalidStateError(state, e);\n        }\n    }\n\n    /**\n     * Parses properties of server response from url hash\n     * @param locationHash Hash from url\n     */\n    static parseServerResponseFromHash(locationHash: string): ServerAuthorizationCodeResponse {\n        if (!locationHash) {\n            return {};\n        }\n        \n        const hashUrlString = new UrlString(locationHash);\n        return UrlString.getDeserializedHash(hashUrlString.getHash());\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { SystemOptions, LoggerOptions, INetworkModule, DEFAULT_SYSTEM_OPTIONS, Constants, ProtocolMode, LogLevel, StubbedNetworkModule, AzureCloudInstance, AzureCloudOptions } from \"@azure/msal-common\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\nimport { BrowserCacheLocation } from \"../utils/BrowserConstants\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { NavigationClient } from \"../navigation/NavigationClient\";\n\n// Default timeout for popup windows and iframes in milliseconds\nexport const DEFAULT_POPUP_TIMEOUT_MS = 60000;\nexport const DEFAULT_IFRAME_TIMEOUT_MS = 6000;\nexport const DEFAULT_REDIRECT_TIMEOUT_MS = 30000;\n\n/**\n * Use this to configure the auth options in the Configuration object\n *\n * - clientId                    - Client ID of your app registered with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview in Microsoft Identity Platform\n * - authority                   - You can configure a specific authority, defaults to \" \" or \"https://login.microsoftonline.com/common\"\n * - knownAuthorities            - An array of URIs that are known to be valid. Used in B2C scenarios.\n * - cloudDiscoveryMetadata      - A string containing the cloud discovery response. Used in AAD scenarios.\n * - redirectUri                 - The redirect URI where authentication responses can be received by your application. It must exactly match one of the redirect URIs registered in the Azure portal.\n * - postLogoutRedirectUri       - The redirect URI where the window navigates after a successful logout.\n * - navigateToLoginRequestUrl   - Boolean indicating whether to navigate to the original request URL after the auth server navigates to the redirect URL.\n * - clientCapabilities          - Array of capabilities which will be added to the claims.access_token.xms_cc request property on every network request.\n * - protocolMode                - Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\n */\nexport type BrowserAuthOptions = {\n    clientId: string;\n    authority?: string;\n    knownAuthorities?: Array<string>;\n    cloudDiscoveryMetadata?: string;\n    authorityMetadata?: string;\n    redirectUri?: string;\n    postLogoutRedirectUri?: string | null;\n    navigateToLoginRequestUrl?: boolean;\n    clientCapabilities?: Array<string>;\n    protocolMode?: ProtocolMode;\n    azureCloudOptions?: AzureCloudOptions;\n};\n\n/**\n * Use this to configure the below cache configuration options:\n *\n * - cacheLocation              - Used to specify the cacheLocation user wants to set. Valid values are \"localStorage\" and \"sessionStorage\"\n * - storeAuthStateInCookie     - If set, MSAL stores the auth request state required for validation of the auth flows in the browser cookies. By default this flag is set to false.\n * - secureCookies              - If set, MSAL sets the \"Secure\" flag on cookies so they can only be sent over HTTPS. By default this flag is set to false.\n */\nexport type CacheOptions = {\n    cacheLocation?: BrowserCacheLocation | string;\n    storeAuthStateInCookie?: boolean;\n    secureCookies?: boolean;\n};\n\n/**\n * Library Specific Options\n *\n * - tokenRenewalOffsetSeconds    - Sets the window of offset needed to renew the token before expiry\n * - loggerOptions                - Used to initialize the Logger object (See ClientConfiguration.ts)\n * - networkClient                - Network interface implementation\n * - windowHashTimeout            - Sets the timeout for waiting for a response hash in a popup. Will take precedence over loadFrameTimeout if both are set.\n * - iframeHashTimeout            - Sets the timeout for waiting for a response hash in an iframe. Will take precedence over loadFrameTimeout if both are set.\n * - loadFrameTimeout             - Sets the timeout for waiting for a response hash in an iframe or popup\n * - navigateFrameWait            - Maximum time the library should wait for a frame to load\n * - redirectNavigationTimeout    - Time to wait for redirection to occur before resolving promise\n * - asyncPopups                  - Sets whether popups are opened asynchronously. By default, this flag is set to false. When set to false, blank popups are opened before anything else happens. When set to true, popups are opened when making the network request.\n * - allowRedirectInIframe        - Flag to enable redirect opertaions when the app is rendered in an iframe (to support scenarios such as embedded B2C login).\n */\nexport type BrowserSystemOptions = SystemOptions & {\n    loggerOptions?: LoggerOptions;\n    networkClient?: INetworkModule;\n    navigationClient?: INavigationClient;\n    windowHashTimeout?: number;\n    iframeHashTimeout?: number;\n    loadFrameTimeout?: number;\n    navigateFrameWait?: number;\n    redirectNavigationTimeout?: number;\n    asyncPopups?: boolean;\n    allowRedirectInIframe?: boolean;\n};\n\n/**\n * Use the configuration object to configure MSAL and initialize the UserAgentApplication.\n *\n * This object allows you to configure important elements of MSAL functionality:\n * - auth: this is where you configure auth elements like clientID, authority used for authenticating against the Microsoft Identity Platform\n * - cache: this is where you configure cache location and whether to store cache in cookies\n * - system: this is where you can configure the network client, logger, token renewal offset\n */\nexport type Configuration = {\n    auth: BrowserAuthOptions,\n    cache?: CacheOptions,\n    system?: BrowserSystemOptions\n};\n\nexport type BrowserConfiguration = {\n    auth: Required<BrowserAuthOptions>,\n    cache: Required<CacheOptions>,\n    system: Required<BrowserSystemOptions>\n};\n\n/**\n * MSAL function that sets the default options when not explicitly configured from app developer\n *\n * @param auth\n * @param cache\n * @param system\n *\n * @returns Configuration object\n */\nexport function buildConfiguration({ auth: userInputAuth, cache: userInputCache, system: userInputSystem }: Configuration, isBrowserEnvironment: boolean): BrowserConfiguration {\n\n    // Default auth options for browser\n    const DEFAULT_AUTH_OPTIONS: Required<BrowserAuthOptions> = {\n        clientId: \"\",\n        authority: `${Constants.DEFAULT_AUTHORITY}`,\n        knownAuthorities: [],\n        cloudDiscoveryMetadata: \"\",\n        authorityMetadata: \"\",\n        redirectUri: \"\",\n        postLogoutRedirectUri: \"\",\n        navigateToLoginRequestUrl: true,\n        clientCapabilities: [],\n        protocolMode: ProtocolMode.AAD,\n        azureCloudOptions: {\n            azureCloudInstance: AzureCloudInstance.None,\n            tenant: \"\"\n        },\n    };\n\n    // Default cache options for browser\n    const DEFAULT_CACHE_OPTIONS: Required<CacheOptions> = {\n        cacheLocation: BrowserCacheLocation.SessionStorage,\n        storeAuthStateInCookie: false,\n        secureCookies: false\n    };\n\n    // Default logger options for browser\n    const DEFAULT_LOGGER_OPTIONS: LoggerOptions = {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        loggerCallback: (): void => {},\n        logLevel: LogLevel.Info,\n        piiLoggingEnabled: false\n    };\n\n    // Default system options for browser\n    const DEFAULT_BROWSER_SYSTEM_OPTIONS: Required<BrowserSystemOptions> = {\n        ...DEFAULT_SYSTEM_OPTIONS,\n        loggerOptions: DEFAULT_LOGGER_OPTIONS,\n        networkClient: isBrowserEnvironment ? BrowserUtils.getBrowserNetworkClient() : StubbedNetworkModule,\n        navigationClient: new NavigationClient(),\n        loadFrameTimeout: 0,\n        // If loadFrameTimeout is provided, use that as default.\n        windowHashTimeout: (userInputSystem && userInputSystem.loadFrameTimeout) || DEFAULT_POPUP_TIMEOUT_MS,\n        iframeHashTimeout: (userInputSystem && userInputSystem.loadFrameTimeout) || DEFAULT_IFRAME_TIMEOUT_MS,\n        navigateFrameWait: isBrowserEnvironment && BrowserUtils.detectIEOrEdge() ? 500 : 0,\n        redirectNavigationTimeout: DEFAULT_REDIRECT_TIMEOUT_MS,\n        asyncPopups: false,\n        allowRedirectInIframe: false\n    };\n\n    const overlayedConfig: BrowserConfiguration = {\n        auth: { ...DEFAULT_AUTH_OPTIONS, ...userInputAuth },\n        cache: { ...DEFAULT_CACHE_OPTIONS, ...userInputCache },\n        system: { ...DEFAULT_BROWSER_SYSTEM_OPTIONS, ...userInputSystem }\n    };\n    return overlayedConfig;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Constants, INetworkModule, UrlString } from \"@azure/msal-common\";\nimport { FetchClient } from \"../network/FetchClient\";\nimport { XhrClient } from \"../network/XhrClient\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { InteractionType, BrowserConstants } from \"./BrowserConstants\";\n\n/**\n * Utility class for browser specific functions\n */\nexport class BrowserUtils {\n\n    // #region Window Navigation and URL management\n\n    /**\n     * Clears hash from window url.\n     */\n    static clearHash(contentWindow: Window): void {\n        // Office.js sets history.replaceState to null\n        contentWindow.location.hash = Constants.EMPTY_STRING;\n        if (typeof contentWindow.history.replaceState === \"function\") {\n            // Full removes \"#\" from url\n            contentWindow.history.replaceState(null, Constants.EMPTY_STRING, `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\n        }\n    }\n\n    /**\n     * Replaces current hash with hash from provided url\n     */\n    static replaceHash(url: string): void {\n        const urlParts = url.split(\"#\");\n        urlParts.shift(); // Remove part before the hash\n        window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n    }\n\n    /**\n     * Returns boolean of whether the current window is in an iframe or not.\n     */\n    static isInIframe(): boolean {\n        return window.parent !== window;\n    }\n\n    /**\n     * Returns boolean of whether or not the current window is a popup opened by msal\n     */\n    static isInPopup(): boolean {\n        return typeof window !== \"undefined\" && !!window.opener && \n            window.opener !== window && \n            typeof window.name === \"string\" && \n            window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0;\n    }\n\n    // #endregion\n\n    /**\n     * Returns current window URL as redirect uri\n     */\n    static getCurrentUri(): string {\n        return window.location.href.split(\"?\")[0].split(\"#\")[0];\n    }\n\n    /**\n     * Gets the homepage url for the current window location.\n     */\n    static getHomepage(): string {\n        const currentUrl = new UrlString(window.location.href);\n        const urlComponents = currentUrl.getUrlComponents();\n        return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n    }\n\n    /**\n     * Returns best compatible network client object. \n     */\n    static getBrowserNetworkClient(): INetworkModule {\n        if (window.fetch && window.Headers) {\n            return new FetchClient();\n        } else {\n            return new XhrClient();\n        }\n    }\n\n    /**\n     * Throws error if we have completed an auth and are \n     * attempting another auth request inside an iframe.\n     */\n    static blockReloadInHiddenIframes(): void {\n        const isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\n        // return an error if called from the hidden iframe created by the msal js silent calls\n        if (isResponseHash && BrowserUtils.isInIframe()) {\n            throw BrowserAuthError.createBlockReloadInHiddenIframeError();\n        }\n    }\n\n    /**\n     * Block redirect operations in iframes unless explicitly allowed\n     * @param interactionType Interaction type for the request\n     * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\n     */\n    static blockRedirectInIframe(interactionType: InteractionType, allowRedirectInIframe: boolean): void {\n        const isIframedApp = BrowserUtils.isInIframe();\n        if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\n            // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n            throw BrowserAuthError.createRedirectInIframeError(isIframedApp);\n        }\n    }\n\n    /**\n     * Block redirectUri loaded in popup from calling AcquireToken APIs\n     */\n    static blockAcquireTokenInPopups(): void {\n        // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n        if (BrowserUtils.isInPopup()) {\n            throw BrowserAuthError.createBlockAcquireTokenInPopupsError();\n        }\n    }\n\n    /**\n     * Throws error if token requests are made in non-browser environment\n     * @param isBrowserEnvironment Flag indicating if environment is a browser.\n     */\n    static blockNonBrowserEnvironment(isBrowserEnvironment: boolean): void {\n        if (!isBrowserEnvironment) {\n            throw BrowserAuthError.createNonBrowserEnvironmentError();\n        }\n    }\n\n    /**\n     * Returns boolean of whether current browser is an Internet Explorer or Edge browser.\n     */\n    static detectIEOrEdge(): boolean {\n        const ua = window.navigator.userAgent;\n        const msie = ua.indexOf(\"MSIE \");\n        const msie11 = ua.indexOf(\"Trident/\");\n        const msedge = ua.indexOf(\"Edge/\");\n        const isIE = msie > 0 || msie11 > 0;\n        const isEdge = msedge > 0;\n        return isIE || isEdge;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule, NetworkRequestOptions, NetworkResponse } from \"@azure/msal-common\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\n\n/**\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n */\nexport class FetchClient implements INetworkModule {\n\n    /**\n     * Fetch Client for REST endpoints - Get request\n     * @param url \n     * @param headers \n     * @param body \n     */\n    async sendGetRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        let response;\n        try {\n            response = await fetch(url, {\n                method: HTTP_REQUEST_TYPE.GET,\n                headers: this.getFetchHeaders(options)\n            });\n        } catch (e) {\n            if (window.navigator.onLine) {\n                throw BrowserAuthError.createGetRequestFailedError(e, url);\n            } else {\n                throw BrowserAuthError.createNoNetworkConnectivityError();\n            }\n        }\n\n        try {\n            return {\n                headers: this.getHeaderDict(response.headers),\n                body: await response.json() as T,\n                status: response.status\n            };\n        } catch (e) {\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n        }\n    }\n\n    /**\n     * Fetch Client for REST endpoints - Post request\n     * @param url \n     * @param headers \n     * @param body \n     */\n    async sendPostRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        const reqBody = (options && options.body) || \"\";\n\n        let response;\n        try {\n            response = await fetch(url, {\n                method: HTTP_REQUEST_TYPE.POST,\n                headers: this.getFetchHeaders(options),\n                body: reqBody\n            });\n        } catch (e) {\n            if (window.navigator.onLine) {\n                throw BrowserAuthError.createPostRequestFailedError(e, url);\n            } else {\n                throw BrowserAuthError.createNoNetworkConnectivityError();\n            }\n        }\n\n        try {\n            return {\n                headers: this.getHeaderDict(response.headers),\n                body: await response.json() as T,\n                status: response.status\n            };\n        } catch (e) {\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n        }\n    }\n\n    /**\n     * Get Fetch API Headers object from string map\n     * @param inputHeaders \n     */\n    private getFetchHeaders(options?: NetworkRequestOptions): Headers {\n        const headers = new Headers();\n        if (!(options && options.headers)) {\n            return headers;\n        }\n        const optionsHeaders = options.headers;\n        Object.keys(optionsHeaders).forEach((key) => {\n            headers.append(key, optionsHeaders[key]);\n        });\n        return headers;\n    }\n\n    private getHeaderDict(headers: Headers): Record<string, string> {\n        const headerDict: Record<string, string> = {};\n        headers.forEach((value: string, key: string) => {\n            headerDict[key] = value;\n        });\n        return headerDict;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule, NetworkRequestOptions, NetworkResponse } from \"@azure/msal-common\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\n\n/**\n * This client implements the XMLHttpRequest class to send GET and POST requests.\n */\nexport class XhrClient implements INetworkModule {\n\n    /**\n     * XhrClient for REST endpoints - Get request\n     * @param url \n     * @param headers \n     * @param body \n     */\n    async sendGetRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options);\n    }\n\n    /**\n     * XhrClient for REST endpoints - Post request\n     * @param url \n     * @param headers \n     * @param body \n     */\n    async sendPostRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options);\n    }\n\n    /**\n     * Helper for XhrClient requests.\n     * @param url \n     * @param method \n     * @param options \n     */\n    private sendRequestAsync<T>(url: string, method: HTTP_REQUEST_TYPE, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        return new Promise<NetworkResponse<T>>((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(method, url, /* async: */ true);\n            this.setXhrHeaders(xhr, options);\n            xhr.onload = (): void => {\n                if (xhr.status < 200 || xhr.status >= 300) {\n                    if (method === HTTP_REQUEST_TYPE.POST) {\n                        reject(BrowserAuthError.createPostRequestFailedError(`Failed with status ${xhr.status}`, url));\n                    } else {\n                        reject(BrowserAuthError.createGetRequestFailedError(`Failed with status ${xhr.status}`, url));\n                    }\n                }\n                try {\n                    const jsonResponse = JSON.parse(xhr.responseText) as T;\n                    const networkResponse: NetworkResponse<T> = {\n                        headers: this.getHeaderDict(xhr),\n                        body: jsonResponse,\n                        status: xhr.status\n                    };\n                    resolve(networkResponse);\n                } catch (e) {\n                    reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\n                }\n            };\n\n            xhr.onerror = (): void => {\n                if (window.navigator.onLine) {\n                    if (method === HTTP_REQUEST_TYPE.POST) {\n                        reject(BrowserAuthError.createPostRequestFailedError(`Failed with status ${xhr.status}`, url));\n                    } else {\n                        reject(BrowserAuthError.createGetRequestFailedError(`Failed with status ${xhr.status}`, url));\n                    }\n                } else {\n                    reject(BrowserAuthError.createNoNetworkConnectivityError());\n                }\n            };\n\n            if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\n                xhr.send(options.body);\n            } else if (method === HTTP_REQUEST_TYPE.GET) {\n                xhr.send();\n            } else {\n                throw BrowserAuthError.createHttpMethodNotImplementedError(method);\n            }\n        });\n    }\n\n    /**\n     * Helper to set XHR headers for request.\n     * @param xhr \n     * @param options \n     */\n    private setXhrHeaders(xhr: XMLHttpRequest, options?: NetworkRequestOptions): void {\n        if (options && options.headers) {\n            const headers = options.headers;\n            Object.keys(headers).forEach((key: string) => {\n                xhr.setRequestHeader(key, headers[key]);\n            });\n        }\n    }\n\n    /**\n     * Gets a string map of the headers received in the response.\n     * \n     * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\n     * @param xhr \n     */\n    private getHeaderDict(xhr: XMLHttpRequest): Record<string, string> {\n        const headerString = xhr.getAllResponseHeaders();\n        const headerArr = headerString.trim().split(/[\\r\\n]+/);\n        const headerDict: Record<string, string> = {};\n        headerArr.forEach((value: string) => {\n            const parts = value.split(\": \");\n            const headerName = parts.shift();\n            const headerVal = parts.join(\": \");\n            if (headerName && headerVal) {\n                headerDict[headerName] = headerVal;\n            }\n        });\n\n        return headerDict;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INavigationClient } from \"./INavigationClient\";\nimport { NavigationOptions } from \"./NavigationOptions\";\n\nexport class NavigationClient implements INavigationClient {\n    /**\n     * Navigates to other pages within the same web application\n     * @param url \n     * @param options \n     */\n    navigateInternal(url: string, options: NavigationOptions): Promise<boolean>{\n        return NavigationClient.defaultNavigateWindow(url, options);\n    }\n\n    /**\n     * Navigates to other pages outside the web application i.e. the Identity Provider\n     * @param url \n     * @param options \n     */\n    navigateExternal(url: string, options: NavigationOptions): Promise<boolean> {\n        return NavigationClient.defaultNavigateWindow(url, options);\n    }\n\n    /**\n     * Default navigation implementation invoked by the internal and external functions\n     * @param url \n     * @param options \n     */\n    private static defaultNavigateWindow(url: string, options: NavigationOptions): Promise<boolean> {\n        if (options.noHistory) {\n            window.location.replace(url);\n        } else {\n            window.location.assign(url);\n        }\n\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve(true);\n            }, options.timeout);\n        });\n    }\n}\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-browser\";\nexport const version = \"2.22.1\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport enum EventType {\n    ACCOUNT_ADDED = \"msal:accountAdded\",\n    ACCOUNT_REMOVED = \"msal:accountRemoved\",\n    LOGIN_START = \"msal:loginStart\",\n    LOGIN_SUCCESS = \"msal:loginSuccess\",\n    LOGIN_FAILURE = \"msal:loginFailure\",\n    ACQUIRE_TOKEN_START = \"msal:acquireTokenStart\",\n    ACQUIRE_TOKEN_SUCCESS = \"msal:acquireTokenSuccess\",\n    ACQUIRE_TOKEN_FAILURE = \"msal:acquireTokenFailure\",\n    ACQUIRE_TOKEN_NETWORK_START = \"msal:acquireTokenFromNetworkStart\",\n    SSO_SILENT_START = \"msal:ssoSilentStart\",\n    SSO_SILENT_SUCCESS = \"msal:ssoSilentSuccess\",\n    SSO_SILENT_FAILURE = \"msal:ssoSilentFailure\",\n    ACQUIRE_TOKEN_BY_CODE_START = \"msal:acquireTokenByCodeStart\",\n    ACQUIRE_TOKEN_BY_CODE_SUCCESS = \"msal:acquireTokenByCodeSuccess\",\n    ACQUIRE_TOKEN_BY_CODE_FAILURE = \"msal:acquireTokenByCodeFailure\",\n    HANDLE_REDIRECT_START = \"msal:handleRedirectStart\",\n    HANDLE_REDIRECT_END = \"msal:handleRedirectEnd\",\n    POPUP_OPENED = \"msal:popupOpened\",\n    LOGOUT_START = \"msal:logoutStart\",\n    LOGOUT_SUCCESS = \"msal:logoutSuccess\",\n    LOGOUT_FAILURE = \"msal:logoutFailure\",\n    LOGOUT_END = \"msal:logoutEnd\"\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, Logger, AccountEntity, CacheManager } from \"@azure/msal-common\";\nimport { InteractionType } from \"../utils/BrowserConstants\";\nimport { EventCallbackFunction, EventError, EventMessage, EventPayload } from \"./EventMessage\";\nimport { EventType } from \"./EventType\";\n\nexport class EventHandler {\n    // Callback for subscribing to events\n    private eventCallbacks: Map<string, EventCallbackFunction>;\n    private logger: Logger;\n    private browserCrypto: ICrypto;\n    private listeningToStorageEvents: boolean;\n\n    constructor(logger: Logger, browserCrypto: ICrypto) {\n        this.eventCallbacks = new Map();\n        this.logger = logger;\n        this.browserCrypto = browserCrypto;\n        this.listeningToStorageEvents = false;\n        this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        if (typeof window !== \"undefined\") {\n            const callbackId = this.browserCrypto.createNewGuid();\n            this.eventCallbacks.set(callbackId, callback);\n            this.logger.verbose(`Event callback registered with id: ${callbackId}`);\n    \n            return callbackId;\n        }\n        \n        return null;\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventCallbacks.delete(callbackId);\n        this.logger.verbose(`Event callback ${callbackId} removed.`);\n    }\n\n    /**\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    enableAccountStorageEvents(): void {\n        if (typeof window === \"undefined\") {\n            return;\n        }\n\n        if (!this.listeningToStorageEvents) {\n            this.logger.verbose(\"Adding account storage listener.\");\n            this.listeningToStorageEvents = true;\n            window.addEventListener(\"storage\", this.handleAccountCacheChange);\n        } else {\n            this.logger.verbose(\"Account storage listener already registered.\");\n        }\n    }\n\n    /**\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    disableAccountStorageEvents(): void {\n        if (typeof window === \"undefined\") {\n            return;\n        }\n\n        if (this.listeningToStorageEvents) {\n            this.logger.verbose(\"Removing account storage listener.\");\n            window.removeEventListener(\"storage\", this.handleAccountCacheChange);\n            this.listeningToStorageEvents = false;\n        } else {\n            this.logger.verbose(\"No account storage listener registered.\");\n        }\n    }\n\n    /**\n     * Emits events by calling callback with event message\n     * @param eventType\n     * @param interactionType\n     * @param payload\n     * @param error\n     */\n    emitEvent(eventType: EventType, interactionType?: InteractionType, payload?: EventPayload, error?: EventError): void {\n        if (typeof window !== \"undefined\") {\n            const message: EventMessage = {\n                eventType: eventType,\n                interactionType: interactionType || null,\n                payload: payload || null,\n                error: error || null,\n                timestamp: Date.now()\n            };\n\n            this.logger.info(`Emitting event: ${eventType}`);\n\n            this.eventCallbacks.forEach((callback: EventCallbackFunction, callbackId: string) => {\n                this.logger.verbose(`Emitting event to callback ${callbackId}: ${eventType}`);\n                callback.apply(null, [message]);\n            });\n        }\n    }\n\n    /**\n     * Emit account added/removed events when cached accounts are changed in a different tab or frame\n     */\n    private handleAccountCacheChange(e: StorageEvent): void {\n        try {\n            const cacheValue = e.newValue || e.oldValue;\n            if (!cacheValue) {\n                return;\n            }\n            const parsedValue = JSON.parse(cacheValue);\n            if (typeof parsedValue !== \"object\" || !AccountEntity.isAccountEntity(parsedValue)) {\n                return;\n            }\n            const accountEntity = CacheManager.toObject<AccountEntity>(new AccountEntity(), parsedValue);\n            const accountInfo = accountEntity.getAccountInfo();\n            if (!e.oldValue && e.newValue) {\n                this.logger.info(\"Account was added to cache in a different window\");\n                this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\n            } else if (!e.newValue && e.oldValue) {\n                this.logger.info(\"Account was removed from cache in a different window\");\n                this.emitEvent(EventType.ACCOUNT_REMOVED, undefined, accountInfo);\n            }\n        } catch (e) {\n            return;\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, CommonAuthorizationCodeRequest, AuthorizationCodeClient, ThrottlingUtils, CommonEndSessionRequest, UrlString, AuthError, OIDC_DEFAULT_SCOPES } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { PopupWindowAttributes, PopupUtils } from \"../utils/PopupUtils\";\nimport { EventType } from \"../event/EventType\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { PopupHandler, PopupParams } from \"../interaction_handler/PopupHandler\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\nimport { PopupRequest } from \"../request/PopupRequest\";\n\nexport class PopupClient extends StandardInteractionClient {\n    /**\n     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\n     * @param request\n     */\n    acquireToken(request: PopupRequest): Promise<AuthenticationResult> {\n        try {\n            const popupName = PopupUtils.generatePopupName(this.config.auth.clientId, request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority, this.correlationId);\n            const popupWindowAttributes = request.popupWindowAttributes || {};\n\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true, acquiring token\");\n                // Passes on popup position and dimensions if in request\n                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);\n            } else {\n                // asyncPopups flag is set to false. Opens popup before acquiring token.\n                this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\n                const popup = PopupUtils.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes, this.logger);\n                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);\n            }\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\n     * @param logoutRequest\n     */\n    logout(logoutRequest?: EndSessionPopupRequest): Promise<void> {\n        try {\n            this.logger.verbose(\"logoutPopup called\");\n            const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n\n            const popupName = PopupUtils.generateLogoutPopupName(this.config.auth.clientId, validLogoutRequest);\n            const authority = logoutRequest && logoutRequest.authority;\n            const mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\n            const popupWindowAttributes = logoutRequest?.popupWindowAttributes || {};\n\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true\");\n                // Passes on popup position and dimensions if in request\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\n            } else {\n                // asyncPopups flag is set to false. Opens popup before logging out.\n                this.logger.verbose(\"asyncPopup set to false, opening popup\");\n                const popup = PopupUtils.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes, this.logger);\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\n            }\n        } catch (e) {\n            // Since this function is synchronous we need to reject\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Helper which obtains an access_token for your API via opening a popup window in the user's browser\n     * @param validRequest\n     * @param popupName\n     * @param popup\n     * @param popupWindowAttributes\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    protected async acquireTokenPopupAsync(request: PopupRequest, popupName: string, popupWindowAttributes: PopupWindowAttributes, popup?: Window|null): Promise<AuthenticationResult> {\n        this.logger.verbose(\"acquireTokenPopupAsync called\");\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\n        const validRequest = await this.initializeAuthorizationRequest(request, InteractionType.Popup);\n        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || \"\", validRequest.account || null);\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl(validRequest);\n\n            // Create popup interaction handler.\n            const interactionHandler = new PopupHandler(authClient, this.browserStorage, authCodeRequest, this.logger);\n\n            // Show the UI once the url has been created. Get the window handle for the popup.\n            const popupParameters: PopupParams = {\n                popup,\n                popupName,\n                popupWindowAttributes\n            };\n            const popupWindow: Window = interactionHandler.initiateAuthRequest(navigateUrl, popupParameters);\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {popupWindow}, null);\n\n            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n            const hash = await interactionHandler.monitorPopupForHash(popupWindow);\n            const state = this.validateAndExtractStateFromHash(hash, InteractionType.Popup, validRequest.correlationId);\n\n            // Remove throttle if it exists\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\n\n            // Handle response from hash string.\n            const result = await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\n\n            return result;\n        } catch (e) {\n            if (popup) {\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\n                popup.close();\n            }\n\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     *\n     * @param validRequest\n     * @param popupName\n     * @param requestAuthority\n     * @param popup\n     * @param mainWindowRedirectUri\n     * @param popupWindowAttributes\n     */\n    protected async logoutPopupAsync(validRequest: CommonEndSessionRequest, popupName: string, popupWindowAttributes: PopupWindowAttributes, requestAuthority?: string, popup?: Window|null, mainWindowRedirectUri?: string): Promise<void> {\n        this.logger.verbose(\"logoutPopupAsync called\");\n        this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\n\n        try {\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validRequest.account);\n\n            // Initialize the client\n            const authClient = await this.createAuthCodeClient(serverTelemetryManager, requestAuthority);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create logout string and navigate user window to logout.\n            const logoutUri: string = authClient.getLogoutUri(validRequest);\n\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\n\n            const popupUtils = new PopupUtils(this.browserStorage, this.logger);\n            // Open the popup window to requestUrl.\n            const popupWindow = popupUtils.openPopup(logoutUri, {popupName, popupWindowAttributes, popup});\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {popupWindow}, null);\n\n            try {\n                // Don't care if this throws an error (User Cancelled)\n                await popupUtils.monitorPopupForSameOrigin(popupWindow);\n                this.logger.verbose(\"Popup successfully redirected to postLogoutRedirectUri\");\n            } catch (e) {\n                this.logger.verbose(`Error occurred while monitoring popup for same origin. Session on server may remain active. Error: ${e}`);\n            }\n\n            popupUtils.cleanPopup(popupWindow);\n\n            if (mainWindowRedirectUri) {\n                const navigationOptions: NavigationOptions = {\n                    apiId: ApiId.logoutPopup,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: false\n                };\n                const absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\n\n                this.logger.verbose(\"Redirecting main window to url specified in the request\");\n                this.logger.verbosePii(`Redirecting main window to: ${absoluteUrl}`);\n                this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n            } else {\n                this.logger.verbose(\"No main window navigation requested\");\n            }\n        } catch (e) {\n            if (popup) {\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\n                popup.close();\n            }\n\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n\n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n\n        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, Logger, ServerTelemetryManager, CommonAuthorizationCodeRequest, Constants, AuthorizationCodeClient, ClientConfiguration, AuthorityOptions, Authority, AuthorityFactory, ServerAuthorizationCodeResponse, UrlString, CommonEndSessionRequest, ProtocolUtils, ResponseMode, StringUtils, IdTokenClaims, AccountInfo, AzureCloudOptions } from \"@azure/msal-common\";\nimport { BaseInteractionClient } from \"./BaseInteractionClient\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { BrowserConstants, InteractionType } from \"../utils/BrowserConstants\";\nimport { version } from \"../packageMetadata\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { BrowserProtocolUtils, BrowserStateObject } from \"../utils/BrowserProtocolUtils\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\n\n/**\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\n */\nexport abstract class StandardInteractionClient extends BaseInteractionClient {\n    protected navigationClient: INavigationClient;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, correlationId);\n        this.navigationClient = navigationClient;\n    }\n\n    /**\n     * Generates an auth code request tied to the url request.\n     * @param request\n     */\n    protected async initializeAuthorizationCodeRequest(request: AuthorizationUrlRequest): Promise<CommonAuthorizationCodeRequest> {\n        this.logger.verbose(\"initializeAuthorizationRequest called\", request.correlationId);\n        const generatedPkceParams = await this.browserCrypto.generatePkceCodes();\n\n        const authCodeRequest: CommonAuthorizationCodeRequest = {\n            ...request,\n            redirectUri: request.redirectUri,\n            code: \"\",\n            codeVerifier: generatedPkceParams.verifier\n        };\n\n        request.codeChallenge = generatedPkceParams.challenge;\n        request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n\n        return authCodeRequest;\n    }\n\n    /**\n     * Initializer for the logout request.\n     * @param logoutRequest\n     */\n    protected initializeLogoutRequest(logoutRequest?: EndSessionRequest): CommonEndSessionRequest {\n        this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest?.correlationId);\n\n        const validLogoutRequest: CommonEndSessionRequest = {\n            correlationId: this.browserCrypto.createNewGuid(),\n            ...logoutRequest\n        };\n\n        /**\n         * Set logout_hint to be login_hint from ID Token Claims if present\n         * and logoutHint attribute wasn't manually set in logout request\n         */\n        if (logoutRequest) {\n            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n            if (!logoutRequest.logoutHint) {\n                if(logoutRequest.account) {\n                    const logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\n                    if (logoutHint) {\n                        this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\n                        validLogoutRequest.logoutHint = logoutHint;\n                    }\n                } else {\n                    this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\n                }\n            } else {\n                this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\n            }\n        } else {\n            this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\n        }\n\n        /*\n         * Only set redirect uri if logout request isn't provided or the set uri isn't null.\n         * Otherwise, use passed uri, config, or current page.\n         */\n        if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n            } else if (this.config.auth.postLogoutRedirectUri === null) {\n                this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n            } else if (this.config.auth.postLogoutRedirectUri) {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n            } else {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());\n            }\n        } else {\n            this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n        }\n\n        return validLogoutRequest;\n    }\n\n    /**\n     * Parses login_hint ID Token Claim out of AccountInfo object to be used as\n     * logout_hint in end session request.\n     * @param account\n     */\n    protected getLogoutHintFromIdTokenClaims(account: AccountInfo): string | null {\n        const idTokenClaims: IdTokenClaims | undefined = account.idTokenClaims;\n        if (idTokenClaims) {\n            if (idTokenClaims.login_hint) {\n                return idTokenClaims.login_hint;\n            } else {\n                this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\n            }\n        } else {\n            this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates an Authorization Code Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createAuthCodeClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, requestAzureCloudOptions?: AzureCloudOptions): Promise<AuthorizationCodeClient> {\n        // Create auth module.\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions);\n        return new AuthorizationCodeClient(clientConfig);\n    }\n\n    /**\n     * Creates a Client Configuration object with the given request authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param requestAuthority\n     * @param requestCorrelationId\n     */\n    protected async getClientConfiguration(serverTelemetryManager: ServerTelemetryManager, requestAuthority?: string, requestAzureCloudOptions?: AzureCloudOptions): Promise<ClientConfiguration> {\n        this.logger.verbose(\"getClientConfiguration called\");\n        const discoveredAuthority = await this.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions);\n\n        return {\n            authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities\n            },\n            systemOptions: {\n                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\n                preventCorsPreflight: true\n            },\n            loggerOptions: {\n                loggerCallback: this.config.system.loggerOptions.loggerCallback,\n                piiLoggingEnabled: this.config.system.loggerOptions.piiLoggingEnabled,\n                logLevel: this.config.system.loggerOptions.logLevel,\n                correlationId: this.correlationId\n            },\n            cryptoInterface: this.browserCrypto,\n            networkInterface: this.networkClient,\n            storageInterface: this.browserStorage,\n            serverTelemetryManager: serverTelemetryManager,\n            libraryInfo: {\n                sku: BrowserConstants.MSAL_SKU,\n                version: version,\n                cpu: \"\",\n                os: \"\"\n            }\n        };\n    }\n\n    /**\n     * @param hash\n     * @param interactionType\n     */\n    protected validateAndExtractStateFromHash(hash: string, interactionType: InteractionType, requestCorrelationId?: string): string {\n        this.logger.verbose(\"validateAndExtractStateFromHash called\", requestCorrelationId);\n        // Deserialize hash fragment response parameters.\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\n        if (!serverParams.state) {\n            throw BrowserAuthError.createHashDoesNotContainStateError();\n        }\n\n        const platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);\n        if (!platformStateObj) {\n            throw BrowserAuthError.createUnableToParseStateError();\n        }\n\n        if (platformStateObj.interactionType !== interactionType) {\n            throw BrowserAuthError.createStateInteractionTypeMismatchError();\n        }\n\n        this.logger.verbose(\"Returning state from hash\", requestCorrelationId);\n        return serverParams.state;\n    }\n\n    /**\n     * Used to get a discovered version of the default authority.\n     * @param requestAuthority\n     * @param requestCorrelationId\n     */\n    protected async getDiscoveredAuthority(requestAuthority?: string, requestAzureCloudOptions?: AzureCloudOptions): Promise<Authority> {\n        this.logger.verbose(\"getDiscoveredAuthority called\");\n        const authorityOptions: AuthorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n        };\n\n        // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\n        const userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;\n\n        // fall back to the authority from config\n        const builtAuthority = Authority.generateAuthority( userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);\n        this.logger.verbose(\"Creating discovered authority with configured authority\");\n        return await AuthorityFactory.createDiscoveredInstance(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions);\n    }\n\n    /**\n     * Helper to initialize required request parameters for interactive APIs and ssoSilent()\n     * @param request\n     * @param interactionType\n     */\n    protected async initializeAuthorizationRequest(request: RedirectRequest|PopupRequest|SsoSilentRequest, interactionType: InteractionType): Promise<AuthorizationUrlRequest> {\n        this.logger.verbose(\"initializeAuthorizationRequest called\");\n        const redirectUri = this.getRedirectUri(request.redirectUri);\n        const browserState: BrowserStateObject = {\n            interactionType: interactionType\n        };\n        const state = ProtocolUtils.setRequestState(\n            this.browserCrypto,\n            (request && request.state)|| Constants.EMPTY_STRING,\n            browserState\n        );\n\n        const validatedRequest: AuthorizationUrlRequest = {\n            ...await this.initializeBaseRequest(request),\n            redirectUri: redirectUri,\n            state: state,\n            nonce: request.nonce || this.browserCrypto.createNewGuid(),\n            responseMode: ResponseMode.FRAGMENT\n        };\n\n        const account = request.account || this.browserStorage.getActiveAccount();\n        if (account) {\n            this.logger.verbose(\"Setting validated request account\");\n            this.logger.verbosePii(`Setting validated request account: ${account}`);\n            validatedRequest.account = account;\n        }\n\n        // Check for ADAL/MSAL v1 SSO\n        if (StringUtils.isEmpty(validatedRequest.loginHint) && !account) {\n            const legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n            if (legacyLoginHint) {\n                validatedRequest.loginHint = legacyLoginHint;\n            }\n        }\n\n        return validatedRequest;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, INetworkModule, Logger, AuthenticationResult, AccountInfo, AccountEntity, BaseAuthRequest, AuthenticationScheme, UrlString, ServerTelemetryManager, ServerTelemetryRequest, ClientConfigurationError, StringUtils } from \"@azure/msal-common\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { version } from \"../packageMetadata\";\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\n\nexport abstract class BaseInteractionClient {\n\n    protected config: BrowserConfiguration;\n    protected browserStorage: BrowserCacheManager;\n    protected browserCrypto: ICrypto;\n    protected networkClient: INetworkModule;\n    protected logger: Logger;\n    protected eventHandler: EventHandler;\n    protected correlationId: string;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, correlationId?: string) {\n        this.config = config;\n        this.browserStorage = storageImpl;\n        this.browserCrypto = browserCrypto;\n        this.networkClient = this.config.system.networkClient;\n        this.eventHandler = eventHandler;\n        this.correlationId = correlationId || this.browserCrypto.createNewGuid();\n        this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\n    }\n\n    abstract acquireToken(request: RedirectRequest|PopupRequest|SsoSilentRequest): Promise<AuthenticationResult|void>;\n\n    abstract logout(request: EndSessionRequest): Promise<void>;\n\n    protected async clearCacheOnLogout(account?: AccountInfo| null): Promise<void> {\n        if (account) {\n            if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\n                this.logger.verbose(\"Setting active account to null\");\n                this.browserStorage.setActiveAccount(null);\n            }\n            // Clear given account.\n            try {\n                await this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account));\n                this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n            } catch (error) {\n                this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n            }\n        } else {\n            try {\n                // Clear all accounts and tokens\n                await this.browserStorage.clear();\n                // Clear any stray keys from IndexedDB\n                await this.browserCrypto.clearKeystore();\n                this.logger.verbose(\"No account provided in logout request, clearing all cache items.\");\n            } catch(e) {\n                this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n            }\n        }\n    }\n\n    /**\n     * Initializer function for all request APIs\n     * @param request\n     */\n    protected async initializeBaseRequest(request: Partial<BaseAuthRequest>): Promise<BaseAuthRequest> {\n        this.logger.verbose(\"Initializing BaseAuthRequest\");\n        const authority = request.authority || this.config.auth.authority;\n\n        const scopes = [...((request && request.scopes) || [])];\n\n        const validatedRequest: BaseAuthRequest = {\n            ...request,\n            correlationId: this.correlationId,\n            authority,\n            scopes\n        };\n\n        // Set authenticationScheme to BEARER if not explicitly set in the request\n        if (!validatedRequest.authenticationScheme) {\n            validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n            this.logger.verbose(\"Authentication Scheme wasn't explicitly set in request, defaulting to \\\"Bearer\\\" request\");\n        } else {\n            if (validatedRequest.authenticationScheme === AuthenticationScheme.SSH) {\n                if (!request.sshJwk) {\n                    throw ClientConfigurationError.createMissingSshJwkError();\n                }\n                if(!request.sshKid) {\n                    throw ClientConfigurationError.createMissingSshKidError();\n                }\n            }\n            this.logger.verbose(`Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`);\n        }\n\n        // Set requested claims hash if claims were requested\n        if (request.claims && !StringUtils.isEmpty(request.claims)) {\n            validatedRequest.requestedClaimsHash = await this.browserCrypto.hashString(request.claims);\n        } \n\n        return validatedRequest;\n    }\n\n    /**\n     *\n     * Use to get the redirect uri configured in MSAL or null.\n     * @param requestRedirectUri\n     * @returns Redirect URL\n     *\n     */\n    getRedirectUri(requestRedirectUri?: string): string {\n        this.logger.verbose(\"getRedirectUri called\");\n        const redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();\n        return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());\n    }\n\n    /**\n     *\n     * @param apiId\n     * @param correlationId\n     * @param forceRefresh\n     */\n    protected initializeServerTelemetryManager(apiId: number, forceRefresh?: boolean): ServerTelemetryManager {\n        this.logger.verbose(\"initializeServerTelemetryManager called\");\n        const telemetryPayload: ServerTelemetryRequest = {\n            clientId: this.config.auth.clientId,\n            correlationId: this.correlationId,\n            apiId: apiId,\n            forceRefresh: forceRefresh || false,\n            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n            wrapperVer: this.browserStorage.getWrapperMetadata()[1]\n        };\n\n        return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CommonEndSessionRequest, Constants, Logger, StringUtils } from \"@azure/msal-common\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { PopupParams } from \"../interaction_handler/PopupHandler\";\nimport { BrowserConstants, InteractionType } from \"./BrowserConstants\";\n\n/**\n * Popup configurations for setting dimensions and position of popup window\n */\nexport type PopupWindowAttributes = {\n    popupSize?: PopupSize,\n    popupPosition?: PopupPosition\n};\n\nexport type PopupSize = {\n    height: number;\n    width: number;\n};\n\nexport type PopupPosition = {\n    top: number;\n    left: number;\n};\n\nexport class PopupUtils {\n    private browserStorage: BrowserCacheManager;\n    private logger: Logger;\n    private currentWindow: Window|undefined;\n\n    constructor(storageImpl: BrowserCacheManager, logger: Logger) {\n        this.browserStorage = storageImpl;\n        this.logger = logger;\n\n        // Properly sets this reference for the unload event.\n        this.unloadWindow = this.unloadWindow.bind(this);\n    }\n\n    /**\n     * @hidden\n     *\n     * Configures popup window for login.\n     *\n     * @param urlNavigate\n     * @param title\n     * @param popUpWidth\n     * @param popUpHeight\n     * @param popupWindowAttributes\n     * @ignore\n     * @hidden\n     */\n    openPopup(urlNavigate: string, popupParams: PopupParams): Window {\n        try {\n            let popupWindow;\n            // Popup window passed in, setting url to navigate to\n            if (popupParams.popup) {\n                popupWindow = popupParams.popup;\n                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);\n                popupWindow.location.assign(urlNavigate);\n            } else if (typeof popupParams.popup === \"undefined\") {\n                // Popup will be undefined if it was not passed in\n                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);\n                popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes, this.logger);\n            }\n\n            // Popup will be null if popups are blocked\n            if (!popupWindow) {\n                throw BrowserAuthError.createEmptyWindowCreatedError();\n            }\n            if (popupWindow.focus) {\n                popupWindow.focus();\n            }\n            this.currentWindow = popupWindow;\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\n\n            return popupWindow;\n        } catch (e) {\n            this.logger.error(\"error opening popup \" + e.message);\n            this.browserStorage.setInteractionInProgress(false);\n            throw BrowserAuthError.createPopupWindowError(e.toString());\n        }\n    }\n\n    /**\n     * Helper function to set popup window dimensions and position\n     * @param urlNavigate \n     * @param popupName \n     * @param popupWindowAttributes \n     * @returns \n     */\n    static openSizedPopup(urlNavigate: string, popupName: string, popupWindowAttributes: PopupWindowAttributes, logger: Logger): Window|null {\n        /**\n         * adding winLeft and winTop to account for dual monitor\n         * using screenLeft and screenTop for IE8 and earlier\n         */\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\n        /**\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\n         * using document.documentElement.clientWidth for IE8 and earlier\n         */\n        const winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        const winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\n        let width = popupWindowAttributes.popupSize?.width;\n        let height = popupWindowAttributes.popupSize?.height;\n        let top = popupWindowAttributes.popupPosition?.top;\n        let left = popupWindowAttributes.popupPosition?.left;\n\n        if (!width || width < 0 || width > winWidth) {\n            logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n            width = BrowserConstants.POPUP_WIDTH;\n        }\n\n        if (!height || height < 0 || height > winHeight) {\n            logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n            height = BrowserConstants.POPUP_HEIGHT;\n        }\n\n        if (!top || top < 0 || top > winHeight) {\n            logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n            top = Math.max(0, ((winHeight / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);\n        }\n\n        if (!left || left < 0 || left > winWidth) {\n            logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n            left = Math.max(0, ((winWidth / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);\n        }\n\n        return window.open(urlNavigate, popupName, `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`);\n    }\n\n    /**\n     * Event callback to unload main window.\n     */\n    unloadWindow(e: Event): void {\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n        if (this.currentWindow) {\n            this.currentWindow.close();\n        }\n        // Guarantees browser unload will happen, so no other errors will be thrown.\n        e.preventDefault();\n    }\n\n    /**\n     * Closes popup, removes any state vars created during popup calls.\n     * @param popupWindow\n     */\n    cleanPopup(popupWindow?: Window): void {\n        if (popupWindow) {\n            // Close window.\n            popupWindow.close();\n        }\n        // Remove window unload function\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\n\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n    }\n\n    /**\n     * Monitors a window until it loads a url with the same origin.\n     * @param popupWindow - window that is being monitored\n     */\n    monitorPopupForSameOrigin(popupWindow: Window): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const intervalId = setInterval(() => {\n                if (popupWindow.closed) {\n                    // Window is closed\n                    this.cleanPopup();\n                    clearInterval(intervalId);\n                    reject(BrowserAuthError.createUserCancelledError());\n                    return;\n                }\n\n                let href: string = Constants.EMPTY_STRING;\n                try {\n                    /*\n                     * Will throw if cross origin,\n                     * which should be caught and ignored\n                     * since we need the interval to keep running while on STS UI.\n                     */\n                    href = popupWindow.location.href;\n                } catch (e) {}\n\n                // Don't process blank pages or cross domain\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n                    return;\n                }\n\n                clearInterval(intervalId);\n                resolve();\n            }, BrowserConstants.POLL_INTERVAL_MS);\n        });\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request\n     * @param clientId\n     * @param request\n     */\n    static generatePopupName(clientId: string, scopes: Array<string>, authority: string, correlationId: string): string {\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${clientId}.${scopes.join(\"-\")}.${authority}.${correlationId}`;\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request for logouts\n     * @param clientId \n     * @param request \n     */\n    static generateLogoutPopupName(clientId: string, request: CommonEndSessionRequest): string {\n        const homeAccountId = request.account && request.account.homeAccountId;\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${clientId}.${homeAccountId}.${request.correlationId}`;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { UrlString, StringUtils, CommonAuthorizationCodeRequest, AuthorizationCodeClient, Logger } from \"@azure/msal-common\";\nimport { InteractionHandler, InteractionParams } from \"./InteractionHandler\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { PopupWindowAttributes, PopupUtils } from \"../utils/PopupUtils\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\n\nexport type PopupParams = InteractionParams & {\n    popup?: Window|null;\n    popupName: string;\n    popupWindowAttributes: PopupWindowAttributes\n};\n\n/**\n * This class implements the interaction handler base class for browsers. It is written specifically for handling\n * popup window scenarios. It includes functions for monitoring the popup window for a hash.\n */\nexport class PopupHandler extends InteractionHandler {\n    private popupUtils: PopupUtils;\n\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger) {\n        super(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger);\n\n        // Properly sets this reference for the unload event.\n        this.popupUtils = new PopupUtils(storageImpl, browserRequestLogger);\n    }\n\n    /**\n     * Opens a popup window with given request Url.\n     * @param requestUrl\n     */\n    initiateAuthRequest(requestUrl: string, params: PopupParams): Window {\n        // Check that request url is not empty.\n        if (!StringUtils.isEmpty(requestUrl)) {\n            this.browserRequestLogger.infoPii(`Navigate to: ${requestUrl}`);\n            // Open the popup window to requestUrl.\n            return this.popupUtils.openPopup(requestUrl, params);\n        } else {\n            // Throw error if request URL is empty.\n            this.browserRequestLogger.error(\"Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n        }\n    }\n\n    /**\n     * Monitors a window until it loads a url with a known hash, or hits a specified timeout.\n     * @param popupWindow - window that is being monitored\n     * @param timeout - milliseconds until timeout\n     */\n    monitorPopupForHash(popupWindow: Window): Promise<string> {\n        return this.popupUtils.monitorPopupForSameOrigin(popupWindow).then(() => {\n            const contentHash = popupWindow.location.hash;\n            BrowserUtils.clearHash(popupWindow);\n            this.popupUtils.cleanPopup(popupWindow);\n\n            if (!contentHash) {\n                throw BrowserAuthError.createEmptyHashError(popupWindow.location.href);\n            }\n\n            if (UrlString.hashContainsKnownProperties(contentHash)) {\n                return contentHash;\n            } else {\n                throw BrowserAuthError.createHashDoesNotContainKnownPropertiesError();\n            }\n        }\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorizationCodePayload , StringUtils, CommonAuthorizationCodeRequest, AuthenticationResult, AuthorizationCodeClient, AuthorityFactory, Authority, INetworkModule, ClientAuthError, CcsCredential, Logger } from \"@azure/msal-common\";\n\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { TemporaryCacheKeys } from \"../utils/BrowserConstants\";\n\nexport type InteractionParams = {};\n\n/**\n * Abstract class which defines operations for a browser interaction handling class.\n */\nexport abstract class InteractionHandler {\n\n    protected authModule: AuthorizationCodeClient;\n    protected browserStorage: BrowserCacheManager;\n    protected authCodeRequest: CommonAuthorizationCodeRequest;\n    protected browserRequestLogger: Logger;\n\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger) {\n        this.authModule = authCodeModule;\n        this.browserStorage = storageImpl;\n        this.authCodeRequest = authCodeRequest;\n        this.browserRequestLogger = browserRequestLogger;\n    }\n\n    /**\n     * Function to enable user interaction.\n     * @param requestUrl\n     */\n    abstract initiateAuthRequest(requestUrl: string, params: InteractionParams): Window | Promise<HTMLIFrameElement> | Promise<void>;\n\n    /**\n     * Function to handle response parameters from hash.\n     * @param locationHash\n     */\n    async handleCodeResponseFromHash(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule): Promise<AuthenticationResult> {\n        this.browserRequestLogger.verbose(\"InteractionHandler.handleCodeResponse called\");\n        // Check that location hash isn't empty.\n        if (StringUtils.isEmpty(locationHash)) {\n            throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n        const authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n\n        return this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule);\n    }\n\n    /**\n     * Process auth code response from AAD\n     * @param authCodeResponse \n     * @param state \n     * @param authority \n     * @param networkModule \n     * @returns \n     */\n    async handleCodeResponseFromServer(authCodeResponse: AuthorizationCodePayload, state: string, authority: Authority, networkModule: INetworkModule, validateNonce: boolean = true): Promise<AuthenticationResult> {\n        this.browserRequestLogger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n        \n        // Get cached items\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\n        }\n\n        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n        if (validateNonce) {\n            authCodeResponse.nonce = cachedNonce || undefined;\n        }\n        \n        authCodeResponse.state = requestState;\n\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const cachedCcsCred = this.checkCcsCredentials();\n            if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n            }\n        }\n\n        // Acquire token with retrieved code.\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\n        this.browserStorage.cleanRequestByState(state);\n        return tokenResponse;\n    }\n\n    /**\n     * Updates authority based on cloudInstanceHostname\n     * @param cloudInstanceHostname \n     * @param authority \n     * @param networkModule \n     */\n    protected async updateTokenEndpointAuthority(cloudInstanceHostname: string, authority: Authority, networkModule: INetworkModule): Promise<void> {\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${authority.tenant}/`;\n        const cloudInstanceAuthority = await AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options);\n        this.authModule.updateAuthority(cloudInstanceAuthority);\n    }\n\n    /**\n     * Looks up ccs creds in the cache\n     */\n    protected checkCcsCredentials(): CcsCredential | null {\n        // Look up ccs credential in temp cache\n        const cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n        if (cachedCcsCred) {\n            try {\n                return JSON.parse(cachedCcsCred) as CcsCredential;\n            } catch (e) {\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\n                this.authModule.logger.errorPii(`Cache credential could not be parsed: ${cachedCcsCred}`);\n            }\n        }\n        return null;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, CommonAuthorizationCodeRequest, AuthorizationCodeClient, UrlString, AuthError, ServerTelemetryManager } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { ApiId, InteractionType, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\nimport { RedirectHandler } from \"../interaction_handler/RedirectHandler\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { EventType } from \"../event/EventType\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\n\nexport class RedirectClient extends StandardInteractionClient {\n    /**\n     * Redirects the page to the /authorize endpoint of the IDP\n     * @param request\n     */\n    async acquireToken(request: RedirectRequest): Promise<void> {\n        const validRequest = await this.initializeAuthorizationRequest(request, InteractionType.Redirect);\n        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || \"\", validRequest.account || null);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\n\n        const handleBackButton = (event: PageTransitionEvent) => {\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            if (event.persisted) {\n                this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\n                this.browserStorage.cleanRequestByState(validRequest.state);\n            }\n        };\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create redirect interaction handler.\n            const interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto);\n\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl(validRequest);\n\n            const redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n            this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);\n\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            window.addEventListener(\"pageshow\", handleBackButton);\n\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return await interactionHandler.initiateAuthRequest(navigateUrl, {\n                navigationClient: this.navigationClient,\n                redirectTimeout: this.config.system.redirectNavigationTimeout,\n                redirectStartPage: redirectStartPage,\n                onRedirectNavigate: request.onRedirectNavigate\n            });\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            window.removeEventListener(\"pageshow\", handleBackButton);\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Checks if navigateToLoginRequestUrl is set, and:\n     * - if true, performs logic to cache and navigate\n     * - if false, handles hash string and parses response\n     * @param hash\n     */\n    async handleRedirectPromise(hash?: string): Promise<AuthenticationResult | null> {\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\n        try {\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n                this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n                return null;\n            }\n\n            const responseHash = this.getRedirectResponseHash(hash || window.location.hash);\n            if (!responseHash) {\n                // Not a recognized server response hash or hash not associated with a redirect request\n                this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\n                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n                return null;\n            }\n\n            let state: string;\n            try {\n                state = this.validateAndExtractStateFromHash(responseHash, InteractionType.Redirect);\n                this.logger.verbose(\"State extracted from hash\");\n            } catch (e) {\n                this.logger.info(`handleRedirectPromise was unable to extract state due to: ${e}`);\n                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n                return null;\n            }\n\n            // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated\n            const loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || \"\";\n            const loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\n            const currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\n\n            if (loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl) {\n                // We are on the page we need to navigate to - handle hash\n                this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\n                const handleHashResult = await this.handleHash(responseHash, state, serverTelemetryManager);\n\n                if (loginRequestUrl.indexOf(\"#\") > -1) {\n                    // Replace current hash with non-msal hash, if present\n                    BrowserUtils.replaceHash(loginRequestUrl);\n                }\n\n                return handleHashResult;\n            } else if (!this.config.auth.navigateToLoginRequestUrl) {\n                this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\n                return this.handleHash(responseHash, state, serverTelemetryManager);\n            } else if (!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe) {\n                /*\n                 * Returned from authority using redirect - need to perform navigation before processing response\n                 * Cache the hash to be retrieved after the next redirect\n                 */\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\n                const navigationOptions: NavigationOptions = {\n                    apiId: ApiId.handleRedirectPromise,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: true\n                };\n\n                /**\n                 * Default behavior is to redirect to the start page and not process the hash now.\n                 * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.\n                 */\n                let processHashOnRedirect: boolean = true;\n                if (!loginRequestUrl || loginRequestUrl === \"null\") {\n                    // Redirect to home page if login request url is null (real null or the string null)\n                    const homepage = BrowserUtils.getHomepage();\n                    // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n                    this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n                    this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(homepage, navigationOptions);\n                } else {\n                    // Navigate to page that initiated the redirect request\n                    this.logger.verbose(`Navigating to loginRequestUrl: ${loginRequestUrl}`);\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions);\n                }\n\n                // If navigateInternal implementation returns false, handle the hash now\n                if (!processHashOnRedirect) {\n                    return this.handleHash(responseHash, state, serverTelemetryManager);\n                }\n            }\n\n            return null;\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n            throw e;\n        }\n    }\n\n    /**\n     * Gets the response hash for a redirect request\n     * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\n     * @param hash\n     */\n    protected getRedirectResponseHash(hash: string): string | null {\n        this.logger.verbose(\"getRedirectResponseHash called\");\n        // Get current location hash from window or cache.\n        const isResponseHash: boolean = UrlString.hashContainsKnownProperties(hash);\n\n        if (isResponseHash) {\n            BrowserUtils.clearHash(window);\n            this.logger.verbose(\"Hash contains known properties, returning response hash\");\n            return hash;\n        }\n\n        const cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n\n        this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n        return cachedHash;\n    }\n\n    /**\n     * Checks if hash exists and handles in window.\n     * @param hash\n     * @param state\n     */\n    protected async handleHash(hash: string, state: string, serverTelemetryManager: ServerTelemetryManager): Promise<AuthenticationResult> {\n        const cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\n        this.logger.verbose(\"handleHash called, retrieved cached request\");\n\n        // Hash contains known properties - handle and return in callback\n        const currentAuthority = this.browserStorage.getCachedAuthority(state);\n        if (!currentAuthority) {\n            throw BrowserAuthError.createNoCachedAuthorityError();\n        }\n\n        const authClient = await this.createAuthCodeClient(serverTelemetryManager, currentAuthority);\n        this.logger.verbose(\"Auth code client created\");\n        const interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto);\n        return await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient, this.config.auth.clientId);\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param logoutRequest\n     */\n    async logout(logoutRequest?: EndSessionRequest): Promise<void> {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\n\n        try {\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest);\n\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validLogoutRequest.account);\n\n            const navigationOptions: NavigationOptions = {\n                apiId: ApiId.logout,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false\n            };\n            const authClient = await this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create logout string and navigate user window to logout.\n            const logoutUri: string = authClient.getLogoutUri(validLogoutRequest);\n\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n            // Check if onRedirectNavigate is implemented, and invoke it if so\n            if (logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\") {\n                const navigate = logoutRequest.onRedirectNavigate(logoutUri);\n\n                if (navigate !== false) {\n                    this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\n                    await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n                    return;\n                } else {\n                    this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n                }\n            } else {\n                await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n                return;\n            }\n        } catch(e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            throw e;\n        }\n\n        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n    }\n\n    /**\n     * Use to get the redirectStartPage either from request or use current window\n     * @param requestStartPage\n     */\n    protected getRedirectStartPage(requestStartPage?: string): string {\n        const redirectStartPage = requestStartPage || window.location.href;\n        return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorizationCodeClient, StringUtils, CommonAuthorizationCodeRequest, ICrypto, AuthenticationResult, ThrottlingUtils, Authority, INetworkModule, ClientAuthError, Logger } from \"@azure/msal-common\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { ApiId, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { InteractionHandler, InteractionParams } from \"./InteractionHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\n\nexport type RedirectParams = InteractionParams & {\n    navigationClient: INavigationClient;\n    redirectTimeout: number;\n    redirectStartPage: string;\n    onRedirectNavigate?: (url: string) => void | boolean;\n};\n\nexport class RedirectHandler extends InteractionHandler {\n\n    private browserCrypto: ICrypto;\n\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger, browserCrypto: ICrypto) {\n        super(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger);\n        this.browserCrypto = browserCrypto;\n    }\n\n    /**\n     * Redirects window to given URL.\n     * @param urlNavigate\n     */\n    async initiateAuthRequest(requestUrl: string, params: RedirectParams): Promise<void> {\n        this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n        // Navigate if valid URL\n        if (!StringUtils.isEmpty(requestUrl)) {\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n            if (params.redirectStartPage) {\n                this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            }\n\n            // Set interaction status in the library.\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\n            this.browserRequestLogger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`);\n            const navigationOptions: NavigationOptions = {\n                apiId: ApiId.acquireTokenRedirect,\n                timeout: params.redirectTimeout,\n                noHistory: false\n            };\n            \n            // If onRedirectNavigate is implemented, invoke it and provide requestUrl\n            if (typeof params.onRedirectNavigate === \"function\") {\n                this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n                const navigate = params.onRedirectNavigate(requestUrl);\n\n                // Returning false from onRedirectNavigate will stop navigation\n                if (navigate !== false) {\n                    this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n                    await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                    return;\n                } else {\n                    this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n                    return;\n                }\n            } else {\n                // Navigate window to request URL\n                this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n                await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                return;\n            }\n        } else {\n            // Throw error if request URL is empty.\n            this.browserRequestLogger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n        }\n    }\n\n    /**\n     * Handle authorization code response in the window.\n     * @param hash\n     */\n    async handleCodeResponseFromHash(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule, clientId?: string): Promise<AuthenticationResult> {\n        this.browserRequestLogger.verbose(\"RedirectHandler.handleCodeResponse called\");\n\n        // Check that location hash isn't empty.\n        if (StringUtils.isEmpty(locationHash)) {\n            throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n        const authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n\n        // Get cached items\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\n        }\n\n        authCodeResponse.nonce = cachedNonce || undefined;\n        authCodeResponse.state = requestState;\n\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const cachedCcsCred = this.checkCcsCredentials();\n            if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n            }\n        }\n\n        // Remove throttle if it exists\n        if (clientId) {\n            ThrottlingUtils.removeThrottle(this.browserStorage, clientId, this.authCodeRequest);\n        }\n\n        // Acquire token with retrieved code.\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\n\n        this.browserStorage.cleanRequestByState(state);\n        return tokenResponse;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, ICrypto, Logger, StringUtils, PromptValue, CommonAuthorizationCodeRequest, AuthorizationCodeClient, AuthError } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\n\nexport class SilentIframeClient extends StandardInteractionClient {\n    protected apiId: ApiId;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId);\n        this.apiId = apiId;\n    }\n\n    /**\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none\n     * @param request\n     */\n    async acquireToken(request: SsoSilentRequest): Promise<AuthenticationResult> {\n        this.logger.verbose(\"acquireTokenByIframe called\");\n        // Check that we have some SSO data\n        if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\n            this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n        }\n\n        // Check that prompt is set to none, throw error if it is set to anything else.\n        if (request.prompt && request.prompt !== PromptValue.NONE) {\n            throw BrowserAuthError.createSilentPromptValueError(request.prompt);\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest({\n            ...request,\n            prompt: PromptValue.NONE\n        }, InteractionType.Silent);\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || \"\", silentRequest.account || null);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(silentRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create authorize request url\n            const navigateUrl = await authClient.getAuthCodeUrl(silentRequest);\n\n            return await this.silentTokenHelper(navigateUrl, authCodeRequest, authClient, this.logger);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n\n    /**\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\n     * @param navigateUrl\n     * @param userRequestScopes\n     */\n    protected async silentTokenHelper(navigateUrl: string, authCodeRequest: CommonAuthorizationCodeRequest, authClient: AuthorizationCodeClient, browserRequestLogger: Logger): Promise<AuthenticationResult> {\n        // Create silent handler\n        const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, browserRequestLogger, this.config.system.navigateFrameWait);\n        // Get the frame handle for the silent request\n        const msalFrame = await silentHandler.initiateAuthRequest(navigateUrl);\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const hash = await silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout);\n        const state = this.validateAndExtractStateFromHash(hash, InteractionType.Silent, authCodeRequest.correlationId);\n\n        // Handle response from hash string\n        return silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { UrlString, StringUtils, CommonAuthorizationCodeRequest, AuthorizationCodeClient, Constants, Logger } from \"@azure/msal-common\";\nimport { InteractionHandler } from \"./InteractionHandler\";\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { DEFAULT_IFRAME_TIMEOUT_MS } from \"../config/Configuration\";\n\nexport class SilentHandler extends InteractionHandler {\n\n    private navigateFrameWait: number;\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger, navigateFrameWait: number) {\n        super(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger);\n        this.navigateFrameWait = navigateFrameWait;\n    }\n\n    /**\n     * Creates a hidden iframe to given URL using user-requested scopes as an id.\n     * @param urlNavigate\n     * @param userRequestScopes\n     */\n    async initiateAuthRequest(requestUrl: string): Promise<HTMLIFrameElement> {\n        if (StringUtils.isEmpty(requestUrl)) {\n            // Throw error if request URL is empty.\n            this.browserRequestLogger.info(\"Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n        }\n\n        return this.navigateFrameWait ? await this.loadFrame(requestUrl) : this.loadFrameSync(requestUrl);\n    }\n\n    /**\n     * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\n     * @param iframe\n     * @param timeout\n     */\n    monitorIframeForHash(iframe: HTMLIFrameElement, timeout: number): Promise<string> {\n        return new Promise((resolve, reject) => {\n            if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {\n                this.browserRequestLogger.warning(`system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${DEFAULT_IFRAME_TIMEOUT_MS}ms). This may result in timeouts.`);\n            }\n\n            /*\n             * Polling for iframes can be purely timing based,\n             * since we don't need to account for interaction.\n             */\n            const nowMark = window.performance.now();\n            const timeoutMark = nowMark + timeout;\n\n            const intervalId = setInterval(() => {\n                if (window.performance.now() > timeoutMark) {\n                    this.removeHiddenIframe(iframe);\n                    clearInterval(intervalId);\n                    reject(BrowserAuthError.createMonitorIframeTimeoutError());\n                    return;\n                }\n\n                let href: string = Constants.EMPTY_STRING;\n                const contentWindow = iframe.contentWindow;\n                try {\n                    /*\n                     * Will throw if cross origin,\n                     * which should be caught and ignored\n                     * since we need the interval to keep running while on STS UI.\n                     */\n                    href = contentWindow ? contentWindow.location.href : Constants.EMPTY_STRING;\n                } catch (e) {}\n\n                if (StringUtils.isEmpty(href)) {\n                    return;\n                }\n\n                const contentHash = contentWindow ? contentWindow.location.hash: Constants.EMPTY_STRING;\n                if (UrlString.hashContainsKnownProperties(contentHash)) {\n                    // Success case\n                    this.removeHiddenIframe(iframe);\n                    clearInterval(intervalId);\n                    resolve(contentHash);\n                    return;\n                }\n            }, BrowserConstants.POLL_INTERVAL_MS);\n        });\n    }\n\n    /**\n     * @hidden\n     * Loads iframe with authorization endpoint URL\n     * @ignore\n     */\n    private loadFrame(urlNavigate: string): Promise<HTMLIFrameElement> {\n        /*\n         * This trick overcomes iframe navigation in IE\n         * IE does not load the page consistently in iframe\n         */\n\n        return new Promise((resolve, reject) => {\n            const frameHandle = this.createHiddenIframe();\n\n            setTimeout(() => {\n                if (!frameHandle) {\n                    reject(\"Unable to load iframe\");\n                    return;\n                }\n\n                frameHandle.src = urlNavigate;\n\n                resolve(frameHandle);\n            }, this.navigateFrameWait);\n        });\n    }\n\n    /**\n     * @hidden\n     * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\n     * @param urlNavigate\n     * @param frameName\n     * @param logger\n     */\n    private loadFrameSync(urlNavigate: string): HTMLIFrameElement{\n        const frameHandle = this.createHiddenIframe();\n\n        frameHandle.src = urlNavigate;\n\n        return frameHandle;\n    }\n\n    /**\n     * @hidden\n     * Creates a new hidden iframe or gets an existing one for silent token renewal.\n     * @ignore\n     */\n    private createHiddenIframe(): HTMLIFrameElement {\n        const authFrame = document.createElement(\"iframe\");\n\n        authFrame.style.visibility = \"hidden\";\n        authFrame.style.position = \"absolute\";\n        authFrame.style.width = authFrame.style.height = \"0\";\n        authFrame.style.border = \"0\";\n        authFrame.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\n        document.getElementsByTagName(\"body\")[0].appendChild(authFrame);\n\n        return authFrame;\n    }\n\n    /**\n     * @hidden\n     * Removes a hidden iframe from the page.\n     * @ignore\n     */\n    private removeHiddenIframe(iframe: HTMLIFrameElement): void {\n        if (document.body === iframe.parentNode) {\n            document.body.removeChild(iframe);\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { CommonSilentFlowRequest, AuthenticationResult, ServerTelemetryManager, RefreshTokenClient, AuthError, AzureCloudOptions } from \"@azure/msal-common\";\nimport { ApiId } from \"../utils/BrowserConstants\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\n\nexport class SilentRefreshClient extends StandardInteractionClient {\n    /**\n     * Exchanges the refresh token for new tokens\n     * @param request\n     */\n    async acquireToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        const silentRequest: CommonSilentFlowRequest = {\n            ...request,\n            ...await this.initializeBaseRequest(request)\n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n\n        const refreshTokenClient = await this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n        this.logger.verbose(\"Refresh token client created\");\n\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n        return refreshTokenClient.acquireTokenByRefreshToken(silentRequest).catch(e => {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        });\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n\n    /**\n     * Creates a Refresh Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createRefreshTokenClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, azureCloudOptions?: AzureCloudOptions): Promise<RefreshTokenClient> {\n        // Create auth module.\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\n        return new RefreshTokenClient(clientConfig);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccessTokenEntity, ICrypto, IdTokenEntity, Logger, ScopeSet, Authority, AuthorityOptions, ExternalTokenResponse, AccountEntity, AuthToken } from \"@azure/msal-common\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { BrowserCacheManager } from \"./BrowserCacheManager\";\nimport { ITokenCache } from \"./ITokenCache\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\n\nexport type LoadTokenOptions = {\n    clientInfo?: string,\n    extendedExpiresOn?: number\n};\n\n/**\n * Token cache manager\n */\nexport class TokenCache implements ITokenCache {\n    // Flag to indicate if in browser environment\n    public isBrowserEnvironment: boolean;\n    // Input configuration by developer/user\n    protected config: BrowserConfiguration;\n    // Browser cache storage\n    private storage: BrowserCacheManager;\n    // Logger\n    private logger: Logger;\n    // Crypto class\n    private cryptoObj: ICrypto;\n\n    constructor(configuration: BrowserConfiguration, storage: BrowserCacheManager, logger: Logger, cryptoObj: ICrypto) {\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\n        this.config = configuration;\n        this.storage = storage;\n        this.logger = logger;\n        this.cryptoObj = cryptoObj;\n    }\n\n    // Move getAllAccounts here and cache utility APIs\n\n    /**\n     * API to load tokens to msal-browser cache.\n     * @param request\n     * @param response\n     * @param options\n     */\n    loadExternalTokens(request: SilentRequest, response: ExternalTokenResponse, options: LoadTokenOptions): void {\n        this.logger.info(\"TokenCache - loadExternalTokens called\");\n\n        if (!response.id_token) {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n        }\n\n        if (request.account) {\n            this.loadIdToken(response.id_token, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n            this.loadAccessToken(request, response, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n        } else if (request.authority) {\n\n            const authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n            const authorityOptions: AuthorityOptions = {\n                protocolMode: this.config.auth.protocolMode,\n                knownAuthorities: this.config.auth.knownAuthorities,\n                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n                authorityMetadata: this.config.auth.authorityMetadata,\n            };\n            const authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions);\n\n            // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n            if (options.clientInfo) {\n                this.logger.trace(\"TokenCache - homeAccountId from options\");\n                this.loadIdToken(response.id_token, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n                this.loadAccessToken(request, response, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n            } else if (response.client_info) {\n                this.logger.trace(\"TokenCache - homeAccountId from response\");\n                this.loadIdToken(response.id_token, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n                this.loadAccessToken(request, response, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n            } else {\n                throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n            }\n        } else {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n        }\n    }\n\n    /**\n     * Helper function to load id tokens to msal-browser cache\n     * @param idToken\n     * @param homeAccountId\n     * @param environment\n     * @param tenantId\n     * @param options\n     */\n    private loadIdToken(idToken: string, homeAccountId: string, environment: string, tenantId: string, options: LoadTokenOptions): void {\n\n        const idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken, this.config.auth.clientId, tenantId);\n        const idAuthToken = new AuthToken(idToken, this.cryptoObj);\n        const accountEntity = options.clientInfo ?\n            AccountEntity.createAccount(options.clientInfo, homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment) :\n            AccountEntity.createGenericAccount(homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment);\n\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading id token\");\n            this.storage.setAccount(accountEntity);\n            this.storage.setIdTokenCredential(idTokenEntity);\n        } else {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n        }\n    }\n\n    /**\n     * Helper function to load access tokens to msal-browser cache\n     * @param request\n     * @param response\n     * @param options\n     * @param homeAccountId\n     * @param environment\n     * @param tenantId\n     * @returns\n     */\n    private loadAccessToken(request: SilentRequest, response: ExternalTokenResponse, homeAccountId: string, environment: string, tenantId: string, options: LoadTokenOptions): void {\n\n        if (!response.access_token) {\n            this.logger.verbose(\"TokenCache - No access token provided for caching\");\n            return;\n        }\n\n        if (!response.expires_in) {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n        }\n\n        if (!options.extendedExpiresOn) {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n        }\n\n        const scopes = new ScopeSet(request.scopes).printScopes();\n        const expiresOn = response.expires_in;\n        const extendedExpiresOn = options.extendedExpiresOn;\n\n        const accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading access token\");\n            this.storage.setAccessTokenCredential(accessTokenEntity);\n        } else {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, ICrypto, Logger, CommonAuthorizationCodeRequest, AuthError } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { HybridSpaAuthorizationCodeClient } from \"./HybridSpaAuthorizationCodeClient\";\n\nexport class SilentAuthCodeClient extends StandardInteractionClient {\n    private apiId: ApiId;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId);\n        this.apiId = apiId;\n    }\n    \n    /**\n     * Acquires a token silently by redeeming an authorization code against the /token endpoint\n     * @param request \n     */\n    async acquireToken(request: AuthorizationCodeRequest): Promise<AuthenticationResult> {\n        this.logger.trace(\"SilentAuthCodeClient.acquireToken called\");\n\n        // Auth code payload is required\n        if (!request.code) {\n            throw BrowserAuthError.createAuthCodeRequiredError();\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest(request, InteractionType.Silent);\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || \"\", silentRequest.account || null);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n\n        try {\n\n            // Create auth code request (PKCE not needed)\n            const authCodeRequest: CommonAuthorizationCodeRequest = {\n                ...silentRequest,\n                code: request.code\n            };\n\n            // Initialize the client\n            const clientConfig = await this.getClientConfiguration(serverTelemetryManager, silentRequest.authority);\n            const authClient: HybridSpaAuthorizationCodeClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create silent handler\n            const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system.navigateFrameWait);\n\n            // Handle auth code parameters from request\n            return silentHandler.handleCodeResponseFromServer(\n                {\n                    code: request.code,\n                    msgraph_host: request.msGraphHost,\n                    cloud_graph_host_name: request.cloudGraphHostName,\n                    cloud_instance_host_name: request.cloudInstanceHostName\n                },\n                silentRequest.state, \n                authClient.authority, \n                this.networkClient,\n                false\n            );\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorizationCodeClient, ClientConfiguration } from \"@azure/msal-common\";\n\nexport class HybridSpaAuthorizationCodeClient extends AuthorizationCodeClient {\n    constructor(config: ClientConfiguration) {\n        super(config);\n        this.includeRedirectUri = false;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { CommonSilentFlowRequest, AuthenticationResult, SilentFlowClient, ServerTelemetryManager, AccountInfo, AzureCloudOptions} from \"@azure/msal-common\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { EventType } from \"../event/EventType\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\n\nexport class SilentCacheClient extends StandardInteractionClient {\n    /**\n     * Returns unexpired tokens from the cache, if available\n     * @param silentRequest\n     */\n    async acquireToken(silentRequest: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        // Telemetry manager only used to increment cacheHits here\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n\n        const silentAuthClient = await this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n        this.logger.verbose(\"Silent auth client created\");\n\n        try {\n            const cachedToken = await silentAuthClient.acquireCachedToken(silentRequest);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, cachedToken);\n            return cachedToken;\n        } catch (error) {\n            if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code) {\n                this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n            }\n            throw error;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n\n    /**\n     * Creates an Silent Flow Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createSilentFlowClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, azureCloudOptions?: AzureCloudOptions): Promise<SilentFlowClient> {\n        // Create auth module.\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\n        return new SilentFlowClient(clientConfig);\n    }\n\n    async initializeSilentRequest(request: SilentRequest, account: AccountInfo): Promise<CommonSilentFlowRequest> {\n        return {\n            ...request,\n            ...await this.initializeBaseRequest(request),\n            account: account,\n            forceRefresh: request.forceRefresh || false\n        };\n    }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport {\n  TokenCredential,\n  isTokenCredential,\n  isNode,\n  HttpResponse,\n  getDefaultProxySettings,\n} from \"@azure/core-http\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport {\n  ServiceGetUserDelegationKeyHeaders,\n  ContainerCreateResponse,\n  ContainerDeleteResponse,\n  ServiceGetPropertiesResponse,\n  BlobServiceProperties,\n  ServiceSetPropertiesResponse,\n  ServiceGetStatisticsResponse,\n  ServiceGetAccountInfoResponse,\n  ServiceListContainersSegmentResponse,\n  ContainerItem,\n  UserDelegationKeyModel,\n  ContainerUndeleteResponse,\n  FilterBlobSegmentModel,\n  ServiceFilterBlobsHeaders,\n  ContainerRenameResponse,\n  LeaseAccessConditions,\n  FilterBlobSegment,\n  FilterBlobItem,\n} from \"./generatedModels\";\nimport { Container, Service } from \"./generated/src/operations\";\nimport { newPipeline, StoragePipelineOptions, PipelineLike, isPipelineLike } from \"./Pipeline\";\nimport {\n  ContainerClient,\n  ContainerCreateOptions,\n  ContainerDeleteMethodOptions,\n} from \"./ContainerClient\";\nimport {\n  appendToURLPath,\n  appendToURLQuery,\n  extractConnectionStringParts,\n  toTags,\n} from \"./utils/utils.common\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { truncatedISO8061Date } from \"./utils/utils.common\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { BlobBatchClient } from \"./BlobBatchClient\";\nimport { CommonOptions, StorageClient } from \"./StorageClient\";\nimport { AccountSASPermissions } from \"./sas/AccountSASPermissions\";\nimport { SASProtocol } from \"./sas/SASQueryParameters\";\nimport { SasIPRange } from \"./sas/SasIPRange\";\nimport { generateAccountSASQueryParameters } from \"./sas/AccountSASSignatureValues\";\nimport { AccountSASServices } from \"./sas/AccountSASServices\";\nimport { ListContainersIncludeType } from \"./generated/src\";\n\n/**\n * Options to configure the {@link BlobServiceClient.getProperties} operation.\n */\nexport interface ServiceGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.setProperties} operation.\n */\nexport interface ServiceSetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.getAccountInfo} operation.\n */\nexport interface ServiceGetAccountInfoOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.getStatistics} operation.\n */\nexport interface ServiceGetStatisticsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the Service - Get User Delegation Key.\n */\nexport interface ServiceGetUserDelegationKeyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.listContainerSegment} operation.\n */\ninterface ServiceListContainersSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only containers\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * Specifies the maximum number of containers\n   * to return. If the request does not specify maxPageSize, or specifies a\n   * value greater than 5000, the server will return up to 5000 items. Note\n   * that if the listing operation crosses a partition boundary, then the\n   * service will return a continuation token for retrieving the remainder of\n   * the results. For this reason, it is possible that the service will return\n   * fewer results than specified by maxPageSize, or than the default of 5000.\n   */\n  maxPageSize?: number;\n  /**\n   * Include this parameter to\n   * specify that the container's metadata be returned as part of the response\n   * body. Possible values include: 'metadata'\n   */\n  include?: ListContainersIncludeType | ListContainersIncludeType[];\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.listContainers} operation.\n */\nexport interface ServiceListContainersOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only containers\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * Specifies whether the container's metadata\n   *                                   should be returned as part of the response body.\n   */\n  includeMetadata?: boolean;\n\n  /**\n   * Specifies whether soft deleted containers should be included in the response.\n   */\n  includeDeleted?: boolean;\n  /**\n   * Specifies whether system containers should be included in the response.\n   */\n  includeSystem?: boolean;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.findBlobsByTagsSegment} operation.\n */\ninterface ServiceFindBlobsByTagsSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Specifies the maximum number of blobs\n   * to return. If the request does not specify maxPageSize, or specifies a\n   * value greater than 5000, the server will return up to 5000 items. Note\n   * that if the listing operation crosses a partition boundary, then the\n   * service will return a continuation token for retrieving the remainder of\n   * the results. For this reason, it is possible that the service will return\n   * fewer results than specified by maxPageSize, or than the default of 5000.\n   */\n  maxPageSize?: number;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.findBlobsByTags} operation.\n */\nexport interface ServiceFindBlobByTagsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * The response of {@link BlobServiceClient.findBlobsByTags} operation.\n */\nexport type ServiceFindBlobsByTagsSegmentResponse = FilterBlobSegment &\n  ServiceFilterBlobsHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ServiceFilterBlobsHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: FilterBlobSegmentModel;\n    };\n  };\n\n/**\n * A user delegation key.\n */\nexport interface UserDelegationKey {\n  /**\n   * The Azure Active Directory object ID in GUID format.\n   */\n  signedObjectId: string;\n  /**\n   * The Azure Active Directory tenant ID in GUID format.\n   */\n  signedTenantId: string;\n  /**\n   * The date-time the key is active.\n   */\n  signedStartsOn: Date;\n  /**\n   * The date-time the key expires.\n   */\n  signedExpiresOn: Date;\n  /**\n   * Abbreviation of the Azure Storage service that accepts the key.\n   */\n  signedService: string;\n  /**\n   * The service version that created the key.\n   */\n  signedVersion: string;\n  /**\n   * The key as a base64 string.\n   */\n  value: string;\n}\n\n/**\n * Contains response data for the {@link getUserDelegationKey} operation.\n */\nexport declare type ServiceGetUserDelegationKeyResponse = UserDelegationKey &\n  ServiceGetUserDelegationKeyHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ServiceGetUserDelegationKeyHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: UserDelegationKeyModel;\n    };\n  };\n\n/**\n * Options to configure {@link BlobServiceClient.undeleteContainer} operation.\n */\nexport interface ServiceUndeleteContainerOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Optional. Specifies the new name of the restored container.\n   * Will use its original name if this is not specified.\n   * @deprecated Restore container to a different name is not supported by service anymore.\n   */\n  destinationContainerName?: string;\n}\n\n/**\n * Options to configure {@link BlobServiceClient.renameContainer} operation.\n */\nexport interface ServiceRenameContainerOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Condition to meet for the source container.\n   */\n  sourceCondition?: LeaseAccessConditions;\n}\n\n/**\n * Options to configure {@link BlobServiceClient.generateAccountSasUrl} operation.\n */\nexport interface ServiceGenerateAccountSasUrlOptions {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols allowed.\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n  /**\n   * Optional. IP range allowed.\n   */\n  ipRange?: SasIPRange;\n  /**\n   * Optional. Encryption scope to use when sending requests authorized with this SAS URI.\n   */\n  encryptionScope?: string;\n}\n\n/**\n * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you\n * to manipulate blob containers.\n */\nexport class BlobServiceClient extends StorageClient {\n  /**\n   * serviceContext provided by protocol layer.\n   */\n  private serviceContext: Service;\n\n  /**\n   *\n   * Creates an instance of BlobServiceClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public static fromConnectionString(\n    connectionString: string,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ): BlobServiceClient {\n    options = options || {};\n    const extractedCreds = extractConnectionStringParts(connectionString);\n    if (extractedCreds.kind === \"AccountConnString\") {\n      if (isNode) {\n        const sharedKeyCredential = new StorageSharedKeyCredential(\n          extractedCreds.accountName!,\n          extractedCreds.accountKey\n        );\n\n        if (!options.proxyOptions) {\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n        }\n\n        const pipeline = newPipeline(sharedKeyCredential, options);\n        return new BlobServiceClient(extractedCreds.url, pipeline);\n      } else {\n        throw new Error(\"Account connection string is only supported in Node.js environment\");\n      }\n    } else if (extractedCreds.kind === \"SASConnString\") {\n      const pipeline = newPipeline(new AnonymousCredential(), options);\n      return new BlobServiceClient(extractedCreds.url + \"?\" + extractedCreds.accountSas, pipeline);\n    } else {\n      throw new Error(\n        \"Connection string must be either an Account connection string or a SAS connection string\"\n      );\n    }\n  }\n\n  /**\n   * Creates an instance of BlobServiceClient.\n   *\n   * @param url - A Client string pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   *\n   * Example using DefaultAzureCredential from `@azure/identity`:\n   *\n   * ```js\n   * const account = \"<storage account name>\";\n   *\n   * const defaultAzureCredential = new DefaultAzureCredential();\n   *\n   * const blobServiceClient = new BlobServiceClient(\n   *   `https://${account}.blob.core.windows.net`,\n   *   defaultAzureCredential\n   * );\n   * ```\n   *\n   * Example using an account name/key:\n   *\n   * ```js\n   * const account = \"<storage account name>\"\n   * const sharedKeyCredential = new StorageSharedKeyCredential(account, \"<account key>\");\n   *\n   * const blobServiceClient = new BlobServiceClient(\n   *   `https://${account}.blob.core.windows.net`,\n   *   sharedKeyCredential\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of BlobServiceClient.\n   *\n   * @param url - A Client string pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: PipelineLike);\n  constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | PipelineLike,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: PipelineLike;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (\n      (isNode && credentialOrPipeline instanceof StorageSharedKeyCredential) ||\n      credentialOrPipeline instanceof AnonymousCredential ||\n      isTokenCredential(credentialOrPipeline)\n    ) {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    } else {\n      // The second parameter is undefined. Use anonymous credential\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    }\n    super(url, pipeline);\n    this.serviceContext = new Service(this.storageClientContext);\n  }\n\n  /**\n   * Creates a {@link ContainerClient} object\n   *\n   * @param containerName - A container name\n   * @returns A new ContainerClient object for the given container name.\n   *\n   * Example usage:\n   *\n   * ```js\n   * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n   * ```\n   */\n  public getContainerClient(containerName: string): ContainerClient {\n    return new ContainerClient(\n      appendToURLPath(this.url, encodeURIComponent(containerName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Create a Blob container.\n   *\n   * @param containerName - Name of the container to create.\n   * @param options - Options to configure Container Create operation.\n   * @returns Container creation response and the corresponding container client.\n   */\n  public async createContainer(\n    containerName: string,\n    options: ContainerCreateOptions = {}\n  ): Promise<{\n    containerClient: ContainerClient;\n    containerCreateResponse: ContainerCreateResponse;\n  }> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-createContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(containerName);\n      const containerCreateResponse = await containerClient.create(updatedOptions);\n      return {\n        containerClient,\n        containerCreateResponse,\n      };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a Blob container.\n   *\n   * @param containerName - Name of the container to delete.\n   * @param options - Options to configure Container Delete operation.\n   * @returns Container deletion response.\n   */\n  public async deleteContainer(\n    containerName: string,\n    options: ContainerDeleteMethodOptions = {}\n  ): Promise<ContainerDeleteResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-deleteContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(containerName);\n      return await containerClient.delete(updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Restore a previously deleted Blob container.\n   * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.\n   *\n   * @param deletedContainerName - Name of the previously deleted container.\n   * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.\n   * @param options - Options to configure Container Restore operation.\n   * @returns Container deletion response.\n   */\n  public async undeleteContainer(\n    deletedContainerName: string,\n    deletedContainerVersion: string,\n    options: ServiceUndeleteContainerOptions = {}\n  ): Promise<{\n    containerClient: ContainerClient;\n    containerUndeleteResponse: ContainerUndeleteResponse;\n  }> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-undeleteContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(\n        options.destinationContainerName || deletedContainerName\n      );\n      // Hack to access a protected member.\n      const containerContext = new Container(containerClient[\"storageClientContext\"]);\n      const containerUndeleteResponse = await containerContext.restore({\n        deletedContainerName,\n        deletedContainerVersion,\n        ...updatedOptions,\n      });\n      return { containerClient, containerUndeleteResponse };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Rename an existing Blob Container.\n   *\n   * @param sourceContainerName - The name of the source container.\n   * @param destinationContainerName - The new name of the container.\n   * @param options - Options to configure Container Rename operation.\n   */\n  /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */\n  // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.\n  private async renameContainer(\n    sourceContainerName: string,\n    destinationContainerName: string,\n    options: ServiceRenameContainerOptions = {}\n  ): Promise<{\n    containerClient: ContainerClient;\n    containerRenameResponse: ContainerRenameResponse;\n  }> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-renameContainer\", options);\n    try {\n      const containerClient = this.getContainerClient(destinationContainerName);\n      // Hack to access a protected member.\n      const containerContext = new Container(containerClient[\"storageClientContext\"]);\n      const containerRenameResponse = await containerContext.rename(sourceContainerName, {\n        ...updatedOptions,\n        sourceLeaseId: options.sourceCondition?.leaseId,\n      });\n      return { containerClient, containerRenameResponse };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the properties of a storage account’s Blob service, including properties\n   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n   *\n   * @param options - Options to the Service Get Properties operation.\n   * @returns Response data for the Service Get Properties operation.\n   */\n  public async getProperties(\n    options: ServiceGetPropertiesOptions = {}\n  ): Promise<ServiceGetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-getProperties\", options);\n    try {\n      return await this.serviceContext.getProperties({\n        abortSignal: options.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets properties for a storage account’s Blob service endpoint, including properties\n   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\n   *\n   * @param properties -\n   * @param options - Options to the Service Set Properties operation.\n   * @returns Response data for the Service Set Properties operation.\n   */\n  public async setProperties(\n    properties: BlobServiceProperties,\n    options: ServiceSetPropertiesOptions = {}\n  ): Promise<ServiceSetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-setProperties\", options);\n    try {\n      return await this.serviceContext.setProperties(properties, {\n        abortSignal: options.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Blob service. It is only\n   * available on the secondary location endpoint when read-access geo-redundant\n   * replication is enabled for the storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats\n   *\n   * @param options - Options to the Service Get Statistics operation.\n   * @returns Response data for the Service Get Statistics operation.\n   */\n  public async getStatistics(\n    options: ServiceGetStatisticsOptions = {}\n  ): Promise<ServiceGetStatisticsResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-getStatistics\", options);\n    try {\n      return await this.serviceContext.getStatistics({\n        abortSignal: options.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * The Get Account Information operation returns the sku name and account kind\n   * for the specified account.\n   * The Get Account Information operation is available on service versions beginning\n   * with version 2018-03-28.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n   *\n   * @param options - Options to the Service Get Account Info operation.\n   * @returns Response data for the Service Get Account Info operation.\n   */\n  public async getAccountInfo(\n    options: ServiceGetAccountInfoOptions = {}\n  ): Promise<ServiceGetAccountInfoResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-getAccountInfo\", options);\n    try {\n      return await this.serviceContext.getAccountInfo({\n        abortSignal: options.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns a list of the containers under the specified account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2\n   *\n   * @param marker - A string value that identifies the portion of\n   *                        the list of containers to be returned with the next listing operation. The\n   *                        operation returns the continuationToken value within the response body if the\n   *                        listing operation did not return all containers remaining to be listed\n   *                        with the current page. The continuationToken value can be used as the value for\n   *                        the marker parameter in a subsequent call to request the next page of list\n   *                        items. The marker value is opaque to the client.\n   * @param options - Options to the Service List Container Segment operation.\n   * @returns Response data for the Service List Container Segment operation.\n   */\n  private async listContainersSegment(\n    marker?: string,\n    options: ServiceListContainersSegmentOptions = {}\n  ): Promise<ServiceListContainersSegmentResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-listContainersSegment\", options);\n\n    try {\n      return await this.serviceContext.listContainersSegment({\n        abortSignal: options.abortSignal,\n        marker,\n        ...options,\n        include: typeof options.include === \"string\" ? [options.include] : options.include,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * The Filter Blobs operation enables callers to list blobs across all containers whose tags\n   * match a given search expression. Filter blobs searches across all containers within a\n   * storage account but can be scoped within the expression to a single container.\n   *\n   * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                        The given expression must evaluate to true for a blob to be returned in the results.\n   *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                        however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param marker - A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the continuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The continuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param options - Options to find blobs by tags.\n   */\n  private async findBlobsByTagsSegment(\n    tagFilterSqlExpression: string,\n    marker?: string,\n    options: ServiceFindBlobsByTagsSegmentOptions = {}\n  ): Promise<ServiceFindBlobsByTagsSegmentResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"BlobServiceClient-findBlobsByTagsSegment\",\n      options\n    );\n\n    try {\n      const response = await this.serviceContext.filterBlobs({\n        abortSignal: options.abortSignal,\n        where: tagFilterSqlExpression,\n        marker,\n        maxPageSize: options.maxPageSize,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n\n      const wrappedResponse: ServiceFindBlobsByTagsSegmentResponse = {\n        ...response,\n        _response: response._response, // _response is made non-enumerable\n        blobs: response.blobs.map((blob) => {\n          let tagValue = \"\";\n          if (blob.tags?.blobTagSet.length === 1) {\n            tagValue = blob.tags.blobTagSet[0].value;\n          }\n          return { ...blob, tags: toTags(blob.tags), tagValue };\n        }),\n      };\n      return wrappedResponse;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param marker - A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the continuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The continuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param options - Options to find blobs by tags.\n   */\n  private async *findBlobsByTagsSegments(\n    tagFilterSqlExpression: string,\n    marker?: string,\n    options: ServiceFindBlobsByTagsSegmentOptions = {}\n  ): AsyncIterableIterator<ServiceFindBlobsByTagsSegmentResponse> {\n    let response;\n    if (!!marker || marker === undefined) {\n      do {\n        response = await this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options);\n        response.blobs = response.blobs || [];\n        marker = response.continuationToken;\n        yield response;\n      } while (marker);\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for blobs.\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param options - Options to findBlobsByTagsItems.\n   */\n  private async *findBlobsByTagsItems(\n    tagFilterSqlExpression: string,\n    options: ServiceFindBlobsByTagsSegmentOptions = {}\n  ): AsyncIterableIterator<FilterBlobItem> {\n    let marker: string | undefined;\n    for await (const segment of this.findBlobsByTagsSegments(\n      tagFilterSqlExpression,\n      marker,\n      options\n    )) {\n      yield* segment.blobs;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to find all blobs with specified tag\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs in pages.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * let i = 1;\n   * for await (const blob of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\")) {\n   *   console.log(`Blob ${i++}: ${container.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * const iter = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\");\n   * let blobItem = await iter.next();\n   * while (!blobItem.done) {\n   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n   *   blobItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 20 })) {\n   *   if (response.blobs) {\n   *     for (const blob of response.blobs) {\n   *       console.log(`Blob ${i++}: ${blob.name}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 blob names\n   * if (response.blobs) {\n   *   for (const blob of response.blobs) {\n   *     console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * iterator = blobServiceClient\n   *   .findBlobsByTags(\"tagkey='tagvalue'\")\n   *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints blob names\n   * if (response.blobs) {\n   *   for (const blob of response.blobs) {\n   *      console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param options - Options to find blobs by tags.\n   */\n  public findBlobsByTags(\n    tagFilterSqlExpression: string,\n    options: ServiceFindBlobByTagsOptions = {}\n  ): PagedAsyncIterableIterator<FilterBlobItem, ServiceFindBlobsByTagsSegmentResponse> {\n    // AsyncIterableIterator to iterate over blobs\n    const listSegmentOptions: ServiceFindBlobsByTagsSegmentOptions = {\n      ...options,\n    };\n\n    const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...listSegmentOptions,\n        });\n      },\n    };\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses\n   *\n   * @param marker - A string value that identifies the portion of\n   *                        the list of containers to be returned with the next listing operation. The\n   *                        operation returns the continuationToken value within the response body if the\n   *                        listing operation did not return all containers remaining to be listed\n   *                        with the current page. The continuationToken value can be used as the value for\n   *                        the marker parameter in a subsequent call to request the next page of list\n   *                        items. The marker value is opaque to the client.\n   * @param options - Options to list containers operation.\n   */\n  private async *listSegments(\n    marker?: string,\n    options: ServiceListContainersSegmentOptions = {}\n  ): AsyncIterableIterator<ServiceListContainersSegmentResponse> {\n    let listContainersSegmentResponse;\n    if (!!marker || marker === undefined) {\n      do {\n        listContainersSegmentResponse = await this.listContainersSegment(marker, options);\n        listContainersSegmentResponse.containerItems =\n          listContainersSegmentResponse.containerItems || [];\n        marker = listContainersSegmentResponse.continuationToken;\n        yield await listContainersSegmentResponse;\n      } while (marker);\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for Container Items\n   *\n   * @param options - Options to list containers operation.\n   */\n  private async *listItems(\n    options: ServiceListContainersSegmentOptions = {}\n  ): AsyncIterableIterator<ContainerItem> {\n    let marker: string | undefined;\n    for await (const segment of this.listSegments(marker, options)) {\n      yield* segment.containerItems;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the containers\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the containers in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * let i = 1;\n   * for await (const container of blobServiceClient.listContainers()) {\n   *   console.log(`Container ${i++}: ${container.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * const iter = blobServiceClient.listContainers();\n   * let containerItem = await iter.next();\n   * while (!containerItem.done) {\n   *   console.log(`Container ${i++}: ${containerItem.value.name}`);\n   *   containerItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {\n   *   if (response.containerItems) {\n   *     for (const container of response.containerItems) {\n   *       console.log(`Container ${i++}: ${container.name}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 container names\n   * if (response.containerItems) {\n   *   for (const container of response.containerItems) {\n   *     console.log(`Container ${i++}: ${container.name}`);\n   *   }\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * iterator = blobServiceClient\n   *   .listContainers()\n   *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints 10 container names\n   * if (response.containerItems) {\n   *   for (const container of response.containerItems) {\n   *      console.log(`Container ${i++}: ${container.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param options - Options to list containers.\n   * @returns An asyncIterableIterator that supports paging.\n   */\n  public listContainers(\n    options: ServiceListContainersOptions = {}\n  ): PagedAsyncIterableIterator<ContainerItem, ServiceListContainersSegmentResponse> {\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    const include: ListContainersIncludeType[] = [];\n    if (options.includeDeleted) {\n      include.push(\"deleted\");\n    }\n    if (options.includeMetadata) {\n      include.push(\"metadata\");\n    }\n    if (options.includeSystem) {\n      include.push(\"system\");\n    }\n\n    // AsyncIterableIterator to iterate over containers\n    const listSegmentOptions: ServiceListContainersSegmentOptions = {\n      ...options,\n      ...(include.length > 0 ? { include } : {}),\n    };\n\n    const iter = this.listItems(listSegmentOptions);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.listSegments(settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...listSegmentOptions,\n        });\n      },\n    };\n  }\n\n  /**\n   * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).\n   *\n   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n   * bearer token authentication.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key\n   *\n   * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time\n   * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time\n   */\n  public async getUserDelegationKey(\n    startsOn: Date,\n    expiresOn: Date,\n    options: ServiceGetUserDelegationKeyOptions = {}\n  ): Promise<ServiceGetUserDelegationKeyResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobServiceClient-getUserDelegationKey\", options);\n    try {\n      const response = await this.serviceContext.getUserDelegationKey(\n        {\n          startsOn: truncatedISO8061Date(startsOn, false),\n          expiresOn: truncatedISO8061Date(expiresOn, false),\n        },\n        {\n          abortSignal: options.abortSignal,\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n        }\n      );\n\n      const userDelegationKey = {\n        signedObjectId: response.signedObjectId,\n        signedTenantId: response.signedTenantId,\n        signedStartsOn: new Date(response.signedStartsOn),\n        signedExpiresOn: new Date(response.signedExpiresOn),\n        signedService: response.signedService,\n        signedVersion: response.signedVersion,\n        value: response.value,\n      };\n\n      const res: ServiceGetUserDelegationKeyResponse = {\n        _response: response._response,\n        requestId: response.requestId,\n        clientRequestId: response.clientRequestId,\n        version: response.version,\n        date: response.date,\n        errorCode: response.errorCode,\n        ...userDelegationKey,\n      };\n\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a BlobBatchClient object to conduct batch operations.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   *\n   * @returns A new BlobBatchClient object for this service.\n   */\n  public getBlobBatchClient(): BlobBatchClient {\n    return new BlobBatchClient(this.url, this.pipeline);\n  }\n\n  /**\n   * Only available for BlobServiceClient constructed with a shared key credential.\n   *\n   * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n   *\n   * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.\n   * @param permissions - Specifies the list of permissions to be associated with the SAS.\n   * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n   * @param options - Optional parameters.\n   * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateAccountSasUrl(\n    expiresOn?: Date,\n    permissions: AccountSASPermissions = AccountSASPermissions.parse(\"r\"),\n    resourceTypes: string = \"sco\",\n    options: ServiceGenerateAccountSasUrlOptions = {}\n  ): string {\n    if (!(this.credential instanceof StorageSharedKeyCredential)) {\n      throw RangeError(\n        \"Can only generate the account SAS when the client is initialized with a shared key credential\"\n      );\n    }\n\n    if (expiresOn === undefined) {\n      const now = new Date();\n      expiresOn = new Date(now.getTime() + 3600 * 1000);\n    }\n\n    const sas = generateAccountSASQueryParameters(\n      {\n        permissions,\n        expiresOn,\n        resourceTypes,\n        services: AccountSASServices.parse(\"b\").toString(),\n        ...options,\n      },\n      this.credential\n    ).toString();\n\n    return appendToURLQuery(this.url, sas);\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nif (typeof Symbol === undefined || !(Symbol as any).asyncIterator) {\n  (Symbol as any).asyncIterator = Symbol.for(\"Symbol.asyncIterator\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Context, SpanOptions } from \"@azure/core-tracing\";\nimport { HttpHeaders, HttpHeadersLike, isHttpHeadersLike } from \"./httpHeaders\";\nimport { Mapper, Serializer } from \"./serializer\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { OperationSpec } from \"./operationSpec\";\nimport { ProxySettings } from \"./serviceClient\";\nimport { SerializerOptions } from \"./util/serializer.common\";\nimport { generateUuid } from \"./util/utils\";\n\n/**\n * List of supported HTTP methods.\n */\nexport type HttpMethods =\n  | \"GET\"\n  | \"PUT\"\n  | \"POST\"\n  | \"DELETE\"\n  | \"PATCH\"\n  | \"HEAD\"\n  | \"OPTIONS\"\n  | \"TRACE\";\n\n/**\n * Possible HTTP request body types\n */\nexport type HttpRequestBody =\n  | Blob\n  | string\n  | ArrayBuffer\n  | ArrayBufferView\n  | (() => NodeJS.ReadableStream);\n\n/**\n * Fired in response to upload or download progress.\n */\nexport type TransferProgressEvent = {\n  /**\n   * The number of bytes loaded so far.\n   */\n  loadedBytes: number;\n};\n\n/**\n * A description of a HTTP request to be made to a remote server.\n */\nexport interface WebResourceLike {\n  /**\n   * The URL being accessed by the request.\n   */\n  url: string;\n  /**\n   * The HTTP method to use when making the request.\n   */\n  method: HttpMethods;\n  /**\n   * The HTTP body contents of the request.\n   */\n  body?: any;\n  /**\n   * The HTTP headers to use when making the request.\n   */\n  headers: HttpHeadersLike;\n  /**\n   * Whether or not the body of the HttpOperationResponse should be treated as a stream.\n   * @deprecated Use streamResponseStatusCodes property instead.\n   */\n  streamResponseBody?: boolean;\n  /**\n   * A list of response status codes whose corresponding HttpOperationResponse body should be treated as a stream.\n   */\n  streamResponseStatusCodes?: Set<number>;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n  /**\n   * A function that returns the proper OperationResponse for the given OperationSpec and\n   * HttpOperationResponse combination. If this is undefined, then a simple status code lookup will\n   * be used.\n   */\n  operationResponseGetter?: (\n    operationSpec: OperationSpec,\n    response: HttpOperationResponse\n  ) => undefined | OperationResponse;\n  /**\n   * Form data, used to build the request body.\n   */\n  formData?: any;\n  /**\n   * A query string represented as an object.\n   */\n  query?: { [key: string]: any };\n  /**\n   * Used to parse the response.\n   */\n  operationSpec?: OperationSpec;\n  /**\n   * If credentials (cookies) should be sent along during an XHR.\n   */\n  withCredentials: boolean;\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   * If the request is terminated, an `AbortError` is thrown.\n   */\n  timeout: number;\n  /**\n   * Proxy configuration.\n   */\n  proxySettings?: ProxySettings;\n  /**\n   * If the connection should be reused.\n   */\n  keepAlive?: boolean;\n  /**\n   * Whether or not to decompress response according to Accept-Encoding header (node-fetch only)\n   */\n  decompressResponse?: boolean;\n  /**\n   * A unique identifier for the request. Used for logging and tracing.\n   */\n  requestId: string;\n\n  /**\n   * Signal of an abort controller. Can be used to abort both sending a network request and waiting for a response.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Tracing: Context used when creating spans.\n   */\n  tracingContext?: Context;\n\n  /**\n   * Validates that the required properties such as method, url, headers[\"Content-Type\"],\n   * headers[\"accept-language\"] are defined. It will throw an error if one of the above\n   * mentioned properties are not defined.\n   */\n  validateRequestProperties(): void;\n\n  /**\n   * Sets options on the request.\n   */\n  prepare(options: RequestPrepareOptions): WebResourceLike;\n  /**\n   * Clone this request object.\n   */\n  clone(): WebResourceLike;\n}\n\nexport function isWebResourceLike(object: unknown): object is WebResourceLike {\n  if (object && typeof object === \"object\") {\n    const castObject = object as {\n      url: unknown;\n      method: unknown;\n      headers: unknown;\n      validateRequestProperties: unknown;\n      prepare: unknown;\n      clone: unknown;\n    };\n    if (\n      typeof castObject.url === \"string\" &&\n      typeof castObject.method === \"string\" &&\n      typeof castObject.headers === \"object\" &&\n      isHttpHeadersLike(castObject.headers) &&\n      typeof castObject.validateRequestProperties === \"function\" &&\n      typeof castObject.prepare === \"function\" &&\n      typeof castObject.clone === \"function\"\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Creates a new WebResource object.\n *\n * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary\n * properties to initiate a request.\n */\nexport class WebResource implements WebResourceLike {\n  /**\n   * URL of the outgoing request.\n   */\n  url: string;\n  /**\n   * HTTP method to use.\n   */\n  method: HttpMethods;\n  /**\n   * Request body.\n   */\n  body?: any;\n  /**\n   * HTTP headers.\n   */\n  headers: HttpHeadersLike;\n  /**\n   * Whether or not the body of the HttpOperationResponse should be treated as a stream.\n   * @deprecated Use streamResponseStatusCodes property instead.\n   */\n  streamResponseBody?: boolean;\n  /**\n   * A list of status codes whose corresponding HttpOperationResponse body should be treated as a stream.\n   */\n  streamResponseStatusCodes?: Set<number>;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n  /**\n   * A function that returns the proper OperationResponse for the given OperationSpec and\n   * HttpOperationResponse combination. If this is undefined, then a simple status code lookup will\n   * be used.\n   */\n  operationResponseGetter?: (\n    operationSpec: OperationSpec,\n    response: HttpOperationResponse\n  ) => undefined | OperationResponse;\n  /**\n   * Form data, used to build the request body.\n   */\n  formData?: any;\n  /**\n   * Query added to the URL.\n   */\n  query?: { [key: string]: any };\n  /**\n   * Specification of the HTTP request.\n   */\n  operationSpec?: OperationSpec;\n  /**\n   * Whether to send credentials (via cookies, authorization headers, or TLS client certificates) when making a request in the browser to a cross-site destination.\n   */\n  withCredentials: boolean;\n  /**\n   * How long to wait in milliseconds before aborting the request.\n   */\n  timeout: number;\n  /**\n   * What proxy to use, if necessary.\n   */\n  proxySettings?: ProxySettings;\n  /**\n   * Whether to keep the HTTP connections alive throughout requests.\n   */\n  keepAlive?: boolean;\n  /**\n   * Whether or not to decompress response according to Accept-Encoding header (node-fetch only)\n   */\n  decompressResponse?: boolean;\n  /**\n   * Unique identifier of the outgoing request.\n   */\n  requestId: string;\n\n  /**\n   * Signal of an abort controller. Can be used to abort both sending a network request and waiting for a response.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Tracing: Options used to create a span when tracing is enabled.\n   */\n  spanOptions?: SpanOptions;\n\n  /**\n   * Tracing: Context used when creating Spans.\n   */\n  tracingContext?: Context;\n\n  constructor(\n    url?: string,\n    method?: HttpMethods,\n    body?: unknown,\n    query?: { [key: string]: any },\n    headers?: { [key: string]: any } | HttpHeadersLike,\n    streamResponseBody?: boolean,\n    withCredentials?: boolean,\n    abortSignal?: AbortSignalLike,\n    timeout?: number,\n    onUploadProgress?: (progress: TransferProgressEvent) => void,\n    onDownloadProgress?: (progress: TransferProgressEvent) => void,\n    proxySettings?: ProxySettings,\n    keepAlive?: boolean,\n    decompressResponse?: boolean,\n    streamResponseStatusCodes?: Set<number>\n  ) {\n    this.streamResponseBody = streamResponseBody;\n    this.streamResponseStatusCodes = streamResponseStatusCodes;\n    this.url = url || \"\";\n    this.method = method || \"GET\";\n    this.headers = isHttpHeadersLike(headers) ? headers : new HttpHeaders(headers);\n    this.body = body;\n    this.query = query;\n    this.formData = undefined;\n    this.withCredentials = withCredentials || false;\n    this.abortSignal = abortSignal;\n    this.timeout = timeout || 0;\n    this.onUploadProgress = onUploadProgress;\n    this.onDownloadProgress = onDownloadProgress;\n    this.proxySettings = proxySettings;\n    this.keepAlive = keepAlive;\n    this.decompressResponse = decompressResponse;\n    this.requestId = this.headers.get(\"x-ms-client-request-id\") || generateUuid();\n  }\n\n  /**\n   * Validates that the required properties such as method, url, headers[\"Content-Type\"],\n   * headers[\"accept-language\"] are defined. It will throw an error if one of the above\n   * mentioned properties are not defined.\n   */\n  validateRequestProperties(): void {\n    if (!this.method) {\n      throw new Error(\"WebResource.method is required.\");\n    }\n    if (!this.url) {\n      throw new Error(\"WebResource.url is required.\");\n    }\n  }\n\n  /**\n   * Prepares the request.\n   * @param options - Options to provide for preparing the request.\n   * @returns Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.\n   */\n  prepare(options: RequestPrepareOptions): WebResource {\n    if (!options) {\n      throw new Error(\"options object is required\");\n    }\n\n    if (\n      options.method === undefined ||\n      options.method === null ||\n      typeof options.method.valueOf() !== \"string\"\n    ) {\n      throw new Error(\"options.method must be a string.\");\n    }\n\n    if (options.url && options.pathTemplate) {\n      throw new Error(\n        \"options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.\"\n      );\n    }\n\n    if (\n      (options.pathTemplate === undefined ||\n        options.pathTemplate === null ||\n        typeof options.pathTemplate.valueOf() !== \"string\") &&\n      (options.url === undefined ||\n        options.url === null ||\n        typeof options.url.valueOf() !== \"string\")\n    ) {\n      throw new Error(\"Please provide exactly one of options.pathTemplate or options.url.\");\n    }\n\n    // set the url if it is provided.\n    if (options.url) {\n      if (typeof options.url !== \"string\") {\n        throw new Error('options.url must be of type \"string\".');\n      }\n      this.url = options.url;\n    }\n\n    // set the method\n    if (options.method) {\n      const validMethods = [\"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\", \"PATCH\", \"TRACE\"];\n      if (validMethods.indexOf(options.method.toUpperCase()) === -1) {\n        throw new Error(\n          'The provided method \"' +\n            options.method +\n            '\" is invalid. Supported HTTP methods are: ' +\n            JSON.stringify(validMethods)\n        );\n      }\n    }\n    this.method = options.method.toUpperCase() as HttpMethods;\n\n    // construct the url if path template is provided\n    if (options.pathTemplate) {\n      const { pathTemplate, pathParameters } = options;\n      if (typeof pathTemplate !== \"string\") {\n        throw new Error('options.pathTemplate must be of type \"string\".');\n      }\n      if (!options.baseUrl) {\n        options.baseUrl = \"https://management.azure.com\";\n      }\n      const baseUrl = options.baseUrl;\n      let url =\n        baseUrl +\n        (baseUrl.endsWith(\"/\") ? \"\" : \"/\") +\n        (pathTemplate.startsWith(\"/\") ? pathTemplate.slice(1) : pathTemplate);\n      const segments = url.match(/({[\\w-]*\\s*[\\w-]*})/gi);\n      if (segments && segments.length) {\n        if (!pathParameters) {\n          throw new Error(\n            `pathTemplate: ${pathTemplate} has been provided. Hence, options.pathParameters must also be provided.`\n          );\n        }\n        segments.forEach(function (item) {\n          const pathParamName = item.slice(1, -1);\n          const pathParam = (pathParameters as { [key: string]: any })[pathParamName];\n          if (\n            pathParam === null ||\n            pathParam === undefined ||\n            !(typeof pathParam === \"string\" || typeof pathParam === \"object\")\n          ) {\n            const stringifiedPathParameters = JSON.stringify(pathParameters, undefined, 2);\n            throw new Error(\n              `pathTemplate: ${pathTemplate} contains the path parameter ${pathParamName}` +\n                ` however, it is not present in parameters: ${stringifiedPathParameters}.` +\n                `The value of the path parameter can either be a \"string\" of the form { ${pathParamName}: \"some sample value\" } or ` +\n                `it can be an \"object\" of the form { \"${pathParamName}\": { value: \"some sample value\", skipUrlEncoding: true } }.`\n            );\n          }\n\n          if (typeof pathParam.valueOf() === \"string\") {\n            url = url.replace(item, encodeURIComponent(pathParam));\n          }\n\n          if (typeof pathParam.valueOf() === \"object\") {\n            if (!pathParam.value) {\n              throw new Error(\n                `options.pathParameters[${pathParamName}] is of type \"object\" but it does not contain a \"value\" property.`\n              );\n            }\n            if (pathParam.skipUrlEncoding) {\n              url = url.replace(item, pathParam.value);\n            } else {\n              url = url.replace(item, encodeURIComponent(pathParam.value));\n            }\n          }\n        });\n      }\n      this.url = url;\n    }\n\n    // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.\n    if (options.queryParameters) {\n      const queryParameters = options.queryParameters;\n      if (typeof queryParameters !== \"object\") {\n        throw new Error(\n          `options.queryParameters must be of type object. It should be a JSON object ` +\n            `of \"query-parameter-name\" as the key and the \"query-parameter-value\" as the value. ` +\n            `The \"query-parameter-value\" may be fo type \"string\" or an \"object\" of the form { value: \"query-parameter-value\", skipUrlEncoding: true }.`\n        );\n      }\n      // append question mark if it is not present in the url\n      if (this.url && this.url.indexOf(\"?\") === -1) {\n        this.url += \"?\";\n      }\n      // construct queryString\n      const queryParams = [];\n      // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().\n      this.query = {};\n      for (const queryParamName in queryParameters) {\n        const queryParam: any = queryParameters[queryParamName];\n        if (queryParam) {\n          if (typeof queryParam === \"string\") {\n            queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam));\n            this.query[queryParamName] = encodeURIComponent(queryParam);\n          } else if (typeof queryParam === \"object\") {\n            if (!queryParam.value) {\n              throw new Error(\n                `options.queryParameters[${queryParamName}] is of type \"object\" but it does not contain a \"value\" property.`\n              );\n            }\n            if (queryParam.skipUrlEncoding) {\n              queryParams.push(queryParamName + \"=\" + queryParam.value);\n              this.query[queryParamName] = queryParam.value;\n            } else {\n              queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam.value));\n              this.query[queryParamName] = encodeURIComponent(queryParam.value);\n            }\n          }\n        }\n      } // end-of-for\n      // append the queryString\n      this.url += queryParams.join(\"&\");\n    }\n\n    // add headers to the request if they are provided\n    if (options.headers) {\n      const headers = options.headers;\n      for (const headerName of Object.keys(options.headers)) {\n        this.headers.set(headerName, headers[headerName]);\n      }\n    }\n    // ensure accept-language is set correctly\n    if (!this.headers.get(\"accept-language\")) {\n      this.headers.set(\"accept-language\", \"en-US\");\n    }\n    // ensure the request-id is set correctly\n    if (!this.headers.get(\"x-ms-client-request-id\") && !options.disableClientRequestId) {\n      this.headers.set(\"x-ms-client-request-id\", this.requestId);\n    }\n\n    // default\n    if (!this.headers.get(\"Content-Type\")) {\n      this.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n    }\n\n    // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicitly\n    this.body = options.body;\n    if (options.body !== undefined && options.body !== null) {\n      // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.\n      if (options.bodyIsStream) {\n        if (!this.headers.get(\"Transfer-Encoding\")) {\n          this.headers.set(\"Transfer-Encoding\", \"chunked\");\n        }\n        if (this.headers.get(\"Content-Type\") !== \"application/octet-stream\") {\n          this.headers.set(\"Content-Type\", \"application/octet-stream\");\n        }\n      } else {\n        if (options.serializationMapper) {\n          this.body = new Serializer(options.mappers).serialize(\n            options.serializationMapper,\n            options.body,\n            \"requestBody\"\n          );\n        }\n        if (!options.disableJsonStringifyOnBody) {\n          this.body = JSON.stringify(options.body);\n        }\n      }\n    }\n\n    if (options.spanOptions) {\n      this.spanOptions = options.spanOptions;\n    }\n\n    if (options.tracingContext) {\n      this.tracingContext = options.tracingContext;\n    }\n\n    this.abortSignal = options.abortSignal;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.onUploadProgress = options.onUploadProgress;\n\n    return this;\n  }\n\n  /**\n   * Clone this WebResource HTTP request object.\n   * @returns The clone of this WebResource HTTP request object.\n   */\n  clone(): WebResource {\n    const result = new WebResource(\n      this.url,\n      this.method,\n      this.body,\n      this.query,\n      this.headers && this.headers.clone(),\n      this.streamResponseBody,\n      this.withCredentials,\n      this.abortSignal,\n      this.timeout,\n      this.onUploadProgress,\n      this.onDownloadProgress,\n      this.proxySettings,\n      this.keepAlive,\n      this.decompressResponse,\n      this.streamResponseStatusCodes\n    );\n\n    if (this.formData) {\n      result.formData = this.formData;\n    }\n\n    if (this.operationSpec) {\n      result.operationSpec = this.operationSpec;\n    }\n\n    if (this.shouldDeserialize) {\n      result.shouldDeserialize = this.shouldDeserialize;\n    }\n\n    if (this.operationResponseGetter) {\n      result.operationResponseGetter = this.operationResponseGetter;\n    }\n\n    return result;\n  }\n}\n\n/**\n * Options to prepare an outgoing HTTP request.\n */\nexport interface RequestPrepareOptions {\n  /**\n   * The HTTP request method. Valid values are \"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\",\n   * or \"PATCH\".\n   */\n  method: HttpMethods;\n  /**\n   * The request url. It may or may not have query parameters in it. Either provide the \"url\" or\n   * provide the \"pathTemplate\" in the options object. Both the options are mutually exclusive.\n   */\n  url?: string;\n  /**\n   * A dictionary of query parameters to be appended to the url, where\n   * the \"key\" is the \"query-parameter-name\" and the \"value\" is the \"query-parameter-value\".\n   * The \"query-parameter-value\" can be of type \"string\" or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"query-parameter-value\".\n   * Example:\n   *    - query-parameter-value in \"object\" format: `{ \"query-parameter-name\": { value: \"query-parameter-value\", skipUrlEncoding: true } }`\n   *    - query-parameter-value in \"string\" format: `{ \"query-parameter-name\": \"query-parameter-value\"}`.\n   * Note: \"If options.url already has some query parameters, then the value provided in options.queryParameters will be appended to the url.\n   */\n  queryParameters?: { [key: string]: any | ParameterValue };\n  /**\n   * The path template of the request url. Either provide the \"url\" or provide the \"pathTemplate\" in\n   * the options object. Both the options are mutually exclusive.\n   * Example: `/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}`\n   */\n  pathTemplate?: string;\n  /**\n   * The base url of the request. Default value is: \"https://management.azure.com\". This is\n   * applicable only with pathTemplate. If you are providing options.url then it is expected that\n   * you provide the complete url.\n   */\n  baseUrl?: string;\n  /**\n   * A dictionary of path parameters that need to be replaced with actual values in the pathTemplate.\n   * Here the key is the \"path-parameter-name\" and the value is the \"path-parameter-value\".\n   * The \"path-parameter-value\" can be of type \"string\"  or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"path-parameter-value\".\n   * Example:\n   *    - path-parameter-value in \"object\" format: `{ \"path-parameter-name\": { value: \"path-parameter-value\", skipUrlEncoding: true } }`\n   *    - path-parameter-value in \"string\" format: `{ \"path-parameter-name\": \"path-parameter-value\" }`.\n   */\n  pathParameters?: { [key: string]: any | ParameterValue };\n  /**\n   * Form data, used to build the request body.\n   */\n  formData?: { [key: string]: any };\n  /**\n   * A dictionary of request headers that need to be applied to the request.\n   * Here the key is the \"header-name\" and the value is the \"header-value\". The header-value MUST be of type string.\n   *  - ContentType must be provided with the key name as \"Content-Type\". Default value \"application/json; charset=utf-8\".\n   *  - \"Transfer-Encoding\" is set to \"chunked\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"Content-Type\" is set to \"application/octet-stream\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"accept-language\" by default is set to \"en-US\"\n   *  - \"x-ms-client-request-id\" by default is set to a new Guid. To not generate a guid for the request, please set options.disableClientRequestId to true\n   */\n  headers?: { [key: string]: any };\n  /**\n   * When set to true, instructs the client to not set \"x-ms-client-request-id\" header to a new Guid().\n   */\n  disableClientRequestId?: boolean;\n  /**\n   * The request body. It can be of any type. This value will be serialized if it is not a stream.\n   */\n  body?: any;\n  /**\n   * Provides information on how to serialize the request body.\n   */\n  serializationMapper?: Mapper;\n  /**\n   * A dictionary of mappers that may be used while [de]serialization.\n   */\n  mappers?: { [x: string]: any };\n  /**\n   * Provides information on how to deserialize the response body.\n   */\n  deserializationMapper?: Record<string, unknown>;\n  /**\n   * Indicates whether this method should JSON.stringify() the request body. Default value: false.\n   */\n  disableJsonStringifyOnBody?: boolean;\n  /**\n   * Indicates whether the request body is a stream (useful for file upload scenarios).\n   */\n  bodyIsStream?: boolean;\n  /**\n   * Signal of an abort controller. Can be used to abort both sending a network request and waiting for a response.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Allows keeping track of the progress of uploading the outgoing request.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n  /**\n   * Allows keeping track of the progress of downloading the incoming response.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n  /**\n   * Tracing: Options used to create a span when tracing is enabled.\n   */\n  spanOptions?: SpanOptions;\n  /**\n   * Tracing: Context used when creating spans.\n   */\n  tracingContext?: Context;\n}\n\n/**\n * The Parameter value provided for path or query parameters in RequestPrepareOptions\n */\nexport interface ParameterValue {\n  /**\n   * Value of the parameter.\n   */\n  value: any;\n  /**\n   * Disables URL encoding if set to true.\n   */\n  skipUrlEncoding: boolean;\n  /**\n   * Parameter values may contain any other property.\n   */\n  [key: string]: any;\n}\n\n/**\n * Describes the base structure of the options object that will be used in every operation.\n */\nexport interface RequestOptionsBase {\n  /**\n   * will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * Signal of an abort controller. Can be used to abort both sending a network request and waiting for a response.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   * If the request is terminated, an `AbortError` is thrown.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n\n  /**\n   * Tracing: Context used when creating spans.\n   */\n  tracingContext?: Context;\n\n  /**\n   * May contain other properties.\n   */\n  [key: string]: any;\n\n  /**\n   * Options to override XML parsing/building behavior.\n   */\n  serializerOptions?: SerializerOptions;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName: string): string {\n  return headerName.toLowerCase();\n}\n\n/**\n * An individual header within a HttpHeaders collection.\n */\nexport interface HttpHeader {\n  /**\n   * The name of the header.\n   */\n  name: string;\n\n  /**\n   * The value of the header.\n   */\n  value: string;\n}\n\n/**\n * A HttpHeaders collection represented as a simple JSON object.\n */\nexport type RawHttpHeaders = { [headerName: string]: string };\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport interface HttpHeadersLike {\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName - The name of the header to set. This value is case-insensitive.\n   * @param headerValue - The value of the header to set.\n   */\n  set(headerName: string, headerValue: string | number): void;\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName - The name of the header.\n   */\n  get(headerName: string): string | undefined;\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  contains(headerName: string): boolean;\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName - The name of the header to remove.\n   */\n  remove(headerName: string): boolean;\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  rawHeaders(): RawHttpHeaders;\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  headersArray(): HttpHeader[];\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  headerNames(): string[];\n  /**\n   * Get the header values that are contained in this collection.\n   */\n  headerValues(): string[];\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  clone(): HttpHeadersLike;\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   * The result is the same as `rawHeaders()`.\n   */\n  toJson(options?: { preserveCase?: boolean }): RawHttpHeaders;\n}\n\nexport function isHttpHeadersLike(object?: unknown): object is HttpHeadersLike {\n  if (object && typeof object === \"object\") {\n    const castObject = object as {\n      rawHeaders: unknown;\n      clone: unknown;\n      get: unknown;\n      set: unknown;\n      contains: unknown;\n      remove: unknown;\n      headersArray: unknown;\n      headerValues: unknown;\n      headerNames: unknown;\n      toJson: unknown;\n    };\n    if (\n      typeof castObject.rawHeaders === \"function\" &&\n      typeof castObject.clone === \"function\" &&\n      typeof castObject.get === \"function\" &&\n      typeof castObject.set === \"function\" &&\n      typeof castObject.contains === \"function\" &&\n      typeof castObject.remove === \"function\" &&\n      typeof castObject.headersArray === \"function\" &&\n      typeof castObject.headerValues === \"function\" &&\n      typeof castObject.headerNames === \"function\" &&\n      typeof castObject.toJson === \"function\"\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders implements HttpHeadersLike {\n  private readonly _headersMap: { [headerKey: string]: HttpHeader };\n\n  constructor(rawHeaders?: RawHttpHeaders) {\n    this._headersMap = {};\n    if (rawHeaders) {\n      for (const headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName - The name of the header to set. This value is case-insensitive.\n   * @param headerValue - The value of the header to set.\n   */\n  public set(headerName: string, headerValue: string | number): void {\n    this._headersMap[getHeaderKey(headerName)] = {\n      name: headerName,\n      value: headerValue.toString(),\n    };\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName - The name of the header.\n   */\n  public get(headerName: string): string | undefined {\n    const header: HttpHeader = this._headersMap[getHeaderKey(headerName)];\n    return !header ? undefined : header.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  public contains(headerName: string): boolean {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  }\n\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName - The name of the header to remove.\n   */\n  public remove(headerName: string): boolean {\n    const result: boolean = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  public rawHeaders(): RawHttpHeaders {\n    return this.toJson({ preserveCase: true });\n  }\n\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  public headersArray(): HttpHeader[] {\n    const headers: HttpHeader[] = [];\n    for (const headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n    return headers;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerNames(): string[] {\n    const headerNames: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n    return headerNames;\n  }\n\n  /**\n   * Get the header values that are contained in this collection.\n   */\n  public headerValues(): string[] {\n    const headerValues: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n    return headerValues;\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJson(options: { preserveCase?: boolean } = {}): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    if (options.preserveCase) {\n      for (const headerKey in this._headersMap) {\n        const header: HttpHeader = this._headersMap[headerKey];\n        result[header.name] = header.value;\n      }\n    } else {\n      for (const headerKey in this._headersMap) {\n        const header: HttpHeader = this._headersMap[headerKey];\n        result[getHeaderKey(header.name)] = header.value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJson({ preserveCase: true }));\n  }\n\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  public clone(): HttpHeaders {\n    const resultPreservingCasing: RawHttpHeaders = {};\n    for (const headerKey in this._headersMap) {\n      const header: HttpHeader = this._headersMap[headerKey];\n      resultPreservingCasing[header.name] = header.value;\n    }\n    return new HttpHeaders(resultPreservingCasing);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/* eslint-disable eqeqeq */\n\nimport * as base64 from \"./util/base64\";\nimport * as utils from \"./util/utils\";\nimport { SerializerOptions, XML_ATTRKEY, XML_CHARKEY } from \"./util/serializer.common\";\n\n// This file contains utility code to serialize and deserialize network operations according to `OperationSpec` objects generated by AutoRest.TypeScript from OpenAPI specifications.\n\n/**\n * Used to map raw response objects to final shapes.\n * Helps packing and unpacking Dates and other encoded types that are not intrinsic to JSON.\n * Also allows pulling values from headers, as well as inserting default values and constants.\n */\nexport class Serializer {\n  constructor(\n    /**\n     * The provided model mapper.\n     */\n    public readonly modelMappers: { [key: string]: any } = {},\n    /**\n     * Whether the contents are XML or not.\n     */\n    public readonly isXML?: boolean\n  ) {}\n\n  /**\n   * Validates constraints, if any. This function will throw if the provided value does not respect those constraints.\n   * @param mapper - The definition of data models.\n   * @param value - The value.\n   * @param objectName - Name of the object. Used in the error messages.\n   */\n  validateConstraints(mapper: Mapper, value: unknown, objectName: string): void {\n    const failValidation = (\n      constraintName: keyof MapperConstraints,\n      constraintValue: any\n    ): Error => {\n      throw new Error(\n        `\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`\n      );\n    };\n    if (mapper.constraints && value != undefined) {\n      const valueAsNumber = value as number;\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems,\n      } = mapper.constraints;\n      if (ExclusiveMaximum != undefined && valueAsNumber >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum != undefined && valueAsNumber <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum != undefined && valueAsNumber > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum != undefined && valueAsNumber < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      const valueAsArray = value as any[];\n      if (MaxItems != undefined && valueAsArray.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength != undefined && valueAsArray.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems != undefined && valueAsArray.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength != undefined && valueAsArray.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf != undefined && valueAsNumber % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern) {\n        const pattern: RegExp = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n        if (typeof value !== \"string\" || value.match(pattern) === null) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n      if (\n        UniqueItems &&\n        valueAsArray.some((item: any, i: number, ar: Array<any>) => ar.indexOf(item) !== i)\n      ) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n\n  /**\n   * Serialize the given object based on its metadata defined in the mapper.\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object.\n   * @param object - A valid Javascript object to be serialized.\n   * @param objectName - Name of the serialized object.\n   * @param options - additional options to deserialization.\n   * @returns A valid serialized Javascript object.\n   */\n  serialize(\n    mapper: Mapper,\n    object: unknown,\n    objectName?: string,\n    options: SerializerOptions = {}\n  ): any {\n    const updatedOptions: Required<SerializerOptions> = {\n      rootName: options.rootName ?? \"\",\n      includeRoot: options.includeRoot ?? false,\n      xmlCharKey: options.xmlCharKey ?? XML_CHARKEY,\n    };\n    let payload: any = {};\n    const mapperType = mapper.type.name as string;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n    if (mapperType.match(/^Sequence$/i) !== null) {\n      payload = [];\n    }\n\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    }\n\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n\n    const { required, nullable } = mapper;\n\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && object == undefined) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n\n    if (object == undefined) {\n      payload = object;\n    } else {\n      // Validate Constraints if any\n      this.validateConstraints(mapper, object, objectName);\n      if (mapperType.match(/^any$/i) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/i) !== null) {\n        const enumMapper: EnumMapper = mapper as EnumMapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (\n        mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null\n      ) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = serializeByteArrayType(objectName, object as Uint8Array);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = serializeBase64UrlType(objectName, object as Uint8Array);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = serializeSequenceType(\n          this,\n          mapper as SequenceMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions\n        );\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = serializeDictionaryType(\n          this,\n          mapper as DictionaryMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions\n        );\n      } else if (mapperType.match(/^Composite$/i) !== null) {\n        payload = serializeCompositeType(\n          this,\n          mapper as CompositeMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions\n        );\n      }\n    }\n    return payload;\n  }\n\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper.\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object.\n   * @param responseBody - A valid Javascript entity to be deserialized.\n   * @param objectName - Name of the deserialized object.\n   * @param options - Controls behavior of XML parser and builder.\n   * @returns A valid deserialized Javascript object.\n   */\n  deserialize(\n    mapper: Mapper,\n    responseBody: unknown,\n    objectName: string,\n    options: SerializerOptions = {}\n  ): any {\n    const updatedOptions: Required<SerializerOptions> = {\n      rootName: options.rootName ?? \"\",\n      includeRoot: options.includeRoot ?? false,\n      xmlCharKey: options.xmlCharKey ?? XML_CHARKEY,\n    };\n    if (responseBody == undefined) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n      return responseBody;\n    }\n\n    let payload: any;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n\n    if (mapperType.match(/^Composite$/i) !== null) {\n      payload = deserializeCompositeType(\n        this,\n        mapper as CompositeMapper,\n        responseBody,\n        objectName,\n        updatedOptions\n      );\n    } else {\n      if (this.isXML) {\n        const xmlCharKey = updatedOptions.xmlCharKey;\n        const castResponseBody = responseBody as Record<string, unknown>;\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n         * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n         */\n        if (\n          castResponseBody[XML_ATTRKEY] != undefined &&\n          castResponseBody[xmlCharKey] != undefined\n        ) {\n          responseBody = castResponseBody[xmlCharKey];\n        }\n      }\n\n      if (mapperType.match(/^Number$/i) !== null) {\n        payload = parseFloat(responseBody as string);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/i) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n        payload = new Date(responseBody as string);\n      } else if (mapperType.match(/^UnixTime$/i) !== null) {\n        payload = unixTimeToDate(responseBody as number);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = base64.decodeString(responseBody as string);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = base64UrlToByteArray(responseBody as string);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = deserializeSequenceType(\n          this,\n          mapper as SequenceMapper,\n          responseBody,\n          objectName,\n          updatedOptions\n        );\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = deserializeDictionaryType(\n          this,\n          mapper as DictionaryMapper,\n          responseBody,\n          objectName,\n          updatedOptions\n        );\n      }\n    }\n\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n\n    return payload;\n  }\n}\n\nfunction trimEnd(str: string, ch: string): string {\n  let len = str.length;\n  while (len - 1 >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\n\nfunction bufferToBase64Url(buffer: any): string | undefined {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\nfunction base64UrlToByteArray(str: string): Uint8Array | undefined {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\n\nfunction splitSerializeName(prop: string | undefined): string[] {\n  const classes: string[] = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n\n  return classes;\n}\n\nfunction dateToUnixTime(d: string | Date): number | undefined {\n  if (!d) {\n    return undefined;\n  }\n\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d as string);\n  }\n  return Math.floor((d as Date).getTime() / 1000);\n}\n\nfunction unixTimeToDate(n: number): Date | undefined {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\n\nfunction serializeBasicTypes(typeName: string, objectName: string, value: any): any {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/i) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/i) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/i) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && utils.isValidUuid(value))) {\n        throw new Error(\n          `${objectName} with value \"${value}\" must be of type string and a valid uuid.`\n        );\n      }\n    } else if (typeName.match(/^Boolean$/i) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/i) !== null) {\n      const objectType = typeof value;\n      if (\n        objectType !== \"string\" &&\n        objectType !== \"function\" &&\n        !(value instanceof ArrayBuffer) &&\n        !ArrayBuffer.isView(value) &&\n        !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob)\n      ) {\n        throw new Error(\n          `${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.`\n        );\n      }\n    }\n  }\n\n  return value;\n}\n\nfunction serializeEnumType(objectName: string, allowedValues: Array<any>, value: any): any {\n  if (!allowedValues) {\n    throw new Error(\n      `Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`\n    );\n  }\n  const isPresent = allowedValues.some((item) => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(\n      `${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(\n        allowedValues\n      )}.`\n    );\n  }\n  return value;\n}\n\nfunction serializeByteArrayType(objectName: string, value: Uint8Array): string {\n  let returnValue: string = \"\";\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    returnValue = base64.encodeByteArray(value);\n  }\n  return returnValue;\n}\n\nfunction serializeBase64UrlType(objectName: string, value: Uint8Array): string {\n  let returnValue: string = \"\";\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    returnValue = bufferToBase64Url(value) || \"\";\n  }\n  return returnValue;\n}\n\nfunction serializeDateTypes(typeName: string, value: any, objectName: string): any {\n  if (value != undefined) {\n    if (typeName.match(/^Date$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value =\n        value instanceof Date\n          ? value.toISOString().substring(0, 10)\n          : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(\n          `${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n            `for it to be serialized in UnixTime/Epoch format.`\n        );\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/i) !== null) {\n      if (!utils.isDuration(value)) {\n        throw new Error(\n          `${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`\n        );\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: Required<SerializerOptions>\n): any[] {\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  const elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`\n    );\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n\n    if (isXml && elementType.xmlNamespace) {\n      const xmlnsKey = elementType.xmlNamespacePrefix\n        ? `xmlns:${elementType.xmlNamespacePrefix}`\n        : \"xmlns\";\n      if (elementType.type.name === \"Composite\") {\n        tempArray[i] = { ...serializedValue };\n        tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n      } else {\n        tempArray[i] = {};\n        tempArray[i][options.xmlCharKey] = serializedValue;\n        tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n      }\n    } else {\n      tempArray[i] = serializedValue;\n    }\n  }\n  return tempArray;\n}\n\nfunction serializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: Required<SerializerOptions>\n): { [key: string]: any } {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`\n    );\n  }\n  const tempDictionary: { [key: string]: any } = {};\n  for (const key of Object.keys(object)) {\n    const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n    // If the element needs an XML namespace we need to add it within the $ property\n    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n  }\n\n  // Add the namespace to the root element if needed\n  if (isXml && mapper.xmlNamespace) {\n    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n\n    const result = tempDictionary;\n    result[XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n    return result;\n  }\n\n  return tempDictionary;\n}\n\n/**\n * Resolves the additionalProperties property from a referenced mapper.\n * @param serializer - The serializer containing the entire set of mappers.\n * @param mapper - The composite mapper to resolve.\n * @param objectName - Name of the object being serialized.\n */\nfunction resolveAdditionalProperties(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string\n): SequenceMapper | BaseMapper | CompositeMapper | DictionaryMapper | EnumMapper | undefined {\n  const additionalProperties = mapper.type.additionalProperties;\n\n  if (!additionalProperties && mapper.type.className) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    return modelMapper?.type.additionalProperties;\n  }\n\n  return additionalProperties;\n}\n\n/**\n * Finds the mapper referenced by `className`.\n * @param serializer - The serializer containing the entire set of mappers\n * @param mapper - The composite mapper to resolve\n * @param objectName - Name of the object being serialized\n */\nfunction resolveReferencedMapper(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string\n): CompositeMapper | undefined {\n  const className = mapper.type.className;\n  if (!className) {\n    throw new Error(\n      `Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(\n        mapper,\n        undefined,\n        2\n      )}\".`\n    );\n  }\n\n  return serializer.modelMappers[className];\n}\n\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - The serializer containing the entire set of mappers\n * @param mapper - The composite mapper to resolve\n */\nfunction resolveModelProperties(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string\n): { [propertyName: string]: Mapper } {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n    }\n    modelProps = modelMapper?.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(\n        `modelProperties cannot be null or undefined in the ` +\n          `mapper \"${JSON.stringify(modelMapper)}\" of type \"${\n            mapper.type.className\n          }\" for object \"${objectName}\".`\n      );\n    }\n  }\n\n  return modelProps;\n}\n\nfunction serializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: Required<SerializerOptions>\n): any {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n\n  if (object != undefined) {\n    const payload: any = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n\n      let propName: string | undefined;\n      let parentObject: any = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName!);\n        propName = paths.pop();\n\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if (\n            childObject == undefined &&\n            (object[key] != undefined || propertyMapper.defaultValue !== undefined)\n          ) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n\n      if (parentObject != undefined) {\n        if (isXml && mapper.xmlNamespace) {\n          const xmlnsKey = mapper.xmlNamespacePrefix\n            ? `xmlns:${mapper.xmlNamespacePrefix}`\n            : \"xmlns\";\n          parentObject[XML_ATTRKEY] = {\n            ...parentObject[XML_ATTRKEY],\n            [xmlnsKey]: mapper.xmlNamespace,\n          };\n        }\n        const propertyObjectName =\n          propertyMapper.serializedName !== \"\"\n            ? objectName + \".\" + propertyMapper.serializedName\n            : objectName;\n\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (\n          polymorphicDiscriminator &&\n          polymorphicDiscriminator.clientName === key &&\n          toSerialize == undefined\n        ) {\n          toSerialize = mapper.serializedName;\n        }\n\n        const serializedValue = serializer.serialize(\n          propertyMapper,\n          toSerialize,\n          propertyObjectName,\n          options\n        );\n\n        if (serializedValue !== undefined && propName != undefined) {\n          const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n          if (isXml && propertyMapper.xmlIsAttribute) {\n            // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n            parentObject[XML_ATTRKEY][propName] = serializedValue;\n          } else if (isXml && propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = { [propertyMapper.xmlElementName!]: value };\n          } else {\n            parentObject[propName] = value;\n          }\n        }\n      }\n    }\n\n    const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(\n            additionalPropertiesMapper,\n            object[clientPropName],\n            objectName + '[\"' + clientPropName + '\"]',\n            options\n          );\n        }\n      }\n    }\n\n    return payload;\n  }\n  return object;\n}\n\nfunction getXmlObjectValue(\n  propertyMapper: Mapper,\n  serializedValue: any,\n  isXml: boolean,\n  options: Required<SerializerOptions>\n): any {\n  if (!isXml || !propertyMapper.xmlNamespace) {\n    return serializedValue;\n  }\n\n  const xmlnsKey = propertyMapper.xmlNamespacePrefix\n    ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n    : \"xmlns\";\n  const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n\n  if ([\"Composite\"].includes(propertyMapper.type.name)) {\n    if (serializedValue[XML_ATTRKEY]) {\n      return serializedValue;\n    } else {\n      const result: any = { ...serializedValue };\n      result[XML_ATTRKEY] = xmlNamespace;\n      return result;\n    }\n  }\n  const result: any = {};\n  result[options.xmlCharKey] = serializedValue;\n  result[XML_ATTRKEY] = xmlNamespace;\n  return result;\n}\n\nfunction isSpecialXmlProperty(propertyName: string, options: Required<SerializerOptions>): boolean {\n  return [XML_ATTRKEY, options.xmlCharKey].includes(propertyName);\n}\n\nfunction deserializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  responseBody: any,\n  objectName: string,\n  options: Required<SerializerOptions>\n): any {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance: { [key: string]: any } = {};\n  const handledPropertyNames: string[] = [];\n\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName!);\n    handledPropertyNames.push(paths[0]);\n    const { serializedName, xmlName, xmlElementName } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n\n    const headerCollectionPrefix = (propertyMapper as DictionaryMapper).headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary: any = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(\n            (propertyMapper as DictionaryMapper).type.value,\n            responseBody[headerKey],\n            propertyObjectName,\n            options\n          );\n        }\n\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n        instance[key] = serializer.deserialize(\n          propertyMapper,\n          responseBody[XML_ATTRKEY][xmlName!],\n          propertyObjectName,\n          options\n        );\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        if (propertyMapper.xmlIsWrapped) {\n          /* a list of <xmlElementName> wrapped by <xmlName>\n            For the xml example below\n              <Cors>\n                <CorsRule>...</CorsRule>\n                <CorsRule>...</CorsRule>\n              </Cors>\n            the responseBody has\n              {\n                Cors: {\n                  CorsRule: [{...}, {...}]\n                }\n              }\n            xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n          */\n          const wrapped = responseBody[xmlName!];\n          const elementList = wrapped?.[xmlElementName!] ?? [];\n          instance[key] = serializer.deserialize(\n            propertyMapper,\n            elementList,\n            propertyObjectName,\n            options\n          );\n        } else {\n          const property = responseBody[propertyName!];\n          instance[key] = serializer.deserialize(\n            propertyMapper,\n            property,\n            propertyObjectName,\n            options\n          );\n        }\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      for (const item of paths) {\n        if (!res) break;\n        res = res[item];\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n      if (\n        polymorphicDiscriminator &&\n        key === polymorphicDiscriminator.clientName &&\n        propertyInstance == undefined\n      ) {\n        propertyInstance = mapper.serializedName;\n      }\n\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        const arrayInstance = serializer.deserialize(\n          propertyMapper,\n          propertyInstance,\n          propertyObjectName,\n          options\n        );\n        // Copy over any properties that have already been added into the instance, where they do\n        // not exist on the newly de-serialized array\n        for (const [k, v] of Object.entries(instance)) {\n          if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n            arrayInstance[k] = v;\n          }\n        }\n        instance = arrayInstance;\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(\n          propertyMapper,\n          propertyInstance,\n          propertyObjectName,\n          options\n        );\n        instance[key] = serializedValue;\n      }\n    }\n  }\n\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = (responsePropName: string): boolean => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(\n          additionalPropertiesMapper,\n          responseBody[responsePropName],\n          objectName + '[\"' + responsePropName + '\"]',\n          options\n        );\n      }\n    }\n  } else if (responseBody) {\n    for (const key of Object.keys(responseBody)) {\n      if (\n        instance[key] === undefined &&\n        !handledPropertyNames.includes(key) &&\n        !isSpecialXmlProperty(key, options)\n      ) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction deserializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  responseBody: any,\n  objectName: string,\n  options: Required<SerializerOptions>\n): { [key: string]: any } {\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`\n    );\n  }\n  if (responseBody) {\n    const tempDictionary: { [key: string]: any } = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\n\nfunction deserializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  responseBody: any,\n  objectName: string,\n  options: Required<SerializerOptions>\n): any[] {\n  const element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`\n    );\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(\n        element,\n        responseBody[i],\n        `${objectName}[${i}]`,\n        options\n      );\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\n\nfunction getPolymorphicMapper(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  polymorphicPropertyName: \"clientName\" | \"serializedName\"\n): CompositeMapper {\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n  if (polymorphicDiscriminator) {\n    const discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName != undefined) {\n      const discriminatorValue = object[discriminatorName];\n      if (discriminatorValue != undefined) {\n        const typeName = mapper.type.uberParent || mapper.type.className;\n        const indexDiscriminator =\n          discriminatorValue === typeName\n            ? discriminatorValue\n            : typeName + \".\" + discriminatorValue;\n        const polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\n\nfunction getPolymorphicDiscriminatorRecursively(\n  serializer: Serializer,\n  mapper: CompositeMapper\n): PolymorphicDiscriminator | undefined {\n  return (\n    mapper.type.polymorphicDiscriminator ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.className)\n  );\n}\n\nfunction getPolymorphicDiscriminatorSafely(serializer: Serializer, typeName?: string): any {\n  return (\n    typeName &&\n    serializer.modelMappers[typeName] &&\n    serializer.modelMappers[typeName].type.polymorphicDiscriminator\n  );\n}\n\n/**\n * Description of various value constraints such as integer ranges and string regex.\n */\nexport interface MapperConstraints {\n  /**\n   * The value should be less than or equal to the `InclusiveMaximum` value.\n   */\n  InclusiveMaximum?: number;\n  /**\n   * The value should be less than the `ExclusiveMaximum` value.\n   */\n  ExclusiveMaximum?: number;\n  /**\n   * The value should be greater than or equal to the `InclusiveMinimum` value.\n   */\n  InclusiveMinimum?: number;\n  /**\n   * The value should be greater than the `InclusiveMinimum` value.\n   */\n  ExclusiveMinimum?: number;\n  /**\n   * The length should be smaller than the `MaxLength`.\n   */\n  MaxLength?: number;\n  /**\n   * The length should be bigger than the `MinLength`.\n   */\n  MinLength?: number;\n  /**\n   * The value must match the pattern.\n   */\n  Pattern?: RegExp;\n  /**\n   * The value must contain fewer items than the MaxItems value.\n   */\n  MaxItems?: number;\n  /**\n   * The value must contain more items than the `MinItems` value.\n   */\n  MinItems?: number;\n  /**\n   * The value must contain only unique items.\n   */\n  UniqueItems?: true;\n  /**\n   * The value should be exactly divisible by the `MultipleOf` value.\n   */\n  MultipleOf?: number;\n}\n\n/**\n * Type of the mapper. Includes known mappers.\n */\nexport type MapperType =\n  | SimpleMapperType\n  | CompositeMapperType\n  | SequenceMapperType\n  | DictionaryMapperType\n  | EnumMapperType;\n\n/**\n * The type of a simple mapper.\n */\nexport interface SimpleMapperType {\n  /**\n   * Name of the type of the property.\n   */\n  name:\n    | \"Base64Url\"\n    | \"Boolean\"\n    | \"ByteArray\"\n    | \"Date\"\n    | \"DateTime\"\n    | \"DateTimeRfc1123\"\n    | \"Object\"\n    | \"Stream\"\n    | \"String\"\n    | \"TimeSpan\"\n    | \"UnixTime\"\n    | \"Uuid\"\n    | \"Number\"\n    | \"any\";\n}\n\n/**\n * Helps build a mapper that describes how to map a set of properties of an object based on other mappers.\n *\n * Only one of the following properties should be present: `className`, `modelProperties` and `additionalProperties`.\n */\nexport interface CompositeMapperType {\n  /**\n   * Name of the composite mapper type.\n   */\n  name: \"Composite\";\n\n  /**\n   * Use `className` to reference another type definition.\n   */\n  className?: string;\n\n  /**\n   * Use `modelProperties` when the reference to the other type has been resolved.\n   */\n  modelProperties?: { [propertyName: string]: Mapper };\n\n  /**\n   * Used when a model has `additionalProperties: true`. Allows the generic processing of unnamed model properties on the response object.\n   */\n  additionalProperties?: Mapper;\n\n  /**\n   * The name of the top-most parent scheme, the one that has no parents.\n   */\n  uberParent?: string;\n\n  /**\n   * A polymorphic discriminator.\n   */\n  polymorphicDiscriminator?: PolymorphicDiscriminator;\n}\n\n/**\n * Helps build a mapper that describes how to parse a sequence of mapped values.\n */\nexport interface SequenceMapperType {\n  /**\n   * Name of the sequence type mapper.\n   */\n  name: \"Sequence\";\n  /**\n   * The mapper to use to map each one of the properties of the sequence.\n   */\n  element: Mapper;\n}\n\n/**\n * Helps build a mapper that describes how to parse a dictionary of mapped values.\n */\nexport interface DictionaryMapperType {\n  /**\n   * Name of the sequence type mapper.\n   */\n  name: \"Dictionary\";\n  /**\n   * The mapper to use to map the value of each property in the dictionary.\n   */\n  value: Mapper;\n}\n\n/**\n * Helps build a mapper that describes how to parse an enum value.\n */\nexport interface EnumMapperType {\n  /**\n   * Name of the enum type mapper.\n   */\n  name: \"Enum\";\n  /**\n   * Values allowed by this mapper.\n   */\n  allowedValues: any[];\n}\n\n/**\n * The base definition of a mapper. Can be used for XML and plain JavaScript objects.\n */\nexport interface BaseMapper {\n  /**\n   * Name for the xml element\n   */\n  xmlName?: string;\n  /**\n   * Xml element namespace\n   */\n  xmlNamespace?: string;\n  /**\n   * Xml element namespace prefix\n   */\n  xmlNamespacePrefix?: string;\n  /**\n   * Determines if the current property should be serialized as an attribute of the parent xml element\n   */\n  xmlIsAttribute?: boolean;\n  /**\n   * Name for the xml elements when serializing an array\n   */\n  xmlElementName?: string;\n  /**\n   * Whether or not the current property should have a wrapping XML element\n   */\n  xmlIsWrapped?: boolean;\n  /**\n   * Whether or not the current property is readonly\n   */\n  readOnly?: boolean;\n  /**\n   * Whether or not the current property is a constant\n   */\n  isConstant?: boolean;\n  /**\n   * Whether or not the current property is required\n   */\n  required?: boolean;\n  /**\n   * Whether or not the current property allows mull as a value\n   */\n  nullable?: boolean;\n  /**\n   * The name to use when serializing\n   */\n  serializedName?: string;\n  /**\n   * Type of the mapper\n   */\n  type: MapperType;\n  /**\n   * Default value when one is not explicitly provided\n   */\n  defaultValue?: any;\n  /**\n   * Constraints to test the current value against\n   */\n  constraints?: MapperConstraints;\n}\n\n/**\n * Mappers are definitions of the data models used in the library.\n * These data models are part of the Operation or Client definitions in the responses or parameters.\n */\nexport type Mapper = BaseMapper | CompositeMapper | SequenceMapper | DictionaryMapper | EnumMapper;\n\n/**\n * Used to disambiguate discriminated type unions.\n * For example, if response can have many shapes but also includes a 'kind' field (or similar),\n * that field can be used to determine how to deserialize the response to the correct type.\n */\nexport interface PolymorphicDiscriminator {\n  /**\n   * Name of the discriminant property in the original JSON payload, e.g. `@odata.kind`.\n   */\n  serializedName: string;\n  /**\n   * Name to use on the resulting object instead of the original property name.\n   * Useful since the JSON property could be difficult to work with.\n   * For example: For a field received as `@odata.kind`, the final object could instead include a property simply named `kind`.\n   */\n  clientName: string;\n  /**\n   * It may contain any other property.\n   */\n  [key: string]: string;\n}\n\n/**\n * A mapper composed of other mappers.\n */\nexport interface CompositeMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `CompositeMapper`.\n   */\n  type: CompositeMapperType;\n}\n\n/**\n * A mapper describing arrays.\n */\nexport interface SequenceMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `SequenceMapper`.\n   */\n  type: SequenceMapperType;\n}\n\n/**\n * A mapper describing plain JavaScript objects used as key/value pairs.\n */\nexport interface DictionaryMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `DictionaryMapper`.\n   */\n  type: DictionaryMapperType;\n  /**\n   * Optionally, a prefix to add to the header collection.\n   */\n  headerCollectionPrefix?: string;\n}\n\n/**\n * A mapper describing an enum value.\n */\nexport interface EnumMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `EnumMapper`.\n   */\n  type: EnumMapperType;\n}\n\n/**\n * An interface representing an URL parameter value.\n */\nexport interface UrlParameterValue {\n  /**\n   * The URL value.\n   */\n  value: string;\n  /**\n   * Whether to keep or skip URL encoding.\n   */\n  skipUrlEncoding: boolean;\n}\n\n/**\n * Utility function that serializes an object that might contain binary information into a plain object, array or a string.\n */\nexport function serializeObject(toSerialize: unknown): any {\n  const castToSerialize = toSerialize as Record<string, unknown>;\n  if (toSerialize == undefined) return undefined;\n  if (toSerialize instanceof Uint8Array) {\n    toSerialize = base64.encodeByteArray(toSerialize);\n    return toSerialize;\n  } else if (toSerialize instanceof Date) {\n    return toSerialize.toISOString();\n  } else if (Array.isArray(toSerialize)) {\n    const array = [];\n    for (let i = 0; i < toSerialize.length; i++) {\n      array.push(serializeObject(toSerialize[i]));\n    }\n    return array;\n  } else if (typeof toSerialize === \"object\") {\n    const dictionary: { [key: string]: any } = {};\n    for (const property in toSerialize) {\n      dictionary[property] = serializeObject(castToSerialize[property]);\n    }\n    return dictionary;\n  }\n  return toSerialize;\n}\n\n/**\n * Utility function to create a K:V from a list of strings\n */\nfunction strEnum<T extends string>(o: Array<T>): { [K in T]: K } {\n  const result: any = {};\n  for (const key of o) {\n    result[key] = key;\n  }\n  return result;\n}\n\n/**\n * String enum containing the string types of property mappers.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const MapperType = strEnum([\n  \"Base64Url\",\n  \"Boolean\",\n  \"ByteArray\",\n  \"Composite\",\n  \"Date\",\n  \"DateTime\",\n  \"DateTimeRfc1123\",\n  \"Dictionary\",\n  \"Enum\",\n  \"Number\",\n  \"Object\",\n  \"Sequence\",\n  \"String\",\n  \"Stream\",\n  \"TimeSpan\",\n  \"UnixTime\",\n]);\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Encodes a string in base64 format.\n * @param value - The string to encode\n */\nexport function encodeString(value: string): string {\n  return btoa(value);\n}\n\n/**\n * Encodes a byte array in base64 format.\n * @param value - The Uint8Aray to encode\n */\nexport function encodeByteArray(value: Uint8Array): string {\n  let str = \"\";\n  for (let i = 0; i < value.length; i++) {\n    str += String.fromCharCode(value[i]);\n  }\n  return btoa(str);\n}\n\n/**\n * Decodes a base64 string into a byte array.\n * @param value - The base64 string to decode\n */\nexport function decodeString(value: string): Uint8Array {\n  const byteString = atob(value);\n  const arr = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    arr[i] = byteString.charCodeAt(i);\n  }\n  return arr;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Constants } from \"./constants\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { RestError } from \"../restError\";\nimport { WebResourceLike } from \"../webResource\";\nimport { XML_ATTRKEY } from \"./serializer.common\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst validUuidRegex =\n  /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n\n/**\n * A constant that indicates whether the environment is node.js or browser based.\n */\nexport const isNode =\n  typeof process !== \"undefined\" &&\n  !!process.version &&\n  !!process.versions &&\n  !!process.versions.node;\n\n/**\n * Checks if a parsed URL is HTTPS\n *\n * @param urlToCheck - The url to check\n * @returns True if the URL is HTTPS; false otherwise.\n */\nexport function urlIsHTTPS(urlToCheck: { protocol: string }): boolean {\n  return urlToCheck.protocol.toLowerCase() === Constants.HTTPS;\n}\n\n/**\n * Encodes an URI.\n *\n * @param uri - The URI to be encoded.\n * @returns The encoded URI.\n */\nexport function encodeUri(uri: string): string {\n  return encodeURIComponent(uri)\n    .replace(/!/g, \"%21\")\n    .replace(/\"/g, \"%27\")\n    .replace(/\\(/g, \"%28\")\n    .replace(/\\)/g, \"%29\")\n    .replace(/\\*/g, \"%2A\");\n}\n\n/**\n * Returns a stripped version of the Http Response which only contains body,\n * headers and the status.\n *\n * @param response - The Http Response\n * @returns The stripped version of Http Response.\n */\nexport function stripResponse(response: HttpOperationResponse): any {\n  const strippedResponse: any = {};\n  strippedResponse.body = response.bodyAsText;\n  strippedResponse.headers = response.headers;\n  strippedResponse.status = response.status;\n  return strippedResponse;\n}\n\n/**\n * Returns a stripped version of the Http Request that does not contain the\n * Authorization header.\n *\n * @param request - The Http Request object\n * @returns The stripped version of Http Request.\n */\nexport function stripRequest(request: WebResourceLike): WebResourceLike {\n  const strippedRequest = request.clone();\n  if (strippedRequest.headers) {\n    strippedRequest.headers.remove(\"authorization\");\n  }\n  return strippedRequest;\n}\n\n/**\n * Validates the given uuid as a string\n *\n * @param uuid - The uuid as a string that needs to be validated\n * @returns True if the uuid is valid; false otherwise.\n */\nexport function isValidUuid(uuid: string): boolean {\n  return validUuidRegex.test(uuid);\n}\n\n/**\n * Generated UUID\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function generateUuid(): string {\n  return uuidv4();\n}\n\n/**\n * Executes an array of promises sequentially. Inspiration of this method is here:\n * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!\n *\n * @param promiseFactories - An array of promise factories(A function that return a promise)\n * @param kickstart - Input to the first promise that is used to kickstart the promise chain.\n * If not provided then the promise chain starts with undefined.\n * @returns A chain of resolved or rejected promises\n */\nexport function executePromisesSequentially(\n  promiseFactories: Array<any>,\n  kickstart: unknown\n): Promise<any> {\n  let result = Promise.resolve(kickstart);\n  promiseFactories.forEach((promiseFactory) => {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n\n/**\n * Service callback that is returned for REST requests initiated by the service client.\n */\nexport interface ServiceCallback<TResult> {\n  /**\n   * A method that will be invoked as a callback to a service function.\n   * @param err - The error occurred if any, while executing the request; otherwise null.\n   * @param result - The deserialized response body if an error did not occur.\n   * @param request - The raw/actual request sent to the server if an error did not occur.\n   * @param response - The raw/actual response from the server if an error did not occur.\n   */\n  (\n    err: Error | RestError | null,\n    result?: TResult,\n    request?: WebResourceLike,\n    response?: HttpOperationResponse\n  ): void;\n}\n\n/**\n * Converts a Promise to a callback.\n * @param promise - The Promise to be converted to a callback\n * @returns A function that takes the callback `(cb: Function) => void`\n * @deprecated generated code should instead depend on responseToBody\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function promiseToCallback(promise: Promise<any>): (cb: Function) => void {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  return (cb: Function): void => {\n    promise\n      .then((data: any) => {\n        // eslint-disable-next-line promise/no-callback-in-promise\n        return cb(undefined, data);\n      })\n      .catch((err: Error) => {\n        // eslint-disable-next-line promise/no-callback-in-promise\n        cb(err);\n      });\n  };\n}\n\n/**\n * Converts a Promise to a service callback.\n * @param promise - The Promise of HttpOperationResponse to be converted to a service callback\n * @returns A function that takes the service callback (cb: ServiceCallback<T>): void\n */\nexport function promiseToServiceCallback<T>(\n  promise: Promise<HttpOperationResponse>\n): (cb: ServiceCallback<T>) => void {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: ServiceCallback<T>): void => {\n    promise\n      .then((data: HttpOperationResponse) => {\n        return process.nextTick(cb, undefined, data.parsedBody as T, data.request, data);\n      })\n      .catch((err: Error) => {\n        process.nextTick(cb, err);\n      });\n  };\n}\n\nexport function prepareXMLRootList(\n  obj: unknown,\n  elementName: string,\n  xmlNamespaceKey?: string,\n  xmlNamespace?: string\n): { [s: string]: any } {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n\n  if (!xmlNamespaceKey || !xmlNamespace) {\n    return { [elementName]: obj };\n  }\n\n  const result = { [elementName]: obj };\n  result[XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n  return result;\n}\n\n/**\n * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor\n * @param targetCtor - The target object on which the properties need to be applied.\n * @param sourceCtors - An array of source objects from which the properties need to be taken.\n */\nexport function applyMixins(targetCtorParam: unknown, sourceCtors: any[]): void {\n  const castTargetCtorParam = targetCtorParam as {\n    prototype: Record<string, unknown>;\n  };\n  sourceCtors.forEach((sourceCtor) => {\n    Object.getOwnPropertyNames(sourceCtor.prototype).forEach((name) => {\n      castTargetCtorParam.prototype[name] = sourceCtor.prototype[name];\n    });\n  });\n}\n\nconst validateISODuration =\n  /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n/**\n * Indicates whether the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @returns `true` if valid, `false` otherwise.\n */\nexport function isDuration(value: string): boolean {\n  return validateISODuration.test(value);\n}\n\n/**\n * Replace all of the instances of searchValue in value with the provided replaceValue.\n * @param value - The value to search and replace in.\n * @param searchValue - The value to search for in the value argument.\n * @param replaceValue - The value to replace searchValue with in the value argument.\n * @returns The value where each instance of searchValue was replaced with replacedValue.\n */\nexport function replaceAll(\n  value: string | undefined,\n  searchValue: string,\n  replaceValue: string\n): string | undefined {\n  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || \"\");\n}\n\n/**\n * Determines whether the given entity is a basic/primitive type\n * (string, number, boolean, null, undefined).\n * @param value - Any entity\n * @returns true is it is primitive type, false otherwise.\n */\nexport function isPrimitiveType(value: unknown): boolean {\n  return (typeof value !== \"object\" && typeof value !== \"function\") || value === null;\n}\n\nexport function getEnvironmentValue(name: string): string | undefined {\n  if (process.env[name]) {\n    return process.env[name];\n  } else if (process.env[name.toLowerCase()]) {\n    return process.env[name.toLowerCase()];\n  }\n  return undefined;\n}\n\n/**\n * @internal\n */\nexport type UnknownObject = { [s: string]: unknown };\n\n/**\n * @internal\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nexport function isObject(input: unknown): input is UnknownObject {\n  return (\n    typeof input === \"object\" &&\n    input !== null &&\n    !Array.isArray(input) &&\n    !(input instanceof RegExp) &&\n    !(input instanceof Date)\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A set of constants used internally when processing requests.\n */\nexport const Constants = {\n  /**\n   * The core-http version\n   */\n  coreHttpVersion: \"2.2.4\",\n\n  /**\n   * Specifies HTTP.\n   */\n  HTTP: \"http:\",\n\n  /**\n   * Specifies HTTPS.\n   */\n  HTTPS: \"https:\",\n\n  /**\n   * Specifies HTTP Proxy.\n   */\n  HTTP_PROXY: \"HTTP_PROXY\",\n\n  /**\n   * Specifies HTTPS Proxy.\n   */\n  HTTPS_PROXY: \"HTTPS_PROXY\",\n\n  /**\n   * Specifies NO Proxy.\n   */\n  NO_PROXY: \"NO_PROXY\",\n\n  /**\n   * Specifies ALL Proxy.\n   */\n  ALL_PROXY: \"ALL_PROXY\",\n\n  HttpConstants: {\n    /**\n     * Http Verbs\n     */\n    HttpVerbs: {\n      PUT: \"PUT\",\n      GET: \"GET\",\n      DELETE: \"DELETE\",\n      POST: \"POST\",\n      MERGE: \"MERGE\",\n      HEAD: \"HEAD\",\n      PATCH: \"PATCH\",\n    },\n\n    StatusCodes: {\n      TooManyRequests: 429,\n      ServiceUnavailable: 503,\n    },\n  },\n\n  /**\n   * Defines constants for use with HTTP headers.\n   */\n  HeaderConstants: {\n    /**\n     * The Authorization header.\n     */\n    AUTHORIZATION: \"authorization\",\n\n    AUTHORIZATION_SCHEME: \"Bearer\",\n\n    /**\n     * The Retry-After response-header field can be used with a 503 (Service\n     * Unavailable) or 349 (Too Many Requests) responses to indicate how long\n     * the service is expected to be unavailable to the requesting client.\n     */\n    RETRY_AFTER: \"Retry-After\",\n\n    /**\n     * The UserAgent header.\n     */\n    USER_AGENT: \"User-Agent\",\n  },\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Default key used to access the XML attributes.\n */\nexport const XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nexport const XML_CHARKEY = \"_\";\n\n/**\n * Options to govern behavior of xml parser and builder.\n */\nexport interface SerializerOptions {\n  /**\n   * indicates the name of the root element in the resulting XML when building XML.\n   */\n  rootName?: string;\n  /**\n   * indicates whether the root element is to be included or not in the output when parsing XML.\n   */\n  includeRoot?: boolean;\n  /**\n   * key used to access the XML value content when parsing XML.\n   */\n  xmlCharKey?: string;\n}\n","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpHeaders, HttpHeadersLike } from \"./httpHeaders\";\nimport { TransferProgressEvent, WebResourceLike } from \"./webResource\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { HttpClient } from \"./httpClient\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { RestError } from \"./restError\";\n\n/**\n * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.\n */\nexport class XhrHttpClient implements HttpClient {\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    const xhr = new XMLHttpRequest();\n\n    if (request.proxySettings) {\n      throw new Error(\"HTTP proxy is not supported in browser environment\");\n    }\n\n    const abortSignal = request.abortSignal;\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        return Promise.reject(new AbortError(\"The operation was aborted.\"));\n      }\n\n      const listener = (): void => {\n        xhr.abort();\n      };\n      abortSignal.addEventListener(\"abort\", listener);\n      xhr.addEventListener(\"readystatechange\", () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          abortSignal.removeEventListener(\"abort\", listener);\n        }\n      });\n    }\n\n    addProgressListener(xhr.upload, request.onUploadProgress);\n    addProgressListener(xhr, request.onDownloadProgress);\n\n    if (request.formData) {\n      const formData = request.formData;\n      const requestForm = new FormData();\n      const appendFormValue = (key: string, value: any): void => {\n        if (\n          value &&\n          Object.prototype.hasOwnProperty.call(value, \"value\") &&\n          Object.prototype.hasOwnProperty.call(value, \"options\")\n        ) {\n          requestForm.append(key, value.value, value.options);\n        } else {\n          requestForm.append(key, value);\n        }\n      };\n      for (const formKey of Object.keys(formData)) {\n        const formValue = formData[formKey];\n        if (Array.isArray(formValue)) {\n          for (let j = 0; j < formValue.length; j++) {\n            appendFormValue(formKey, formValue[j]);\n          }\n        } else {\n          appendFormValue(formKey, formValue);\n        }\n      }\n\n      request.body = requestForm;\n      request.formData = undefined;\n      const contentType = request.headers.get(\"Content-Type\");\n      if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n        // browser will automatically apply a suitable content-type header\n        request.headers.remove(\"Content-Type\");\n      }\n    }\n\n    xhr.open(request.method, request.url);\n    xhr.timeout = request.timeout;\n    xhr.withCredentials = request.withCredentials;\n    for (const header of request.headers.headersArray()) {\n      xhr.setRequestHeader(header.name, header.value);\n    }\n\n    xhr.responseType =\n      request.streamResponseStatusCodes?.size || request.streamResponseBody ? \"blob\" : \"text\";\n\n    // tslint:disable-next-line:no-null-keyword\n    xhr.send(request.body === undefined ? null : request.body);\n\n    if (xhr.responseType === \"blob\") {\n      return new Promise((resolve, reject) => {\n        handleBlobResponse(xhr, request, resolve, reject);\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    } else {\n      return new Promise(function (resolve, reject) {\n        xhr.addEventListener(\"load\", () =>\n          resolve({\n            request,\n            status: xhr.status,\n            headers: parseHeaders(xhr),\n            bodyAsText: xhr.responseText,\n          })\n        );\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    }\n  }\n}\n\nfunction handleBlobResponse(\n  xhr: XMLHttpRequest,\n  request: WebResourceLike,\n  res: (value: HttpOperationResponse | PromiseLike<HttpOperationResponse>) => void,\n  rej: (reason?: any) => void\n): void {\n  xhr.addEventListener(\"readystatechange\", () => {\n    // Resolve as soon as headers are loaded\n    if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n      if (request.streamResponseBody || request.streamResponseStatusCodes?.has(xhr.status)) {\n        const blobBody = new Promise<Blob>((resolve, reject) => {\n          xhr.addEventListener(\"load\", () => {\n            resolve(xhr.response);\n          });\n          rejectOnTerminalEvent(request, xhr, reject);\n        });\n        res({\n          request,\n          status: xhr.status,\n          headers: parseHeaders(xhr),\n          blobBody,\n        });\n      } else {\n        xhr.addEventListener(\"load\", () => {\n          // xhr.response is of Blob type if the request is sent with xhr.responseType === \"blob\"\n          // but the status code is not one of the stream response status codes,\n          // so treat it as text and convert from Blob to text\n          if (xhr.response) {\n            // Blob.text() is not supported in IE so using FileReader instead\n            const reader = new FileReader();\n            reader.onload = function (e) {\n              const text = e.target?.result as string;\n              res({\n                request,\n                status: xhr.status,\n                headers: parseHeaders(xhr),\n                bodyAsText: text,\n              });\n            };\n            reader.onerror = function (_e) {\n              rej(reader.error);\n            };\n            reader.readAsText(xhr.response, \"UTF-8\");\n          } else {\n            res({\n              request,\n              status: xhr.status,\n              headers: parseHeaders(xhr),\n            });\n          }\n        });\n      }\n    }\n  });\n}\n\nfunction addProgressListener(\n  xhr: XMLHttpRequestEventTarget,\n  listener?: (progress: TransferProgressEvent) => void\n): void {\n  if (listener) {\n    xhr.addEventListener(\"progress\", (rawEvent) =>\n      listener({\n        loadedBytes: rawEvent.loaded,\n      })\n    );\n  }\n}\n\n// exported locally for testing\nexport function parseHeaders(xhr: XMLHttpRequest): HttpHeadersLike {\n  const responseHeaders = new HttpHeaders();\n  const headerLines = xhr\n    .getAllResponseHeaders()\n    .trim()\n    .split(/[\\r\\n]+/);\n  for (const line of headerLines) {\n    const index = line.indexOf(\":\");\n    const headerName = line.slice(0, index);\n    const headerValue = line.slice(index + 2);\n    responseHeaders.set(headerName, headerValue);\n  }\n  return responseHeaders;\n}\n\nfunction rejectOnTerminalEvent(\n  request: WebResourceLike,\n  xhr: XMLHttpRequest,\n  reject: (err: any) => void\n): void {\n  xhr.addEventListener(\"error\", () =>\n    reject(\n      new RestError(\n        `Failed to send request to ${request.url}`,\n        RestError.REQUEST_SEND_ERROR,\n        undefined,\n        request\n      )\n    )\n  );\n  const abortError = new AbortError(\"The operation was aborted.\");\n  xhr.addEventListener(\"abort\", () => reject(abortError));\n  xhr.addEventListener(\"timeout\", () => reject(abortError));\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignal, abortSignal, AbortSignalLike } from \"./AbortSignal\";\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"AbortError\";\n  }\n}\n\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\nexport class AbortController {\n  private _signal: AbortSignal;\n\n  /**\n   * @param parentSignals - The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   */\n  constructor(parentSignals?: AbortSignalLike[]);\n  /**\n   * @param parentSignals - The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   */\n  constructor(...parentSignals: AbortSignalLike[]);\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(parentSignals?: any) {\n    this._signal = new AbortSignal();\n\n    if (!parentSignals) {\n      return;\n    }\n    // coerce parentSignals into an array\n    if (!Array.isArray(parentSignals)) {\n      // eslint-disable-next-line prefer-rest-params\n      parentSignals = arguments;\n    }\n    for (const parentSignal of parentSignals) {\n      // if the parent signal has already had abort() called,\n      // then call abort on this signal as well.\n      if (parentSignal.aborted) {\n        this.abort();\n      } else {\n        // when the parent signal aborts, this signal should as well.\n        parentSignal.addEventListener(\"abort\", () => {\n          this.abort();\n        });\n      }\n    }\n  }\n\n  /**\n   * The AbortSignal associated with this controller that will signal aborted\n   * when the abort method is called on this controller.\n   *\n   * @readonly\n   */\n  public get signal(): AbortSignal {\n    return this._signal;\n  }\n\n  /**\n   * Signal that any operations passed this controller's associated abort signal\n   * to cancel any remaining work and throw an `AbortError`.\n   */\n  abort(): void {\n    abortSignal(this._signal);\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will abort after the provided ms.\n   * @param ms - Elapsed time in milliseconds to trigger an abort.\n   */\n  public static timeout(ms: number): AbortSignal {\n    const signal = new AbortSignal();\n    const timer = setTimeout(abortSignal, ms, signal);\n    // Prevent the active Timer from keeping the Node.js event loop active.\n    if (typeof timer.unref === \"function\") {\n      timer.unref();\n    }\n    return signal;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../shims-public.d.ts\" />\n\ntype AbortEventListener = (this: AbortSignalLike, ev?: any) => any;\n\nconst listenersMap = new WeakMap<AbortSignal, AbortEventListener[]>();\nconst abortedMap = new WeakMap<AbortSignal, boolean>();\n\n/**\n * Allows the request to be aborted upon firing of the \"abort\" event.\n * Compatible with the browser built-in AbortSignal and common polyfills.\n */\nexport interface AbortSignalLike {\n  /**\n   * Indicates if the signal has already been aborted.\n   */\n  readonly aborted: boolean;\n  /**\n   * Add new \"abort\" event listener, only support \"abort\" event.\n   */\n  addEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   */\n  removeEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n}\n\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\nexport class AbortSignal implements AbortSignalLike {\n  constructor() {\n    listenersMap.set(this, []);\n    abortedMap.set(this, false);\n  }\n\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   */\n  public get aborted(): boolean {\n    if (!abortedMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    return abortedMap.get(this)!;\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will never be aborted.\n   *\n   * @readonly\n   */\n  public static get none(): AbortSignal {\n    return new AbortSignal();\n  }\n\n  /**\n   * onabort event listener.\n   */\n  public onabort: ((ev?: Event) => any) | null = null;\n\n  /**\n   * Added new \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be added\n   */\n  public addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n    listeners.push(listener);\n  }\n\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be removed\n   */\n  public removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Dispatches a synthetic event to the AbortSignal.\n   */\n  dispatchEvent(_event: Event): boolean {\n    throw new Error(\n      \"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\"\n    );\n  }\n}\n\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nexport function abortSignal(signal: AbortSignal): void {\n  if (signal.aborted) {\n    return;\n  }\n\n  if (signal.onabort) {\n    signal.onabort.call(signal);\n  }\n\n  const listeners = listenersMap.get(signal)!;\n  if (listeners) {\n    // Create a copy of listeners so mutations to the array\n    // (e.g. via removeListener calls) don't affect the listeners\n    // we invoke.\n    listeners.slice().forEach((listener) => {\n      listener.call(signal, { type: \"abort\" });\n    });\n  }\n\n  abortedMap.set(signal, true);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { Sanitizer } from \"./util/sanitizer\";\nimport { WebResourceLike } from \"./webResource\";\nimport { custom } from \"./util/inspect\";\n\nconst errorSanitizer = new Sanitizer();\n\n/**\n * An error resulting from an HTTP request to a service endpoint.\n */\nexport class RestError extends Error {\n  /**\n   * A constant string to identify errors that may arise when making an HTTP request that indicates an issue with the transport layer (e.g. the hostname of the URL cannot be resolved via DNS.)\n   */\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  /**\n   * A constant string to identify errors that may arise from parsing an incoming HTTP response. Usually indicates a malformed HTTP body, such as an encoded JSON payload that is incomplete.\n   */\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  /**\n   * The error code, if any. Can be one of the static error code properties (REQUEST_SEND_ERROR / PARSE_ERROR) or can be a string code from an underlying system call (E_NOENT).\n   */\n  code?: string;\n  /**\n   * The HTTP status code of the response, if one was returned.\n   */\n  statusCode?: number;\n  /**\n   * Outgoing request.\n   */\n  request?: WebResourceLike;\n  /**\n   * Incoming response.\n   */\n  response?: HttpOperationResponse;\n  /**\n   * Any additional details. In the case of deserialization errors, can be the processed response.\n   */\n  details?: unknown;\n  constructor(\n    message: string,\n    code?: string,\n    statusCode?: number,\n    request?: WebResourceLike,\n    response?: HttpOperationResponse\n  ) {\n    super(message);\n    this.name = \"RestError\";\n    this.code = code;\n    this.statusCode = statusCode;\n    this.request = request;\n    this.response = response;\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n\n  /**\n   * Logging method for util.inspect in Node\n   */\n  [custom](): string {\n    return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { URLBuilder, URLQuery } from \"../url\";\nimport { UnknownObject, isObject } from \"./utils\";\n\nexport interface SanitizerOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n}\n\nconst RedactedString = \"REDACTED\";\n\nconst defaultAllowedHeaderNames = [\n  \"x-ms-client-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-useragent\",\n  \"x-ms-correlation-request-id\",\n  \"x-ms-request-id\",\n  \"client-request-id\",\n  \"ms-cv\",\n  \"return-client-request-id\",\n  \"traceparent\",\n\n  \"Access-Control-Allow-Credentials\",\n  \"Access-Control-Allow-Headers\",\n  \"Access-Control-Allow-Methods\",\n  \"Access-Control-Allow-Origin\",\n  \"Access-Control-Expose-Headers\",\n  \"Access-Control-Max-Age\",\n  \"Access-Control-Request-Headers\",\n  \"Access-Control-Request-Method\",\n  \"Origin\",\n\n  \"Accept\",\n  \"Accept-Encoding\",\n  \"Cache-Control\",\n  \"Connection\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"ETag\",\n  \"Expires\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"Last-Modified\",\n  \"Pragma\",\n  \"Request-Id\",\n  \"Retry-After\",\n  \"Server\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n];\n\nconst defaultAllowedQueryParameters: string[] = [\"api-version\"];\n\nexport class Sanitizer {\n  public allowedHeaderNames: Set<string>;\n  public allowedQueryParameters: Set<string>;\n\n  constructor({ allowedHeaderNames = [], allowedQueryParameters = [] }: SanitizerOptions = {}) {\n    allowedHeaderNames = Array.isArray(allowedHeaderNames)\n      ? defaultAllowedHeaderNames.concat(allowedHeaderNames)\n      : defaultAllowedHeaderNames;\n\n    allowedQueryParameters = Array.isArray(allowedQueryParameters)\n      ? defaultAllowedQueryParameters.concat(allowedQueryParameters)\n      : defaultAllowedQueryParameters;\n\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n  }\n\n  public sanitize(obj: unknown): string {\n    const seen = new Set<unknown>();\n    return JSON.stringify(\n      obj,\n      (key: string, value: unknown) => {\n        // Ensure Errors include their interesting non-enumerable members\n        if (value instanceof Error) {\n          return {\n            ...value,\n            name: value.name,\n            message: value.message,\n          };\n        }\n\n        if (key === \"_headersMap\") {\n          return this.sanitizeHeaders(value as UnknownObject);\n        } else if (key === \"url\") {\n          return this.sanitizeUrl(value as string);\n        } else if (key === \"query\") {\n          return this.sanitizeQuery(value as UnknownObject);\n        } else if (key === \"body\") {\n          // Don't log the request body\n          return undefined;\n        } else if (key === \"response\") {\n          // Don't log response again\n          return undefined;\n        } else if (key === \"operationSpec\") {\n          // When using sendOperationRequest, the request carries a massive\n          // field with the autorest spec. No need to log it.\n          return undefined;\n        } else if (Array.isArray(value) || isObject(value)) {\n          if (seen.has(value)) {\n            return \"[Circular]\";\n          }\n          seen.add(value);\n        }\n\n        return value;\n      },\n      2\n    );\n  }\n\n  private sanitizeHeaders(value: UnknownObject): UnknownObject {\n    return this.sanitizeObject(value, this.allowedHeaderNames, (v, k) => v[k].value);\n  }\n\n  private sanitizeQuery(value: UnknownObject): UnknownObject {\n    return this.sanitizeObject(value, this.allowedQueryParameters, (v, k) => v[k]);\n  }\n\n  private sanitizeObject(\n    value: UnknownObject,\n    allowedKeys: Set<string>,\n    accessor: (value: any, key: string) => any\n  ): UnknownObject {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized: UnknownObject = {};\n\n    for (const k of Object.keys(value)) {\n      if (allowedKeys.has(k.toLowerCase())) {\n        sanitized[k] = accessor(value, k);\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n\n  private sanitizeUrl(value: string): string {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n\n    const urlBuilder = URLBuilder.parse(value);\n    const queryString = urlBuilder.getQuery();\n\n    if (!queryString) {\n      return value;\n    }\n\n    const query = URLQuery.parse(queryString);\n    for (const k of query.keys()) {\n      if (!this.allowedQueryParameters.has(k.toLowerCase())) {\n        query.set(k, RedactedString);\n      }\n    }\n\n    urlBuilder.setQuery(query.toString());\n    return urlBuilder.toString();\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { replaceAll } from \"./util/utils\";\n\nexport { URL } from \"./util/url\";\n\ntype URLQueryParseState = \"ParameterName\" | \"ParameterValue\";\n\n/**\n * A class that handles the query portion of a URLBuilder.\n */\nexport class URLQuery {\n  private readonly _rawQuery: { [queryParameterName: string]: string | string[] } = {};\n\n  /**\n   * Get whether or not there any query parameters in this URLQuery.\n   */\n  public any(): boolean {\n    return Object.keys(this._rawQuery).length > 0;\n  }\n\n  /**\n   * Get the keys of the query string.\n   */\n  public keys(): string[] {\n    return Object.keys(this._rawQuery);\n  }\n\n  /**\n   * Set a query parameter with the provided name and value. If the parameterValue is undefined or\n   * empty, then this will attempt to remove an existing query parameter with the provided\n   * parameterName.\n   */\n  public set(parameterName: string, parameterValue: unknown): void {\n    const caseParameterValue = parameterValue as {\n      toString: () => string;\n    };\n    if (parameterName) {\n      if (caseParameterValue !== undefined && caseParameterValue !== null) {\n        const newValue = Array.isArray(caseParameterValue)\n          ? caseParameterValue\n          : caseParameterValue.toString();\n        this._rawQuery[parameterName] = newValue;\n      } else {\n        delete this._rawQuery[parameterName];\n      }\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided name. If no parameter exists with the\n   * provided parameter name, then undefined will be returned.\n   */\n  public get(parameterName: string): string | string[] | undefined {\n    return parameterName ? this._rawQuery[parameterName] : undefined;\n  }\n\n  /**\n   * Get the string representation of this query. The return value will not start with a \"?\".\n   */\n  public toString(): string {\n    let result = \"\";\n    for (const parameterName in this._rawQuery) {\n      if (result) {\n        result += \"&\";\n      }\n      const parameterValue = this._rawQuery[parameterName];\n      if (Array.isArray(parameterValue)) {\n        const parameterStrings = [];\n        for (const parameterValueElement of parameterValue) {\n          parameterStrings.push(`${parameterName}=${parameterValueElement}`);\n        }\n        result += parameterStrings.join(\"&\");\n      } else {\n        result += `${parameterName}=${parameterValue}`;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Parse a URLQuery from the provided text.\n   */\n  public static parse(text: string): URLQuery {\n    const result = new URLQuery();\n\n    if (text) {\n      if (text.startsWith(\"?\")) {\n        text = text.substring(1);\n      }\n\n      let currentState: URLQueryParseState = \"ParameterName\";\n\n      let parameterName = \"\";\n      let parameterValue = \"\";\n      for (let i = 0; i < text.length; ++i) {\n        const currentCharacter: string = text[i];\n        switch (currentState) {\n          case \"ParameterName\":\n            switch (currentCharacter) {\n              case \"=\":\n                currentState = \"ParameterValue\";\n                break;\n\n              case \"&\":\n                parameterName = \"\";\n                parameterValue = \"\";\n                break;\n\n              default:\n                parameterName += currentCharacter;\n                break;\n            }\n            break;\n\n          case \"ParameterValue\":\n            switch (currentCharacter) {\n              case \"&\":\n                result.set(parameterName, parameterValue);\n                parameterName = \"\";\n                parameterValue = \"\";\n                currentState = \"ParameterName\";\n                break;\n\n              default:\n                parameterValue += currentCharacter;\n                break;\n            }\n            break;\n\n          default:\n            throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n        }\n      }\n      if (currentState === \"ParameterValue\") {\n        result.set(parameterName, parameterValue);\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * A class that handles creating, modifying, and parsing URLs.\n */\nexport class URLBuilder {\n  private _scheme: string | undefined;\n  private _host: string | undefined;\n  private _port: string | undefined;\n  private _path: string | undefined;\n  private _query: URLQuery | undefined;\n\n  /**\n   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\n   * (such as a host, port, path, or query), those parts will be added to this URL as well.\n   */\n  public setScheme(scheme: string | undefined): void {\n    if (!scheme) {\n      this._scheme = undefined;\n    } else {\n      this.set(scheme, \"SCHEME\");\n    }\n  }\n\n  /**\n   * Get the scheme that has been set in this URL.\n   */\n  public getScheme(): string | undefined {\n    return this._scheme;\n  }\n\n  /**\n   * Set the host for this URL. If the provided host contains other parts of a URL (such as a\n   * port, path, or query), those parts will be added to this URL as well.\n   */\n  public setHost(host: string | undefined): void {\n    if (!host) {\n      this._host = undefined;\n    } else {\n      this.set(host, \"SCHEME_OR_HOST\");\n    }\n  }\n\n  /**\n   * Get the host that has been set in this URL.\n   */\n  public getHost(): string | undefined {\n    return this._host;\n  }\n\n  /**\n   * Set the port for this URL. If the provided port contains other parts of a URL (such as a\n   * path or query), those parts will be added to this URL as well.\n   */\n  public setPort(port: number | string | undefined): void {\n    if (port === undefined || port === null || port === \"\") {\n      this._port = undefined;\n    } else {\n      this.set(port.toString(), \"PORT\");\n    }\n  }\n\n  /**\n   * Get the port that has been set in this URL.\n   */\n  public getPort(): string | undefined {\n    return this._port;\n  }\n\n  /**\n   * Set the path for this URL. If the provided path contains a query, then it will be added to\n   * this URL as well.\n   */\n  public setPath(path: string | undefined): void {\n    if (!path) {\n      this._path = undefined;\n    } else {\n      const schemeIndex = path.indexOf(\"://\");\n      if (schemeIndex !== -1) {\n        const schemeStart = path.lastIndexOf(\"/\", schemeIndex);\n        // Make sure to only grab the URL part of the path before setting the state back to SCHEME\n        // this will handle cases such as \"/a/b/c/https://microsoft.com\" => \"https://microsoft.com\"\n        this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), \"SCHEME\");\n      } else {\n        this.set(path, \"PATH\");\n      }\n    }\n  }\n\n  /**\n   * Append the provided path to this URL's existing path. If the provided path contains a query,\n   * then it will be added to this URL as well.\n   */\n  public appendPath(path: string | undefined): void {\n    if (path) {\n      let currentPath: string | undefined = this.getPath();\n      if (currentPath) {\n        if (!currentPath.endsWith(\"/\")) {\n          currentPath += \"/\";\n        }\n\n        if (path.startsWith(\"/\")) {\n          path = path.substring(1);\n        }\n\n        path = currentPath + path;\n      }\n      this.set(path, \"PATH\");\n    }\n  }\n\n  /**\n   * Get the path that has been set in this URL.\n   */\n  public getPath(): string | undefined {\n    return this._path;\n  }\n\n  /**\n   * Set the query in this URL.\n   */\n  public setQuery(query: string | undefined): void {\n    if (!query) {\n      this._query = undefined;\n    } else {\n      this._query = URLQuery.parse(query);\n    }\n  }\n\n  /**\n   * Set a query parameter with the provided name and value in this URL's query. If the provided\n   * query parameter value is undefined or empty, then the query parameter will be removed if it\n   * existed.\n   */\n  public setQueryParameter(queryParameterName: string, queryParameterValue: unknown): void {\n    if (queryParameterName) {\n      if (!this._query) {\n        this._query = new URLQuery();\n      }\n      this._query.set(queryParameterName, queryParameterValue);\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided query parameter name. If no query\n   * parameter exists with the provided name, then undefined will be returned.\n   */\n  public getQueryParameterValue(queryParameterName: string): string | string[] | undefined {\n    return this._query ? this._query.get(queryParameterName) : undefined;\n  }\n\n  /**\n   * Get the query in this URL.\n   */\n  public getQuery(): string | undefined {\n    return this._query ? this._query.toString() : undefined;\n  }\n\n  /**\n   * Set the parts of this URL by parsing the provided text using the provided startState.\n   */\n  private set(text: string, startState: URLTokenizerState): void {\n    const tokenizer = new URLTokenizer(text, startState);\n\n    while (tokenizer.next()) {\n      const token: URLToken | undefined = tokenizer.current();\n      let tokenPath: string | undefined;\n      if (token) {\n        switch (token.type) {\n          case \"SCHEME\":\n            this._scheme = token.text || undefined;\n            break;\n\n          case \"HOST\":\n            this._host = token.text || undefined;\n            break;\n\n          case \"PORT\":\n            this._port = token.text || undefined;\n            break;\n\n          case \"PATH\":\n            tokenPath = token.text || undefined;\n            if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n              this._path = tokenPath;\n            }\n            break;\n\n          case \"QUERY\":\n            this._query = URLQuery.parse(token.text);\n            break;\n\n          default:\n            throw new Error(`Unrecognized URLTokenType: ${token.type}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Serializes the URL as a string.\n   * @returns the URL as a string.\n   */\n  public toString(): string {\n    let result = \"\";\n\n    if (this._scheme) {\n      result += `${this._scheme}://`;\n    }\n\n    if (this._host) {\n      result += this._host;\n    }\n\n    if (this._port) {\n      result += `:${this._port}`;\n    }\n\n    if (this._path) {\n      if (!this._path.startsWith(\"/\")) {\n        result += \"/\";\n      }\n      result += this._path;\n    }\n\n    if (this._query && this._query.any()) {\n      result += `?${this._query.toString()}`;\n    }\n\n    return result;\n  }\n\n  /**\n   * If the provided searchValue is found in this URLBuilder, then replace it with the provided\n   * replaceValue.\n   */\n  public replaceAll(searchValue: string, replaceValue: string): void {\n    if (searchValue) {\n      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\n      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\n      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\n      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\n      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\n    }\n  }\n\n  /**\n   * Parses a given string URL into a new {@link URLBuilder}.\n   */\n  public static parse(text: string): URLBuilder {\n    const result = new URLBuilder();\n    result.set(text, \"SCHEME_OR_HOST\");\n    return result;\n  }\n}\n\ntype URLTokenizerState = \"SCHEME\" | \"SCHEME_OR_HOST\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\" | \"DONE\";\n\ntype URLTokenType = \"SCHEME\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\";\n\nexport class URLToken {\n  public constructor(public readonly text: string, public readonly type: URLTokenType) {}\n\n  public static scheme(text: string): URLToken {\n    return new URLToken(text, \"SCHEME\");\n  }\n\n  public static host(text: string): URLToken {\n    return new URLToken(text, \"HOST\");\n  }\n\n  public static port(text: string): URLToken {\n    return new URLToken(text, \"PORT\");\n  }\n\n  public static path(text: string): URLToken {\n    return new URLToken(text, \"PATH\");\n  }\n\n  public static query(text: string): URLToken {\n    return new URLToken(text, \"QUERY\");\n  }\n}\n\n/**\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\n * digit) character.\n */\nexport function isAlphaNumericCharacter(character: string): boolean {\n  const characterCode: number = character.charCodeAt(0);\n  return (\n    (48 /* '0' */ <= characterCode && characterCode <= 57) /* '9' */ ||\n    (65 /* 'A' */ <= characterCode && characterCode <= 90) /* 'Z' */ ||\n    (97 /* 'a' */ <= characterCode && characterCode <= 122) /* 'z' */\n  );\n}\n\n/**\n * A class that tokenizes URL strings.\n */\nexport class URLTokenizer {\n  readonly _textLength: number;\n  _currentState: URLTokenizerState;\n  _currentIndex: number;\n  _currentToken: URLToken | undefined;\n\n  public constructor(readonly _text: string, state?: URLTokenizerState) {\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state !== undefined && state !== null ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n\n  /**\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\n   * hasn't started or has finished tokenizing.\n   */\n  public current(): URLToken | undefined {\n    return this._currentToken;\n  }\n\n  /**\n   * Advance to the next URLToken and return whether or not a URLToken was found.\n   */\n  public next(): boolean {\n    if (!hasCurrentCharacter(this)) {\n      this._currentToken = undefined;\n    } else {\n      switch (this._currentState) {\n        case \"SCHEME\":\n          nextScheme(this);\n          break;\n\n        case \"SCHEME_OR_HOST\":\n          nextSchemeOrHost(this);\n          break;\n\n        case \"HOST\":\n          nextHost(this);\n          break;\n\n        case \"PORT\":\n          nextPort(this);\n          break;\n\n        case \"PATH\":\n          nextPath(this);\n          break;\n\n        case \"QUERY\":\n          nextQuery(this);\n          break;\n\n        default:\n          throw new Error(`Unrecognized URLTokenizerState: ${this._currentState}`);\n      }\n    }\n    return !!this._currentToken;\n  }\n}\n\n/**\n * Read the remaining characters from this Tokenizer's character stream.\n */\nfunction readRemaining(tokenizer: URLTokenizer): string {\n  let result = \"\";\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n  return result;\n}\n\n/**\n * Whether or not this URLTokenizer has a current character.\n */\nfunction hasCurrentCharacter(tokenizer: URLTokenizer): boolean {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n\n/**\n * Get the character in the text string at the current index.\n */\nfunction getCurrentCharacter(tokenizer: URLTokenizer): string {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n\n/**\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\n * then step will default to 1.\n */\nfunction nextCharacter(tokenizer: URLTokenizer, step?: number): void {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n    tokenizer._currentIndex += step;\n  }\n}\n\n/**\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\n * Tokenizer's stream of characters.\n */\nfunction peekCharacters(tokenizer: URLTokenizer, charactersToPeek: number): string {\n  let endIndex: number = tokenizer._currentIndex + charactersToPeek;\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n\n/**\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\n * is false when provided the current character.\n */\nfunction readWhile(tokenizer: URLTokenizer, condition: (character: string) => boolean): string {\n  let result = \"\";\n\n  while (hasCurrentCharacter(tokenizer)) {\n    const currentCharacter: string = getCurrentCharacter(tokenizer);\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\n * character stream is reached.\n */\nfunction readWhileLetterOrDigit(tokenizer: URLTokenizer): string {\n  return readWhile(tokenizer, (character: string) => isAlphaNumericCharacter(character));\n}\n\n/**\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\n * the end of the character stream is reached.\n */\nfunction readUntilCharacter(tokenizer: URLTokenizer, ...terminatingCharacters: string[]): string {\n  return readWhile(\n    tokenizer,\n    (character: string) => terminatingCharacters.indexOf(character) === -1\n  );\n}\n\nfunction nextScheme(tokenizer: URLTokenizer): void {\n  const scheme: string = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\n\nfunction nextSchemeOrHost(tokenizer: URLTokenizer): void {\n  const schemeOrHost: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\n\nfunction nextHost(tokenizer: URLTokenizer): void {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n\n  const host: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPort(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n\n  const port: string = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPath(tokenizer: URLTokenizer): void {\n  const path: string = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextQuery(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n\n  const query: string = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst url = URL;\n\nexport { url as URL };\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const custom = {};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestOptionsBase, TransferProgressEvent } from \"./webResource\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * The base options type for all operations.\n */\nexport interface OperationOptions {\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Options used when creating and sending HTTP requests for this operation.\n   */\n  requestOptions?: OperationRequestOptions;\n  /**\n   * Options used when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n}\n\n/**\n * Options that allow configuring the handling of HTTP requests made by an SDK operation.\n */\nexport interface OperationRequestOptions {\n  /**\n   * User defined custom request headers that will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n}\n\n/**\n * Converts an OperationOptions to a RequestOptionsBase\n *\n * @param opts - OperationOptions object to convert to RequestOptionsBase\n */\nexport function operationOptionsToRequestOptionsBase<T extends OperationOptions>(\n  opts: T\n): RequestOptionsBase {\n  const { requestOptions, tracingOptions, ...additionalOptions } = opts;\n\n  let result: RequestOptionsBase = additionalOptions;\n\n  if (requestOptions) {\n    result = { ...result, ...requestOptions };\n  }\n\n  if (tracingOptions) {\n    result.tracingContext = tracingOptions.tracingContext;\n    // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.\n    result.spanOptions = (tracingOptions as any)?.spanOptions;\n  }\n\n  return result;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as utils from \"./util/utils\";\nimport { CompositeMapper, DictionaryMapper, Mapper, MapperType, Serializer } from \"./serializer\";\nimport {\n  DefaultDeserializationOptions,\n  DeserializationContentTypes,\n  deserializationPolicy,\n} from \"./policies/deserializationPolicy\";\nimport { DefaultKeepAliveOptions, keepAlivePolicy } from \"./policies/keepAlivePolicy\";\nimport { DefaultRedirectOptions, redirectPolicy } from \"./policies/redirectPolicy\";\nimport { DefaultRetryOptions, exponentialRetryPolicy } from \"./policies/exponentialRetryPolicy\";\nimport { HttpOperationResponse, RestResponse } from \"./httpOperationResponse\";\nimport { LogPolicyOptions, logPolicy } from \"./policies/logPolicy\";\nimport {\n  OperationParameter,\n  ParameterPath,\n  getPathStringFromParameter,\n  getPathStringFromParameterPath,\n} from \"./operationParameter\";\nimport { OperationSpec, getStreamResponseStatusCodes } from \"./operationSpec\";\nimport {\n  RequestOptionsBase,\n  RequestPrepareOptions,\n  WebResource,\n  WebResourceLike,\n  isWebResourceLike,\n} from \"./webResource\";\nimport {\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./policies/requestPolicy\";\nimport { SerializerOptions, XML_ATTRKEY, XML_CHARKEY } from \"./util/serializer.common\";\nimport { ServiceCallback, isNode } from \"./util/utils\";\nimport { TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport {\n  getDefaultUserAgentHeaderName,\n  getDefaultUserAgentValue,\n  userAgentPolicy,\n} from \"./policies/userAgentPolicy\";\nimport { HttpClient } from \"./httpClient\";\nimport { HttpPipelineLogger } from \"./httpPipelineLogger\";\nimport { InternalPipelineOptions } from \"./pipelineOptions\";\nimport { OperationArguments } from \"./operationArguments\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { ServiceClientCredentials } from \"./credentials/serviceClientCredentials\";\nimport { URL } from \"./url\";\nimport { URLBuilder } from \"./url\";\nimport { bearerTokenAuthenticationPolicy } from \"./policies/bearerTokenAuthenticationPolicy\";\nimport { disableResponseDecompressionPolicy } from \"./policies/disableResponseDecompressionPolicy\";\nimport { generateClientRequestIdPolicy } from \"./policies/generateClientRequestIdPolicy\";\nimport { getCachedDefaultHttpClient } from \"./httpClientCache\";\nimport { logger } from \"./log\";\nimport { ndJsonPolicy } from \"./policies/ndJsonPolicy\";\nimport { proxyPolicy } from \"./policies/proxyPolicy\";\nimport { rpRegistrationPolicy } from \"./policies/rpRegistrationPolicy\";\nimport { signingPolicy } from \"./policies/signingPolicy\";\nimport { stringifyXML } from \"./util/xml\";\nimport { systemErrorRetryPolicy } from \"./policies/systemErrorRetryPolicy\";\nimport { throttlingRetryPolicy } from \"./policies/throttlingRetryPolicy\";\nimport { tracingPolicy } from \"./policies/tracingPolicy\";\n\n/**\n * Options to configure a proxy for outgoing requests (Node.js only).\n */\nexport interface ProxySettings {\n  /**\n   * The proxy's host address.\n   */\n  host: string;\n\n  /**\n   * The proxy host's port.\n   */\n  port: number;\n\n  /**\n   * The user name to authenticate with the proxy, if required.\n   */\n  username?: string;\n\n  /**\n   * The password to authenticate with the proxy, if required.\n   */\n  password?: string;\n}\n\n/**\n * An alias of {@link ProxySettings} for future use.\n */\nexport type ProxyOptions = ProxySettings;\n\n/**\n * Options to be provided while creating the client.\n */\nexport interface ServiceClientOptions {\n  /**\n   * An array of factories which get called to create the RequestPolicy pipeline used to send a HTTP\n   * request on the wire, or a function that takes in the defaultRequestPolicyFactories and returns\n   * the requestPolicyFactories that will be used.\n   */\n  requestPolicyFactories?:\n    | RequestPolicyFactory[]\n    | ((defaultRequestPolicyFactories: RequestPolicyFactory[]) => void | RequestPolicyFactory[]);\n  /**\n   * The HttpClient that will be used to send HTTP requests.\n   */\n  httpClient?: HttpClient;\n  /**\n   * The HttpPipelineLogger that can be used to debug RequestPolicies within the HTTP pipeline.\n   */\n  httpPipelineLogger?: HttpPipelineLogger;\n  /**\n   * If set to true, turn off the default retry policy.\n   */\n  noRetryPolicy?: boolean;\n  /**\n   * Gets or sets the retry timeout in seconds for AutomaticRPRegistration. Default value is 30.\n   */\n  rpRegistrationRetryTimeout?: number;\n  /**\n   * Whether or not to generate a client request ID header for each HTTP request.\n   */\n  generateClientRequestIdHeader?: boolean;\n  /**\n   * Whether to include credentials in CORS requests in the browser.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials for more information.\n   */\n  withCredentials?: boolean;\n  /**\n   * If specified, a GenerateRequestIdPolicy will be added to the HTTP pipeline that will add a\n   * header to all outgoing requests with this header name and a random UUID as the request ID.\n   */\n  clientRequestIdHeaderName?: string;\n  /**\n   * The content-types that will be associated with JSON or XML serialization.\n   */\n  deserializationContentTypes?: DeserializationContentTypes;\n  /**\n   * The header name to use for the telemetry header while sending the request. If this is not\n   * specified, then \"User-Agent\" will be used when running on Node.js and \"x-ms-useragent\" will\n   * be used when running in a browser.\n   */\n  userAgentHeaderName?: string | ((defaultUserAgentHeaderName: string) => string);\n  /**\n   * The string to be set to the telemetry header while sending the request, or a function that\n   * takes in the default user-agent string and returns the user-agent string that will be used.\n   */\n  userAgent?: string | ((defaultUserAgent: string) => string);\n  /**\n   * Proxy settings which will be used for every HTTP request (Node.js only).\n   */\n  proxySettings?: ProxySettings;\n  /**\n   * If specified, will be used to build the BearerTokenAuthenticationPolicy.\n   */\n  credentialScopes?: string | string[];\n}\n\n/**\n * ServiceClient sends service requests and receives responses.\n */\nexport class ServiceClient {\n  /**\n   * If specified, this is the base URI that requests will be made against for this ServiceClient.\n   * If it is not specified, then all OperationSpecs must contain a baseUrl property.\n   */\n  protected baseUri?: string;\n\n  /**\n   * The default request content type for the service.\n   * Used if no requestContentType is present on an OperationSpec.\n   */\n  protected requestContentType?: string;\n\n  /**\n   * The HTTP client that will be used to send requests.\n   */\n  private readonly _httpClient: HttpClient;\n  private readonly _requestPolicyOptions: RequestPolicyOptions;\n\n  private readonly _requestPolicyFactories: RequestPolicyFactory[];\n  private readonly _withCredentials: boolean;\n\n  /**\n   * The ServiceClient constructor\n   * @param credentials - The credentials used for authentication with the service.\n   * @param options - The service client options that govern the behavior of the client.\n   */\n  constructor(\n    credentials?: TokenCredential | ServiceClientCredentials,\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: ServiceClientOptions\n  ) {\n    if (!options) {\n      options = {};\n    }\n\n    this._withCredentials = options.withCredentials || false;\n    this._httpClient = options.httpClient || getCachedDefaultHttpClient();\n    this._requestPolicyOptions = new RequestPolicyOptions(options.httpPipelineLogger);\n\n    let requestPolicyFactories: RequestPolicyFactory[];\n    if (Array.isArray(options.requestPolicyFactories)) {\n      logger.info(\"ServiceClient: using custom request policies\");\n      requestPolicyFactories = options.requestPolicyFactories;\n    } else {\n      let authPolicyFactory: RequestPolicyFactory | undefined = undefined;\n      if (isTokenCredential(credentials)) {\n        logger.info(\n          \"ServiceClient: creating bearer token authentication policy from provided credentials\"\n        );\n        // Create a wrapped RequestPolicyFactory here so that we can provide the\n        // correct scope to the BearerTokenAuthenticationPolicy at the first time\n        // one is requested.  This is needed because generated ServiceClient\n        // implementations do not set baseUri until after ServiceClient's constructor\n        // is finished, leaving baseUri empty at the time when it is needed to\n        // build the correct scope name.\n        const wrappedPolicyFactory: () => RequestPolicyFactory = () => {\n          let bearerTokenPolicyFactory: RequestPolicyFactory | undefined = undefined;\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const serviceClient = this;\n          const serviceClientOptions = options;\n          return {\n            create(nextPolicy: RequestPolicy, createOptions: RequestPolicyOptions): RequestPolicy {\n              const credentialScopes = getCredentialScopes(\n                serviceClientOptions,\n                serviceClient.baseUri\n              );\n\n              if (!credentialScopes) {\n                throw new Error(\n                  `When using credential, the ServiceClient must contain a baseUri or a credentialScopes in ServiceClientOptions. Unable to create a bearerTokenAuthenticationPolicy`\n                );\n              }\n\n              if (bearerTokenPolicyFactory === undefined || bearerTokenPolicyFactory === null) {\n                bearerTokenPolicyFactory = bearerTokenAuthenticationPolicy(\n                  credentials,\n                  credentialScopes\n                );\n              }\n\n              return bearerTokenPolicyFactory.create(nextPolicy, createOptions);\n            },\n          };\n        };\n\n        authPolicyFactory = wrappedPolicyFactory();\n      } else if (credentials && typeof credentials.signRequest === \"function\") {\n        logger.info(\"ServiceClient: creating signing policy from provided credentials\");\n        authPolicyFactory = signingPolicy(credentials);\n      } else if (credentials !== undefined && credentials !== null) {\n        throw new Error(\"The credentials argument must implement the TokenCredential interface\");\n      }\n\n      logger.info(\"ServiceClient: using default request policies\");\n      requestPolicyFactories = createDefaultRequestPolicyFactories(authPolicyFactory, options);\n      if (options.requestPolicyFactories) {\n        // options.requestPolicyFactories can also be a function that manipulates\n        // the default requestPolicyFactories array\n        const newRequestPolicyFactories: void | RequestPolicyFactory[] =\n          options.requestPolicyFactories(requestPolicyFactories);\n        if (newRequestPolicyFactories) {\n          requestPolicyFactories = newRequestPolicyFactories;\n        }\n      }\n    }\n    this._requestPolicyFactories = requestPolicyFactories;\n  }\n\n  /**\n   * Send the provided httpRequest.\n   */\n  sendRequest(options: RequestPrepareOptions | WebResourceLike): Promise<HttpOperationResponse> {\n    if (options === null || options === undefined || typeof options !== \"object\") {\n      throw new Error(\"options cannot be null or undefined and it must be of type object.\");\n    }\n\n    let httpRequest: WebResourceLike;\n    try {\n      if (isWebResourceLike(options)) {\n        options.validateRequestProperties();\n        httpRequest = options;\n      } else {\n        httpRequest = new WebResource();\n        httpRequest = httpRequest.prepare(options);\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    let httpPipeline: RequestPolicy = this._httpClient;\n    if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {\n      for (let i = this._requestPolicyFactories.length - 1; i >= 0; --i) {\n        httpPipeline = this._requestPolicyFactories[i].create(\n          httpPipeline,\n          this._requestPolicyOptions\n        );\n      }\n    }\n    return httpPipeline.sendRequest(httpRequest);\n  }\n\n  /**\n   * Send an HTTP request that is populated using the provided OperationSpec.\n   * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.\n   * @param operationSpec - The OperationSpec to use to populate the httpRequest.\n   * @param callback - The callback to call when the response is received.\n   */\n  async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n    callback?: ServiceCallback<any>\n  ): Promise<RestResponse> {\n    if (typeof operationArguments.options === \"function\") {\n      callback = operationArguments.options;\n      operationArguments.options = undefined;\n    }\n\n    const serializerOptions = operationArguments.options?.serializerOptions;\n    const httpRequest: WebResourceLike = new WebResource();\n\n    let result: Promise<RestResponse>;\n    try {\n      const baseUri: string | undefined = operationSpec.baseUrl || this.baseUri;\n      if (!baseUri) {\n        throw new Error(\n          \"If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.\"\n        );\n      }\n\n      httpRequest.method = operationSpec.httpMethod;\n      httpRequest.operationSpec = operationSpec;\n\n      const requestUrl: URLBuilder = URLBuilder.parse(baseUri);\n      if (operationSpec.path) {\n        requestUrl.appendPath(operationSpec.path);\n      }\n      if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {\n        for (const urlParameter of operationSpec.urlParameters) {\n          let urlParameterValue: string = getOperationArgumentValueFromParameter(\n            this,\n            operationArguments,\n            urlParameter,\n            operationSpec.serializer\n          );\n          urlParameterValue = operationSpec.serializer.serialize(\n            urlParameter.mapper,\n            urlParameterValue,\n            getPathStringFromParameter(urlParameter),\n            serializerOptions\n          );\n          if (!urlParameter.skipEncoding) {\n            urlParameterValue = encodeURIComponent(urlParameterValue);\n          }\n          requestUrl.replaceAll(\n            `{${urlParameter.mapper.serializedName || getPathStringFromParameter(urlParameter)}}`,\n            urlParameterValue\n          );\n        }\n      }\n      if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {\n        for (const queryParameter of operationSpec.queryParameters) {\n          let queryParameterValue: any = getOperationArgumentValueFromParameter(\n            this,\n            operationArguments,\n            queryParameter,\n            operationSpec.serializer\n          );\n          if (queryParameterValue !== undefined && queryParameterValue !== null) {\n            queryParameterValue = operationSpec.serializer.serialize(\n              queryParameter.mapper,\n              queryParameterValue,\n              getPathStringFromParameter(queryParameter),\n              serializerOptions\n            );\n            if (\n              queryParameter.collectionFormat !== undefined &&\n              queryParameter.collectionFormat !== null\n            ) {\n              if (queryParameter.collectionFormat === QueryCollectionFormat.Multi) {\n                if (queryParameterValue.length === 0) {\n                  // The collection is empty, no need to try serializing the current queryParam\n                  continue;\n                } else {\n                  for (const index in queryParameterValue) {\n                    const item = queryParameterValue[index];\n                    queryParameterValue[index] =\n                      item === undefined || item === null ? \"\" : item.toString();\n                  }\n                }\n              } else if (\n                queryParameter.collectionFormat === QueryCollectionFormat.Ssv ||\n                queryParameter.collectionFormat === QueryCollectionFormat.Tsv\n              ) {\n                queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n              }\n            }\n            if (!queryParameter.skipEncoding) {\n              if (Array.isArray(queryParameterValue)) {\n                for (const index in queryParameterValue) {\n                  if (\n                    queryParameterValue[index] !== undefined &&\n                    queryParameterValue[index] !== null\n                  ) {\n                    queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);\n                  }\n                }\n              } else {\n                queryParameterValue = encodeURIComponent(queryParameterValue);\n              }\n            }\n            if (\n              queryParameter.collectionFormat !== undefined &&\n              queryParameter.collectionFormat !== null &&\n              queryParameter.collectionFormat !== QueryCollectionFormat.Multi &&\n              queryParameter.collectionFormat !== QueryCollectionFormat.Ssv &&\n              queryParameter.collectionFormat !== QueryCollectionFormat.Tsv\n            ) {\n              queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n            }\n            requestUrl.setQueryParameter(\n              queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter),\n              queryParameterValue\n            );\n          }\n        }\n      }\n      httpRequest.url = requestUrl.toString();\n\n      const contentType = operationSpec.contentType || this.requestContentType;\n      if (contentType && operationSpec.requestBody) {\n        httpRequest.headers.set(\"Content-Type\", contentType);\n      }\n\n      if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n          let headerValue: any = getOperationArgumentValueFromParameter(\n            this,\n            operationArguments,\n            headerParameter,\n            operationSpec.serializer\n          );\n          if (headerValue !== undefined && headerValue !== null) {\n            headerValue = operationSpec.serializer.serialize(\n              headerParameter.mapper,\n              headerValue,\n              getPathStringFromParameter(headerParameter),\n              serializerOptions\n            );\n            const headerCollectionPrefix = (headerParameter.mapper as DictionaryMapper)\n              .headerCollectionPrefix;\n            if (headerCollectionPrefix) {\n              for (const key of Object.keys(headerValue)) {\n                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);\n              }\n            } else {\n              httpRequest.headers.set(\n                headerParameter.mapper.serializedName ||\n                  getPathStringFromParameter(headerParameter),\n                headerValue\n              );\n            }\n          }\n        }\n      }\n\n      const options: RequestOptionsBase | undefined = operationArguments.options;\n      if (options) {\n        if (options.customHeaders) {\n          for (const customHeaderName in options.customHeaders) {\n            httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);\n          }\n        }\n\n        if (options.abortSignal) {\n          httpRequest.abortSignal = options.abortSignal;\n        }\n\n        if (options.timeout) {\n          httpRequest.timeout = options.timeout;\n        }\n\n        if (options.onUploadProgress) {\n          httpRequest.onUploadProgress = options.onUploadProgress;\n        }\n\n        if (options.onDownloadProgress) {\n          httpRequest.onDownloadProgress = options.onDownloadProgress;\n        }\n\n        if (options.spanOptions) {\n          // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.\n          (httpRequest as any).spanOptions = options.spanOptions;\n        }\n\n        if (options.tracingContext) {\n          httpRequest.tracingContext = options.tracingContext;\n        }\n\n        if (options.shouldDeserialize !== undefined && options.shouldDeserialize !== null) {\n          httpRequest.shouldDeserialize = options.shouldDeserialize;\n        }\n      }\n\n      httpRequest.withCredentials = this._withCredentials;\n\n      serializeRequestBody(this, httpRequest, operationArguments, operationSpec);\n\n      if (httpRequest.streamResponseStatusCodes === undefined) {\n        httpRequest.streamResponseStatusCodes = getStreamResponseStatusCodes(operationSpec);\n      }\n\n      let rawResponse: HttpOperationResponse;\n      let sendRequestError;\n      try {\n        rawResponse = await this.sendRequest(httpRequest);\n      } catch (error) {\n        sendRequestError = error;\n      }\n      if (sendRequestError) {\n        if (sendRequestError.response) {\n          sendRequestError.details = flattenResponse(\n            sendRequestError.response,\n            operationSpec.responses[sendRequestError.statusCode] ||\n              operationSpec.responses[\"default\"]\n          );\n        }\n        result = Promise.reject(sendRequestError);\n      } else {\n        result = Promise.resolve(\n          flattenResponse(rawResponse!, operationSpec.responses[rawResponse!.status])\n        );\n      }\n    } catch (error) {\n      result = Promise.reject(error);\n    }\n\n    const cb = callback;\n    if (cb) {\n      result\n        .then((res) => cb(null, res._response.parsedBody, res._response.request, res._response))\n        .catch((err) => cb(err));\n    }\n\n    return result;\n  }\n}\n\nexport function serializeRequestBody(\n  serviceClient: ServiceClient,\n  httpRequest: WebResourceLike,\n  operationArguments: OperationArguments,\n  operationSpec: OperationSpec\n): void {\n  const serializerOptions = operationArguments.options?.serializerOptions ?? {};\n  const updatedOptions: Required<SerializerOptions> = {\n    rootName: serializerOptions.rootName ?? \"\",\n    includeRoot: serializerOptions.includeRoot ?? false,\n    xmlCharKey: serializerOptions.xmlCharKey ?? XML_CHARKEY,\n  };\n\n  const xmlCharKey = serializerOptions.xmlCharKey;\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    httpRequest.body = getOperationArgumentValueFromParameter(\n      serviceClient,\n      operationArguments,\n      operationSpec.requestBody,\n      operationSpec.serializer\n    );\n\n    const bodyMapper = operationSpec.requestBody.mapper;\n    const { required, xmlName, xmlElementName, serializedName, xmlNamespace, xmlNamespacePrefix } =\n      bodyMapper;\n    const typeName = bodyMapper.type.name;\n\n    try {\n      if ((httpRequest.body !== undefined && httpRequest.body !== null) || required) {\n        const requestBodyParameterPathString: string = getPathStringFromParameter(\n          operationSpec.requestBody\n        );\n        httpRequest.body = operationSpec.serializer.serialize(\n          bodyMapper,\n          httpRequest.body,\n          requestBodyParameterPathString,\n          updatedOptions\n        );\n\n        const isStream = typeName === MapperType.Stream;\n\n        if (operationSpec.isXML) {\n          const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n          const value = getXmlValueWithNamespace(\n            xmlNamespace,\n            xmlnsKey,\n            typeName,\n            httpRequest.body,\n            updatedOptions\n          );\n          if (typeName === MapperType.Sequence) {\n            httpRequest.body = stringifyXML(\n              utils.prepareXMLRootList(\n                value,\n                xmlElementName || xmlName || serializedName!,\n                xmlnsKey,\n                xmlNamespace\n              ),\n              {\n                rootName: xmlName || serializedName,\n                xmlCharKey,\n              }\n            );\n          } else if (!isStream) {\n            httpRequest.body = stringifyXML(value, {\n              rootName: xmlName || serializedName,\n              xmlCharKey,\n            });\n          }\n        } else if (\n          typeName === MapperType.String &&\n          (operationSpec.contentType?.match(\"text/plain\") || operationSpec.mediaType === \"text\")\n        ) {\n          // the String serializer has validated that request body is a string\n          // so just send the string.\n          return;\n        } else if (!isStream) {\n          httpRequest.body = JSON.stringify(httpRequest.body);\n        }\n      }\n    } catch (error) {\n      throw new Error(\n        `Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(\n          serializedName,\n          undefined,\n          \"  \"\n        )}.`\n      );\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    httpRequest.formData = {};\n    for (const formDataParameter of operationSpec.formDataParameters) {\n      const formDataParameterValue: any = getOperationArgumentValueFromParameter(\n        serviceClient,\n        operationArguments,\n        formDataParameter,\n        operationSpec.serializer\n      );\n      if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n        const formDataParameterPropertyName: string =\n          formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(\n          formDataParameter.mapper,\n          formDataParameterValue,\n          getPathStringFromParameter(formDataParameter),\n          updatedOptions\n        );\n      }\n    }\n  }\n}\n\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(\n  xmlNamespace: string | undefined,\n  xmlnsKey: string,\n  typeName: string,\n  serializedValue: any,\n  options: Required<SerializerOptions>\n): any {\n  // Composite and Sequence schemas already got their root namespace set during serialization\n  // We just need to add xmlns to the other schema types\n  if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n    const result: any = {};\n    result[options.xmlCharKey] = serializedValue;\n    result[XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };\n    return result;\n  }\n\n  return serializedValue;\n}\n\nfunction getValueOrFunctionResult(\n  value: undefined | string | ((defaultValue: string) => string),\n  defaultValueCreator: () => string\n): string {\n  let result: string;\n  if (typeof value === \"string\") {\n    result = value;\n  } else {\n    result = defaultValueCreator();\n    if (typeof value === \"function\") {\n      result = value(result);\n    }\n  }\n  return result;\n}\n\nfunction createDefaultRequestPolicyFactories(\n  authPolicyFactory: RequestPolicyFactory | undefined,\n  options: ServiceClientOptions\n): RequestPolicyFactory[] {\n  const factories: RequestPolicyFactory[] = [];\n\n  if (options.generateClientRequestIdHeader) {\n    factories.push(generateClientRequestIdPolicy(options.clientRequestIdHeaderName));\n  }\n\n  if (authPolicyFactory) {\n    factories.push(authPolicyFactory);\n  }\n\n  const userAgentHeaderName: string = getValueOrFunctionResult(\n    options.userAgentHeaderName,\n    getDefaultUserAgentHeaderName\n  );\n  const userAgentHeaderValue: string = getValueOrFunctionResult(\n    options.userAgent,\n    getDefaultUserAgentValue\n  );\n  if (userAgentHeaderName && userAgentHeaderValue) {\n    factories.push(userAgentPolicy({ key: userAgentHeaderName, value: userAgentHeaderValue }));\n  }\n  factories.push(redirectPolicy());\n  factories.push(rpRegistrationPolicy(options.rpRegistrationRetryTimeout));\n\n  if (!options.noRetryPolicy) {\n    factories.push(exponentialRetryPolicy());\n    factories.push(systemErrorRetryPolicy());\n    factories.push(throttlingRetryPolicy());\n  }\n\n  factories.push(deserializationPolicy(options.deserializationContentTypes));\n\n  if (isNode) {\n    factories.push(proxyPolicy(options.proxySettings));\n  }\n\n  factories.push(logPolicy({ logger: logger.info }));\n\n  return factories;\n}\n\n/**\n * Creates an HTTP pipeline based on the given options.\n * @param pipelineOptions - Defines options that are used to configure policies in the HTTP pipeline for an SDK client.\n * @param authPolicyFactory - An optional authentication policy factory to use for signing requests.\n * @returns A set of options that can be passed to create a new {@link ServiceClient}.\n */\nexport function createPipelineFromOptions(\n  pipelineOptions: InternalPipelineOptions,\n  authPolicyFactory?: RequestPolicyFactory\n): ServiceClientOptions {\n  const requestPolicyFactories: RequestPolicyFactory[] = [];\n\n  if (pipelineOptions.sendStreamingJson) {\n    requestPolicyFactories.push(ndJsonPolicy());\n  }\n\n  let userAgentValue = undefined;\n  if (pipelineOptions.userAgentOptions && pipelineOptions.userAgentOptions.userAgentPrefix) {\n    const userAgentInfo: string[] = [];\n    userAgentInfo.push(pipelineOptions.userAgentOptions.userAgentPrefix);\n\n    // Add the default user agent value if it isn't already specified\n    // by the userAgentPrefix option.\n    const defaultUserAgentInfo = getDefaultUserAgentValue();\n    if (userAgentInfo.indexOf(defaultUserAgentInfo) === -1) {\n      userAgentInfo.push(defaultUserAgentInfo);\n    }\n\n    userAgentValue = userAgentInfo.join(\" \");\n  }\n\n  const keepAliveOptions = {\n    ...DefaultKeepAliveOptions,\n    ...pipelineOptions.keepAliveOptions,\n  };\n\n  const retryOptions = {\n    ...DefaultRetryOptions,\n    ...pipelineOptions.retryOptions,\n  };\n\n  const redirectOptions = {\n    ...DefaultRedirectOptions,\n    ...pipelineOptions.redirectOptions,\n  };\n\n  if (isNode) {\n    requestPolicyFactories.push(proxyPolicy(pipelineOptions.proxyOptions));\n  }\n\n  const deserializationOptions = {\n    ...DefaultDeserializationOptions,\n    ...pipelineOptions.deserializationOptions,\n  };\n\n  const loggingOptions: LogPolicyOptions = {\n    ...pipelineOptions.loggingOptions,\n  };\n\n  requestPolicyFactories.push(\n    tracingPolicy({ userAgent: userAgentValue }),\n    keepAlivePolicy(keepAliveOptions),\n    userAgentPolicy({ value: userAgentValue }),\n    generateClientRequestIdPolicy(),\n    deserializationPolicy(deserializationOptions.expectedContentTypes),\n    throttlingRetryPolicy(),\n    systemErrorRetryPolicy(),\n    exponentialRetryPolicy(\n      retryOptions.maxRetries,\n      retryOptions.retryDelayInMs,\n      retryOptions.maxRetryDelayInMs\n    )\n  );\n\n  if (redirectOptions.handleRedirects) {\n    requestPolicyFactories.push(redirectPolicy(redirectOptions.maxRetries));\n  }\n\n  if (authPolicyFactory) {\n    requestPolicyFactories.push(authPolicyFactory);\n  }\n\n  requestPolicyFactories.push(logPolicy(loggingOptions));\n\n  if (isNode && pipelineOptions.decompressResponse === false) {\n    requestPolicyFactories.push(disableResponseDecompressionPolicy());\n  }\n\n  return {\n    httpClient: pipelineOptions.httpClient,\n    requestPolicyFactories,\n  };\n}\n\nexport type PropertyParent = { [propertyName: string]: any };\n\n/**\n * Get the property parent for the property at the provided path when starting with the provided\n * parent object.\n */\nexport function getPropertyParent(parent: PropertyParent, propertyPath: string[]): PropertyParent {\n  if (parent && propertyPath) {\n    const propertyPathLength: number = propertyPath.length;\n    for (let i = 0; i < propertyPathLength - 1; ++i) {\n      const propertyName: string = propertyPath[i];\n      if (!parent[propertyName]) {\n        parent[propertyName] = {};\n      }\n      parent = parent[propertyName];\n    }\n  }\n  return parent;\n}\n\nfunction getOperationArgumentValueFromParameter(\n  serviceClient: ServiceClient,\n  operationArguments: OperationArguments,\n  parameter: OperationParameter,\n  serializer: Serializer\n): any {\n  return getOperationArgumentValueFromParameterPath(\n    serviceClient,\n    operationArguments,\n    parameter.parameterPath,\n    parameter.mapper,\n    serializer\n  );\n}\n\nexport function getOperationArgumentValueFromParameterPath(\n  serviceClient: ServiceClient,\n  operationArguments: OperationArguments,\n  parameterPath: ParameterPath,\n  parameterMapper: Mapper,\n  serializer: Serializer\n): any {\n  let value: any;\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n  const serializerOptions = operationArguments.options?.serializerOptions;\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        let propertySearchResult: PropertySearchResult = getPropertyFromParameterPath(\n          operationArguments,\n          parameterPath\n        );\n        if (!propertySearchResult.propertyFound) {\n          propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);\n        }\n\n        let useDefaultValue = false;\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue =\n            parameterMapper.required ||\n            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n        }\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n\n      // Serialize just for validation purposes.\n      const parameterPathString: string = getPathStringFromParameterPath(\n        parameterPath,\n        parameterMapper\n      );\n      serializer.serialize(parameterMapper, value, parameterPathString, serializerOptions);\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n\n    for (const propertyName in parameterPath) {\n      const propertyMapper: Mapper = (parameterMapper as CompositeMapper).type.modelProperties![\n        propertyName\n      ];\n      const propertyPath: ParameterPath = parameterPath[propertyName];\n      const propertyValue: any = getOperationArgumentValueFromParameterPath(\n        serviceClient,\n        operationArguments,\n        propertyPath,\n        propertyMapper,\n        serializer\n      );\n      // Serialize just for validation purposes.\n      const propertyPathString: string = getPathStringFromParameterPath(\n        propertyPath,\n        propertyMapper\n      );\n      serializer.serialize(propertyMapper, propertyValue, propertyPathString, serializerOptions);\n      if (propertyValue !== undefined && propertyValue !== null) {\n        if (!value) {\n          value = {};\n        }\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n  return value;\n}\n\ninterface PropertySearchResult {\n  propertyValue?: any;\n  propertyFound: boolean;\n}\n\nfunction getPropertyFromParameterPath(\n  parent: { [parameterName: string]: any },\n  parameterPath: string[]\n): PropertySearchResult {\n  const result: PropertySearchResult = { propertyFound: false };\n  let i = 0;\n  for (; i < parameterPath.length; ++i) {\n    const parameterPathPart: string = parameterPath[i];\n    // Make sure to check inherited properties too, so don't use hasOwnProperty().\n    if (parent !== undefined && parent !== null && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n  return result;\n}\n\n/**\n * Parses an {@link HttpOperationResponse} into a normalized HTTP response object ({@link RestResponse}).\n * @param _response - Wrapper object for http response.\n * @param responseSpec - Mappers for how to parse the response properties.\n * @returns - A normalized response object.\n */\nexport function flattenResponse(\n  _response: HttpOperationResponse,\n  responseSpec: OperationResponse | undefined\n): RestResponse {\n  const parsedHeaders = _response.parsedHeaders;\n  const bodyMapper = responseSpec && responseSpec.bodyMapper;\n\n  const addOperationResponse = (\n    obj: Record<string, unknown>\n  ): {\n    _response: HttpOperationResponse;\n  } => {\n    return Object.defineProperty(obj, \"_response\", {\n      value: _response,\n    });\n  };\n\n  if (bodyMapper) {\n    const typeName = bodyMapper.type.name;\n    if (typeName === \"Stream\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        blobBody: _response.blobBody,\n        readableStreamBody: _response.readableStreamBody,\n      });\n    }\n\n    const modelProperties =\n      (typeName === \"Composite\" && (bodyMapper as CompositeMapper).type.modelProperties) || {};\n    const isPageableResponse = Object.keys(modelProperties).some(\n      (k) => modelProperties[k].serializedName === \"\"\n    );\n    if (typeName === \"Sequence\" || isPageableResponse) {\n      const arrayResponse = [...(_response.parsedBody || [])] as RestResponse & any[];\n\n      for (const key of Object.keys(modelProperties)) {\n        if (modelProperties[key].serializedName) {\n          arrayResponse[key] = _response.parsedBody[key];\n        }\n      }\n\n      if (parsedHeaders) {\n        for (const key of Object.keys(parsedHeaders)) {\n          arrayResponse[key] = parsedHeaders[key];\n        }\n      }\n      addOperationResponse(arrayResponse);\n      return arrayResponse;\n    }\n\n    if (typeName === \"Composite\" || typeName === \"Dictionary\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        ..._response.parsedBody,\n      });\n    }\n  }\n\n  if (\n    bodyMapper ||\n    _response.request.method === \"HEAD\" ||\n    utils.isPrimitiveType(_response.parsedBody)\n  ) {\n    // primitive body types and HEAD booleans\n    return addOperationResponse({\n      ...parsedHeaders,\n      body: _response.parsedBody,\n    });\n  }\n\n  return addOperationResponse({\n    ...parsedHeaders,\n    ..._response.parsedBody,\n  });\n}\n\nfunction getCredentialScopes(\n  options?: ServiceClientOptions,\n  baseUri?: string\n): string | string[] | undefined {\n  if (options?.credentialScopes) {\n    const scopes = options.credentialScopes;\n    return Array.isArray(scopes)\n      ? scopes.map((scope) => new URL(scope).toString())\n      : new URL(scopes).toString();\n  }\n\n  if (baseUri) {\n    return `${baseUri}/.default`;\n  }\n  return undefined;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { SerializerOptions, XML_CHARKEY } from \"../util/serializer.common\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { MapperType } from \"../serializer\";\nimport { OperationResponse } from \"../operationResponse\";\nimport { OperationSpec } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { WebResourceLike } from \"../webResource\";\nimport { parseXML } from \"../util/xml\";\n\n/**\n * Options to configure API response deserialization.\n */\nexport interface DeserializationOptions {\n  /**\n   * Configures the expected content types for the deserialization of\n   * JSON and XML response bodies.\n   */\n  expectedContentTypes: DeserializationContentTypes;\n}\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(\n  deserializationContentTypes?: DeserializationContentTypes,\n  parsingOptions?: SerializerOptions\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new DeserializationPolicy(\n        nextPolicy,\n        options,\n        deserializationContentTypes,\n        parsingOptions\n      );\n    },\n  };\n}\n\nexport const defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport const defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\nexport const DefaultDeserializationOptions: DeserializationOptions = {\n  expectedContentTypes: {\n    json: defaultJsonContentTypes,\n    xml: defaultXmlContentTypes,\n  },\n};\n\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nexport class DeserializationPolicy extends BaseRequestPolicy {\n  public readonly jsonContentTypes: string[];\n  public readonly xmlContentTypes: string[];\n  public readonly xmlCharKey: string;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    requestPolicyOptions: RequestPolicyOptions,\n    deserializationContentTypes?: DeserializationContentTypes,\n    parsingOptions: SerializerOptions = {}\n  ) {\n    super(nextPolicy, requestPolicyOptions);\n\n    this.jsonContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.json) || defaultJsonContentTypes;\n    this.xmlContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.xml) || defaultXmlContentTypes;\n    this.xmlCharKey = parsingOptions.xmlCharKey ?? XML_CHARKEY;\n  }\n\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then((response: HttpOperationResponse) =>\n      deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response, {\n        xmlCharKey: this.xmlCharKey,\n      })\n    );\n  }\n}\n\nfunction getOperationResponse(\n  parsedResponse: HttpOperationResponse\n): undefined | OperationResponse {\n  let result: OperationResponse | undefined;\n  const request: WebResourceLike = parsedResponse.request;\n  const operationSpec: OperationSpec | undefined = request.operationSpec;\n  if (operationSpec) {\n    const operationResponseGetter:\n      | undefined\n      | ((\n          operationSpec: OperationSpec,\n          response: HttpOperationResponse\n        ) => undefined | OperationResponse) = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: HttpOperationResponse): boolean {\n  const shouldDeserialize: undefined | boolean | ((response: HttpOperationResponse) => boolean) =\n    parsedResponse.request.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\n/**\n * Given a particular set of content types to parse as either JSON or XML, consumes the HTTP response to produce the result object defined by the request's {@link OperationSpec}.\n * @param jsonContentTypes - Response content types to parse the body as JSON.\n * @param xmlContentTypes  - Response content types to parse the body as XML.\n * @param response - HTTP Response from the pipeline.\n * @param options  - Options to the serializer, mostly for configuring the XML parser if needed.\n * @returns A parsed {@link HttpOperationResponse} object that can be returned by the {@link ServiceClient}.\n */\nexport function deserializeResponseBody(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  response: HttpOperationResponse,\n  options: SerializerOptions = {}\n): Promise<HttpOperationResponse> {\n  const updatedOptions: Required<SerializerOptions> = {\n    rootName: options.rootName ?? \"\",\n    includeRoot: options.includeRoot ?? false,\n    xmlCharKey: options.xmlCharKey ?? XML_CHARKEY,\n  };\n  return parse(jsonContentTypes, xmlContentTypes, response, updatedOptions).then(\n    (parsedResponse) => {\n      if (!shouldDeserializeResponse(parsedResponse)) {\n        return parsedResponse;\n      }\n\n      const operationSpec = parsedResponse.request.operationSpec;\n      if (!operationSpec || !operationSpec.responses) {\n        return parsedResponse;\n      }\n\n      const responseSpec = getOperationResponse(parsedResponse);\n\n      const { error, shouldReturnResponse } = handleErrorResponse(\n        parsedResponse,\n        operationSpec,\n        responseSpec\n      );\n      if (error) {\n        throw error;\n      } else if (shouldReturnResponse) {\n        return parsedResponse;\n      }\n\n      // An operation response spec does exist for current status code, so\n      // use it to deserialize the response.\n      if (responseSpec) {\n        if (responseSpec.bodyMapper) {\n          let valueToDeserialize: any = parsedResponse.parsedBody;\n          if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n            valueToDeserialize =\n              typeof valueToDeserialize === \"object\"\n                ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!]\n                : [];\n          }\n          try {\n            parsedResponse.parsedBody = operationSpec.serializer.deserialize(\n              responseSpec.bodyMapper,\n              valueToDeserialize,\n              \"operationRes.parsedBody\",\n              options\n            );\n          } catch (innerError) {\n            const restError = new RestError(\n              `Error ${innerError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`,\n              undefined,\n              parsedResponse.status,\n              parsedResponse.request,\n              parsedResponse\n            );\n            throw restError;\n          }\n        } else if (operationSpec.httpMethod === \"HEAD\") {\n          // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n          parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n        }\n\n        if (responseSpec.headersMapper) {\n          parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(\n            responseSpec.headersMapper,\n            parsedResponse.headers.rawHeaders(),\n            \"operationRes.parsedHeaders\",\n            options\n          );\n        }\n      }\n\n      return parsedResponse;\n    }\n  );\n}\n\nfunction isOperationSpecEmpty(operationSpec: OperationSpec): boolean {\n  const expectedStatusCodes = Object.keys(operationSpec.responses);\n  return (\n    expectedStatusCodes.length === 0 ||\n    (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\")\n  );\n}\n\nfunction handleErrorResponse(\n  parsedResponse: HttpOperationResponse,\n  operationSpec: OperationSpec,\n  responseSpec: OperationResponse | undefined\n): { error: RestError | null; shouldReturnResponse: boolean } {\n  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  const isExpectedStatusCode: boolean = isOperationSpecEmpty(operationSpec)\n    ? isSuccessByStatus\n    : !!responseSpec;\n\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return { error: null, shouldReturnResponse: false };\n      }\n    } else {\n      return { error: null, shouldReturnResponse: false };\n    }\n  }\n\n  const errorResponseSpec = responseSpec ?? operationSpec.responses.default;\n  const streaming =\n    parsedResponse.request.streamResponseStatusCodes?.has(parsedResponse.status) ||\n    parsedResponse.request.streamResponseBody;\n  const initialErrorMessage = streaming\n    ? `Unexpected status code: ${parsedResponse.status}`\n    : (parsedResponse.bodyAsText as string);\n\n  const error = new RestError(\n    initialErrorMessage,\n    undefined,\n    parsedResponse.status,\n    parsedResponse.request,\n    parsedResponse\n  );\n\n  // If the item failed but there's no error spec or default spec to deserialize the error,\n  // we should fail so we just throw the parsed response\n  if (!errorResponseSpec) {\n    throw error;\n  }\n\n  const defaultBodyMapper = errorResponseSpec.bodyMapper;\n  const defaultHeadersMapper = errorResponseSpec.headersMapper;\n\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      const parsedBody = parsedResponse.parsedBody;\n      let parsedError;\n      if (defaultBodyMapper) {\n        let valueToDeserialize: any = parsedBody;\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperType.Sequence) {\n          valueToDeserialize =\n            typeof parsedBody === \"object\" ? parsedBody[defaultBodyMapper.xmlElementName!] : [];\n        }\n        parsedError = operationSpec.serializer.deserialize(\n          defaultBodyMapper,\n          valueToDeserialize,\n          \"error.response.parsedBody\"\n        );\n      }\n\n      const internalError: any = parsedBody.error || parsedError || parsedBody;\n      error.code = internalError.code;\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n\n      if (defaultBodyMapper) {\n        error.response!.parsedBody = parsedError;\n      }\n    }\n\n    // If error response has headers, try to deserialize it using default header mapper\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      error.response!.parsedHeaders = operationSpec.serializer.deserialize(\n        defaultHeadersMapper,\n        parsedResponse.headers.rawHeaders(),\n        \"operationRes.parsedHeaders\"\n      );\n    }\n  } catch (defaultError) {\n    error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n  }\n\n  return { error, shouldReturnResponse: false };\n}\n\nfunction parse(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  operationResponse: HttpOperationResponse,\n  opts: Required<SerializerOptions>\n): Promise<HttpOperationResponse> {\n  const errorHandler = (err: Error & { code: string }): Promise<never> => {\n    const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n    const errCode = err.code || RestError.PARSE_ERROR;\n    const e = new RestError(\n      msg,\n      errCode,\n      operationResponse.status,\n      operationResponse.request,\n      operationResponse\n    );\n    return Promise.reject(e);\n  };\n\n  const streaming =\n    operationResponse.request.streamResponseStatusCodes?.has(operationResponse.status) ||\n    operationResponse.request.streamResponseBody;\n  if (!streaming && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType\n      ? []\n      : contentType.split(\";\").map((component) => component.toLowerCase());\n    if (\n      contentComponents.length === 0 ||\n      contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)\n    ) {\n      return new Promise<HttpOperationResponse>((resolve) => {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n      return parseXML(text, opts)\n        .then((body) => {\n          operationResponse.parsedBody = body;\n          return operationResponse;\n        })\n        .catch(errorHandler);\n    }\n  }\n\n  return Promise.resolve(operationResponse);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\nimport { HttpPipelineLogger } from \"../httpPipelineLogger\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Creates a new RequestPolicy per-request that uses the provided nextPolicy.\n */\nexport type RequestPolicyFactory = {\n  create(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike): RequestPolicy;\n};\n\n/**\n * The underlying structure of a request policy.\n */\nexport interface RequestPolicy {\n  /**\n   * A method that retrieves an {@link HttpOperationResponse} given a {@link WebResourceLike} describing the request to be made.\n   * @param httpRequest - {@link WebResourceLike} describing the request to be made.\n   */\n  sendRequest(httpRequest: WebResourceLike): Promise<HttpOperationResponse>;\n}\n\n/**\n * The base class from which all request policies derive.\n */\nexport abstract class BaseRequestPolicy implements RequestPolicy {\n  /**\n   * The main method to implement that manipulates a request/response.\n   */\n  protected constructor(\n    /**\n     * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.\n     */\n    readonly _nextPolicy: RequestPolicy,\n    /**\n     * The options that can be passed to a given request policy.\n     */\n    readonly _options: RequestPolicyOptionsLike\n  ) {}\n\n  /**\n   * Sends a network request based on the given web resource.\n   * @param webResource - A {@link WebResourceLike} that describes a HTTP request to be made.\n   */\n  public abstract sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse>;\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return this._options.shouldLog(logLevel);\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    this._options.log(logLevel, message);\n  }\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport interface RequestPolicyOptionsLike {\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  shouldLog(logLevel: HttpPipelineLogLevel): boolean;\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meet the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n  log(logLevel: HttpPipelineLogLevel, message: string): void;\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport class RequestPolicyOptions {\n  constructor(private _logger?: HttpPipelineLogger) {}\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return (\n      !!this._logger &&\n      logLevel !== HttpPipelineLogLevel.OFF &&\n      logLevel <= this._logger.minimumLogLevel\n    );\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meet the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * The different levels of logs that can be used with the HttpPipelineLogger.\n */\nexport enum HttpPipelineLogLevel {\n  /**\n   * A log level that indicates that no logs will be logged.\n   */\n  OFF,\n\n  /**\n   * An error log.\n   */\n  ERROR,\n\n  /**\n   * A warning log.\n   */\n  WARNING,\n\n  /**\n   * An information log.\n   */\n  INFO,\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SerializerOptions, XML_ATTRKEY, XML_CHARKEY } from \"./serializer.common\";\n\nif (!self.document || !self.DOMParser || !self.Node || !self.XMLSerializer) {\n  throw new Error(\n    `This library depends on the following DOM objects: [\"document\", \"DOMParser\", \"Node\", \"XMLSerializer\"] to parse XML, but some of these are undefined. You may provide a polyfill to make these globally available in order to support your environment. For more information, please refer to https://aka.ms/azsdk/js/web-workers. `\n  );\n}\nconst doc = document.implementation.createDocument(null, null, null);\n\nconst parser = new DOMParser();\nexport function parseXML(str: string, opts: SerializerOptions = {}): Promise<any> {\n  try {\n    const updatedOptions: Required<SerializerOptions> = {\n      rootName: opts.rootName ?? \"\",\n      includeRoot: opts.includeRoot ?? false,\n      xmlCharKey: opts.xmlCharKey ?? XML_CHARKEY,\n    };\n    const dom = parser.parseFromString(str, \"application/xml\");\n    throwIfError(dom);\n\n    let obj;\n    if (updatedOptions.includeRoot) {\n      obj = domToObject(dom, updatedOptions);\n    } else {\n      obj = domToObject(dom.childNodes[0], updatedOptions);\n    }\n\n    return Promise.resolve(obj);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\nlet errorNS: string | undefined;\n\nfunction getErrorNamespace(): string {\n  if (errorNS === undefined) {\n    try {\n      errorNS =\n        parser.parseFromString(\"INVALID\", \"text/xml\").getElementsByTagName(\"parsererror\")[0]\n          .namespaceURI! ?? \"\";\n    } catch (ignored) {\n      // Most browsers will return a document containing <parsererror>, but IE will throw.\n      errorNS = \"\";\n    }\n  }\n  return errorNS;\n}\n\nfunction throwIfError(dom: Document): void {\n  const parserErrors = dom.getElementsByTagName(\"parsererror\");\n  if (parserErrors.length > 0 && getErrorNamespace()) {\n    for (let i = 0; i < parserErrors.length; i++) {\n      if (parserErrors[i].namespaceURI === errorNS) {\n        throw new Error(parserErrors[i].innerHTML);\n      }\n    }\n  }\n}\n\nfunction isElement(node: Node): node is Element {\n  return !!(node as Element).attributes;\n}\n\n/**\n * Get the Element-typed version of the provided Node if the provided node is an element with\n * attributes. If it isn't, then undefined is returned.\n */\nfunction asElementWithAttributes(node: Node): Element | undefined {\n  return isElement(node) && node.hasAttributes() ? node : undefined;\n}\n\nfunction domToObject(node: Node, options: Required<SerializerOptions>): any {\n  let result: any = {};\n\n  const childNodeCount: number = node.childNodes.length;\n\n  const firstChildNode: Node = node.childNodes[0];\n  const onlyChildTextValue: string | undefined =\n    (firstChildNode &&\n      childNodeCount === 1 &&\n      firstChildNode.nodeType === Node.TEXT_NODE &&\n      firstChildNode.nodeValue) ||\n    undefined;\n\n  const elementWithAttributes: Element | undefined = asElementWithAttributes(node);\n  if (elementWithAttributes) {\n    result[XML_ATTRKEY] = {};\n\n    for (let i = 0; i < elementWithAttributes.attributes.length; i++) {\n      const attr = elementWithAttributes.attributes[i];\n      result[XML_ATTRKEY][attr.nodeName] = attr.nodeValue;\n    }\n\n    if (onlyChildTextValue) {\n      result[options.xmlCharKey] = onlyChildTextValue;\n    }\n  } else if (childNodeCount === 0) {\n    result = \"\";\n  } else if (onlyChildTextValue) {\n    result = onlyChildTextValue;\n  }\n\n  if (!onlyChildTextValue) {\n    for (let i = 0; i < childNodeCount; i++) {\n      const child = node.childNodes[i];\n      // Ignore leading/trailing whitespace nodes\n      if (child.nodeType !== Node.TEXT_NODE) {\n        const childObject: any = domToObject(child, options);\n        if (!result[child.nodeName]) {\n          result[child.nodeName] = childObject;\n        } else if (Array.isArray(result[child.nodeName])) {\n          result[child.nodeName].push(childObject);\n        } else {\n          result[child.nodeName] = [result[child.nodeName], childObject];\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\nconst serializer = new XMLSerializer();\n\nexport function stringifyXML(content: unknown, opts: SerializerOptions = {}): string {\n  const updatedOptions: Required<SerializerOptions> = {\n    rootName: opts.rootName ?? \"root\",\n    includeRoot: opts.includeRoot ?? false,\n    xmlCharKey: opts.xmlCharKey ?? XML_CHARKEY,\n  };\n  const dom = buildNode(content, updatedOptions.rootName, updatedOptions)[0];\n  return (\n    '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + serializer.serializeToString(dom)\n  );\n}\n\nfunction buildAttributes(attrs: { [key: string]: { toString(): string } }): Attr[] {\n  const result = [];\n  for (const key of Object.keys(attrs)) {\n    const attr = doc.createAttribute(key);\n    attr.value = attrs[key].toString();\n    result.push(attr);\n  }\n  return result;\n}\n\nfunction buildNode(obj: any, elementName: string, options: Required<SerializerOptions>): Node[] {\n  if (\n    obj === undefined ||\n    obj === null ||\n    typeof obj === \"string\" ||\n    typeof obj === \"number\" ||\n    typeof obj === \"boolean\"\n  ) {\n    const elem = doc.createElement(elementName);\n    elem.textContent = obj === undefined || obj === null ? \"\" : obj.toString();\n    return [elem];\n  } else if (Array.isArray(obj)) {\n    const result = [];\n    for (const arrayElem of obj) {\n      for (const child of buildNode(arrayElem, elementName, options)) {\n        result.push(child);\n      }\n    }\n    return result;\n  } else if (typeof obj === \"object\") {\n    const elem = doc.createElement(elementName);\n    for (const key of Object.keys(obj)) {\n      if (key === XML_ATTRKEY) {\n        for (const attr of buildAttributes(obj[key])) {\n          elem.attributes.setNamedItem(attr);\n        }\n      } else if (key === options.xmlCharKey) {\n        elem.textContent = obj[key].toString();\n      } else {\n        for (const child of buildNode(obj[key], key, options)) {\n          elem.appendChild(child);\n        }\n      }\n    }\n    return [elem];\n  } else {\n    throw new Error(`Illegal value passed to buildObject: ${obj}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Options for how HTTP connections should be maintained for future\n * requests.\n */\nexport interface KeepAliveOptions {\n  /**\n   * When true, connections will be kept alive for multiple requests.\n   * Defaults to true.\n   */\n  enable: boolean;\n}\n\n/**\n * By default, HTTP connections are maintained for future requests.\n */\nexport const DefaultKeepAliveOptions: KeepAliveOptions = {\n  enable: true,\n};\n\n/**\n * Creates a policy that controls whether HTTP connections are maintained on future requests.\n * @param keepAliveOptions - Keep alive options. By default, HTTP connections are maintained for future requests.\n * @returns An instance of the {@link KeepAlivePolicy}\n */\nexport function keepAlivePolicy(keepAliveOptions?: KeepAliveOptions): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new KeepAlivePolicy(nextPolicy, options, keepAliveOptions || DefaultKeepAliveOptions);\n    },\n  };\n}\n\n/**\n * KeepAlivePolicy is a policy used to control keep alive settings for every request.\n */\nexport class KeepAlivePolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param keepAliveOptions -\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private readonly keepAliveOptions: KeepAliveOptions\n  ) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   * @returns\n   */\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    request.keepAlive = this.keepAliveOptions.enable;\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n\n/**\n * Options for how redirect responses are handled.\n */\nexport interface RedirectOptions {\n  /**\n   * When true, redirect responses are followed.  Defaults to true.\n   */\n  handleRedirects: boolean;\n\n  /**\n   * The maximum number of times the redirect URL will be tried before\n   * failing.  Defaults to 20.\n   */\n  maxRetries?: number;\n}\n\nexport const DefaultRedirectOptions: RedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20,\n};\n\n/**\n * Creates a redirect policy, which sends a repeats the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n * @param maximumRetries - Maximum number of redirects to follow.\n * @returns An instance of the {@link RedirectPolicy}\n */\nexport function redirectPolicy(maximumRetries = 20): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    },\n  };\n}\n\n/**\n * Resends the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n */\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, readonly maxRetries = 20) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request)\n      .then((response) => handleRedirect(this, response, 0));\n  }\n}\n\nfunction handleRedirect(\n  policy: RedirectPolicy,\n  response: HttpOperationResponse,\n  currentRetries: number\n): Promise<HttpOperationResponse> {\n  const { request, status } = response;\n  const locationHeader = response.headers.get(\"location\");\n  if (\n    locationHeader &&\n    (status === 300 ||\n      (status === 301 && allowedRedirect.includes(request.method)) ||\n      (status === 302 && allowedRedirect.includes(request.method)) ||\n      (status === 303 && request.method === \"POST\") ||\n      status === 307) &&\n    (!policy.maxRetries || currentRetries < policy.maxRetries)\n  ) {\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n      delete request.body;\n    }\n\n    return policy._nextPolicy\n      .sendRequest(request)\n      .then((res) => handleRedirect(policy, res, currentRetries + 1));\n  }\n\n  return Promise.resolve(response);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport {\n  DEFAULT_CLIENT_MAX_RETRY_INTERVAL,\n  DEFAULT_CLIENT_RETRY_COUNT,\n  DEFAULT_CLIENT_RETRY_INTERVAL,\n  RetryData,\n  RetryError,\n  isNumber,\n  shouldRetry,\n  updateRetryData,\n} from \"../util/exponentialBackoffStrategy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { RestError } from \"../restError\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"../util/delay\";\nimport { logger } from \"../log\";\n\n/**\n * Policy that retries the request as many times as configured for as long as the max retry time interval specified, each retry waiting longer to begin than the last time.\n * @param retryCount - Maximum number of retries.\n * @param retryInterval - Base time between retries.\n * @param maxRetryInterval - Maximum time to wait between retries.\n */\nexport function exponentialRetryPolicy(\n  retryCount?: number,\n  retryInterval?: number,\n  maxRetryInterval?: number\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ExponentialRetryPolicy(\n        nextPolicy,\n        options,\n        retryCount,\n        retryInterval,\n        maxRetryInterval\n      );\n    },\n  };\n}\n\n/**\n * Describes the Retry Mode type. Currently supporting only Exponential.\n */\nexport enum RetryMode {\n  /**\n   * Currently supported retry mode.\n   * Each time a retry happens, it will take exponentially more time than the last time.\n   */\n  Exponential,\n}\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface RetryOptions {\n  /**\n   * The maximum number of retry attempts.  Defaults to 3.\n   */\n  maxRetries?: number;\n\n  /**\n   * The amount of delay in milliseconds between retry attempts. Defaults to 30000\n   * (30 seconds). The delay increases exponentially with each retry up to a maximum\n   * specified by maxRetryDelayInMs.\n   */\n  retryDelayInMs?: number;\n\n  /**\n   * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n   * to 90000 (90 seconds).\n   */\n  maxRetryDelayInMs?: number;\n\n  /**\n   * Currently supporting only Exponential mode.\n   */\n  mode?: RetryMode;\n}\n\nexport const DefaultRetryOptions: RetryOptions = {\n  maxRetries: DEFAULT_CLIENT_RETRY_COUNT,\n  retryDelayInMs: DEFAULT_CLIENT_RETRY_INTERVAL,\n  maxRetryDelayInMs: DEFAULT_CLIENT_MAX_RETRY_INTERVAL,\n};\n\n/**\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n */\nexport class ExponentialRetryPolicy extends BaseRequestPolicy {\n  /**\n   * The client retry count.\n   */\n  retryCount: number;\n  /**\n   * The client retry interval in milliseconds.\n   */\n  retryInterval: number;\n  /**\n   * The maximum retry interval in milliseconds.\n   */\n  maxRetryInterval: number;\n\n  /**\n   * @param nextPolicy - The next RequestPolicy in the pipeline chain.\n   * @param options - The options for this RequestPolicy.\n   * @param retryCount - The client retry count.\n   * @param retryInterval - The client retry interval, in milliseconds.\n   * @param minRetryInterval - The minimum retry interval, in milliseconds.\n   * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryCount?: number,\n    retryInterval?: number,\n    maxRetryInterval?: number\n  ) {\n    super(nextPolicy, options);\n    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.maxRetryInterval = isNumber(maxRetryInterval)\n      ? maxRetryInterval\n      : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => retry(this, request, response))\n      .catch((error) => retry(this, request, error.response, undefined, error));\n  }\n}\n\nasync function retry(\n  policy: ExponentialRetryPolicy,\n  request: WebResourceLike,\n  response?: HttpOperationResponse,\n  retryData?: RetryData,\n  requestError?: RetryError\n): Promise<HttpOperationResponse> {\n  function shouldPolicyRetry(responseParam?: HttpOperationResponse): boolean {\n    const statusCode = responseParam?.status;\n    if (statusCode === 503 && response?.headers.get(Constants.HeaderConstants.RETRY_AFTER)) {\n      return false;\n    }\n\n    if (\n      statusCode === undefined ||\n      (statusCode < 500 && statusCode !== 408) ||\n      statusCode === 501 ||\n      statusCode === 505\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  retryData = updateRetryData(\n    {\n      retryInterval: policy.retryInterval,\n      minRetryInterval: 0,\n      maxRetryInterval: policy.maxRetryInterval,\n    },\n    retryData,\n    requestError\n  );\n\n  const isAborted: boolean | undefined = request.abortSignal && request.abortSignal.aborted;\n  if (!isAborted && shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, response)) {\n    logger.info(`Retrying request in ${retryData.retryInterval}`);\n    try {\n      await delay(retryData.retryInterval);\n      const res = await policy._nextPolicy.sendRequest(request.clone());\n      return retry(policy, request, res, retryData);\n    } catch (err) {\n      return retry(policy, request, response, retryData, err);\n    }\n  } else if (isAborted || requestError || !response) {\n    // If the operation failed in the end, return all errors instead of just the last one\n    const err =\n      retryData.error ||\n      new RestError(\n        \"Failed to send the request.\",\n        RestError.REQUEST_SEND_ERROR,\n        response && response.status,\n        response && response.request,\n        response\n      );\n    throw err;\n  } else {\n    return response;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"../coreHttp\";\n\nexport const DEFAULT_CLIENT_RETRY_COUNT = 3;\n// intervals are in ms\nexport const DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\nexport const DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\nexport const DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\n\nexport function isNumber(n: unknown): n is number {\n  return typeof n === \"number\";\n}\nexport interface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\nexport interface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\n/**\n * @internal\n * Determines if the operation should be retried.\n *\n * @param retryLimit - Specifies the max number of retries.\n * @param predicate - Initial chekck on whether to retry based on given responses or errors\n * @param retryData -  The retry data.\n * @returns True if the operation qualifies for a retry; false otherwise.\n */\nexport function shouldRetry(\n  retryLimit: number,\n  predicate: (response?: HttpOperationResponse, error?: RetryError) => boolean,\n  retryData: RetryData,\n  response?: HttpOperationResponse,\n  error?: RetryError\n): boolean {\n  if (!predicate(response, error)) {\n    return false;\n  }\n\n  return retryData.retryCount < retryLimit;\n}\n\n/**\n * @internal\n * Updates the retry data for the next attempt.\n *\n * @param retryOptions - specifies retry interval, and its lower bound and upper bound.\n * @param retryData -  The retry data.\n * @param err - The operation\"s error, if any.\n */\nexport function updateRetryData(\n  retryOptions: { retryInterval: number; minRetryInterval: number; maxRetryInterval: number },\n  retryData: RetryData = { retryCount: 0, retryInterval: 0 },\n  err?: RetryError\n): RetryData {\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  }\n\n  // Adjust retry count\n  retryData.retryCount++;\n\n  // Adjust retry interval\n  let incrementDelta = Math.pow(2, retryData.retryCount - 1) - 1;\n  const boundedRandDelta =\n    retryOptions.retryInterval * 0.8 +\n    Math.floor(Math.random() * (retryOptions.retryInterval * 0.4));\n  incrementDelta *= boundedRandDelta;\n\n  retryData.retryInterval = Math.min(\n    retryOptions.minRetryInterval + incrementDelta,\n    retryOptions.maxRetryInterval\n  );\n\n  return retryData;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError, AbortSignalLike } from \"@azure/abort-controller\";\nimport { isDefined } from \"./typeguards\";\n\nconst StandardAbortMessage = \"The operation was aborted.\";\n\n/**\n * A wrapper for setTimeout that resolves a promise after delayInMs milliseconds.\n * @param delayInMs - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @param options - The options for delay - currently abort options\n *   @param abortSignal - The abortSignal associated with containing operation.\n *   @param abortErrorMsg - The abort error message associated with containing operation.\n * @returns - Resolved promise\n */\nexport function delay<T>(\n  delayInMs: number,\n  value?: T,\n  options?: {\n    abortSignal?: AbortSignalLike;\n    abortErrorMsg?: string;\n  }\n): Promise<T | void> {\n  return new Promise((resolve, reject) => {\n    let timer: ReturnType<typeof setTimeout> | undefined = undefined;\n    let onAborted: (() => void) | undefined = undefined;\n\n    const rejectOnAbort = (): void => {\n      return reject(\n        new AbortError(options?.abortErrorMsg ? options?.abortErrorMsg : StandardAbortMessage)\n      );\n    };\n\n    const removeListeners = (): void => {\n      if (options?.abortSignal && onAborted) {\n        options.abortSignal.removeEventListener(\"abort\", onAborted);\n      }\n    };\n\n    onAborted = (): void => {\n      if (isDefined(timer)) {\n        clearTimeout(timer);\n      }\n      removeListeners();\n      return rejectOnAbort();\n    };\n\n    if (options?.abortSignal && options.abortSignal.aborted) {\n      return rejectOnAbort();\n    }\n\n    timer = setTimeout(() => {\n      removeListeners();\n      resolve(value);\n    }, delayInMs);\n\n    if (options?.abortSignal) {\n      options.abortSignal.addEventListener(\"abort\", onAborted);\n    }\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Helper TypeGuard that checks if the value is not null or undefined.\n * @param thing - Anything\n * @internal\n */\nexport function isDefined<T>(thing: T | undefined | null): thing is T {\n  return typeof thing !== \"undefined\" && thing !== null;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"core-http\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport debug, { Debugger } from \"./debug\";\nexport { Debugger } from \"./debug\";\n\nconst registeredLoggers = new Set<AzureDebugger>();\nconst logLevelFromEnv =\n  (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\n\nlet azureLogLevel: AzureLogLevel | undefined;\n\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexport const AzureLogger: AzureClientLogger = debug(\"azure\");\nAzureLogger.log = (...args) => {\n  debug.log(...args);\n};\n\n/**\n * The log levels supported by the logger.\n * The log levels in order of most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport type AzureLogLevel = \"verbose\" | \"info\" | \"warning\" | \"error\";\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\n\ntype AzureDebugger = Debugger & { level: AzureLogLevel };\n\n/**\n * An AzureClientLogger is a function that can log to an appropriate severity level.\n */\nexport type AzureClientLogger = Debugger;\n\nif (logLevelFromEnv) {\n  // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n  if (isAzureLogLevel(logLevelFromEnv)) {\n    setLogLevel(logLevelFromEnv);\n  } else {\n    console.error(\n      `AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\n        \", \"\n      )}.`\n    );\n  }\n}\n\n/**\n * Immediately enables logging at the specified log level.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport function setLogLevel(level?: AzureLogLevel): void {\n  if (level && !isAzureLogLevel(level)) {\n    throw new Error(\n      `Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`\n    );\n  }\n  azureLogLevel = level;\n\n  const enabledNamespaces = [];\n  for (const logger of registeredLoggers) {\n    if (shouldEnable(logger)) {\n      enabledNamespaces.push(logger.namespace);\n    }\n  }\n\n  debug.enable(enabledNamespaces.join(\",\"));\n}\n\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel(): AzureLogLevel | undefined {\n  return azureLogLevel;\n}\n\nconst levelMap = {\n  verbose: 400,\n  info: 300,\n  warning: 200,\n  error: 100\n};\n\n/**\n * Defines the methods available on the SDK-facing logger.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface AzureLogger {\n  /**\n   * Used for failures the program is unlikely to recover from,\n   * such as Out of Memory.\n   */\n  error: Debugger;\n  /**\n   * Used when a function fails to perform its intended task.\n   * Usually this means the function will throw an exception.\n   * Not used for self-healing events (e.g. automatic retry)\n   */\n  warning: Debugger;\n  /**\n   * Used when a function operates normally.\n   */\n  info: Debugger;\n  /**\n   * Used for detailed trbouleshooting scenarios. This is\n   * intended for use by developers / system administrators\n   * for diagnosing specific failures.\n   */\n  verbose: Debugger;\n}\n\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nexport function createClientLogger(namespace: string): AzureLogger {\n  const clientRootLogger: AzureClientLogger = AzureLogger.extend(namespace);\n  patchLogMethod(AzureLogger, clientRootLogger);\n  return {\n    error: createLogger(clientRootLogger, \"error\"),\n    warning: createLogger(clientRootLogger, \"warning\"),\n    info: createLogger(clientRootLogger, \"info\"),\n    verbose: createLogger(clientRootLogger, \"verbose\")\n  };\n}\n\nfunction patchLogMethod(parent: AzureClientLogger, child: AzureClientLogger | AzureDebugger): void {\n  child.log = (...args) => {\n    parent.log(...args);\n  };\n}\n\nfunction createLogger(parent: AzureClientLogger, level: AzureLogLevel): AzureDebugger {\n  const logger: AzureDebugger = Object.assign(parent.extend(level), {\n    level\n  });\n\n  patchLogMethod(parent, logger);\n\n  if (shouldEnable(logger)) {\n    const enabledNamespaces = debug.disable();\n    debug.enable(enabledNamespaces + \",\" + logger.namespace);\n  }\n\n  registeredLoggers.add(logger);\n\n  return logger;\n}\n\nfunction shouldEnable(logger: AzureDebugger): boolean {\n  if (azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction isAzureLogLevel(logLevel: string): logLevel is AzureLogLevel {\n  return AZURE_LOG_LEVELS.includes(logLevel as any);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { log } from \"./log\";\n\n/**\n * A simple mechanism for enabling logging.\n * Intended to mimic the publicly available `debug` package.\n */\nexport interface Debug {\n  /**\n   * Creates a new logger with the given namespace.\n   */\n  (namespace: string): Debugger;\n  /**\n   * The default log method (defaults to console)\n   */\n  log: (...args: any[]) => void;\n  /**\n   * Enables a particular set of namespaces.\n   * To enable multiple separate them with commas, e.g. \"info,debug\".\n   * Supports wildcards, e.g. \"azure:*\"\n   * Supports skip syntax, e.g. \"azure:*,-azure:storage:*\" will enable\n   * everything under azure except for things under azure:storage.\n   */\n  enable: (namespaces: string) => void;\n  /**\n   * Checks if a particular namespace is enabled.\n   */\n  enabled: (namespace: string) => boolean;\n  /**\n   * Disables all logging, returns what was previously enabled.\n   */\n  disable: () => string;\n}\n\n/**\n * A log function that can be dynamically enabled and redirected.\n */\nexport interface Debugger {\n  /**\n   * Logs the given arguments to the `log` method.\n   */\n  (...args: any[]): void;\n  /**\n   * True if this logger is active and logging.\n   */\n  enabled: boolean;\n  /**\n   * Used to cleanup/remove this logger.\n   */\n  destroy: () => boolean;\n  /**\n   * The current log method. Can be overridden to redirect output.\n   */\n  log: (...args: any[]) => void;\n  /**\n   * The namespace of this logger.\n   */\n  namespace: string;\n  /**\n   * Extends this logger with a child namespace.\n   * Namespaces are separated with a ':' character.\n   */\n  extend: (namespace: string) => Debugger;\n}\n\nconst debugEnvVariable =\n  (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\n\nlet enabledString: string | undefined;\nlet enabledNamespaces: RegExp[] = [];\nlet skippedNamespaces: RegExp[] = [];\nconst debuggers: Debugger[] = [];\n\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\n\nconst debugObj: Debug = Object.assign(\n  (namespace: string): Debugger => {\n    return createDebugger(namespace);\n  },\n  {\n    enable,\n    enabled,\n    disable,\n    log\n  }\n);\n\nfunction enable(namespaces: string): void {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\n\nfunction enabled(namespace: string): boolean {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n  for (const enabledNamespace of enabledNamespaces) {\n    if (enabledNamespace.test(namespace)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction disable(): string {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\n\nfunction createDebugger(namespace: string): Debugger {\n  const newDebugger: Debugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend\n  });\n\n  function debug(...args: any[]): void {\n    if (!newDebugger.enabled) {\n      return;\n    }\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n    newDebugger.log(...args);\n  }\n\n  debuggers.push(newDebugger);\n\n  return newDebugger;\n}\n\nfunction destroy(this: Debugger): boolean {\n  const index = debuggers.indexOf(this);\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n  return false;\n}\n\nfunction extend(this: Debugger, namespace: string): Debugger {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\n\nexport default debugObj;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport function log(...args: any[]): void {\n  if (args.length > 0) {\n    const firstArg = String(args[0]);\n    if (firstArg.includes(\":error\")) {\n      console.error(...args);\n    } else if (firstArg.includes(\":warning\")) {\n      console.warn(...args);\n    } else if (firstArg.includes(\":info\")) {\n      console.info(...args);\n    } else if (firstArg.includes(\":verbose\")) {\n      console.debug(...args);\n    } else {\n      console.debug(...args);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { Debugger } from \"@azure/logger\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Sanitizer } from \"../util/sanitizer\";\nimport { WebResourceLike } from \"../webResource\";\nimport { logger as coreLogger } from \"../log\";\n\n/**\n * Options to pass to the {@link logPolicy}.\n * By default only a set list of headers are logged, though this can be configured. Request and response bodies are never logged.\n */\nexport interface LogPolicyOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to:\n   * x-ms-client-request-id, x-ms-return-client-request-id, x-ms-useragent, x-ms-correlation-request-id,\n   * x-ms-request-id, client-request-id, ms-cv, return-client-request-id, traceparent, Access-Control-Allow-Credentials,\n   * Access-Control-Allow-Headers, Access-Control-Allow-Methods, Access-Control-Allow-Origin, Access-Control-Expose-Headers,\n   * Access-Control-Max-Age, Access-Control-Request-Headers, Access-Control-Request-Method, Origin, Accept, Accept-Encoding,\n   * Cache-Control, Connection, Content-Length, Content-Type, Date, ETag, Expires, If-Match, If-Modified-Since, If-None-Match,\n   * If-Unmodified-Since, Last-Modified, Pragma, Request-Id, Retry-After, Server, Transfer-Encoding, and User-Agent.\n   *\n   * Any headers specified in this field will be added to that list.\n   * Any other values will be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n\n  /**\n   * The Debugger (logger) instance to use for writing pipeline logs.\n   */\n  logger?: Debugger;\n}\n\n/**\n * Creates a policy that logs information about the outgoing request and the incoming responses.\n * @param loggingOptions - Logging options.\n * @returns An instance of the {@link LogPolicy}\n */\nexport function logPolicy(loggingOptions: LogPolicyOptions = {}): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new LogPolicy(nextPolicy, options, loggingOptions);\n    },\n  };\n}\n\n/**\n * A policy that logs information about the outgoing request and the incoming responses.\n */\nexport class LogPolicy extends BaseRequestPolicy {\n  logger: Debugger;\n  sanitizer: Sanitizer;\n\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  public get allowedHeaderNames(): Set<string> {\n    return this.sanitizer.allowedHeaderNames;\n  }\n\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  public set allowedHeaderNames(allowedHeaderNames: Set<string>) {\n    this.sanitizer.allowedHeaderNames = allowedHeaderNames;\n  }\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  public get allowedQueryParameters(): Set<string> {\n    return this.sanitizer.allowedQueryParameters;\n  }\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  public set allowedQueryParameters(allowedQueryParameters: Set<string>) {\n    this.sanitizer.allowedQueryParameters = allowedQueryParameters;\n  }\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    {\n      logger = coreLogger.info,\n      allowedHeaderNames = [],\n      allowedQueryParameters = [],\n    }: LogPolicyOptions = {}\n  ) {\n    super(nextPolicy, options);\n    this.logger = logger;\n    this.sanitizer = new Sanitizer({ allowedHeaderNames, allowedQueryParameters });\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);\n\n    this.logRequest(request);\n    return this._nextPolicy.sendRequest(request).then((response) => this.logResponse(response));\n  }\n\n  private logRequest(request: WebResourceLike): void {\n    this.logger(`Request: ${this.sanitizer.sanitize(request)}`);\n  }\n\n  private logResponse(response: HttpOperationResponse): HttpOperationResponse {\n    this.logger(`Response status code: ${response.status}`);\n    this.logger(`Headers: ${this.sanitizer.sanitize(response.headers)}`);\n    return response;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Mapper } from \"./serializer\";\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\n\n/**\n * A path which describes how to access a particular property in a given object data source. May be a single property name, an array that denotes nested property names, or a set of multiple named properties with paths in the case of complex object values.\n */\nexport type ParameterPath = string | string[] | { [propertyName: string]: ParameterPath };\n\n/**\n * A common interface that all Operation parameter's extend.\n */\nexport interface OperationParameter {\n  /**\n   * The path to this parameter's value in OperationArguments or the object that contains paths for\n   * each property's value in OperationArguments.\n   */\n  parameterPath: ParameterPath;\n\n  /**\n   * The mapper that defines how to validate and serialize this parameter's value.\n   */\n  mapper: Mapper;\n}\n\n/**\n * A parameter for an operation that will be substituted into the operation's request URL.\n */\nexport interface OperationURLParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the URL parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n}\n\n/**\n * A parameter for an operation that will be added as a query parameter to the operation's HTTP\n * request.\n */\nexport interface OperationQueryParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the query parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n\n  /**\n   * If this query parameter's value is a collection, what type of format should the value be\n   * converted to.\n   */\n  collectionFormat?: QueryCollectionFormat;\n}\n\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n */\nexport function getPathStringFromParameter(parameter: OperationParameter): string {\n  return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);\n}\n\nexport function getPathStringFromParameterPath(\n  parameterPath: ParameterPath,\n  mapper: Mapper\n): string {\n  let result: string;\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName!;\n  }\n  return result;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { MapperType, Serializer } from \"./serializer\";\nimport {\n  OperationParameter,\n  OperationQueryParameter,\n  OperationURLParameter,\n} from \"./operationParameter\";\nimport { HttpMethods } from \"./webResource\";\nimport { OperationResponse } from \"./operationResponse\";\n\n/**\n * A specification that defines how to perform a particular service operation over HTTP, including how to properly serialize request information into and deserialize response information into an object payload returnable by the {@link ServiceClient}.\n */\nexport interface OperationSpec {\n  /**\n   * The serializer to use in this operation.\n   */\n  readonly serializer: Serializer;\n\n  /**\n   * The HTTP method that should be used by requests for this operation.\n   */\n  readonly httpMethod: HttpMethods;\n\n  /**\n   * The URL that was provided in the service's specification. This will still have all of the URL\n   * template variables in it. If this is not provided when the OperationSpec is created, then it\n   * will be populated by a \"baseUri\" property on the ServiceClient.\n   */\n  readonly baseUrl?: string;\n\n  /**\n   * The fixed path for this operation's URL. This will still have all of the URL template variables\n   * in it.\n   */\n  readonly path?: string;\n\n  /**\n   * The content type of the request body. This value will be used as the \"Content-Type\" header if\n   * it is provided.\n   */\n  readonly contentType?: string;\n\n  /**\n   * The media type of the request body.\n   * This value can be used to aide in serialization if it is provided.\n   */\n  readonly mediaType?:\n    | \"json\"\n    | \"xml\"\n    | \"form\"\n    | \"binary\"\n    | \"multipart\"\n    | \"text\"\n    | \"unknown\"\n    | string;\n  /**\n   * The parameter that will be used to construct the HTTP request's body.\n   */\n  readonly requestBody?: OperationParameter;\n\n  /**\n   * Whether or not this operation uses XML request and response bodies.\n   */\n  readonly isXML?: boolean;\n\n  /**\n   * The parameters to the operation method that will be substituted into the constructed URL.\n   */\n  readonly urlParameters?: ReadonlyArray<OperationURLParameter>;\n\n  /**\n   * The parameters to the operation method that will be added to the constructed URL's query.\n   */\n  readonly queryParameters?: ReadonlyArray<OperationQueryParameter>;\n\n  /**\n   * The parameters to the operation method that will be converted to headers on the operation's\n   * HTTP request.\n   */\n  readonly headerParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The parameters to the operation method that will be used to create a formdata body for the\n   * operation's HTTP request.\n   */\n  readonly formDataParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The different types of responses that this operation can return based on what status code is\n   * returned.\n   */\n  readonly responses: { [responseCode: string]: OperationResponse };\n}\n\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nexport function getStreamResponseStatusCodes(operationSpec: OperationSpec): Set<number> {\n  const result = new Set<number>();\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse = operationSpec.responses[statusCode];\n    if (\n      operationResponse.bodyMapper &&\n      operationResponse.bodyMapper.type.name === MapperType.Stream\n    ) {\n      result.add(Number(statusCode));\n    }\n  }\n  return result;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { Context, SpanOptions } from \"./tracing\";\n\n/**\n * Represents a credential capable of providing an authentication token.\n */\nexport interface TokenCredential {\n  /**\n   * Gets the token provided by this credential.\n   *\n   * This method is called automatically by Azure SDK client libraries. You may call this method\n   * directly, but you must also handle token caching and token refreshing.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  getToken(scopes: string | string[], options?: GetTokenOptions): Promise<AccessToken | null>;\n}\n\n/**\n * Defines options for TokenCredential.getToken.\n */\nexport interface GetTokenOptions {\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Options used when creating and sending HTTP requests for this operation.\n   */\n  requestOptions?: {\n    /**\n     * The number of milliseconds a request can take before automatically being terminated.\n     */\n    timeout?: number;\n  };\n  /**\n   * Options used when tracing is enabled.\n   */\n  tracingOptions?: {\n    /**\n     * OpenTelemetry SpanOptions used to create a span when tracing is enabled.\n     */\n    spanOptions?: SpanOptions;\n\n    /**\n     * OpenTelemetry context\n     */\n    tracingContext?: Context;\n  };\n\n  /**\n   * Allows specifying a tenantId. Useful to handle challenges that provide tenant Id hints.\n   */\n  tenantId?: string;\n}\n\n/**\n * Represents an access token with an expiration time.\n */\nexport interface AccessToken {\n  /**\n   * The access token returned by the authentication service.\n   */\n  token: string;\n\n  /**\n   * The access token's expiration timestamp in milliseconds, UNIX epoch time.\n   */\n  expiresOnTimestamp: number;\n}\n\n/**\n * Tests an object to determine whether it implements TokenCredential.\n *\n * @param credential - The assumed TokenCredential to be tested.\n */\nexport function isTokenCredential(credential: unknown): credential is TokenCredential {\n  // Check for an object with a 'getToken' function and possibly with\n  // a 'signRequest' function.  We do this check to make sure that\n  // a ServiceClientCredentials implementor (like TokenClientCredentials\n  // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if\n  // it doesn't actually implement TokenCredential also.\n  const castCredential = credential as {\n    getToken: unknown;\n    signRequest: unknown;\n  };\n  return (\n    castCredential &&\n    typeof castCredential.getToken === \"function\" &&\n    (castCredential.signRequest === undefined || castCredential.getToken.length > 0)\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { getDefaultUserAgentKey, getPlatformSpecificData } from \"./msRestUserAgentPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Telemetry information. Key/value pairs to include inside the User-Agent string.\n */\nexport type TelemetryInfo = { key?: string; value?: string };\n\n/**\n * Options for adding user agent details to outgoing requests.\n */\nexport interface UserAgentOptions {\n  /**\n   * String prefix to add to the user agent for outgoing requests.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n}\n\nfunction getRuntimeInfo(): TelemetryInfo[] {\n  const msRestRuntime = {\n    key: \"core-http\",\n    value: Constants.coreHttpVersion,\n  };\n\n  return [msRestRuntime];\n}\n\nfunction getUserAgentString(\n  telemetryInfo: TelemetryInfo[],\n  keySeparator = \" \",\n  valueSeparator = \"/\"\n): string {\n  return telemetryInfo\n    .map((info) => {\n      const value = info.value ? `${valueSeparator}${info.value}` : \"\";\n      return `${info.key}${value}`;\n    })\n    .join(keySeparator);\n}\n\nexport const getDefaultUserAgentHeaderName = getDefaultUserAgentKey;\n\n/**\n * The default approach to generate user agents.\n * Uses static information from this package, plus system information available from the runtime.\n */\nexport function getDefaultUserAgentValue(): string {\n  const runtimeInfo = getRuntimeInfo();\n  const platformSpecificData = getPlatformSpecificData();\n  const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));\n  return userAgent;\n}\n\n/**\n * Returns a policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.\n * @param userAgentData - Telemetry information.\n * @returns A new {@link UserAgentPolicy}.\n */\nexport function userAgentPolicy(userAgentData?: TelemetryInfo): RequestPolicyFactory {\n  const key: string =\n    !userAgentData || userAgentData.key === undefined || userAgentData.key === null\n      ? getDefaultUserAgentKey()\n      : userAgentData.key;\n  const value: string =\n    !userAgentData || userAgentData.value === undefined || userAgentData.value === null\n      ? getDefaultUserAgentValue()\n      : userAgentData.value;\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new UserAgentPolicy(nextPolicy, options, key, value);\n    },\n  };\n}\n\n/**\n * A policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.\n */\nexport class UserAgentPolicy extends BaseRequestPolicy {\n  constructor(\n    readonly _nextPolicy: RequestPolicy,\n    readonly _options: RequestPolicyOptions,\n    protected headerKey: string,\n    protected headerValue: string\n  ) {\n    super(_nextPolicy, _options);\n  }\n\n  sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    this.addUserAgentHeader(request);\n    return this._nextPolicy.sendRequest(request);\n  }\n\n  /**\n   * Adds the user agent header to the outgoing request.\n   */\n  addUserAgentHeader(request: WebResourceLike): void {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n\n    if (!request.headers.get(this.headerKey) && this.headerValue) {\n      request.headers.set(this.headerKey, this.headerValue);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n * and \"plugins\" section in webpack.testconfig.ts.\n */\n\nimport { TelemetryInfo } from \"./userAgentPolicy\";\n\ninterface NavigatorEx extends Navigator {\n  // oscpu is not yet standards-compliant, but can not be undefined in TypeScript 3.6.2\n  readonly oscpu: string;\n}\n\nexport function getDefaultUserAgentKey(): string {\n  return \"x-ms-useragent\";\n}\n\nexport function getPlatformSpecificData(): TelemetryInfo[] {\n  const navigator = self.navigator as NavigatorEx;\n  const osInfo = {\n    key: \"OS\",\n    value: (navigator.oscpu || navigator.platform).replace(\" \", \"\"),\n  };\n\n  return [osInfo];\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * The format that will be used to join an array of values together for a query parameter value.\n */\nexport enum QueryCollectionFormat {\n  /**\n   * CSV: Each pair of segments joined by a single comma.\n   */\n  Csv = \",\",\n  /**\n   * SSV: Each pair of segments joined by a single space character.\n   */\n  Ssv = \" \",\n  /**\n   * TSV: Each pair of segments joined by a single tab character.\n   */\n  Tsv = \"\\t\",\n  /**\n   * Pipes: Each pair of segments joined by a single pipe character.\n   */\n  Pipes = \"|\",\n  /**\n   * Denotes this is an array of values that should be passed to the server in multiple key/value pairs, e.g. `?queryParam=value1&queryParam=value2`\n   */\n  Multi = \"Multi\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"../policies/requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"../util/delay\";\n\n// #region Access Token Cycler\n\n/**\n * A function that gets a promise of an access token and allows providing\n * options.\n *\n * @param options - the options to pass to the underlying token provider\n */\ntype AccessTokenGetter = (options: GetTokenOptions) => Promise<AccessToken>;\n\ninterface TokenCyclerOptions {\n  /**\n   * The window of time before token expiration during which the token will be\n   * considered unusable due to risk of the token expiring before sending the\n   * request.\n   *\n   * This will only become meaningful if the refresh fails for over\n   * (refreshWindow - forcedRefreshWindow) milliseconds.\n   */\n  forcedRefreshWindowInMs: number;\n  /**\n   * Interval in milliseconds to retry failed token refreshes.\n   */\n  retryIntervalInMs: number;\n  /**\n   * The window of time before token expiration during which\n   * we will attempt to refresh the token.\n   */\n  refreshWindowInMs: number;\n}\n\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS: TokenCyclerOptions = {\n  forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n  retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n  refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\nasync function beginRefresh(\n  getAccessToken: () => Promise<AccessToken | null>,\n  retryIntervalInMs: number,\n  timeoutInMs: number\n): Promise<AccessToken> {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken(): Promise<AccessToken | null> {\n    if (Date.now() < timeoutInMs) {\n      try {\n        return await getAccessToken();\n      } catch {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n\n      return finalToken;\n    }\n  }\n\n  let token: AccessToken | null = await tryGetAccessToken();\n\n  while (token === null) {\n    await delay(retryIntervalInMs);\n\n    token = await tryGetAccessToken();\n  }\n\n  return token;\n}\n\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(\n  credential: TokenCredential,\n  scopes: string | string[],\n  tokenCyclerOptions?: Partial<TokenCyclerOptions>\n): AccessTokenGetter {\n  let refreshWorker: Promise<AccessToken> | null = null;\n  let token: AccessToken | null = null;\n\n  const options = {\n    ...DEFAULT_CYCLER_OPTIONS,\n    ...tokenCyclerOptions,\n  };\n\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing(): boolean {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh(): boolean {\n      return (\n        !cycler.isRefreshing &&\n        (token?.expiresOnTimestamp ?? 0) - options.refreshWindowInMs < Date.now()\n      );\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh(): boolean {\n      return (\n        token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now()\n      );\n    },\n  };\n\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(getTokenOptions: GetTokenOptions): Promise<AccessToken> {\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = (): Promise<AccessToken | null> =>\n        credential.getToken(scopes, getTokenOptions);\n\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(\n        tryGetAccessToken,\n        options.retryIntervalInMs,\n        // If we don't have a token, then we should timeout immediately\n        token?.expiresOnTimestamp ?? Date.now()\n      )\n        .then((_token) => {\n          refreshWorker = null;\n          token = _token;\n          return token;\n        })\n        .catch((reason) => {\n          // We also should reset the refresher if we enter a failed state.  All\n          // existing awaiters will throw, but subsequent requests will start a\n          // new retry chain.\n          refreshWorker = null;\n          token = null;\n          throw reason;\n        });\n    }\n\n    return refreshWorker as Promise<AccessToken>;\n  }\n\n  return async (tokenOptions: GetTokenOptions): Promise<AccessToken> => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n\n    if (cycler.mustRefresh) return refresh(tokenOptions);\n\n    if (cycler.shouldRefresh) {\n      refresh(tokenOptions);\n    }\n\n    return token as AccessToken;\n  };\n}\n\n// #endregion\n\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\nexport function bearerTokenAuthenticationPolicy(\n  credential: TokenCredential,\n  scopes: string | string[]\n): RequestPolicyFactory {\n  // This simple function encapsulates the entire process of reliably retrieving the token\n  const getToken = createTokenCycler(credential, scopes /* , options */);\n\n  class BearerTokenAuthenticationPolicy extends BaseRequestPolicy {\n    public constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n      super(nextPolicy, options);\n    }\n\n    public async sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse> {\n      if (!webResource.url.toLowerCase().startsWith(\"https://\")) {\n        throw new Error(\n          \"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\"\n        );\n      }\n\n      const { token } = await getToken({\n        abortSignal: webResource.abortSignal,\n        tracingOptions: {\n          tracingContext: webResource.tracingContext,\n        },\n      });\n      webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n      return this._nextPolicy.sendRequest(webResource);\n    }\n  }\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new BearerTokenAuthenticationPolicy(nextPolicy, options);\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n */\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResource } from \"../webResource\";\n\nconst DisbleResponseDecompressionNotSupportedInBrowser = new Error(\n  \"DisableResponseDecompressionPolicy is not supported in browser environment\"\n);\n\n/**\n * {@link DisableResponseDecompressionPolicy} is not supported in browser and attempting\n * to use it will results in error being thrown.\n */\nexport function disableResponseDecompressionPolicy(): RequestPolicyFactory {\n  return {\n    create: (_nextPolicy: RequestPolicy, _options: RequestPolicyOptions) => {\n      throw DisbleResponseDecompressionNotSupportedInBrowser;\n    },\n  };\n}\n\nexport class DisableResponseDecompressionPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n    throw DisbleResponseDecompressionNotSupportedInBrowser;\n  }\n\n  public async sendRequest(_request: WebResource): Promise<HttpOperationResponse> {\n    throw DisbleResponseDecompressionNotSupportedInBrowser;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Creates a policy that assigns a unique request id to outgoing requests.\n * @param requestIdHeaderName - The name of the header to use when assigning the unique id to the request.\n */\nexport function generateClientRequestIdPolicy(\n  requestIdHeaderName = \"x-ms-client-request-id\"\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);\n    },\n  };\n}\n\nexport class GenerateClientRequestIdPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private _requestIdHeaderName: string\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!request.headers.contains(this._requestIdHeaderName)) {\n      request.headers.set(this._requestIdHeaderName, request.requestId);\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DefaultHttpClient } from \"./defaultHttpClient\";\nimport { HttpClient } from \"./httpClient\";\n\nlet cachedHttpClient: HttpClient | undefined;\n\nexport function getCachedDefaultHttpClient(): HttpClient {\n  if (!cachedHttpClient) {\n    cachedHttpClient = new DefaultHttpClient();\n  }\n\n  return cachedHttpClient;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// BaseRequestPolicy has a protected constructor.\n/* eslint-disable @typescript-eslint/no-useless-constructor */\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\n\nexport function ndJsonPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new NdJsonPolicy(nextPolicy, options);\n    },\n  };\n}\n\n/**\n * NdJsonPolicy that formats a JSON array as newline-delimited JSON\n */\nclass NdJsonPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends a request.\n   */\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    // There currently isn't a good way to bypass the serializer\n    if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n      const body = JSON.parse(request.body);\n      if (Array.isArray(body)) {\n        request.body = body.map((item) => JSON.stringify(item) + \"\\n\").join(\"\");\n      }\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { ProxySettings } from \"../serviceClient\";\nimport { WebResourceLike } from \"../webResource\";\n\nconst proxyNotSupportedInBrowser = new Error(\"ProxyPolicy is not supported in browser environment\");\n\nexport function getDefaultProxySettings(_proxyUrl?: string): ProxySettings | undefined {\n  return undefined;\n}\n\nexport function proxyPolicy(_proxySettings?: ProxySettings): RequestPolicyFactory {\n  return {\n    create: (_nextPolicy: RequestPolicy, _options: RequestPolicyOptions) => {\n      throw proxyNotSupportedInBrowser;\n    },\n  };\n}\n\nexport class ProxyPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n    throw proxyNotSupportedInBrowser;\n  }\n\n  public sendRequest(_request: WebResourceLike): Promise<HttpOperationResponse> {\n    throw proxyNotSupportedInBrowser;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as utils from \"../util/utils\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"../util/delay\";\n\nexport function rpRegistrationPolicy(retryTimeout = 30): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    },\n  };\n}\n\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    readonly _retryTimeout = 30\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => registerIfNeeded(this, request, response));\n  }\n}\n\nfunction registerIfNeeded(\n  policy: RPRegistrationPolicy,\n  request: WebResourceLike,\n  response: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText as string);\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return (\n        registerRP(policy, urlPrefix, rpName, request)\n          // Autoregistration of ${provider} failed for some reason. We will not return this error\n          // instead will return the initial response with 409 status code back to the user.\n          // do nothing here as we are returning the original response at the end of this method.\n          .catch(() => false)\n          .then((registrationStatus) => {\n            if (registrationStatus) {\n              // Retry the original request. We have to change the x-ms-client-request-id\n              // otherwise Azure endpoint will return the initial 409 (cached) response.\n              request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n              return policy._nextPolicy.sendRequest(request.clone());\n            }\n            return response;\n          })\n      );\n    }\n  }\n\n  return Promise.resolve(response);\n}\n\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param originalRequest - The original request\n * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.\n * @returns A new request object with desired headers.\n */\nfunction getRequestEssentials(\n  originalRequest: WebResourceLike,\n  reuseUrlToo = false\n): WebResourceLike {\n  const reqOptions: WebResourceLike = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n\n  return reqOptions;\n}\n\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param body - The response body received after making the original request.\n * @returns The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body: string): string {\n  let result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (\n      responseBody &&\n      responseBody.error &&\n      responseBody.error.message &&\n      responseBody.error.code &&\n      responseBody.error.code === \"MissingSubscriptionRegistration\"\n    ) {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param url - The original request url\n * @returns The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url: string): string {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n  return result;\n}\n\n/**\n * Registers the given provider.\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param provider - The provider name to be registered.\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n */\nasync function registerRP(\n  policy: RPRegistrationPolicy,\n  urlPrefix: string,\n  provider: string,\n  originalRequest: WebResourceLike\n): Promise<boolean> {\n  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n\n  const response = await policy._nextPolicy.sendRequest(reqOptions);\n  if (response.status !== 200) {\n    throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n  }\n  return getRegistrationStatus(policy, getUrl, originalRequest);\n}\n\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param url - The request url for polling\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns True if RP Registration is successful.\n */\nasync function getRegistrationStatus(\n  policy: RPRegistrationPolicy,\n  url: string,\n  originalRequest: WebResourceLike\n): Promise<boolean> {\n  const reqOptions: any = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n\n  const res = await policy._nextPolicy.sendRequest(reqOptions);\n  const obj = res.parsedBody;\n  if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n    return true;\n  } else {\n    await delay(policy._retryTimeout * 1000);\n    return getRegistrationStatus(policy, url, originalRequest);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { ServiceClientCredentials } from \"../credentials/serviceClientCredentials\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Creates a policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.\n * @param authenticationProvider - The authentication provider.\n * @returns An instance of the {@link SigningPolicy}.\n */\nexport function signingPolicy(\n  authenticationProvider: ServiceClientCredentials\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SigningPolicy(nextPolicy, options, authenticationProvider);\n    },\n  };\n}\n\n/**\n * A policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.\n */\nexport class SigningPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    public authenticationProvider: ServiceClientCredentials\n  ) {\n    super(nextPolicy, options);\n  }\n\n  signRequest(request: WebResourceLike): Promise<WebResourceLike> {\n    return this.authenticationProvider.signRequest(request);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this.signRequest(request).then((nextRequest) =>\n      this._nextPolicy.sendRequest(nextRequest)\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport {\n  DEFAULT_CLIENT_MAX_RETRY_INTERVAL,\n  DEFAULT_CLIENT_MIN_RETRY_INTERVAL,\n  DEFAULT_CLIENT_RETRY_COUNT,\n  DEFAULT_CLIENT_RETRY_INTERVAL,\n  RetryData,\n  RetryError,\n  isNumber,\n  shouldRetry,\n  updateRetryData,\n} from \"../util/exponentialBackoffStrategy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"../util/delay\";\n\n/**\n * A policy that retries when there's a system error, identified by the codes \"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\" or \"ENOENT\".\n * @param retryCount - Maximum number of retries.\n * @param retryInterval - The client retry interval, in milliseconds.\n * @param minRetryInterval - The minimum retry interval, in milliseconds.\n * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n * @returns An instance of the {@link SystemErrorRetryPolicy}\n */\nexport function systemErrorRetryPolicy(\n  retryCount?: number,\n  retryInterval?: number,\n  minRetryInterval?: number,\n  maxRetryInterval?: number\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SystemErrorRetryPolicy(\n        nextPolicy,\n        options,\n        retryCount,\n        retryInterval,\n        minRetryInterval,\n        maxRetryInterval\n      );\n    },\n  };\n}\n\n/**\n * A policy that retries when there's a system error, identified by the codes \"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\" or \"ENOENT\".\n * @param retryCount - The client retry count.\n * @param retryInterval - The client retry interval, in milliseconds.\n * @param minRetryInterval - The minimum retry interval, in milliseconds.\n * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n */\nexport class SystemErrorRetryPolicy extends BaseRequestPolicy {\n  retryCount: number;\n  retryInterval: number;\n  minRetryInterval: number;\n  maxRetryInterval: number;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryCount?: number,\n    retryInterval?: number,\n    minRetryInterval?: number,\n    maxRetryInterval?: number\n  ) {\n    super(nextPolicy, options);\n    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval = isNumber(minRetryInterval)\n      ? minRetryInterval\n      : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval = isNumber(maxRetryInterval)\n      ? maxRetryInterval\n      : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .catch((error) => retry(this, request, error.response, error));\n  }\n}\n\nasync function retry(\n  policy: SystemErrorRetryPolicy,\n  request: WebResourceLike,\n  operationResponse: HttpOperationResponse,\n  err?: RetryError,\n  retryData?: RetryData\n): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, err);\n\n  function shouldPolicyRetry(_response?: HttpOperationResponse, error?: RetryError): boolean {\n    if (\n      error &&\n      error.code &&\n      (error.code === \"ETIMEDOUT\" ||\n        error.code === \"ESOCKETTIMEDOUT\" ||\n        error.code === \"ECONNREFUSED\" ||\n        error.code === \"ECONNRESET\" ||\n        error.code === \"ENOENT\")\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  if (shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, operationResponse, err)) {\n    // If previous operation ended with an error and the policy allows a retry, do that\n    try {\n      await delay(retryData.retryInterval);\n      return policy._nextPolicy.sendRequest(request.clone());\n    } catch (nestedErr) {\n      return retry(policy, request, operationResponse, nestedErr, retryData);\n    }\n  } else {\n    if (err) {\n      // If the operation failed in the end, return all errors instead of just the last one\n      return Promise.reject(retryData.error);\n    }\n    return operationResponse;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { Constants } from \"../util/constants\";\nimport { DEFAULT_CLIENT_MAX_RETRY_COUNT } from \"../util/throttlingRetryStrategy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { delay } from \"../util/delay\";\n\ntype ResponseHandler = (\n  httpRequest: WebResourceLike,\n  response: HttpOperationResponse\n) => Promise<HttpOperationResponse>;\nconst StatusCodes = Constants.HttpConstants.StatusCodes;\n\n/**\n * Creates a policy that re-sends the request if the response indicates the request failed because of throttling reasons.\n * For example, if the response contains a `Retry-After` header, it will retry sending the request based on the value of that header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n * @returns\n */\nexport function throttlingRetryPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    },\n  };\n}\n\nconst StandardAbortMessage = \"The operation was aborted.\";\n\n/**\n * Creates a policy that re-sends the request if the response indicates the request failed because of throttling reasons.\n * For example, if the response contains a `Retry-After` header, it will retry sending the request based on the value of that header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nexport class ThrottlingRetryPolicy extends BaseRequestPolicy {\n  private _handleResponse: ResponseHandler;\n  private numberOfRetries = 0;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    _handleResponse?: ResponseHandler\n  ) {\n    super(nextPolicy, options);\n    this._handleResponse = _handleResponse || this._defaultResponseHandler;\n  }\n\n  public async sendRequest(httpRequest: WebResourceLike): Promise<HttpOperationResponse> {\n    const response = await this._nextPolicy.sendRequest(httpRequest.clone());\n    if (\n      response.status !== StatusCodes.TooManyRequests &&\n      response.status !== StatusCodes.ServiceUnavailable\n    ) {\n      return response;\n    } else {\n      return this._handleResponse(httpRequest, response);\n    }\n  }\n\n  private async _defaultResponseHandler(\n    httpRequest: WebResourceLike,\n    httpResponse: HttpOperationResponse\n  ): Promise<HttpOperationResponse> {\n    const retryAfterHeader: string | undefined = httpResponse.headers.get(\n      Constants.HeaderConstants.RETRY_AFTER\n    );\n\n    if (retryAfterHeader) {\n      const delayInMs: number | undefined =\n        ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n      if (delayInMs) {\n        this.numberOfRetries += 1;\n\n        await delay(delayInMs, undefined, {\n          abortSignal: httpRequest.abortSignal,\n          abortErrorMsg: StandardAbortMessage,\n        });\n\n        if (httpRequest.abortSignal?.aborted) {\n          throw new AbortError(StandardAbortMessage);\n        }\n\n        if (this.numberOfRetries < DEFAULT_CLIENT_MAX_RETRY_COUNT) {\n          return this.sendRequest(httpRequest);\n        } else {\n          return this._nextPolicy.sendRequest(httpRequest);\n        }\n      }\n    }\n\n    return httpResponse;\n  }\n\n  public static parseRetryAfterHeader(headerValue: string): number | undefined {\n    const retryAfterInSeconds = Number(headerValue);\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  }\n\n  public static parseDateRetryAfterHeader(headerValue: string): number | undefined {\n    try {\n      const now: number = Date.now();\n      const date: number = Date.parse(headerValue);\n      const diff = date - now;\n\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Maximum number of retries for the throttling retry policy\n */\nexport const DEFAULT_CLIENT_MAX_RETRY_COUNT = 3;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport {\n  Span,\n  SpanKind,\n  SpanStatusCode,\n  createSpanFunction,\n  getTraceParentHeader,\n  isSpanContextValid,\n} from \"@azure/core-tracing\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { logger } from \"../log\";\n\nconst createSpan = createSpanFunction({\n  packagePrefix: \"\",\n  namespace: \"\",\n});\n\n/**\n * Options to customize the tracing policy.\n */\nexport interface TracingPolicyOptions {\n  /**\n   * User agent used to better identify the outgoing requests traced by the tracing policy.\n   */\n  userAgent?: string;\n}\n\n/**\n * Creates a policy that wraps outgoing requests with a tracing span.\n * @param tracingOptions - Tracing options.\n * @returns An instance of the {@link TracingPolicy} class.\n */\nexport function tracingPolicy(tracingOptions: TracingPolicyOptions = {}): RequestPolicyFactory {\n  return {\n    create(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n      return new TracingPolicy(nextPolicy, options, tracingOptions);\n    },\n  };\n}\n\n/**\n * A policy that wraps outgoing requests with a tracing span.\n */\nexport class TracingPolicy extends BaseRequestPolicy {\n  private userAgent?: string;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    tracingOptions: TracingPolicyOptions\n  ) {\n    super(nextPolicy, options);\n    this.userAgent = tracingOptions.userAgent;\n  }\n\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!request.tracingContext) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    const span = this.tryCreateSpan(request);\n\n    if (!span) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    try {\n      const response = await this._nextPolicy.sendRequest(request);\n      this.tryProcessResponse(span, response);\n      return response;\n    } catch (err) {\n      this.tryProcessError(span, err);\n      throw err;\n    }\n  }\n\n  tryCreateSpan(request: WebResourceLike): Span | undefined {\n    try {\n      // Passing spanOptions as part of tracingOptions to maintain compatibility @azure/core-tracing@preview.13 and earlier.\n      // We can pass this as a separate parameter once we upgrade to the latest core-tracing.\n      const { span } = createSpan(`HTTP ${request.method}`, {\n        tracingOptions: {\n          spanOptions: {\n            ...(request as any).spanOptions,\n            kind: SpanKind.CLIENT,\n          },\n          tracingContext: request.tracingContext,\n        },\n      });\n\n      // If the span is not recording, don't do any more work.\n      if (!span.isRecording()) {\n        span.end();\n        return undefined;\n      }\n\n      const namespaceFromContext = request.tracingContext?.getValue(Symbol.for(\"az.namespace\"));\n\n      if (typeof namespaceFromContext === \"string\") {\n        span.setAttribute(\"az.namespace\", namespaceFromContext);\n      }\n\n      span.setAttributes({\n        \"http.method\": request.method,\n        \"http.url\": request.url,\n        requestId: request.requestId,\n      });\n\n      if (this.userAgent) {\n        span.setAttribute(\"http.user_agent\", this.userAgent);\n      }\n\n      // set headers\n      const spanContext = span.spanContext();\n      const traceParentHeader = getTraceParentHeader(spanContext);\n      if (traceParentHeader && isSpanContextValid(spanContext)) {\n        request.headers.set(\"traceparent\", traceParentHeader);\n        const traceState = spanContext.traceState && spanContext.traceState.serialize();\n        // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent\n        if (traceState) {\n          request.headers.set(\"tracestate\", traceState);\n        }\n      }\n      return span;\n    } catch (error) {\n      logger.warning(`Skipping creating a tracing span due to an error: ${error.message}`);\n      return undefined;\n    }\n  }\n\n  private tryProcessError(span: Span, err: any): void {\n    try {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: err.message,\n      });\n\n      if (err.statusCode) {\n        span.setAttribute(\"http.status_code\", err.statusCode);\n      }\n      span.end();\n    } catch (error) {\n      logger.warning(`Skipping tracing span processing due to an error: ${error.message}`);\n    }\n  }\n\n  private tryProcessResponse(span: Span, response: HttpOperationResponse): void {\n    try {\n      span.setAttribute(\"http.status_code\", response.status);\n      const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n      if (serviceRequestId) {\n        span.setAttribute(\"serviceRequestId\", serviceRequestId);\n      }\n      span.setStatus({\n        code: SpanStatusCode.OK,\n      });\n      span.end();\n    } catch (error) {\n      logger.warning(`Skipping tracing span processing due to an error: ${error.message}`);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  OperationTracingOptions,\n  Span,\n  SpanOptions,\n  SpanKind,\n  setSpan,\n  context as otContext,\n  getTracer\n} from \"./interfaces\";\nimport { trace, INVALID_SPAN_CONTEXT } from \"@opentelemetry/api\";\n\n/**\n * Arguments for `createSpanFunction` that allow you to specify the\n * prefix for each created span as well as the `az.namespace` attribute.\n *\n * @hidden\n */\nexport interface CreateSpanFunctionArgs {\n  /**\n   * Package name prefix.\n   *\n   * NOTE: if this is empty no prefix will be applied to created Span names.\n   */\n  packagePrefix: string;\n  /**\n   * Service namespace\n   *\n   * NOTE: if this is empty no `az.namespace` attribute will be added to created Spans.\n   */\n  namespace: string;\n}\n\nexport function isTracingDisabled(): boolean {\n  if (typeof process === \"undefined\") {\n    // not supported in browser for now without polyfills\n    return false;\n  }\n\n  const azureTracingDisabledValue = process.env.AZURE_TRACING_DISABLED?.toLowerCase();\n\n  if (azureTracingDisabledValue === \"false\" || azureTracingDisabledValue === \"0\") {\n    return false;\n  }\n\n  return Boolean(azureTracingDisabledValue);\n}\n\n/**\n * Creates a function that can be used to create spans using the global tracer.\n *\n * Usage:\n *\n * ```typescript\n * // once\n * const createSpan = createSpanFunction({ packagePrefix: \"Azure.Data.AppConfiguration\", namespace: \"Microsoft.AppConfiguration\" });\n *\n * // in each operation\n * const span = createSpan(\"deleteConfigurationSetting\", operationOptions);\n *    // code...\n * span.end();\n * ```\n *\n * @hidden\n * @param args - allows configuration of the prefix for each span as well as the az.namespace field.\n */\nexport function createSpanFunction(args: CreateSpanFunctionArgs) {\n  return function<T extends { tracingOptions?: OperationTracingOptions }>(\n    operationName: string,\n    operationOptions: T | undefined\n  ): { span: Span; updatedOptions: T } {\n    const tracer = getTracer();\n    const tracingOptions = operationOptions?.tracingOptions || {};\n    const spanOptions: SpanOptions = {\n      kind: SpanKind.INTERNAL,\n      ...tracingOptions.spanOptions\n    };\n\n    const spanName = args.packagePrefix ? `${args.packagePrefix}.${operationName}` : operationName;\n\n    let span: Span;\n    if (isTracingDisabled()) {\n      span = trace.wrapSpanContext(INVALID_SPAN_CONTEXT);\n    } else {\n      span = tracer.startSpan(spanName, spanOptions, tracingOptions.tracingContext);\n    }\n\n    if (args.namespace) {\n      span.setAttribute(\"az.namespace\", args.namespace);\n    }\n\n    let newSpanOptions = tracingOptions.spanOptions || {};\n\n    if (span.isRecording() && args.namespace) {\n      newSpanOptions = {\n        ...tracingOptions.spanOptions,\n        attributes: {\n          ...spanOptions.attributes,\n          \"az.namespace\": args.namespace\n        }\n      };\n    }\n\n    const newTracingOptions: Required<OperationTracingOptions> = {\n      ...tracingOptions,\n      spanOptions: newSpanOptions,\n      tracingContext: setSpan(tracingOptions.tracingContext || otContext.active(), span)\n    };\n\n    const newOperationOptions = {\n      ...operationOptions,\n      tracingOptions: newTracingOptions\n    } as T & { tracingOptions: Required<OperationTracingOptions> };\n\n    return {\n      span,\n      updatedOptions: newOperationOptions\n    };\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { context as otContext, trace as otTrace } from \"@opentelemetry/api\";\n\n/**\n * A Tracer.\n */\nexport interface Tracer {\n  /**\n   * Starts a new {@link Span}. Start the span without setting it on context.\n   *\n   * This method does NOT modify the current Context.\n   *\n   * @param name - The name of the span\n   * @param options - SpanOptions used for span creation\n   * @param context - Context to use to extract parent\n   * @returns The newly created span\n   * @example\n   *     const span = tracer.startSpan('op');\n   *     span.setAttribute('key', 'value');\n   *     span.end();\n   */\n  startSpan(name: string, options?: SpanOptions, context?: Context): Span;\n}\n\n/**\n * TraceState.\n */\nexport interface TraceState {\n  /**\n   * Create a new TraceState which inherits from this TraceState and has the\n   * given key set.\n   * The new entry will always be added in the front of the list of states.\n   *\n   * @param key - key of the TraceState entry.\n   * @param value - value of the TraceState entry.\n   */\n  set(key: string, value: string): TraceState;\n  /**\n   * Return a new TraceState which inherits from this TraceState but does not\n   * contain the given key.\n   *\n   * @param key - the key for the TraceState entry to be removed.\n   */\n  unset(key: string): TraceState;\n  /**\n   * Returns the value to which the specified key is mapped, or `undefined` if\n   * this map contains no mapping for the key.\n   *\n   * @param key - with which the specified value is to be associated.\n   * @returns the value to which the specified key is mapped, or `undefined` if\n   *     this map contains no mapping for the key.\n   */\n  get(key: string): string | undefined;\n  /**\n   * Serializes the TraceState to a `list` as defined below. The `list` is a\n   * series of `list-members` separated by commas `,`, and a list-member is a\n   * key/value pair separated by an equals sign `=`. Spaces and horizontal tabs\n   * surrounding `list-members` are ignored. There can be a maximum of 32\n   * `list-members` in a `list`.\n   *\n   * @returns the serialized string.\n   */\n  serialize(): string;\n}\n\n/**\n * Represents high resolution time.\n */\nexport declare type HrTime = [number, number];\n\n/**\n * Used to represent a Time.\n */\nexport type TimeInput = HrTime | number | Date;\n\n/**\n * The status for a span.\n */\nexport interface SpanStatus {\n  /** The status code of this message. */\n  code: SpanStatusCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * The kind of span.\n */\nexport enum SpanKind {\n  /** Default value. Indicates that the span is used internally. */\n  INTERNAL = 0,\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n  SERVER = 1,\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  PRODUCER = 3,\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  CONSUMER = 4\n}\n\n/**\n * An Exception for a Span.\n */\nexport declare type Exception =\n  | ExceptionWithCode\n  | ExceptionWithMessage\n  | ExceptionWithName\n  | string;\n\n/**\n * An Exception with a code.\n */\nexport interface ExceptionWithCode {\n  /** The code. */\n  code: string | number;\n  /** The name. */\n  name?: string;\n  /** The message. */\n  message?: string;\n  /** The stack. */\n  stack?: string;\n}\n\n/**\n * An Exception with a message.\n */\nexport interface ExceptionWithMessage {\n  /** The code. */\n  code?: string | number;\n  /** The message. */\n  message: string;\n  /** The name. */\n  name?: string;\n  /** The stack. */\n  stack?: string;\n}\n\n/**\n * An Exception with a name.\n */\nexport interface ExceptionWithName {\n  /** The code. */\n  code?: string | number;\n  /** The message. */\n  message?: string;\n  /** The name. */\n  name: string;\n  /** The stack. */\n  stack?: string;\n}\n\n/**\n * Return the span if one exists\n *\n * @param context - context to get span from\n */\nexport function getSpan(context: Context): Span | undefined {\n  return otTrace.getSpan(context);\n}\n\n/**\n * Set the span on a context\n *\n * @param context - context to use as parent\n * @param span - span to set active\n */\nexport function setSpan(context: Context, span: Span): Context {\n  return otTrace.setSpan(context, span);\n}\n\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context - context to set active span on\n * @param spanContext - span context to be wrapped\n */\nexport function setSpanContext(context: Context, spanContext: SpanContext): Context {\n  return otTrace.setSpanContext(context, spanContext);\n}\n\n/**\n * Get the span context of the span if it exists.\n *\n * @param context - context to get values from\n */\nexport function getSpanContext(context: Context): SpanContext | undefined {\n  return otTrace.getSpanContext(context);\n}\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nexport interface ContextAPI {\n  /**\n   * Get the currently active context\n   */\n  active(): Context;\n}\n\n/**\n * Returns true of the given {@link SpanContext} is valid.\n * A valid {@link SpanContext} is one which has a valid trace ID and span ID as per the spec.\n *\n * @param context - the {@link SpanContext} to validate.\n *\n * @returns true if the {@link SpanContext} is valid, false otherwise.\n */\nexport function isSpanContextValid(context: SpanContext): boolean {\n  return otTrace.isSpanContextValid(context);\n}\n\n/**\n * Retrieves a tracer from the global tracer provider.\n */\nexport function getTracer(): Tracer;\n/**\n * Retrieves a tracer from the global tracer provider.\n */\nexport function getTracer(name: string, version?: string): Tracer;\nexport function getTracer(name?: string, version?: string): Tracer {\n  return otTrace.getTracer(name || \"azure/core-tracing\", version);\n}\n\n/** Entrypoint for context API */\nexport const context: ContextAPI = otContext;\n\n/** SpanStatusCode */\nexport enum SpanStatusCode {\n  /**\n   * The default status.\n   */\n  UNSET = 0,\n  /**\n   * The operation has been validated by an Application developer or\n   * Operator to have completed successfully.\n   */\n  OK = 1,\n  /**\n   * The operation contains an error.\n   */\n  ERROR = 2\n}\n\n/**\n * An interface that represents a span. A span represents a single operation\n * within a trace. Examples of span might include remote procedure calls or a\n * in-process function calls to sub-components. A Trace has a single, top-level\n * \"root\" Span that in turn may have zero or more child Spans, which in turn\n * may have children.\n *\n * Spans are created by the {@link Tracer.startSpan} method.\n */\nexport interface Span {\n  /**\n   * Returns the {@link SpanContext} object associated with this Span.\n   *\n   * Get an immutable, serializable identifier for this span that can be used\n   * to create new child spans. Returned SpanContext is usable even after the\n   * span ends.\n   *\n   * @returns the SpanContext object associated with this Span.\n   */\n  spanContext(): SpanContext;\n  /**\n   * Sets an attribute to the span.\n   *\n   * Sets a single Attribute with the key and value passed as arguments.\n   *\n   * @param key - the key for this attribute.\n   * @param value - the value for this attribute. Setting a value null or\n   *              undefined is invalid and will result in undefined behavior.\n   */\n  setAttribute(key: string, value: SpanAttributeValue): this;\n  /**\n   * Sets attributes to the span.\n   *\n   * @param attributes - the attributes that will be added.\n   *                   null or undefined attribute values\n   *                   are invalid and will result in undefined behavior.\n   */\n  setAttributes(attributes: SpanAttributes): this;\n  /**\n   * Adds an event to the Span.\n   *\n   * @param name - the name of the event.\n   * @param attributesOrStartTime -  the attributes that will be added; these are\n   *     associated with this event. Can be also a start time\n   *     if type is TimeInput and 3rd param is undefined\n   * @param startTime - start time of the event.\n   */\n  addEvent(\n    name: string,\n    attributesOrStartTime?: SpanAttributes | TimeInput,\n    startTime?: TimeInput\n  ): this;\n  /**\n   * Sets a status to the span. If used, this will override the default Span\n   * status. Default is {@link SpanStatusCode.UNSET}. SetStatus overrides the value\n   * of previous calls to SetStatus on the Span.\n   *\n   * @param status - the SpanStatus to set.\n   */\n  setStatus(status: SpanStatus): this;\n  /**\n   * Marks the end of Span execution.\n   *\n   * Call to End of a Span MUST not have any effects on child spans. Those may\n   * still be running and can be ended later.\n   *\n   * Do not return `this`. The Span generally should not be used after it\n   * is ended so chaining is not desired in this context.\n   *\n   * @param endTime - the time to set as Span's end time. If not provided,\n   *     use the current time as the span's end time.\n   */\n  end(endTime?: TimeInput): void;\n  /**\n   * Returns the flag whether this span will be recorded.\n   *\n   * @returns true if this Span is active and recording information like events\n   *     with the `AddEvent` operation and attributes using `setAttributes`.\n   */\n  isRecording(): boolean;\n\n  /**\n   * Sets exception as a span event\n   * @param exception - the exception the only accepted values are string or Error\n   * @param time - the time to set as Span's event time. If not provided,\n   *     use the current time.\n   */\n  recordException(exception: Exception, time?: TimeInput): void;\n\n  /**\n   * Updates the Span name.\n   *\n   * This will override the name provided via {@link Tracer.startSpan}.\n   *\n   * Upon this update, any sampling behavior based on Span name will depend on\n   * the implementation.\n   *\n   * @param name - the Span name.\n   */\n  updateName(name: string): this;\n}\n\n/**\n * Shorthand enum for common traceFlags values inside SpanContext\n */\nexport const enum TraceFlags {\n  /** No flag set. */\n  NONE = 0x0,\n  /** Caller is collecting trace information. */\n  SAMPLED = 0x1\n}\n\n/**\n * A light interface that tries to be structurally compatible with OpenTelemetry\n */\nexport interface SpanContext {\n  /**\n   * UUID of a trace.\n   */\n  traceId: string;\n  /**\n   * UUID of a Span.\n   */\n  spanId: string;\n  /**\n   * https://www.w3.org/TR/trace-context/#trace-flags\n   */\n  traceFlags: number;\n  /**\n   * Tracing-system-specific info to propagate.\n   *\n   * The tracestate field value is a `list` as defined below. The `list` is a\n   * series of `list-members` separated by commas `,`, and a list-member is a\n   * key/value pair separated by an equals sign `=`. Spaces and horizontal tabs\n   * surrounding `list-members` are ignored. There can be a maximum of 32\n   * `list-members` in a `list`.\n   * More Info: https://www.w3.org/TR/trace-context/#tracestate-field\n   *\n   * Examples:\n   *     Single tracing system (generic format):\n   *         tracestate: rojo=00f067aa0ba902b7\n   *     Multiple tracing systems (with different formatting):\n   *         tracestate: rojo=00f067aa0ba902b7,congo=t61rcWkgMzE\n   */\n  traceState?: TraceState;\n}\n\n/**\n * Used to specify a span that is linked to another.\n */\nexport interface Link {\n  /** The {@link SpanContext} of a linked span. */\n  context: SpanContext;\n\n  /** A set of {@link SpanAttributes} on the link. */\n  attributes?: SpanAttributes;\n}\n\n/**\n * Attributes for a Span.\n */\nexport interface SpanAttributes {\n  /**\n   * Attributes for a Span.\n   */\n  [attributeKey: string]: SpanAttributeValue | undefined;\n}\n/**\n * Attribute values may be any non-nullish primitive value except an object.\n *\n * null or undefined attribute values are invalid and will result in undefined behavior.\n */\nexport declare type SpanAttributeValue =\n  | string\n  | number\n  | boolean\n  | Array<null | undefined | string>\n  | Array<null | undefined | number>\n  | Array<null | undefined | boolean>;\n\n/**\n * An interface that enables manual propagation of Spans\n */\nexport interface SpanOptions {\n  /**\n   * Attributes to set on the Span\n   */\n  attributes?: SpanAttributes;\n\n  /** {@link Link}s span to other spans */\n  links?: Link[];\n\n  /**\n   * The type of Span. Default to SpanKind.INTERNAL\n   */\n  kind?: SpanKind;\n\n  /**\n   * A manually specified start time for the created `Span` object.\n   */\n  startTime?: TimeInput;\n}\n\n/**\n * Tracing options to set on an operation.\n */\nexport interface OperationTracingOptions {\n  /**\n   * OpenTelemetry SpanOptions used to create a span when tracing is enabled.\n   */\n  spanOptions?: SpanOptions;\n\n  /**\n   * OpenTelemetry context to use for created Spans.\n   */\n  tracingContext?: Context;\n}\n\n/**\n * OpenTelemetry compatible interface for Context\n */\nexport interface Context {\n  /**\n   * Get a value from the context.\n   *\n   * @param key - key which identifies a context value\n   */\n  getValue(key: symbol): unknown;\n  /**\n   * Create a new context which inherits from this context and has\n   * the given key set to the given value.\n   *\n   * @param key - context key for which to set the value\n   * @param value - value to set for the given key\n   */\n  setValue(key: symbol, value: unknown): Context;\n  /**\n   * Return a new context which inherits from this context but does\n   * not contain a value for the given key.\n   *\n   * @param key - context key for which to clear a value\n   */\n  deleteValue(key: symbol): Context;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './baggage/types';\nexport { baggageEntryMetadataFromString } from './baggage/utils';\nexport * from './common/Exception';\nexport * from './common/Time';\nexport * from './common/Attributes';\nexport * from './diag';\nexport * from './propagation/TextMapPropagator';\nexport * from './trace/attributes';\nexport * from './trace/link';\nexport * from './trace/ProxyTracer';\nexport * from './trace/ProxyTracerProvider';\nexport * from './trace/Sampler';\nexport * from './trace/SamplingResult';\nexport * from './trace/span_context';\nexport * from './trace/span_kind';\nexport * from './trace/span';\nexport * from './trace/SpanOptions';\nexport * from './trace/status';\nexport * from './trace/trace_flags';\nexport * from './trace/trace_state';\nexport { createTraceState } from './trace/internal/utils';\nexport * from './trace/tracer_provider';\nexport * from './trace/tracer';\nexport * from './trace/tracer_options';\n\nexport {\n  isSpanContextValid,\n  isValidTraceId,\n  isValidSpanId,\n} from './trace/spancontext-utils';\n\nexport {\n  INVALID_SPANID,\n  INVALID_TRACEID,\n  INVALID_SPAN_CONTEXT,\n} from './trace/invalid-span-constants';\n\nexport * from './context/context';\nexport * from './context/types';\n\nimport { ContextAPI } from './api/context';\nexport type { ContextAPI } from './api/context';\n/** Entrypoint for context API */\nexport const context = ContextAPI.getInstance();\n\nimport { TraceAPI } from './api/trace';\nexport type { TraceAPI } from './api/trace';\n/** Entrypoint for trace API */\nexport const trace = TraceAPI.getInstance();\n\nimport { PropagationAPI } from './api/propagation';\nexport type { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\nexport const propagation = PropagationAPI.getInstance();\n\nimport { DiagAPI } from './api/diag';\nexport type { DiagAPI } from './api/diag';\n\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexport const diag = DiagAPI.instance();\n\nexport default {\n  trace,\n  context,\n  propagation,\n  diag,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { Context, ContextManager } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'context';\nconst NOOP_CONTEXT_MANAGER = new NoopContextManager();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nexport class ContextAPI {\n  private static _instance?: ContextAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Context API */\n  public static getInstance(): ContextAPI {\n    if (!this._instance) {\n      this._instance = new ContextAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current context manager.\n   *\n   * @returns true if the context manager was successfully registered, else false\n   */\n  public setGlobalContextManager(contextManager: ContextManager): boolean {\n    return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n  }\n\n  /**\n   * Get the currently active context\n   */\n  public active(): Context {\n    return this._getContextManager().active();\n  }\n\n  /**\n   * Execute a function with an active context\n   *\n   * @param context context to be active during function execution\n   * @param fn function to execute in a context\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  public with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return this._getContextManager().with(context, fn, thisArg, ...args);\n  }\n\n  /**\n   * Bind a context to a target function or event emitter\n   *\n   * @param context context to bind to the event emitter or function. Defaults to the currently active context\n   * @param target function or event emitter to bind\n   */\n  public bind<T>(context: Context, target: T): T {\n    return this._getContextManager().bind(context, target);\n  }\n\n  private _getContextManager(): ContextManager {\n    return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n  }\n\n  /** Disable and remove the global context manager */\n  public disable() {\n    this._getContextManager().disable();\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ROOT_CONTEXT } from './context';\nimport * as types from './types';\n\nexport class NoopContextManager implements types.ContextManager {\n  active(): types.Context {\n    return ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    _context: types.Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return fn.call(thisArg, ...args);\n  }\n\n  bind<T>(_context: types.Context, target: T): T {\n    return target;\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    return this;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from './types';\n\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description: string) {\n  // The specification states that for the same input, multiple calls should\n  // return different keys. Due to the nature of the JS dependency management\n  // system, this creates problems where multiple versions of some package\n  // could hold different keys for the same property.\n  //\n  // Therefore, we use Symbol.for which returns the same key for the same input.\n  return Symbol.for(description);\n}\n\nclass BaseContext implements Context {\n  private _currentContext!: Map<symbol, unknown>;\n\n  /**\n   * Construct a new context which inherits values from an optional parent context.\n   *\n   * @param parentContext a context from which to inherit values\n   */\n  constructor(parentContext?: Map<symbol, unknown>) {\n    // for minification\n    const self = this;\n\n    self._currentContext = parentContext ? new Map(parentContext) : new Map();\n\n    self.getValue = (key: symbol) => self._currentContext.get(key);\n\n    self.setValue = (key: symbol, value: unknown): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.set(key, value);\n      return context;\n    };\n\n    self.deleteValue = (key: symbol): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.delete(key);\n      return context;\n    };\n  }\n\n  /**\n   * Get a value from the context.\n   *\n   * @param key key which identifies a context value\n   */\n  public getValue!: (key: symbol) => unknown;\n\n  /**\n   * Create a new context which inherits from this context and has\n   * the given key set to the given value.\n   *\n   * @param key context key for which to set the value\n   * @param value value to set for the given key\n   */\n  public setValue!: (key: symbol, value: unknown) => Context;\n\n  /**\n   * Return a new context which inherits from this context but does\n   * not contain a value for the given key.\n   *\n   * @param key context key for which to clear a value\n   */\n  public deleteValue!: (key: symbol) => Context;\n}\n\n/** The root context is used as the default parent context when there is no active context */\nexport const ROOT_CONTEXT: Context = new BaseContext();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextManager } from '../context/types';\nimport { DiagLogger } from '../diag';\nimport { _globalThis } from '../platform';\nimport { TextMapPropagator } from '../propagation/TextMapPropagator';\nimport type { TracerProvider } from '../trace/tracer_provider';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\n\nconst major = VERSION.split('.')[0];\nconst GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\n  `opentelemetry.js.api.${major}`\n);\n\nconst _global = _globalThis as OTelGlobal;\n\nexport function registerGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type,\n  instance: OTelGlobalAPI[Type],\n  diag: DiagLogger,\n  allowOverride = false\n): boolean {\n  const api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = _global[\n    GLOBAL_OPENTELEMETRY_API_KEY\n  ] ?? {\n    version: VERSION,\n  });\n\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    const err = new Error(\n      `@opentelemetry/api: Attempted duplicate registration of API: ${type}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  if (api.version !== VERSION) {\n    // All registered APIs must be of the same version exactly\n    const err = new Error(\n      '@opentelemetry/api: All API registration versions must match'\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  api[type] = instance;\n  diag.debug(\n    `@opentelemetry/api: Registered a global for ${type} v${VERSION}.`\n  );\n\n  return true;\n}\n\nexport function getGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type\n): OTelGlobalAPI[Type] | undefined {\n  const globalVersion = _global[GLOBAL_OPENTELEMETRY_API_KEY]?.version;\n  if (!globalVersion || !isCompatible(globalVersion)) {\n    return;\n  }\n  return _global[GLOBAL_OPENTELEMETRY_API_KEY]?.[type];\n}\n\nexport function unregisterGlobal(type: keyof OTelGlobalAPI, diag: DiagLogger) {\n  diag.debug(\n    `@opentelemetry/api: Unregistering a global for ${type} v${VERSION}.`\n  );\n  const api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n\n  if (api) {\n    delete api[type];\n  }\n}\n\ntype OTelGlobal = {\n  [GLOBAL_OPENTELEMETRY_API_KEY]?: OTelGlobalAPI;\n};\n\ntype OTelGlobalAPI = {\n  version: string;\n\n  diag?: DiagLogger;\n  trace?: TracerProvider;\n  context?: ContextManager;\n  propagation?: TextMapPropagator;\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Updates to this file should also be replicated to @opentelemetry/api-metrics and\n// @opentelemetry/core too.\n\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport const _globalThis: typeof globalThis =\n  typeof globalThis === 'object' ? globalThis :\n  typeof self === 'object' ? self :\n  typeof window === 'object' ? window :\n  typeof global === 'object' ? global :\n  {} as typeof globalThis;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.1.0';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../version';\n\nconst re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(\n  ownVersion: string\n): (globalVersion: string) => boolean {\n  const acceptedVersions = new Set<string>([ownVersion]);\n  const rejectedVersions = new Set<string>();\n\n  const myVersionMatch = ownVersion.match(re);\n  if (!myVersionMatch) {\n    // we cannot guarantee compatibility so we always return noop\n    return () => false;\n  }\n\n  const ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3],\n    prerelease: myVersionMatch[4],\n  };\n\n  // if ownVersion has a prerelease tag, versions must match exactly\n  if (ownVersionParsed.prerelease != null) {\n    return function isExactmatch(globalVersion: string): boolean {\n      return globalVersion === ownVersion;\n    };\n  }\n\n  function _reject(v: string) {\n    rejectedVersions.add(v);\n    return false;\n  }\n\n  function _accept(v: string) {\n    acceptedVersions.add(v);\n    return true;\n  }\n\n  return function isCompatible(globalVersion: string): boolean {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n\n    const globalVersionMatch = globalVersion.match(re);\n    if (!globalVersionMatch) {\n      // cannot parse other version\n      // we cannot guarantee compatibility so we always noop\n      return _reject(globalVersion);\n    }\n\n    const globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3],\n      prerelease: globalVersionMatch[4],\n    };\n\n    // if globalVersion has a prerelease tag, versions must match exactly\n    if (globalVersionParsed.prerelease != null) {\n      return _reject(globalVersion);\n    }\n\n    // major versions must match\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.major === 0) {\n      if (\n        ownVersionParsed.minor === globalVersionParsed.minor &&\n        ownVersionParsed.patch <= globalVersionParsed.patch\n      ) {\n        return _accept(globalVersion);\n      }\n\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n\n    return _reject(globalVersion);\n  };\n}\n\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport const isCompatible = _makeCompatibilityCheck(VERSION);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport {\n  ComponentLoggerOptions,\n  DiagLogFunction,\n  DiagLogger,\n  DiagLogLevel,\n} from '../diag/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\n\nconst API_NAME = 'diag';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nexport class DiagAPI implements DiagLogger {\n  private static _instance?: DiagAPI;\n\n  /** Get the singleton instance of the DiagAPI API */\n  public static instance(): DiagAPI {\n    if (!this._instance) {\n      this._instance = new DiagAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Private internal constructor\n   * @private\n   */\n  private constructor() {\n    function _logProxy(funcName: keyof DiagLogger): DiagLogFunction {\n      return function (...args) {\n        const logger = getGlobal('diag');\n        // shortcut if logger not set\n        if (!logger) return;\n        return logger[funcName](...args);\n      };\n    }\n\n    // Using self local variable for minification purposes as 'this' cannot be minified\n    const self = this;\n\n    // DiagAPI specific functions\n\n    self.setLogger = (\n      logger: DiagLogger,\n      logLevel: DiagLogLevel = DiagLogLevel.INFO\n    ) => {\n      if (logger === self) {\n        // There isn't much we can do here.\n        // Logging to the console might break the user application.\n        // Try to log to self. If a logger was previously registered it will receive the log.\n        const err = new Error(\n          'Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation'\n        );\n        self.error(err.stack ?? err.message);\n        return false;\n      }\n\n      const oldLogger = getGlobal('diag');\n      const newLogger = createLogLevelDiagLogger(logLevel, logger);\n      // There already is an logger registered. We'll let it know before overwriting it.\n      if (oldLogger) {\n        const stack = new Error().stack ?? '<failed to generate stacktrace>';\n        oldLogger.warn(`Current logger will be overwritten from ${stack}`);\n        newLogger.warn(\n          `Current logger will overwrite one already registered from ${stack}`\n        );\n      }\n\n      return registerGlobal('diag', newLogger, self, true);\n    };\n\n    self.disable = () => {\n      unregisterGlobal(API_NAME, self);\n    };\n\n    self.createComponentLogger = (options: ComponentLoggerOptions) => {\n      return new DiagComponentLogger(options);\n    };\n\n    self.verbose = _logProxy('verbose');\n    self.debug = _logProxy('debug');\n    self.info = _logProxy('info');\n    self.warn = _logProxy('warn');\n    self.error = _logProxy('error');\n  }\n\n  /**\n   * Set the global DiagLogger and DiagLogLevel.\n   * If a global diag logger is already set, this will override it.\n   *\n   * @param logger - [Optional] The DiagLogger instance to set as the default logger.\n   * @param logLevel - [Optional] The DiagLogLevel used to filter logs sent to the logger. If not provided it will default to INFO.\n   * @returns true if the logger was successfully registered, else false\n   */\n  public setLogger!: (logger: DiagLogger, logLevel?: DiagLogLevel) => boolean;\n  /**\n   *\n   */\n  public createComponentLogger!: (\n    options: ComponentLoggerOptions\n  ) => DiagLogger;\n\n  // DiagLogger implementation\n  public verbose!: DiagLogFunction;\n  public debug!: DiagLogFunction;\n  public info!: DiagLogFunction;\n  public warn!: DiagLogFunction;\n  public error!: DiagLogFunction;\n\n  /**\n   * Unregister the global logger and return to Noop\n   */\n  public disable!: () => void;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobal } from '../internal/global-utils';\nimport { ComponentLoggerOptions, DiagLogger, DiagLogFunction } from './types';\n\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nexport class DiagComponentLogger implements DiagLogger {\n  private _namespace: string;\n\n  constructor(props: ComponentLoggerOptions) {\n    this._namespace = props.namespace || 'DiagComponentLogger';\n  }\n\n  public debug(...args: any[]): void {\n    return logProxy('debug', this._namespace, args);\n  }\n\n  public error(...args: any[]): void {\n    return logProxy('error', this._namespace, args);\n  }\n\n  public info(...args: any[]): void {\n    return logProxy('info', this._namespace, args);\n  }\n\n  public warn(...args: any[]): void {\n    return logProxy('warn', this._namespace, args);\n  }\n\n  public verbose(...args: any[]): void {\n    return logProxy('verbose', this._namespace, args);\n  }\n}\n\nfunction logProxy(\n  funcName: keyof DiagLogger,\n  namespace: string,\n  args: any\n): void {\n  const logger = getGlobal('diag');\n  // shortcut if logger not set\n  if (!logger) {\n    return;\n  }\n\n  args.unshift(namespace);\n  return logger[funcName](...(args as Parameters<DiagLogFunction>));\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogFunction, DiagLogger, DiagLogLevel } from '../types';\n\nexport function createLogLevelDiagLogger(\n  maxLevel: DiagLogLevel,\n  logger: DiagLogger\n): DiagLogger {\n  if (maxLevel < DiagLogLevel.NONE) {\n    maxLevel = DiagLogLevel.NONE;\n  } else if (maxLevel > DiagLogLevel.ALL) {\n    maxLevel = DiagLogLevel.ALL;\n  }\n\n  // In case the logger is null or undefined\n  logger = logger || {};\n\n  function _filterFunc(\n    funcName: keyof DiagLogger,\n    theLevel: DiagLogLevel\n  ): DiagLogFunction {\n    const theFunc = logger[funcName];\n\n    if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n      return theFunc.bind(logger);\n    }\n    return function () {};\n  }\n\n  return {\n    error: _filterFunc('error', DiagLogLevel.ERROR),\n    warn: _filterFunc('warn', DiagLogLevel.WARN),\n    info: _filterFunc('info', DiagLogLevel.INFO),\n    debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n    verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type DiagLogFunction = (message: string, ...args: unknown[]) => void;\n\n/**\n * Defines an internal diagnostic logger interface which is used to log internal diagnostic\n * messages, you can set the default diagnostic logger via the {@link DiagAPI} setLogger function.\n * API provided implementations include :-\n * - a No-Op {@link createNoopDiagLogger}\n * - a {@link DiagLogLevel} filtering wrapper {@link createLogLevelDiagLogger}\n * - a general Console {@link DiagConsoleLogger} version.\n */\nexport interface DiagLogger {\n  /** Log an error scenario that was not expected and caused the requested operation to fail. */\n  error: DiagLogFunction;\n\n  /**\n   * Log a warning scenario to inform the developer of an issues that should be investigated.\n   * The requested operation may or may not have succeeded or completed.\n   */\n  warn: DiagLogFunction;\n\n  /**\n   * Log a general informational message, this should not affect functionality.\n   * This is also the default logging level so this should NOT be used for logging\n   * debugging level information.\n   */\n  info: DiagLogFunction;\n\n  /**\n   * Log a general debug message that can be useful for identifying a failure.\n   * Information logged at this level may include diagnostic details that would\n   * help identify a failure scenario.\n   * For example: Logging the order of execution of async operations.\n   */\n  debug: DiagLogFunction;\n\n  /**\n   * Log a detailed (verbose) trace level logging that can be used to identify failures\n   * where debug level logging would be insufficient, this level of tracing can include\n   * input and output parameters and as such may include PII information passing through\n   * the API. As such it is recommended that this level of tracing should not be enabled\n   * in a production environment.\n   */\n  verbose: DiagLogFunction;\n}\n\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nexport enum DiagLogLevel {\n  /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n  NONE = 0,\n\n  /** Identifies an error scenario */\n  ERROR = 30,\n\n  /** Identifies a warning scenario */\n  WARN = 50,\n\n  /** General informational log message */\n  INFO = 60,\n\n  /** General debug log message */\n  DEBUG = 70,\n\n  /**\n   * Detailed trace level logging should only be used for development, should only be set\n   * in a development environment.\n   */\n  VERBOSE = 80,\n\n  /** Used to set the logging level to include all logging */\n  ALL = 9999,\n}\n\n/**\n * Defines options for ComponentLogger\n */\nexport interface ComponentLoggerOptions {\n  namespace: string;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport {\n  isSpanContextValid,\n  wrapSpanContext,\n} from '../trace/spancontext-utils';\nimport { Tracer } from '../trace/tracer';\nimport { TracerProvider } from '../trace/tracer_provider';\nimport {\n  deleteSpan,\n  getSpan,\n  getSpanContext,\n  setSpan,\n  setSpanContext,\n} from '../trace/context-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'trace';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nexport class TraceAPI {\n  private static _instance?: TraceAPI;\n\n  private _proxyTracerProvider = new ProxyTracerProvider();\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Trace API */\n  public static getInstance(): TraceAPI {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n  public setGlobalTracerProvider(provider: TracerProvider): boolean {\n    const success = registerGlobal(\n      API_NAME,\n      this._proxyTracerProvider,\n      DiagAPI.instance()\n    );\n    if (success) {\n      this._proxyTracerProvider.setDelegate(provider);\n    }\n    return success;\n  }\n\n  /**\n   * Returns the global tracer provider.\n   */\n  public getTracerProvider(): TracerProvider {\n    return getGlobal(API_NAME) || this._proxyTracerProvider;\n  }\n\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n  public getTracer(name: string, version?: string): Tracer {\n    return this.getTracerProvider().getTracer(name, version);\n  }\n\n  /** Remove the global tracer provider */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n    this._proxyTracerProvider = new ProxyTracerProvider();\n  }\n\n  public wrapSpanContext = wrapSpanContext;\n\n  public isSpanContextValid = isSpanContextValid;\n\n  public deleteSpan = deleteSpan;\n\n  public getSpan = getSpan;\n\n  public getSpanContext = getSpanContext;\n\n  public setSpan = setSpan;\n\n  public setSpanContext = setSpanContext;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Tracer } from './tracer';\nimport { TracerProvider } from './tracer_provider';\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nexport class ProxyTracerProvider implements TracerProvider {\n  private _delegate?: TracerProvider;\n\n  /**\n   * Get a {@link ProxyTracer}\n   */\n  getTracer(name: string, version?: string, options?: TracerOptions): Tracer {\n    return (\n      this.getDelegateTracer(name, version, options) ??\n      new ProxyTracer(this, name, version, options)\n    );\n  }\n\n  getDelegate(): TracerProvider {\n    return this._delegate ?? NOOP_TRACER_PROVIDER;\n  }\n\n  /**\n   * Set the delegate tracer provider\n   */\n  setDelegate(delegate: TracerProvider) {\n    this._delegate = delegate;\n  }\n\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined {\n    return this._delegate?.getTracer(name, version, options);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { NoopTracer } from './NoopTracer';\nimport { Span } from './span';\nimport { SpanOptions } from './SpanOptions';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER = new NoopTracer();\n\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nexport class ProxyTracer implements Tracer {\n  // When a real implementation is provided, this will be it\n  private _delegate?: Tracer;\n\n  constructor(\n    private _provider: TracerDelegator,\n    public readonly name: string,\n    public readonly version?: string,\n    public readonly options?: TracerOptions\n  ) {}\n\n  startSpan(name: string, options?: SpanOptions, context?: Context): Span {\n    return this._getTracer().startSpan(name, options, context);\n  }\n\n  startActiveSpan<F extends (span: Span) => unknown>(\n    _name: string,\n    _options: F | SpanOptions,\n    _context?: F | Context,\n    _fn?: F\n  ): ReturnType<F> {\n    const tracer = this._getTracer();\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  }\n\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n  private _getTracer() {\n    if (this._delegate) {\n      return this._delegate;\n    }\n\n    const tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);\n\n    if (!tracer) {\n      return NOOP_TRACER;\n    }\n\n    this._delegate = tracer;\n    return this._delegate;\n  }\n}\n\nexport interface TracerDelegator {\n  getDelegateTracer(name: string, version?: string, options?: TracerOptions): Tracer | undefined;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { Context } from '../context/types';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { isSpanContextValid } from './spancontext-utils';\nimport { SpanOptions } from './SpanOptions';\nimport { SpanContext } from './span_context';\nimport { Tracer } from './tracer';\n\nconst context = ContextAPI.getInstance();\n\n/**\n * No-op implementations of {@link Tracer}.\n */\nexport class NoopTracer implements Tracer {\n  // startSpan starts a noop span.\n  startSpan(name: string, options?: SpanOptions, context?: Context): Span {\n    const root = Boolean(options?.root);\n    if (root) {\n      return new NonRecordingSpan();\n    }\n\n    const parentFromContext = context && getSpanContext(context);\n\n    if (\n      isSpanContext(parentFromContext) &&\n      isSpanContextValid(parentFromContext)\n    ) {\n      return new NonRecordingSpan(parentFromContext);\n    } else {\n      return new NonRecordingSpan();\n    }\n  }\n\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    ctx: Context | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | SpanOptions,\n    arg3?: F | Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: SpanOptions | undefined;\n    let ctx: Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as SpanOptions | undefined;\n      ctx = arg3 as Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? context.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = setSpan(parentContext, span);\n\n    return context.with(contextWithSpanSet, fn, undefined, span);\n  }\n}\n\nfunction isSpanContext(spanContext: any): spanContext is SpanContext {\n  return (\n    typeof spanContext === 'object' &&\n    typeof spanContext['spanId'] === 'string' &&\n    typeof spanContext['traceId'] === 'string' &&\n    typeof spanContext['traceFlags'] === 'number'\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\n\n/**\n * span key\n */\nconst SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context: Context): Span | undefined {\n  return (context.getValue(SPAN_KEY) as Span) || undefined;\n}\n\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context: Context, span: Span): Context {\n  return context.setValue(SPAN_KEY, span);\n}\n\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context: Context): Context {\n  return context.deleteValue(SPAN_KEY);\n}\n\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(\n  context: Context,\n  spanContext: SpanContext\n): Context {\n  return setSpan(context, new NonRecordingSpan(spanContext));\n}\n\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context: Context): SpanContext | undefined {\n  return getSpan(context)?.spanContext();\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '../common/Exception';\nimport { TimeInput } from '../common/Time';\nimport { SpanAttributes } from './attributes';\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { SpanStatus } from './status';\n\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nexport class NonRecordingSpan implements Span {\n  constructor(\n    private readonly _spanContext: SpanContext = INVALID_SPAN_CONTEXT\n  ) {}\n\n  // Returns a SpanContext.\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  // By default does nothing\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  // By default does nothing\n  setAttributes(_attributes: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  addEvent(_name: string, _attributes?: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  // By default does nothing\n  updateName(_name: string): this {\n    return this;\n  }\n\n  // By default does nothing\n  end(_endTime?: TimeInput): void {}\n\n  // isRecording always returns false for NonRecordingSpan.\n  isRecording(): boolean {\n    return false;\n  }\n\n  // By default does nothing\n  recordException(_exception: Exception, _time?: TimeInput): void {}\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanContext } from './span_context';\nimport { TraceFlags } from './trace_flags';\n\nexport const INVALID_SPANID = '0000000000000000';\nexport const INVALID_TRACEID = '00000000000000000000000000000000';\nexport const INVALID_SPAN_CONTEXT: SpanContext = {\n  traceId: INVALID_TRACEID,\n  spanId: INVALID_SPANID,\n  traceFlags: TraceFlags.NONE,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum TraceFlags {\n  /** Represents no flag set. */\n  NONE = 0x0,\n  /** Bit to represent whether trace is sampled in trace flags. */\n  SAMPLED = 0x1 << 0,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPANID, INVALID_TRACEID } from './invalid-span-constants';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\n\nconst VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nconst VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\n\nexport function isValidTraceId(traceId: string): boolean {\n  return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\n\nexport function isValidSpanId(spanId: string): boolean {\n  return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext: SpanContext): boolean {\n  return (\n    isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId)\n  );\n}\n\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext: SpanContext): Span {\n  return new NonRecordingSpan(spanContext);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopTracer } from './NoopTracer';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\nimport { TracerProvider } from './tracer_provider';\n\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nexport class NoopTracerProvider implements TracerProvider {\n  getTracer(\n    _name?: string,\n    _version?: string,\n    _options?: TracerOptions\n  ): Tracer {\n    return new NoopTracer();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport {\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '../propagation/TextMapPropagator';\nimport {\n  getBaggage,\n  setBaggage,\n  deleteBaggage,\n} from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'propagation';\nconst NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nexport class PropagationAPI {\n  private static _instance?: PropagationAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Propagator API */\n  public static getInstance(): PropagationAPI {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current propagator.\n   *\n   * @returns true if the propagator was successfully registered, else false\n   */\n  public setGlobalPropagator(propagator: TextMapPropagator): boolean {\n    return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n  }\n\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param context Context carrying tracing data to inject\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   */\n  public inject<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier> = defaultTextMapSetter\n  ): void {\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  }\n\n  /**\n   * Extract context from a carrier\n   *\n   * @param context Context which the newly created context will inherit from\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   */\n  public extract<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier> = defaultTextMapGetter\n  ): Context {\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  }\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  public fields(): string[] {\n    return this._getGlobalPropagator().fields();\n  }\n\n  /** Remove the global propagator */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n\n  public createBaggage = createBaggage;\n\n  public getBaggage = getBaggage;\n\n  public setBaggage = setBaggage;\n\n  public deleteBaggage = deleteBaggage;\n\n  private _getGlobalPropagator(): TextMapPropagator {\n    return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { TextMapPropagator } from './TextMapPropagator';\n\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nexport class NoopTextMapPropagator implements TextMapPropagator {\n  /** Noop inject function does nothing */\n  inject(_context: Context, _carrier: unknown): void {}\n  /** Noop extract function does nothing and returns the input context */\n  extract(context: Context, _carrier: unknown): Context {\n    return context;\n  }\n  fields(): string[] {\n    return [];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\n\n/**\n * Injects `Context` into and extracts it from carriers that travel\n * in-band across process boundaries. Encoding is expected to conform to the\n * HTTP Header Field semantics. Values are often encoded as RPC/HTTP request\n * headers.\n *\n * The carrier of propagated data on both the client (injector) and server\n * (extractor) side is usually an object such as http headers. Propagation is\n * usually implemented via library-specific request interceptors, where the\n * client-side injects values and the server-side extracts them.\n */\nexport interface TextMapPropagator<Carrier = any> {\n  /**\n   * Injects values from a given `Context` into a carrier.\n   *\n   * OpenTelemetry defines a common set of format values (TextMapPropagator),\n   * and each has an expected `carrier` type.\n   *\n   * @param context the Context from which to extract values to transmit over\n   *     the wire.\n   * @param carrier the carrier of propagation fields, such as http request\n   *     headers.\n   * @param setter an optional {@link TextMapSetter}. If undefined, values will be\n   *     set by direct object assignment.\n   */\n  inject(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier>\n  ): void;\n\n  /**\n   * Given a `Context` and a carrier, extract context values from a\n   * carrier and return a new context, created from the old context, with the\n   * extracted values.\n   *\n   * @param context the Context from which to extract values to transmit over\n   *     the wire.\n   * @param carrier the carrier of propagation fields, such as http request\n   *     headers.\n   * @param getter an optional {@link TextMapGetter}. If undefined, keys will be all\n   *     own properties, and keys will be accessed by direct object access.\n   */\n  extract(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier>\n  ): Context;\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  fields(): string[];\n}\n\n/**\n * A setter is specified by the caller to define a specific method\n * to set key/value pairs on the carrier within a propagator.\n */\nexport interface TextMapSetter<Carrier = any> {\n  /**\n   * Callback used to set a key/value pair on an object.\n   *\n   * Should be called by the propagator each time a key/value pair\n   * should be set, and should set that key/value pair on the propagator.\n   *\n   * @param carrier object or class which carries key/value pairs\n   * @param key string key to modify\n   * @param value value to be set to the key on the carrier\n   */\n  set(carrier: Carrier, key: string, value: string): void;\n}\n\n/**\n * A getter is specified by the caller to define a specific method\n * to get the value of a key from a carrier.\n */\nexport interface TextMapGetter<Carrier = any> {\n  /**\n   * Get a list of all keys available on the carrier.\n   *\n   * @param carrier\n   */\n  keys(carrier: Carrier): string[];\n\n  /**\n   * Get the value of a specific key from the carrier.\n   *\n   * @param carrier\n   * @param key\n   */\n  get(carrier: Carrier, key: string): undefined | string | string[];\n}\n\nexport const defaultTextMapGetter: TextMapGetter = {\n  get(carrier, key) {\n    if (carrier == null) {\n      return undefined;\n    }\n    return carrier[key];\n  },\n\n  keys(carrier) {\n    if (carrier == null) {\n      return [];\n    }\n    return Object.keys(carrier);\n  },\n};\n\nexport const defaultTextMapSetter: TextMapSetter = {\n  set(carrier, key, value) {\n    if (carrier == null) {\n      return;\n    }\n\n    carrier[key] = value;\n  },\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Baggage } from './types';\n\n/**\n * Baggage key\n */\nconst BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');\n\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getBaggage(context: Context): Baggage | undefined {\n  return (context.getValue(BAGGAGE_KEY) as Baggage) || undefined;\n}\n\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nexport function setBaggage(context: Context, baggage: Baggage): Context {\n  return context.setValue(BAGGAGE_KEY, baggage);\n}\n\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nexport function deleteBaggage(context: Context): Context {\n  return context.deleteValue(BAGGAGE_KEY);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagAPI } from '../api/diag';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\nimport { Baggage, BaggageEntry, BaggageEntryMetadata } from './types';\n\nconst diag = DiagAPI.instance();\n\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(\n  entries: Record<string, BaggageEntry> = {}\n): Baggage {\n  return new BaggageImpl(new Map(Object.entries(entries)));\n}\n\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(\n  str: string\n): BaggageEntryMetadata {\n  if (typeof str !== 'string') {\n    diag.error(\n      `Cannot create baggage metadata from unknown type: ${typeof str}`\n    );\n    str = '';\n  }\n\n  return {\n    __TYPE__: baggageEntryMetadataSymbol,\n    toString() {\n      return str;\n    },\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Baggage, BaggageEntry } from '../types';\n\nexport class BaggageImpl implements Baggage {\n  private _entries: Map<string, BaggageEntry>;\n\n  constructor(entries?: Map<string, BaggageEntry>) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n\n  getEntry(key: string): BaggageEntry | undefined {\n    const entry = this._entries.get(key);\n    if (!entry) {\n      return undefined;\n    }\n\n    return Object.assign({}, entry);\n  }\n\n  getAllEntries(): [string, BaggageEntry][] {\n    return Array.from(this._entries.entries()).map(([k, v]) => [k, v]);\n  }\n\n  setEntry(key: string, entry: BaggageEntry): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.set(key, entry);\n    return newBaggage;\n  }\n\n  removeEntry(key: string): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.delete(key);\n    return newBaggage;\n  }\n\n  removeEntries(...keys: string[]): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    for (const key of keys) {\n      newBaggage._entries.delete(key);\n    }\n    return newBaggage;\n  }\n\n  clear(): BaggageImpl {\n    return new BaggageImpl();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexport const baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanAttributes } from './attributes';\n\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum SpanKind {\n  /** Default value. Indicates that the span is used internally. */\n  INTERNAL = 0,\n\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n  SERVER = 1,\n\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  PRODUCER = 3,\n\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  CONSUMER = 4,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport interface SpanStatus {\n  /** The status code of this message. */\n  code: SpanStatusCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * An enumeration of status codes.\n */\nexport enum SpanStatusCode {\n  /**\n   * The default status.\n   */\n  UNSET = 0,\n  /**\n   * The operation has been validated by an Application developer or\n   * Operator to have completed successfully.\n   */\n  OK = 1,\n  /**\n   * The operation contains an error.\n   */\n  ERROR = 2,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceState } from '../trace_state';\nimport { validateKey, validateValue } from './tracestate-validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceStateImpl implements TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceStateImpl {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceStateImpl {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceStateImpl {\n    const traceState = new TraceStateImpl();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key: string): boolean {\n  return VALID_KEY_REGEX.test(key);\n}\n\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value: string): boolean {\n  return (\n    VALID_VALUE_BASE_REGEX.test(value) &&\n    !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value)\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SpanContext, TraceFlags } from \"../interfaces\";\n\nconst VERSION = \"00\";\n\n/**\n * Generates a `SpanContext` given a `traceparent` header value.\n * @param traceParent - Serialized span context data as a `traceparent` header value.\n * @returns The `SpanContext` generated from the `traceparent` value.\n */\nexport function extractSpanContextFromTraceParentHeader(\n  traceParentHeader: string\n): SpanContext | undefined {\n  const parts = traceParentHeader.split(\"-\");\n\n  if (parts.length !== 4) {\n    return;\n  }\n\n  const [version, traceId, spanId, traceOptions] = parts;\n\n  if (version !== VERSION) {\n    return;\n  }\n\n  const traceFlags = parseInt(traceOptions, 16);\n\n  const spanContext: SpanContext = {\n    spanId,\n    traceId,\n    traceFlags\n  };\n\n  return spanContext;\n}\n\n/**\n * Generates a `traceparent` value given a span context.\n * @param spanContext - Contains context for a specific span.\n * @returns The `spanContext` represented as a `traceparent` value.\n */\nexport function getTraceParentHeader(spanContext: SpanContext): string | undefined {\n  const missingFields: string[] = [];\n  if (!spanContext.traceId) {\n    missingFields.push(\"traceId\");\n  }\n  if (!spanContext.spanId) {\n    missingFields.push(\"spanId\");\n  }\n\n  if (missingFields.length) {\n    return;\n  }\n\n  const flags = spanContext.traceFlags || TraceFlags.NONE;\n  const hexFlags = flags.toString(16);\n  const traceFlags = hexFlags.length === 1 ? `0${hexFlags}` : hexFlags;\n\n  // https://www.w3.org/TR/trace-context/#traceparent-header-field-values\n  return `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-${traceFlags}`;\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  BlobServiceProperties,\n  ServiceSetPropertiesOptionalParams,\n  ServiceSetPropertiesResponse,\n  ServiceGetPropertiesOptionalParams,\n  ServiceGetPropertiesResponse,\n  ServiceGetStatisticsOptionalParams,\n  ServiceGetStatisticsResponse,\n  ServiceListContainersSegmentOptionalParams,\n  ServiceListContainersSegmentResponse,\n  KeyInfo,\n  ServiceGetUserDelegationKeyOptionalParams,\n  ServiceGetUserDelegationKeyResponse,\n  ServiceGetAccountInfoResponse,\n  ServiceSubmitBatchOptionalParams,\n  ServiceSubmitBatchResponse,\n  ServiceFilterBlobsOptionalParams,\n  ServiceFilterBlobsResponse\n} from \"../models\";\n\n/** Class representing a Service. */\nexport class Service {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class Service class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Sets properties for a storage account's Blob service endpoint, including properties for Storage\n   * Analytics and CORS (Cross-Origin Resource Sharing) rules\n   * @param blobServiceProperties The StorageService properties.\n   * @param options The options parameters.\n   */\n  setProperties(\n    blobServiceProperties: BlobServiceProperties,\n    options?: ServiceSetPropertiesOptionalParams\n  ): Promise<ServiceSetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blobServiceProperties,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setPropertiesOperationSpec\n    ) as Promise<ServiceSetPropertiesResponse>;\n  }\n\n  /**\n   * gets the properties of a storage account's Blob service, including properties for Storage Analytics\n   * and CORS (Cross-Origin Resource Sharing) rules.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: ServiceGetPropertiesOptionalParams\n  ): Promise<ServiceGetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPropertiesOperationSpec\n    ) as Promise<ServiceGetPropertiesResponse>;\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Blob service. It is only available on the\n   * secondary location endpoint when read-access geo-redundant replication is enabled for the storage\n   * account.\n   * @param options The options parameters.\n   */\n  getStatistics(\n    options?: ServiceGetStatisticsOptionalParams\n  ): Promise<ServiceGetStatisticsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getStatisticsOperationSpec\n    ) as Promise<ServiceGetStatisticsResponse>;\n  }\n\n  /**\n   * The List Containers Segment operation returns a list of the containers under the specified account\n   * @param options The options parameters.\n   */\n  listContainersSegment(\n    options?: ServiceListContainersSegmentOptionalParams\n  ): Promise<ServiceListContainersSegmentResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listContainersSegmentOperationSpec\n    ) as Promise<ServiceListContainersSegmentResponse>;\n  }\n\n  /**\n   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n   * bearer token authentication.\n   * @param keyInfo Key information\n   * @param options The options parameters.\n   */\n  getUserDelegationKey(\n    keyInfo: KeyInfo,\n    options?: ServiceGetUserDelegationKeyOptionalParams\n  ): Promise<ServiceGetUserDelegationKeyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      keyInfo,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getUserDelegationKeyOperationSpec\n    ) as Promise<ServiceGetUserDelegationKeyResponse>;\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(\n    options?: coreHttp.OperationOptions\n  ): Promise<ServiceGetAccountInfoResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getAccountInfoOperationSpec\n    ) as Promise<ServiceGetAccountInfoResponse>;\n  }\n\n  /**\n   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n   * @param contentLength The length of the request.\n   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  submitBatch(\n    contentLength: number,\n    multipartContentType: string,\n    body: coreHttp.HttpRequestBody,\n    options?: ServiceSubmitBatchOptionalParams\n  ): Promise<ServiceSubmitBatchResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      multipartContentType,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      submitBatchOperationSpec\n    ) as Promise<ServiceSubmitBatchResponse>;\n  }\n\n  /**\n   * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a\n   * given search expression.  Filter blobs searches across all containers within a storage account but\n   * can be scoped within the expression to a single container.\n   * @param options The options parameters.\n   */\n  filterBlobs(\n    options?: ServiceFilterBlobsOptionalParams\n  ): Promise<ServiceFilterBlobsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      filterBlobsOperationSpec\n    ) as Promise<ServiceFilterBlobsResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\n\nconst setPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ServiceSetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSetPropertiesExceptionHeaders\n    }\n  },\n  requestBody: Parameters.blobServiceProperties,\n  queryParameters: [\n    Parameters.restype,\n    Parameters.comp,\n    Parameters.timeoutInSeconds\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobServiceProperties,\n      headersMapper: Mappers.ServiceGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.restype,\n    Parameters.comp,\n    Parameters.timeoutInSeconds\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getStatisticsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobServiceStatistics,\n      headersMapper: Mappers.ServiceGetStatisticsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetStatisticsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.restype,\n    Parameters.timeoutInSeconds,\n    Parameters.comp1\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listContainersSegmentOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListContainersSegmentResponse,\n      headersMapper: Mappers.ServiceListContainersSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceListContainersSegmentExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp2,\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.include\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getUserDelegationKeyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UserDelegationKey,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyExceptionHeaders\n    }\n  },\n  requestBody: Parameters.keyInfo,\n  queryParameters: [\n    Parameters.restype,\n    Parameters.timeoutInSeconds,\n    Parameters.comp3\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ServiceGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst submitBatchOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ServiceSubmitBatchHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSubmitBatchExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.multipartContentType\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst filterBlobsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FilterBlobSegment,\n      headersMapper: Mappers.ServiceFilterBlobsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceFilterBlobsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.comp5,\n    Parameters.where\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const BlobServiceProperties: coreHttp.CompositeMapper = {\n  serializedName: \"BlobServiceProperties\",\n  xmlName: \"StorageServiceProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobServiceProperties\",\n    modelProperties: {\n      blobAnalyticsLogging: {\n        serializedName: \"Logging\",\n        xmlName: \"Logging\",\n        type: {\n          name: \"Composite\",\n          className: \"Logging\"\n        }\n      },\n      hourMetrics: {\n        serializedName: \"HourMetrics\",\n        xmlName: \"HourMetrics\",\n        type: {\n          name: \"Composite\",\n          className: \"Metrics\"\n        }\n      },\n      minuteMetrics: {\n        serializedName: \"MinuteMetrics\",\n        xmlName: \"MinuteMetrics\",\n        type: {\n          name: \"Composite\",\n          className: \"Metrics\"\n        }\n      },\n      cors: {\n        serializedName: \"Cors\",\n        xmlName: \"Cors\",\n        xmlIsWrapped: true,\n        xmlElementName: \"CorsRule\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CorsRule\"\n            }\n          }\n        }\n      },\n      defaultServiceVersion: {\n        serializedName: \"DefaultServiceVersion\",\n        xmlName: \"DefaultServiceVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deleteRetentionPolicy: {\n        serializedName: \"DeleteRetentionPolicy\",\n        xmlName: \"DeleteRetentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      },\n      staticWebsite: {\n        serializedName: \"StaticWebsite\",\n        xmlName: \"StaticWebsite\",\n        type: {\n          name: \"Composite\",\n          className: \"StaticWebsite\"\n        }\n      }\n    }\n  }\n};\n\nexport const Logging: coreHttp.CompositeMapper = {\n  serializedName: \"Logging\",\n  type: {\n    name: \"Composite\",\n    className: \"Logging\",\n    modelProperties: {\n      version: {\n        serializedName: \"Version\",\n        required: true,\n        xmlName: \"Version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deleteProperty: {\n        serializedName: \"Delete\",\n        required: true,\n        xmlName: \"Delete\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      read: {\n        serializedName: \"Read\",\n        required: true,\n        xmlName: \"Read\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      write: {\n        serializedName: \"Write\",\n        required: true,\n        xmlName: \"Write\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      retentionPolicy: {\n        serializedName: \"RetentionPolicy\",\n        xmlName: \"RetentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const RetentionPolicy: coreHttp.CompositeMapper = {\n  serializedName: \"RetentionPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"RetentionPolicy\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"Enabled\",\n        required: true,\n        xmlName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      days: {\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"Days\",\n        xmlName: \"Days\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Metrics: coreHttp.CompositeMapper = {\n  serializedName: \"Metrics\",\n  type: {\n    name: \"Composite\",\n    className: \"Metrics\",\n    modelProperties: {\n      version: {\n        serializedName: \"Version\",\n        xmlName: \"Version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      enabled: {\n        serializedName: \"Enabled\",\n        required: true,\n        xmlName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      includeAPIs: {\n        serializedName: \"IncludeAPIs\",\n        xmlName: \"IncludeAPIs\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      retentionPolicy: {\n        serializedName: \"RetentionPolicy\",\n        xmlName: \"RetentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const CorsRule: coreHttp.CompositeMapper = {\n  serializedName: \"CorsRule\",\n  type: {\n    name: \"Composite\",\n    className: \"CorsRule\",\n    modelProperties: {\n      allowedOrigins: {\n        serializedName: \"AllowedOrigins\",\n        required: true,\n        xmlName: \"AllowedOrigins\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedMethods: {\n        serializedName: \"AllowedMethods\",\n        required: true,\n        xmlName: \"AllowedMethods\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedHeaders: {\n        serializedName: \"AllowedHeaders\",\n        required: true,\n        xmlName: \"AllowedHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      exposedHeaders: {\n        serializedName: \"ExposedHeaders\",\n        required: true,\n        xmlName: \"ExposedHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxAgeInSeconds: {\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        serializedName: \"MaxAgeInSeconds\",\n        required: true,\n        xmlName: \"MaxAgeInSeconds\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const StaticWebsite: coreHttp.CompositeMapper = {\n  serializedName: \"StaticWebsite\",\n  type: {\n    name: \"Composite\",\n    className: \"StaticWebsite\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"Enabled\",\n        required: true,\n        xmlName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      indexDocument: {\n        serializedName: \"IndexDocument\",\n        xmlName: \"IndexDocument\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorDocument404Path: {\n        serializedName: \"ErrorDocument404Path\",\n        xmlName: \"ErrorDocument404Path\",\n        type: {\n          name: \"String\"\n        }\n      },\n      defaultIndexDocumentPath: {\n        serializedName: \"DefaultIndexDocumentPath\",\n        xmlName: \"DefaultIndexDocumentPath\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageError: coreHttp.CompositeMapper = {\n  serializedName: \"StorageError\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageError\",\n    modelProperties: {\n      message: {\n        serializedName: \"Message\",\n        xmlName: \"Message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"Code\",\n        xmlName: \"Code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobServiceStatistics: coreHttp.CompositeMapper = {\n  serializedName: \"BlobServiceStatistics\",\n  xmlName: \"StorageServiceStats\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobServiceStatistics\",\n    modelProperties: {\n      geoReplication: {\n        serializedName: \"GeoReplication\",\n        xmlName: \"GeoReplication\",\n        type: {\n          name: \"Composite\",\n          className: \"GeoReplication\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeoReplication: coreHttp.CompositeMapper = {\n  serializedName: \"GeoReplication\",\n  type: {\n    name: \"Composite\",\n    className: \"GeoReplication\",\n    modelProperties: {\n      status: {\n        serializedName: \"Status\",\n        required: true,\n        xmlName: \"Status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"live\", \"bootstrap\", \"unavailable\"]\n        }\n      },\n      lastSyncOn: {\n        serializedName: \"LastSyncTime\",\n        required: true,\n        xmlName: \"LastSyncTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const ListContainersSegmentResponse: coreHttp.CompositeMapper = {\n  serializedName: \"ListContainersSegmentResponse\",\n  xmlName: \"EnumerationResults\",\n  type: {\n    name: \"Composite\",\n    className: \"ListContainersSegmentResponse\",\n    modelProperties: {\n      serviceEndpoint: {\n        serializedName: \"ServiceEndpoint\",\n        required: true,\n        xmlName: \"ServiceEndpoint\",\n        xmlIsAttribute: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        serializedName: \"Prefix\",\n        xmlName: \"Prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      marker: {\n        serializedName: \"Marker\",\n        xmlName: \"Marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxPageSize: {\n        serializedName: \"MaxResults\",\n        xmlName: \"MaxResults\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      containerItems: {\n        serializedName: \"ContainerItems\",\n        required: true,\n        xmlName: \"Containers\",\n        xmlIsWrapped: true,\n        xmlElementName: \"Container\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ContainerItem\"\n            }\n          }\n        }\n      },\n      continuationToken: {\n        serializedName: \"NextMarker\",\n        xmlName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerItem: coreHttp.CompositeMapper = {\n  serializedName: \"ContainerItem\",\n  xmlName: \"Container\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerItem\",\n    modelProperties: {\n      name: {\n        serializedName: \"Name\",\n        required: true,\n        xmlName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deleted: {\n        serializedName: \"Deleted\",\n        xmlName: \"Deleted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      version: {\n        serializedName: \"Version\",\n        xmlName: \"Version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      properties: {\n        serializedName: \"Properties\",\n        xmlName: \"Properties\",\n        type: {\n          name: \"Composite\",\n          className: \"ContainerProperties\"\n        }\n      },\n      metadata: {\n        serializedName: \"Metadata\",\n        xmlName: \"Metadata\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerProperties: coreHttp.CompositeMapper = {\n  serializedName: \"ContainerProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerProperties\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"Last-Modified\",\n        required: true,\n        xmlName: \"Last-Modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"Etag\",\n        required: true,\n        xmlName: \"Etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseStatus: {\n        serializedName: \"LeaseStatus\",\n        xmlName: \"LeaseStatus\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"locked\", \"unlocked\"]\n        }\n      },\n      leaseState: {\n        serializedName: \"LeaseState\",\n        xmlName: \"LeaseState\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseDuration: {\n        serializedName: \"LeaseDuration\",\n        xmlName: \"LeaseDuration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"infinite\", \"fixed\"]\n        }\n      },\n      publicAccess: {\n        serializedName: \"PublicAccess\",\n        xmlName: \"PublicAccess\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"container\", \"blob\"]\n        }\n      },\n      hasImmutabilityPolicy: {\n        serializedName: \"HasImmutabilityPolicy\",\n        xmlName: \"HasImmutabilityPolicy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      hasLegalHold: {\n        serializedName: \"HasLegalHold\",\n        xmlName: \"HasLegalHold\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      defaultEncryptionScope: {\n        serializedName: \"DefaultEncryptionScope\",\n        xmlName: \"DefaultEncryptionScope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      preventEncryptionScopeOverride: {\n        serializedName: \"DenyEncryptionScopeOverride\",\n        xmlName: \"DenyEncryptionScopeOverride\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      deletedOn: {\n        serializedName: \"DeletedTime\",\n        xmlName: \"DeletedTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      remainingRetentionDays: {\n        serializedName: \"RemainingRetentionDays\",\n        xmlName: \"RemainingRetentionDays\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isImmutableStorageWithVersioningEnabled: {\n        serializedName: \"ImmutableStorageWithVersioningEnabled\",\n        xmlName: \"ImmutableStorageWithVersioningEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyInfo: coreHttp.CompositeMapper = {\n  serializedName: \"KeyInfo\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyInfo\",\n    modelProperties: {\n      startsOn: {\n        serializedName: \"Start\",\n        required: true,\n        xmlName: \"Start\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expiresOn: {\n        serializedName: \"Expiry\",\n        required: true,\n        xmlName: \"Expiry\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const UserDelegationKey: coreHttp.CompositeMapper = {\n  serializedName: \"UserDelegationKey\",\n  type: {\n    name: \"Composite\",\n    className: \"UserDelegationKey\",\n    modelProperties: {\n      signedObjectId: {\n        serializedName: \"SignedOid\",\n        required: true,\n        xmlName: \"SignedOid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signedTenantId: {\n        serializedName: \"SignedTid\",\n        required: true,\n        xmlName: \"SignedTid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signedStartsOn: {\n        serializedName: \"SignedStart\",\n        required: true,\n        xmlName: \"SignedStart\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signedExpiresOn: {\n        serializedName: \"SignedExpiry\",\n        required: true,\n        xmlName: \"SignedExpiry\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signedService: {\n        serializedName: \"SignedService\",\n        required: true,\n        xmlName: \"SignedService\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signedVersion: {\n        serializedName: \"SignedVersion\",\n        required: true,\n        xmlName: \"SignedVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"Value\",\n        required: true,\n        xmlName: \"Value\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FilterBlobSegment: coreHttp.CompositeMapper = {\n  serializedName: \"FilterBlobSegment\",\n  xmlName: \"EnumerationResults\",\n  type: {\n    name: \"Composite\",\n    className: \"FilterBlobSegment\",\n    modelProperties: {\n      serviceEndpoint: {\n        serializedName: \"ServiceEndpoint\",\n        required: true,\n        xmlName: \"ServiceEndpoint\",\n        xmlIsAttribute: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      where: {\n        serializedName: \"Where\",\n        required: true,\n        xmlName: \"Where\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobs: {\n        serializedName: \"Blobs\",\n        required: true,\n        xmlName: \"Blobs\",\n        xmlIsWrapped: true,\n        xmlElementName: \"Blob\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"FilterBlobItem\"\n            }\n          }\n        }\n      },\n      continuationToken: {\n        serializedName: \"NextMarker\",\n        xmlName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FilterBlobItem: coreHttp.CompositeMapper = {\n  serializedName: \"FilterBlobItem\",\n  xmlName: \"Blob\",\n  type: {\n    name: \"Composite\",\n    className: \"FilterBlobItem\",\n    modelProperties: {\n      name: {\n        serializedName: \"Name\",\n        required: true,\n        xmlName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      containerName: {\n        serializedName: \"ContainerName\",\n        required: true,\n        xmlName: \"ContainerName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"Tags\",\n        xmlName: \"Tags\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobTags\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobTags: coreHttp.CompositeMapper = {\n  serializedName: \"BlobTags\",\n  xmlName: \"Tags\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobTags\",\n    modelProperties: {\n      blobTagSet: {\n        serializedName: \"BlobTagSet\",\n        required: true,\n        xmlName: \"TagSet\",\n        xmlIsWrapped: true,\n        xmlElementName: \"Tag\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BlobTag\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const BlobTag: coreHttp.CompositeMapper = {\n  serializedName: \"BlobTag\",\n  xmlName: \"Tag\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobTag\",\n    modelProperties: {\n      key: {\n        serializedName: \"Key\",\n        required: true,\n        xmlName: \"Key\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"Value\",\n        required: true,\n        xmlName: \"Value\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SignedIdentifier: coreHttp.CompositeMapper = {\n  serializedName: \"SignedIdentifier\",\n  xmlName: \"SignedIdentifier\",\n  type: {\n    name: \"Composite\",\n    className: \"SignedIdentifier\",\n    modelProperties: {\n      id: {\n        serializedName: \"Id\",\n        required: true,\n        xmlName: \"Id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessPolicy: {\n        serializedName: \"AccessPolicy\",\n        xmlName: \"AccessPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"AccessPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const AccessPolicy: coreHttp.CompositeMapper = {\n  serializedName: \"AccessPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"AccessPolicy\",\n    modelProperties: {\n      startsOn: {\n        serializedName: \"Start\",\n        xmlName: \"Start\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expiresOn: {\n        serializedName: \"Expiry\",\n        xmlName: \"Expiry\",\n        type: {\n          name: \"String\"\n        }\n      },\n      permissions: {\n        serializedName: \"Permission\",\n        xmlName: \"Permission\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ListBlobsFlatSegmentResponse: coreHttp.CompositeMapper = {\n  serializedName: \"ListBlobsFlatSegmentResponse\",\n  xmlName: \"EnumerationResults\",\n  type: {\n    name: \"Composite\",\n    className: \"ListBlobsFlatSegmentResponse\",\n    modelProperties: {\n      serviceEndpoint: {\n        serializedName: \"ServiceEndpoint\",\n        required: true,\n        xmlName: \"ServiceEndpoint\",\n        xmlIsAttribute: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      containerName: {\n        serializedName: \"ContainerName\",\n        required: true,\n        xmlName: \"ContainerName\",\n        xmlIsAttribute: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        serializedName: \"Prefix\",\n        xmlName: \"Prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      marker: {\n        serializedName: \"Marker\",\n        xmlName: \"Marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxPageSize: {\n        serializedName: \"MaxResults\",\n        xmlName: \"MaxResults\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      segment: {\n        serializedName: \"Segment\",\n        xmlName: \"Blobs\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobFlatListSegment\"\n        }\n      },\n      continuationToken: {\n        serializedName: \"NextMarker\",\n        xmlName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobFlatListSegment: coreHttp.CompositeMapper = {\n  serializedName: \"BlobFlatListSegment\",\n  xmlName: \"Blobs\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobFlatListSegment\",\n    modelProperties: {\n      blobItems: {\n        serializedName: \"BlobItems\",\n        required: true,\n        xmlName: \"BlobItems\",\n        xmlElementName: \"Blob\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BlobItemInternal\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const BlobItemInternal: coreHttp.CompositeMapper = {\n  serializedName: \"BlobItemInternal\",\n  xmlName: \"Blob\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobItemInternal\",\n    modelProperties: {\n      name: {\n        serializedName: \"Name\",\n        xmlName: \"Name\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobName\"\n        }\n      },\n      deleted: {\n        serializedName: \"Deleted\",\n        required: true,\n        xmlName: \"Deleted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      snapshot: {\n        serializedName: \"Snapshot\",\n        required: true,\n        xmlName: \"Snapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      versionId: {\n        serializedName: \"VersionId\",\n        xmlName: \"VersionId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isCurrentVersion: {\n        serializedName: \"IsCurrentVersion\",\n        xmlName: \"IsCurrentVersion\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      properties: {\n        serializedName: \"Properties\",\n        xmlName: \"Properties\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobPropertiesInternal\"\n        }\n      },\n      metadata: {\n        serializedName: \"Metadata\",\n        xmlName: \"Metadata\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      blobTags: {\n        serializedName: \"BlobTags\",\n        xmlName: \"Tags\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobTags\"\n        }\n      },\n      objectReplicationMetadata: {\n        serializedName: \"ObjectReplicationMetadata\",\n        xmlName: \"OrMetadata\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      hasVersionsOnly: {\n        serializedName: \"HasVersionsOnly\",\n        xmlName: \"HasVersionsOnly\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobName: coreHttp.CompositeMapper = {\n  serializedName: \"BlobName\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobName\",\n    modelProperties: {\n      encoded: {\n        serializedName: \"Encoded\",\n        xmlName: \"Encoded\",\n        xmlIsAttribute: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      content: {\n        serializedName: \"content\",\n        xmlName: \"content\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobPropertiesInternal: coreHttp.CompositeMapper = {\n  serializedName: \"BlobPropertiesInternal\",\n  xmlName: \"Properties\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobPropertiesInternal\",\n    modelProperties: {\n      createdOn: {\n        serializedName: \"Creation-Time\",\n        xmlName: \"Creation-Time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      lastModified: {\n        serializedName: \"Last-Modified\",\n        required: true,\n        xmlName: \"Last-Modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"Etag\",\n        required: true,\n        xmlName: \"Etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLength: {\n        serializedName: \"Content-Length\",\n        xmlName: \"Content-Length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentType: {\n        serializedName: \"Content-Type\",\n        xmlName: \"Content-Type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentEncoding: {\n        serializedName: \"Content-Encoding\",\n        xmlName: \"Content-Encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        serializedName: \"Content-Language\",\n        xmlName: \"Content-Language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"Content-MD5\",\n        xmlName: \"Content-MD5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentDisposition: {\n        serializedName: \"Content-Disposition\",\n        xmlName: \"Content-Disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        serializedName: \"Cache-Control\",\n        xmlName: \"Cache-Control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      blobType: {\n        serializedName: \"BlobType\",\n        xmlName: \"BlobType\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"]\n        }\n      },\n      leaseStatus: {\n        serializedName: \"LeaseStatus\",\n        xmlName: \"LeaseStatus\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"locked\", \"unlocked\"]\n        }\n      },\n      leaseState: {\n        serializedName: \"LeaseState\",\n        xmlName: \"LeaseState\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseDuration: {\n        serializedName: \"LeaseDuration\",\n        xmlName: \"LeaseDuration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"infinite\", \"fixed\"]\n        }\n      },\n      copyId: {\n        serializedName: \"CopyId\",\n        xmlName: \"CopyId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"CopyStatus\",\n        xmlName: \"CopyStatus\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"]\n        }\n      },\n      copySource: {\n        serializedName: \"CopySource\",\n        xmlName: \"CopySource\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyProgress: {\n        serializedName: \"CopyProgress\",\n        xmlName: \"CopyProgress\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyCompletedOn: {\n        serializedName: \"CopyCompletionTime\",\n        xmlName: \"CopyCompletionTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyStatusDescription: {\n        serializedName: \"CopyStatusDescription\",\n        xmlName: \"CopyStatusDescription\",\n        type: {\n          name: \"String\"\n        }\n      },\n      serverEncrypted: {\n        serializedName: \"ServerEncrypted\",\n        xmlName: \"ServerEncrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      incrementalCopy: {\n        serializedName: \"IncrementalCopy\",\n        xmlName: \"IncrementalCopy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      destinationSnapshot: {\n        serializedName: \"DestinationSnapshot\",\n        xmlName: \"DestinationSnapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deletedOn: {\n        serializedName: \"DeletedTime\",\n        xmlName: \"DeletedTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      remainingRetentionDays: {\n        serializedName: \"RemainingRetentionDays\",\n        xmlName: \"RemainingRetentionDays\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      accessTier: {\n        serializedName: \"AccessTier\",\n        xmlName: \"AccessTier\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"P4\",\n            \"P6\",\n            \"P10\",\n            \"P15\",\n            \"P20\",\n            \"P30\",\n            \"P40\",\n            \"P50\",\n            \"P60\",\n            \"P70\",\n            \"P80\",\n            \"Hot\",\n            \"Cool\",\n            \"Archive\"\n          ]\n        }\n      },\n      accessTierInferred: {\n        serializedName: \"AccessTierInferred\",\n        xmlName: \"AccessTierInferred\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      archiveStatus: {\n        serializedName: \"ArchiveStatus\",\n        xmlName: \"ArchiveStatus\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"rehydrate-pending-to-hot\",\n            \"rehydrate-pending-to-cool\"\n          ]\n        }\n      },\n      customerProvidedKeySha256: {\n        serializedName: \"CustomerProvidedKeySha256\",\n        xmlName: \"CustomerProvidedKeySha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"EncryptionScope\",\n        xmlName: \"EncryptionScope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessTierChangedOn: {\n        serializedName: \"AccessTierChangeTime\",\n        xmlName: \"AccessTierChangeTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      tagCount: {\n        serializedName: \"TagCount\",\n        xmlName: \"TagCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      expiresOn: {\n        serializedName: \"Expiry-Time\",\n        xmlName: \"Expiry-Time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isSealed: {\n        serializedName: \"Sealed\",\n        xmlName: \"Sealed\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      rehydratePriority: {\n        serializedName: \"RehydratePriority\",\n        xmlName: \"RehydratePriority\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"High\", \"Standard\"]\n        }\n      },\n      lastAccessedOn: {\n        serializedName: \"LastAccessTime\",\n        xmlName: \"LastAccessTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      immutabilityPolicyExpiresOn: {\n        serializedName: \"ImmutabilityPolicyUntilDate\",\n        xmlName: \"ImmutabilityPolicyUntilDate\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      immutabilityPolicyMode: {\n        serializedName: \"ImmutabilityPolicyMode\",\n        xmlName: \"ImmutabilityPolicyMode\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"]\n        }\n      },\n      legalHold: {\n        serializedName: \"LegalHold\",\n        xmlName: \"LegalHold\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ListBlobsHierarchySegmentResponse: coreHttp.CompositeMapper = {\n  serializedName: \"ListBlobsHierarchySegmentResponse\",\n  xmlName: \"EnumerationResults\",\n  type: {\n    name: \"Composite\",\n    className: \"ListBlobsHierarchySegmentResponse\",\n    modelProperties: {\n      serviceEndpoint: {\n        serializedName: \"ServiceEndpoint\",\n        required: true,\n        xmlName: \"ServiceEndpoint\",\n        xmlIsAttribute: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      containerName: {\n        serializedName: \"ContainerName\",\n        required: true,\n        xmlName: \"ContainerName\",\n        xmlIsAttribute: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        serializedName: \"Prefix\",\n        xmlName: \"Prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      marker: {\n        serializedName: \"Marker\",\n        xmlName: \"Marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxPageSize: {\n        serializedName: \"MaxResults\",\n        xmlName: \"MaxResults\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      delimiter: {\n        serializedName: \"Delimiter\",\n        xmlName: \"Delimiter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      segment: {\n        serializedName: \"Segment\",\n        xmlName: \"Blobs\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobHierarchyListSegment\"\n        }\n      },\n      continuationToken: {\n        serializedName: \"NextMarker\",\n        xmlName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobHierarchyListSegment: coreHttp.CompositeMapper = {\n  serializedName: \"BlobHierarchyListSegment\",\n  xmlName: \"Blobs\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobHierarchyListSegment\",\n    modelProperties: {\n      blobPrefixes: {\n        serializedName: \"BlobPrefixes\",\n        xmlName: \"BlobPrefixes\",\n        xmlElementName: \"BlobPrefix\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BlobPrefix\"\n            }\n          }\n        }\n      },\n      blobItems: {\n        serializedName: \"BlobItems\",\n        required: true,\n        xmlName: \"BlobItems\",\n        xmlElementName: \"Blob\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BlobItemInternal\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const BlobPrefix: coreHttp.CompositeMapper = {\n  serializedName: \"BlobPrefix\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobPrefix\",\n    modelProperties: {\n      name: {\n        serializedName: \"Name\",\n        xmlName: \"Name\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobName\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockLookupList: coreHttp.CompositeMapper = {\n  serializedName: \"BlockLookupList\",\n  xmlName: \"BlockList\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockLookupList\",\n    modelProperties: {\n      committed: {\n        serializedName: \"Committed\",\n        xmlName: \"Committed\",\n        xmlElementName: \"Committed\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      uncommitted: {\n        serializedName: \"Uncommitted\",\n        xmlName: \"Uncommitted\",\n        xmlElementName: \"Uncommitted\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      latest: {\n        serializedName: \"Latest\",\n        xmlName: \"Latest\",\n        xmlElementName: \"Latest\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const BlockList: coreHttp.CompositeMapper = {\n  serializedName: \"BlockList\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockList\",\n    modelProperties: {\n      committedBlocks: {\n        serializedName: \"CommittedBlocks\",\n        xmlName: \"CommittedBlocks\",\n        xmlIsWrapped: true,\n        xmlElementName: \"Block\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Block\"\n            }\n          }\n        }\n      },\n      uncommittedBlocks: {\n        serializedName: \"UncommittedBlocks\",\n        xmlName: \"UncommittedBlocks\",\n        xmlIsWrapped: true,\n        xmlElementName: \"Block\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Block\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Block: coreHttp.CompositeMapper = {\n  serializedName: \"Block\",\n  type: {\n    name: \"Composite\",\n    className: \"Block\",\n    modelProperties: {\n      name: {\n        serializedName: \"Name\",\n        required: true,\n        xmlName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      size: {\n        serializedName: \"Size\",\n        required: true,\n        xmlName: \"Size\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageList: coreHttp.CompositeMapper = {\n  serializedName: \"PageList\",\n  type: {\n    name: \"Composite\",\n    className: \"PageList\",\n    modelProperties: {\n      pageRange: {\n        serializedName: \"PageRange\",\n        xmlName: \"PageRange\",\n        xmlElementName: \"PageRange\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PageRange\"\n            }\n          }\n        }\n      },\n      clearRange: {\n        serializedName: \"ClearRange\",\n        xmlName: \"ClearRange\",\n        xmlElementName: \"ClearRange\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ClearRange\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PageRange: coreHttp.CompositeMapper = {\n  serializedName: \"PageRange\",\n  xmlName: \"PageRange\",\n  type: {\n    name: \"Composite\",\n    className: \"PageRange\",\n    modelProperties: {\n      start: {\n        serializedName: \"Start\",\n        required: true,\n        xmlName: \"Start\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      end: {\n        serializedName: \"End\",\n        required: true,\n        xmlName: \"End\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ClearRange: coreHttp.CompositeMapper = {\n  serializedName: \"ClearRange\",\n  xmlName: \"ClearRange\",\n  type: {\n    name: \"Composite\",\n    className: \"ClearRange\",\n    modelProperties: {\n      start: {\n        serializedName: \"Start\",\n        required: true,\n        xmlName: \"Start\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      end: {\n        serializedName: \"End\",\n        required: true,\n        xmlName: \"End\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueryRequest: coreHttp.CompositeMapper = {\n  serializedName: \"QueryRequest\",\n  xmlName: \"QueryRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"QueryRequest\",\n    modelProperties: {\n      queryType: {\n        serializedName: \"QueryType\",\n        required: true,\n        xmlName: \"QueryType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expression: {\n        serializedName: \"Expression\",\n        required: true,\n        xmlName: \"Expression\",\n        type: {\n          name: \"String\"\n        }\n      },\n      inputSerialization: {\n        serializedName: \"InputSerialization\",\n        xmlName: \"InputSerialization\",\n        type: {\n          name: \"Composite\",\n          className: \"QuerySerialization\"\n        }\n      },\n      outputSerialization: {\n        serializedName: \"OutputSerialization\",\n        xmlName: \"OutputSerialization\",\n        type: {\n          name: \"Composite\",\n          className: \"QuerySerialization\"\n        }\n      }\n    }\n  }\n};\n\nexport const QuerySerialization: coreHttp.CompositeMapper = {\n  serializedName: \"QuerySerialization\",\n  type: {\n    name: \"Composite\",\n    className: \"QuerySerialization\",\n    modelProperties: {\n      format: {\n        serializedName: \"Format\",\n        xmlName: \"Format\",\n        type: {\n          name: \"Composite\",\n          className: \"QueryFormat\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueryFormat: coreHttp.CompositeMapper = {\n  serializedName: \"QueryFormat\",\n  type: {\n    name: \"Composite\",\n    className: \"QueryFormat\",\n    modelProperties: {\n      type: {\n        serializedName: \"Type\",\n        required: true,\n        xmlName: \"Type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delimited\", \"json\", \"arrow\", \"parquet\"]\n        }\n      },\n      delimitedTextConfiguration: {\n        serializedName: \"DelimitedTextConfiguration\",\n        xmlName: \"DelimitedTextConfiguration\",\n        type: {\n          name: \"Composite\",\n          className: \"DelimitedTextConfiguration\"\n        }\n      },\n      jsonTextConfiguration: {\n        serializedName: \"JsonTextConfiguration\",\n        xmlName: \"JsonTextConfiguration\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonTextConfiguration\"\n        }\n      },\n      arrowConfiguration: {\n        serializedName: \"ArrowConfiguration\",\n        xmlName: \"ArrowConfiguration\",\n        type: {\n          name: \"Composite\",\n          className: \"ArrowConfiguration\"\n        }\n      },\n      parquetTextConfiguration: {\n        serializedName: \"ParquetTextConfiguration\",\n        xmlName: \"ParquetTextConfiguration\",\n        type: {\n          name: \"any\"\n        }\n      }\n    }\n  }\n};\n\nexport const DelimitedTextConfiguration: coreHttp.CompositeMapper = {\n  serializedName: \"DelimitedTextConfiguration\",\n  xmlName: \"DelimitedTextConfiguration\",\n  type: {\n    name: \"Composite\",\n    className: \"DelimitedTextConfiguration\",\n    modelProperties: {\n      columnSeparator: {\n        serializedName: \"ColumnSeparator\",\n        xmlName: \"ColumnSeparator\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fieldQuote: {\n        serializedName: \"FieldQuote\",\n        xmlName: \"FieldQuote\",\n        type: {\n          name: \"String\"\n        }\n      },\n      recordSeparator: {\n        serializedName: \"RecordSeparator\",\n        xmlName: \"RecordSeparator\",\n        type: {\n          name: \"String\"\n        }\n      },\n      escapeChar: {\n        serializedName: \"EscapeChar\",\n        xmlName: \"EscapeChar\",\n        type: {\n          name: \"String\"\n        }\n      },\n      headersPresent: {\n        serializedName: \"HeadersPresent\",\n        xmlName: \"HasHeaders\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const JsonTextConfiguration: coreHttp.CompositeMapper = {\n  serializedName: \"JsonTextConfiguration\",\n  xmlName: \"JsonTextConfiguration\",\n  type: {\n    name: \"Composite\",\n    className: \"JsonTextConfiguration\",\n    modelProperties: {\n      recordSeparator: {\n        serializedName: \"RecordSeparator\",\n        xmlName: \"RecordSeparator\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ArrowConfiguration: coreHttp.CompositeMapper = {\n  serializedName: \"ArrowConfiguration\",\n  xmlName: \"ArrowConfiguration\",\n  type: {\n    name: \"Composite\",\n    className: \"ArrowConfiguration\",\n    modelProperties: {\n      schema: {\n        serializedName: \"Schema\",\n        required: true,\n        xmlName: \"Schema\",\n        xmlIsWrapped: true,\n        xmlElementName: \"Field\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ArrowField\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ArrowField: coreHttp.CompositeMapper = {\n  serializedName: \"ArrowField\",\n  xmlName: \"Field\",\n  type: {\n    name: \"Composite\",\n    className: \"ArrowField\",\n    modelProperties: {\n      type: {\n        serializedName: \"Type\",\n        required: true,\n        xmlName: \"Type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"Name\",\n        xmlName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      precision: {\n        serializedName: \"Precision\",\n        xmlName: \"Precision\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      scale: {\n        serializedName: \"Scale\",\n        xmlName: \"Scale\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceSetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_setPropertiesHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceSetPropertiesHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceSetPropertiesExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_setPropertiesExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceSetPropertiesExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_getPropertiesHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetPropertiesHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetPropertiesExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_getPropertiesExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetPropertiesExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetStatisticsHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_getStatisticsHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetStatisticsHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetStatisticsExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_getStatisticsExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetStatisticsExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceListContainersSegmentHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_listContainersSegmentHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceListContainersSegmentHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceListContainersSegmentExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_listContainersSegmentExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceListContainersSegmentExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetUserDelegationKeyHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_getUserDelegationKeyHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetUserDelegationKeyHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetUserDelegationKeyExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_getUserDelegationKeyExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetUserDelegationKeyExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetAccountInfoHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_getAccountInfoHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetAccountInfoHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      skuName: {\n        serializedName: \"x-ms-sku-name\",\n        xmlName: \"x-ms-sku-name\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Standard_LRS\",\n            \"Standard_GRS\",\n            \"Standard_RAGRS\",\n            \"Standard_ZRS\",\n            \"Premium_LRS\"\n          ]\n        }\n      },\n      accountKind: {\n        serializedName: \"x-ms-account-kind\",\n        xmlName: \"x-ms-account-kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Storage\",\n            \"BlobStorage\",\n            \"StorageV2\",\n            \"FileStorage\",\n            \"BlockBlobStorage\"\n          ]\n        }\n      },\n      isHierarchicalNamespaceEnabled: {\n        serializedName: \"x-ms-is-hns-enabled\",\n        xmlName: \"x-ms-is-hns-enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetAccountInfoExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_getAccountInfoExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetAccountInfoExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceSubmitBatchHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_submitBatchHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceSubmitBatchHeaders\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"content-type\",\n        xmlName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceSubmitBatchExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_submitBatchExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceSubmitBatchExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceFilterBlobsHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_filterBlobsHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceFilterBlobsHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceFilterBlobsExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_filterBlobsExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceFilterBlobsExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerCreateHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_createHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerCreateHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerCreateExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_createExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerCreateExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerGetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_getPropertiesHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerGetPropertiesHeaders\",\n    modelProperties: {\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        xmlName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        },\n        headerCollectionPrefix: \"x-ms-meta-\"\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseDuration: {\n        serializedName: \"x-ms-lease-duration\",\n        xmlName: \"x-ms-lease-duration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"infinite\", \"fixed\"]\n        }\n      },\n      leaseState: {\n        serializedName: \"x-ms-lease-state\",\n        xmlName: \"x-ms-lease-state\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseStatus: {\n        serializedName: \"x-ms-lease-status\",\n        xmlName: \"x-ms-lease-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"locked\", \"unlocked\"]\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobPublicAccess: {\n        serializedName: \"x-ms-blob-public-access\",\n        xmlName: \"x-ms-blob-public-access\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"container\", \"blob\"]\n        }\n      },\n      hasImmutabilityPolicy: {\n        serializedName: \"x-ms-has-immutability-policy\",\n        xmlName: \"x-ms-has-immutability-policy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      hasLegalHold: {\n        serializedName: \"x-ms-has-legal-hold\",\n        xmlName: \"x-ms-has-legal-hold\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      defaultEncryptionScope: {\n        serializedName: \"x-ms-default-encryption-scope\",\n        xmlName: \"x-ms-default-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      denyEncryptionScopeOverride: {\n        serializedName: \"x-ms-deny-encryption-scope-override\",\n        xmlName: \"x-ms-deny-encryption-scope-override\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      isImmutableStorageWithVersioningEnabled: {\n        serializedName: \"x-ms-immutable-storage-with-versioning-enabled\",\n        xmlName: \"x-ms-immutable-storage-with-versioning-enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerGetPropertiesExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_getPropertiesExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerGetPropertiesExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerDeleteHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_deleteHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerDeleteHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerDeleteExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_deleteExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerDeleteExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerSetMetadataHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_setMetadataHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerSetMetadataHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerSetMetadataExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_setMetadataExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerSetMetadataExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerGetAccessPolicyHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_getAccessPolicyHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerGetAccessPolicyHeaders\",\n    modelProperties: {\n      blobPublicAccess: {\n        serializedName: \"x-ms-blob-public-access\",\n        xmlName: \"x-ms-blob-public-access\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"container\", \"blob\"]\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerGetAccessPolicyExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_getAccessPolicyExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerGetAccessPolicyExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerSetAccessPolicyHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_setAccessPolicyHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerSetAccessPolicyHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerSetAccessPolicyExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_setAccessPolicyExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerSetAccessPolicyExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRestoreHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_restoreHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRestoreHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRestoreExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_restoreExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRestoreExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRenameHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_renameHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRenameHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRenameExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_renameExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRenameExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerSubmitBatchHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_submitBatchHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerSubmitBatchHeaders\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"content-type\",\n        xmlName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerSubmitBatchExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_submitBatchExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerSubmitBatchExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerFilterBlobsHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_filterBlobsHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerFilterBlobsHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerFilterBlobsExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_filterBlobsExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerFilterBlobsExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerAcquireLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_acquireLeaseHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerAcquireLeaseHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        xmlName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerAcquireLeaseExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_acquireLeaseExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerAcquireLeaseExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerReleaseLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_releaseLeaseHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerReleaseLeaseHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerReleaseLeaseExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_releaseLeaseExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerReleaseLeaseExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRenewLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_renewLeaseHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRenewLeaseHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        xmlName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRenewLeaseExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_renewLeaseExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRenewLeaseExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerBreakLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_breakLeaseHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerBreakLeaseHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseTime: {\n        serializedName: \"x-ms-lease-time\",\n        xmlName: \"x-ms-lease-time\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerBreakLeaseExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_breakLeaseExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerBreakLeaseExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerChangeLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_changeLeaseHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerChangeLeaseHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        xmlName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerChangeLeaseExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_changeLeaseExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerChangeLeaseExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerListBlobFlatSegmentHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_listBlobFlatSegmentHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerListBlobFlatSegmentHeaders\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"content-type\",\n        xmlName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerListBlobFlatSegmentExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_listBlobFlatSegmentExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerListBlobFlatSegmentExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerListBlobHierarchySegmentHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_listBlobHierarchySegmentHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerListBlobHierarchySegmentHeaders\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"content-type\",\n        xmlName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerListBlobHierarchySegmentExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_listBlobHierarchySegmentExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerListBlobHierarchySegmentExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerGetAccountInfoHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_getAccountInfoHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerGetAccountInfoHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      skuName: {\n        serializedName: \"x-ms-sku-name\",\n        xmlName: \"x-ms-sku-name\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Standard_LRS\",\n            \"Standard_GRS\",\n            \"Standard_RAGRS\",\n            \"Standard_ZRS\",\n            \"Premium_LRS\"\n          ]\n        }\n      },\n      accountKind: {\n        serializedName: \"x-ms-account-kind\",\n        xmlName: \"x-ms-account-kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Storage\",\n            \"BlobStorage\",\n            \"StorageV2\",\n            \"FileStorage\",\n            \"BlockBlobStorage\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerGetAccountInfoExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Container_getAccountInfoExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerGetAccountInfoExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobDownloadHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_downloadHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobDownloadHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        xmlName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        },\n        headerCollectionPrefix: \"x-ms-meta-\"\n      },\n      objectReplicationPolicyId: {\n        serializedName: \"x-ms-or-policy-id\",\n        xmlName: \"x-ms-or-policy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      objectReplicationRules: {\n        serializedName: \"x-ms-or\",\n        xmlName: \"x-ms-or\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        },\n        headerCollectionPrefix: \"x-ms-or-\"\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        xmlName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        xmlName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentRange: {\n        serializedName: \"content-range\",\n        xmlName: \"content-range\",\n        type: {\n          name: \"String\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentEncoding: {\n        serializedName: \"content-encoding\",\n        xmlName: \"content-encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        serializedName: \"cache-control\",\n        xmlName: \"cache-control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentDisposition: {\n        serializedName: \"content-disposition\",\n        xmlName: \"content-disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        serializedName: \"content-language\",\n        xmlName: \"content-language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      blobType: {\n        serializedName: \"x-ms-blob-type\",\n        xmlName: \"x-ms-blob-type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"]\n        }\n      },\n      copyCompletedOn: {\n        serializedName: \"x-ms-copy-completion-time\",\n        xmlName: \"x-ms-copy-completion-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyStatusDescription: {\n        serializedName: \"x-ms-copy-status-description\",\n        xmlName: \"x-ms-copy-status-description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        xmlName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyProgress: {\n        serializedName: \"x-ms-copy-progress\",\n        xmlName: \"x-ms-copy-progress\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copySource: {\n        serializedName: \"x-ms-copy-source\",\n        xmlName: \"x-ms-copy-source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        xmlName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"]\n        }\n      },\n      leaseDuration: {\n        serializedName: \"x-ms-lease-duration\",\n        xmlName: \"x-ms-lease-duration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"infinite\", \"fixed\"]\n        }\n      },\n      leaseState: {\n        serializedName: \"x-ms-lease-state\",\n        xmlName: \"x-ms-lease-state\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseStatus: {\n        serializedName: \"x-ms-lease-status\",\n        xmlName: \"x-ms-lease-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"locked\", \"unlocked\"]\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      versionId: {\n        serializedName: \"x-ms-version-id\",\n        xmlName: \"x-ms-version-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isCurrentVersion: {\n        serializedName: \"x-ms-is-current-version\",\n        xmlName: \"x-ms-is-current-version\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      acceptRanges: {\n        serializedName: \"accept-ranges\",\n        xmlName: \"accept-ranges\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobCommittedBlockCount: {\n        serializedName: \"x-ms-blob-committed-block-count\",\n        xmlName: \"x-ms-blob-committed-block-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-server-encrypted\",\n        xmlName: \"x-ms-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentMD5: {\n        serializedName: \"x-ms-blob-content-md5\",\n        xmlName: \"x-ms-blob-content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      tagCount: {\n        serializedName: \"x-ms-tag-count\",\n        xmlName: \"x-ms-tag-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isSealed: {\n        serializedName: \"x-ms-blob-sealed\",\n        xmlName: \"x-ms-blob-sealed\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      lastAccessed: {\n        serializedName: \"x-ms-last-access-time\",\n        xmlName: \"x-ms-last-access-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      immutabilityPolicyExpiresOn: {\n        serializedName: \"x-ms-immutability-policy-until-date\",\n        xmlName: \"x-ms-immutability-policy-until-date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      immutabilityPolicyMode: {\n        serializedName: \"x-ms-immutability-policy-mode\",\n        xmlName: \"x-ms-immutability-policy-mode\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"]\n        }\n      },\n      legalHold: {\n        serializedName: \"x-ms-legal-hold\",\n        xmlName: \"x-ms-legal-hold\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentCrc64: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobDownloadExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_downloadExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobDownloadExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobGetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_getPropertiesHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobGetPropertiesHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      createdOn: {\n        serializedName: \"x-ms-creation-time\",\n        xmlName: \"x-ms-creation-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        xmlName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        },\n        headerCollectionPrefix: \"x-ms-meta-\"\n      },\n      objectReplicationPolicyId: {\n        serializedName: \"x-ms-or-policy-id\",\n        xmlName: \"x-ms-or-policy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      objectReplicationRules: {\n        serializedName: \"x-ms-or\",\n        xmlName: \"x-ms-or\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        },\n        headerCollectionPrefix: \"x-ms-or-\"\n      },\n      blobType: {\n        serializedName: \"x-ms-blob-type\",\n        xmlName: \"x-ms-blob-type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"]\n        }\n      },\n      copyCompletedOn: {\n        serializedName: \"x-ms-copy-completion-time\",\n        xmlName: \"x-ms-copy-completion-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyStatusDescription: {\n        serializedName: \"x-ms-copy-status-description\",\n        xmlName: \"x-ms-copy-status-description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        xmlName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyProgress: {\n        serializedName: \"x-ms-copy-progress\",\n        xmlName: \"x-ms-copy-progress\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copySource: {\n        serializedName: \"x-ms-copy-source\",\n        xmlName: \"x-ms-copy-source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        xmlName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"]\n        }\n      },\n      isIncrementalCopy: {\n        serializedName: \"x-ms-incremental-copy\",\n        xmlName: \"x-ms-incremental-copy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      destinationSnapshot: {\n        serializedName: \"x-ms-copy-destination-snapshot\",\n        xmlName: \"x-ms-copy-destination-snapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseDuration: {\n        serializedName: \"x-ms-lease-duration\",\n        xmlName: \"x-ms-lease-duration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"infinite\", \"fixed\"]\n        }\n      },\n      leaseState: {\n        serializedName: \"x-ms-lease-state\",\n        xmlName: \"x-ms-lease-state\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseStatus: {\n        serializedName: \"x-ms-lease-status\",\n        xmlName: \"x-ms-lease-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"locked\", \"unlocked\"]\n        }\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        xmlName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        xmlName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentEncoding: {\n        serializedName: \"content-encoding\",\n        xmlName: \"content-encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentDisposition: {\n        serializedName: \"content-disposition\",\n        xmlName: \"content-disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        serializedName: \"content-language\",\n        xmlName: \"content-language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        serializedName: \"cache-control\",\n        xmlName: \"cache-control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      acceptRanges: {\n        serializedName: \"accept-ranges\",\n        xmlName: \"accept-ranges\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobCommittedBlockCount: {\n        serializedName: \"x-ms-blob-committed-block-count\",\n        xmlName: \"x-ms-blob-committed-block-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-server-encrypted\",\n        xmlName: \"x-ms-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessTier: {\n        serializedName: \"x-ms-access-tier\",\n        xmlName: \"x-ms-access-tier\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessTierInferred: {\n        serializedName: \"x-ms-access-tier-inferred\",\n        xmlName: \"x-ms-access-tier-inferred\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      archiveStatus: {\n        serializedName: \"x-ms-archive-status\",\n        xmlName: \"x-ms-archive-status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessTierChangedOn: {\n        serializedName: \"x-ms-access-tier-change-time\",\n        xmlName: \"x-ms-access-tier-change-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      versionId: {\n        serializedName: \"x-ms-version-id\",\n        xmlName: \"x-ms-version-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isCurrentVersion: {\n        serializedName: \"x-ms-is-current-version\",\n        xmlName: \"x-ms-is-current-version\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      tagCount: {\n        serializedName: \"x-ms-tag-count\",\n        xmlName: \"x-ms-tag-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      expiresOn: {\n        serializedName: \"x-ms-expiry-time\",\n        xmlName: \"x-ms-expiry-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isSealed: {\n        serializedName: \"x-ms-blob-sealed\",\n        xmlName: \"x-ms-blob-sealed\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      rehydratePriority: {\n        serializedName: \"x-ms-rehydrate-priority\",\n        xmlName: \"x-ms-rehydrate-priority\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"High\", \"Standard\"]\n        }\n      },\n      lastAccessed: {\n        serializedName: \"x-ms-last-access-time\",\n        xmlName: \"x-ms-last-access-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      immutabilityPolicyExpiresOn: {\n        serializedName: \"x-ms-immutability-policy-until-date\",\n        xmlName: \"x-ms-immutability-policy-until-date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      immutabilityPolicyMode: {\n        serializedName: \"x-ms-immutability-policy-mode\",\n        xmlName: \"x-ms-immutability-policy-mode\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"]\n        }\n      },\n      legalHold: {\n        serializedName: \"x-ms-legal-hold\",\n        xmlName: \"x-ms-legal-hold\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobGetPropertiesExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_getPropertiesExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobGetPropertiesExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobDeleteHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_deleteHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobDeleteHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobDeleteExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_deleteExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobDeleteExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobUndeleteHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_undeleteHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobUndeleteHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobUndeleteExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_undeleteExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobUndeleteExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetExpiryHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_setExpiryHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetExpiryHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetExpiryExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_setExpiryExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetExpiryExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetHttpHeadersHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_setHttpHeadersHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetHttpHeadersHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetHttpHeadersExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_setHttpHeadersExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetHttpHeadersExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetImmutabilityPolicyHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_setImmutabilityPolicyHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetImmutabilityPolicyHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      immutabilityPolicyExpiry: {\n        serializedName: \"x-ms-immutability-policy-until-date\",\n        xmlName: \"x-ms-immutability-policy-until-date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      immutabilityPolicyMode: {\n        serializedName: \"x-ms-immutability-policy-mode\",\n        xmlName: \"x-ms-immutability-policy-mode\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"]\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetImmutabilityPolicyExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_setImmutabilityPolicyExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetImmutabilityPolicyExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobDeleteImmutabilityPolicyHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_deleteImmutabilityPolicyHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobDeleteImmutabilityPolicyHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobDeleteImmutabilityPolicyExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_deleteImmutabilityPolicyExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobDeleteImmutabilityPolicyExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetLegalHoldHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_setLegalHoldHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetLegalHoldHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      legalHold: {\n        serializedName: \"x-ms-legal-hold\",\n        xmlName: \"x-ms-legal-hold\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetLegalHoldExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_setLegalHoldExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetLegalHoldExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetMetadataHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_setMetadataHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetMetadataHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      versionId: {\n        serializedName: \"x-ms-version-id\",\n        xmlName: \"x-ms-version-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        xmlName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetMetadataExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_setMetadataExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetMetadataExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobAcquireLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_acquireLeaseHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobAcquireLeaseHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        xmlName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobAcquireLeaseExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_acquireLeaseExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobAcquireLeaseExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobReleaseLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_releaseLeaseHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobReleaseLeaseHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobReleaseLeaseExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_releaseLeaseExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobReleaseLeaseExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobRenewLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_renewLeaseHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobRenewLeaseHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        xmlName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobRenewLeaseExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_renewLeaseExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobRenewLeaseExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobChangeLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_changeLeaseHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobChangeLeaseHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        xmlName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobChangeLeaseExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_changeLeaseExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobChangeLeaseExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobBreakLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_breakLeaseHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobBreakLeaseHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseTime: {\n        serializedName: \"x-ms-lease-time\",\n        xmlName: \"x-ms-lease-time\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobBreakLeaseExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_breakLeaseExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobBreakLeaseExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobCreateSnapshotHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_createSnapshotHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobCreateSnapshotHeaders\",\n    modelProperties: {\n      snapshot: {\n        serializedName: \"x-ms-snapshot\",\n        xmlName: \"x-ms-snapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      versionId: {\n        serializedName: \"x-ms-version-id\",\n        xmlName: \"x-ms-version-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        xmlName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobCreateSnapshotExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_createSnapshotExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobCreateSnapshotExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobStartCopyFromURLHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_startCopyFromURLHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobStartCopyFromURLHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      versionId: {\n        serializedName: \"x-ms-version-id\",\n        xmlName: \"x-ms-version-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        xmlName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        xmlName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"]\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobStartCopyFromURLExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_startCopyFromURLExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobStartCopyFromURLExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobCopyFromURLHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_copyFromURLHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobCopyFromURLHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      versionId: {\n        serializedName: \"x-ms-version-id\",\n        xmlName: \"x-ms-version-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        xmlName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        defaultValue: \"success\",\n        isConstant: true,\n        serializedName: \"x-ms-copy-status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      xMsContentCrc64: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobCopyFromURLExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_copyFromURLExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobCopyFromURLExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobAbortCopyFromURLHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_abortCopyFromURLHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobAbortCopyFromURLHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobAbortCopyFromURLExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_abortCopyFromURLExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobAbortCopyFromURLExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetTierHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_setTierHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetTierHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetTierExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_setTierExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetTierExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobGetAccountInfoHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_getAccountInfoHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobGetAccountInfoHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      skuName: {\n        serializedName: \"x-ms-sku-name\",\n        xmlName: \"x-ms-sku-name\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Standard_LRS\",\n            \"Standard_GRS\",\n            \"Standard_RAGRS\",\n            \"Standard_ZRS\",\n            \"Premium_LRS\"\n          ]\n        }\n      },\n      accountKind: {\n        serializedName: \"x-ms-account-kind\",\n        xmlName: \"x-ms-account-kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Storage\",\n            \"BlobStorage\",\n            \"StorageV2\",\n            \"FileStorage\",\n            \"BlockBlobStorage\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const BlobGetAccountInfoExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_getAccountInfoExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobGetAccountInfoExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobQueryHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_queryHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobQueryHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        xmlName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        xmlName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        xmlName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentRange: {\n        serializedName: \"content-range\",\n        xmlName: \"content-range\",\n        type: {\n          name: \"String\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentEncoding: {\n        serializedName: \"content-encoding\",\n        xmlName: \"content-encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        serializedName: \"cache-control\",\n        xmlName: \"cache-control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentDisposition: {\n        serializedName: \"content-disposition\",\n        xmlName: \"content-disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        serializedName: \"content-language\",\n        xmlName: \"content-language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      blobType: {\n        serializedName: \"x-ms-blob-type\",\n        xmlName: \"x-ms-blob-type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"]\n        }\n      },\n      copyCompletionTime: {\n        serializedName: \"x-ms-copy-completion-time\",\n        xmlName: \"x-ms-copy-completion-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyStatusDescription: {\n        serializedName: \"x-ms-copy-status-description\",\n        xmlName: \"x-ms-copy-status-description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        xmlName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyProgress: {\n        serializedName: \"x-ms-copy-progress\",\n        xmlName: \"x-ms-copy-progress\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copySource: {\n        serializedName: \"x-ms-copy-source\",\n        xmlName: \"x-ms-copy-source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        xmlName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"]\n        }\n      },\n      leaseDuration: {\n        serializedName: \"x-ms-lease-duration\",\n        xmlName: \"x-ms-lease-duration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"infinite\", \"fixed\"]\n        }\n      },\n      leaseState: {\n        serializedName: \"x-ms-lease-state\",\n        xmlName: \"x-ms-lease-state\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseStatus: {\n        serializedName: \"x-ms-lease-status\",\n        xmlName: \"x-ms-lease-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"locked\", \"unlocked\"]\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      acceptRanges: {\n        serializedName: \"accept-ranges\",\n        xmlName: \"accept-ranges\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobCommittedBlockCount: {\n        serializedName: \"x-ms-blob-committed-block-count\",\n        xmlName: \"x-ms-blob-committed-block-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-server-encrypted\",\n        xmlName: \"x-ms-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentMD5: {\n        serializedName: \"x-ms-blob-content-md5\",\n        xmlName: \"x-ms-blob-content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentCrc64: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobQueryExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_queryExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobQueryExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobGetTagsHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_getTagsHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobGetTagsHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobGetTagsExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_getTagsExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobGetTagsExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetTagsHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_setTagsHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetTagsHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetTagsExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Blob_setTagsExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetTagsExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobCreateHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_createHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobCreateHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      versionId: {\n        serializedName: \"x-ms-version-id\",\n        xmlName: \"x-ms-version-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        xmlName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobCreateExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_createExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobCreateExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobUploadPagesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_uploadPagesHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobUploadPagesHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      xMsContentCrc64: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        xmlName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobUploadPagesExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_uploadPagesExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobUploadPagesExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobClearPagesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_clearPagesHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobClearPagesHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      xMsContentCrc64: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobClearPagesExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_clearPagesExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobClearPagesExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobUploadPagesFromURLHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_uploadPagesFromURLHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobUploadPagesFromURLHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      xMsContentCrc64: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        xmlName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobUploadPagesFromURLExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_uploadPagesFromURLExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobUploadPagesFromURLExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobGetPageRangesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_getPageRangesHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobGetPageRangesHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentLength: {\n        serializedName: \"x-ms-blob-content-length\",\n        xmlName: \"x-ms-blob-content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobGetPageRangesExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_getPageRangesExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobGetPageRangesExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobGetPageRangesDiffHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_getPageRangesDiffHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobGetPageRangesDiffHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentLength: {\n        serializedName: \"x-ms-blob-content-length\",\n        xmlName: \"x-ms-blob-content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobGetPageRangesDiffExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_getPageRangesDiffExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobGetPageRangesDiffExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobResizeHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_resizeHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobResizeHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobResizeExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_resizeExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobResizeExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobUpdateSequenceNumberHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_updateSequenceNumberHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobUpdateSequenceNumberHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobUpdateSequenceNumberExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_updateSequenceNumberExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobUpdateSequenceNumberExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobCopyIncrementalHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_copyIncrementalHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobCopyIncrementalHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        xmlName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        xmlName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"]\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobCopyIncrementalExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"PageBlob_copyIncrementalExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobCopyIncrementalExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendBlobCreateHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"AppendBlob_createHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendBlobCreateHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      versionId: {\n        serializedName: \"x-ms-version-id\",\n        xmlName: \"x-ms-version-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        xmlName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendBlobCreateExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"AppendBlob_createExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendBlobCreateExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendBlobAppendBlockHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"AppendBlob_appendBlockHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendBlobAppendBlockHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      xMsContentCrc64: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobAppendOffset: {\n        serializedName: \"x-ms-blob-append-offset\",\n        xmlName: \"x-ms-blob-append-offset\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobCommittedBlockCount: {\n        serializedName: \"x-ms-blob-committed-block-count\",\n        xmlName: \"x-ms-blob-committed-block-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        xmlName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendBlobAppendBlockExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"AppendBlob_appendBlockExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendBlobAppendBlockExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendBlobAppendBlockFromUrlHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"AppendBlob_appendBlockFromUrlHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendBlobAppendBlockFromUrlHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      xMsContentCrc64: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobAppendOffset: {\n        serializedName: \"x-ms-blob-append-offset\",\n        xmlName: \"x-ms-blob-append-offset\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobCommittedBlockCount: {\n        serializedName: \"x-ms-blob-committed-block-count\",\n        xmlName: \"x-ms-blob-committed-block-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        xmlName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendBlobAppendBlockFromUrlExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"AppendBlob_appendBlockFromUrlExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendBlobAppendBlockFromUrlExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendBlobSealHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"AppendBlob_sealHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendBlobSealHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isSealed: {\n        serializedName: \"x-ms-blob-sealed\",\n        xmlName: \"x-ms-blob-sealed\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendBlobSealExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"AppendBlob_sealExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendBlobSealExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobUploadHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"BlockBlob_uploadHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobUploadHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      versionId: {\n        serializedName: \"x-ms-version-id\",\n        xmlName: \"x-ms-version-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        xmlName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobUploadExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"BlockBlob_uploadExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobUploadExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobPutBlobFromUrlHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"BlockBlob_putBlobFromUrlHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobPutBlobFromUrlHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      versionId: {\n        serializedName: \"x-ms-version-id\",\n        xmlName: \"x-ms-version-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        xmlName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobPutBlobFromUrlExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"BlockBlob_putBlobFromUrlExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobPutBlobFromUrlExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobStageBlockHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"BlockBlob_stageBlockHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobStageBlockHeaders\",\n    modelProperties: {\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      xMsContentCrc64: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        xmlName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobStageBlockExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"BlockBlob_stageBlockExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobStageBlockExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobStageBlockFromURLHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"BlockBlob_stageBlockFromURLHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobStageBlockFromURLHeaders\",\n    modelProperties: {\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      xMsContentCrc64: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        xmlName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobStageBlockFromURLExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"BlockBlob_stageBlockFromURLExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobStageBlockFromURLExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobCommitBlockListHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"BlockBlob_commitBlockListHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobCommitBlockListHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      xMsContentCrc64: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      versionId: {\n        serializedName: \"x-ms-version-id\",\n        xmlName: \"x-ms-version-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        xmlName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      encryptionKeySha256: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobCommitBlockListExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"BlockBlob_commitBlockListExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobCommitBlockListExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobGetBlockListHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"BlockBlob_getBlockListHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobGetBlockListHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        xmlName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentLength: {\n        serializedName: \"x-ms-blob-content-length\",\n        xmlName: \"x-ms-blob-content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobGetBlockListExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"BlockBlob_getBlockListExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobGetBlockListExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n  QueryCollectionFormat\n} from \"@azure/core-http\";\nimport {\n  BlobServiceProperties as BlobServicePropertiesMapper,\n  KeyInfo as KeyInfoMapper,\n  QueryRequest as QueryRequestMapper,\n  BlobTags as BlobTagsMapper,\n  BlockLookupList as BlockLookupListMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/xml\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const blobServiceProperties: OperationParameter = {\n  parameterPath: \"blobServiceProperties\",\n  mapper: BlobServicePropertiesMapper\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/xml\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const url: OperationURLParameter = {\n  parameterPath: \"url\",\n  mapper: {\n    serializedName: \"url\",\n    required: true,\n    xmlName: \"url\",\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const restype: OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    defaultValue: \"service\",\n    isConstant: true,\n    serializedName: \"restype\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"properties\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const timeoutInSeconds: OperationQueryParameter = {\n  parameterPath: [\"options\", \"timeoutInSeconds\"],\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 0\n    },\n    serializedName: \"timeout\",\n    xmlName: \"timeout\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const version: OperationParameter = {\n  parameterPath: \"version\",\n  mapper: {\n    defaultValue: \"2021-04-10\",\n    isConstant: true,\n    serializedName: \"x-ms-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const requestId: OperationParameter = {\n  parameterPath: [\"options\", \"requestId\"],\n  mapper: {\n    serializedName: \"x-ms-client-request-id\",\n    xmlName: \"x-ms-client-request-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const accept1: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/xml\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp1: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"stats\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp2: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"list\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const prefix: OperationQueryParameter = {\n  parameterPath: [\"options\", \"prefix\"],\n  mapper: {\n    serializedName: \"prefix\",\n    xmlName: \"prefix\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const marker: OperationQueryParameter = {\n  parameterPath: [\"options\", \"marker\"],\n  mapper: {\n    serializedName: \"marker\",\n    xmlName: \"marker\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const maxPageSize: OperationQueryParameter = {\n  parameterPath: [\"options\", \"maxPageSize\"],\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1\n    },\n    serializedName: \"maxresults\",\n    xmlName: \"maxresults\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const include: OperationQueryParameter = {\n  parameterPath: [\"options\", \"include\"],\n  mapper: {\n    serializedName: \"include\",\n    xmlName: \"include\",\n    xmlElementName: \"ListContainersIncludeType\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"metadata\", \"deleted\", \"system\"]\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const keyInfo: OperationParameter = {\n  parameterPath: \"keyInfo\",\n  mapper: KeyInfoMapper\n};\n\nexport const comp3: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"userdelegationkey\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const restype1: OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    defaultValue: \"account\",\n    isConstant: true,\n    serializedName: \"restype\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: {\n    serializedName: \"body\",\n    required: true,\n    xmlName: \"body\",\n    type: {\n      name: \"Stream\"\n    }\n  }\n};\n\nexport const comp4: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"batch\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentLength: OperationParameter = {\n  parameterPath: \"contentLength\",\n  mapper: {\n    serializedName: \"Content-Length\",\n    required: true,\n    xmlName: \"Content-Length\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const multipartContentType: OperationParameter = {\n  parameterPath: \"multipartContentType\",\n  mapper: {\n    serializedName: \"Content-Type\",\n    required: true,\n    xmlName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp5: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"blobs\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const where: OperationQueryParameter = {\n  parameterPath: [\"options\", \"where\"],\n  mapper: {\n    serializedName: \"where\",\n    xmlName: \"where\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const restype2: OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    defaultValue: \"container\",\n    isConstant: true,\n    serializedName: \"restype\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const metadata: OperationParameter = {\n  parameterPath: [\"options\", \"metadata\"],\n  mapper: {\n    serializedName: \"x-ms-meta\",\n    xmlName: \"x-ms-meta\",\n    type: {\n      name: \"Dictionary\",\n      value: { type: { name: \"String\" } }\n    },\n    headerCollectionPrefix: \"x-ms-meta-\"\n  }\n};\n\nexport const access: OperationParameter = {\n  parameterPath: [\"options\", \"access\"],\n  mapper: {\n    serializedName: \"x-ms-blob-public-access\",\n    xmlName: \"x-ms-blob-public-access\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"container\", \"blob\"]\n    }\n  }\n};\n\nexport const defaultEncryptionScope: OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"containerEncryptionScope\",\n    \"defaultEncryptionScope\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-default-encryption-scope\",\n    xmlName: \"x-ms-default-encryption-scope\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const preventEncryptionScopeOverride: OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"containerEncryptionScope\",\n    \"preventEncryptionScopeOverride\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-deny-encryption-scope-override\",\n    xmlName: \"x-ms-deny-encryption-scope-override\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const leaseId: OperationParameter = {\n  parameterPath: [\"options\", \"leaseAccessConditions\", \"leaseId\"],\n  mapper: {\n    serializedName: \"x-ms-lease-id\",\n    xmlName: \"x-ms-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const ifModifiedSince: OperationParameter = {\n  parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifModifiedSince\"],\n  mapper: {\n    serializedName: \"If-Modified-Since\",\n    xmlName: \"If-Modified-Since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\n\nexport const ifUnmodifiedSince: OperationParameter = {\n  parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifUnmodifiedSince\"],\n  mapper: {\n    serializedName: \"If-Unmodified-Since\",\n    xmlName: \"If-Unmodified-Since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\n\nexport const comp6: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"metadata\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp7: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"acl\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const containerAcl: OperationParameter = {\n  parameterPath: [\"options\", \"containerAcl\"],\n  mapper: {\n    serializedName: \"containerAcl\",\n    xmlName: \"SignedIdentifiers\",\n    xmlIsWrapped: true,\n    xmlElementName: \"SignedIdentifier\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Composite\",\n          className: \"SignedIdentifier\"\n        }\n      }\n    }\n  }\n};\n\nexport const comp8: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"undelete\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const deletedContainerName: OperationParameter = {\n  parameterPath: [\"options\", \"deletedContainerName\"],\n  mapper: {\n    serializedName: \"x-ms-deleted-container-name\",\n    xmlName: \"x-ms-deleted-container-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const deletedContainerVersion: OperationParameter = {\n  parameterPath: [\"options\", \"deletedContainerVersion\"],\n  mapper: {\n    serializedName: \"x-ms-deleted-container-version\",\n    xmlName: \"x-ms-deleted-container-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp9: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"rename\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sourceContainerName: OperationParameter = {\n  parameterPath: \"sourceContainerName\",\n  mapper: {\n    serializedName: \"x-ms-source-container-name\",\n    required: true,\n    xmlName: \"x-ms-source-container-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sourceLeaseId: OperationParameter = {\n  parameterPath: [\"options\", \"sourceLeaseId\"],\n  mapper: {\n    serializedName: \"x-ms-source-lease-id\",\n    xmlName: \"x-ms-source-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp10: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"lease\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const action: OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    defaultValue: \"acquire\",\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const duration: OperationParameter = {\n  parameterPath: [\"options\", \"duration\"],\n  mapper: {\n    serializedName: \"x-ms-lease-duration\",\n    xmlName: \"x-ms-lease-duration\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const proposedLeaseId: OperationParameter = {\n  parameterPath: [\"options\", \"proposedLeaseId\"],\n  mapper: {\n    serializedName: \"x-ms-proposed-lease-id\",\n    xmlName: \"x-ms-proposed-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const action1: OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    defaultValue: \"release\",\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const leaseId1: OperationParameter = {\n  parameterPath: \"leaseId\",\n  mapper: {\n    serializedName: \"x-ms-lease-id\",\n    required: true,\n    xmlName: \"x-ms-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const action2: OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    defaultValue: \"renew\",\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const action3: OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    defaultValue: \"break\",\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const breakPeriod: OperationParameter = {\n  parameterPath: [\"options\", \"breakPeriod\"],\n  mapper: {\n    serializedName: \"x-ms-lease-break-period\",\n    xmlName: \"x-ms-lease-break-period\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const action4: OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    defaultValue: \"change\",\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const proposedLeaseId1: OperationParameter = {\n  parameterPath: \"proposedLeaseId\",\n  mapper: {\n    serializedName: \"x-ms-proposed-lease-id\",\n    required: true,\n    xmlName: \"x-ms-proposed-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const include1: OperationQueryParameter = {\n  parameterPath: [\"options\", \"include\"],\n  mapper: {\n    serializedName: \"include\",\n    xmlName: \"include\",\n    xmlElementName: \"ListBlobsIncludeItem\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"copy\",\n            \"deleted\",\n            \"metadata\",\n            \"snapshots\",\n            \"uncommittedblobs\",\n            \"versions\",\n            \"tags\",\n            \"immutabilitypolicy\",\n            \"legalhold\",\n            \"deletedwithversions\"\n          ]\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const delimiter: OperationQueryParameter = {\n  parameterPath: \"delimiter\",\n  mapper: {\n    serializedName: \"delimiter\",\n    required: true,\n    xmlName: \"delimiter\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const snapshot: OperationQueryParameter = {\n  parameterPath: [\"options\", \"snapshot\"],\n  mapper: {\n    serializedName: \"snapshot\",\n    xmlName: \"snapshot\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const versionId: OperationQueryParameter = {\n  parameterPath: [\"options\", \"versionId\"],\n  mapper: {\n    serializedName: \"versionid\",\n    xmlName: \"versionid\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const range: OperationParameter = {\n  parameterPath: [\"options\", \"range\"],\n  mapper: {\n    serializedName: \"x-ms-range\",\n    xmlName: \"x-ms-range\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const rangeGetContentMD5: OperationParameter = {\n  parameterPath: [\"options\", \"rangeGetContentMD5\"],\n  mapper: {\n    serializedName: \"x-ms-range-get-content-md5\",\n    xmlName: \"x-ms-range-get-content-md5\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const rangeGetContentCRC64: OperationParameter = {\n  parameterPath: [\"options\", \"rangeGetContentCRC64\"],\n  mapper: {\n    serializedName: \"x-ms-range-get-content-crc64\",\n    xmlName: \"x-ms-range-get-content-crc64\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const encryptionKey: OperationParameter = {\n  parameterPath: [\"options\", \"cpkInfo\", \"encryptionKey\"],\n  mapper: {\n    serializedName: \"x-ms-encryption-key\",\n    xmlName: \"x-ms-encryption-key\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const encryptionKeySha256: OperationParameter = {\n  parameterPath: [\"options\", \"cpkInfo\", \"encryptionKeySha256\"],\n  mapper: {\n    serializedName: \"x-ms-encryption-key-sha256\",\n    xmlName: \"x-ms-encryption-key-sha256\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const encryptionAlgorithm: OperationParameter = {\n  parameterPath: [\"options\", \"cpkInfo\", \"encryptionAlgorithm\"],\n  mapper: {\n    serializedName: \"x-ms-encryption-algorithm\",\n    xmlName: \"x-ms-encryption-algorithm\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const ifMatch: OperationParameter = {\n  parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifMatch\"],\n  mapper: {\n    serializedName: \"If-Match\",\n    xmlName: \"If-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const ifNoneMatch: OperationParameter = {\n  parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifNoneMatch\"],\n  mapper: {\n    serializedName: \"If-None-Match\",\n    xmlName: \"If-None-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const ifTags: OperationParameter = {\n  parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifTags\"],\n  mapper: {\n    serializedName: \"x-ms-if-tags\",\n    xmlName: \"x-ms-if-tags\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const deleteSnapshots: OperationParameter = {\n  parameterPath: [\"options\", \"deleteSnapshots\"],\n  mapper: {\n    serializedName: \"x-ms-delete-snapshots\",\n    xmlName: \"x-ms-delete-snapshots\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"include\", \"only\"]\n    }\n  }\n};\n\nexport const blobDeleteType: OperationQueryParameter = {\n  parameterPath: [\"options\", \"blobDeleteType\"],\n  mapper: {\n    serializedName: \"deletetype\",\n    xmlName: \"deletetype\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp11: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"expiry\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const expiryOptions: OperationParameter = {\n  parameterPath: \"expiryOptions\",\n  mapper: {\n    serializedName: \"x-ms-expiry-option\",\n    required: true,\n    xmlName: \"x-ms-expiry-option\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const expiresOn: OperationParameter = {\n  parameterPath: [\"options\", \"expiresOn\"],\n  mapper: {\n    serializedName: \"x-ms-expiry-time\",\n    xmlName: \"x-ms-expiry-time\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const blobCacheControl: OperationParameter = {\n  parameterPath: [\"options\", \"blobHttpHeaders\", \"blobCacheControl\"],\n  mapper: {\n    serializedName: \"x-ms-blob-cache-control\",\n    xmlName: \"x-ms-blob-cache-control\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const blobContentType: OperationParameter = {\n  parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentType\"],\n  mapper: {\n    serializedName: \"x-ms-blob-content-type\",\n    xmlName: \"x-ms-blob-content-type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const blobContentMD5: OperationParameter = {\n  parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentMD5\"],\n  mapper: {\n    serializedName: \"x-ms-blob-content-md5\",\n    xmlName: \"x-ms-blob-content-md5\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\n\nexport const blobContentEncoding: OperationParameter = {\n  parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentEncoding\"],\n  mapper: {\n    serializedName: \"x-ms-blob-content-encoding\",\n    xmlName: \"x-ms-blob-content-encoding\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const blobContentLanguage: OperationParameter = {\n  parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentLanguage\"],\n  mapper: {\n    serializedName: \"x-ms-blob-content-language\",\n    xmlName: \"x-ms-blob-content-language\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const blobContentDisposition: OperationParameter = {\n  parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentDisposition\"],\n  mapper: {\n    serializedName: \"x-ms-blob-content-disposition\",\n    xmlName: \"x-ms-blob-content-disposition\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp12: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"immutabilityPolicies\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const immutabilityPolicyExpiry: OperationParameter = {\n  parameterPath: [\"options\", \"immutabilityPolicyExpiry\"],\n  mapper: {\n    serializedName: \"x-ms-immutability-policy-until-date\",\n    xmlName: \"x-ms-immutability-policy-until-date\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\n\nexport const immutabilityPolicyMode: OperationParameter = {\n  parameterPath: [\"options\", \"immutabilityPolicyMode\"],\n  mapper: {\n    serializedName: \"x-ms-immutability-policy-mode\",\n    xmlName: \"x-ms-immutability-policy-mode\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"]\n    }\n  }\n};\n\nexport const comp13: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"legalhold\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const legalHold: OperationParameter = {\n  parameterPath: \"legalHold\",\n  mapper: {\n    serializedName: \"x-ms-legal-hold\",\n    required: true,\n    xmlName: \"x-ms-legal-hold\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const encryptionScope: OperationParameter = {\n  parameterPath: [\"options\", \"encryptionScope\"],\n  mapper: {\n    serializedName: \"x-ms-encryption-scope\",\n    xmlName: \"x-ms-encryption-scope\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp14: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"snapshot\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const tier: OperationParameter = {\n  parameterPath: [\"options\", \"tier\"],\n  mapper: {\n    serializedName: \"x-ms-access-tier\",\n    xmlName: \"x-ms-access-tier\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"P4\",\n        \"P6\",\n        \"P10\",\n        \"P15\",\n        \"P20\",\n        \"P30\",\n        \"P40\",\n        \"P50\",\n        \"P60\",\n        \"P70\",\n        \"P80\",\n        \"Hot\",\n        \"Cool\",\n        \"Archive\"\n      ]\n    }\n  }\n};\n\nexport const rehydratePriority: OperationParameter = {\n  parameterPath: [\"options\", \"rehydratePriority\"],\n  mapper: {\n    serializedName: \"x-ms-rehydrate-priority\",\n    xmlName: \"x-ms-rehydrate-priority\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"High\", \"Standard\"]\n    }\n  }\n};\n\nexport const sourceIfModifiedSince: OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfModifiedSince\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-modified-since\",\n    xmlName: \"x-ms-source-if-modified-since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\n\nexport const sourceIfUnmodifiedSince: OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfUnmodifiedSince\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-unmodified-since\",\n    xmlName: \"x-ms-source-if-unmodified-since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\n\nexport const sourceIfMatch: OperationParameter = {\n  parameterPath: [\"options\", \"sourceModifiedAccessConditions\", \"sourceIfMatch\"],\n  mapper: {\n    serializedName: \"x-ms-source-if-match\",\n    xmlName: \"x-ms-source-if-match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sourceIfNoneMatch: OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfNoneMatch\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-none-match\",\n    xmlName: \"x-ms-source-if-none-match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sourceIfTags: OperationParameter = {\n  parameterPath: [\"options\", \"sourceModifiedAccessConditions\", \"sourceIfTags\"],\n  mapper: {\n    serializedName: \"x-ms-source-if-tags\",\n    xmlName: \"x-ms-source-if-tags\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const copySource: OperationParameter = {\n  parameterPath: \"copySource\",\n  mapper: {\n    serializedName: \"x-ms-copy-source\",\n    required: true,\n    xmlName: \"x-ms-copy-source\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const blobTagsString: OperationParameter = {\n  parameterPath: [\"options\", \"blobTagsString\"],\n  mapper: {\n    serializedName: \"x-ms-tags\",\n    xmlName: \"x-ms-tags\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sealBlob: OperationParameter = {\n  parameterPath: [\"options\", \"sealBlob\"],\n  mapper: {\n    serializedName: \"x-ms-seal-blob\",\n    xmlName: \"x-ms-seal-blob\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const legalHold1: OperationParameter = {\n  parameterPath: [\"options\", \"legalHold\"],\n  mapper: {\n    serializedName: \"x-ms-legal-hold\",\n    xmlName: \"x-ms-legal-hold\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const xMsRequiresSync: OperationParameter = {\n  parameterPath: \"xMsRequiresSync\",\n  mapper: {\n    defaultValue: \"true\",\n    isConstant: true,\n    serializedName: \"x-ms-requires-sync\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sourceContentMD5: OperationParameter = {\n  parameterPath: [\"options\", \"sourceContentMD5\"],\n  mapper: {\n    serializedName: \"x-ms-source-content-md5\",\n    xmlName: \"x-ms-source-content-md5\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\n\nexport const copySourceAuthorization: OperationParameter = {\n  parameterPath: [\"options\", \"copySourceAuthorization\"],\n  mapper: {\n    serializedName: \"x-ms-copy-source-authorization\",\n    xmlName: \"x-ms-copy-source-authorization\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp15: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"copy\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const copyActionAbortConstant: OperationParameter = {\n  parameterPath: \"copyActionAbortConstant\",\n  mapper: {\n    defaultValue: \"abort\",\n    isConstant: true,\n    serializedName: \"x-ms-copy-action\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const copyId: OperationQueryParameter = {\n  parameterPath: \"copyId\",\n  mapper: {\n    serializedName: \"copyid\",\n    required: true,\n    xmlName: \"copyid\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp16: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"tier\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const tier1: OperationParameter = {\n  parameterPath: \"tier\",\n  mapper: {\n    serializedName: \"x-ms-access-tier\",\n    required: true,\n    xmlName: \"x-ms-access-tier\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"P4\",\n        \"P6\",\n        \"P10\",\n        \"P15\",\n        \"P20\",\n        \"P30\",\n        \"P40\",\n        \"P50\",\n        \"P60\",\n        \"P70\",\n        \"P80\",\n        \"Hot\",\n        \"Cool\",\n        \"Archive\"\n      ]\n    }\n  }\n};\n\nexport const queryRequest: OperationParameter = {\n  parameterPath: [\"options\", \"queryRequest\"],\n  mapper: QueryRequestMapper\n};\n\nexport const comp17: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"query\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp18: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"tags\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const tags: OperationParameter = {\n  parameterPath: [\"options\", \"tags\"],\n  mapper: BlobTagsMapper\n};\n\nexport const transactionalContentMD5: OperationParameter = {\n  parameterPath: [\"options\", \"transactionalContentMD5\"],\n  mapper: {\n    serializedName: \"Content-MD5\",\n    xmlName: \"Content-MD5\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\n\nexport const transactionalContentCrc64: OperationParameter = {\n  parameterPath: [\"options\", \"transactionalContentCrc64\"],\n  mapper: {\n    serializedName: \"x-ms-content-crc64\",\n    xmlName: \"x-ms-content-crc64\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\n\nexport const blobType: OperationParameter = {\n  parameterPath: \"blobType\",\n  mapper: {\n    defaultValue: \"PageBlob\",\n    isConstant: true,\n    serializedName: \"x-ms-blob-type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const blobContentLength: OperationParameter = {\n  parameterPath: \"blobContentLength\",\n  mapper: {\n    serializedName: \"x-ms-blob-content-length\",\n    required: true,\n    xmlName: \"x-ms-blob-content-length\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const blobSequenceNumber: OperationParameter = {\n  parameterPath: [\"options\", \"blobSequenceNumber\"],\n  mapper: {\n    serializedName: \"x-ms-blob-sequence-number\",\n    xmlName: \"x-ms-blob-sequence-number\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const contentType1: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/octet-stream\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: {\n    serializedName: \"body\",\n    required: true,\n    xmlName: \"body\",\n    type: {\n      name: \"Stream\"\n    }\n  }\n};\n\nexport const accept2: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/xml\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp19: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"page\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const pageWrite: OperationParameter = {\n  parameterPath: \"pageWrite\",\n  mapper: {\n    defaultValue: \"update\",\n    isConstant: true,\n    serializedName: \"x-ms-page-write\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const ifSequenceNumberLessThanOrEqualTo: OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sequenceNumberAccessConditions\",\n    \"ifSequenceNumberLessThanOrEqualTo\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-if-sequence-number-le\",\n    xmlName: \"x-ms-if-sequence-number-le\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const ifSequenceNumberLessThan: OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sequenceNumberAccessConditions\",\n    \"ifSequenceNumberLessThan\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-if-sequence-number-lt\",\n    xmlName: \"x-ms-if-sequence-number-lt\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const ifSequenceNumberEqualTo: OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sequenceNumberAccessConditions\",\n    \"ifSequenceNumberEqualTo\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-if-sequence-number-eq\",\n    xmlName: \"x-ms-if-sequence-number-eq\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const pageWrite1: OperationParameter = {\n  parameterPath: \"pageWrite\",\n  mapper: {\n    defaultValue: \"clear\",\n    isConstant: true,\n    serializedName: \"x-ms-page-write\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sourceUrl: OperationParameter = {\n  parameterPath: \"sourceUrl\",\n  mapper: {\n    serializedName: \"x-ms-copy-source\",\n    required: true,\n    xmlName: \"x-ms-copy-source\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sourceRange: OperationParameter = {\n  parameterPath: \"sourceRange\",\n  mapper: {\n    serializedName: \"x-ms-source-range\",\n    required: true,\n    xmlName: \"x-ms-source-range\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sourceContentCrc64: OperationParameter = {\n  parameterPath: [\"options\", \"sourceContentCrc64\"],\n  mapper: {\n    serializedName: \"x-ms-source-content-crc64\",\n    xmlName: \"x-ms-source-content-crc64\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\n\nexport const range1: OperationParameter = {\n  parameterPath: \"range\",\n  mapper: {\n    serializedName: \"x-ms-range\",\n    required: true,\n    xmlName: \"x-ms-range\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp20: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"pagelist\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const prevsnapshot: OperationQueryParameter = {\n  parameterPath: [\"options\", \"prevsnapshot\"],\n  mapper: {\n    serializedName: \"prevsnapshot\",\n    xmlName: \"prevsnapshot\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const prevSnapshotUrl: OperationParameter = {\n  parameterPath: [\"options\", \"prevSnapshotUrl\"],\n  mapper: {\n    serializedName: \"x-ms-previous-snapshot-url\",\n    xmlName: \"x-ms-previous-snapshot-url\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sequenceNumberAction: OperationParameter = {\n  parameterPath: \"sequenceNumberAction\",\n  mapper: {\n    serializedName: \"x-ms-sequence-number-action\",\n    required: true,\n    xmlName: \"x-ms-sequence-number-action\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"update\", \"increment\"]\n    }\n  }\n};\n\nexport const comp21: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"incrementalcopy\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const blobType1: OperationParameter = {\n  parameterPath: \"blobType\",\n  mapper: {\n    defaultValue: \"AppendBlob\",\n    isConstant: true,\n    serializedName: \"x-ms-blob-type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp22: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"appendblock\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const maxSize: OperationParameter = {\n  parameterPath: [\"options\", \"appendPositionAccessConditions\", \"maxSize\"],\n  mapper: {\n    serializedName: \"x-ms-blob-condition-maxsize\",\n    xmlName: \"x-ms-blob-condition-maxsize\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const appendPosition: OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"appendPositionAccessConditions\",\n    \"appendPosition\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-condition-appendpos\",\n    xmlName: \"x-ms-blob-condition-appendpos\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const sourceRange1: OperationParameter = {\n  parameterPath: [\"options\", \"sourceRange\"],\n  mapper: {\n    serializedName: \"x-ms-source-range\",\n    xmlName: \"x-ms-source-range\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp23: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"seal\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const blobType2: OperationParameter = {\n  parameterPath: \"blobType\",\n  mapper: {\n    defaultValue: \"BlockBlob\",\n    isConstant: true,\n    serializedName: \"x-ms-blob-type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const copySourceBlobProperties: OperationParameter = {\n  parameterPath: [\"options\", \"copySourceBlobProperties\"],\n  mapper: {\n    serializedName: \"x-ms-copy-source-blob-properties\",\n    xmlName: \"x-ms-copy-source-blob-properties\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const comp24: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"block\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const blockId: OperationQueryParameter = {\n  parameterPath: \"blockId\",\n  mapper: {\n    serializedName: \"blockid\",\n    required: true,\n    xmlName: \"blockid\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const blocks: OperationParameter = {\n  parameterPath: \"blocks\",\n  mapper: BlockLookupListMapper\n};\n\nexport const comp25: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"blocklist\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const listType: OperationQueryParameter = {\n  parameterPath: \"listType\",\n  mapper: {\n    defaultValue: \"committed\",\n    serializedName: \"blocklisttype\",\n    required: true,\n    xmlName: \"blocklisttype\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"committed\", \"uncommitted\", \"all\"]\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  ContainerCreateOptionalParams,\n  ContainerCreateResponse,\n  ContainerGetPropertiesOptionalParams,\n  ContainerGetPropertiesResponse,\n  ContainerDeleteOptionalParams,\n  ContainerDeleteResponse,\n  ContainerSetMetadataOptionalParams,\n  ContainerSetMetadataResponse,\n  ContainerGetAccessPolicyOptionalParams,\n  ContainerGetAccessPolicyResponse,\n  ContainerSetAccessPolicyOptionalParams,\n  ContainerSetAccessPolicyResponse,\n  ContainerRestoreOptionalParams,\n  ContainerRestoreResponse,\n  ContainerRenameOptionalParams,\n  ContainerRenameResponse,\n  ContainerSubmitBatchOptionalParams,\n  ContainerSubmitBatchResponse,\n  ContainerFilterBlobsOptionalParams,\n  ContainerFilterBlobsResponse,\n  ContainerAcquireLeaseOptionalParams,\n  ContainerAcquireLeaseResponse,\n  ContainerReleaseLeaseOptionalParams,\n  ContainerReleaseLeaseResponse,\n  ContainerRenewLeaseOptionalParams,\n  ContainerRenewLeaseResponse,\n  ContainerBreakLeaseOptionalParams,\n  ContainerBreakLeaseResponse,\n  ContainerChangeLeaseOptionalParams,\n  ContainerChangeLeaseResponse,\n  ContainerListBlobFlatSegmentOptionalParams,\n  ContainerListBlobFlatSegmentResponse,\n  ContainerListBlobHierarchySegmentOptionalParams,\n  ContainerListBlobHierarchySegmentResponse,\n  ContainerGetAccountInfoResponse\n} from \"../models\";\n\n/** Class representing a Container. */\nexport class Container {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class Container class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * creates a new container under the specified account. If the container with the same name already\n   * exists, the operation fails\n   * @param options The options parameters.\n   */\n  create(\n    options?: ContainerCreateOptionalParams\n  ): Promise<ContainerCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<ContainerCreateResponse>;\n  }\n\n  /**\n   * returns all user-defined metadata and system properties for the specified container. The data\n   * returned does not include the container's list of blobs\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: ContainerGetPropertiesOptionalParams\n  ): Promise<ContainerGetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPropertiesOperationSpec\n    ) as Promise<ContainerGetPropertiesResponse>;\n  }\n\n  /**\n   * operation marks the specified container for deletion. The container and any blobs contained within\n   * it are later deleted during garbage collection\n   * @param options The options parameters.\n   */\n  delete(\n    options?: ContainerDeleteOptionalParams\n  ): Promise<ContainerDeleteResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<ContainerDeleteResponse>;\n  }\n\n  /**\n   * operation sets one or more user-defined name-value pairs for the specified container.\n   * @param options The options parameters.\n   */\n  setMetadata(\n    options?: ContainerSetMetadataOptionalParams\n  ): Promise<ContainerSetMetadataResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setMetadataOperationSpec\n    ) as Promise<ContainerSetMetadataResponse>;\n  }\n\n  /**\n   * gets the permissions for the specified container. The permissions indicate whether container data\n   * may be accessed publicly.\n   * @param options The options parameters.\n   */\n  getAccessPolicy(\n    options?: ContainerGetAccessPolicyOptionalParams\n  ): Promise<ContainerGetAccessPolicyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getAccessPolicyOperationSpec\n    ) as Promise<ContainerGetAccessPolicyResponse>;\n  }\n\n  /**\n   * sets the permissions for the specified container. The permissions indicate whether blobs in a\n   * container may be accessed publicly.\n   * @param options The options parameters.\n   */\n  setAccessPolicy(\n    options?: ContainerSetAccessPolicyOptionalParams\n  ): Promise<ContainerSetAccessPolicyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setAccessPolicyOperationSpec\n    ) as Promise<ContainerSetAccessPolicyResponse>;\n  }\n\n  /**\n   * Restores a previously-deleted container.\n   * @param options The options parameters.\n   */\n  restore(\n    options?: ContainerRestoreOptionalParams\n  ): Promise<ContainerRestoreResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      restoreOperationSpec\n    ) as Promise<ContainerRestoreResponse>;\n  }\n\n  /**\n   * Renames an existing container.\n   * @param sourceContainerName Required.  Specifies the name of the container to rename.\n   * @param options The options parameters.\n   */\n  rename(\n    sourceContainerName: string,\n    options?: ContainerRenameOptionalParams\n  ): Promise<ContainerRenameResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      sourceContainerName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      renameOperationSpec\n    ) as Promise<ContainerRenameResponse>;\n  }\n\n  /**\n   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n   * @param contentLength The length of the request.\n   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  submitBatch(\n    contentLength: number,\n    multipartContentType: string,\n    body: coreHttp.HttpRequestBody,\n    options?: ContainerSubmitBatchOptionalParams\n  ): Promise<ContainerSubmitBatchResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      multipartContentType,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      submitBatchOperationSpec\n    ) as Promise<ContainerSubmitBatchResponse>;\n  }\n\n  /**\n   * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given\n   * search expression.  Filter blobs searches within the given container.\n   * @param options The options parameters.\n   */\n  filterBlobs(\n    options?: ContainerFilterBlobsOptionalParams\n  ): Promise<ContainerFilterBlobsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      filterBlobsOperationSpec\n    ) as Promise<ContainerFilterBlobsResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param options The options parameters.\n   */\n  acquireLease(\n    options?: ContainerAcquireLeaseOptionalParams\n  ): Promise<ContainerAcquireLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      acquireLeaseOperationSpec\n    ) as Promise<ContainerAcquireLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  releaseLease(\n    leaseId: string,\n    options?: ContainerReleaseLeaseOptionalParams\n  ): Promise<ContainerReleaseLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      releaseLeaseOperationSpec\n    ) as Promise<ContainerReleaseLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  renewLease(\n    leaseId: string,\n    options?: ContainerRenewLeaseOptionalParams\n  ): Promise<ContainerRenewLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      renewLeaseOperationSpec\n    ) as Promise<ContainerRenewLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param options The options parameters.\n   */\n  breakLease(\n    options?: ContainerBreakLeaseOptionalParams\n  ): Promise<ContainerBreakLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      breakLeaseOperationSpec\n    ) as Promise<ContainerBreakLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   *                        (String) for a list of valid GUID string formats.\n   * @param options The options parameters.\n   */\n  changeLease(\n    leaseId: string,\n    proposedLeaseId: string,\n    options?: ContainerChangeLeaseOptionalParams\n  ): Promise<ContainerChangeLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      proposedLeaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      changeLeaseOperationSpec\n    ) as Promise<ContainerChangeLeaseResponse>;\n  }\n\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param options The options parameters.\n   */\n  listBlobFlatSegment(\n    options?: ContainerListBlobFlatSegmentOptionalParams\n  ): Promise<ContainerListBlobFlatSegmentResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listBlobFlatSegmentOperationSpec\n    ) as Promise<ContainerListBlobFlatSegmentResponse>;\n  }\n\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n   *                  element in the response body that acts as a placeholder for all blobs whose names begin with the\n   *                  same substring up to the appearance of the delimiter character. The delimiter may be a single\n   *                  character or a string.\n   * @param options The options parameters.\n   */\n  listBlobHierarchySegment(\n    delimiter: string,\n    options?: ContainerListBlobHierarchySegmentOptionalParams\n  ): Promise<ContainerListBlobHierarchySegmentResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      delimiter,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listBlobHierarchySegmentOperationSpec\n    ) as Promise<ContainerListBlobHierarchySegmentResponse>;\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(\n    options?: coreHttp.OperationOptions\n  ): Promise<ContainerGetAccountInfoResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getAccountInfoOperationSpec\n    ) as Promise<ContainerGetAccountInfoResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.access,\n    Parameters.defaultEncryptionScope,\n    Parameters.preventEncryptionScopeOverride\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSetMetadataExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp6\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccessPolicyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"SignedIdentifier\" }\n          }\n        },\n        serializedName: \"SignedIdentifiers\",\n        xmlName: \"SignedIdentifiers\",\n        xmlIsWrapped: true,\n        xmlElementName: \"SignedIdentifier\"\n      },\n      headersMapper: Mappers.ContainerGetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetAccessPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp7\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setAccessPolicyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSetAccessPolicyExceptionHeaders\n    }\n  },\n  requestBody: Parameters.containerAcl,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp7\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.access,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst restoreOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerRestoreHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRestoreExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp8\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.deletedContainerName,\n    Parameters.deletedContainerVersion\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renameOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenameHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRenameExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp9\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.sourceContainerName,\n    Parameters.sourceLeaseId\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst submitBatchOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ContainerSubmitBatchHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSubmitBatchExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp4,\n    Parameters.restype2\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.multipartContentType\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst filterBlobsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FilterBlobSegment,\n      headersMapper: Mappers.ContainerFilterBlobsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerFilterBlobsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.comp5,\n    Parameters.where,\n    Parameters.restype2\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst acquireLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerAcquireLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action,\n    Parameters.duration,\n    Parameters.proposedLeaseId\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst releaseLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerReleaseLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action1,\n    Parameters.leaseId1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renewLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRenewLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId1,\n    Parameters.action2\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst breakLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerBreakLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action3,\n    Parameters.breakPeriod\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst changeLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerChangeLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId1,\n    Parameters.action4,\n    Parameters.proposedLeaseId1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listBlobFlatSegmentOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsFlatSegmentResponse,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp2,\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.restype2,\n    Parameters.include1\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listBlobHierarchySegmentOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp2,\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.restype2,\n    Parameters.include1,\n    Parameters.delimiter\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  BlobDownloadOptionalParams,\n  BlobDownloadResponse,\n  BlobGetPropertiesOptionalParams,\n  BlobGetPropertiesResponse,\n  BlobDeleteOptionalParams,\n  BlobDeleteResponse,\n  BlobUndeleteOptionalParams,\n  BlobUndeleteResponse,\n  BlobExpiryOptions,\n  BlobSetExpiryOptionalParams,\n  BlobSetExpiryResponse,\n  BlobSetHttpHeadersOptionalParams,\n  BlobSetHttpHeadersResponse,\n  BlobSetImmutabilityPolicyOptionalParams,\n  BlobSetImmutabilityPolicyResponse,\n  BlobDeleteImmutabilityPolicyOptionalParams,\n  BlobDeleteImmutabilityPolicyResponse,\n  BlobSetLegalHoldOptionalParams,\n  BlobSetLegalHoldResponse,\n  BlobSetMetadataOptionalParams,\n  BlobSetMetadataResponse,\n  BlobAcquireLeaseOptionalParams,\n  BlobAcquireLeaseResponse,\n  BlobReleaseLeaseOptionalParams,\n  BlobReleaseLeaseResponse,\n  BlobRenewLeaseOptionalParams,\n  BlobRenewLeaseResponse,\n  BlobChangeLeaseOptionalParams,\n  BlobChangeLeaseResponse,\n  BlobBreakLeaseOptionalParams,\n  BlobBreakLeaseResponse,\n  BlobCreateSnapshotOptionalParams,\n  BlobCreateSnapshotResponse,\n  BlobStartCopyFromURLOptionalParams,\n  BlobStartCopyFromURLResponse,\n  BlobCopyFromURLOptionalParams,\n  BlobCopyFromURLResponse,\n  BlobAbortCopyFromURLOptionalParams,\n  BlobAbortCopyFromURLResponse,\n  AccessTier,\n  BlobSetTierOptionalParams,\n  BlobSetTierResponse,\n  BlobGetAccountInfoResponse,\n  BlobQueryOptionalParams,\n  BlobQueryResponse,\n  BlobGetTagsOptionalParams,\n  BlobGetTagsResponse,\n  BlobSetTagsOptionalParams,\n  BlobSetTagsResponse\n} from \"../models\";\n\n/** Class representing a Blob. */\nexport class Blob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class Blob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Download operation reads or downloads a blob from the system, including its metadata and\n   * properties. You can also call Download to read a snapshot.\n   * @param options The options parameters.\n   */\n  download(\n    options?: BlobDownloadOptionalParams\n  ): Promise<BlobDownloadResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      downloadOperationSpec\n    ) as Promise<BlobDownloadResponse>;\n  }\n\n  /**\n   * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system\n   * properties for the blob. It does not return the content of the blob.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: BlobGetPropertiesOptionalParams\n  ): Promise<BlobGetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPropertiesOperationSpec\n    ) as Promise<BlobGetPropertiesResponse>;\n  }\n\n  /**\n   * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is\n   * permanently removed from the storage account. If the storage account's soft delete feature is\n   * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible\n   * immediately. However, the blob service retains the blob or snapshot for the number of days specified\n   * by the DeleteRetentionPolicy section of [Storage service properties]\n   * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is\n   * permanently removed from the storage account. Note that you continue to be charged for the\n   * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the\n   * \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You\n   * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a\n   * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n   * (ResourceNotFound).\n   * @param options The options parameters.\n   */\n  delete(options?: BlobDeleteOptionalParams): Promise<BlobDeleteResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<BlobDeleteResponse>;\n  }\n\n  /**\n   * Undelete a blob that was previously soft deleted\n   * @param options The options parameters.\n   */\n  undelete(\n    options?: BlobUndeleteOptionalParams\n  ): Promise<BlobUndeleteResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      undeleteOperationSpec\n    ) as Promise<BlobUndeleteResponse>;\n  }\n\n  /**\n   * Sets the time a blob will expire and be deleted.\n   * @param expiryOptions Required. Indicates mode of the expiry time\n   * @param options The options parameters.\n   */\n  setExpiry(\n    expiryOptions: BlobExpiryOptions,\n    options?: BlobSetExpiryOptionalParams\n  ): Promise<BlobSetExpiryResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      expiryOptions,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setExpiryOperationSpec\n    ) as Promise<BlobSetExpiryResponse>;\n  }\n\n  /**\n   * The Set HTTP Headers operation sets system properties on the blob\n   * @param options The options parameters.\n   */\n  setHttpHeaders(\n    options?: BlobSetHttpHeadersOptionalParams\n  ): Promise<BlobSetHttpHeadersResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setHttpHeadersOperationSpec\n    ) as Promise<BlobSetHttpHeadersResponse>;\n  }\n\n  /**\n   * The Set Immutability Policy operation sets the immutability policy on the blob\n   * @param options The options parameters.\n   */\n  setImmutabilityPolicy(\n    options?: BlobSetImmutabilityPolicyOptionalParams\n  ): Promise<BlobSetImmutabilityPolicyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setImmutabilityPolicyOperationSpec\n    ) as Promise<BlobSetImmutabilityPolicyResponse>;\n  }\n\n  /**\n   * The Delete Immutability Policy operation deletes the immutability policy on the blob\n   * @param options The options parameters.\n   */\n  deleteImmutabilityPolicy(\n    options?: BlobDeleteImmutabilityPolicyOptionalParams\n  ): Promise<BlobDeleteImmutabilityPolicyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteImmutabilityPolicyOperationSpec\n    ) as Promise<BlobDeleteImmutabilityPolicyResponse>;\n  }\n\n  /**\n   * The Set Legal Hold operation sets a legal hold on the blob.\n   * @param legalHold Specified if a legal hold should be set on the blob.\n   * @param options The options parameters.\n   */\n  setLegalHold(\n    legalHold: boolean,\n    options?: BlobSetLegalHoldOptionalParams\n  ): Promise<BlobSetLegalHoldResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      legalHold,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setLegalHoldOperationSpec\n    ) as Promise<BlobSetLegalHoldResponse>;\n  }\n\n  /**\n   * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more\n   * name-value pairs\n   * @param options The options parameters.\n   */\n  setMetadata(\n    options?: BlobSetMetadataOptionalParams\n  ): Promise<BlobSetMetadataResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setMetadataOperationSpec\n    ) as Promise<BlobSetMetadataResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  acquireLease(\n    options?: BlobAcquireLeaseOptionalParams\n  ): Promise<BlobAcquireLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      acquireLeaseOperationSpec\n    ) as Promise<BlobAcquireLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  releaseLease(\n    leaseId: string,\n    options?: BlobReleaseLeaseOptionalParams\n  ): Promise<BlobReleaseLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      releaseLeaseOperationSpec\n    ) as Promise<BlobReleaseLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  renewLease(\n    leaseId: string,\n    options?: BlobRenewLeaseOptionalParams\n  ): Promise<BlobRenewLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      renewLeaseOperationSpec\n    ) as Promise<BlobRenewLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   *                        (String) for a list of valid GUID string formats.\n   * @param options The options parameters.\n   */\n  changeLease(\n    leaseId: string,\n    proposedLeaseId: string,\n    options?: BlobChangeLeaseOptionalParams\n  ): Promise<BlobChangeLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      proposedLeaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      changeLeaseOperationSpec\n    ) as Promise<BlobChangeLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  breakLease(\n    options?: BlobBreakLeaseOptionalParams\n  ): Promise<BlobBreakLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      breakLeaseOperationSpec\n    ) as Promise<BlobBreakLeaseResponse>;\n  }\n\n  /**\n   * The Create Snapshot operation creates a read-only snapshot of a blob\n   * @param options The options parameters.\n   */\n  createSnapshot(\n    options?: BlobCreateSnapshotOptionalParams\n  ): Promise<BlobCreateSnapshotResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createSnapshotOperationSpec\n    ) as Promise<BlobCreateSnapshotResponse>;\n  }\n\n  /**\n   * The Start Copy From URL operation copies a blob or an internet resource to a new blob.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  startCopyFromURL(\n    copySource: string,\n    options?: BlobStartCopyFromURLOptionalParams\n  ): Promise<BlobStartCopyFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      startCopyFromURLOperationSpec\n    ) as Promise<BlobStartCopyFromURLResponse>;\n  }\n\n  /**\n   * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return\n   * a response until the copy is complete.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  copyFromURL(\n    copySource: string,\n    options?: BlobCopyFromURLOptionalParams\n  ): Promise<BlobCopyFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      copyFromURLOperationSpec\n    ) as Promise<BlobCopyFromURLResponse>;\n  }\n\n  /**\n   * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination\n   * blob with zero length and full metadata.\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n   *               operation.\n   * @param options The options parameters.\n   */\n  abortCopyFromURL(\n    copyId: string,\n    options?: BlobAbortCopyFromURLOptionalParams\n  ): Promise<BlobAbortCopyFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      copyId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      abortCopyFromURLOperationSpec\n    ) as Promise<BlobAbortCopyFromURLResponse>;\n  }\n\n  /**\n   * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant storage only). A\n   * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block\n   * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's\n   * ETag.\n   * @param tier Indicates the tier to be set on the blob.\n   * @param options The options parameters.\n   */\n  setTier(\n    tier: AccessTier,\n    options?: BlobSetTierOptionalParams\n  ): Promise<BlobSetTierResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      tier,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setTierOperationSpec\n    ) as Promise<BlobSetTierResponse>;\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(\n    options?: coreHttp.OperationOptions\n  ): Promise<BlobGetAccountInfoResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getAccountInfoOperationSpec\n    ) as Promise<BlobGetAccountInfoResponse>;\n  }\n\n  /**\n   * The Query operation enables users to select/project on blob data by providing simple query\n   * expressions.\n   * @param options The options parameters.\n   */\n  query(options?: BlobQueryOptionalParams): Promise<BlobQueryResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      queryOperationSpec\n    ) as Promise<BlobQueryResponse>;\n  }\n\n  /**\n   * The Get Tags operation enables users to get the tags associated with a blob.\n   * @param options The options parameters.\n   */\n  getTags(options?: BlobGetTagsOptionalParams): Promise<BlobGetTagsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getTagsOperationSpec\n    ) as Promise<BlobGetTagsResponse>;\n  }\n\n  /**\n   * The Set Tags operation enables users to set tags on a blob.\n   * @param options The options parameters.\n   */\n  setTags(options?: BlobSetTagsOptionalParams): Promise<BlobSetTagsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setTagsOperationSpec\n    ) as Promise<BlobSetTagsResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\n\nconst downloadOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    206: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDownloadExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.rangeGetContentMD5,\n    Parameters.rangeGetContentCRC64,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.blobDeleteType\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.deleteSnapshots\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst undeleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobUndeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobUndeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp8],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setExpiryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetExpiryHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetExpiryExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp11],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.expiryOptions,\n    Parameters.expiresOn\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setHttpHeadersOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetHttpHeadersHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetHttpHeadersExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setImmutabilityPolicyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetImmutabilityPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetImmutabilityPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifUnmodifiedSince,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteImmutabilityPolicyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobDeleteImmutabilityPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDeleteImmutabilityPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setLegalHoldOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetLegalHoldHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetLegalHoldExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp13],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.legalHold\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetMetadataExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp6],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst acquireLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobAcquireLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action,\n    Parameters.duration,\n    Parameters.proposedLeaseId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst releaseLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobReleaseLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action1,\n    Parameters.leaseId1,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renewLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobRenewLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId1,\n    Parameters.action2,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst changeLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobChangeLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId1,\n    Parameters.action4,\n    Parameters.proposedLeaseId1,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst breakLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobBreakLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action3,\n    Parameters.breakPeriod,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst createSnapshotOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobCreateSnapshotHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobCreateSnapshotExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp14],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst startCopyFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobStartCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobStartCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.tier,\n    Parameters.rehydratePriority,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceIfTags,\n    Parameters.copySource,\n    Parameters.blobTagsString,\n    Parameters.sealBlob,\n    Parameters.legalHold1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst copyFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.copySource,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.xMsRequiresSync,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst abortCopyFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobAbortCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobAbortCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp15,\n    Parameters.copyId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.copyActionAbortConstant\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setTierOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    202: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetTierExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.comp16\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifTags,\n    Parameters.rehydratePriority,\n    Parameters.tier1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst queryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobQueryHeaders\n    },\n    206: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobQueryHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobQueryExceptionHeaders\n    }\n  },\n  requestBody: Parameters.queryRequest,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.comp17\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getTagsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobTags,\n      headersMapper: Mappers.BlobGetTagsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetTagsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.comp18\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setTagsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobSetTagsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetTagsExceptionHeaders\n    }\n  },\n  requestBody: Parameters.tags,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.versionId,\n    Parameters.comp18\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId,\n    Parameters.ifTags,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  PageBlobCreateOptionalParams,\n  PageBlobCreateResponse,\n  PageBlobUploadPagesOptionalParams,\n  PageBlobUploadPagesResponse,\n  PageBlobClearPagesOptionalParams,\n  PageBlobClearPagesResponse,\n  PageBlobUploadPagesFromURLOptionalParams,\n  PageBlobUploadPagesFromURLResponse,\n  PageBlobGetPageRangesOptionalParams,\n  PageBlobGetPageRangesResponse,\n  PageBlobGetPageRangesDiffOptionalParams,\n  PageBlobGetPageRangesDiffResponse,\n  PageBlobResizeOptionalParams,\n  PageBlobResizeResponse,\n  SequenceNumberActionType,\n  PageBlobUpdateSequenceNumberOptionalParams,\n  PageBlobUpdateSequenceNumberResponse,\n  PageBlobCopyIncrementalOptionalParams,\n  PageBlobCopyIncrementalResponse\n} from \"../models\";\n\n/** Class representing a PageBlob. */\nexport class PageBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class PageBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Create operation creates a new page blob.\n   * @param contentLength The length of the request.\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n   *                          page blob size must be aligned to a 512-byte boundary.\n   * @param options The options parameters.\n   */\n  create(\n    contentLength: number,\n    blobContentLength: number,\n    options?: PageBlobCreateOptionalParams\n  ): Promise<PageBlobCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      blobContentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<PageBlobCreateResponse>;\n  }\n\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  uploadPages(\n    contentLength: number,\n    body: coreHttp.HttpRequestBody,\n    options?: PageBlobUploadPagesOptionalParams\n  ): Promise<PageBlobUploadPagesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      uploadPagesOperationSpec\n    ) as Promise<PageBlobUploadPagesResponse>;\n  }\n\n  /**\n   * The Clear Pages operation clears a set of pages from a page blob\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n  clearPages(\n    contentLength: number,\n    options?: PageBlobClearPagesOptionalParams\n  ): Promise<PageBlobClearPagesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      clearPagesOperationSpec\n    ) as Promise<PageBlobClearPagesResponse>;\n  }\n\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a\n   * URL\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param sourceRange Bytes of source data in the specified range. The length of this range should\n   *                    match the ContentLength header and x-ms-range/Range destination range header.\n   * @param contentLength The length of the request.\n   * @param range The range of bytes to which the source range would be written. The range should be 512\n   *              aligned and range-end is required.\n   * @param options The options parameters.\n   */\n  uploadPagesFromURL(\n    sourceUrl: string,\n    sourceRange: string,\n    contentLength: number,\n    range: string,\n    options?: PageBlobUploadPagesFromURLOptionalParams\n  ): Promise<PageBlobUploadPagesFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      sourceUrl,\n      sourceRange,\n      contentLength,\n      range,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      uploadPagesFromURLOperationSpec\n    ) as Promise<PageBlobUploadPagesFromURLResponse>;\n  }\n\n  /**\n   * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a\n   * page blob\n   * @param options The options parameters.\n   */\n  getPageRanges(\n    options?: PageBlobGetPageRangesOptionalParams\n  ): Promise<PageBlobGetPageRangesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPageRangesOperationSpec\n    ) as Promise<PageBlobGetPageRangesResponse>;\n  }\n\n  /**\n   * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were\n   * changed between target blob and previous snapshot.\n   * @param options The options parameters.\n   */\n  getPageRangesDiff(\n    options?: PageBlobGetPageRangesDiffOptionalParams\n  ): Promise<PageBlobGetPageRangesDiffResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPageRangesDiffOperationSpec\n    ) as Promise<PageBlobGetPageRangesDiffResponse>;\n  }\n\n  /**\n   * Resize the Blob\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n   *                          page blob size must be aligned to a 512-byte boundary.\n   * @param options The options parameters.\n   */\n  resize(\n    blobContentLength: number,\n    options?: PageBlobResizeOptionalParams\n  ): Promise<PageBlobResizeResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blobContentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      resizeOperationSpec\n    ) as Promise<PageBlobResizeResponse>;\n  }\n\n  /**\n   * Update the sequence number of the blob\n   * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.\n   *                             This property applies to page blobs only. This property indicates how the service should modify the\n   *                             blob's sequence number\n   * @param options The options parameters.\n   */\n  updateSequenceNumber(\n    sequenceNumberAction: SequenceNumberActionType,\n    options?: PageBlobUpdateSequenceNumberOptionalParams\n  ): Promise<PageBlobUpdateSequenceNumberResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      sequenceNumberAction,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      updateSequenceNumberOperationSpec\n    ) as Promise<PageBlobUpdateSequenceNumberResponse>;\n  }\n\n  /**\n   * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.\n   * The snapshot is copied such that only the differential changes between the previously copied\n   * snapshot are transferred to the destination. The copied snapshots are complete copies of the\n   * original snapshot and can be read or copied from as usual. This API is supported since REST version\n   * 2016-05-31.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  copyIncremental(\n    copySource: string,\n    options?: PageBlobCopyIncrementalOptionalParams\n  ): Promise<PageBlobCopyIncrementalResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      copyIncrementalOperationSpec\n    ) as Promise<PageBlobCopyIncrementalResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.blobType,\n    Parameters.blobContentLength,\n    Parameters.blobSequenceNumber\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst uploadPagesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUploadPagesExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n    Parameters.contentType1,\n    Parameters.accept2,\n    Parameters.pageWrite,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo\n  ],\n  mediaType: \"binary\",\n  serializer\n};\nconst clearPagesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobClearPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobClearPagesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo,\n    Parameters.pageWrite1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst uploadPagesFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUploadPagesFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.pageWrite,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo,\n    Parameters.sourceUrl,\n    Parameters.sourceRange,\n    Parameters.sourceContentCrc64,\n    Parameters.range1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPageRangesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobGetPageRangesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.comp20\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPageRangesDiffOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.comp20,\n    Parameters.prevsnapshot\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.prevSnapshotUrl\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst resizeOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobResizeHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobResizeExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.blobContentLength\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst updateSequenceNumberOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobSequenceNumber,\n    Parameters.sequenceNumberAction\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst copyIncrementalOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.PageBlobCopyIncrementalHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobCopyIncrementalExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp21],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.copySource\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  AppendBlobCreateOptionalParams,\n  AppendBlobCreateResponse,\n  AppendBlobAppendBlockOptionalParams,\n  AppendBlobAppendBlockResponse,\n  AppendBlobAppendBlockFromUrlOptionalParams,\n  AppendBlobAppendBlockFromUrlResponse,\n  AppendBlobSealOptionalParams,\n  AppendBlobSealResponse\n} from \"../models\";\n\n/** Class representing a AppendBlob. */\nexport class AppendBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class AppendBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Create Append Blob operation creates a new append blob.\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n  create(\n    contentLength: number,\n    options?: AppendBlobCreateOptionalParams\n  ): Promise<AppendBlobCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<AppendBlobCreateResponse>;\n  }\n\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob. The\n   * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to\n   * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  appendBlock(\n    contentLength: number,\n    body: coreHttp.HttpRequestBody,\n    options?: AppendBlobAppendBlockOptionalParams\n  ): Promise<AppendBlobAppendBlockResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      appendBlockOperationSpec\n    ) as Promise<AppendBlobAppendBlockResponse>;\n  }\n\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob where\n   * the contents are read from a source url. The Append Block operation is permitted only if the blob\n   * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version\n   * 2015-02-21 version or later.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n  appendBlockFromUrl(\n    sourceUrl: string,\n    contentLength: number,\n    options?: AppendBlobAppendBlockFromUrlOptionalParams\n  ): Promise<AppendBlobAppendBlockFromUrlResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      sourceUrl,\n      contentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      appendBlockFromUrlOperationSpec\n    ) as Promise<AppendBlobAppendBlockFromUrlResponse>;\n  }\n\n  /**\n   * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version\n   * 2019-12-12 version or later.\n   * @param options The options parameters.\n   */\n  seal(\n    options?: AppendBlobSealOptionalParams\n  ): Promise<AppendBlobSealResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      sealOperationSpec\n    ) as Promise<AppendBlobSealResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.blobType1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst appendBlockOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobAppendBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobAppendBlockExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n    Parameters.contentType1,\n    Parameters.accept2,\n    Parameters.maxSize,\n    Parameters.appendPosition\n  ],\n  mediaType: \"binary\",\n  serializer\n};\nconst appendBlockFromUrlOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobAppendBlockFromUrlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobAppendBlockFromUrlExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp22],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.transactionalContentMD5,\n    Parameters.sourceUrl,\n    Parameters.sourceContentCrc64,\n    Parameters.maxSize,\n    Parameters.appendPosition,\n    Parameters.sourceRange1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst sealOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.AppendBlobSealHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.AppendBlobSealExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp23],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.appendPosition\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  BlockBlobUploadOptionalParams,\n  BlockBlobUploadResponse,\n  BlockBlobPutBlobFromUrlOptionalParams,\n  BlockBlobPutBlobFromUrlResponse,\n  BlockBlobStageBlockOptionalParams,\n  BlockBlobStageBlockResponse,\n  BlockBlobStageBlockFromURLOptionalParams,\n  BlockBlobStageBlockFromURLResponse,\n  BlockLookupList,\n  BlockBlobCommitBlockListOptionalParams,\n  BlockBlobCommitBlockListResponse,\n  BlockListType,\n  BlockBlobGetBlockListOptionalParams,\n  BlockBlobGetBlockListResponse\n} from \"../models\";\n\n/** Class representing a BlockBlob. */\nexport class BlockBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class BlockBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing\n   * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put\n   * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a\n   * partial update of the content of a block blob, use the Put Block List operation.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  upload(\n    contentLength: number,\n    body: coreHttp.HttpRequestBody,\n    options?: BlockBlobUploadOptionalParams\n  ): Promise<BlockBlobUploadResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      uploadOperationSpec\n    ) as Promise<BlockBlobUploadResponse>;\n  }\n\n  /**\n   * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read\n   * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are\n   * not supported with Put Blob from URL; the content of an existing blob is overwritten with the\n   * content of the new blob.  To perform partial updates to a block blob’s contents using a source URL,\n   * use the Put Block from URL API in conjunction with Put Block List.\n   * @param contentLength The length of the request.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  putBlobFromUrl(\n    contentLength: number,\n    copySource: string,\n    options?: BlockBlobPutBlobFromUrlOptionalParams\n  ): Promise<BlockBlobPutBlobFromUrlResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      contentLength,\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      putBlobFromUrlOperationSpec\n    ) as Promise<BlockBlobPutBlobFromUrlResponse>;\n  }\n\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n   *                for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  stageBlock(\n    blockId: string,\n    contentLength: number,\n    body: coreHttp.HttpRequestBody,\n    options?: BlockBlobStageBlockOptionalParams\n  ): Promise<BlockBlobStageBlockResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blockId,\n      contentLength,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      stageBlockOperationSpec\n    ) as Promise<BlockBlobStageBlockResponse>;\n  }\n\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob where the contents\n   * are read from a URL.\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n   *                for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param options The options parameters.\n   */\n  stageBlockFromURL(\n    blockId: string,\n    contentLength: number,\n    sourceUrl: string,\n    options?: BlockBlobStageBlockFromURLOptionalParams\n  ): Promise<BlockBlobStageBlockFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blockId,\n      contentLength,\n      sourceUrl,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      stageBlockFromURLOperationSpec\n    ) as Promise<BlockBlobStageBlockFromURLResponse>;\n  }\n\n  /**\n   * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the\n   * blob. In order to be written as part of a blob, a block must have been successfully written to the\n   * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading\n   * only those blocks that have changed, then committing the new and existing blocks together. You can\n   * do this by specifying whether to commit a block from the committed block list or from the\n   * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list\n   * it may belong to.\n   * @param blocks Blob Blocks.\n   * @param options The options parameters.\n   */\n  commitBlockList(\n    blocks: BlockLookupList,\n    options?: BlockBlobCommitBlockListOptionalParams\n  ): Promise<BlockBlobCommitBlockListResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      blocks,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      commitBlockListOperationSpec\n    ) as Promise<BlockBlobCommitBlockListResponse>;\n  }\n\n  /**\n   * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block\n   * blob\n   * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted\n   *                 blocks, or both lists together.\n   * @param options The options parameters.\n   */\n  getBlockList(\n    listType: BlockListType,\n    options?: BlockBlobGetBlockListOptionalParams\n  ): Promise<BlockBlobGetBlockListResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      listType,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getBlockListOperationSpec\n    ) as Promise<BlockBlobGetBlockListResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst uploadOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobUploadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobUploadExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.transactionalContentMD5,\n    Parameters.contentType1,\n    Parameters.accept2,\n    Parameters.blobType2\n  ],\n  mediaType: \"binary\",\n  serializer\n};\nconst putBlobFromUrlOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobPutBlobFromUrlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobPutBlobFromUrlExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceIfTags,\n    Parameters.copySource,\n    Parameters.blobTagsString,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.transactionalContentMD5,\n    Parameters.blobType2,\n    Parameters.copySourceBlobProperties\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst stageBlockOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobStageBlockExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp24,\n    Parameters.blockId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.encryptionScope,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n    Parameters.contentType1,\n    Parameters.accept2\n  ],\n  mediaType: \"binary\",\n  serializer\n};\nconst stageBlockFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobStageBlockFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp24,\n    Parameters.blockId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.encryptionScope,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.sourceUrl,\n    Parameters.sourceContentCrc64,\n    Parameters.sourceRange1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst commitBlockListOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobCommitBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobCommitBlockListExceptionHeaders\n    }\n  },\n  requestBody: Parameters.blocks,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp25],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getBlockListOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlockList,\n      headersMapper: Mappers.BlockBlobGetBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobGetBlockListExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.comp25,\n    Parameters.listType\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifTags\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  deserializationPolicy,\n  disableResponseDecompressionPolicy,\n  HttpClient as IHttpClient,\n  HttpHeaders,\n  HttpOperationResponse,\n  HttpRequestBody,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  ServiceClientOptions,\n  WebResource,\n  proxyPolicy,\n  isNode,\n  TokenCredential,\n  isTokenCredential,\n  tracingPolicy,\n  logPolicy,\n  ProxyOptions,\n  keepAlivePolicy,\n  KeepAliveOptions,\n  generateClientRequestIdPolicy,\n  UserAgentOptions,\n} from \"@azure/core-http\";\n\nimport { logger } from \"./log\";\nimport { StorageBrowserPolicyFactory } from \"./StorageBrowserPolicyFactory\";\nimport { StorageRetryOptions, StorageRetryPolicyFactory } from \"./StorageRetryPolicyFactory\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport {\n  StorageOAuthScopes,\n  StorageBlobLoggingAllowedHeaderNames,\n  StorageBlobLoggingAllowedQueryParameters,\n} from \"./utils/constants\";\nimport { TelemetryPolicyFactory } from \"./TelemetryPolicyFactory\";\nimport { getCachedDefaultHttpClient } from \"./utils/cache\";\nimport { attachCredential } from \"./utils/utils.common\";\nimport { storageBearerTokenChallengeAuthenticationPolicy } from \"./policies/StorageBearerTokenChallengeAuthenticationPolicy\";\n\n// Export following interfaces and types for customers who want to implement their\n// own RequestPolicy or HTTPClient\nexport {\n  BaseRequestPolicy,\n  StorageOAuthScopes,\n  deserializationPolicy,\n  IHttpClient,\n  HttpHeaders,\n  HttpRequestBody,\n  HttpOperationResponse,\n  WebResource,\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions,\n};\n\n/**\n * Option interface for Pipeline constructor.\n */\nexport interface PipelineOptions {\n  /**\n   * Optional. Configures the HTTP client to send requests and receive responses.\n   */\n  httpClient?: IHttpClient;\n}\n\n/**\n * An interface for the {@link Pipeline} class containing HTTP request policies.\n * You can create a default Pipeline by calling {@link newPipeline}.\n * Or you can create a Pipeline with your own policies by the constructor of Pipeline.\n *\n * Refer to {@link newPipeline} and provided policies before implementing your\n * customized Pipeline.\n */\nexport interface PipelineLike {\n  /**\n   * A list of chained request policy factories.\n   */\n  readonly factories: RequestPolicyFactory[];\n  /**\n   * Configures pipeline logger and HTTP client.\n   */\n  readonly options: PipelineOptions;\n  /**\n   * Transfer Pipeline object to ServiceClientOptions object which is required by\n   * ServiceClient constructor.\n   *\n   * @returns The ServiceClientOptions object from this Pipeline.\n   */\n  toServiceClientOptions(): ServiceClientOptions;\n}\n\n/**\n * A helper to decide if a given argument satisfies the Pipeline contract\n * @param pipeline - An argument that may be a Pipeline\n * @returns true when the argument satisfies the Pipeline contract\n */\nexport function isPipelineLike(pipeline: unknown): pipeline is PipelineLike {\n  if (!pipeline || typeof pipeline !== \"object\") {\n    return false;\n  }\n\n  const castPipeline = pipeline as PipelineLike;\n\n  return (\n    Array.isArray(castPipeline.factories) &&\n    typeof castPipeline.options === \"object\" &&\n    typeof castPipeline.toServiceClientOptions === \"function\"\n  );\n}\n\n/**\n * A Pipeline class containing HTTP request policies.\n * You can create a default Pipeline by calling {@link newPipeline}.\n * Or you can create a Pipeline with your own policies by the constructor of Pipeline.\n *\n * Refer to {@link newPipeline} and provided policies before implementing your\n * customized Pipeline.\n */\nexport class Pipeline implements PipelineLike {\n  /**\n   * A list of chained request policy factories.\n   */\n  public readonly factories: RequestPolicyFactory[];\n  /**\n   * Configures pipeline logger and HTTP client.\n   */\n  public readonly options: PipelineOptions;\n\n  /**\n   * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.\n   *\n   * @param factories -\n   * @param options -\n   */\n  constructor(factories: RequestPolicyFactory[], options: PipelineOptions = {}) {\n    this.factories = factories;\n    // when options.httpClient is not specified, passing in a DefaultHttpClient instance to\n    // avoid each client creating its own http client.\n    this.options = {\n      ...options,\n      httpClient: options.httpClient || getCachedDefaultHttpClient(),\n    };\n  }\n\n  /**\n   * Transfer Pipeline object to ServiceClientOptions object which is required by\n   * ServiceClient constructor.\n   *\n   * @returns The ServiceClientOptions object from this Pipeline.\n   */\n  public toServiceClientOptions(): ServiceClientOptions {\n    return {\n      httpClient: this.options.httpClient,\n      requestPolicyFactories: this.factories,\n    };\n  }\n}\n\n/**\n * Options interface for the {@link newPipeline} function.\n */\nexport interface StoragePipelineOptions {\n  /**\n   * Options to configure a proxy for outgoing requests.\n   */\n  proxyOptions?: ProxyOptions;\n  /**\n   * Options for adding user agent details to outgoing requests.\n   */\n  userAgentOptions?: UserAgentOptions;\n  /**\n   * Configures the built-in retry policy behavior.\n   */\n  retryOptions?: StorageRetryOptions;\n  /**\n   * Keep alive configurations. Default keep-alive is enabled.\n   */\n  keepAliveOptions?: KeepAliveOptions;\n  /**\n   * Configures the HTTP client to send requests and receive responses.\n   */\n  httpClient?: IHttpClient;\n  /**\n   * The audience used to retrieve an AAD token.\n   */\n  audience?: string | string[];\n}\n\n/**\n * Creates a new Pipeline object with Credential provided.\n *\n * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n * @param pipelineOptions - Optional. Options.\n * @returns A new Pipeline object.\n */\nexport function newPipeline(\n  credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n  pipelineOptions: StoragePipelineOptions = {}\n): Pipeline {\n  if (credential === undefined) {\n    credential = new AnonymousCredential();\n  }\n\n  // Order is important. Closer to the API at the top & closer to the network at the bottom.\n  // The credential's policy factory must appear close to the wire so it can sign any\n  // changes made by other factories (like UniqueRequestIDPolicyFactory)\n\n  const telemetryPolicy = new TelemetryPolicyFactory(pipelineOptions.userAgentOptions);\n  const factories: RequestPolicyFactory[] = [\n    tracingPolicy({ userAgent: telemetryPolicy.telemetryString }),\n    keepAlivePolicy(pipelineOptions.keepAliveOptions),\n    telemetryPolicy,\n    generateClientRequestIdPolicy(),\n    new StorageBrowserPolicyFactory(),\n    new StorageRetryPolicyFactory(pipelineOptions.retryOptions), // Retry policy should be above any policy that throws retryable errors\n    // Default deserializationPolicy is provided by protocol layer\n    // Use customized XML char key of \"#\" so we could deserialize metadata\n    // with \"_\" key\n    deserializationPolicy(undefined, { xmlCharKey: \"#\" }),\n    logPolicy({\n      logger: logger.info,\n      allowedHeaderNames: StorageBlobLoggingAllowedHeaderNames,\n      allowedQueryParameters: StorageBlobLoggingAllowedQueryParameters,\n    }),\n  ];\n\n  if (isNode) {\n    // policies only available in Node.js runtime, not in browsers\n    factories.push(proxyPolicy(pipelineOptions.proxyOptions));\n    factories.push(disableResponseDecompressionPolicy());\n  }\n  factories.push(\n    isTokenCredential(credential)\n      ? attachCredential(\n          storageBearerTokenChallengeAuthenticationPolicy(\n            credential,\n            pipelineOptions.audience ?? StorageOAuthScopes\n          ),\n          credential\n        )\n      : credential\n  );\n\n  return new Pipeline(factories, pipelineOptions);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The `@azure/logger` configuration for this package.\n */\nexport const logger = createClientLogger(\"storage-blob\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { StorageBrowserPolicy } from \"./policies/StorageBrowserPolicy\";\nexport { StorageBrowserPolicy };\n\n/**\n * StorageBrowserPolicyFactory is a factory class helping generating StorageBrowserPolicy objects.\n */\nexport class StorageBrowserPolicyFactory implements RequestPolicyFactory {\n  /**\n   * Creates a StorageBrowserPolicyFactory object.\n   *\n   * @param nextPolicy -\n   * @param options -\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageBrowserPolicy {\n    return new StorageBrowserPolicy(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource,\n} from \"@azure/core-http\";\n\nimport { HeaderConstants, URLConstants } from \"../utils/constants\";\nimport { setURLParameter } from \"../utils/utils.common\";\n\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n */\nexport class StorageBrowserPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of StorageBrowserPolicy.\n   * @param nextPolicy -\n   * @param options -\n   */\n  // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n      request.url = setURLParameter(\n        request.url,\n        URLConstants.Parameters.FORCE_BROWSER_NO_CACHE,\n        new Date().getTime().toString()\n      );\n    }\n\n    request.headers.remove(HeaderConstants.COOKIE);\n\n    // According to XHR standards, content-length should be fully controlled by browsers\n    request.headers.remove(HeaderConstants.CONTENT_LENGTH);\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const SDK_VERSION: string = \"12.9.0\";\nexport const SERVICE_VERSION: string = \"2021-04-10\";\n\nexport const BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES: number = 256 * 1024 * 1024; // 256MB\nexport const BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES: number = 4000 * 1024 * 1024; // 4000MB\nexport const BLOCK_BLOB_MAX_BLOCKS: number = 50000;\nexport const DEFAULT_BLOCK_BUFFER_SIZE_BYTES: number = 8 * 1024 * 1024; // 8MB\nexport const DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES: number = 4 * 1024 * 1024; // 4MB\nexport const DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS: number = 5;\n/**\n * The OAuth scope to use with Azure Storage.\n */\nexport const StorageOAuthScopes: string | string[] = \"https://storage.azure.com/.default\";\n\nexport const URLConstants = {\n  Parameters: {\n    FORCE_BROWSER_NO_CACHE: \"_\",\n    SIGNATURE: \"sig\",\n    SNAPSHOT: \"snapshot\",\n    VERSIONID: \"versionid\",\n    TIMEOUT: \"timeout\",\n  },\n};\n\nexport const HTTPURLConnection = {\n  HTTP_ACCEPTED: 202,\n  HTTP_CONFLICT: 409,\n  HTTP_NOT_FOUND: 404,\n  HTTP_PRECON_FAILED: 412,\n  HTTP_RANGE_NOT_SATISFIABLE: 416,\n};\n\nexport const HeaderConstants = {\n  AUTHORIZATION: \"Authorization\",\n  AUTHORIZATION_SCHEME: \"Bearer\",\n  CONTENT_ENCODING: \"Content-Encoding\",\n  CONTENT_ID: \"Content-ID\",\n  CONTENT_LANGUAGE: \"Content-Language\",\n  CONTENT_LENGTH: \"Content-Length\",\n  CONTENT_MD5: \"Content-Md5\",\n  CONTENT_TRANSFER_ENCODING: \"Content-Transfer-Encoding\",\n  CONTENT_TYPE: \"Content-Type\",\n  COOKIE: \"Cookie\",\n  DATE: \"date\",\n  IF_MATCH: \"if-match\",\n  IF_MODIFIED_SINCE: \"if-modified-since\",\n  IF_NONE_MATCH: \"if-none-match\",\n  IF_UNMODIFIED_SINCE: \"if-unmodified-since\",\n  PREFIX_FOR_STORAGE: \"x-ms-\",\n  RANGE: \"Range\",\n  USER_AGENT: \"User-Agent\",\n  X_MS_CLIENT_REQUEST_ID: \"x-ms-client-request-id\",\n  X_MS_COPY_SOURCE: \"x-ms-copy-source\",\n  X_MS_DATE: \"x-ms-date\",\n  X_MS_ERROR_CODE: \"x-ms-error-code\",\n  X_MS_VERSION: \"x-ms-version\",\n};\n\nexport const ETagNone = \"\";\nexport const ETagAny = \"*\";\n\nexport const SIZE_1_MB = 1 * 1024 * 1024;\nexport const BATCH_MAX_REQUEST = 256;\nexport const BATCH_MAX_PAYLOAD_IN_BYTES = 4 * SIZE_1_MB;\nexport const HTTP_LINE_ENDING = \"\\r\\n\";\nexport const HTTP_VERSION_1_1 = \"HTTP/1.1\";\n\nexport const EncryptionAlgorithmAES25 = \"AES256\";\n\nexport const DevelopmentConnectionString = `DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;`;\n\nexport const StorageBlobLoggingAllowedHeaderNames = [\n  \"Access-Control-Allow-Origin\",\n  \"Cache-Control\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"Request-Id\",\n  \"traceparent\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n  \"x-ms-client-request-id\",\n  \"x-ms-date\",\n  \"x-ms-error-code\",\n  \"x-ms-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-version\",\n  \"Accept-Ranges\",\n  \"Content-Disposition\",\n  \"Content-Encoding\",\n  \"Content-Language\",\n  \"Content-MD5\",\n  \"Content-Range\",\n  \"ETag\",\n  \"Last-Modified\",\n  \"Server\",\n  \"Vary\",\n  \"x-ms-content-crc64\",\n  \"x-ms-copy-action\",\n  \"x-ms-copy-completion-time\",\n  \"x-ms-copy-id\",\n  \"x-ms-copy-progress\",\n  \"x-ms-copy-status\",\n  \"x-ms-has-immutability-policy\",\n  \"x-ms-has-legal-hold\",\n  \"x-ms-lease-state\",\n  \"x-ms-lease-status\",\n  \"x-ms-range\",\n  \"x-ms-request-server-encrypted\",\n  \"x-ms-server-encrypted\",\n  \"x-ms-snapshot\",\n  \"x-ms-source-range\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"x-ms-access-tier\",\n  \"x-ms-access-tier-change-time\",\n  \"x-ms-access-tier-inferred\",\n  \"x-ms-account-kind\",\n  \"x-ms-archive-status\",\n  \"x-ms-blob-append-offset\",\n  \"x-ms-blob-cache-control\",\n  \"x-ms-blob-committed-block-count\",\n  \"x-ms-blob-condition-appendpos\",\n  \"x-ms-blob-condition-maxsize\",\n  \"x-ms-blob-content-disposition\",\n  \"x-ms-blob-content-encoding\",\n  \"x-ms-blob-content-language\",\n  \"x-ms-blob-content-length\",\n  \"x-ms-blob-content-md5\",\n  \"x-ms-blob-content-type\",\n  \"x-ms-blob-public-access\",\n  \"x-ms-blob-sequence-number\",\n  \"x-ms-blob-type\",\n  \"x-ms-copy-destination-snapshot\",\n  \"x-ms-creation-time\",\n  \"x-ms-default-encryption-scope\",\n  \"x-ms-delete-snapshots\",\n  \"x-ms-delete-type-permanent\",\n  \"x-ms-deny-encryption-scope-override\",\n  \"x-ms-encryption-algorithm\",\n  \"x-ms-if-sequence-number-eq\",\n  \"x-ms-if-sequence-number-le\",\n  \"x-ms-if-sequence-number-lt\",\n  \"x-ms-incremental-copy\",\n  \"x-ms-lease-action\",\n  \"x-ms-lease-break-period\",\n  \"x-ms-lease-duration\",\n  \"x-ms-lease-id\",\n  \"x-ms-lease-time\",\n  \"x-ms-page-write\",\n  \"x-ms-proposed-lease-id\",\n  \"x-ms-range-get-content-md5\",\n  \"x-ms-rehydrate-priority\",\n  \"x-ms-sequence-number-action\",\n  \"x-ms-sku-name\",\n  \"x-ms-source-content-md5\",\n  \"x-ms-source-if-match\",\n  \"x-ms-source-if-modified-since\",\n  \"x-ms-source-if-none-match\",\n  \"x-ms-source-if-unmodified-since\",\n  \"x-ms-tag-count\",\n  \"x-ms-encryption-key-sha256\",\n  \"x-ms-if-tags\",\n  \"x-ms-source-if-tags\",\n];\n\nexport const StorageBlobLoggingAllowedQueryParameters = [\n  \"comp\",\n  \"maxresults\",\n  \"rscc\",\n  \"rscd\",\n  \"rsce\",\n  \"rscl\",\n  \"rsct\",\n  \"se\",\n  \"si\",\n  \"sip\",\n  \"sp\",\n  \"spr\",\n  \"sr\",\n  \"srt\",\n  \"ss\",\n  \"st\",\n  \"sv\",\n  \"include\",\n  \"marker\",\n  \"prefix\",\n  \"copyid\",\n  \"restype\",\n  \"blockid\",\n  \"blocklisttype\",\n  \"delimiter\",\n  \"prevsnapshot\",\n  \"ske\",\n  \"skoid\",\n  \"sks\",\n  \"skt\",\n  \"sktid\",\n  \"skv\",\n  \"snapshot\",\n];\n\nexport const BlobUsesCustomerSpecifiedEncryptionMsg = \"BlobUsesCustomerSpecifiedEncryption\";\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { HttpHeaders, isNode, URLBuilder, TokenCredential } from \"@azure/core-http\";\n\nimport {\n  BlobQueryArrowConfiguration,\n  BlobQueryCsvTextConfiguration,\n  BlobQueryJsonTextConfiguration,\n  BlobQueryParquetConfiguration,\n} from \"../Clients\";\nimport {\n  QuerySerialization,\n  BlobTags,\n  BlobName,\n  ListBlobsFlatSegmentResponse,\n  ListBlobsHierarchySegmentResponse,\n  BlobItemInternal,\n  BlobPrefix,\n  BlobType,\n  LeaseStatusType,\n  LeaseStateType,\n  LeaseDurationType,\n  CopyStatusType,\n  AccessTier,\n  ArchiveStatus,\n  RehydratePriority,\n  BlobImmutabilityPolicyMode,\n  BlobTag,\n} from \"../generated/src/models\";\nimport { DevelopmentConnectionString, HeaderConstants, URLConstants } from \"./constants\";\nimport {\n  Tags,\n  ObjectReplicationPolicy,\n  ObjectReplicationRule,\n  ObjectReplicationStatus,\n  HttpAuthorization,\n} from \"../models\";\nimport {\n  ListBlobsFlatSegmentResponseModel,\n  BlobItemInternal as BlobItemInternalModel,\n  ListBlobsHierarchySegmentResponseModel,\n  BlobPrefix as BlobPrefixModel,\n} from \"../generatedModels\";\n\n/**\n * Reserved URL characters must be properly escaped for Storage services like Blob or File.\n *\n * ## URL encode and escape strategy for JS SDKs\n *\n * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.\n * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL\n * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.\n *\n * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.\n *\n * This is what legacy V2 SDK does, simple and works for most of the cases.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%253A\" and send to server. A blob named \"b%3A\" will be created.\n *\n * But this strategy will make it not possible to create a blob with \"?\" in it's name. Because when customer URL string is\n * \"http://account.blob.core.windows.net/con/blob?name\", the \"?name\" will be treated as URL paramter instead of blob name.\n * If customer URL string is \"http://account.blob.core.windows.net/con/blob%3Fname\", a blob named \"blob%3Fname\" will be created.\n * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.\n * We cannot accept a SDK cannot create a blob name with \"?\". So we implement strategy two:\n *\n * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.\n *\n * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will escape \":\" like \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%3A\" to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%253A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%253A\" to server. A blob named \"b%3A\" will be created.\n *\n * This strategy gives us flexibility to create with any special characters. But \"%\" will be treated as a special characters, if the URL string\n * is not encoded, there shouldn't a \"%\" in the URL string, otherwise the URL is not a valid URL.\n * If customer needs to create a blob with \"%\" in it's blob name, use \"%25\" instead of \"%\". Just like above 3rd sample.\n * And following URL strings are invalid:\n * - \"http://account.blob.core.windows.net/con/b%\"\n * - \"http://account.blob.core.windows.net/con/b%2\"\n * - \"http://account.blob.core.windows.net/con/b%G\"\n *\n * Another special character is \"?\", use \"%2F\" to represent a blob name with \"?\" in a URL string.\n *\n * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`\n *\n * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata\n *\n * @param url -\n */\nexport function escapeURLPath(url: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path || \"/\";\n\n  path = escape(path);\n  urlParsed.setPath(path);\n\n  return urlParsed.toString();\n}\n\nexport interface ConnectionString {\n  kind: \"AccountConnString\" | \"SASConnString\";\n  url: string;\n  accountName: string;\n  accountKey?: any;\n  accountSas?: string;\n  proxyUri?: string; // Development Connection String may contain proxyUri\n}\n\nfunction getProxyUriFromDevConnString(connectionString: string): string {\n  // Development Connection String\n  // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key\n  let proxyUri = \"\";\n  if (connectionString.search(\"DevelopmentStorageProxyUri=\") !== -1) {\n    // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri\n    const matchCredentials = connectionString.split(\";\");\n    for (const element of matchCredentials) {\n      if (element.trim().startsWith(\"DevelopmentStorageProxyUri=\")) {\n        proxyUri = element.trim().match(\"DevelopmentStorageProxyUri=(.*)\")![1];\n      }\n    }\n  }\n  return proxyUri;\n}\n\nexport function getValueInConnString(\n  connectionString: string,\n  argument:\n    | \"BlobEndpoint\"\n    | \"AccountName\"\n    | \"AccountKey\"\n    | \"DefaultEndpointsProtocol\"\n    | \"EndpointSuffix\"\n    | \"SharedAccessSignature\"\n): string {\n  const elements = connectionString.split(\";\");\n  for (const element of elements) {\n    if (element.trim().startsWith(argument)) {\n      return element.trim().match(argument + \"=(.*)\")![1];\n    }\n  }\n  return \"\";\n}\n\n/**\n * Extracts the parts of an Azure Storage account connection string.\n *\n * @param connectionString - Connection string.\n * @returns String key value pairs of the storage account's url and credentials.\n */\nexport function extractConnectionStringParts(connectionString: string): ConnectionString {\n  let proxyUri = \"\";\n\n  if (connectionString.startsWith(\"UseDevelopmentStorage=true\")) {\n    // Development connection string\n    proxyUri = getProxyUriFromDevConnString(connectionString);\n    connectionString = DevelopmentConnectionString;\n  }\n\n  // Matching BlobEndpoint in the Account connection string\n  let blobEndpoint = getValueInConnString(connectionString, \"BlobEndpoint\");\n  // Slicing off '/' at the end if exists\n  // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n  blobEndpoint = blobEndpoint.endsWith(\"/\") ? blobEndpoint.slice(0, -1) : blobEndpoint;\n\n  if (\n    connectionString.search(\"DefaultEndpointsProtocol=\") !== -1 &&\n    connectionString.search(\"AccountKey=\") !== -1\n  ) {\n    // Account connection string\n\n    let defaultEndpointsProtocol = \"\";\n    let accountName = \"\";\n    let accountKey = Buffer.from(\"accountKey\", \"base64\");\n    let endpointSuffix = \"\";\n\n    // Get account name and key\n    accountName = getValueInConnString(connectionString, \"AccountName\");\n    accountKey = Buffer.from(getValueInConnString(connectionString, \"AccountKey\"), \"base64\");\n\n    if (!blobEndpoint) {\n      // BlobEndpoint is not present in the Account connection string\n      // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`\n\n      defaultEndpointsProtocol = getValueInConnString(connectionString, \"DefaultEndpointsProtocol\");\n      const protocol = defaultEndpointsProtocol!.toLowerCase();\n      if (protocol !== \"https\" && protocol !== \"http\") {\n        throw new Error(\n          \"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\"\n        );\n      }\n\n      endpointSuffix = getValueInConnString(connectionString, \"EndpointSuffix\");\n      if (!endpointSuffix) {\n        throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n      }\n      blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n    }\n\n    if (!accountName) {\n      throw new Error(\"Invalid AccountName in the provided Connection String\");\n    } else if (accountKey.length === 0) {\n      throw new Error(\"Invalid AccountKey in the provided Connection String\");\n    }\n\n    return {\n      kind: \"AccountConnString\",\n      url: blobEndpoint,\n      accountName,\n      accountKey,\n      proxyUri,\n    };\n  } else {\n    // SAS connection string\n\n    const accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n    const accountName = getAccountNameFromUrl(blobEndpoint);\n    if (!blobEndpoint) {\n      throw new Error(\"Invalid BlobEndpoint in the provided SAS Connection String\");\n    } else if (!accountSas) {\n      throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n    }\n\n    return { kind: \"SASConnString\", url: blobEndpoint, accountName, accountSas };\n  }\n}\n\n/**\n * Internal escape method implemented Strategy Two mentioned in escapeURL() description.\n *\n * @param text -\n */\nfunction escape(text: string): string {\n  return encodeURIComponent(text)\n    .replace(/%2F/g, \"/\") // Don't escape for \"/\"\n    .replace(/'/g, \"%27\") // Escape for \"'\"\n    .replace(/\\+/g, \"%20\")\n    .replace(/%25/g, \"%\"); // Revert encoded \"%\"\n}\n\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @param url - Source URL string\n * @param name - String to be appended to URL\n * @returns An updated URL string\n */\nexport function appendToURLPath(url: string, name: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path ? (path.endsWith(\"/\") ? `${path}${name}` : `${path}/${name}`) : name;\n  urlParsed.setPath(path);\n\n  return urlParsed.toString();\n}\n\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @param url - Source URL string\n * @param name - Parameter name\n * @param value - Parameter value\n * @returns An updated URL string\n */\nexport function setURLParameter(url: string, name: string, value?: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setQueryParameter(name, value);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL parameter by name.\n *\n * @param url -\n * @param name -\n */\nexport function getURLParameter(url: string, name: string): string | string[] | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getQueryParameterValue(name);\n}\n\n/**\n * Set URL host.\n *\n * @param url - Source URL string\n * @param host - New host string\n * @returns An updated URL string\n */\nexport function setURLHost(url: string, host: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setHost(host);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL path from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPath(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getPath();\n}\n\n/**\n * Get URL scheme from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLScheme(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getScheme();\n}\n\n/**\n * Get URL path and query from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPathAndQuery(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  const pathString = urlParsed.getPath();\n  if (!pathString) {\n    throw new RangeError(\"Invalid url without valid path.\");\n  }\n\n  let queryString = urlParsed.getQuery() || \"\";\n  queryString = queryString.trim();\n  if (queryString !== \"\") {\n    queryString = queryString.startsWith(\"?\") ? queryString : `?${queryString}`; // Ensure query string start with '?'\n  }\n\n  return `${pathString}${queryString}`;\n}\n\n/**\n * Get URL query key value pairs from an URL string.\n *\n * @param url -\n */\nexport function getURLQueries(url: string): { [key: string]: string } {\n  let queryString = URLBuilder.parse(url).getQuery();\n  if (!queryString) {\n    return {};\n  }\n\n  queryString = queryString.trim();\n  queryString = queryString.startsWith(\"?\") ? queryString.substr(1) : queryString;\n\n  let querySubStrings: string[] = queryString.split(\"&\");\n  querySubStrings = querySubStrings.filter((value: string) => {\n    const indexOfEqual = value.indexOf(\"=\");\n    const lastIndexOfEqual = value.lastIndexOf(\"=\");\n    return (\n      indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1\n    );\n  });\n\n  const queries: { [key: string]: string } = {};\n  for (const querySubString of querySubStrings) {\n    const splitResults = querySubString.split(\"=\");\n    const key: string = splitResults[0];\n    const value: string = splitResults[1];\n    queries[key] = value;\n  }\n\n  return queries;\n}\n\n/**\n * Append a string to URL query.\n *\n * @param url - Source URL string.\n * @param queryParts - String to be appended to the URL query.\n * @returns An updated URL string.\n */\nexport function appendToURLQuery(url: string, queryParts: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let query = urlParsed.getQuery();\n  if (query) {\n    query += \"&\" + queryParts;\n  } else {\n    query = queryParts;\n  }\n\n  urlParsed.setQuery(query);\n  return urlParsed.toString();\n}\n\n/**\n * Rounds a date off to seconds.\n *\n * @param date -\n * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns Date string in ISO8061 format, with or without 7 milliseconds component\n */\nexport function truncatedISO8061Date(date: Date, withMilliseconds: boolean = true): string {\n  // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n  const dateString = date.toISOString();\n\n  return withMilliseconds\n    ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\"\n    : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n\n/**\n * Base64 encode.\n *\n * @param content -\n */\nexport function base64encode(content: string): string {\n  return !isNode ? btoa(content) : Buffer.from(content).toString(\"base64\");\n}\n\n/**\n * Base64 decode.\n *\n * @param encodedString -\n */\nexport function base64decode(encodedString: string): string {\n  return !isNode ? atob(encodedString) : Buffer.from(encodedString, \"base64\").toString();\n}\n\n/**\n * Generate a 64 bytes base64 block ID string.\n *\n * @param blockIndex -\n */\nexport function generateBlockID(blockIDPrefix: string, blockIndex: number): string {\n  // To generate a 64 bytes base64 string, source string should be 48\n  const maxSourceStringLength = 48;\n\n  // A blob can have a maximum of 100,000 uncommitted blocks at any given time\n  const maxBlockIndexLength = 6;\n\n  const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;\n\n  if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {\n    blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);\n  }\n  const res =\n    blockIDPrefix +\n    padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, \"0\");\n  return base64encode(res);\n}\n\n/**\n * Delay specified time interval.\n *\n * @param timeInMs -\n * @param aborter -\n * @param abortError -\n */\nexport async function delay(\n  timeInMs: number,\n  aborter?: AbortSignalLike,\n  abortError?: Error\n): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    /* eslint-disable-next-line prefer-const */\n    let timeout: any;\n\n    const abortHandler = () => {\n      if (timeout !== undefined) {\n        clearTimeout(timeout);\n      }\n      reject(abortError);\n    };\n\n    const resolveHandler = () => {\n      if (aborter !== undefined) {\n        aborter.removeEventListener(\"abort\", abortHandler);\n      }\n      resolve();\n    };\n\n    timeout = setTimeout(resolveHandler, timeInMs);\n\n    if (aborter !== undefined) {\n      aborter.addEventListener(\"abort\", abortHandler);\n    }\n  });\n}\n\n/**\n * String.prototype.padStart()\n *\n * @param currentString -\n * @param targetLength -\n * @param padString -\n */\nexport function padStart(\n  currentString: string,\n  targetLength: number,\n  padString: string = \" \"\n): string {\n  // @ts-expect-error: TS doesn't know this code needs to run downlevel sometimes\n  if (String.prototype.padStart) {\n    return currentString.padStart(targetLength, padString);\n  }\n\n  padString = padString || \" \";\n  if (currentString.length > targetLength) {\n    return currentString;\n  } else {\n    targetLength = targetLength - currentString.length;\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length);\n    }\n    return padString.slice(0, targetLength) + currentString;\n  }\n}\n\nexport function sanitizeURL(url: string): string {\n  let safeURL: string = url;\n  if (getURLParameter(safeURL, URLConstants.Parameters.SIGNATURE)) {\n    safeURL = setURLParameter(safeURL, URLConstants.Parameters.SIGNATURE, \"*****\");\n  }\n\n  return safeURL;\n}\n\nexport function sanitizeHeaders(originalHeader: HttpHeaders): HttpHeaders {\n  const headers: HttpHeaders = new HttpHeaders();\n  for (const header of originalHeader.headersArray()) {\n    if (header.name.toLowerCase() === HeaderConstants.AUTHORIZATION.toLowerCase()) {\n      headers.set(header.name, \"*****\");\n    } else if (header.name.toLowerCase() === HeaderConstants.X_MS_COPY_SOURCE) {\n      headers.set(header.name, sanitizeURL(header.value));\n    } else {\n      headers.set(header.name, header.value);\n    }\n  }\n\n  return headers;\n}\n/**\n * If two strings are equal when compared case insensitive.\n *\n * @param str1 -\n * @param str2 -\n */\nexport function iEqual(str1: string, str2: string): boolean {\n  return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();\n}\n\n/**\n * Extracts account name from the url\n * @param url - url to extract the account name from\n * @returns with the account name\n */\nexport function getAccountNameFromUrl(url: string): string {\n  const parsedUrl: URLBuilder = URLBuilder.parse(url);\n  let accountName;\n  try {\n    if (parsedUrl.getHost()!.split(\".\")[1] === \"blob\") {\n      // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n      accountName = parsedUrl.getHost()!.split(\".\")[0];\n    } else if (isIpEndpointStyle(parsedUrl)) {\n      // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/\n      // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/\n      // .getPath() -> /devstoreaccount1/\n      accountName = parsedUrl.getPath()!.split(\"/\")[1];\n    } else {\n      // Custom domain case: \"https://customdomain.com/containername/blob\".\n      accountName = \"\";\n    }\n    return accountName;\n  } catch (error) {\n    throw new Error(\"Unable to extract accountName with provided information.\");\n  }\n}\n\nexport function isIpEndpointStyle(parsedUrl: URLBuilder): boolean {\n  if (parsedUrl.getHost() === undefined) {\n    return false;\n  }\n\n  const host =\n    parsedUrl.getHost()! + (parsedUrl.getPort() === undefined ? \"\" : \":\" + parsedUrl.getPort());\n\n  // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.\n  // Case 2: localhost(:port), use broad regex to match port part.\n  // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.\n  // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.\n  return /^.*:.*:.*$|^localhost(:[0-9]+)?$|^(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])){3}(:[0-9]+)?$/.test(\n    host\n  );\n}\n\n/**\n * Convert Tags to encoded string.\n *\n * @param tags -\n */\nexport function toBlobTagsString(tags?: Tags): string | undefined {\n  if (tags === undefined) {\n    return undefined;\n  }\n\n  const tagPairs = [];\n  for (const key in tags) {\n    if (Object.prototype.hasOwnProperty.call(tags, key)) {\n      const value = tags[key];\n      tagPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n    }\n  }\n\n  return tagPairs.join(\"&\");\n}\n\n/**\n * Convert Tags type to BlobTags.\n *\n * @param tags -\n */\nexport function toBlobTags(tags?: Tags): BlobTags | undefined {\n  if (tags === undefined) {\n    return undefined;\n  }\n\n  const res: BlobTags = {\n    blobTagSet: [],\n  };\n\n  for (const key in tags) {\n    if (Object.prototype.hasOwnProperty.call(tags, key)) {\n      const value = tags[key];\n      res.blobTagSet.push({\n        key,\n        value,\n      });\n    }\n  }\n  return res;\n}\n\n/**\n * Covert BlobTags to Tags type.\n *\n * @param tags -\n */\nexport function toTags(tags?: BlobTags): Tags | undefined {\n  if (tags === undefined) {\n    return undefined;\n  }\n\n  const res: Tags = {};\n  for (const blobTag of tags.blobTagSet) {\n    res[blobTag.key] = blobTag.value;\n  }\n  return res;\n}\n\n/**\n * Convert BlobQueryTextConfiguration to QuerySerialization type.\n *\n * @param textConfiguration -\n */\nexport function toQuerySerialization(\n  textConfiguration?:\n    | BlobQueryJsonTextConfiguration\n    | BlobQueryCsvTextConfiguration\n    | BlobQueryArrowConfiguration\n    | BlobQueryParquetConfiguration\n): QuerySerialization | undefined {\n  if (textConfiguration === undefined) {\n    return undefined;\n  }\n\n  switch (textConfiguration.kind) {\n    case \"csv\":\n      return {\n        format: {\n          type: \"delimited\",\n          delimitedTextConfiguration: {\n            columnSeparator: textConfiguration.columnSeparator || \",\",\n            fieldQuote: textConfiguration.fieldQuote || \"\",\n            recordSeparator: textConfiguration.recordSeparator,\n            escapeChar: textConfiguration.escapeCharacter || \"\",\n            headersPresent: textConfiguration.hasHeaders || false,\n          },\n        },\n      };\n    case \"json\":\n      return {\n        format: {\n          type: \"json\",\n          jsonTextConfiguration: {\n            recordSeparator: textConfiguration.recordSeparator,\n          },\n        },\n      };\n    case \"arrow\":\n      return {\n        format: {\n          type: \"arrow\",\n          arrowConfiguration: {\n            schema: textConfiguration.schema,\n          },\n        },\n      };\n    case \"parquet\":\n      return {\n        format: {\n          type: \"parquet\",\n        },\n      };\n\n    default:\n      throw Error(\"Invalid BlobQueryTextConfiguration.\");\n  }\n}\n\nexport function parseObjectReplicationRecord(\n  objectReplicationRecord?: Record<string, string>\n): ObjectReplicationPolicy[] | undefined {\n  if (!objectReplicationRecord) {\n    return undefined;\n  }\n\n  if (\"policy-id\" in objectReplicationRecord) {\n    // If the dictionary contains a key with policy id, we are not required to do any parsing since\n    // the policy id should already be stored in the ObjectReplicationDestinationPolicyId.\n    return undefined;\n  }\n\n  const orProperties: ObjectReplicationPolicy[] = [];\n  for (const key in objectReplicationRecord) {\n    const ids = key.split(\"_\");\n    const policyPrefix = \"or-\";\n    if (ids[0].startsWith(policyPrefix)) {\n      ids[0] = ids[0].substring(policyPrefix.length);\n    }\n    const rule: ObjectReplicationRule = {\n      ruleId: ids[1],\n      replicationStatus: objectReplicationRecord[key] as ObjectReplicationStatus,\n    };\n    const policyIndex = orProperties.findIndex((policy) => policy.policyId === ids[0]);\n    if (policyIndex > -1) {\n      orProperties[policyIndex].rules.push(rule);\n    } else {\n      orProperties.push({\n        policyId: ids[0],\n        rules: [rule],\n      });\n    }\n  }\n  return orProperties;\n}\n\n/**\n * Attach a TokenCredential to an object.\n *\n * @param thing -\n * @param credential -\n */\nexport function attachCredential<T>(thing: T, credential: TokenCredential): T {\n  (thing as any).credential = credential;\n  return thing;\n}\n\nexport function httpAuthorizationToString(\n  httpAuthorization?: HttpAuthorization\n): string | undefined {\n  return httpAuthorization ? httpAuthorization.scheme + \" \" + httpAuthorization.value : undefined;\n}\n\nexport function BlobNameToString(name: BlobName): string {\n  if (name.encoded) {\n    return decodeURIComponent(name.content!);\n  } else {\n    return name.content!;\n  }\n}\n\nexport function ConvertInternalResponseOfListBlobFlat(\n  internalResponse: ListBlobsFlatSegmentResponse\n): ListBlobsFlatSegmentResponseModel {\n  return {\n    ...internalResponse,\n    segment: {\n      blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n        const blobItem: BlobItemInternalModel = {\n          ...blobItemInteral,\n          name: BlobNameToString(blobItemInteral.name),\n        };\n        return blobItem;\n      }),\n    },\n  };\n}\n\nexport function ConvertInternalResponseOfListBlobHierarchy(\n  internalResponse: ListBlobsHierarchySegmentResponse\n): ListBlobsHierarchySegmentResponseModel {\n  return {\n    ...internalResponse,\n    segment: {\n      blobPrefixes: internalResponse.segment.blobPrefixes?.map((blobPrefixInternal) => {\n        const blobPrefix: BlobPrefixModel = {\n          name: BlobNameToString(blobPrefixInternal.name),\n        };\n        return blobPrefix;\n      }),\n      blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n        const blobItem: BlobItemInternalModel = {\n          ...blobItemInteral,\n          name: BlobNameToString(blobItemInteral.name),\n        };\n        return blobItem;\n      }),\n    },\n  };\n}\n\nfunction decodeBase64String(value: string): Uint8Array {\n  if (isNode) {\n    return Buffer.from(value, \"base64\");\n  } else {\n    const byteString = atob(value);\n    const arr = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; i++) {\n      arr[i] = byteString.charCodeAt(i);\n    }\n    return arr;\n  }\n}\n\nfunction ParseBoolean(content: any) {\n  if (content === undefined) return undefined;\n  if (content === \"true\") return true;\n  if (content === \"false\") return false;\n  return undefined;\n}\n\nfunction ParseBlobName(blobNameInXML: any): BlobName {\n  if (blobNameInXML[\"$\"] !== undefined && blobNameInXML[\"#\"] !== undefined) {\n    return {\n      encoded: ParseBoolean(blobNameInXML[\"$\"][\"Encoded\"]),\n      content: blobNameInXML[\"#\"] as string,\n    };\n  } else {\n    return {\n      encoded: false,\n      content: blobNameInXML as string,\n    };\n  }\n}\n\nfunction ParseBlobItem(blobInXML: any): BlobItemInternal {\n  const blobPropertiesInXML = blobInXML[\"Properties\"];\n  const blobProperties = {\n    createdOn: new Date(blobPropertiesInXML[\"Creation-Time\"] as string),\n    lastModified: new Date(blobPropertiesInXML[\"Last-Modified\"] as string),\n    etag: blobPropertiesInXML[\"Etag\"] as string,\n    contentLength:\n      blobPropertiesInXML[\"Content-Length\"] === undefined\n        ? undefined\n        : parseFloat(blobPropertiesInXML[\"Content-Length\"] as string),\n    contentType: blobPropertiesInXML[\"Content-Type\"] as string,\n    contentEncoding: blobPropertiesInXML[\"Content-Encoding\"] as string,\n    contentLanguage: blobPropertiesInXML[\"Content-Language\"] as string,\n    contentMD5: decodeBase64String(blobPropertiesInXML[\"Content-MD5\"] as string),\n    contentDisposition: blobPropertiesInXML[\"Content-Disposition\"] as string,\n    cacheControl: blobPropertiesInXML[\"Cache-Control\"] as string,\n    blobSequenceNumber:\n      blobPropertiesInXML[\"x-ms-blob-sequence-number\"] === undefined\n        ? undefined\n        : parseFloat(blobPropertiesInXML[\"x-ms-blob-sequence-number\"] as string),\n    blobType: blobPropertiesInXML[\"BlobType\"] as BlobType,\n    leaseStatus: blobPropertiesInXML[\"LeaseStatus\"] as LeaseStatusType,\n    leaseState: blobPropertiesInXML[\"LeaseState\"] as LeaseStateType,\n    leaseDuration: blobPropertiesInXML[\"LeaseDuration\"] as LeaseDurationType,\n    copyId: blobPropertiesInXML[\"CopyId\"] as string,\n    copyStatus: blobPropertiesInXML[\"CopyStatus\"] as CopyStatusType,\n    copySource: blobPropertiesInXML[\"CopySource\"] as string,\n    copyProgress: blobPropertiesInXML[\"CopyProgress\"] as string,\n    copyCompletedOn:\n      blobPropertiesInXML[\"CopyCompletionTime\"] === undefined\n        ? undefined\n        : new Date(blobPropertiesInXML[\"CopyCompletionTime\"] as string),\n    copyStatusDescription: blobPropertiesInXML[\"CopyStatusDescription\"] as string,\n    serverEncrypted: ParseBoolean(blobPropertiesInXML[\"ServerEncrypted\"]),\n    incrementalCopy: ParseBoolean(blobPropertiesInXML[\"IncrementalCopy\"]),\n    destinationSnapshot: blobPropertiesInXML[\"DestinationSnapshot\"] as string,\n    deletedOn:\n      blobPropertiesInXML[\"DeletedTime\"] === undefined\n        ? undefined\n        : new Date(blobPropertiesInXML[\"DeletedTime\"] as string),\n    remainingRetentionDays:\n      blobPropertiesInXML[\"RemainingRetentionDays\"] === undefined\n        ? undefined\n        : parseFloat(blobPropertiesInXML[\"RemainingRetentionDays\"] as string),\n    accessTier: blobPropertiesInXML[\"AccessTier\"] as AccessTier,\n    accessTierInferred: ParseBoolean(blobPropertiesInXML[\"AccessTierInferred\"]),\n    archiveStatus: blobPropertiesInXML[\"ArchiveStatus\"] as ArchiveStatus,\n    customerProvidedKeySha256: blobPropertiesInXML[\"CustomerProvidedKeySha256\"] as string,\n    encryptionScope: blobPropertiesInXML[\"EncryptionScope\"] as string,\n    accessTierChangedOn:\n      blobPropertiesInXML[\"AccessTierChangeTime\"] === undefined\n        ? undefined\n        : new Date(blobPropertiesInXML[\"AccessTierChangeTime\"] as string),\n    tagCount:\n      blobPropertiesInXML[\"TagCount\"] === undefined\n        ? undefined\n        : parseFloat(blobPropertiesInXML[\"TagCount\"] as string),\n    expiresOn:\n      blobPropertiesInXML[\"Expiry-Time\"] === undefined\n        ? undefined\n        : new Date(blobPropertiesInXML[\"Expiry-Time\"] as string),\n    isSealed: ParseBoolean(blobPropertiesInXML[\"Sealed\"]),\n    rehydratePriority: blobPropertiesInXML[\"RehydratePriority\"] as RehydratePriority,\n    lastAccessedOn:\n      blobPropertiesInXML[\"LastAccessTime\"] === undefined\n        ? undefined\n        : new Date(blobPropertiesInXML[\"LastAccessTime\"] as string),\n    immutabilityPolicyExpiresOn:\n      blobPropertiesInXML[\"ImmutabilityPolicyUntilDate\"] === undefined\n        ? undefined\n        : new Date(blobPropertiesInXML[\"ImmutabilityPolicyUntilDate\"] as string),\n    immutabilityPolicyMode: blobPropertiesInXML[\n      \"ImmutabilityPolicyMode\"\n    ] as BlobImmutabilityPolicyMode,\n    legalHold: ParseBoolean(blobPropertiesInXML[\"LegalHold\"]),\n  };\n\n  return {\n    name: ParseBlobName(blobInXML[\"Name\"]),\n    deleted: ParseBoolean(blobInXML[\"Deleted\"])!,\n    snapshot: blobInXML[\"Snapshot\"] as string,\n    versionId: blobInXML[\"VersionId\"] as string,\n    isCurrentVersion: ParseBoolean(blobInXML[\"IsCurrentVersion\"]),\n    properties: blobProperties,\n    metadata: blobInXML[\"Metadata\"],\n    blobTags: ParseBlobTags(blobInXML[\"Tags\"]),\n    objectReplicationMetadata: blobInXML[\"OrMetadata\"],\n    hasVersionsOnly: ParseBoolean(blobInXML[\"HasVersionsOnly\"]),\n  };\n}\n\nfunction ParseBlobPrefix(blobPrefixInXML: any): BlobPrefix {\n  return {\n    name: ParseBlobName(blobPrefixInXML[\"Name\"]),\n  };\n}\n\nfunction ParseBlobTag(blobTagInXML: any): BlobTag {\n  return {\n    key: blobTagInXML[\"Key\"],\n    value: blobTagInXML[\"Value\"],\n  };\n}\n\nfunction ParseBlobTags(blobTagsInXML: any): BlobTags | undefined {\n  if (\n    blobTagsInXML === undefined ||\n    blobTagsInXML[\"TagSet\"] === undefined ||\n    blobTagsInXML[\"TagSet\"][\"Tag\"] === undefined\n  ) {\n    return undefined;\n  }\n\n  const blobTagSet = [];\n  if (blobTagsInXML[\"TagSet\"][\"Tag\"] instanceof Array) {\n    blobTagsInXML[\"TagSet\"][\"Tag\"].forEach((blobTagInXML: any) => {\n      blobTagSet.push(ParseBlobTag(blobTagInXML));\n    });\n  } else {\n    blobTagSet.push(ParseBlobTag(blobTagsInXML[\"TagSet\"][\"Tag\"]));\n  }\n\n  return { blobTagSet: blobTagSet };\n}\n\nexport function ProcessBlobItems(blobArrayInXML: any[]): BlobItemInternal[] {\n  const blobItems = [];\n\n  if (blobArrayInXML instanceof Array) {\n    blobArrayInXML.forEach((blobInXML: any) => {\n      blobItems.push(ParseBlobItem(blobInXML));\n    });\n  } else {\n    blobItems.push(ParseBlobItem(blobArrayInXML));\n  }\n\n  return blobItems;\n}\n\nexport function ProcessBlobPrefixes(blobPrefixesInXML: any[]): BlobPrefix[] {\n  const blobPrefixes = [];\n\n  if (blobPrefixesInXML instanceof Array) {\n    blobPrefixesInXML.forEach((blobPrefixInXML: any) => {\n      blobPrefixes.push(ParseBlobPrefix(blobPrefixInXML));\n    });\n  } else {\n    blobPrefixes.push(ParseBlobPrefix(blobPrefixesInXML));\n  }\n\n  return blobPrefixes;\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { StorageRetryPolicy, StorageRetryPolicyType } from \"./policies/StorageRetryPolicy\";\n\nexport { StorageRetryPolicyType, StorageRetryPolicy };\n\n/**\n * Storage Blob retry options interface.\n */\nexport interface StorageRetryOptions {\n  /**\n   * Optional. StorageRetryPolicyType, default is exponential retry policy.\n   */\n  readonly retryPolicyType?: StorageRetryPolicyType;\n\n  /**\n   * Optional. Max try number of attempts, default is 4.\n   * A value of 1 means 1 try and no retries.\n   * A value smaller than 1 means default retry number of attempts.\n   */\n  readonly maxTries?: number;\n\n  /**\n   * Optional. Indicates the maximum time in ms allowed for any single try of an HTTP request.\n   * A value of zero or undefined means no default timeout on SDK client, Azure\n   * Storage server's default timeout policy will be used.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\n   */\n  readonly tryTimeoutInMs?: number;\n\n  /**\n   * Optional. Specifies the amount of delay to use before retrying an operation (default is 4s or 4 * 1000ms).\n   * The delay increases (exponentially or linearly) with each retry up to a maximum specified by\n   * maxRetryDelayInMs. If you specify 0, then you must also specify 0 for maxRetryDelayInMs.\n   */\n  readonly retryDelayInMs?: number;\n\n  /**\n   * Optional. Specifies the maximum delay allowed before retrying an operation (default is 120s or 120 * 1000ms).\n   * If you specify 0, then you must also specify 0 for retryDelayInMs.\n   */\n  readonly maxRetryDelayInMs?: number;\n\n  /**\n   * If a secondaryHost is specified, retries will be tried against this host. If secondaryHost is undefined\n   * (the default) then operations are not retried against another host.\n   *\n   * NOTE: Before setting this field, make sure you understand the issues around\n   * reading stale and potentially-inconsistent data at\n   * {@link https://docs.microsoft.com/en-us/azure/storage/common/storage-designing-ha-apps-with-ragrs}\n   */\n  readonly secondaryHost?: string;\n}\n\n/**\n * StorageRetryPolicyFactory is a factory class helping generating {@link StorageRetryPolicy} objects.\n */\nexport class StorageRetryPolicyFactory implements RequestPolicyFactory {\n  private retryOptions?: StorageRetryOptions;\n\n  /**\n   * Creates an instance of StorageRetryPolicyFactory.\n   * @param retryOptions -\n   */\n  constructor(retryOptions?: StorageRetryOptions) {\n    this.retryOptions = retryOptions;\n  }\n\n  /**\n   * Creates a StorageRetryPolicy object.\n   *\n   * @param nextPolicy -\n   * @param options -\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageRetryPolicy {\n    return new StorageRetryPolicy(nextPolicy, options, this.retryOptions);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\n\nimport {\n  AbortSignalLike,\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  RestError,\n  WebResource,\n} from \"@azure/core-http\";\n\nimport { StorageRetryOptions } from \"../StorageRetryPolicyFactory\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nexport function NewRetryPolicyFactory(retryOptions?: StorageRetryOptions): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageRetryPolicy => {\n      return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n    },\n  };\n}\n\n/**\n * RetryPolicy types.\n */\nexport enum StorageRetryPolicyType {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  EXPONENTIAL,\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n  FIXED,\n}\n\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS: StorageRetryOptions = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\n\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n  /**\n   * RetryOptions.\n   */\n  private readonly retryOptions: StorageRetryOptions;\n\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param retryOptions -\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryOptions: StorageRetryOptions = DEFAULT_RETRY_OPTIONS\n  ) {\n    super(nextPolicy, options);\n\n    // Initialize retry options\n    this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType\n        ? retryOptions.retryPolicyType\n        : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n\n      maxTries:\n        retryOptions.maxTries && retryOptions.maxTries >= 1\n          ? Math.floor(retryOptions.maxTries)\n          : DEFAULT_RETRY_OPTIONS.maxTries,\n\n      tryTimeoutInMs:\n        retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n          ? retryOptions.tryTimeoutInMs\n          : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n\n      retryDelayInMs:\n        retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n          ? Math.min(\n              retryOptions.retryDelayInMs,\n              retryOptions.maxRetryDelayInMs\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs!\n            )\n          : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n\n      maxRetryDelayInMs:\n        retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n          ? retryOptions.maxRetryDelayInMs\n          : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n\n      secondaryHost: retryOptions.secondaryHost\n        ? retryOptions.secondaryHost\n        : DEFAULT_RETRY_OPTIONS.secondaryHost,\n    };\n  }\n\n  /**\n   * Sends request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.attemptSendRequest(request, false, 1);\n  }\n\n  /**\n   * Decide and perform next retry. Won't mutate request parameter.\n   *\n   * @param request -\n   * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n   *                                   the resource was not found. This may be due to replication delay. So, in this\n   *                                   case, we'll never try the secondary again for this operation.\n   * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n   *                                   the attempt will be performed by this method call.\n   */\n  protected async attemptSendRequest(\n    request: WebResource,\n    secondaryHas404: boolean,\n    attempt: number\n  ): Promise<HttpOperationResponse> {\n    const newRequest: WebResource = request.clone();\n\n    const isPrimaryRetry =\n      secondaryHas404 ||\n      !this.retryOptions.secondaryHost ||\n      !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n      attempt % 2 === 1;\n\n    if (!isPrimaryRetry) {\n      newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost!);\n    }\n\n    // Set the server-side timeout query parameter \"timeout=[seconds]\"\n    if (this.retryOptions.tryTimeoutInMs) {\n      newRequest.url = setURLParameter(\n        newRequest.url,\n        URLConstants.Parameters.TIMEOUT,\n        Math.floor(this.retryOptions.tryTimeoutInMs! / 1000).toString()\n      );\n    }\n\n    let response: HttpOperationResponse | undefined;\n    try {\n      logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n      response = await this._nextPolicy.sendRequest(newRequest);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n        return response;\n      }\n\n      secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n    } catch (err) {\n      logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n        throw err;\n      }\n    }\n\n    await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n    return this.attemptSendRequest(request, secondaryHas404, ++attempt);\n  }\n\n  /**\n   * Decide whether to retry according to last HTTP response and retry counters.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param response -\n   * @param err -\n   */\n  protected shouldRetry(\n    isPrimaryRetry: boolean,\n    attempt: number,\n    response?: HttpOperationResponse,\n    err?: RestError\n  ): boolean {\n    if (attempt >= this.retryOptions.maxTries!) {\n      logger.info(\n        `RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n          .maxTries!}, no further try.`\n      );\n      return false;\n    }\n\n    // Handle network failures, you may need to customize the list when you implement\n    // your own http client\n    const retriableErrors = [\n      \"ETIMEDOUT\",\n      \"ESOCKETTIMEDOUT\",\n      \"ECONNREFUSED\",\n      \"ECONNRESET\",\n      \"ENOENT\",\n      \"ENOTFOUND\",\n      \"TIMEOUT\",\n      \"EPIPE\",\n      \"REQUEST_SEND_ERROR\", // For default xhr based http client provided in ms-rest-js\n    ];\n    if (err) {\n      for (const retriableError of retriableErrors) {\n        if (\n          err.name.toUpperCase().includes(retriableError) ||\n          err.message.toUpperCase().includes(retriableError) ||\n          (err.code && err.code.toString().toUpperCase() === retriableError)\n        ) {\n          logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n          return true;\n        }\n      }\n    }\n\n    // If attempt was against the secondary & it returned a StatusNotFound (404), then\n    // the resource was not found. This may be due to replication delay. So, in this\n    // case, we'll never try the secondary again for this operation.\n    if (response || err) {\n      const statusCode = response ? response.status : err ? err.statusCode : 0;\n      if (!isPrimaryRetry && statusCode === 404) {\n        logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n        return true;\n      }\n\n      // Server internal error or server timeout\n      if (statusCode === 503 || statusCode === 500) {\n        logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n        return true;\n      }\n    }\n\n    if (err?.code === \"PARSE_ERROR\" && err?.message.startsWith(`Error \"Error: Unclosed root tag`)) {\n      logger.info(\n        \"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\"\n      );\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Delay a calculated time between retries.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param abortSignal -\n   */\n  private async delay(isPrimaryRetry: boolean, attempt: number, abortSignal?: AbortSignalLike) {\n    let delayTimeInMs: number = 0;\n\n    if (isPrimaryRetry) {\n      switch (this.retryOptions.retryPolicyType) {\n        case StorageRetryPolicyType.EXPONENTIAL:\n          delayTimeInMs = Math.min(\n            (Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs!,\n            this.retryOptions.maxRetryDelayInMs!\n          );\n          break;\n        case StorageRetryPolicyType.FIXED:\n          delayTimeInMs = this.retryOptions.retryDelayInMs!;\n          break;\n      }\n    } else {\n      delayTimeInMs = Math.random() * 1000;\n    }\n\n    logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n    return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestPolicy, RequestPolicyOptions } from \"@azure/core-http\";\n\nimport { AnonymousCredentialPolicy } from \"../policies/AnonymousCredentialPolicy\";\nimport { Credential } from \"./Credential\";\n\n/**\n * AnonymousCredential provides a credentialPolicyCreator member used to create\n * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with\n * HTTP(S) requests that read public resources or for use with Shared Access\n * Signatures (SAS).\n */\nexport class AnonymousCredential extends Credential {\n  /**\n   * Creates an {@link AnonymousCredentialPolicy} object.\n   *\n   * @param nextPolicy -\n   * @param options -\n   */\n  public create(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions\n  ): AnonymousCredentialPolicy {\n    return new AnonymousCredentialPolicy(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestPolicy, RequestPolicyOptions } from \"@azure/core-http\";\n\nimport { CredentialPolicy } from \"./CredentialPolicy\";\n\n/**\n * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources\n * or for use with Shared Access Signatures (SAS).\n */\nexport class AnonymousCredentialPolicy extends CredentialPolicy {\n  /**\n   * Creates an instance of AnonymousCredentialPolicy.\n   * @param nextPolicy -\n   * @param options -\n   */\n  // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { BaseRequestPolicy, HttpOperationResponse, WebResource } from \"@azure/core-http\";\n\n/**\n * Credential policy used to sign HTTP(S) requests before sending. This is an\n * abstract class.\n */\nexport abstract class CredentialPolicy extends BaseRequestPolicy {\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(this.signRequest(request));\n  }\n\n  /**\n   * Child classes must implement this method with request signing. This method\n   * will be executed in {@link sendRequest}.\n   *\n   * @param request -\n   */\n  protected signRequest(request: WebResource): WebResource {\n    // Child classes must override this method with request signing. This method\n    // will be executed in sendRequest().\n    return request;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { CredentialPolicy } from \"../policies/CredentialPolicy\";\n\n/**\n * Credential is an abstract class for Azure Storage HTTP requests signing. This\n * class will host an credentialPolicyCreator factory which generates CredentialPolicy.\n */\nexport abstract class Credential implements RequestPolicyFactory {\n  /**\n   * Creates a RequestPolicy object.\n   *\n   * @param _nextPolicy -\n   * @param _options -\n   */\n  public create(_nextPolicy: RequestPolicy, _options: RequestPolicyOptions): RequestPolicy {\n    throw new Error(\"Method should be implemented in children classes.\");\n  }\n}\n\n/**\n * A factory function that creates a new CredentialPolicy that uses the provided nextPolicy.\n */\nexport type CredentialPolicyCreator = (\n  nextPolicy: RequestPolicy,\n  options: RequestPolicyOptions\n) => CredentialPolicy;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  isNode,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  UserAgentOptions,\n} from \"@azure/core-http\";\nimport * as os from \"os\";\n\nimport { TelemetryPolicy } from \"./policies/TelemetryPolicy\";\nimport { SDK_VERSION } from \"./utils/constants\";\n\n/**\n * TelemetryPolicyFactory is a factory class helping generating {@link TelemetryPolicy} objects.\n */\nexport class TelemetryPolicyFactory implements RequestPolicyFactory {\n  /**\n   * @internal\n   */\n  public readonly telemetryString: string;\n\n  /**\n   * Creates an instance of TelemetryPolicyFactory.\n   * @param telemetry -\n   */\n  constructor(telemetry?: UserAgentOptions) {\n    const userAgentInfo: string[] = [];\n\n    if (isNode) {\n      if (telemetry) {\n        const telemetryString = telemetry.userAgentPrefix || \"\";\n        if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {\n          userAgentInfo.push(telemetryString);\n        }\n      }\n\n      // e.g. azsdk-js-storageblob/10.0.0\n      const libInfo = `azsdk-js-storageblob/${SDK_VERSION}`;\n      if (userAgentInfo.indexOf(libInfo) === -1) {\n        userAgentInfo.push(libInfo);\n      }\n\n      // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)\n      const runtimeInfo = `(NODE-VERSION ${process.version}; ${os.type()} ${os.release()})`;\n      if (userAgentInfo.indexOf(runtimeInfo) === -1) {\n        userAgentInfo.push(runtimeInfo);\n      }\n    }\n\n    this.telemetryString = userAgentInfo.join(\" \");\n  }\n\n  /**\n   * Creates a TelemetryPolicy object.\n   *\n   * @param nextPolicy -\n   * @param options -\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): TelemetryPolicy {\n    return new TelemetryPolicy(nextPolicy, options, this.telemetryString);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  HttpHeaders,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource,\n} from \"@azure/core-http\";\n\nimport { HeaderConstants } from \"../utils/constants\";\n\n/**\n * TelemetryPolicy is a policy used to tag user-agent header for every requests.\n */\nexport class TelemetryPolicy extends BaseRequestPolicy {\n  /**\n   * Telemetry string.\n   */\n  public readonly telemetry: string;\n\n  /**\n   * Creates an instance of TelemetryPolicy.\n   * @param nextPolicy -\n   * @param options -\n   * @param telemetry -\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, telemetry: string) {\n    super(nextPolicy, options);\n    this.telemetry = telemetry;\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      if (!request.headers) {\n        request.headers = new HttpHeaders();\n      }\n      if (!request.headers.get(HeaderConstants.USER_AGENT)) {\n        request.headers.set(HeaderConstants.USER_AGENT, this.telemetry);\n      }\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DefaultHttpClient } from \"@azure/core-http\";\nimport { IHttpClient } from \"../Pipeline\";\n\nconst _defaultHttpClient = new DefaultHttpClient();\n\nexport function getCachedDefaultHttpClient(): IHttpClient {\n  return _defaultHttpClient;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential, URLBuilder } from \"@azure/core-http\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"@azure/core-http\";\nimport { HttpOperationResponse } from \"@azure/core-http\";\nimport { WebResourceLike } from \"@azure/core-http\";\nimport { delay } from \"@azure/core-http\";\n\n/**\n * A set of constants used internally when processing requests.\n */\nconst Constants = {\n  DefaultScope: \"/.default\",\n  /**\n   * Defines constants for use with HTTP headers.\n   */\n  HeaderConstants: {\n    /**\n     * The Authorization header.\n     */\n    AUTHORIZATION: \"authorization\",\n  },\n};\n\n// #region Access Token Cycler\n\n/**\n * A function that gets a promise of an access token and allows providing\n * options.\n *\n * @param options - the options to pass to the underlying token provider\n */\ntype AccessTokenGetter = (options: GetTokenOptions) => Promise<AccessToken>;\n\ninterface TokenCyclerOptions {\n  /**\n   * The window of time before token expiration during which the token will be\n   * considered unusable due to risk of the token expiring before sending the\n   * request.\n   *\n   * This will only become meaningful if the refresh fails for over\n   * (refreshWindow - forcedRefreshWindow) milliseconds.\n   */\n  forcedRefreshWindowInMs: number;\n  /**\n   * Interval in milliseconds to retry failed token refreshes.\n   */\n  retryIntervalInMs: number;\n  /**\n   * The window of time before token expiration during which\n   * we will attempt to refresh the token.\n   */\n  refreshWindowInMs: number;\n}\n\n// Default options for the cycler if none are provided\nconst DEFAULT_CYCLER_OPTIONS: TokenCyclerOptions = {\n  forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n  retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n  refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\nasync function beginRefresh(\n  getAccessToken: () => Promise<AccessToken | null>,\n  retryIntervalInMs: number,\n  timeoutInMs: number\n): Promise<AccessToken> {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken(): Promise<AccessToken | null> {\n    if (Date.now() < timeoutInMs) {\n      try {\n        return await getAccessToken();\n      } catch {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n\n      return finalToken;\n    }\n  }\n\n  let token: AccessToken | null = await tryGetAccessToken();\n\n  while (token === null) {\n    await delay(retryIntervalInMs);\n\n    token = await tryGetAccessToken();\n  }\n\n  return token;\n}\n\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(\n  credential: TokenCredential,\n  scopes: string | string[],\n  tokenCyclerOptions?: Partial<TokenCyclerOptions>\n): AccessTokenGetter {\n  let refreshWorker: Promise<AccessToken> | null = null;\n  let token: AccessToken | null = null;\n\n  const options = {\n    ...DEFAULT_CYCLER_OPTIONS,\n    ...tokenCyclerOptions,\n  };\n\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing(): boolean {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh(): boolean {\n      return (\n        !cycler.isRefreshing &&\n        (token?.expiresOnTimestamp ?? 0) - options.refreshWindowInMs < Date.now()\n      );\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh(): boolean {\n      return (\n        token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now()\n      );\n    },\n  };\n\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(getTokenOptions: GetTokenOptions): Promise<AccessToken> {\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = (): Promise<AccessToken | null> =>\n        credential.getToken(scopes, getTokenOptions);\n\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(\n        tryGetAccessToken,\n        options.retryIntervalInMs,\n        // If we don't have a token, then we should timeout immediately\n        token?.expiresOnTimestamp ?? Date.now()\n      )\n        .then((_token) => {\n          refreshWorker = null;\n          token = _token;\n          return token;\n        })\n        .catch((reason) => {\n          // We also should reset the refresher if we enter a failed state.  All\n          // existing awaiters will throw, but subsequent requests will start a\n          // new retry chain.\n          refreshWorker = null;\n          token = null;\n          throw reason;\n        });\n    }\n\n    return refreshWorker as Promise<AccessToken>;\n  }\n\n  return async (tokenOptions: GetTokenOptions): Promise<AccessToken> => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n\n    if (cycler.mustRefresh) return refresh(tokenOptions);\n\n    if (cycler.shouldRefresh) {\n      refresh(tokenOptions);\n    }\n\n    return token as AccessToken;\n  };\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response: HttpOperationResponse): string | undefined {\n  const challenge = response.headers.get(\"WWW-Authenticate\");\n  if (response.status === 401 && challenge) {\n    return challenge;\n  }\n  return;\n}\n\n/**\n * Challenge structure\n */\ninterface Challenge {\n  authorization_uri: string;\n  resource_id: string;\n}\n\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\nfunction parseChallenge(challenge: string): any {\n  const bearerChallenge = challenge.slice(\"Bearer \".length);\n  const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter((x) => x);\n  const keyValuePairs = challengeParts.map((keyValue) =>\n    (([key, value]) => ({ [key]: value }))(keyValue.trim().split(\"=\"))\n  );\n  // Key-value pairs to plain object:\n  return keyValuePairs.reduce((a, b) => ({ ...a, ...b }), {});\n}\n\n// #endregion\n\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\n\nexport function storageBearerTokenChallengeAuthenticationPolicy(\n  credential: TokenCredential,\n  scopes: string | string[]\n): RequestPolicyFactory {\n  // This simple function encapsulates the entire process of reliably retrieving the token\n  let getToken = createTokenCycler(credential, scopes);\n\n  class StorageBearerTokenChallengeAuthenticationPolicy extends BaseRequestPolicy {\n    public constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n      super(nextPolicy, options);\n    }\n\n    public async sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse> {\n      if (!webResource.url.toLowerCase().startsWith(\"https://\")) {\n        throw new Error(\n          \"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\"\n        );\n      }\n\n      const getTokenInternal = getToken;\n      const token = (\n        await getTokenInternal({\n          abortSignal: webResource.abortSignal,\n          tracingOptions: {\n            tracingContext: webResource.tracingContext,\n          },\n        })\n      ).token;\n      webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n\n      const response = await this._nextPolicy.sendRequest(webResource);\n\n      if (response?.status === 401) {\n        const challenge = getChallenge(response);\n        if (challenge) {\n          const challengeInfo: Challenge = parseChallenge(challenge);\n          const challengeScopes = challengeInfo.resource_id + Constants.DefaultScope;\n          const parsedAuthUri = URLBuilder.parse(challengeInfo.authorization_uri);\n          const pathSegments = parsedAuthUri.getPath()!.split(\"/\");\n          const tenantId = pathSegments[1];\n          const getTokenForChallenge = createTokenCycler(credential, challengeScopes);\n\n          const tokenForChallenge = (\n            await getTokenForChallenge({\n              abortSignal: webResource.abortSignal,\n              tracingOptions: {\n                tracingContext: webResource.tracingContext,\n              },\n              tenantId: tenantId,\n            })\n          ).token;\n\n          getToken = getTokenForChallenge;\n          webResource.headers.set(\n            Constants.HeaderConstants.AUTHORIZATION,\n            `Bearer ${tokenForChallenge}`\n          );\n          return this._nextPolicy.sendRequest(webResource);\n        }\n      }\n\n      return response;\n    }\n  }\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new StorageBearerTokenChallengeAuthenticationPolicy(nextPolicy, options);\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport {\n  getDefaultProxySettings,\n  HttpRequestBody,\n  HttpResponse,\n  isNode,\n  isTokenCredential,\n  TokenCredential,\n  URLBuilder,\n} from \"@azure/core-http\";\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { Container } from \"./generated/src/operations\";\nimport {\n  BlobDeleteResponse,\n  BlobPrefix,\n  BlobProperties,\n  BlockBlobUploadResponse,\n  ContainerCreateResponse,\n  ContainerDeleteResponse,\n  ContainerEncryptionScope,\n  ContainerFilterBlobsHeaders,\n  ContainerGetAccessPolicyHeaders,\n  ContainerGetPropertiesResponse,\n  ContainerListBlobFlatSegmentHeaders,\n  ContainerListBlobHierarchySegmentHeaders,\n  ContainerSetAccessPolicyResponse,\n  ContainerSetMetadataResponse,\n  FilterBlobItem,\n  FilterBlobSegment,\n  FilterBlobSegmentModel,\n  LeaseAccessConditions,\n  ListBlobsFlatSegmentResponseModel,\n  ListBlobsHierarchySegmentResponseModel,\n  PublicAccessType,\n  SignedIdentifierModel,\n} from \"./generatedModels\";\nimport {\n  Metadata,\n  ObjectReplicationPolicy,\n  Tags,\n  ContainerRequestConditions,\n  ModifiedAccessConditions,\n} from \"./models\";\nimport { newPipeline, PipelineLike, isPipelineLike, StoragePipelineOptions } from \"./Pipeline\";\nimport { CommonOptions, StorageClient } from \"./StorageClient\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport {\n  appendToURLPath,\n  appendToURLQuery,\n  BlobNameToString,\n  ConvertInternalResponseOfListBlobFlat,\n  ConvertInternalResponseOfListBlobHierarchy,\n  extractConnectionStringParts,\n  isIpEndpointStyle,\n  parseObjectReplicationRecord,\n  ProcessBlobItems,\n  ProcessBlobPrefixes,\n  toTags,\n  truncatedISO8061Date,\n} from \"./utils/utils.common\";\nimport { ContainerSASPermissions } from \"./sas/ContainerSASPermissions\";\nimport { generateBlobSASQueryParameters } from \"./sas/BlobSASSignatureValues\";\nimport { BlobLeaseClient } from \"./BlobLeaseClient\";\nimport {\n  AppendBlobClient,\n  BlobClient,\n  BlobDeleteOptions,\n  BlockBlobClient,\n  BlockBlobUploadOptions,\n  CommonGenerateSasUrlOptions,\n  PageBlobClient,\n} from \"./Clients\";\nimport { BlobBatchClient } from \"./BlobBatchClient\";\nimport { ListBlobsIncludeItem } from \"./generated/src\";\n\n/**\n * Options to configure {@link ContainerClient.create} operation.\n */\nexport interface ContainerCreateOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * A collection of key-value string pair to associate with the container.\n   */\n  metadata?: Metadata;\n  /**\n   * Specifies whether data in the container may be accessed publicly and the level of access. Possible values include:\n   * - `container`: Specifies full public read access for container and blob data. Clients can enumerate blobs within the container via anonymous request, but cannot enumerate containers within the storage account.\n   * - `blob`: Specifies public read access for blobs. Blob data within this container can be read via anonymous request, but container data is not available. Clients cannot enumerate blobs within the container via anonymous request.\n   */\n  access?: PublicAccessType;\n  /**\n   * Container encryption scope info.\n   */\n  containerEncryptionScope?: ContainerEncryptionScope;\n}\n\n/**\n * Options to configure {@link ContainerClient.getProperties} operation.\n */\nexport interface ContainerGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   */\n  conditions?: LeaseAccessConditions;\n}\n\n/**\n * Options to configure {@link ContainerClient.delete} operation.\n */\nexport interface ContainerDeleteMethodOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when deleting the container.\n   */\n  conditions?: ContainerRequestConditions;\n}\n\n/**\n * Options to configure {@link ContainerClient.exists} operation.\n */\nexport interface ContainerExistsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link ContainerClient.setMetadata} operation.\n */\nexport interface ContainerSetMetadataOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   */\n  conditions?: ContainerRequestConditions;\n}\n\n/**\n * Options to configure {@link ContainerClient.getAccessPolicy} operation.\n */\nexport interface ContainerGetAccessPolicyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   */\n  conditions?: LeaseAccessConditions;\n}\n\n/**\n * Signed identifier.\n */\nexport interface SignedIdentifier {\n  /**\n   * a unique id\n   */\n  id: string;\n  /**\n   * Access Policy\n   */\n  accessPolicy: {\n    /**\n     * Optional. The date-time the policy is active\n     */\n    startsOn?: Date;\n    /**\n     * Optional. The date-time the policy expires\n     */\n    expiresOn?: Date;\n    /**\n     * The permissions for the acl policy\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n     */\n    permissions?: string;\n  };\n}\n\n/**\n * Contains response data for the {@link ContainerClient.getAccessPolicy} operation.\n */\nexport declare type ContainerGetAccessPolicyResponse = {\n  signedIdentifiers: SignedIdentifier[];\n} & ContainerGetAccessPolicyHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ContainerGetAccessPolicyHeaders;\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SignedIdentifierModel[];\n    };\n  };\n\n/**\n * Options to configure {@link ContainerClient.setAccessPolicy} operation.\n */\nexport interface ContainerSetAccessPolicyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when setting the access policy.\n   */\n  conditions?: ContainerRequestConditions;\n}\n\n/**\n * Options to configure Container - Acquire Lease operation.\n */\nexport interface ContainerAcquireLeaseOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when acquiring the lease.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Container - Release Lease operation.\n */\nexport interface ContainerReleaseLeaseOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when releasing the lease.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Container - Renew Lease operation.\n */\nexport interface ContainerRenewLeaseOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when renewing the lease.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Container - Break Lease operation.\n */\nexport interface ContainerBreakLeaseOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when breaking the lease.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Container - Change Lease operation.\n */\nexport interface ContainerChangeLeaseOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when changing the lease.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * Options to configure the {@link ContainerClient.deleteBlob} operation.\n */\nexport interface ContainerDeleteBlobOptions extends BlobDeleteOptions {\n  /**\n   * An opaque DateTime value that, when present, specifies the version\n   * of the blob to delete. It's for service version 2019-10-10 and newer.\n   */\n  versionId?: string;\n}\n\n/**\n * Options to configure Container - List Segment operations.\n *\n * See:\n * - {@link ContainerClient.listSegments}\n * - {@link ContainerClient.listBlobFlatSegment}\n * - {@link ContainerClient.listBlobHierarchySegment}\n * - {@link ContainerClient.listHierarchySegments}\n * - {@link ContainerClient.listItemsByHierarchy}\n */\ninterface ContainerListBlobsSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only containers\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * Specifies the maximum number of containers\n   * to return. If the request does not specify maxPageSize, or specifies a\n   * value greater than 5000, the server will return up to 5000 items. Note\n   * that if the listing operation crosses a partition boundary, then the\n   * service will return a continuation token for retrieving the remainder of\n   * the results. For this reason, it is possible that the service will return\n   * fewer results than specified by maxPageSize, or than the default of 5000.\n   */\n  maxPageSize?: number;\n  /**\n   * Include this parameter to\n   * specify one or more datasets to include in the response.\n   */\n  include?: ListBlobsIncludeItem[];\n}\n\n/**\n * An interface representing BlobHierarchyListSegment.\n */\nexport interface BlobHierarchyListSegment {\n  blobPrefixes?: BlobPrefix[];\n  blobItems: BlobItem[];\n}\n\n/**\n * An enumeration of blobs\n */\nexport interface ListBlobsHierarchySegmentResponse {\n  serviceEndpoint: string;\n  containerName: string;\n  prefix?: string;\n  marker?: string;\n  maxPageSize?: number;\n  delimiter?: string;\n  segment: BlobHierarchyListSegment;\n  continuationToken?: string;\n}\n\n/**\n * Contains response data for the listBlobHierarchySegment operation.\n */\nexport type ContainerListBlobHierarchySegmentResponse = ListBlobsHierarchySegmentResponse &\n  ContainerListBlobHierarchySegmentHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ContainerListBlobHierarchySegmentHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ListBlobsHierarchySegmentResponseModel;\n    };\n  };\n\n/**\n * An Azure Storage blob\n */\nexport interface BlobItem {\n  name: string;\n  deleted: boolean;\n  snapshot: string;\n  versionId?: string;\n  isCurrentVersion?: boolean;\n  properties: BlobProperties;\n  metadata?: { [propertyName: string]: string };\n  tags?: Tags;\n  objectReplicationSourceProperties?: ObjectReplicationPolicy[];\n  hasVersionsOnly?: boolean;\n}\n\n/**\n * An interface representing BlobFlatListSegment.\n */\nexport interface BlobFlatListSegment {\n  blobItems: BlobItem[];\n}\n\n/**\n * An enumeration of blobs\n */\nexport interface ListBlobsFlatSegmentResponse {\n  serviceEndpoint: string;\n  containerName: string;\n  prefix?: string;\n  marker?: string;\n  maxPageSize?: number;\n  segment: BlobFlatListSegment;\n  continuationToken?: string;\n}\n\n/**\n * Contains response data for the listBlobFlatSegment operation.\n */\nexport type ContainerListBlobFlatSegmentResponse = ListBlobsFlatSegmentResponse &\n  ContainerListBlobFlatSegmentHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ContainerListBlobFlatSegmentHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ListBlobsFlatSegmentResponseModel;\n    };\n  };\n\n/**\n * Options to configure Container - List Blobs operations.\n *\n * See:\n * - {@link ContainerClient.listBlobsFlat}\n * - {@link ContainerClient.listBlobsByHierarchy}\n */\nexport interface ContainerListBlobsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only containers\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n\n  /**\n   * Specifies whether metadata related to any current or previous Copy Blob operation should be included in the response.\n   */\n  includeCopy?: boolean;\n  /**\n   * Specifies whether soft deleted blobs should be included in the response.\n   */\n  includeDeleted?: boolean;\n  /**\n   * Specifies whether blob metadata be returned in the response.\n   */\n  includeMetadata?: boolean;\n  /**\n   * Specifies whether snapshots should be included in the enumeration. Snapshots are listed from oldest to newest in the response.\n   */\n  includeSnapshots?: boolean;\n  /**\n   * Specifies whether versions should be included in the enumeration. Versions are listed from oldest to newest in the response.\n   */\n  includeVersions?: boolean;\n  /**\n   * Specifies whether blobs for which blocks have been uploaded, but which have not been committed using Put Block List, be included in the response.\n   */\n  includeUncommitedBlobs?: boolean;\n  /**\n   * Specifies whether blob tags be returned in the response.\n   */\n  includeTags?: boolean;\n  /**\n   * Specifies whether deleted blob with versions be returned in the response.\n   */\n  includeDeletedWithVersions?: boolean;\n  /**\n   * Specifies whether blob immutability policy be returned in the response.\n   */\n  includeImmutabilityPolicy?: boolean;\n  /**\n   * Specifies whether blob legal hold be returned in the response.\n   */\n  includeLegalHold?: boolean;\n}\n\n/**\n * Contains response data for the {@link ContainerClient.createIfNotExists} operation.\n */\nexport interface ContainerCreateIfNotExistsResponse extends ContainerCreateResponse {\n  /**\n   * Indicate whether the container is successfully created. Is false when the container is not changed as it already exists.\n   */\n  succeeded: boolean;\n}\n\n/**\n * Contains response data for the {@link ContainerClient.deleteIfExists} operation.\n */\nexport interface ContainerDeleteIfExistsResponse extends ContainerDeleteResponse {\n  /**\n   * Indicate whether the container is successfully deleted. Is false if the container does not exist in the first place.\n   */\n  succeeded: boolean;\n}\n\n/**\n * Options to configure {@link ContainerClient.generateSasUrl} operation.\n */\nexport interface ContainerGenerateSasUrlOptions extends CommonGenerateSasUrlOptions {\n  /**\n   * Optional only when identifier is provided. Specifies the list of permissions to be associated with the SAS.\n   */\n  permissions?: ContainerSASPermissions;\n}\n\n/**\n * Options to configure the {@link ContainerClient.findBlobsByTagsSegment} operation.\n */\ninterface ContainerFindBlobsByTagsSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Specifies the maximum number of blobs\n   * to return. If the request does not specify maxPageSize, or specifies a\n   * value greater than 5000, the server will return up to 5000 items. Note\n   * that if the listing operation crosses a partition boundary, then the\n   * service will return a continuation token for retrieving the remainder of\n   * the results. For this reason, it is possible that the service will return\n   * fewer results than specified by maxPageSize, or than the default of 5000.\n   */\n  maxPageSize?: number;\n}\n\n/**\n * Options to configure the {@link BlobServiceClient.findBlobsByTags} operation.\n */\nexport interface ContainerFindBlobByTagsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * The response of {@link BlobServiceClient.findBlobsByTags} operation.\n */\nexport type ContainerFindBlobsByTagsSegmentResponse = FilterBlobSegment &\n  ContainerFilterBlobsHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ContainerFilterBlobsHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: FilterBlobSegmentModel;\n    };\n  };\n\n/**\n * A ContainerClient represents a URL to the Azure Storage container allowing you to manipulate its blobs.\n */\nexport class ContainerClient extends StorageClient {\n  /**\n   * containerContext provided by protocol layer.\n   */\n  private containerContext: Container;\n\n  private _containerName: string;\n\n  /**\n   * The name of the container.\n   */\n  public get containerName(): string {\n    return this._containerName;\n  }\n  /**\n   *\n   * Creates an instance of ContainerClient.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param containerName - Container name.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  constructor(connectionString: string, containerName: string, options?: StoragePipelineOptions);\n  /**\n   * Creates an instance of ContainerClient.\n   * This method accepts an URL pointing to a container.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param url - A URL string pointing to Azure Storage container, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer?sasString\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of ContainerClient.\n   * This method accepts an URL pointing to a container.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param url - A URL string pointing to Azure Storage container, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: PipelineLike);\n  constructor(\n    urlOrConnectionString: string,\n    credentialOrPipelineOrContainerName?:\n      | string\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | PipelineLike,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: PipelineLike;\n    let url: string;\n    options = options || {};\n    if (isPipelineLike(credentialOrPipelineOrContainerName)) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (\n      (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential) ||\n      credentialOrPipelineOrContainerName instanceof AnonymousCredential ||\n      isTokenCredential(credentialOrPipelineOrContainerName)\n    ) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (\n      !credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName !== \"string\"\n    ) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      // The second parameter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (\n      credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName === \"string\"\n    ) {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      const containerName = credentialOrPipelineOrContainerName;\n\n      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          const sharedKeyCredential = new StorageSharedKeyCredential(\n            extractedCreds.accountName!,\n            extractedCreds.accountKey\n          );\n          url = appendToURLPath(extractedCreds.url, encodeURIComponent(containerName));\n\n          if (!options.proxyOptions) {\n            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          }\n\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url =\n          appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)) +\n          \"?\" +\n          extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\n          \"Connection string must be either an Account connection string or a SAS connection string\"\n        );\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName parameter\");\n    }\n    super(url, pipeline);\n    this._containerName = this.getContainerNameFromUrl();\n    this.containerContext = new Container(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new container under the specified account. If the container with\n   * the same name already exists, the operation fails.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n   *\n   * @param options - Options to Container Create operation.\n   *\n   *\n   * Example usage:\n   *\n   * ```js\n   * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n   * const createContainerResponse = await containerClient.create();\n   * console.log(\"Container was created successfully\", createContainerResponse.requestId);\n   * ```\n   */\n  public async create(options: ContainerCreateOptions = {}): Promise<ContainerCreateResponse> {\n    const { span, updatedOptions } = createSpan(\"ContainerClient-create\", options);\n    try {\n      // Spread operator in destructuring assignments,\n      // this will filter out unwanted properties from the response object into result object\n      return await this.containerContext.create({\n        ...options,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new container under the specified account. If the container with\n   * the same name already exists, it is not changed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n   *\n   * @param options -\n   */\n  public async createIfNotExists(\n    options: ContainerCreateOptions = {}\n  ): Promise<ContainerCreateIfNotExistsResponse> {\n    const { span, updatedOptions } = createSpan(\"ContainerClient-createIfNotExists\", options);\n    try {\n      const res = await this.create(updatedOptions);\n      return {\n        succeeded: true,\n        ...res,\n        _response: res._response, // _response is made non-enumerable\n      };\n    } catch (e) {\n      if (e.details?.errorCode === \"ContainerAlreadyExists\") {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message:\n            \"Expected exception when creating a container only if it does not already exist.\",\n        });\n        return {\n          succeeded: false,\n          ...e.response?.parsedHeaders,\n          _response: e.response,\n        };\n      }\n\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns true if the Azure container resource represented by this client exists; false otherwise.\n   *\n   * NOTE: use this function with care since an existing container might be deleted by other clients or\n   * applications. Vice versa new containers with the same name might be added by other clients or\n   * applications after this function completes.\n   *\n   * @param options -\n   */\n  public async exists(options: ContainerExistsOptions = {}): Promise<boolean> {\n    const { span, updatedOptions } = createSpan(\"ContainerClient-exists\", options);\n    try {\n      await this.getProperties({\n        abortSignal: options.abortSignal,\n        tracingOptions: updatedOptions.tracingOptions,\n      });\n      return true;\n    } catch (e) {\n      if (e.statusCode === 404) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: \"Expected exception when checking container existence\",\n        });\n        return false;\n      }\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a {@link BlobClient}\n   *\n   * @param blobName - A blob name\n   * @returns A new BlobClient object for the given blob name.\n   */\n  public getBlobClient(blobName: string): BlobClient {\n    return new BlobClient(appendToURLPath(this.url, encodeURIComponent(blobName)), this.pipeline);\n  }\n\n  /**\n   * Creates an {@link AppendBlobClient}\n   *\n   * @param blobName - An append blob name\n   */\n  public getAppendBlobClient(blobName: string): AppendBlobClient {\n    return new AppendBlobClient(\n      appendToURLPath(this.url, encodeURIComponent(blobName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a {@link BlockBlobClient}\n   *\n   * @param blobName - A block blob name\n   *\n   *\n   * Example usage:\n   *\n   * ```js\n   * const content = \"Hello world!\";\n   *\n   * const blockBlobClient = containerClient.getBlockBlobClient(\"<blob name>\");\n   * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n   * ```\n   */\n  public getBlockBlobClient(blobName: string): BlockBlobClient {\n    return new BlockBlobClient(\n      appendToURLPath(this.url, encodeURIComponent(blobName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a {@link PageBlobClient}\n   *\n   * @param blobName - A page blob name\n   */\n  public getPageBlobClient(blobName: string): PageBlobClient {\n    return new PageBlobClient(\n      appendToURLPath(this.url, encodeURIComponent(blobName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Returns all user-defined metadata and system properties for the specified\n   * container. The data returned does not include the container's list of blobs.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties\n   *\n   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n   * they originally contained uppercase characters. This differs from the metadata keys returned by\n   * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which\n   * will retain their original casing.\n   *\n   * @param options - Options to Container Get Properties operation.\n   */\n  public async getProperties(\n    options: ContainerGetPropertiesOptions = {}\n  ): Promise<ContainerGetPropertiesResponse> {\n    if (!options.conditions) {\n      options.conditions = {};\n    }\n\n    const { span, updatedOptions } = createSpan(\"ContainerClient-getProperties\", options);\n    try {\n      return await this.containerContext.getProperties({\n        abortSignal: options.abortSignal,\n        ...options.conditions,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Marks the specified container for deletion. The container and any blobs\n   * contained within it are later deleted during garbage collection.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n   *\n   * @param options - Options to Container Delete operation.\n   */\n  public async delete(\n    options: ContainerDeleteMethodOptions = {}\n  ): Promise<ContainerDeleteResponse> {\n    if (!options.conditions) {\n      options.conditions = {};\n    }\n\n    const { span, updatedOptions } = createSpan(\"ContainerClient-delete\", options);\n    try {\n      return await this.containerContext.delete({\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: options.conditions,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Marks the specified container for deletion if it exists. The container and any blobs\n   * contained within it are later deleted during garbage collection.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n   *\n   * @param options - Options to Container Delete operation.\n   */\n  public async deleteIfExists(\n    options: ContainerDeleteMethodOptions = {}\n  ): Promise<ContainerDeleteIfExistsResponse> {\n    const { span, updatedOptions } = createSpan(\"ContainerClient-deleteIfExists\", options);\n\n    try {\n      const res = await this.delete(updatedOptions);\n      return {\n        succeeded: true,\n        ...res,\n        _response: res._response, // _response is made non-enumerable\n      };\n    } catch (e) {\n      if (e.details?.errorCode === \"ContainerNotFound\") {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: \"Expected exception when deleting a container only if it exists.\",\n        });\n        return {\n          succeeded: false,\n          ...e.response?.parsedHeaders,\n          _response: e.response,\n        };\n      }\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets one or more user-defined name-value pairs for the specified container.\n   *\n   * If no option provided, or no metadata defined in the parameter, the container\n   * metadata will be removed.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata\n   *\n   * @param metadata - Replace existing metadata with this value.\n   *                            If no value provided the existing metadata will be removed.\n   * @param options - Options to Container Set Metadata operation.\n   */\n  public async setMetadata(\n    metadata?: Metadata,\n    options: ContainerSetMetadataOptions = {}\n  ): Promise<ContainerSetMetadataResponse> {\n    if (!options.conditions) {\n      options.conditions = {};\n    }\n\n    if (options.conditions.ifUnmodifiedSince) {\n      throw new RangeError(\n        \"the IfUnmodifiedSince must have their default values because they are ignored by the blob service\"\n      );\n    }\n\n    const { span, updatedOptions } = createSpan(\"ContainerClient-setMetadata\", options);\n\n    try {\n      return await this.containerContext.setMetadata({\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        metadata,\n        modifiedAccessConditions: options.conditions,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the permissions for the specified container. The permissions indicate\n   * whether container data may be accessed publicly.\n   *\n   * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.\n   * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl\n   *\n   * @param options - Options to Container Get Access Policy operation.\n   */\n  public async getAccessPolicy(\n    options: ContainerGetAccessPolicyOptions = {}\n  ): Promise<ContainerGetAccessPolicyResponse> {\n    if (!options.conditions) {\n      options.conditions = {};\n    }\n\n    const { span, updatedOptions } = createSpan(\"ContainerClient-getAccessPolicy\", options);\n\n    try {\n      const response = await this.containerContext.getAccessPolicy({\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n\n      const res: ContainerGetAccessPolicyResponse = {\n        _response: response._response,\n        blobPublicAccess: response.blobPublicAccess,\n        date: response.date,\n        etag: response.etag,\n        errorCode: response.errorCode,\n        lastModified: response.lastModified,\n        requestId: response.requestId,\n        clientRequestId: response.clientRequestId,\n        signedIdentifiers: [],\n        version: response.version,\n      };\n\n      for (const identifier of response) {\n        let accessPolicy: any = undefined;\n        if (identifier.accessPolicy) {\n          accessPolicy = {\n            permissions: identifier.accessPolicy.permissions,\n          };\n\n          if (identifier.accessPolicy.expiresOn) {\n            accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);\n          }\n\n          if (identifier.accessPolicy.startsOn) {\n            accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);\n          }\n        }\n\n        res.signedIdentifiers.push({\n          accessPolicy,\n          id: identifier.id,\n        });\n      }\n\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets the permissions for the specified container. The permissions indicate\n   * whether blobs in a container may be accessed publicly.\n   *\n   * When you set permissions for a container, the existing permissions are replaced.\n   * If no access or containerAcl provided, the existing container ACL will be\n   * removed.\n   *\n   * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.\n   * During this interval, a shared access signature that is associated with the stored access policy will\n   * fail with status code 403 (Forbidden), until the access policy becomes active.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n   *\n   * @param access - The level of public access to data in the container.\n   * @param containerAcl - Array of elements each having a unique Id and details of the access policy.\n   * @param options - Options to Container Set Access Policy operation.\n   */\n  public async setAccessPolicy(\n    access?: PublicAccessType,\n    containerAcl?: SignedIdentifier[],\n    options: ContainerSetAccessPolicyOptions = {}\n  ): Promise<ContainerSetAccessPolicyResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"ContainerClient-setAccessPolicy\", options);\n    try {\n      const acl: SignedIdentifierModel[] = [];\n      for (const identifier of containerAcl || []) {\n        acl.push({\n          accessPolicy: {\n            expiresOn: identifier.accessPolicy.expiresOn\n              ? truncatedISO8061Date(identifier.accessPolicy.expiresOn)\n              : \"\",\n            permissions: identifier.accessPolicy.permissions,\n            startsOn: identifier.accessPolicy.startsOn\n              ? truncatedISO8061Date(identifier.accessPolicy.startsOn)\n              : \"\",\n          },\n          id: identifier.id,\n        });\n      }\n\n      return await this.containerContext.setAccessPolicy({\n        abortSignal: options.abortSignal,\n        access,\n        containerAcl: acl,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: options.conditions,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get a {@link BlobLeaseClient} that manages leases on the container.\n   *\n   * @param proposeLeaseId - Initial proposed lease Id.\n   * @returns A new BlobLeaseClient object for managing leases on the container.\n   */\n  public getBlobLeaseClient(proposeLeaseId?: string): BlobLeaseClient {\n    return new BlobLeaseClient(this, proposeLeaseId);\n  }\n\n  /**\n   * Creates a new block blob, or updates the content of an existing block blob.\n   *\n   * Updating an existing block blob overwrites any existing metadata on the blob.\n   * Partial updates are not supported; the content of the existing blob is\n   * overwritten with the new content. To perform a partial update of a block blob's,\n   * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.\n   *\n   * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},\n   * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better\n   * performance with concurrency uploading.\n   *\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param blobName - Name of the block blob to create or update.\n   * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function\n   *                               which returns a new Readable stream whose offset is from data source beginning.\n   * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n   *                               string including non non-Base64/Hex-encoded characters.\n   * @param options - Options to configure the Block Blob Upload operation.\n   * @returns Block Blob upload response data and the corresponding BlockBlobClient instance.\n   */\n  public async uploadBlockBlob(\n    blobName: string,\n    body: HttpRequestBody,\n    contentLength: number,\n    options: BlockBlobUploadOptions = {}\n  ): Promise<{ blockBlobClient: BlockBlobClient; response: BlockBlobUploadResponse }> {\n    const { span, updatedOptions } = createSpan(\"ContainerClient-uploadBlockBlob\", options);\n    try {\n      const blockBlobClient = this.getBlockBlobClient(blobName);\n      const response = await blockBlobClient.upload(body, contentLength, updatedOptions);\n      return {\n        blockBlobClient,\n        response,\n      };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Marks the specified blob or snapshot for deletion. The blob is later deleted\n   * during garbage collection. Note that in order to delete a blob, you must delete\n   * all of its snapshots. You can delete both at the same time with the Delete\n   * Blob operation.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n   *\n   * @param blobName -\n   * @param options - Options to Blob Delete operation.\n   * @returns Block blob deletion response data.\n   */\n  public async deleteBlob(\n    blobName: string,\n    options: ContainerDeleteBlobOptions = {}\n  ): Promise<BlobDeleteResponse> {\n    const { span, updatedOptions } = createSpan(\"ContainerClient-deleteBlob\", options);\n    try {\n      let blobClient = this.getBlobClient(blobName);\n      if (options.versionId) {\n        blobClient = blobClient.withVersion(options.versionId);\n      }\n      return await blobClient.delete(updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * listBlobFlatSegment returns a single segment of blobs starting from the\n   * specified Marker. Use an empty Marker to start enumeration from the beginning.\n   * After getting a segment, process it, and then call listBlobsFlatSegment again\n   * (passing the the previously-returned Marker) to get the next segment.\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n   * @param options - Options to Container List Blob Flat Segment operation.\n   */\n  private async listBlobFlatSegment(\n    marker?: string,\n    options: ContainerListBlobsSegmentOptions = {}\n  ): Promise<ContainerListBlobFlatSegmentResponse> {\n    const { span, updatedOptions } = createSpan(\"ContainerClient-listBlobFlatSegment\", options);\n    try {\n      const response = await this.containerContext.listBlobFlatSegment({\n        marker,\n        ...options,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n\n      response.segment.blobItems = [];\n      if ((response.segment as any)[\"Blob\"] !== undefined) {\n        response.segment.blobItems = ProcessBlobItems((response.segment as any)[\"Blob\"]);\n      }\n\n      const wrappedResponse: ContainerListBlobFlatSegmentResponse = {\n        ...response,\n        _response: {\n          ...response._response,\n          parsedBody: ConvertInternalResponseOfListBlobFlat(response._response.parsedBody),\n        }, // _response is made non-enumerable\n        segment: {\n          ...response.segment,\n          blobItems: response.segment.blobItems.map((blobItemInteral) => {\n            const blobItem: BlobItem = {\n              ...blobItemInteral,\n              name: BlobNameToString(blobItemInteral.name),\n              tags: toTags(blobItemInteral.blobTags),\n              objectReplicationSourceProperties: parseObjectReplicationRecord(\n                blobItemInteral.objectReplicationMetadata\n              ),\n            };\n            return blobItem;\n          }),\n        },\n      };\n      return wrappedResponse;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * listBlobHierarchySegment returns a single segment of blobs starting from\n   * the specified Marker. Use an empty Marker to start enumeration from the\n   * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment\n   * again (passing the the previously-returned Marker) to get the next segment.\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param delimiter - The character or string used to define the virtual hierarchy\n   * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n   * @param options - Options to Container List Blob Hierarchy Segment operation.\n   */\n  private async listBlobHierarchySegment(\n    delimiter: string,\n    marker?: string,\n    options: ContainerListBlobsSegmentOptions = {}\n  ): Promise<ContainerListBlobHierarchySegmentResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"ContainerClient-listBlobHierarchySegment\",\n      options\n    );\n    try {\n      const response = await this.containerContext.listBlobHierarchySegment(delimiter, {\n        marker,\n        ...options,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n\n      response.segment.blobItems = [];\n      if (response.segment[\"Blob\"] !== undefined) {\n        response.segment.blobItems = ProcessBlobItems(response.segment[\"Blob\"]);\n      }\n\n      response.segment.blobPrefixes = [];\n      if (response.segment[\"BlobPrefix\"] !== undefined) {\n        response.segment.blobPrefixes = ProcessBlobPrefixes(response.segment[\"BlobPrefix\"]);\n      }\n\n      const wrappedResponse: ContainerListBlobHierarchySegmentResponse = {\n        ...response,\n        _response: {\n          ...response._response,\n          parsedBody: ConvertInternalResponseOfListBlobHierarchy(response._response.parsedBody),\n        }, // _response is made non-enumerable\n        segment: {\n          ...response.segment,\n          blobItems: response.segment.blobItems.map((blobItemInteral) => {\n            const blobItem: BlobItem = {\n              ...blobItemInteral,\n              name: BlobNameToString(blobItemInteral.name),\n              tags: toTags(blobItemInteral.blobTags),\n              objectReplicationSourceProperties: parseObjectReplicationRecord(\n                blobItemInteral.objectReplicationMetadata\n              ),\n            };\n            return blobItem;\n          }),\n          blobPrefixes: response.segment.blobPrefixes?.map((blobPrefixInternal) => {\n            const blobPrefix: BlobPrefix = {\n              name: BlobNameToString(blobPrefixInternal.name),\n            };\n            return blobPrefix;\n          }),\n        },\n      };\n      return wrappedResponse;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse\n   *\n   * @param marker - A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the ContinuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The ContinuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param options - Options to list blobs operation.\n   */\n  private async *listSegments(\n    marker?: string,\n    options: ContainerListBlobsSegmentOptions = {}\n  ): AsyncIterableIterator<ContainerListBlobFlatSegmentResponse> {\n    let listBlobsFlatSegmentResponse;\n    if (!!marker || marker === undefined) {\n      do {\n        listBlobsFlatSegmentResponse = await this.listBlobFlatSegment(marker, options);\n        marker = listBlobsFlatSegmentResponse.continuationToken;\n        yield await listBlobsFlatSegmentResponse;\n      } while (marker);\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator of {@link BlobItem} objects\n   *\n   * @param options - Options to list blobs operation.\n   */\n  private async *listItems(\n    options: ContainerListBlobsSegmentOptions = {}\n  ): AsyncIterableIterator<BlobItem> {\n    let marker: string | undefined;\n    for await (const listBlobsFlatSegmentResponse of this.listSegments(marker, options)) {\n      yield* listBlobsFlatSegmentResponse.segment.blobItems;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the blobs\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * // Get the containerClient before you run these snippets,\n   * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\");`\n   * let i = 1;\n   * for await (const blob of containerClient.listBlobsFlat()) {\n   *   console.log(`Blob ${i++}: ${blob.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * let iter = containerClient.listBlobsFlat();\n   * let blobItem = await iter.next();\n   * while (!blobItem.done) {\n   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n   *   blobItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {\n   *   for (const blob of response.segment.blobItems) {\n   *     console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 blob names\n   * for (const blob of response.segment.blobItems) {\n   *   console.log(`Blob ${i++}: ${blob.name}`);\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   *\n   * // Passing next marker as continuationToken\n   *\n   * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints 10 blob names\n   * for (const blob of response.segment.blobItems) {\n   *   console.log(`Blob ${i++}: ${blob.name}`);\n   * }\n   * ```\n   *\n   * @param options - Options to list blobs.\n   * @returns An asyncIterableIterator that supports paging.\n   */\n  public listBlobsFlat(\n    options: ContainerListBlobsOptions = {}\n  ): PagedAsyncIterableIterator<BlobItem, ContainerListBlobFlatSegmentResponse> {\n    const include: ListBlobsIncludeItem[] = [];\n    if (options.includeCopy) {\n      include.push(\"copy\");\n    }\n    if (options.includeDeleted) {\n      include.push(\"deleted\");\n    }\n    if (options.includeMetadata) {\n      include.push(\"metadata\");\n    }\n    if (options.includeSnapshots) {\n      include.push(\"snapshots\");\n    }\n    if (options.includeVersions) {\n      include.push(\"versions\");\n    }\n    if (options.includeUncommitedBlobs) {\n      include.push(\"uncommittedblobs\");\n    }\n    if (options.includeTags) {\n      include.push(\"tags\");\n    }\n    if (options.includeDeletedWithVersions) {\n      include.push(\"deletedwithversions\");\n    }\n    if (options.includeImmutabilityPolicy) {\n      include.push(\"immutabilitypolicy\");\n    }\n    if (options.includeLegalHold) {\n      include.push(\"legalhold\");\n    }\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    const updatedOptions: ContainerListBlobsSegmentOptions = {\n      ...options,\n      ...(include.length > 0 ? { include: include } : {}),\n    };\n\n    // AsyncIterableIterator to iterate over blobs\n    const iter = this.listItems(updatedOptions);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.listSegments(settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...updatedOptions,\n        });\n      },\n    };\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse\n   *\n   * @param delimiter - The character or string used to define the virtual hierarchy\n   * @param marker - A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the ContinuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The ContinuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param options - Options to list blobs operation.\n   */\n  private async *listHierarchySegments(\n    delimiter: string,\n    marker?: string,\n    options: ContainerListBlobsSegmentOptions = {}\n  ): AsyncIterableIterator<ContainerListBlobHierarchySegmentResponse> {\n    let listBlobsHierarchySegmentResponse;\n    if (!!marker || marker === undefined) {\n      do {\n        listBlobsHierarchySegmentResponse = await this.listBlobHierarchySegment(\n          delimiter,\n          marker,\n          options\n        );\n        marker = listBlobsHierarchySegmentResponse.continuationToken;\n        yield await listBlobsHierarchySegmentResponse;\n      } while (marker);\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.\n   *\n   * @param delimiter - The character or string used to define the virtual hierarchy\n   * @param options - Options to list blobs operation.\n   */\n  private async *listItemsByHierarchy(\n    delimiter: string,\n    options: ContainerListBlobsSegmentOptions = {}\n  ): AsyncIterableIterator<({ kind: \"prefix\" } & BlobPrefix) | ({ kind: \"blob\" } & BlobItem)> {\n    let marker: string | undefined;\n    for await (const listBlobsHierarchySegmentResponse of this.listHierarchySegments(\n      delimiter,\n      marker,\n      options\n    )) {\n      const segment = listBlobsHierarchySegmentResponse.segment;\n      if (segment.blobPrefixes) {\n        for (const prefix of segment.blobPrefixes) {\n          yield {\n            kind: \"prefix\",\n            ...prefix,\n          };\n        }\n      }\n      for (const blob of segment.blobItems) {\n        yield { kind: \"blob\", ...blob };\n      }\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the blobs by hierarchy.\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * for await (const item of containerClient.listBlobsByHierarchy(\"/\")) {\n   *   if (item.kind === \"prefix\") {\n   *     console.log(`\\tBlobPrefix: ${item.name}`);\n   *   } else {\n   *     console.log(`\\tBlobItem: name - ${item.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let iter = containerClient.listBlobsByHierarchy(\"/\", { prefix: \"prefix1/\" });\n   * let entity = await iter.next();\n   * while (!entity.done) {\n   *   let item = entity.value;\n   *   if (item.kind === \"prefix\") {\n   *     console.log(`\\tBlobPrefix: ${item.name}`);\n   *   } else {\n   *     console.log(`\\tBlobItem: name - ${item.name}`);\n   *   }\n   *   entity = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * console.log(\"Listing blobs by hierarchy by page\");\n   * for await (const response of containerClient.listBlobsByHierarchy(\"/\").byPage()) {\n   *   const segment = response.segment;\n   *   if (segment.blobPrefixes) {\n   *     for (const prefix of segment.blobPrefixes) {\n   *       console.log(`\\tBlobPrefix: ${prefix.name}`);\n   *     }\n   *   }\n   *   for (const blob of response.segment.blobItems) {\n   *     console.log(`\\tBlobItem: name - ${blob.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a max page size:\n   *\n   * ```js\n   * console.log(\"Listing blobs by hierarchy by page, specifying a prefix and a max page size\");\n   *\n   * let i = 1;\n   * for await (const response of containerClient\n   *   .listBlobsByHierarchy(\"/\", { prefix: \"prefix2/sub1/\" })\n   *   .byPage({ maxPageSize: 2 })) {\n   *   console.log(`Page ${i++}`);\n   *   const segment = response.segment;\n   *\n   *   if (segment.blobPrefixes) {\n   *     for (const prefix of segment.blobPrefixes) {\n   *       console.log(`\\tBlobPrefix: ${prefix.name}`);\n   *     }\n   *   }\n   *\n   *   for (const blob of response.segment.blobItems) {\n   *     console.log(`\\tBlobItem: name - ${blob.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param delimiter - The character or string used to define the virtual hierarchy\n   * @param options - Options to list blobs operation.\n   */\n  public listBlobsByHierarchy(\n    delimiter: string,\n    options: ContainerListBlobsOptions = {}\n  ): PagedAsyncIterableIterator<\n    ({ kind: \"prefix\" } & BlobPrefix) | ({ kind: \"blob\" } & BlobItem),\n    ContainerListBlobHierarchySegmentResponse\n  > {\n    if (delimiter === \"\") {\n      throw new RangeError(\"delimiter should contain one or more characters\");\n    }\n\n    const include: ListBlobsIncludeItem[] = [];\n    if (options.includeCopy) {\n      include.push(\"copy\");\n    }\n    if (options.includeDeleted) {\n      include.push(\"deleted\");\n    }\n    if (options.includeMetadata) {\n      include.push(\"metadata\");\n    }\n    if (options.includeSnapshots) {\n      include.push(\"snapshots\");\n    }\n    if (options.includeVersions) {\n      include.push(\"versions\");\n    }\n    if (options.includeUncommitedBlobs) {\n      include.push(\"uncommittedblobs\");\n    }\n    if (options.includeTags) {\n      include.push(\"tags\");\n    }\n    if (options.includeDeletedWithVersions) {\n      include.push(\"deletedwithversions\");\n    }\n    if (options.includeImmutabilityPolicy) {\n      include.push(\"immutabilitypolicy\");\n    }\n    if (options.includeLegalHold) {\n      include.push(\"legalhold\");\n    }\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    const updatedOptions: ContainerListBlobsSegmentOptions = {\n      ...options,\n      ...(include.length > 0 ? { include: include } : {}),\n    };\n    // AsyncIterableIterator to iterate over blob prefixes and blobs\n    const iter = this.listItemsByHierarchy(delimiter, updatedOptions);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      async next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.listHierarchySegments(delimiter, settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...updatedOptions,\n        });\n      },\n    };\n  }\n\n  /**\n   * The Filter Blobs operation enables callers to list blobs in the container whose tags\n   * match a given search expression.\n   *\n   * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                        The given expression must evaluate to true for a blob to be returned in the results.\n   *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                        however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param marker - A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the continuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The continuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param options - Options to find blobs by tags.\n   */\n  private async findBlobsByTagsSegment(\n    tagFilterSqlExpression: string,\n    marker?: string,\n    options: ContainerFindBlobsByTagsSegmentOptions = {}\n  ): Promise<ContainerFindBlobsByTagsSegmentResponse> {\n    const { span, updatedOptions } = createSpan(\"ContainerClient-findBlobsByTagsSegment\", options);\n\n    try {\n      const response = await this.containerContext.filterBlobs({\n        abortSignal: options.abortSignal,\n        where: tagFilterSqlExpression,\n        marker,\n        maxPageSize: options.maxPageSize,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n\n      const wrappedResponse: ContainerFindBlobsByTagsSegmentResponse = {\n        ...response,\n        _response: response._response, // _response is made non-enumerable\n        blobs: response.blobs.map((blob) => {\n          let tagValue = \"\";\n          if (blob.tags?.blobTagSet.length === 1) {\n            tagValue = blob.tags.blobTagSet[0].value;\n          }\n          return { ...blob, tags: toTags(blob.tags), tagValue };\n        }),\n      };\n      return wrappedResponse;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for ContainerFindBlobsByTagsSegmentResponse.\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param marker - A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the continuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The continuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param options - Options to find blobs by tags.\n   */\n  private async *findBlobsByTagsSegments(\n    tagFilterSqlExpression: string,\n    marker?: string,\n    options: ContainerFindBlobsByTagsSegmentOptions = {}\n  ): AsyncIterableIterator<ContainerFindBlobsByTagsSegmentResponse> {\n    let response;\n    if (!!marker || marker === undefined) {\n      do {\n        response = await this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options);\n        response.blobs = response.blobs || [];\n        marker = response.continuationToken;\n        yield response;\n      } while (marker);\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for blobs.\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param options - Options to findBlobsByTagsItems.\n   */\n  private async *findBlobsByTagsItems(\n    tagFilterSqlExpression: string,\n    options: ContainerFindBlobsByTagsSegmentOptions = {}\n  ): AsyncIterableIterator<FilterBlobItem> {\n    let marker: string | undefined;\n    for await (const segment of this.findBlobsByTagsSegments(\n      tagFilterSqlExpression,\n      marker,\n      options\n    )) {\n      yield* segment.blobs;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to find all blobs with specified tag\n   * under the specified container.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * let i = 1;\n   * for await (const blob of containerClient.findBlobsByTags(\"tagkey='tagvalue'\")) {\n   *   console.log(`Blob ${i++}: ${blob.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * const iter = containerClient.findBlobsByTags(\"tagkey='tagvalue'\");\n   * let blobItem = await iter.next();\n   * while (!blobItem.done) {\n   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n   *   blobItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of containerClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 20 })) {\n   *   if (response.blobs) {\n   *     for (const blob of response.blobs) {\n   *       console.log(`Blob ${i++}: ${blob.name}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = containerClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 blob names\n   * if (response.blobs) {\n   *   for (const blob of response.blobs) {\n   *     console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * iterator = containerClient\n   *   .findBlobsByTags(\"tagkey='tagvalue'\")\n   *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints blob names\n   * if (response.blobs) {\n   *   for (const blob of response.blobs) {\n   *      console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n   *                                         The given expression must evaluate to true for a blob to be returned in the results.\n   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n   * @param options - Options to find blobs by tags.\n   */\n  public findBlobsByTags(\n    tagFilterSqlExpression: string,\n    options: ContainerFindBlobByTagsOptions = {}\n  ): PagedAsyncIterableIterator<FilterBlobItem, ContainerFindBlobsByTagsSegmentResponse> {\n    // AsyncIterableIterator to iterate over blobs\n    const listSegmentOptions: ContainerFindBlobsByTagsSegmentOptions = {\n      ...options,\n    };\n\n    const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...listSegmentOptions,\n        });\n      },\n    };\n  }\n\n  private getContainerNameFromUrl(): string {\n    let containerName;\n    try {\n      //  URL may look like the following\n      // \"https://myaccount.blob.core.windows.net/mycontainer?sasString\";\n      // \"https://myaccount.blob.core.windows.net/mycontainer\";\n      // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername`\n      // http://localhost:10001/devstoreaccount1/containername\n\n      const parsedUrl = URLBuilder.parse(this.url);\n\n      if (parsedUrl.getHost()!.split(\".\")[1] === \"blob\") {\n        // \"https://myaccount.blob.core.windows.net/containername\".\n        // \"https://customdomain.com/containername\".\n        // .getPath() -> /containername\n        containerName = parsedUrl.getPath()!.split(\"/\")[1];\n      } else if (isIpEndpointStyle(parsedUrl)) {\n        // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername\n        // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername\n        // .getPath() -> /devstoreaccount1/containername\n        containerName = parsedUrl.getPath()!.split(\"/\")[2];\n      } else {\n        // \"https://customdomain.com/containername\".\n        // .getPath() -> /containername\n        containerName = parsedUrl.getPath()!.split(\"/\")[1];\n      }\n\n      // decode the encoded containerName - to get all the special characters that might be present in it\n      containerName = decodeURIComponent(containerName);\n\n      if (!containerName) {\n        throw new Error(\"Provided containerName is invalid.\");\n      }\n\n      return containerName;\n    } catch (error) {\n      throw new Error(\"Unable to extract containerName with provided information.\");\n    }\n  }\n\n  /**\n   * Only available for ContainerClient constructed with a shared key credential.\n   *\n   * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   * @param options - Optional parameters.\n   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateSasUrl(options: ContainerGenerateSasUrlOptions): Promise<string> {\n    return new Promise((resolve) => {\n      if (!(this.credential instanceof StorageSharedKeyCredential)) {\n        throw new RangeError(\n          \"Can only generate the SAS when the client is initialized with a shared key credential\"\n        );\n      }\n\n      const sas = generateBlobSASQueryParameters(\n        {\n          containerName: this._containerName,\n          ...options,\n        },\n        this.credential\n      ).toString();\n\n      resolve(appendToURLQuery(this.url, sas));\n    });\n  }\n\n  /**\n   * Creates a BlobBatchClient object to conduct batch operations.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   *\n   * @returns A new BlobBatchClient object for this container.\n   */\n  public getBlobBatchClient(): BlobBatchClient {\n    return new BlobBatchClient(this.url, this.pipeline);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport class StorageSharedKeyCredential {}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { PipelineLike } from \"./Pipeline\";\nimport { escapeURLPath, getURLScheme, iEqual, getAccountNameFromUrl } from \"./utils/utils.common\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { TokenCredential, isTokenCredential, isNode } from \"@azure/core-http\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * An interface for options common to every remote operation.\n */\nexport interface CommonOptions {\n  /**\n   * Options to configure spans created when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n}\n\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nexport abstract class StorageClient {\n  /**\n   * Encoded URL string value.\n   */\n  public readonly url: string;\n  public readonly accountName: string;\n  /**\n   * Request policy pipeline.\n   *\n   * @internal\n   */\n  protected readonly pipeline: PipelineLike;\n  /**\n   * Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   */\n  public readonly credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n  /**\n   * StorageClient is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator.\n   */\n  protected readonly storageClientContext: StorageClientContext;\n  /**\n   */\n  protected readonly isHttps: boolean;\n\n  /**\n   * Creates an instance of StorageClient.\n   * @param url - url to resource\n   * @param pipeline - request policy pipeline.\n   */\n  protected constructor(url: string, pipeline: PipelineLike) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.accountName = getAccountNameFromUrl(url);\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageClientContext(\n      this.url,\n      pipeline.toServiceClientOptions()\n    );\n\n    this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n\n    this.credential = new AnonymousCredential();\n    for (const factory of this.pipeline.factories) {\n      if (\n        (isNode && factory instanceof StorageSharedKeyCredential) ||\n        factory instanceof AnonymousCredential\n      ) {\n        this.credential = factory;\n      } else if (isTokenCredential((factory as any).credential)) {\n        // Only works if the factory has been attached a \"credential\" property.\n        // We do that in newPipeline() when using TokenCredential.\n        this.credential = (factory as any).credential;\n      }\n    }\n\n    // Override protocol layer's default content-type\n    const storageClientContext = this.storageClientContext as any;\n    storageClientContext.requestContentType = undefined;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport { StorageClientOptionalParams } from \"./models\";\n\nconst packageName = \"azure-storage-blob\";\nconst packageVersion = \"12.9.0\";\n\nexport class StorageClientContext extends coreHttp.ServiceClient {\n  url: string;\n  version: string;\n\n  /**\n   * Initializes a new instance of the StorageClientContext class.\n   * @param url The URL of the service account, container, or blob that is the target of the desired\n   *            operation.\n   * @param options The parameter options\n   */\n  constructor(url: string, options?: StorageClientOptionalParams) {\n    if (url === undefined) {\n      throw new Error(\"'url' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(undefined, options);\n\n    this.requestContentType = \"application/json; charset=utf-8\";\n\n    this.baseUri = options.endpoint || \"{url}\";\n\n    // Parameter assignments\n    this.url = url;\n\n    // Assigning values to Constant parameters\n    this.version = options.version || \"2021-04-10\";\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions, RequestOptionsBase } from \"@azure/core-http\";\nimport { createSpanFunction } from \"@azure/core-tracing\";\n\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nexport const createSpan = createSpanFunction({\n  packagePrefix: \"Azure.Storage.Blob\",\n  namespace: \"Microsoft.Storage\",\n});\n\n/**\n * @internal\n *\n * Adapt the tracing options from OperationOptions to what they need to be for\n * RequestOptionsBase (when we update to later OpenTelemetry versions this is now\n * two separate fields, not just one).\n */\nexport function convertTracingToRequestOptionsBase(\n  options?: OperationOptions\n): Pick<RequestOptionsBase, \"spanOptions\" | \"tracingContext\"> {\n  return {\n    // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.\n    spanOptions: (options?.tracingOptions as any)?.spanOptions,\n    tracingContext: options?.tracingOptions?.tracingContext,\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BlobSASPermissions } from \"./BlobSASPermissions\";\nimport { UserDelegationKey } from \"../BlobServiceClient\";\nimport { ContainerSASPermissions } from \"./ContainerSASPermissions\";\nimport { StorageSharedKeyCredential } from \"../credentials/StorageSharedKeyCredential\";\nimport { UserDelegationKeyCredential } from \"../credentials/UserDelegationKeyCredential\";\nimport { ipRangeToString, SasIPRange } from \"./SasIPRange\";\nimport { SASProtocol, SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * BlobSASSignatureValues is used to help generating Blob service SAS tokens for containers or blobs.\n */\nexport interface BlobSASSignatureValues {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols, HTTPS only or HTTPSandHTTP\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n\n  /**\n   * Optional only when identifier is provided. The time after which the SAS will no longer work.\n   */\n  expiresOn?: Date;\n\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to either {@link ContainerSASPermissions} or {@link BlobSASPermissions} depending on the resource\n   * being accessed for help constructing the permissions string.\n   */\n  permissions?: BlobSASPermissions | ContainerSASPermissions;\n\n  /**\n   * Optional. IP ranges allowed in this SAS.\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * The name of the container the SAS user may access.\n   */\n  containerName: string;\n\n  /**\n   * Optional. The blob name of the SAS user may access. Required if snapshotTime or versionId is provided.\n   */\n  blobName?: string;\n\n  /**\n   * Optional. Snapshot timestamp string the SAS user may access. Only supported from API version 2018-11-09.\n   */\n  snapshotTime?: string;\n\n  /**\n   * Optional. VersionId of the blob version the SAS user may access. Only supported from API version 2019-10-10.\n   */\n  versionId?: string;\n\n  /**\n   * Optional. The name of the access policy on the container this SAS references if any.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  identifier?: string;\n\n  /**\n   * Optional. Encryption scope to use when sending requests authorized with this SAS URI.\n   */\n  encryptionScope?: string;\n\n  /**\n   * Optional. The cache-control header for the SAS.\n   */\n  cacheControl?: string;\n\n  /**\n   * Optional. The content-disposition header for the SAS.\n   */\n  contentDisposition?: string;\n\n  /**\n   * Optional. The content-encoding header for the SAS.\n   */\n  contentEncoding?: string;\n\n  /**\n   * Optional. The content-language header for the SAS.\n   */\n  contentLanguage?: string;\n\n  /**\n   * Optional. The content-type header for the SAS.\n   */\n  contentType?: string;\n\n  /**\n   * Optional. Beginning in version 2020-02-10, specifies the Authorized AAD Object ID in GUID format. The AAD Object ID of a user\n   * authorized by the owner of the user delegation key to perform the action granted by the SAS. The Azure Storage service will\n   * ensure that the owner of the user delegation key has the required permissions before granting access but no additional permission\n   * check for the user specified in this value will be performed. This is only used for User Delegation SAS.\n   */\n  preauthorizedAgentObjectId?: string;\n\n  /**\n   * Optional. Beginning in version 2020-02-10, this is a GUID value that will be logged in the storage diagnostic logs and can be used to\n   * correlate SAS generation with storage resource access. This is only used for User Delegation SAS.\n   */\n  correlationId?: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * Fill in the required details before running the following snippets.\n *\n * Example usage:\n *\n * ```js\n * // Generate service level SAS for a container\n * const containerSAS = generateBlobSASQueryParameters({\n *     containerName, // Required\n *     permissions: ContainerSASPermissions.parse(\"racwdl\"), // Required\n *     startsOn: new Date(), // Optional\n *     expiresOn: new Date(new Date().valueOf() + 86400), // Required. Date type\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2016-05-31\" // Optional\n *   },\n *   sharedKeyCredential // StorageSharedKeyCredential - `new StorageSharedKeyCredential(account, accountKey)`\n * ).toString();\n * ```\n *\n * Example using an identifier:\n *\n * ```js\n * // Generate service level SAS for a container with identifier\n * // startsOn & permissions are optional when identifier is provided\n * const identifier = \"unique-id\";\n * await containerClient.setAccessPolicy(undefined, [\n *   {\n *     accessPolicy: {\n *       expiresOn: new Date(new Date().valueOf() + 86400), // Date type\n *       permissions: ContainerSASPermissions.parse(\"racwdl\").toString(),\n *       startsOn: new Date() // Date type\n *     },\n *     id: identifier\n *   }\n * ]);\n *\n * const containerSAS = generateBlobSASQueryParameters(\n *   {\n *     containerName, // Required\n *     identifier // Required\n *   },\n *   sharedKeyCredential // StorageSharedKeyCredential - `new StorageSharedKeyCredential(account, accountKey)`\n * ).toString();\n * ```\n *\n * Example using a blob name:\n *\n * ```js\n * // Generate service level SAS for a blob\n * const blobSAS = generateBlobSASQueryParameters({\n *     containerName, // Required\n *     blobName, // Required\n *     permissions: BlobSASPermissions.parse(\"racwd\"), // Required\n *     startsOn: new Date(), // Optional\n *     expiresOn: new Date(new Date().valueOf() + 86400), // Required. Date type\n *     cacheControl: \"cache-control-override\", // Optional\n *     contentDisposition: \"content-disposition-override\", // Optional\n *     contentEncoding: \"content-encoding-override\", // Optional\n *     contentLanguage: \"content-language-override\", // Optional\n *     contentType: \"content-type-override\", // Optional\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2016-05-31\" // Optional\n *   },\n *   sharedKeyCredential // StorageSharedKeyCredential - `new StorageSharedKeyCredential(account, accountKey)`\n * ).toString();\n * ```\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nexport function generateBlobSASQueryParameters(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters;\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Creates an instance of SASQueryParameters.\n * WARNING: identifier will be ignored when generating user delegation SAS, permissions and expiresOn are required.\n *\n * Example usage:\n *\n * ```js\n * // Generate user delegation SAS for a container\n * const userDelegationKey = await blobServiceClient.getUserDelegationKey(startsOn, expiresOn);\n * const containerSAS = generateBlobSASQueryParameters({\n *     containerName, // Required\n *     permissions: ContainerSASPermissions.parse(\"racwdl\"), // Required\n *     startsOn, // Optional. Date type\n *     expiresOn, // Required. Date type\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2018-11-09\" // Must greater than or equal to 2018-11-09 to generate user delegation SAS\n *   },\n *   userDelegationKey, // UserDelegationKey\n *   accountName\n * ).toString();\n * ```\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKey - Return value of `blobServiceClient.getUserDelegationKey()`\n * @param accountName -\n */\nexport function generateBlobSASQueryParameters(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  userDelegationKey: UserDelegationKey,\n  accountName: string\n): SASQueryParameters;\n\nexport function generateBlobSASQueryParameters(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  sharedKeyCredentialOrUserDelegationKey: StorageSharedKeyCredential | UserDelegationKey,\n  accountName?: string\n): SASQueryParameters {\n  const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;\n\n  const sharedKeyCredential =\n    sharedKeyCredentialOrUserDelegationKey instanceof StorageSharedKeyCredential\n      ? sharedKeyCredentialOrUserDelegationKey\n      : undefined;\n  let userDelegationKeyCredential: UserDelegationKeyCredential | undefined;\n\n  if (sharedKeyCredential === undefined && accountName !== undefined) {\n    userDelegationKeyCredential = new UserDelegationKeyCredential(\n      accountName,\n      sharedKeyCredentialOrUserDelegationKey as UserDelegationKey\n    );\n  }\n\n  if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) {\n    throw TypeError(\"Invalid sharedKeyCredential, userDelegationKey or accountName.\");\n  }\n\n  // Version 2020-12-06 adds support for encryptionscope in SAS.\n  if (version >= \"2020-12-06\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential);\n    } else {\n      return generateBlobSASQueryParametersUDK20201206(\n        blobSASSignatureValues,\n        userDelegationKeyCredential!\n      );\n    }\n  }\n\n  // Version 2019-12-12 adds support for the blob tags permission.\n  // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.\n  // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string\n  if (version >= \"2018-11-09\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);\n    } else {\n      // Version 2020-02-10 delegation SAS signature construction includes preauthorizedAgentObjectId, agentObjectId, correlationId.\n      if (version >= \"2020-02-10\") {\n        return generateBlobSASQueryParametersUDK20200210(\n          blobSASSignatureValues,\n          userDelegationKeyCredential!\n        );\n      } else {\n        return generateBlobSASQueryParametersUDK20181109(\n          blobSASSignatureValues,\n          userDelegationKeyCredential!\n        );\n      }\n    }\n  }\n\n  if (version >= \"2015-04-05\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);\n    } else {\n      throw new RangeError(\n        \"'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.\"\n      );\n    }\n  }\n\n  throw new RangeError(\"'version' must be >= '2015-04-05'.\");\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20150405(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n\n  if (\n    !blobSASSignatureValues.identifier &&\n    !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)\n  ) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\"\n    );\n  }\n\n  let resource: string = \"c\";\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      sharedKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    blobSASSignatureValues.identifier,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    blobSASSignatureValues.version,\n    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n  ].join(\"\\n\");\n\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    blobSASSignatureValues.version!,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20181109(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n\n  if (\n    !blobSASSignatureValues.identifier &&\n    !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)\n  ) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\"\n    );\n  }\n\n  let resource: string = \"c\";\n  let timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      sharedKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    blobSASSignatureValues.identifier,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    blobSASSignatureValues.version,\n    resource,\n    timestamp,\n    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n  ].join(\"\\n\");\n\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    blobSASSignatureValues.version!,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20201206(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n\n  if (\n    !blobSASSignatureValues.identifier &&\n    !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)\n  ) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\"\n    );\n  }\n\n  let resource: string = \"c\";\n  let timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      sharedKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    blobSASSignatureValues.identifier,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    blobSASSignatureValues.version,\n    resource,\n    timestamp,\n    blobSASSignatureValues.encryptionScope,\n    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n  ].join(\"\\n\");\n\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    blobSASSignatureValues.version!,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n    undefined,\n    undefined,\n    undefined,\n    blobSASSignatureValues.encryptionScope\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20181109(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  userDelegationKeyCredential: UserDelegationKeyCredential\n): SASQueryParameters {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n\n  // Stored access policies are not supported for a user delegation SAS.\n  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\"\n    );\n  }\n\n  let resource: string = \"c\";\n  let timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      userDelegationKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    userDelegationKeyCredential.userDelegationKey.signedObjectId,\n    userDelegationKeyCredential.userDelegationKey.signedTenantId,\n    userDelegationKeyCredential.userDelegationKey.signedStartsOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedService,\n    userDelegationKeyCredential.userDelegationKey.signedVersion,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    blobSASSignatureValues.version,\n    resource,\n    timestamp,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n  ].join(\"\\n\");\n\n  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n  return new SASQueryParameters(\n    blobSASSignatureValues.version!,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n    userDelegationKeyCredential.userDelegationKey\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-02-10.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20200210(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  userDelegationKeyCredential: UserDelegationKeyCredential\n): SASQueryParameters {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n\n  // Stored access policies are not supported for a user delegation SAS.\n  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\"\n    );\n  }\n\n  let resource: string = \"c\";\n  let timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      userDelegationKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    userDelegationKeyCredential.userDelegationKey.signedObjectId,\n    userDelegationKeyCredential.userDelegationKey.signedTenantId,\n    userDelegationKeyCredential.userDelegationKey.signedStartsOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedService,\n    userDelegationKeyCredential.userDelegationKey.signedVersion,\n    blobSASSignatureValues.preauthorizedAgentObjectId,\n    undefined, // agentObjectId\n    blobSASSignatureValues.correlationId,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    blobSASSignatureValues.version,\n    resource,\n    timestamp,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n  ].join(\"\\n\");\n\n  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n  return new SASQueryParameters(\n    blobSASSignatureValues.version!,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n    userDelegationKeyCredential.userDelegationKey,\n    blobSASSignatureValues.preauthorizedAgentObjectId,\n    blobSASSignatureValues.correlationId\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20201206(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  userDelegationKeyCredential: UserDelegationKeyCredential\n): SASQueryParameters {\n  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n\n  // Stored access policies are not supported for a user delegation SAS.\n  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\"\n    );\n  }\n\n  let resource: string = \"c\";\n  let timestamp = blobSASSignatureValues.snapshotTime;\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    } else if (blobSASSignatureValues.versionId) {\n      resource = \"bv\";\n      timestamp = blobSASSignatureValues.versionId;\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      userDelegationKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    userDelegationKeyCredential.userDelegationKey.signedObjectId,\n    userDelegationKeyCredential.userDelegationKey.signedTenantId,\n    userDelegationKeyCredential.userDelegationKey.signedStartsOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedService,\n    userDelegationKeyCredential.userDelegationKey.signedVersion,\n    blobSASSignatureValues.preauthorizedAgentObjectId,\n    undefined, // agentObjectId\n    blobSASSignatureValues.correlationId,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    blobSASSignatureValues.version,\n    resource,\n    timestamp,\n    blobSASSignatureValues.encryptionScope,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n  ].join(\"\\n\");\n\n  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n  return new SASQueryParameters(\n    blobSASSignatureValues.version!,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n    userDelegationKeyCredential.userDelegationKey,\n    blobSASSignatureValues.preauthorizedAgentObjectId,\n    blobSASSignatureValues.correlationId,\n    blobSASSignatureValues.encryptionScope\n  );\n}\n\nfunction getCanonicalName(accountName: string, containerName: string, blobName?: string): string {\n  // Container: \"/blob/account/containerName\"\n  // Blob:      \"/blob/account/containerName/blobName\"\n  const elements: string[] = [`/blob/${accountName}/${containerName}`];\n  if (blobName) {\n    elements.push(`/${blobName}`);\n  }\n  return elements.join(\"\");\n}\n\nfunction SASSignatureValuesSanityCheckAndAutofill(\n  blobSASSignatureValues: BlobSASSignatureValues\n): BlobSASSignatureValues {\n  const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;\n  if (blobSASSignatureValues.snapshotTime && version < \"2018-11-09\") {\n    throw RangeError(\"'version' must be >= '2018-11-09' when providing 'snapshotTime'.\");\n  }\n  if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.snapshotTime) {\n    throw RangeError(\"Must provide 'blobName' when providing 'snapshotTime'.\");\n  }\n\n  if (blobSASSignatureValues.versionId && version < \"2019-10-10\") {\n    throw RangeError(\"'version' must be >= '2019-10-10' when providing 'versionId'.\");\n  }\n  if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.versionId) {\n    throw RangeError(\"Must provide 'blobName' when providing 'versionId'.\");\n  }\n\n  if (\n    blobSASSignatureValues.permissions &&\n    blobSASSignatureValues.permissions.setImmutabilityPolicy &&\n    version < \"2020-08-04\"\n  ) {\n    throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n  }\n\n  if (\n    blobSASSignatureValues.permissions &&\n    blobSASSignatureValues.permissions.deleteVersion &&\n    version < \"2019-10-10\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-10-10' when providing 'x' permission.\");\n  }\n\n  if (\n    blobSASSignatureValues.permissions &&\n    blobSASSignatureValues.permissions.permanentDelete &&\n    version < \"2019-10-10\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-10-10' when providing 'y' permission.\");\n  }\n\n  if (\n    blobSASSignatureValues.permissions &&\n    blobSASSignatureValues.permissions.tag &&\n    version < \"2019-12-12\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-12-12' when providing 't' permission.\");\n  }\n\n  if (\n    version < \"2020-02-10\" &&\n    blobSASSignatureValues.permissions &&\n    (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)\n  ) {\n    throw RangeError(\"'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.\");\n  }\n\n  if (\n    version < \"2021-04-10\" &&\n    blobSASSignatureValues.permissions &&\n    (blobSASSignatureValues.permissions as ContainerSASPermissions).filterByTags\n  ) {\n    throw RangeError(\"'version' must be >= '2021-04-10' when providing the 'f' permission.\");\n  }\n\n  if (\n    version < \"2020-02-10\" &&\n    (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)\n  ) {\n    throw RangeError(\n      \"'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.\"\n    );\n  }\n\n  if (blobSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n    throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n  }\n\n  blobSASSignatureValues.version = version;\n  return blobSASSignatureValues;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class BlobSASPermissions {\n  /**\n   * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): BlobSASPermissions {\n    const blobSASPermissions = new BlobSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          blobSASPermissions.read = true;\n          break;\n        case \"a\":\n          blobSASPermissions.add = true;\n          break;\n        case \"c\":\n          blobSASPermissions.create = true;\n          break;\n        case \"w\":\n          blobSASPermissions.write = true;\n          break;\n        case \"d\":\n          blobSASPermissions.delete = true;\n          break;\n        case \"x\":\n          blobSASPermissions.deleteVersion = true;\n          break;\n        case \"t\":\n          blobSASPermissions.tag = true;\n          break;\n        case \"m\":\n          blobSASPermissions.move = true;\n          break;\n        case \"e\":\n          blobSASPermissions.execute = true;\n          break;\n        case \"i\":\n          blobSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          blobSASPermissions.permanentDelete = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission: ${char}`);\n      }\n    }\n\n    return blobSASPermissions;\n  }\n\n  /**\n   * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  public static from(permissionLike: BlobSASPermissionsLike): BlobSASPermissions {\n    const blobSASPermissions = new BlobSASPermissions();\n    if (permissionLike.read) {\n      blobSASPermissions.read = true;\n    }\n    if (permissionLike.add) {\n      blobSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      blobSASPermissions.create = true;\n    }\n    if (permissionLike.write) {\n      blobSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      blobSASPermissions.delete = true;\n    }\n    if (permissionLike.deleteVersion) {\n      blobSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.tag) {\n      blobSASPermissions.tag = true;\n    }\n    if (permissionLike.move) {\n      blobSASPermissions.move = true;\n    }\n    if (permissionLike.execute) {\n      blobSASPermissions.execute = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      blobSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      blobSASPermissions.permanentDelete = true;\n    }\n    return blobSASPermissions;\n  }\n\n  /**\n   * Specifies Read access granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Specifies Add access granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Specifies Create access granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Specifies Write access granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  public deleteVersion: boolean = false;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  public tag: boolean = false;\n\n  /**\n   * Specifies Move access granted.\n   */\n  public move: boolean = false;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  public execute: boolean = false;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  public setImmutabilityPolicy: boolean = false;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  public permanentDelete: boolean = false;\n\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * @returns A string which represents the BlobSASPermissions\n   */\n  public toString(): string {\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    return permissions.join(\"\");\n  }\n}\n\n/**\n * A type that looks like a Blob SAS permission.\n * Used in {@link BlobSASPermissions} to parse SAS permissions from raw objects.\n */\nexport interface BlobSASPermissionsLike {\n  /**\n   * Specifies Read access granted.\n   */\n  read?: boolean;\n\n  /**\n   * Specifies Add access granted.\n   */\n  add?: boolean;\n\n  /**\n   * Specifies Create access granted.\n   */\n  create?: boolean;\n\n  /**\n   * Specifies Write access granted.\n   */\n  write?: boolean;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  delete?: boolean;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  deleteVersion?: boolean;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  tag?: boolean;\n\n  /**\n   * Specifies Move access granted.\n   */\n  move?: boolean;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  execute?: boolean;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  setImmutabilityPolicy?: boolean;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  permanentDelete?: boolean;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class ContainerSASPermissions {\n  /**\n   * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): ContainerSASPermissions {\n    const containerSASPermissions = new ContainerSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          containerSASPermissions.read = true;\n          break;\n        case \"a\":\n          containerSASPermissions.add = true;\n          break;\n        case \"c\":\n          containerSASPermissions.create = true;\n          break;\n        case \"w\":\n          containerSASPermissions.write = true;\n          break;\n        case \"d\":\n          containerSASPermissions.delete = true;\n          break;\n        case \"l\":\n          containerSASPermissions.list = true;\n          break;\n        case \"t\":\n          containerSASPermissions.tag = true;\n          break;\n        case \"x\":\n          containerSASPermissions.deleteVersion = true;\n          break;\n        case \"m\":\n          containerSASPermissions.move = true;\n          break;\n        case \"e\":\n          containerSASPermissions.execute = true;\n          break;\n        case \"i\":\n          containerSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          containerSASPermissions.permanentDelete = true;\n          break;\n        case \"f\":\n          containerSASPermissions.filterByTags = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission ${char}`);\n      }\n    }\n\n    return containerSASPermissions;\n  }\n\n  /**\n   * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  public static from(permissionLike: ContainerSASPermissionsLike): ContainerSASPermissions {\n    const containerSASPermissions = new ContainerSASPermissions();\n    if (permissionLike.read) {\n      containerSASPermissions.read = true;\n    }\n    if (permissionLike.add) {\n      containerSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      containerSASPermissions.create = true;\n    }\n    if (permissionLike.write) {\n      containerSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      containerSASPermissions.delete = true;\n    }\n    if (permissionLike.list) {\n      containerSASPermissions.list = true;\n    }\n    if (permissionLike.deleteVersion) {\n      containerSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.tag) {\n      containerSASPermissions.tag = true;\n    }\n    if (permissionLike.move) {\n      containerSASPermissions.move = true;\n    }\n    if (permissionLike.execute) {\n      containerSASPermissions.execute = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      containerSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      containerSASPermissions.permanentDelete = true;\n    }\n    if (permissionLike.filterByTags) {\n      containerSASPermissions.filterByTags = true;\n    }\n    return containerSASPermissions;\n  }\n\n  /**\n   * Specifies Read access granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Specifies Add access granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Specifies Create access granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Specifies Write access granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  public deleteVersion: boolean = false;\n\n  /**\n   * Specifies List access granted.\n   */\n  public list: boolean = false;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  public tag: boolean = false;\n\n  /**\n   * Specifies Move access granted.\n   */\n  public move: boolean = false;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  public execute: boolean = false;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  public setImmutabilityPolicy: boolean = false;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  public permanentDelete: boolean = false;\n\n  /**\n   * Specifies that Filter Blobs by Tags is permitted.\n   */\n  public filterByTags: boolean = false;\n\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * The order of the characters should be as specified here to ensure correctness.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   */\n  public toString(): string {\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    if (this.filterByTags) {\n      permissions.push(\"f\");\n    }\n    return permissions.join(\"\");\n  }\n}\n\n/**\n * A type that looks like a Container SAS permission.\n * Used in {@link ContainerSASPermissions} to parse SAS permissions from raw objects.\n */\nexport interface ContainerSASPermissionsLike {\n  /**\n   * Specifies Read access granted.\n   */\n  read?: boolean;\n\n  /**\n   * Specifies Add access granted.\n   */\n  add?: boolean;\n\n  /**\n   * Specifies Create access granted.\n   */\n  create?: boolean;\n\n  /**\n   * Specifies Write access granted.\n   */\n  write?: boolean;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  delete?: boolean;\n\n  /**\n   * Specifies Delete version access granted.\n   */\n  deleteVersion?: boolean;\n\n  /**\n   * Specifies List access granted.\n   */\n  list?: boolean;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  tag?: boolean;\n\n  /**\n   * Specifies Move access granted.\n   */\n  move?: boolean;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  execute?: boolean;\n\n  /**\n   * Specifies SetImmutabilityPolicy access granted.\n   */\n  setImmutabilityPolicy?: boolean;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  permanentDelete?: boolean;\n\n  /**\n   * Specifies that Filter Blobs by Tags is permitted.\n   */\n  filterByTags?: boolean;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport class UserDelegationKeyCredential {}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Allowed IP range for a SAS.\n */\nexport interface SasIPRange {\n  /**\n   * Starting IP address in the IP range.\n   * If end IP doesn't provide, start IP will the only IP allowed.\n   */\n  start: string;\n  /**\n   * Optional. IP address that ends the IP range.\n   * If not provided, start IP will the only IP allowed.\n   */\n  end?: string;\n}\n\n/**\n * Generate SasIPRange format string. For example:\n *\n * \"8.8.8.8\" or \"1.1.1.1-255.255.255.255\"\n *\n * @param ipRange -\n */\nexport function ipRangeToString(ipRange: SasIPRange): string {\n  return ipRange.end ? `${ipRange.start}-${ipRange.end}` : ipRange.start;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SasIPRange, ipRangeToString } from \"./SasIPRange\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\nimport { UserDelegationKey } from \"../BlobServiceClient\";\n\n/**\n * Protocols for generated SAS.\n */\nexport enum SASProtocol {\n  /**\n   * Protocol that allows HTTPS only\n   */\n  Https = \"https\",\n\n  /**\n   * Protocol that allows both HTTPS and HTTP\n   */\n  HttpsAndHttp = \"https,http\",\n}\n\n/**\n * Options to construct {@link SASQueryParameters}.\n */\nexport interface SASQueryParametersOptions {\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to {@link AccountSASPermissions}, {@link BlobSASPermissions}, or {@link ContainerSASPermissions} for\n   * more details.\n   */\n  permissions?: string;\n  /**\n   * Optional. The storage services being accessed (only for Account SAS). Please refer to {@link AccountSASServices}\n   * for more details.\n   */\n  services?: string;\n  /**\n   * Optional. The storage resource types being accessed (only for Account SAS). Please refer to\n   * {@link AccountSASResourceTypes} for more details.\n   */\n  resourceTypes?: string;\n  /**\n   * Optional. The allowed HTTP protocol(s).\n   */\n  protocol?: SASProtocol;\n  /**\n   * Optional. The start time for this SAS token.\n   */\n  startsOn?: Date;\n  /**\n   * Optional only when identifier is provided. The expiry time for this SAS token.\n   */\n  expiresOn?: Date;\n  /**\n   * Optional. IP ranges allowed in this SAS.\n   */\n  ipRange?: SasIPRange;\n  /**\n   * Optional. The signed identifier (only for {@link BlobSASSignatureValues}).\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  identifier?: string;\n  /**\n   * Optional. Encryption scope to use when sending requests authorized with this SAS URI.\n   */\n  encryptionScope?: string;\n  /**\n   * Optional. Specifies which resources are accessible via the SAS (only for {@link BlobSASSignatureValues}).\n   * @see https://docs.microsoft.com/rest/api/storageservices/create-service-sas#specifying-the-signed-resource-blob-service-only\n   */\n  resource?: string;\n  /**\n   * Value for cache-control header in Blob/File Service SAS.\n   */\n  cacheControl?: string;\n  /**\n   * Value for content-disposition header in Blob/File Service SAS.\n   */\n  contentDisposition?: string;\n  /**\n   * Value for content-encoding header in Blob/File Service SAS.\n   */\n  contentEncoding?: string;\n  /**\n   * Value for content-length header in Blob/File Service SAS.\n   */\n  contentLanguage?: string;\n  /**\n   * Value for content-type header in Blob/File Service SAS.\n   */\n  contentType?: string;\n  /**\n   * User delegation key properties.\n   */\n  userDelegationKey?: UserDelegationKey;\n  /**\n   * Authorized AAD Object ID in GUID format. The AAD Object ID of a user authorized by the owner of the User Delegation Key\n   * to perform the action granted by the SAS. The Azure Storage service will ensure that the owner of the user delegation key\n   * has the required permissions before granting access but no additional permission check for the user specified in\n   * this value will be performed. This cannot be used in conjuction with {@link signedUnauthorizedUserObjectId}.\n   * This is only used for User Delegation SAS.\n   */\n  preauthorizedAgentObjectId?: string;\n  /**\n   * A GUID value that will be logged in the storage diagnostic logs and can be used to correlate SAS generation with storage resource access.\n   * This is only used for User Delegation SAS.\n   */\n  correlationId?: string;\n}\n\n/**\n * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly\n * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link BlobSASSignatureValues}\n * types. Once generated, it can be encoded into a {@link String} and appended to a URL directly (though caution should\n * be taken here in case there are existing query parameters, which might affect the appropriate means of appending\n * these query parameters).\n *\n * NOTE: Instances of this class are immutable.\n */\nexport class SASQueryParameters {\n  /**\n   * The storage API version.\n   */\n  public readonly version: string;\n\n  /**\n   * Optional. The allowed HTTP protocol(s).\n   */\n  public readonly protocol?: SASProtocol;\n\n  /**\n   * Optional. The start time for this SAS token.\n   */\n  public readonly startsOn?: Date;\n\n  /**\n   * Optional only when identifier is provided. The expiry time for this SAS token.\n   */\n  public readonly expiresOn?: Date;\n\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to {@link AccountSASPermissions}, {@link BlobSASPermissions}, or {@link ContainerSASPermissions} for\n   * more details.\n   */\n  public readonly permissions?: string;\n\n  /**\n   * Optional. The storage services being accessed (only for Account SAS). Please refer to {@link AccountSASServices}\n   * for more details.\n   */\n  public readonly services?: string;\n\n  /**\n   * Optional. The storage resource types being accessed (only for Account SAS). Please refer to\n   * {@link AccountSASResourceTypes} for more details.\n   */\n  public readonly resourceTypes?: string;\n\n  /**\n   * Optional. The signed identifier (only for {@link BlobSASSignatureValues}).\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  public readonly identifier?: string;\n\n  /**\n   * Optional. Encryption scope to use when sending requests authorized with this SAS URI.\n   */\n  public readonly encryptionScope?: string;\n\n  /**\n   * Optional. Specifies which resources are accessible via the SAS (only for {@link BlobSASSignatureValues}).\n   * @see https://docs.microsoft.com/rest/api/storageservices/create-service-sas#specifying-the-signed-resource-blob-service-only\n   */\n  public readonly resource?: string;\n\n  /**\n   * The signature for the SAS token.\n   */\n  public readonly signature: string;\n\n  /**\n   * Value for cache-control header in Blob/File Service SAS.\n   */\n  public readonly cacheControl?: string;\n\n  /**\n   * Value for content-disposition header in Blob/File Service SAS.\n   */\n  public readonly contentDisposition?: string;\n\n  /**\n   * Value for content-encoding header in Blob/File Service SAS.\n   */\n  public readonly contentEncoding?: string;\n\n  /**\n   * Value for content-length header in Blob/File Service SAS.\n   */\n  public readonly contentLanguage?: string;\n\n  /**\n   * Value for content-type header in Blob/File Service SAS.\n   */\n  public readonly contentType?: string;\n\n  /**\n   * Inner value of getter ipRange.\n   */\n  private readonly ipRangeInner?: SasIPRange;\n\n  /**\n   * The Azure Active Directory object ID in GUID format.\n   * Property of user delegation key.\n   */\n  private readonly signedOid?: string;\n\n  /**\n   * The Azure Active Directory tenant ID in GUID format.\n   * Property of user delegation key.\n   */\n  private readonly signedTenantId?: string;\n\n  /**\n   * The date-time the key is active.\n   * Property of user delegation key.\n   */\n  private readonly signedStartsOn?: Date;\n\n  /**\n   * The date-time the key expires.\n   * Property of user delegation key.\n   */\n  private readonly signedExpiresOn?: Date;\n\n  /**\n   * Abbreviation of the Azure Storage service that accepts the user delegation key.\n   * Property of user delegation key.\n   */\n  private readonly signedService?: string;\n\n  /**\n   * The service version that created the user delegation key.\n   * Property of user delegation key.\n   */\n  private readonly signedVersion?: string;\n\n  /**\n   * Authorized AAD Object ID in GUID format. The AAD Object ID of a user authorized by the owner of the User Delegation Key\n   * to perform the action granted by the SAS. The Azure Storage service will ensure that the owner of the user delegation key\n   * has the required permissions before granting access but no additional permission check for the user specified in\n   * this value will be performed. This is only used for User Delegation SAS.\n   */\n  public readonly preauthorizedAgentObjectId?: string;\n\n  /**\n   * A GUID value that will be logged in the storage diagnostic logs and can be used to correlate SAS generation with storage resource access.\n   * This is only used for User Delegation SAS.\n   */\n  public readonly correlationId?: string;\n\n  /**\n   * Optional. IP range allowed for this SAS.\n   *\n   * @readonly\n   */\n  public get ipRange(): SasIPRange | undefined {\n    if (this.ipRangeInner) {\n      return {\n        end: this.ipRangeInner.end,\n        start: this.ipRangeInner.start,\n      };\n    }\n    return undefined;\n  }\n\n  /**\n   * Creates an instance of SASQueryParameters.\n   *\n   * @param version - Representing the storage version\n   * @param signature - Representing the signature for the SAS token\n   * @param permissions - Representing the storage permissions\n   * @param services - Representing the storage services being accessed (only for Account SAS)\n   * @param resourceTypes - Representing the storage resource types being accessed (only for Account SAS)\n   * @param protocol - Representing the allowed HTTP protocol(s)\n   * @param startsOn - Representing the start time for this SAS token\n   * @param expiresOn - Representing the expiry time for this SAS token\n   * @param ipRange - Representing the range of valid IP addresses for this SAS token\n   * @param identifier - Representing the signed identifier (only for Service SAS)\n   * @param resource - Representing the storage container or blob (only for Service SAS)\n   * @param cacheControl - Representing the cache-control header (only for Blob/File Service SAS)\n   * @param contentDisposition - Representing the content-disposition header (only for Blob/File Service SAS)\n   * @param contentEncoding - Representing the content-encoding header (only for Blob/File Service SAS)\n   * @param contentLanguage - Representing the content-language header (only for Blob/File Service SAS)\n   * @param contentType - Representing the content-type header (only for Blob/File Service SAS)\n   * @param userDelegationKey - Representing the user delegation key properties\n   * @param preauthorizedAgentObjectId - Representing the authorized AAD Object ID (only for User Delegation SAS)\n   * @param correlationId - Representing the correlation ID (only for User Delegation SAS)\n   * @param encryptionScope -\n   */\n  constructor(\n    version: string,\n    signature: string,\n    permissions?: string,\n    services?: string,\n    resourceTypes?: string,\n    protocol?: SASProtocol,\n    startsOn?: Date,\n    expiresOn?: Date,\n    ipRange?: SasIPRange,\n    identifier?: string,\n    resource?: string,\n    cacheControl?: string,\n    contentDisposition?: string,\n    contentEncoding?: string,\n    contentLanguage?: string,\n    contentType?: string,\n    userDelegationKey?: UserDelegationKey,\n    preauthorizedAgentObjectId?: string,\n    correlationId?: string,\n    encryptionScope?: string\n  );\n\n  /**\n   * Creates an instance of SASQueryParameters.\n   *\n   * @param version - Representing the storage version\n   * @param signature - Representing the signature for the SAS token\n   * @param options - Optional. Options to construct the SASQueryParameters.\n   */\n  constructor(version: string, signature: string, options?: SASQueryParametersOptions);\n\n  constructor(\n    version: string,\n    signature: string,\n    permissionsOrOptions?: string | SASQueryParametersOptions,\n    services?: string,\n    resourceTypes?: string,\n    protocol?: SASProtocol,\n    startsOn?: Date,\n    expiresOn?: Date,\n    ipRange?: SasIPRange,\n    identifier?: string,\n    resource?: string,\n    cacheControl?: string,\n    contentDisposition?: string,\n    contentEncoding?: string,\n    contentLanguage?: string,\n    contentType?: string,\n    userDelegationKey?: UserDelegationKey,\n    preauthorizedAgentObjectId?: string,\n    correlationId?: string,\n    encryptionScope?: string\n  ) {\n    this.version = version;\n    this.signature = signature;\n\n    if (permissionsOrOptions !== undefined && typeof permissionsOrOptions !== \"string\") {\n      // SASQueryParametersOptions\n      this.permissions = permissionsOrOptions.permissions;\n      this.services = permissionsOrOptions.services;\n      this.resourceTypes = permissionsOrOptions.resourceTypes;\n      this.protocol = permissionsOrOptions.protocol;\n      this.startsOn = permissionsOrOptions.startsOn;\n      this.expiresOn = permissionsOrOptions.expiresOn;\n      this.ipRangeInner = permissionsOrOptions.ipRange;\n      this.identifier = permissionsOrOptions.identifier;\n      this.encryptionScope = permissionsOrOptions.encryptionScope;\n      this.resource = permissionsOrOptions.resource;\n      this.cacheControl = permissionsOrOptions.cacheControl;\n      this.contentDisposition = permissionsOrOptions.contentDisposition;\n      this.contentEncoding = permissionsOrOptions.contentEncoding;\n      this.contentLanguage = permissionsOrOptions.contentLanguage;\n      this.contentType = permissionsOrOptions.contentType;\n\n      if (permissionsOrOptions.userDelegationKey) {\n        this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;\n        this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;\n        this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;\n        this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;\n        this.signedService = permissionsOrOptions.userDelegationKey.signedService;\n        this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;\n\n        this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;\n        this.correlationId = permissionsOrOptions.correlationId;\n      }\n    } else {\n      this.services = services;\n      this.resourceTypes = resourceTypes;\n      this.expiresOn = expiresOn;\n      this.permissions = permissionsOrOptions;\n      this.protocol = protocol;\n      this.startsOn = startsOn;\n      this.ipRangeInner = ipRange;\n      this.encryptionScope = encryptionScope;\n      this.identifier = identifier;\n      this.resource = resource;\n      this.cacheControl = cacheControl;\n      this.contentDisposition = contentDisposition;\n      this.contentEncoding = contentEncoding;\n      this.contentLanguage = contentLanguage;\n      this.contentType = contentType;\n\n      if (userDelegationKey) {\n        this.signedOid = userDelegationKey.signedObjectId;\n        this.signedTenantId = userDelegationKey.signedTenantId;\n        this.signedStartsOn = userDelegationKey.signedStartsOn;\n        this.signedExpiresOn = userDelegationKey.signedExpiresOn;\n        this.signedService = userDelegationKey.signedService;\n        this.signedVersion = userDelegationKey.signedVersion;\n\n        this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;\n        this.correlationId = correlationId;\n      }\n    }\n  }\n\n  /**\n   * Encodes all SAS query parameters into a string that can be appended to a URL.\n   *\n   */\n  public toString(): string {\n    const params: string[] = [\n      \"sv\",\n      \"ss\",\n      \"srt\",\n      \"spr\",\n      \"st\",\n      \"se\",\n      \"sip\",\n      \"si\",\n      \"ses\",\n      \"skoid\", // Signed object ID\n      \"sktid\", // Signed tenant ID\n      \"skt\", // Signed key start time\n      \"ske\", // Signed key expiry time\n      \"sks\", // Signed key service\n      \"skv\", // Signed key version\n      \"sr\",\n      \"sp\",\n      \"sig\",\n      \"rscc\",\n      \"rscd\",\n      \"rsce\",\n      \"rscl\",\n      \"rsct\",\n      \"saoid\",\n      \"scid\",\n    ];\n    const queries: string[] = [];\n\n    for (const param of params) {\n      switch (param) {\n        case \"sv\":\n          this.tryAppendQueryParameter(queries, param, this.version);\n          break;\n        case \"ss\":\n          this.tryAppendQueryParameter(queries, param, this.services);\n          break;\n        case \"srt\":\n          this.tryAppendQueryParameter(queries, param, this.resourceTypes);\n          break;\n        case \"spr\":\n          this.tryAppendQueryParameter(queries, param, this.protocol);\n          break;\n        case \"st\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.startsOn ? truncatedISO8061Date(this.startsOn, false) : undefined\n          );\n          break;\n        case \"se\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.expiresOn ? truncatedISO8061Date(this.expiresOn, false) : undefined\n          );\n          break;\n        case \"sip\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.ipRange ? ipRangeToString(this.ipRange) : undefined\n          );\n          break;\n        case \"si\":\n          this.tryAppendQueryParameter(queries, param, this.identifier);\n          break;\n        case \"ses\":\n          this.tryAppendQueryParameter(queries, param, this.encryptionScope);\n          break;\n        case \"skoid\": // Signed object ID\n          this.tryAppendQueryParameter(queries, param, this.signedOid);\n          break;\n        case \"sktid\": // Signed tenant ID\n          this.tryAppendQueryParameter(queries, param, this.signedTenantId);\n          break;\n        case \"skt\": // Signed key start time\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.signedStartsOn ? truncatedISO8061Date(this.signedStartsOn, false) : undefined\n          );\n          break;\n        case \"ske\": // Signed key expiry time\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.signedExpiresOn ? truncatedISO8061Date(this.signedExpiresOn, false) : undefined\n          );\n          break;\n        case \"sks\": // Signed key service\n          this.tryAppendQueryParameter(queries, param, this.signedService);\n          break;\n        case \"skv\": // Signed key version\n          this.tryAppendQueryParameter(queries, param, this.signedVersion);\n          break;\n        case \"sr\":\n          this.tryAppendQueryParameter(queries, param, this.resource);\n          break;\n        case \"sp\":\n          this.tryAppendQueryParameter(queries, param, this.permissions);\n          break;\n        case \"sig\":\n          this.tryAppendQueryParameter(queries, param, this.signature);\n          break;\n        case \"rscc\":\n          this.tryAppendQueryParameter(queries, param, this.cacheControl);\n          break;\n        case \"rscd\":\n          this.tryAppendQueryParameter(queries, param, this.contentDisposition);\n          break;\n        case \"rsce\":\n          this.tryAppendQueryParameter(queries, param, this.contentEncoding);\n          break;\n        case \"rscl\":\n          this.tryAppendQueryParameter(queries, param, this.contentLanguage);\n          break;\n        case \"rsct\":\n          this.tryAppendQueryParameter(queries, param, this.contentType);\n          break;\n        case \"saoid\":\n          this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);\n          break;\n        case \"scid\":\n          this.tryAppendQueryParameter(queries, param, this.correlationId);\n          break;\n      }\n    }\n    return queries.join(\"&\");\n  }\n\n  /**\n   * A private helper method used to filter and append query key/value pairs into an array.\n   *\n   * @param queries -\n   * @param key -\n   * @param value -\n   */\n  private tryAppendQueryParameter(queries: string[], key: string, value?: string): void {\n    if (!value) {\n      return;\n    }\n\n    key = encodeURIComponent(key);\n    value = encodeURIComponent(value);\n    if (key.length > 0 && value.length > 0) {\n      queries.push(`${key}=${value}`);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { generateUuid, HttpResponse } from \"@azure/core-http\";\nimport { StorageClientContext } from \"./generated/src/index\";\nimport { ContainerBreakLeaseOptionalParams } from \"./generatedModels\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Blob as StorageBlob, Container } from \"./generated/src/operations\";\nimport { ModifiedAccessConditions } from \"./models\";\nimport { CommonOptions } from \"./StorageClient\";\nimport { ETagNone } from \"./utils/constants\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { BlobClient } from \"./Clients\";\nimport { ContainerClient } from \"./ContainerClient\";\n\n/**\n * The details for a specific lease.\n */\nexport interface Lease {\n  /**\n   * The ETag contains a value that you can use to\n   * perform operations conditionally. If the request version is 2011-08-18 or\n   * newer, the ETag value will be in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the container was\n   * last modified. Any operation that modifies the blob, including an update\n   * of the blob's metadata or properties, changes the last-modified time of\n   * the blob.\n   */\n  lastModified?: Date;\n  /**\n   * Uniquely identifies a container's lease\n   */\n  leaseId?: string;\n  /**\n   * Approximate time remaining in the lease\n   * period, in seconds.\n   */\n  leaseTime?: number;\n  /**\n   * This header uniquely identifies the request\n   * that was made and can be used for troubleshooting the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the Blob service used\n   * to execute the request. This header is returned for requests made against\n   * version 2009-09-19 and above.\n   */\n  version?: string;\n  /**\n   * UTC date/time value generated by the service that\n   * indicates the time at which the response was initiated\n   */\n  date?: Date;\n  /**\n   * Error code if any associated with the response that returned\n   * the Lease information.\n   */\n  errorCode?: string;\n}\n\n/**\n * Contains the response data for operations that create, modify, or delete a lease.\n *\n * See {@link BlobLeaseClient}.\n */\nexport type LeaseOperationResponse = Lease & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: HttpResponse & {\n    /**\n     * The parsed HTTP response headers.\n     */\n    parsedHeaders: Lease;\n  };\n};\n\n/**\n * Configures lease operations.\n */\nexport interface LeaseOperationOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when changing the lease.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nexport class BlobLeaseClient {\n  private _leaseId: string;\n  private _url: string;\n  private _containerOrBlobOperation: Container | StorageBlob;\n  private _isContainer: boolean;\n\n  /**\n   * Gets the lease Id.\n   *\n   * @readonly\n   */\n  public get leaseId(): string {\n    return this._leaseId;\n  }\n\n  /**\n   * Gets the url.\n   *\n   * @readonly\n   */\n  public get url(): string {\n    return this._url;\n  }\n\n  /**\n   * Creates an instance of BlobLeaseClient.\n   * @param client - The client to make the lease operation requests.\n   * @param leaseId - Initial proposed lease id.\n   */\n  constructor(client: ContainerClient | BlobClient, leaseId?: string) {\n    const clientContext = new StorageClientContext(\n      client.url,\n      (client as any).pipeline.toServiceClientOptions()\n    );\n    this._url = client.url;\n\n    if ((client as BlobClient).name === undefined) {\n      this._isContainer = true;\n      this._containerOrBlobOperation = new Container(clientContext);\n    } else {\n      this._isContainer = false;\n      this._containerOrBlobOperation = new StorageBlob(clientContext);\n    }\n\n    if (!leaseId) {\n      leaseId = generateUuid();\n    }\n    this._leaseId = leaseId;\n  }\n\n  /**\n   * Establishes and manages a lock on a container for delete operations, or on a blob\n   * for write and delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n   * @param options - option to configure lease management operations.\n   * @returns Response data for acquire lease operation.\n   */\n  public async acquireLease(\n    duration: number,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-acquireLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      return await this._containerOrBlobOperation.acquireLease({\n        abortSignal: options.abortSignal,\n        duration,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        proposedLeaseId: this._leaseId,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To change the ID of the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param proposedLeaseId - the proposed new lease Id.\n   * @param options - option to configure lease management operations.\n   * @returns Response data for change lease operation.\n   */\n  public async changeLease(\n    proposedLeaseId: string,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-changeLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      const response = await this._containerOrBlobOperation.changeLease(\n        this._leaseId,\n        proposedLeaseId,\n        {\n          abortSignal: options.abortSignal,\n          modifiedAccessConditions: {\n            ...options.conditions,\n            ifTags: options.conditions?.tagConditions,\n          },\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n        }\n      );\n      this._leaseId = proposedLeaseId;\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To free the lease if it is no longer needed so that another client may\n   * immediately acquire a lease against the container or the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param options - option to configure lease management operations.\n   * @returns Response data for release lease operation.\n   */\n  public async releaseLease(options: LeaseOperationOptions = {}): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-releaseLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      return await this._containerOrBlobOperation.releaseLease(this._leaseId, {\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To renew the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param options - Optional option to configure lease management operations.\n   * @returns Response data for renew lease operation.\n   */\n  public async renewLease(options: LeaseOperationOptions = {}): Promise<Lease> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-renewLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      return await this._containerOrBlobOperation.renewLease(this._leaseId, {\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * To end the lease but ensure that another client cannot acquire a new lease\n   * until the current lease period has expired.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param breakPeriod - Break period\n   * @param options - Optional options to configure lease management operations.\n   * @returns Response data for break lease operation.\n   */\n  public async breakLease(\n    breakPeriod: number,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobLeaseClient-breakLease\", options);\n\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\"\n      );\n    }\n\n    try {\n      const operationOptions: ContainerBreakLeaseOptionalParams = {\n        abortSignal: options.abortSignal,\n        breakPeriod,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      };\n      return await this._containerOrBlobOperation.breakLease(operationOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport {\n  generateUuid,\n  getDefaultProxySettings,\n  HttpRequestBody,\n  HttpResponse,\n  isNode,\n  isTokenCredential,\n  TokenCredential,\n  TransferProgressEvent,\n  URLBuilder,\n} from \"@azure/core-http\";\nimport { PollerLike, PollOperationState } from \"@azure/core-lro\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Readable } from \"stream\";\n\nimport { BlobDownloadResponse } from \"./BlobDownloadResponse\";\nimport { BlobQueryResponse } from \"./BlobQueryResponse\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AppendBlob, Blob as StorageBlob, BlockBlob, PageBlob } from \"./generated/src/operations\";\nimport {\n  AppendBlobAppendBlockFromUrlResponse,\n  AppendBlobAppendBlockResponse,\n  AppendBlobCreateResponse,\n  BlobAbortCopyFromURLResponse,\n  BlobCopyFromURLResponse,\n  BlobCreateSnapshotResponse,\n  BlobDeleteResponse,\n  BlobDownloadOptionalParams,\n  BlobDownloadResponseModel,\n  BlobGetPropertiesResponseModel,\n  BlobGetTagsHeaders,\n  BlobSetHTTPHeadersResponse,\n  BlobSetMetadataResponse,\n  BlobSetTagsResponse,\n  BlobSetTierResponse,\n  BlobStartCopyFromURLResponse,\n  BlobTags,\n  BlobUndeleteResponse,\n  BlockBlobCommitBlockListResponse,\n  BlockBlobGetBlockListResponse,\n  BlockBlobStageBlockFromURLResponse,\n  BlockBlobStageBlockResponse,\n  BlockBlobUploadHeaders,\n  BlockBlobUploadResponse,\n  BlockListType,\n  CpkInfo,\n  DeleteSnapshotsOptionType,\n  LeaseAccessConditions,\n  PageBlobClearPagesResponse,\n  PageBlobCopyIncrementalResponse,\n  PageBlobCreateResponse,\n  PageBlobResizeResponse,\n  PageBlobUpdateSequenceNumberResponse,\n  PageBlobUploadPagesFromURLResponse,\n  PageBlobUploadPagesResponse,\n  RehydratePriority,\n  SequenceNumberActionType,\n  BlockBlobPutBlobFromUrlResponse,\n  BlobHTTPHeaders,\n} from \"./generatedModels\";\nimport {\n  AppendBlobRequestConditions,\n  BlobDownloadResponseParsed,\n  BlobRequestConditions,\n  BlockBlobTier,\n  ensureCpkIfSpecified,\n  Metadata,\n  ObjectReplicationPolicy,\n  PageBlobRequestConditions,\n  PremiumPageBlobTier,\n  Tags,\n  toAccessTier,\n  TagConditions,\n  MatchConditions,\n  ModificationConditions,\n  ModifiedAccessConditions,\n  BlobQueryArrowField,\n  BlobImmutabilityPolicy,\n  HttpAuthorization,\n} from \"./models\";\nimport {\n  PageBlobGetPageRangesDiffResponse,\n  PageBlobGetPageRangesResponse,\n  rangeResponseFromModel,\n} from \"./PageBlobRangeResponse\";\nimport { newPipeline, PipelineLike, isPipelineLike, StoragePipelineOptions } from \"./Pipeline\";\nimport {\n  BlobBeginCopyFromUrlPoller,\n  BlobBeginCopyFromUrlPollState,\n  CopyPollerBlobClient,\n} from \"./pollers/BlobStartCopyFromUrlPoller\";\nimport { Range, rangeToString } from \"./Range\";\nimport { CommonOptions, StorageClient } from \"./StorageClient\";\nimport { Batch } from \"./utils/Batch\";\nimport { BufferScheduler } from \"../../storage-common/src\";\nimport {\n  BlobUsesCustomerSpecifiedEncryptionMsg,\n  BLOCK_BLOB_MAX_BLOCKS,\n  BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES,\n  BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES,\n  DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES,\n  DEFAULT_BLOCK_BUFFER_SIZE_BYTES,\n  DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS,\n  ETagAny,\n  URLConstants,\n} from \"./utils/constants\";\nimport { createSpan, convertTracingToRequestOptionsBase } from \"./utils/tracing\";\nimport {\n  appendToURLPath,\n  appendToURLQuery,\n  extractConnectionStringParts,\n  generateBlockID,\n  getURLParameter,\n  httpAuthorizationToString,\n  isIpEndpointStyle,\n  parseObjectReplicationRecord,\n  setURLParameter,\n  toBlobTags,\n  toBlobTagsString,\n  toQuerySerialization,\n  toTags,\n} from \"./utils/utils.common\";\nimport {\n  fsCreateReadStream,\n  fsStat,\n  readStreamToLocalFile,\n  streamToBuffer,\n} from \"./utils/utils.node\";\nimport { SASProtocol } from \"./sas/SASQueryParameters\";\nimport { SasIPRange } from \"./sas/SasIPRange\";\nimport { generateBlobSASQueryParameters } from \"./sas/BlobSASSignatureValues\";\nimport { BlobSASPermissions } from \"./sas/BlobSASPermissions\";\nimport { BlobLeaseClient } from \"./BlobLeaseClient\";\nimport {\n  BlobDeleteImmutabilityPolicyResponse,\n  BlobSetImmutabilityPolicyResponse,\n  BlobSetLegalHoldResponse,\n} from \"./generatedModels\";\n\n/**\n * Options to configure the {@link BlobClient.beginCopyFromURL} operation.\n */\nexport interface BlobBeginCopyFromURLOptions extends BlobStartCopyFromURLOptions {\n  /**\n   * The amount of time in milliseconds the poller should wait between\n   * calls to the service to determine the status of the Blob copy.\n   * Defaults to 15 seconds.\n   */\n  intervalInMs?: number;\n  /**\n   * Callback to receive the state of the copy progress.\n   */\n  onProgress?: (state: BlobBeginCopyFromUrlPollState) => void;\n  /**\n   * Serialized poller state that can be used to resume polling from.\n   * This may be useful when starting a copy on one process or thread\n   * and you wish to continue polling on another process or thread.\n   *\n   * To get serialized poller state, call `poller.toString()` on an existing\n   * poller.\n   */\n  resumeFrom?: string;\n}\n\n/**\n * Contains response data for the {@link BlobClient.beginCopyFromURL} operation.\n */\nexport interface BlobBeginCopyFromURLResponse extends BlobStartCopyFromURLResponse {}\n\n/**\n * Options to configure the {@link BlobClient.download} operation.\n */\nexport interface BlobDownloadOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * An opaque DateTime string value that, when present, specifies the blob snapshot to retrieve.\n   */\n  snapshot?: string;\n  /**\n   * When this is set to true and download range of blob, the service returns the MD5 hash for the range,\n   * as long as the range is less than or equal to 4 MB in size.\n   *\n   * rangeGetContentCrc64 and rangeGetContentMD5 cannot be set at same time.\n   */\n  rangeGetContentMD5?: boolean;\n  /**\n   * When this is set to true and download range of blob, the service returns the CRC64 hash for the range,\n   * as long as the range is less than or equal to 4 MB in size.\n   *\n   * rangeGetContentCrc64 and rangeGetContentMD5 cannot be set at same time.\n   */\n  rangeGetContentCrc64?: boolean;\n  /**\n   * Conditions to meet when downloading blobs.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * Call back to receive events on the progress of download operation.\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Optional. ONLY AVAILABLE IN NODE.JS.\n   *\n   * How many retries will perform when original body download stream unexpected ends.\n   * Above kind of ends will not trigger retry policy defined in a pipeline,\n   * because they doesn't emit network errors.\n   *\n   * With this option, every additional retry means an additional `FileClient.download()` request will be made\n   * from the broken point, until the requested range has been successfully downloaded or maxRetryRequests is reached.\n   *\n   * Default value is 5, please set a larger value when loading large files in poor network.\n   */\n  maxRetryRequests?: number;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n}\n\n/**\n * Options to configure the {@link BlobClient.exists} operation.\n */\nexport interface BlobExistsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Conditions to meet.\n   */\n  conditions?: BlobRequestConditions;\n}\n\n/**\n * Options to configure the {@link BlobClient.getProperties} operation.\n */\nexport interface BlobGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when getting blob properties.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n}\n\n/**\n * Options to configure the {@link BlobClient.delete} operation.\n */\nexport interface BlobDeleteOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when deleting blobs.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * Specifies options to delete blobs that have associated snapshots.\n   * - `include`: Delete the base blob and all of its snapshots.\n   * - `only`: Delete only the blob's snapshots and not the blob itself.\n   */\n  deleteSnapshots?: DeleteSnapshotsOptionType;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n}\n\n/**\n * Options to configure the {@link BlobClient.undelete} operation.\n */\nexport interface BlobUndeleteOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n}\n\n/**\n * Options to configure the {@link BlobClient.setHTTPHeaders} operation.\n */\nexport interface BlobSetHTTPHeadersOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when setting blob HTTP headers.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n}\n\n/**\n * Options to configure the {@link BlobClient.setMetadata} operation.\n */\nexport interface BlobSetMetadataOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when setting blob metadata.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n}\n\n/**\n * Options to configure the {@link BlobClient.setTags} operation.\n */\nexport interface BlobSetTagsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet for the blob to perform this operation.\n   */\n  conditions?: TagConditions & LeaseAccessConditions;\n}\n\n/**\n * Options to configure the {@link BlobClient.getTags} operation.\n */\nexport interface BlobGetTagsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet for the blob to perform this operation.\n   */\n  conditions?: TagConditions & LeaseAccessConditions;\n}\n\n/**\n * Contains response data for the {@link BlobClient.getTags} operation.\n */\nexport type BlobGetTagsResponse = { tags: Tags } & BlobGetTagsHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: BlobGetTagsHeaders;\n\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: BlobTags;\n    };\n  };\n\n/**\n * Options to configure Blob - Acquire Lease operation.\n */\nexport interface BlobAcquireLeaseOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when acquiring the lease of a blob.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Blob - Release Lease operation.\n */\nexport interface BlobReleaseLeaseOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when releasing the lease of a blob.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Blob - Renew Lease operation.\n */\nexport interface BlobRenewLeaseOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when renewing the lease of a blob.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Blob - Change Lease operation.\n */\nexport interface BlobChangeLeaseOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when changing the lease of a blob.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Blob - Break Lease operation.\n */\nexport interface BlobBreakLeaseOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when breaking the lease of a blob.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * Options to configure the {@link BlobClient.createSnapshot} operation.\n */\nexport interface BlobCreateSnapshotOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * A collection of key-value string pair to associate with the snapshot.\n   */\n  metadata?: Metadata;\n  /**\n   * Conditions to meet when creating blob snapshots.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n}\n\n/**\n * Options to configure the {@link BlobClient.beginCopyFromURL} operation.\n */\nexport interface BlobStartCopyFromURLOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * A collection of key-value string pair to associate with the blob that are being copied.\n   */\n  metadata?: Metadata;\n  /**\n   * Conditions to meet for the destination blob when copying from a URL to the blob.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * Conditions to meet for the source Azure Blob/File when copying from a URL to the blob.\n   */\n  sourceConditions?: ModifiedAccessConditions;\n  /**\n   * Access tier.\n   * More Details - https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers\n   */\n  tier?: BlockBlobTier | PremiumPageBlobTier | string;\n  /**\n   * Rehydrate Priority - possible values include 'High', 'Standard'.\n   * More Details - https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-rehydration#rehydrate-an-archived-blob-to-an-online-tier\n   */\n  rehydratePriority?: RehydratePriority;\n  /**\n   * Optional. Specifies immutability policy for a blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  immutabilityPolicy?: BlobImmutabilityPolicy;\n  /**\n   * Optional. Indicates if a legal hold should be placed on the blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  legalHold?: boolean;\n  /**\n   * Blob tags.\n   */\n  tags?: Tags;\n  /**\n   * Overrides the sealed state of the destination blob. Default true.\n   */\n  sealBlob?: boolean;\n}\n\n/**\n * Options to configure the {@link BlobClient.abortCopyFromURL} operation.\n */\nexport interface BlobAbortCopyFromURLOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   */\n  conditions?: LeaseAccessConditions;\n}\n\n/**\n * Options to configure the {@link BlobClient.syncCopyFromURL} operation.\n */\nexport interface BlobSyncCopyFromURLOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * A collection of key-value string pair to associate with the snapshot.\n   */\n  metadata?: Metadata;\n  /**\n   * Conditions to meet for the destination blob when copying from a URL to the blob.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * Conditions to meet for the source Azure Blob/File when copying from a URL to the blob.\n   */\n  sourceConditions?: MatchConditions & ModificationConditions;\n  /**\n   * Specify the md5 calculated for the range of bytes that must be read from the copy source.\n   */\n  sourceContentMD5?: Uint8Array;\n  /**\n   * Optional. Specifies immutability policy for a blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  immutabilityPolicy?: BlobImmutabilityPolicy;\n  /**\n   * Optional. Indicates if a legal hold should be placed on the blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  legalHold?: boolean;\n  /**\n   * Blob tags.\n   */\n  tags?: Tags;\n  /**\n   * Only Bearer type is supported. Credentials should be a valid OAuth access token to copy source.\n   */\n  sourceAuthorization?: HttpAuthorization;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to encrypt the data provided in the request. If not specified, encryption is performed with the default account encryption scope.  For more information, see Encryption at Rest for Azure Storage Services.\n   */\n  encryptionScope?: string;\n}\n\n/**\n * Options to configure the {@link BlobClient.setAccessTier} operation.\n */\nexport interface BlobSetTierOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   */\n  conditions?: LeaseAccessConditions & TagConditions;\n  /**\n   * Rehydrate Priority - possible values include 'High', 'Standard'.\n   * More Details - https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-rehydration#rehydrate-an-archived-blob-to-an-online-tier\n   */\n  rehydratePriority?: RehydratePriority;\n}\n\n/**\n * Option interface for the {@link BlobClient.downloadToBuffer} operation.\n */\nexport interface BlobDownloadToBufferOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * blockSize is the data every request trying to download.\n   * Must be greater than or equal to 0.\n   * If set to 0 or undefined, blockSize will automatically calculated according to the blob size.\n   */\n  blockSize?: number;\n\n  /**\n   * Optional. ONLY AVAILABLE IN NODE.JS.\n   *\n   * How many retries will perform when original block download stream unexpected ends.\n   * Above kind of ends will not trigger retry policy defined in a pipeline,\n   * because they doesn't emit network errors.\n   *\n   * With this option, every additional retry means an additional FileClient.download() request will be made\n   * from the broken point, until the requested block has been successfully downloaded or\n   * maxRetryRequestsPerBlock is reached.\n   *\n   * Default value is 5, please set a larger value when in poor network.\n   */\n  maxRetryRequestsPerBlock?: number;\n\n  /**\n   * Progress updater.\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Access conditions headers.\n   */\n  conditions?: BlobRequestConditions;\n\n  /**\n   * Concurrency of parallel download.\n   */\n  concurrency?: number;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n}\n\n/**\n * Contains response data for the {@link BlobClient.deleteIfExists} operation.\n */\nexport interface BlobDeleteIfExistsResponse extends BlobDeleteResponse {\n  /**\n   * Indicate whether the blob is successfully deleted. Is false if the blob does not exist in the first place.\n   */\n  succeeded: boolean;\n}\n\n/**\n * Contains response data for the {@link BlobClient.getProperties} operation.\n */\nexport interface BlobGetPropertiesResponse extends BlobGetPropertiesResponseModel {\n  /**\n   * Parsed Object Replication Policy Id, Rule Id(s) and status of the source blob.\n   */\n  objectReplicationSourceProperties?: ObjectReplicationPolicy[];\n\n  /**\n   * Object Replication Policy Id of the destination blob.\n   */\n  objectReplicationDestinationPolicyId?: string;\n}\n\n/**\n * Common options of {@link BlobGenerateSasUrlOptions} and {@link ContainerGenerateSasUrlOptions}.\n */\nexport interface CommonGenerateSasUrlOptions {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols, HTTPS only or HTTPSandHTTP\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n\n  /**\n   * Optional only when identifier is provided. The time after which the SAS will no longer work.\n   */\n  expiresOn?: Date;\n\n  /**\n   * Optional. IP ranges allowed in this SAS.\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * Optional. The name of the access policy on the container this SAS references if any.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  identifier?: string;\n\n  /**\n   * Optional. Encryption scope to use when sending requests authorized with this SAS URI.\n   */\n  encryptionScope?: string;\n\n  /**\n   * Optional. The cache-control header for the SAS.\n   */\n  cacheControl?: string;\n\n  /**\n   * Optional. The content-disposition header for the SAS.\n   */\n  contentDisposition?: string;\n\n  /**\n   * Optional. The content-encoding header for the SAS.\n   */\n  contentEncoding?: string;\n\n  /**\n   * Optional. The content-language header for the SAS.\n   */\n  contentLanguage?: string;\n\n  /**\n   * Optional. The content-type header for the SAS.\n   */\n  contentType?: string;\n}\n\n/**\n * Options to configure {@link BlobClient.generateSasUrl} operation.\n */\nexport interface BlobGenerateSasUrlOptions extends CommonGenerateSasUrlOptions {\n  /**\n   * Optional only when identifier is provided. Specifies the list of permissions to be associated with the SAS.\n   */\n  permissions?: BlobSASPermissions;\n}\n\n/**\n * Options for deleting immutability policy {@link BlobClient.deleteImmutabilityPolicy} operation.\n */\nexport interface BlobDeleteImmutabilityPolicyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options for setting immutability policy {@link BlobClient.setImmutabilityPolicy} operation.\n */\nexport interface BlobSetImmutabilityPolicyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  modifiedAccessCondition?: ModificationConditions;\n}\n\n/**\n * Options for setting legal hold {@link BlobClient.setLegalHold} operation.\n */\nexport interface BlobSetLegalHoldOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,\n * append blob, or page blob.\n */\nexport class BlobClient extends StorageClient {\n  /**\n   * blobContext provided by protocol layer.\n   */\n  private blobContext: StorageBlob;\n\n  private _name: string;\n  private _containerName: string;\n\n  private _versionId?: string;\n  private _snapshot?: string;\n\n  /**\n   * The name of the blob.\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * The name of the storage container the blob is associated with.\n   */\n  public get containerName(): string {\n    return this._containerName;\n  }\n\n  /**\n   *\n   * Creates an instance of BlobClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param containerName - Container name.\n   * @param blobName - Blob name.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(\n    connectionString: string,\n    containerName: string,\n    blobName: string,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of BlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param url - A Client string pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of BlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param url - A URL string pointing to Azure Storage blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blob\".\n   *                     You can append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: PipelineLike);\n  constructor(\n    urlOrConnectionString: string,\n    credentialOrPipelineOrContainerName?:\n      | string\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | PipelineLike,\n    blobNameOrOptions?: string | StoragePipelineOptions,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ) {\n    options = options || {};\n    let pipeline: PipelineLike;\n    let url: string;\n    if (isPipelineLike(credentialOrPipelineOrContainerName)) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (\n      (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential) ||\n      credentialOrPipelineOrContainerName instanceof AnonymousCredential ||\n      isTokenCredential(credentialOrPipelineOrContainerName)\n    ) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      options = blobNameOrOptions as StoragePipelineOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (\n      !credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName !== \"string\"\n    ) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      // The second parameter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (\n      credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName === \"string\" &&\n      blobNameOrOptions &&\n      typeof blobNameOrOptions === \"string\"\n    ) {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      const containerName = credentialOrPipelineOrContainerName;\n      const blobName = blobNameOrOptions;\n\n      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          const sharedKeyCredential = new StorageSharedKeyCredential(\n            extractedCreds.accountName!,\n            extractedCreds.accountKey\n          );\n          url = appendToURLPath(\n            appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)),\n            encodeURIComponent(blobName)\n          );\n\n          if (!options.proxyOptions) {\n            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          }\n\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url =\n          appendToURLPath(\n            appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)),\n            encodeURIComponent(blobName)\n          ) +\n          \"?\" +\n          extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\n          \"Connection string must be either an Account connection string or a SAS connection string\"\n        );\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n\n    super(url, pipeline);\n    ({ blobName: this._name, containerName: this._containerName } =\n      this.getBlobAndContainerNamesFromUrl());\n    this.blobContext = new StorageBlob(this.storageClientContext);\n\n    this._snapshot = getURLParameter(this.url, URLConstants.Parameters.SNAPSHOT) as string;\n    this._versionId = getURLParameter(this.url, URLConstants.Parameters.VERSIONID) as string;\n  }\n\n  /**\n   * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a Client to the base blob.\n   *\n   * @param snapshot - The snapshot timestamp.\n   * @returns A new BlobClient object identical to the source but with the specified snapshot timestamp\n   */\n  public withSnapshot(snapshot: string): BlobClient {\n    return new BlobClient(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.SNAPSHOT,\n        snapshot.length === 0 ? undefined : snapshot\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a new BlobClient object pointing to a version of this blob.\n   * Provide \"\" will remove the versionId and return a Client to the base blob.\n   *\n   * @param versionId - The versionId.\n   * @returns A new BlobClient object pointing to the version of this blob.\n   */\n  public withVersion(versionId: string): BlobClient {\n    return new BlobClient(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.VERSIONID,\n        versionId.length === 0 ? undefined : versionId\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a AppendBlobClient object.\n   *\n   */\n  public getAppendBlobClient(): AppendBlobClient {\n    return new AppendBlobClient(this.url, this.pipeline);\n  }\n\n  /**\n   * Creates a BlockBlobClient object.\n   *\n   */\n  public getBlockBlobClient(): BlockBlobClient {\n    return new BlockBlobClient(this.url, this.pipeline);\n  }\n\n  /**\n   * Creates a PageBlobClient object.\n   *\n   */\n  public getPageBlobClient(): PageBlobClient {\n    return new PageBlobClient(this.url, this.pipeline);\n  }\n\n  /**\n   * Reads or downloads a blob from the system, including its metadata and properties.\n   * You can also call Get Blob to read a snapshot.\n   *\n   * * In Node.js, data returns in a Readable stream readableStreamBody\n   * * In browsers, data returns in a promise blobBody\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\n   *\n   * @param offset - From which position of the blob to download, greater than or equal to 0\n   * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined\n   * @param options - Optional options to Blob Download operation.\n   *\n   *\n   * Example usage (Node.js):\n   *\n   * ```js\n   * // Download and convert a blob to a string\n   * const downloadBlockBlobResponse = await blobClient.download();\n   * const downloaded = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);\n   * console.log(\"Downloaded blob content:\", downloaded.toString());\n   *\n   * async function streamToBuffer(readableStream) {\n   * return new Promise((resolve, reject) => {\n   * const chunks = [];\n   * readableStream.on(\"data\", (data) => {\n   * chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n   * });\n   * readableStream.on(\"end\", () => {\n   * resolve(Buffer.concat(chunks));\n   * });\n   * readableStream.on(\"error\", reject);\n   * });\n   * }\n   * ```\n   *\n   * Example usage (browser):\n   *\n   * ```js\n   * // Download and convert a blob to a string\n   * const downloadBlockBlobResponse = await blobClient.download();\n   * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);\n   * console.log(\n   *   \"Downloaded blob content\",\n   *   downloaded\n   * );\n   *\n   * async function blobToString(blob: Blob): Promise<string> {\n   *   const fileReader = new FileReader();\n   *   return new Promise<string>((resolve, reject) => {\n   *     fileReader.onloadend = (ev: any) => {\n   *       resolve(ev.target!.result);\n   *     };\n   *     fileReader.onerror = reject;\n   *     fileReader.readAsText(blob);\n   *   });\n   * }\n   * ```\n   */\n  public async download(\n    offset: number = 0,\n    count?: number,\n    options: BlobDownloadOptions = {}\n  ): Promise<BlobDownloadResponseParsed> {\n    options.conditions = options.conditions || {};\n    options.conditions = options.conditions || {};\n    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n\n    const { span, updatedOptions } = createSpan(\"BlobClient-download\", options);\n\n    try {\n      const res = await this.blobContext.download({\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        requestOptions: {\n          onDownloadProgress: isNode ? undefined : options.onProgress, // for Node.js, progress is reported by RetriableReadableStream\n        },\n        range: offset === 0 && !count ? undefined : rangeToString({ offset, count }),\n        rangeGetContentMD5: options.rangeGetContentMD5,\n        rangeGetContentCRC64: options.rangeGetContentCrc64,\n        snapshot: options.snapshot,\n        cpkInfo: options.customerProvidedKey,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n\n      const wrappedRes = {\n        ...res,\n        _response: res._response, // _response is made non-enumerable\n        objectReplicationDestinationPolicyId: res.objectReplicationPolicyId,\n        objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules),\n      };\n      // Return browser response immediately\n      if (!isNode) {\n        return wrappedRes;\n      }\n\n      // We support retrying when download stream unexpected ends in Node.js runtime\n      // Following code shouldn't be bundled into browser build, however some\n      // bundlers may try to bundle following code and \"FileReadResponse.ts\".\n      // In this case, \"FileDownloadResponse.browser.ts\" will be used as a shim of \"FileDownloadResponse.ts\"\n      // The config is in package.json \"browser\" field\n      if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {\n        // TODO: Default value or make it a required parameter?\n        options.maxRetryRequests = DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;\n      }\n\n      if (res.contentLength === undefined) {\n        throw new RangeError(`File download response doesn't contain valid content length header`);\n      }\n\n      if (!res.etag) {\n        throw new RangeError(`File download response doesn't contain valid etag header`);\n      }\n\n      return new BlobDownloadResponse(\n        wrappedRes,\n        async (start: number): Promise<NodeJS.ReadableStream> => {\n          const updatedDownloadOptions: BlobDownloadOptionalParams = {\n            leaseAccessConditions: options.conditions,\n            modifiedAccessConditions: {\n              ifMatch: options.conditions!.ifMatch || res.etag,\n              ifModifiedSince: options.conditions!.ifModifiedSince,\n              ifNoneMatch: options.conditions!.ifNoneMatch,\n              ifUnmodifiedSince: options.conditions!.ifUnmodifiedSince,\n              ifTags: options.conditions?.tagConditions,\n            },\n            range: rangeToString({\n              count: offset + res.contentLength! - start,\n              offset: start,\n            }),\n            rangeGetContentMD5: options.rangeGetContentMD5,\n            rangeGetContentCRC64: options.rangeGetContentCrc64,\n            snapshot: options.snapshot,\n            cpkInfo: options.customerProvidedKey,\n          };\n\n          // Debug purpose only\n          // console.log(\n          //   `Read from internal stream, range: ${\n          //     updatedOptions.range\n          //   }, options: ${JSON.stringify(updatedOptions)}`\n          // );\n\n          return (\n            await this.blobContext.download({\n              abortSignal: options.abortSignal,\n              ...updatedDownloadOptions,\n            })\n          ).readableStreamBody!;\n        },\n        offset,\n        res.contentLength!,\n        {\n          maxRetryRequests: options.maxRetryRequests,\n          onProgress: options.onProgress,\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns true if the Azure blob resource represented by this client exists; false otherwise.\n   *\n   * NOTE: use this function with care since an existing blob might be deleted by other clients or\n   * applications. Vice versa new blobs might be added by other clients or applications after this\n   * function completes.\n   *\n   * @param options - options to Exists operation.\n   */\n  public async exists(options: BlobExistsOptions = {}): Promise<boolean> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-exists\", options);\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n      await this.getProperties({\n        abortSignal: options.abortSignal,\n        customerProvidedKey: options.customerProvidedKey,\n        conditions: options.conditions,\n        tracingOptions: updatedOptions.tracingOptions,\n      });\n      return true;\n    } catch (e) {\n      if (e.statusCode === 404) {\n        // Expected exception when checking blob existence\n        return false;\n      } else if (\n        e.statusCode === 409 &&\n        e.details.errorCode === BlobUsesCustomerSpecifiedEncryptionMsg\n      ) {\n        // Expected exception when checking blob existence\n        return true;\n      }\n\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns all user-defined metadata, standard HTTP properties, and system properties\n   * for the blob. It does not return the content of the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties\n   *\n   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n   * they originally contained uppercase characters. This differs from the metadata keys returned by\n   * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which\n   * will retain their original casing.\n   *\n   * @param options - Optional options to Get Properties operation.\n   */\n  public async getProperties(\n    options: BlobGetPropertiesOptions = {}\n  ): Promise<BlobGetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-getProperties\", options);\n    try {\n      options.conditions = options.conditions || {};\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n      const res = await this.blobContext.getProperties({\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        cpkInfo: options.customerProvidedKey,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n\n      return {\n        ...res,\n        _response: res._response, // _response is made non-enumerable\n        objectReplicationDestinationPolicyId: res.objectReplicationPolicyId,\n        objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules),\n      };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Marks the specified blob or snapshot for deletion. The blob is later deleted\n   * during garbage collection. Note that in order to delete a blob, you must delete\n   * all of its snapshots. You can delete both at the same time with the Delete\n   * Blob operation.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n   *\n   * @param options - Optional options to Blob Delete operation.\n   */\n  public async delete(options: BlobDeleteOptions = {}): Promise<BlobDeleteResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-delete\", options);\n    options.conditions = options.conditions || {};\n    try {\n      return await this.blobContext.delete({\n        abortSignal: options.abortSignal,\n        deleteSnapshots: options.deleteSnapshots,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted\n   * during garbage collection. Note that in order to delete a blob, you must delete\n   * all of its snapshots. You can delete both at the same time with the Delete\n   * Blob operation.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n   *\n   * @param options - Optional options to Blob Delete operation.\n   */\n  public async deleteIfExists(\n    options: BlobDeleteOptions = {}\n  ): Promise<BlobDeleteIfExistsResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-deleteIfExists\", options);\n    try {\n      const res = await this.delete(updatedOptions);\n      return {\n        succeeded: true,\n        ...res,\n        _response: res._response, // _response is made non-enumerable\n      };\n    } catch (e) {\n      if (e.details?.errorCode === \"BlobNotFound\") {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: \"Expected exception when deleting a blob or snapshot only if it exists.\",\n        });\n        return {\n          succeeded: false,\n          ...e.response?.parsedHeaders,\n          _response: e.response,\n        };\n      }\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Restores the contents and metadata of soft deleted blob and any associated\n   * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29\n   * or later.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob\n   *\n   * @param options - Optional options to Blob Undelete operation.\n   */\n  public async undelete(options: BlobUndeleteOptions = {}): Promise<BlobUndeleteResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-undelete\", options);\n    try {\n      return await this.blobContext.undelete({\n        abortSignal: options.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets system properties on the blob.\n   *\n   * If no value provided, or no value provided for the specified blob HTTP headers,\n   * these blob HTTP headers without a value will be cleared.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n   *\n   * @param blobHTTPHeaders - If no value provided, or no value provided for\n   *                                                   the specified blob HTTP headers, these blob HTTP\n   *                                                   headers without a value will be cleared.\n   *                                                   A common header to set is `blobContentType`\n   *                                                   enabling the browser to provide functionality\n   *                                                   based on file type.\n   * @param options - Optional options to Blob Set HTTP Headers operation.\n   */\n  public async setHTTPHeaders(\n    blobHTTPHeaders?: BlobHTTPHeaders,\n    options: BlobSetHTTPHeadersOptions = {}\n  ): Promise<BlobSetHTTPHeadersResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-setHTTPHeaders\", options);\n    options.conditions = options.conditions || {};\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n      return await this.blobContext.setHttpHeaders({\n        abortSignal: options.abortSignal,\n        blobHttpHeaders: blobHTTPHeaders,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        // cpkInfo: options.customerProvidedKey, // CPK is not included in Swagger, should change this back when this issue is fixed in Swagger.\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets user-defined metadata for the specified blob as one or more name-value pairs.\n   *\n   * If no option provided, or no metadata defined in the parameter, the blob\n   * metadata will be removed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata\n   *\n   * @param metadata - Replace existing metadata with this value.\n   *                               If no value provided the existing metadata will be removed.\n   * @param options - Optional options to Set Metadata operation.\n   */\n  public async setMetadata(\n    metadata?: Metadata,\n    options: BlobSetMetadataOptions = {}\n  ): Promise<BlobSetMetadataResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-setMetadata\", options);\n    options.conditions = options.conditions || {};\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n      return await this.blobContext.setMetadata({\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        metadata,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        cpkInfo: options.customerProvidedKey,\n        encryptionScope: options.encryptionScope,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets tags on the underlying blob.\n   * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.\n   * Valid tag key and value characters include lower and upper case letters, digits (0-9),\n   * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').\n   *\n   * @param tags -\n   * @param options -\n   */\n  public async setTags(tags: Tags, options: BlobSetTagsOptions = {}): Promise<BlobSetTagsResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-setTags\", options);\n    try {\n      return await this.blobContext.setTags({\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n        tags: toBlobTags(tags),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the tags associated with the underlying blob.\n   *\n   * @param options -\n   */\n  public async getTags(options: BlobGetTagsOptions = {}): Promise<BlobGetTagsResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-getTags\", options);\n    try {\n      const response = await this.blobContext.getTags({\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n      const wrappedResponse: BlobGetTagsResponse = {\n        ...response,\n        _response: response._response, // _response is made non-enumerable\n        tags: toTags({ blobTagSet: response.blobTagSet }) || {},\n      };\n      return wrappedResponse;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get a {@link BlobLeaseClient} that manages leases on the blob.\n   *\n   * @param proposeLeaseId - Initial proposed lease Id.\n   * @returns A new BlobLeaseClient object for managing leases on the blob.\n   */\n  public getBlobLeaseClient(proposeLeaseId?: string): BlobLeaseClient {\n    return new BlobLeaseClient(this, proposeLeaseId);\n  }\n\n  /**\n   * Creates a read-only snapshot of a blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob\n   *\n   * @param options - Optional options to the Blob Create Snapshot operation.\n   */\n  public async createSnapshot(\n    options: BlobCreateSnapshotOptions = {}\n  ): Promise<BlobCreateSnapshotResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-createSnapshot\", options);\n    options.conditions = options.conditions || {};\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n      return await this.blobContext.createSnapshot({\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        metadata: options.metadata,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        cpkInfo: options.customerProvidedKey,\n        encryptionScope: options.encryptionScope,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Asynchronously copies a blob to a destination within the storage account.\n   * This method returns a long running operation poller that allows you to wait\n   * indefinitely until the copy is completed.\n   * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.\n   * Note that the onProgress callback will not be invoked if the operation completes in the first\n   * request, and attempting to cancel a completed copy will result in an error being thrown.\n   *\n   * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n   * a committed blob in any Azure storage account.\n   * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n   * an Azure file in any Azure storage account.\n   * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n   * operation to copy from another storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n   *\n   * Example using automatic polling:\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url');\n   * const result = await copyPoller.pollUntilDone();\n   * ```\n   *\n   * Example using manual polling:\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url');\n   * while (!poller.isDone()) {\n   *    await poller.poll();\n   * }\n   * const result = copyPoller.getResult();\n   * ```\n   *\n   * Example using progress updates:\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url', {\n   *   onProgress(state) {\n   *     console.log(`Progress: ${state.copyProgress}`);\n   *   }\n   * });\n   * const result = await copyPoller.pollUntilDone();\n   * ```\n   *\n   * Example using a changing polling interval (default 15 seconds):\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url', {\n   *   intervalInMs: 1000 // poll blob every 1 second for copy progress\n   * });\n   * const result = await copyPoller.pollUntilDone();\n   * ```\n   *\n   * Example using copy cancellation:\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url');\n   * // cancel operation after starting it.\n   * try {\n   *   await copyPoller.cancelOperation();\n   *   // calls to get the result now throw PollerCancelledError\n   *   await copyPoller.getResult();\n   * } catch (err) {\n   *   if (err.name === 'PollerCancelledError') {\n   *     console.log('The copy was cancelled.');\n   *   }\n   * }\n   * ```\n   *\n   * @param copySource - url to the source Azure Blob/File.\n   * @param options - Optional options to the Blob Start Copy From URL operation.\n   */\n  public async beginCopyFromURL(\n    copySource: string,\n    options: BlobBeginCopyFromURLOptions = {}\n  ): Promise<\n    PollerLike<PollOperationState<BlobBeginCopyFromURLResponse>, BlobBeginCopyFromURLResponse>\n  > {\n    const client: CopyPollerBlobClient = {\n      abortCopyFromURL: (...args) => this.abortCopyFromURL(...args),\n      getProperties: (...args) => this.getProperties(...args),\n      startCopyFromURL: (...args) => this.startCopyFromURL(...args),\n    };\n    const poller = new BlobBeginCopyFromUrlPoller({\n      blobClient: client,\n      copySource,\n      intervalInMs: options.intervalInMs,\n      onProgress: options.onProgress,\n      resumeFrom: options.resumeFrom,\n      startCopyFromURLOptions: options,\n    });\n\n    // Trigger the startCopyFromURL call by calling poll.\n    // Any errors from this method should be surfaced to the user.\n    await poller.poll();\n\n    return poller;\n  }\n\n  /**\n   * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero\n   * length and full metadata. Version 2012-02-12 and newer.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob\n   *\n   * @param copyId - Id of the Copy From URL operation.\n   * @param options - Optional options to the Blob Abort Copy From URL operation.\n   */\n  public async abortCopyFromURL(\n    copyId: string,\n    options: BlobAbortCopyFromURLOptions = {}\n  ): Promise<BlobAbortCopyFromURLResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-abortCopyFromURL\", options);\n    try {\n      return await this.blobContext.abortCopyFromURL(copyId, {\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not\n   * return a response until the copy is complete.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url\n   *\n   * @param copySource - The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication\n   * @param options -\n   */\n  public async syncCopyFromURL(\n    copySource: string,\n    options: BlobSyncCopyFromURLOptions = {}\n  ): Promise<BlobCopyFromURLResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-syncCopyFromURL\", options);\n    options.conditions = options.conditions || {};\n    options.sourceConditions = options.sourceConditions || {};\n\n    try {\n      return await this.blobContext.copyFromURL(copySource, {\n        abortSignal: options.abortSignal,\n        metadata: options.metadata,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        sourceModifiedAccessConditions: {\n          sourceIfMatch: options.sourceConditions.ifMatch,\n          sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n          sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n          sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,\n        },\n        sourceContentMD5: options.sourceContentMD5,\n        copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),\n        blobTagsString: toBlobTagsString(options.tags),\n        immutabilityPolicyExpiry: options.immutabilityPolicy?.expiriesOn,\n        immutabilityPolicyMode: options.immutabilityPolicy?.policyMode,\n        legalHold: options.legalHold,\n        encryptionScope: options.encryptionScope,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets the tier on a blob. The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier\n   *\n   * @param tier - The tier to be set on the blob. Valid values are Hot, Cool, or Archive.\n   * @param options - Optional options to the Blob Set Tier operation.\n   */\n  public async setAccessTier(\n    tier: BlockBlobTier | PremiumPageBlobTier | string,\n    options: BlobSetTierOptions = {}\n  ): Promise<BlobSetTierResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-setAccessTier\", options);\n    try {\n      return await this.blobContext.setTier(toAccessTier(tier)!, {\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        rehydratePriority: options.rehydratePriority,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  // High level function\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Downloads an Azure Blob in parallel to a buffer.\n   * Offset and count are optional, downloads the entire blob if they are not provided.\n   *\n   * Warning: Buffers can only support files up to about one gigabyte on 32-bit systems or about two\n   * gigabytes on 64-bit systems due to limitations of Node.js/V8. For blobs larger than this size,\n   * consider {@link downloadToFile}.\n   *\n   * @param offset - From which position of the block blob to download(in bytes)\n   * @param count - How much data(in bytes) to be downloaded. Will download to the end when passing undefined\n   * @param options - BlobDownloadToBufferOptions\n   */\n  public async downloadToBuffer(\n    offset?: number,\n    count?: number,\n    options?: BlobDownloadToBufferOptions\n  ): Promise<Buffer>;\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Downloads an Azure Blob in parallel to a buffer.\n   * Offset and count are optional, downloads the entire blob if they are not provided.\n   *\n   * Warning: Buffers can only support files up to about one gigabyte on 32-bit systems or about two\n   * gigabytes on 64-bit systems due to limitations of Node.js/V8. For blobs larger than this size,\n   * consider {@link downloadToFile}.\n   *\n   * @param buffer - Buffer to be fill, must have length larger than count\n   * @param offset - From which position of the block blob to download(in bytes)\n   * @param count - How much data(in bytes) to be downloaded. Will download to the end when passing undefined\n   * @param options - BlobDownloadToBufferOptions\n   */\n  public async downloadToBuffer(\n    buffer: Buffer,\n    offset?: number,\n    count?: number,\n    options?: BlobDownloadToBufferOptions\n  ): Promise<Buffer>;\n\n  public async downloadToBuffer(\n    param1?: Buffer | number,\n    param2?: number,\n    param3?: BlobDownloadToBufferOptions | number,\n    param4: BlobDownloadToBufferOptions = {}\n  ): Promise<Buffer | undefined> {\n    let buffer: Buffer | undefined;\n    let offset = 0;\n    let count = 0;\n    let options = param4;\n    if (param1 instanceof Buffer) {\n      buffer = param1;\n      offset = param2 || 0;\n      count = typeof param3 === \"number\" ? param3 : 0;\n    } else {\n      offset = typeof param1 === \"number\" ? param1 : 0;\n      count = typeof param2 === \"number\" ? param2 : 0;\n      options = (param3 as BlobDownloadToBufferOptions) || {};\n    }\n    const { span, updatedOptions } = createSpan(\"BlobClient-downloadToBuffer\", options);\n\n    try {\n      if (!options.blockSize) {\n        options.blockSize = 0;\n      }\n      if (options.blockSize < 0) {\n        throw new RangeError(\"blockSize option must be >= 0\");\n      }\n      if (options.blockSize === 0) {\n        options.blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n      }\n\n      if (offset < 0) {\n        throw new RangeError(\"offset option must be >= 0\");\n      }\n\n      if (count && count <= 0) {\n        throw new RangeError(\"count option must be greater than 0\");\n      }\n\n      if (!options.conditions) {\n        options.conditions = {};\n      }\n\n      // Customer doesn't specify length, get it\n      if (!count) {\n        const response = await this.getProperties({\n          ...options,\n          tracingOptions: {\n            ...options.tracingOptions,\n            ...convertTracingToRequestOptionsBase(updatedOptions),\n          },\n        });\n        count = response.contentLength! - offset;\n        if (count < 0) {\n          throw new RangeError(\n            `offset ${offset} shouldn't be larger than blob size ${response.contentLength!}`\n          );\n        }\n      }\n\n      // Allocate the buffer of size = count if the buffer is not provided\n      if (!buffer) {\n        try {\n          buffer = Buffer.alloc(count);\n        } catch (error) {\n          throw new Error(\n            `Unable to allocate the buffer of size: ${count}(in bytes). Please try passing your own buffer to the \"downloadToBuffer\" method or try using other methods like \"download\" or \"downloadToFile\".\\t ${error.message}`\n          );\n        }\n      }\n\n      if (buffer.length < count) {\n        throw new RangeError(\n          `The buffer's size should be equal to or larger than the request count of bytes: ${count}`\n        );\n      }\n\n      let transferProgress: number = 0;\n      const batch = new Batch(options.concurrency);\n      for (let off = offset; off < offset + count; off = off + options.blockSize) {\n        batch.addOperation(async () => {\n          // Exclusive chunk end position\n          let chunkEnd = offset + count!;\n          if (off + options.blockSize! < chunkEnd) {\n            chunkEnd = off + options.blockSize!;\n          }\n          const response = await this.download(off, chunkEnd - off, {\n            abortSignal: options.abortSignal,\n            conditions: options.conditions,\n            maxRetryRequests: options.maxRetryRequestsPerBlock,\n            customerProvidedKey: options.customerProvidedKey,\n            tracingOptions: {\n              ...options.tracingOptions,\n              ...convertTracingToRequestOptionsBase(updatedOptions),\n            },\n          });\n          const stream = response.readableStreamBody!;\n          await streamToBuffer(stream, buffer!, off - offset, chunkEnd - offset);\n          // Update progress after block is downloaded, in case of block trying\n          // Could provide finer grained progress updating inside HTTP requests,\n          // only if convenience layer download try is enabled\n          transferProgress += chunkEnd - off;\n          if (options.onProgress) {\n            options.onProgress({ loadedBytes: transferProgress });\n          }\n        });\n      }\n      await batch.do();\n      return buffer;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Downloads an Azure Blob to a local file.\n   * Fails if the the given file path already exits.\n   * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.\n   *\n   * @param filePath -\n   * @param offset - From which position of the block blob to download.\n   * @param count - How much data to be downloaded. Will download to the end when passing undefined.\n   * @param options - Options to Blob download options.\n   * @returns The response data for blob download operation,\n   *                                                 but with readableStreamBody set to undefined since its\n   *                                                 content is already read and written into a local file\n   *                                                 at the specified path.\n   */\n  public async downloadToFile(\n    filePath: string,\n    offset: number = 0,\n    count?: number,\n    options: BlobDownloadOptions = {}\n  ): Promise<BlobDownloadResponseParsed> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-downloadToFile\", options);\n    try {\n      const response = await this.download(offset, count, {\n        ...options,\n        tracingOptions: {\n          ...options.tracingOptions,\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n        },\n      });\n      if (response.readableStreamBody) {\n        await readStreamToLocalFile(response.readableStreamBody, filePath);\n      }\n\n      // The stream is no longer accessible so setting it to undefined.\n      (response as any).blobDownloadStream = undefined;\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private getBlobAndContainerNamesFromUrl(): { blobName: string; containerName: string } {\n    let containerName;\n    let blobName;\n    try {\n      //  URL may look like the following\n      // \"https://myaccount.blob.core.windows.net/mycontainer/blob?sasString\";\n      // \"https://myaccount.blob.core.windows.net/mycontainer/blob\";\n      // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt?sasString\";\n      // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt\";\n      // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername/blob`\n      // http://localhost:10001/devstoreaccount1/containername/blob\n\n      const parsedUrl = URLBuilder.parse(this.url);\n\n      if (parsedUrl.getHost()!.split(\".\")[1] === \"blob\") {\n        // \"https://myaccount.blob.core.windows.net/containername/blob\".\n        // .getPath() -> /containername/blob\n        const pathComponents = parsedUrl.getPath()!.match(\"/([^/]*)(/(.*))?\");\n        containerName = pathComponents![1];\n        blobName = pathComponents![3];\n      } else if (isIpEndpointStyle(parsedUrl)) {\n        // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername/blob\n        // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername/blob\n        // .getPath() -> /devstoreaccount1/containername/blob\n        const pathComponents = parsedUrl.getPath()!.match(\"/([^/]*)/([^/]*)(/(.*))?\");\n        containerName = pathComponents![2];\n        blobName = pathComponents![4];\n      } else {\n        // \"https://customdomain.com/containername/blob\".\n        // .getPath() -> /containername/blob\n        const pathComponents = parsedUrl.getPath()!.match(\"/([^/]*)(/(.*))?\");\n        containerName = pathComponents![1];\n        blobName = pathComponents![3];\n      }\n\n      // decode the encoded blobName, containerName - to get all the special characters that might be present in them\n      containerName = decodeURIComponent(containerName);\n      blobName = decodeURIComponent(blobName);\n\n      // Azure Storage Server will replace \"\\\" with \"/\" in the blob names\n      //   doing the same in the SDK side so that the user doesn't have to replace \"\\\" instances in the blobName\n      blobName = blobName.replace(/\\\\/g, \"/\");\n\n      if (!containerName) {\n        throw new Error(\"Provided containerName is invalid.\");\n      }\n\n      return { blobName, containerName };\n    } catch (error) {\n      throw new Error(\"Unable to extract blobName and containerName with provided information.\");\n    }\n  }\n\n  /**\n   * Asynchronously copies a blob to a destination within the storage account.\n   * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n   * a committed blob in any Azure storage account.\n   * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n   * an Azure file in any Azure storage account.\n   * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n   * operation to copy from another storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n   *\n   * @param copySource - url to the source Azure Blob/File.\n   * @param options - Optional options to the Blob Start Copy From URL operation.\n   */\n  private async startCopyFromURL(\n    copySource: string,\n    options: BlobStartCopyFromURLOptions = {}\n  ): Promise<BlobStartCopyFromURLResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-startCopyFromURL\", options);\n    options.conditions = options.conditions || {};\n    options.sourceConditions = options.sourceConditions || {};\n\n    try {\n      return await this.blobContext.startCopyFromURL(copySource, {\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        metadata: options.metadata,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        sourceModifiedAccessConditions: {\n          sourceIfMatch: options.sourceConditions.ifMatch,\n          sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n          sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n          sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,\n          sourceIfTags: options.sourceConditions.tagConditions,\n        },\n        immutabilityPolicyExpiry: options.immutabilityPolicy?.expiriesOn,\n        immutabilityPolicyMode: options.immutabilityPolicy?.policyMode,\n        legalHold: options.legalHold,\n        rehydratePriority: options.rehydratePriority,\n        tier: toAccessTier(options.tier),\n        blobTagsString: toBlobTagsString(options.tags),\n        sealBlob: options.sealBlob,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Only available for BlobClient constructed with a shared key credential.\n   *\n   * Generates a Blob Service Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   * @param options - Optional parameters.\n   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateSasUrl(options: BlobGenerateSasUrlOptions): Promise<string> {\n    return new Promise((resolve) => {\n      if (!(this.credential instanceof StorageSharedKeyCredential)) {\n        throw new RangeError(\n          \"Can only generate the SAS when the client is initialized with a shared key credential\"\n        );\n      }\n\n      const sas = generateBlobSASQueryParameters(\n        {\n          containerName: this._containerName,\n          blobName: this._name,\n          snapshotTime: this._snapshot,\n          versionId: this._versionId,\n          ...options,\n        },\n        this.credential\n      ).toString();\n\n      resolve(appendToURLQuery(this.url, sas));\n    });\n  }\n\n  /**\n   * Delete the immutablility policy on the blob.\n   *\n   * @param options - Optional options to delete immutability policy on the blob.\n   */\n  public async deleteImmutabilityPolicy(\n    options?: BlobDeleteImmutabilityPolicyOptions\n  ): Promise<BlobDeleteImmutabilityPolicyResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-deleteImmutabilityPolicy\", options);\n    try {\n      return await this.blobContext.deleteImmutabilityPolicy({\n        abortSignal: options?.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Set immutablility policy on the blob.\n   *\n   * @param options - Optional options to set immutability policy on the blob.\n   */\n  public async setImmutabilityPolicy(\n    immutabilityPolicy: BlobImmutabilityPolicy,\n    options?: BlobSetImmutabilityPolicyOptions\n  ): Promise<BlobSetImmutabilityPolicyResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-setImmutabilityPolicy\", options);\n    try {\n      return await this.blobContext.setImmutabilityPolicy({\n        abortSignal: options?.abortSignal,\n        immutabilityPolicyExpiry: immutabilityPolicy.expiriesOn,\n        immutabilityPolicyMode: immutabilityPolicy.policyMode,\n        modifiedAccessConditions: options?.modifiedAccessCondition,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Set legal hold on the blob.\n   *\n   * @param options - Optional options to set legal hold on the blob.\n   */\n  public async setLegalHold(\n    legalHoldEnabled: boolean,\n    options?: BlobSetLegalHoldOptions\n  ): Promise<BlobSetLegalHoldResponse> {\n    const { span, updatedOptions } = createSpan(\"BlobClient-setLegalHold\", options);\n    try {\n      return await this.blobContext.setLegalHold(legalHoldEnabled, {\n        abortSignal: options?.abortSignal,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n\n/**\n * Options to configure {@link AppendBlobClient.create} operation.\n */\nexport interface AppendBlobCreateOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Conditions to meet when creating append blobs.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * HTTP headers to set when creating append blobs. A common header\n   * to set is `blobContentType`, enabling the browser to provide functionality\n   * based on file type.\n   *\n   */\n  blobHTTPHeaders?: BlobHTTPHeaders;\n  /**\n   * A collection of key-value string pair to associate with the blob when creating append blobs.\n   */\n  metadata?: Metadata;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n  /**\n   * Optional. Specifies immutability policy for a blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  immutabilityPolicy?: BlobImmutabilityPolicy;\n  /**\n   * Optional. Indicates if a legal hold should be placed on the blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  legalHold?: boolean;\n  /**\n   * Blob tags.\n   */\n  tags?: Tags;\n}\n\n/**\n * Options to configure {@link AppendBlobClient.createIfNotExists} operation.\n */\nexport interface AppendBlobCreateIfNotExistsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * HTTP headers to set when creating append blobs. A common header to set is\n   * `blobContentType`, enabling the browser to provide functionality\n   * based on file type.\n   *\n   */\n  blobHTTPHeaders?: BlobHTTPHeaders;\n  /**\n   * A collection of key-value string pair to associate with the blob when creating append blobs.\n   */\n  metadata?: Metadata;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n  /**\n   * Optional. Specifies immutability policy for a blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  immutabilityPolicy?: BlobImmutabilityPolicy;\n  /**\n   * Optional. Indicates if a legal hold should be placed on the blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  legalHold?: boolean;\n}\n\n/**\n * Options to configure {@link AppendBlobClient.seal} operation.\n */\nexport interface AppendBlobSealOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet.\n   */\n  conditions?: AppendBlobRequestConditions;\n}\n\n/**\n * Options to configure the {@link AppendBlobClient.appendBlock} operation.\n */\nexport interface AppendBlobAppendBlockOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when appending append blob blocks.\n   */\n  conditions?: AppendBlobRequestConditions;\n  /**\n   * Callback to receive events on the progress of append block operation.\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n  /**\n   * An MD5 hash of the block content. This hash is used to verify the integrity of the block during transport.\n   * When this is specified, the storage service compares the hash of the content that has arrived with this value.\n   *\n   * transactionalContentMD5 and transactionalContentCrc64 cannot be set at same time.\n   */\n  transactionalContentMD5?: Uint8Array;\n  /**\n   * A CRC64 hash of the append block content. This hash is used to verify the integrity of the append block during transport.\n   * When this is specified, the storage service compares the hash of the content that has arrived with this value.\n   *\n   * transactionalContentMD5 and transactionalContentCrc64 cannot be set at same time.\n   */\n  transactionalContentCrc64?: Uint8Array;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n}\n\n/**\n * Options to configure the {@link AppendBlobClient.appendBlockFromURL} operation.\n */\nexport interface AppendBlobAppendBlockFromURLOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when appending append blob blocks.\n   */\n  conditions?: AppendBlobRequestConditions;\n  /**\n   * Conditions to meet for the source Azure Blob/File when copying from a URL to the blob.\n   */\n  sourceConditions?: MatchConditions & ModificationConditions;\n  /**\n   * An MD5 hash of the append block content from the URI.\n   * This hash is used to verify the integrity of the append block during transport of the data from the URI.\n   * When this is specified, the storage service compares the hash of the content that has arrived from the copy-source with this value.\n   *\n   * sourceContentMD5 and sourceContentCrc64 cannot be set at same time.\n   */\n  sourceContentMD5?: Uint8Array;\n  /**\n   * A CRC64 hash of the append block content from the URI.\n   * This hash is used to verify the integrity of the append block during transport of the data from the URI.\n   * When this is specified, the storage service compares the hash of the content that has arrived from the copy-source with this value.\n   *\n   * sourceContentMD5 and sourceContentCrc64 cannot be set at same time.\n   */\n  sourceContentCrc64?: Uint8Array;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n  /**\n   * Only Bearer type is supported. Credentials should be a valid OAuth access token to copy source.\n   */\n  sourceAuthorization?: HttpAuthorization;\n}\n\n/**\n * Contains response data for the {@link appendBlobClient.createIfNotExists} operation.\n */\nexport interface AppendBlobCreateIfNotExistsResponse extends AppendBlobCreateResponse {\n  /**\n   * Indicate whether the blob is successfully created. Is false when the blob is not changed as it already exists.\n   */\n  succeeded: boolean;\n}\n\n/**\n * AppendBlobClient defines a set of operations applicable to append blobs.\n */\nexport class AppendBlobClient extends BlobClient {\n  /**\n   * appendBlobsContext provided by protocol layer.\n   */\n  private appendBlobContext: AppendBlob;\n\n  /**\n   *\n   * Creates an instance of AppendBlobClient.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param containerName - Container name.\n   * @param blobName - Blob name.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(\n    connectionString: string,\n    containerName: string,\n    blobName: string,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of AppendBlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to an append blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param url - A URL string pointing to Azure Storage append blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/appendblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/appendblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(\n    url: string,\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of AppendBlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to an append blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param url - A URL string pointing to Azure Storage append blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/appendblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/appendblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: PipelineLike);\n  constructor(\n    urlOrConnectionString: string,\n    credentialOrPipelineOrContainerName:\n      | string\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | PipelineLike,\n    blobNameOrOptions?: string | StoragePipelineOptions,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ) {\n    // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n    let pipeline: PipelineLike;\n    let url: string;\n    options = options || {};\n    if (isPipelineLike(credentialOrPipelineOrContainerName)) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (\n      (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential) ||\n      credentialOrPipelineOrContainerName instanceof AnonymousCredential ||\n      isTokenCredential(credentialOrPipelineOrContainerName)\n    ) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)      url = urlOrConnectionString;\n      url = urlOrConnectionString;\n      options = blobNameOrOptions as StoragePipelineOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (\n      !credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName !== \"string\"\n    ) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      // The second parameter is undefined. Use anonymous credential.\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (\n      credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName === \"string\" &&\n      blobNameOrOptions &&\n      typeof blobNameOrOptions === \"string\"\n    ) {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      const containerName = credentialOrPipelineOrContainerName;\n      const blobName = blobNameOrOptions;\n\n      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          const sharedKeyCredential = new StorageSharedKeyCredential(\n            extractedCreds.accountName!,\n            extractedCreds.accountKey\n          );\n          url = appendToURLPath(\n            appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)),\n            encodeURIComponent(blobName)\n          );\n\n          if (!options.proxyOptions) {\n            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          }\n\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url =\n          appendToURLPath(\n            appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)),\n            encodeURIComponent(blobName)\n          ) +\n          \"?\" +\n          extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\n          \"Connection string must be either an Account connection string or a SAS connection string\"\n        );\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n    super(url, pipeline);\n    this.appendBlobContext = new AppendBlob(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new AppendBlobClient object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a Client to the base blob.\n   *\n   * @param snapshot - The snapshot timestamp.\n   * @returns A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.\n   */\n  public withSnapshot(snapshot: string): AppendBlobClient {\n    return new AppendBlobClient(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.SNAPSHOT,\n        snapshot.length === 0 ? undefined : snapshot\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param options - Options to the Append Block Create operation.\n   *\n   *\n   * Example usage:\n   *\n   * ```js\n   * const appendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n   * await appendBlobClient.create();\n   * ```\n   */\n  public async create(options: AppendBlobCreateOptions = {}): Promise<AppendBlobCreateResponse> {\n    const { span, updatedOptions } = createSpan(\"AppendBlobClient-create\", options);\n    options.conditions = options.conditions || {};\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n\n      return await this.appendBlobContext.create(0, {\n        abortSignal: options.abortSignal,\n        blobHttpHeaders: options.blobHTTPHeaders,\n        leaseAccessConditions: options.conditions,\n        metadata: options.metadata,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        cpkInfo: options.customerProvidedKey,\n        encryptionScope: options.encryptionScope,\n        immutabilityPolicyExpiry: options.immutabilityPolicy?.expiriesOn,\n        immutabilityPolicyMode: options.immutabilityPolicy?.policyMode,\n        legalHold: options.legalHold,\n        blobTagsString: toBlobTagsString(options.tags),\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n   * If the blob with the same name already exists, the content of the existing blob will remain unchanged.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param options -\n   */\n  public async createIfNotExists(\n    options: AppendBlobCreateIfNotExistsOptions = {}\n  ): Promise<AppendBlobCreateIfNotExistsResponse> {\n    const { span, updatedOptions } = createSpan(\"AppendBlobClient-createIfNotExists\", options);\n    const conditions = { ifNoneMatch: ETagAny };\n    try {\n      const res = await this.create({\n        ...updatedOptions,\n        conditions,\n      });\n      return {\n        succeeded: true,\n        ...res,\n        _response: res._response, // _response is made non-enumerable\n      };\n    } catch (e) {\n      if (e.details?.errorCode === \"BlobAlreadyExists\") {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: \"Expected exception when creating a blob only if it does not already exist.\",\n        });\n        return {\n          succeeded: false,\n          ...e.response?.parsedHeaders,\n          _response: e.response,\n        };\n      }\n\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Seals the append blob, making it read only.\n   *\n   * @param options -\n   */\n  public async seal(options: AppendBlobSealOptions = {}): Promise<AppendBlobAppendBlockResponse> {\n    const { span, updatedOptions } = createSpan(\"AppendBlobClient-seal\", options);\n    options.conditions = options.conditions || {};\n    try {\n      return await this.appendBlobContext.seal({\n        abortSignal: options.abortSignal,\n        appendPositionAccessConditions: options.conditions,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Commits a new block of data to the end of the existing append blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/append-block\n   *\n   * @param body - Data to be appended.\n   * @param contentLength - Length of the body in bytes.\n   * @param options - Options to the Append Block operation.\n   *\n   *\n   * Example usage:\n   *\n   * ```js\n   * const content = \"Hello World!\";\n   *\n   * // Create a new append blob and append data to the blob.\n   * const newAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n   * await newAppendBlobClient.create();\n   * await newAppendBlobClient.appendBlock(content, content.length);\n   *\n   * // Append data to an existing append blob.\n   * const existingAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n   * await existingAppendBlobClient.appendBlock(content, content.length);\n   * ```\n   */\n  public async appendBlock(\n    body: HttpRequestBody,\n    contentLength: number,\n    options: AppendBlobAppendBlockOptions = {}\n  ): Promise<AppendBlobAppendBlockResponse> {\n    const { span, updatedOptions } = createSpan(\"AppendBlobClient-appendBlock\", options);\n    options.conditions = options.conditions || {};\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n\n      return await this.appendBlobContext.appendBlock(contentLength, body, {\n        abortSignal: options.abortSignal,\n        appendPositionAccessConditions: options.conditions,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        requestOptions: {\n          onUploadProgress: options.onProgress,\n        },\n        transactionalContentMD5: options.transactionalContentMD5,\n        transactionalContentCrc64: options.transactionalContentCrc64,\n        cpkInfo: options.customerProvidedKey,\n        encryptionScope: options.encryptionScope,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob\n   * where the contents are read from a source url.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url\n   *\n   * @param sourceURL -\n   *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can\n   *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n   *                 must either be public or must be authenticated via a shared access signature. If the source blob is\n   *                 public, no authentication is required to perform the operation.\n   * @param sourceOffset - Offset in source to be appended\n   * @param count - Number of bytes to be appended as a block\n   * @param options -\n   */\n  public async appendBlockFromURL(\n    sourceURL: string,\n    sourceOffset: number,\n    count: number,\n    options: AppendBlobAppendBlockFromURLOptions = {}\n  ): Promise<AppendBlobAppendBlockFromUrlResponse> {\n    const { span, updatedOptions } = createSpan(\"AppendBlobClient-appendBlockFromURL\", options);\n    options.conditions = options.conditions || {};\n    options.sourceConditions = options.sourceConditions || {};\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n\n      return await this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, {\n        abortSignal: options.abortSignal,\n        sourceRange: rangeToString({ offset: sourceOffset, count }),\n        sourceContentMD5: options.sourceContentMD5,\n        sourceContentCrc64: options.sourceContentCrc64,\n        leaseAccessConditions: options.conditions,\n        appendPositionAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        sourceModifiedAccessConditions: {\n          sourceIfMatch: options.sourceConditions.ifMatch,\n          sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n          sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n          sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,\n        },\n        copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),\n        cpkInfo: options.customerProvidedKey,\n        encryptionScope: options.encryptionScope,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n\n/**\n * Options to configure {@link BlockBlobClient.upload} operation.\n */\nexport interface BlockBlobUploadOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when uploading to the block blob.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * HTTP headers to set when uploading to a block blob. A common header to set is\n   * `blobContentType`, enabling the browser to provide functionality\n   * based on file type.\n   *\n   */\n  blobHTTPHeaders?: BlobHTTPHeaders;\n  /**\n   * A collection of key-value string pair to associate with the blob when uploading to a block blob.\n   */\n  metadata?: Metadata;\n  /**\n   * Callback to receive events on the progress of upload operation.\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n  /**\n   * Access tier.\n   * More Details - https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers\n   */\n  tier?: BlockBlobTier | string;\n  /**\n   * Optional. Specifies immutability policy for a blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  immutabilityPolicy?: BlobImmutabilityPolicy;\n  /**\n   * Optional. Indicates if a legal hold should be placed on the blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  legalHold?: boolean;\n  /**\n   * Blob tags.\n   */\n  tags?: Tags;\n}\n\n/**\n * Options to configure {@link BlockBlobClient.syncUploadFromURL} operation.\n */\nexport interface BlockBlobSyncUploadFromURLOptions extends CommonOptions {\n  /**\n   * Server timeout in seconds.\n   * For more information, @see https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\n   */\n  timeoutInSeconds?: number;\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value\n   * pairs are specified, the operation will copy the metadata from the source blob or file to the\n   * destination blob. If one or more name-value pairs are specified, the destination blob is\n   * created with the specified metadata, and metadata is not copied from the source blob or file.\n   * Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules\n   * for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more\n   * information.\n   */\n  metadata?: Metadata;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n  /**\n   * Access tier.\n   * More Details - https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers\n   */\n  tier?: BlockBlobTier | string;\n  /**\n   * Specify the md5 calculated for the range of bytes that must be read from the copy source.\n   */\n  sourceContentMD5?: Uint8Array;\n  /**\n   * Blob tags.\n   */\n  tags?: Tags;\n  /**\n   * Optional, default is true.  Indicates if properties from the source blob should be copied.\n   */\n  copySourceBlobProperties?: boolean;\n  /**\n   * HTTP headers to set when uploading to a block blob.\n   *\n   * A common header to set is `blobContentType`, enabling the browser to provide functionality\n   * based on file type.\n   *\n   */\n  blobHTTPHeaders?: BlobHTTPHeaders;\n  /**\n   * Conditions to meet for the destination Azure Blob.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Conditions to meet for the source Azure Blob.\n   */\n  sourceConditions?: ModifiedAccessConditions;\n  /**\n   * Only Bearer type is supported. Credentials should be a valid OAuth access token to copy source.\n   */\n  sourceAuthorization?: HttpAuthorization;\n}\n\n/**\n * Blob query error type.\n */\nexport interface BlobQueryError {\n  /**\n   * Whether error is fatal. Fatal error will stop query.\n   */\n  isFatal: boolean;\n  /**\n   * Error name.\n   */\n  name: string;\n  /**\n   * Position in bytes of the query.\n   */\n  position: number;\n  /**\n   * Error description.\n   */\n  description: string;\n}\n\n/**\n * Options to query blob with JSON format.\n */\nexport interface BlobQueryJsonTextConfiguration {\n  /**\n   * Record separator.\n   */\n  recordSeparator: string;\n  /**\n   * Query for a JSON format blob.\n   */\n  kind: \"json\";\n}\n\n/**\n * Options to query blob with CSV format.\n */\nexport interface BlobQueryCsvTextConfiguration {\n  /**\n   * Record separator.\n   */\n  recordSeparator: string;\n  /**\n   * Query for a CSV format blob.\n   */\n  kind: \"csv\";\n  /**\n   * Column separator. Default is \",\".\n   */\n  columnSeparator?: string;\n  /**\n   * Field quote.\n   */\n  fieldQuote?: string;\n  /**\n   * Escape character.\n   */\n  escapeCharacter?: string;\n  /**\n   * Has headers. Default is false.\n   */\n  hasHeaders?: boolean;\n}\n\n/**\n * Options to query blob with Apache Arrow format. Only valid for {@link BlockBlobQueryOptions.outputTextConfiguration}.\n */\nexport interface BlobQueryArrowConfiguration {\n  /**\n   * Kind.\n   */\n  kind: \"arrow\";\n\n  /**\n   * List of {@link BlobQueryArrowField} describing the schema of the data.\n   */\n  schema: BlobQueryArrowField[];\n}\n\n/**\n * Options to query blob with Parquet format. Only valid for {@link BlockBlobQueryOptions.inputTextConfiguration}.\n */\nexport interface BlobQueryParquetConfiguration {\n  /**\n   * Kind.\n   */\n  kind: \"parquet\";\n}\n\n/**\n * Options to configure {@link BlockBlobClient.query} operation.\n */\nexport interface BlockBlobQueryOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Configurations for the query input.\n   */\n  inputTextConfiguration?:\n    | BlobQueryJsonTextConfiguration\n    | BlobQueryCsvTextConfiguration\n    | BlobQueryParquetConfiguration;\n  /**\n   * Configurations for the query output.\n   */\n  outputTextConfiguration?:\n    | BlobQueryJsonTextConfiguration\n    | BlobQueryCsvTextConfiguration\n    | BlobQueryArrowConfiguration;\n  /**\n   * Callback to receive events on the progress of query operation.\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n  /**\n   * Callback to receive error events during the query operaiton.\n   */\n  onError?: (error: BlobQueryError) => void;\n  /**\n   * Conditions to meet when uploading to the block blob.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n}\n\n/**\n * Options to configure {@link BlockBlobClient.stageBlock} operation.\n */\nexport interface BlockBlobStageBlockOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   */\n  conditions?: LeaseAccessConditions;\n  /**\n   * Callback to receive events on the progress of stage block operation.\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n  /**\n   * An MD5 hash of the block content. This hash is used to verify the integrity of the block during transport.\n   * When this is specified, the storage service compares the hash of the content that has arrived with this value.\n   *\n   * transactionalContentMD5 and transactionalContentCrc64 cannot be set at same time.\n   */\n  transactionalContentMD5?: Uint8Array;\n\n  /**\n   * A CRC64 hash of the block content. This hash is used to verify the integrity of the block during transport.\n   * When this is specified, the storage service compares the hash of the content that has arrived with this value.\n   *\n   * transactionalContentMD5 and transactionalContentCrc64 cannot be set at same time.\n   */\n  transactionalContentCrc64?: Uint8Array;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n}\n\n/**\n * Options to configure {@link BlockBlobClient.stageBlockFromURL} operation.\n */\nexport interface BlockBlobStageBlockFromURLOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Specifies the bytes of the source Blob/File to upload.\n   * If not specified, the entire content is uploaded as a single block.\n   */\n  range?: Range;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   */\n  conditions?: LeaseAccessConditions;\n  /**\n   * An MD5 hash of the content from the URI.\n   * This hash is used to verify the integrity of the content during transport of the data from the URI.\n   * When this is specified, the storage service compares the hash of the content that has arrived from the copy-source with this value.\n   *\n   * sourceContentMD5 and sourceContentCrc64 cannot be set at same time.\n   */\n  sourceContentMD5?: Uint8Array;\n  /**\n   * A CRC64 hash of the content from the URI.\n   * This hash is used to verify the integrity of the content during transport of the data from the URI.\n   * When this is specified, the storage service compares the hash of the content that has arrived from the copy-source with this value.\n   *\n   * sourceContentMD5 and sourceContentCrc64 cannot be set at same time.\n   */\n  sourceContentCrc64?: Uint8Array;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n  /**\n   * Only Bearer type is supported. Credentials should be a valid OAuth access token to copy source.\n   */\n  sourceAuthorization?: HttpAuthorization;\n}\n\n/**\n * Options to configure {@link BlockBlobClient.commitBlockList} operation.\n */\nexport interface BlockBlobCommitBlockListOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when committing the block list.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * HTTP headers to set when committing block list.\n   */\n  blobHTTPHeaders?: BlobHTTPHeaders;\n  /**\n   * A collection of key-value string pair to associate with the blob when committing block list.\n   */\n  metadata?: Metadata;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n  /**\n   * Optional. Specifies immutability policy for a blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  immutabilityPolicy?: BlobImmutabilityPolicy;\n  /**\n   * Optional. Indicates if a legal hold should be placed on the blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  legalHold?: boolean;\n  /**\n   * Access tier.\n   * More Details - https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers\n   */\n  tier?: BlockBlobTier | string;\n\n  /**\n   * Blob tags.\n   */\n  tags?: Tags;\n}\n\n/**\n * Options to configure {@link BlockBlobClient.getBlockList} operation.\n */\nexport interface BlockBlobGetBlockListOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   */\n  conditions?: LeaseAccessConditions & TagConditions;\n}\n\n/**\n * Option interface for the {@link BlockBlobClient.uploadStream} operation.\n */\nexport interface BlockBlobUploadStreamOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Blob HTTP Headers.\n   *\n   * A common header to set is `blobContentType`, enabling the\n   * browser to provide functionality based on file type.\n   *\n   */\n  blobHTTPHeaders?: BlobHTTPHeaders;\n\n  /**\n   * Metadata of block blob.\n   */\n  metadata?: { [propertyName: string]: string };\n\n  /**\n   * Access conditions headers.\n   */\n  conditions?: BlobRequestConditions;\n\n  /**\n   * Progress updater.\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n\n  /**\n   * Blob tags.\n   */\n  tags?: Tags;\n\n  /**\n   * Access tier.\n   * More Details - https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers\n   */\n  tier?: BlockBlobTier | string;\n}\n/**\n * Option interface for {@link BlockBlobClient.uploadFile} and {@link BlockBlobClient.uploadSeekableStream}.\n */\nexport interface BlockBlobParallelUploadOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Destination block blob size in bytes.\n   */\n  blockSize?: number;\n\n  /**\n   * Blob size threshold in bytes to start concurrency uploading.\n   * Default value is 256MB, blob size less than this option will\n   * be uploaded via one I/O operation without concurrency.\n   * You can customize a value less equal than the default value.\n   */\n  maxSingleShotSize?: number;\n\n  /**\n   * Progress updater.\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Blob HTTP Headers. A common header to set is\n   * `blobContentType`, enabling the browser to provide\n   * functionality based on file type.\n   *\n   */\n  blobHTTPHeaders?: BlobHTTPHeaders;\n\n  /**\n   * Metadata of block blob.\n   */\n  metadata?: { [propertyName: string]: string };\n\n  /**\n   * Access conditions headers.\n   */\n  conditions?: BlobRequestConditions;\n\n  /**\n   * Concurrency of parallel uploading. Must be greater than or equal to 0.\n   */\n  concurrency?: number;\n\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n\n  /**\n   * Blob tags.\n   */\n  tags?: Tags;\n\n  /**\n   * Access tier.\n   * More Details - https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers\n   */\n  tier?: BlockBlobTier | string;\n}\n\n/**\n * Response type for {@link BlockBlobClient.uploadFile}, {@link BlockBlobClient.uploadStream}, and\n * {@link BlockBlobClient.uploadBrowserDate}.\n */\nexport type BlobUploadCommonResponse = BlockBlobUploadHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: HttpResponse;\n};\n\n/**\n * BlockBlobClient defines a set of operations applicable to block blobs.\n */\nexport class BlockBlobClient extends BlobClient {\n  /**\n   * blobContext provided by protocol layer.\n   *\n   * Note. Ideally BlobClient should set BlobClient.blobContext to protected. However, API\n   * extractor has issue blocking that. Here we redecelare _blobContext in BlockBlobClient.\n   */\n  private _blobContext: StorageBlob;\n\n  /**\n   * blockBlobContext provided by protocol layer.\n   */\n  private blockBlobContext: BlockBlob;\n\n  /**\n   *\n   * Creates an instance of BlockBlobClient.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param containerName - Container name.\n   * @param blobName - Blob name.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(\n    connectionString: string,\n    containerName: string,\n    blobName: string,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of BlockBlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to a block blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param url - A URL string pointing to Azure Storage block blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blockblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blockblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of BlockBlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to a block blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param url - A URL string pointing to Azure Storage block blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blockblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blockblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: PipelineLike);\n  constructor(\n    urlOrConnectionString: string,\n    credentialOrPipelineOrContainerName?:\n      | string\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | PipelineLike,\n    blobNameOrOptions?: string | StoragePipelineOptions,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ) {\n    // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n    let pipeline: PipelineLike;\n    let url: string;\n    options = options || {};\n    if (isPipelineLike(credentialOrPipelineOrContainerName)) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (\n      (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential) ||\n      credentialOrPipelineOrContainerName instanceof AnonymousCredential ||\n      isTokenCredential(credentialOrPipelineOrContainerName)\n    ) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      options = blobNameOrOptions as StoragePipelineOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (\n      !credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName !== \"string\"\n    ) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      // The second parameter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (\n      credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName === \"string\" &&\n      blobNameOrOptions &&\n      typeof blobNameOrOptions === \"string\"\n    ) {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      const containerName = credentialOrPipelineOrContainerName;\n      const blobName = blobNameOrOptions;\n\n      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          const sharedKeyCredential = new StorageSharedKeyCredential(\n            extractedCreds.accountName!,\n            extractedCreds.accountKey\n          );\n          url = appendToURLPath(\n            appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)),\n            encodeURIComponent(blobName)\n          );\n\n          if (!options.proxyOptions) {\n            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          }\n\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url =\n          appendToURLPath(\n            appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)),\n            encodeURIComponent(blobName)\n          ) +\n          \"?\" +\n          extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\n          \"Connection string must be either an Account connection string or a SAS connection string\"\n        );\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n    super(url, pipeline);\n    this.blockBlobContext = new BlockBlob(this.storageClientContext);\n    this._blobContext = new StorageBlob(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new BlockBlobClient object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a URL to the base blob.\n   *\n   * @param snapshot - The snapshot timestamp.\n   * @returns A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.\n   */\n  public withSnapshot(snapshot: string): BlockBlobClient {\n    return new BlockBlobClient(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.SNAPSHOT,\n        snapshot.length === 0 ? undefined : snapshot\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Quick query for a JSON or CSV formatted blob.\n   *\n   * Example usage (Node.js):\n   *\n   * ```js\n   * // Query and convert a blob to a string\n   * const queryBlockBlobResponse = await blockBlobClient.query(\"select * from BlobStorage\");\n   * const downloaded = (await streamToBuffer(queryBlockBlobResponse.readableStreamBody)).toString();\n   * console.log(\"Query blob content:\", downloaded);\n   *\n   * async function streamToBuffer(readableStream) {\n   *   return new Promise((resolve, reject) => {\n   *     const chunks = [];\n   *     readableStream.on(\"data\", (data) => {\n   *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n   *     });\n   *     readableStream.on(\"end\", () => {\n   *       resolve(Buffer.concat(chunks));\n   *     });\n   *     readableStream.on(\"error\", reject);\n   *   });\n   * }\n   * ```\n   *\n   * @param query -\n   * @param options -\n   */\n  public async query(\n    query: string,\n    options: BlockBlobQueryOptions = {}\n  ): Promise<BlobDownloadResponseModel> {\n    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n\n    const { span, updatedOptions } = createSpan(\"BlockBlobClient-query\", options);\n\n    try {\n      if (!isNode) {\n        throw new Error(\"This operation currently is only supported in Node.js.\");\n      }\n\n      const response = await this._blobContext.query({\n        abortSignal: options.abortSignal,\n        queryRequest: {\n          queryType: \"SQL\",\n          expression: query,\n          inputSerialization: toQuerySerialization(options.inputTextConfiguration),\n          outputSerialization: toQuerySerialization(options.outputTextConfiguration),\n        },\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n      return new BlobQueryResponse(response, {\n        abortSignal: options.abortSignal,\n        onProgress: options.onProgress,\n        onError: options.onError,\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new block blob, or updates the content of an existing block blob.\n   * Updating an existing block blob overwrites any existing metadata on the blob.\n   * Partial updates are not supported; the content of the existing blob is\n   * overwritten with the new content. To perform a partial update of a block blob's,\n   * use {@link stageBlock} and {@link commitBlockList}.\n   *\n   * This is a non-parallel uploading method, please use {@link uploadFile},\n   * {@link uploadStream} or {@link uploadBrowserData} for better performance\n   * with concurrency uploading.\n   *\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function\n   *                               which returns a new Readable stream whose offset is from data source beginning.\n   * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n   *                               string including non non-Base64/Hex-encoded characters.\n   * @param options - Options to the Block Blob Upload operation.\n   * @returns Response data for the Block Blob Upload operation.\n   *\n   * Example usage:\n   *\n   * ```js\n   * const content = \"Hello world!\";\n   * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n   * ```\n   */\n  public async upload(\n    body: HttpRequestBody,\n    contentLength: number,\n    options: BlockBlobUploadOptions = {}\n  ): Promise<BlockBlobUploadResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"BlockBlobClient-upload\", options);\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n      return await this.blockBlobContext.upload(contentLength, body, {\n        abortSignal: options.abortSignal,\n        blobHttpHeaders: options.blobHTTPHeaders,\n        leaseAccessConditions: options.conditions,\n        metadata: options.metadata,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        requestOptions: {\n          onUploadProgress: options.onProgress,\n        },\n        cpkInfo: options.customerProvidedKey,\n        encryptionScope: options.encryptionScope,\n        immutabilityPolicyExpiry: options.immutabilityPolicy?.expiriesOn,\n        immutabilityPolicyMode: options.immutabilityPolicy?.policyMode,\n        legalHold: options.legalHold,\n        tier: toAccessTier(options.tier),\n        blobTagsString: toBlobTagsString(options.tags),\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new Block Blob where the contents of the blob are read from a given URL.\n   * This API is supported beginning with the 2020-04-08 version. Partial updates\n   * are not supported with Put Blob from URL; the content of an existing blob is overwritten with\n   * the content of the new blob.  To perform partial updates to a block blob’s contents using a\n   * source URL, use {@link stageBlockFromURL} and {@link commitBlockList}.\n   *\n   * @param sourceURL - Specifies the URL of the blob. The value\n   *                           may be a URL of up to 2 KB in length that specifies a blob.\n   *                           The value should be URL-encoded as it would appear\n   *                           in a request URI. The source blob must either be public\n   *                           or must be authenticated via a shared access signature.\n   *                           If the source blob is public, no authentication is required\n   *                           to perform the operation. Here are some examples of source object URLs:\n   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n   * @param options - Optional parameters.\n   */\n\n  public async syncUploadFromURL(\n    sourceURL: string,\n    options: BlockBlobSyncUploadFromURLOptions = {}\n  ): Promise<BlockBlobPutBlobFromUrlResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"BlockBlobClient-syncUploadFromURL\", options);\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n      return await this.blockBlobContext.putBlobFromUrl(0, sourceURL, {\n        ...options,\n        blobHttpHeaders: options.blobHTTPHeaders,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions.tagConditions,\n        },\n        sourceModifiedAccessConditions: {\n          sourceIfMatch: options.sourceConditions?.ifMatch,\n          sourceIfModifiedSince: options.sourceConditions?.ifModifiedSince,\n          sourceIfNoneMatch: options.sourceConditions?.ifNoneMatch,\n          sourceIfUnmodifiedSince: options.sourceConditions?.ifUnmodifiedSince,\n          sourceIfTags: options.sourceConditions?.tagConditions,\n        },\n        cpkInfo: options.customerProvidedKey,\n        copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),\n        tier: toAccessTier(options.tier),\n        blobTagsString: toBlobTagsString(options.tags),\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Uploads the specified block to the block blob's \"staging area\" to be later\n   * committed by a call to commitBlockList.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-block\n   *\n   * @param blockId - A 64-byte value that is base64-encoded\n   * @param body - Data to upload to the staging area.\n   * @param contentLength - Number of bytes to upload.\n   * @param options - Options to the Block Blob Stage Block operation.\n   * @returns Response data for the Block Blob Stage Block operation.\n   */\n  public async stageBlock(\n    blockId: string,\n    body: HttpRequestBody,\n    contentLength: number,\n    options: BlockBlobStageBlockOptions = {}\n  ): Promise<BlockBlobStageBlockResponse> {\n    const { span, updatedOptions } = createSpan(\"BlockBlobClient-stageBlock\", options);\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n      return await this.blockBlobContext.stageBlock(blockId, contentLength, body, {\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        requestOptions: {\n          onUploadProgress: options.onProgress,\n        },\n        transactionalContentMD5: options.transactionalContentMD5,\n        transactionalContentCrc64: options.transactionalContentCrc64,\n        cpkInfo: options.customerProvidedKey,\n        encryptionScope: options.encryptionScope,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * The Stage Block From URL operation creates a new block to be committed as part\n   * of a blob where the contents are read from a URL.\n   * This API is available starting in version 2018-03-28.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url\n   *\n   * @param blockId - A 64-byte value that is base64-encoded\n   * @param sourceURL - Specifies the URL of the blob. The value\n   *                           may be a URL of up to 2 KB in length that specifies a blob.\n   *                           The value should be URL-encoded as it would appear\n   *                           in a request URI. The source blob must either be public\n   *                           or must be authenticated via a shared access signature.\n   *                           If the source blob is public, no authentication is required\n   *                           to perform the operation. Here are some examples of source object URLs:\n   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n   * @param offset - From which position of the blob to download, greater than or equal to 0\n   * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined\n   * @param options - Options to the Block Blob Stage Block From URL operation.\n   * @returns Response data for the Block Blob Stage Block From URL operation.\n   */\n  public async stageBlockFromURL(\n    blockId: string,\n    sourceURL: string,\n    offset: number = 0,\n    count?: number,\n    options: BlockBlobStageBlockFromURLOptions = {}\n  ): Promise<BlockBlobStageBlockFromURLResponse> {\n    const { span, updatedOptions } = createSpan(\"BlockBlobClient-stageBlockFromURL\", options);\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n      return await this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, {\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        sourceContentMD5: options.sourceContentMD5,\n        sourceContentCrc64: options.sourceContentCrc64,\n        sourceRange: offset === 0 && !count ? undefined : rangeToString({ offset, count }),\n        cpkInfo: options.customerProvidedKey,\n        encryptionScope: options.encryptionScope,\n        copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Writes a blob by specifying the list of block IDs that make up the blob.\n   * In order to be written as part of a blob, a block must have been successfully written\n   * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to\n   * update a blob by uploading only those blocks that have changed, then committing the new and existing\n   * blocks together. Any blocks not specified in the block list and permanently deleted.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list\n   *\n   * @param blocks -  Array of 64-byte value that is base64-encoded\n   * @param options - Options to the Block Blob Commit Block List operation.\n   * @returns Response data for the Block Blob Commit Block List operation.\n   */\n  public async commitBlockList(\n    blocks: string[],\n    options: BlockBlobCommitBlockListOptions = {}\n  ): Promise<BlockBlobCommitBlockListResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"BlockBlobClient-commitBlockList\", options);\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n      return await this.blockBlobContext.commitBlockList(\n        { latest: blocks },\n        {\n          abortSignal: options.abortSignal,\n          blobHttpHeaders: options.blobHTTPHeaders,\n          leaseAccessConditions: options.conditions,\n          metadata: options.metadata,\n          modifiedAccessConditions: {\n            ...options.conditions,\n            ifTags: options.conditions?.tagConditions,\n          },\n          cpkInfo: options.customerProvidedKey,\n          encryptionScope: options.encryptionScope,\n          immutabilityPolicyExpiry: options.immutabilityPolicy?.expiriesOn,\n          immutabilityPolicyMode: options.immutabilityPolicy?.policyMode,\n          legalHold: options.legalHold,\n          tier: toAccessTier(options.tier),\n          blobTagsString: toBlobTagsString(options.tags),\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns the list of blocks that have been uploaded as part of a block blob\n   * using the specified block list filter.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list\n   *\n   * @param listType - Specifies whether to return the list of committed blocks,\n   *                                        the list of uncommitted blocks, or both lists together.\n   * @param options - Options to the Block Blob Get Block List operation.\n   * @returns Response data for the Block Blob Get Block List operation.\n   */\n  public async getBlockList(\n    listType: BlockListType,\n    options: BlockBlobGetBlockListOptions = {}\n  ): Promise<BlockBlobGetBlockListResponse> {\n    const { span, updatedOptions } = createSpan(\"BlockBlobClient-getBlockList\", options);\n    try {\n      const res = await this.blockBlobContext.getBlockList(listType, {\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n\n      if (!res.committedBlocks) {\n        res.committedBlocks = [];\n      }\n\n      if (!res.uncommittedBlocks) {\n        res.uncommittedBlocks = [];\n      }\n\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  // High level functions\n\n  /**\n   * Uploads a Buffer(Node.js)/Blob(browsers)/ArrayBuffer/ArrayBufferView object to a BlockBlob.\n   *\n   * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is\n   * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.\n   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n   * to commit the block list.\n   *\n   * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is\n   * `blobContentType`, enabling the browser to provide\n   * functionality based on file type.\n   *\n   * @param data - Buffer(Node.js), Blob, ArrayBuffer or ArrayBufferView\n   * @param options -\n   */\n  public async uploadData(\n    data: Buffer | Blob | ArrayBuffer | ArrayBufferView,\n    options: BlockBlobParallelUploadOptions = {}\n  ): Promise<BlobUploadCommonResponse> {\n    const { span, updatedOptions } = createSpan(\"BlockBlobClient-uploadData\", options);\n    try {\n      if (isNode) {\n        let buffer: Buffer;\n        if (data instanceof Buffer) {\n          buffer = data;\n        } else if (data instanceof ArrayBuffer) {\n          buffer = Buffer.from(data);\n        } else {\n          data = data as ArrayBufferView;\n          buffer = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n        }\n\n        return this.uploadSeekableInternal(\n          (offset: number, size: number): Buffer => buffer.slice(offset, offset + size),\n          buffer.byteLength,\n          updatedOptions\n        );\n      } else {\n        const browserBlob = new Blob([data]);\n        return this.uploadSeekableInternal(\n          (offset: number, size: number): Blob => browserBlob.slice(offset, offset + size),\n          browserBlob.size,\n          updatedOptions\n        );\n      }\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * ONLY AVAILABLE IN BROWSERS.\n   *\n   * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.\n   *\n   * When buffer length lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.\n   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call\n   * {@link commitBlockList} to commit the block list.\n   *\n   * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is\n   * `blobContentType`, enabling the browser to provide\n   * functionality based on file type.\n   *\n   * @deprecated Use {@link uploadData} instead.\n   *\n   * @param browserData - Blob, File, ArrayBuffer or ArrayBufferView\n   * @param options - Options to upload browser data.\n   * @returns Response data for the Blob Upload operation.\n   */\n  public async uploadBrowserData(\n    browserData: Blob | ArrayBuffer | ArrayBufferView,\n    options: BlockBlobParallelUploadOptions = {}\n  ): Promise<BlobUploadCommonResponse> {\n    const { span, updatedOptions } = createSpan(\"BlockBlobClient-uploadBrowserData\", options);\n    try {\n      const browserBlob = new Blob([browserData]);\n      return await this.uploadSeekableInternal(\n        (offset: number, size: number): Blob => browserBlob.slice(offset, offset + size),\n        browserBlob.size,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   *\n   * Uploads data to block blob. Requires a bodyFactory as the data source,\n   * which need to return a {@link HttpRequestBody} object with the offset and size provided.\n   *\n   * When data length is no more than the specified {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is\n   * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.\n   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n   * to commit the block list.\n   *\n   * @param bodyFactory -\n   * @param size - size of the data to upload.\n   * @param options - Options to Upload to Block Blob operation.\n   * @returns Response data for the Blob Upload operation.\n   */\n  private async uploadSeekableInternal(\n    bodyFactory: (offset: number, size: number) => HttpRequestBody,\n    size: number,\n    options: BlockBlobParallelUploadOptions = {}\n  ): Promise<BlobUploadCommonResponse> {\n    if (!options.blockSize) {\n      options.blockSize = 0;\n    }\n    if (options.blockSize < 0 || options.blockSize > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {\n      throw new RangeError(\n        `blockSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES}`\n      );\n    }\n\n    if (options.maxSingleShotSize !== 0 && !options.maxSingleShotSize) {\n      options.maxSingleShotSize = BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;\n    }\n    if (\n      options.maxSingleShotSize < 0 ||\n      options.maxSingleShotSize > BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES\n    ) {\n      throw new RangeError(\n        `maxSingleShotSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}`\n      );\n    }\n\n    if (options.blockSize === 0) {\n      if (size > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * BLOCK_BLOB_MAX_BLOCKS) {\n        throw new RangeError(`${size} is too larger to upload to a block blob.`);\n      }\n      if (size > options.maxSingleShotSize) {\n        options.blockSize = Math.ceil(size / BLOCK_BLOB_MAX_BLOCKS);\n        if (options.blockSize < DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {\n          options.blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n        }\n      }\n    }\n    if (!options.blobHTTPHeaders) {\n      options.blobHTTPHeaders = {};\n    }\n    if (!options.conditions) {\n      options.conditions = {};\n    }\n\n    const { span, updatedOptions } = createSpan(\"BlockBlobClient-uploadSeekableInternal\", options);\n\n    try {\n      if (size <= options.maxSingleShotSize) {\n        return await this.upload(bodyFactory(0, size), size, updatedOptions);\n      }\n\n      const numBlocks: number = Math.floor((size - 1) / options.blockSize) + 1;\n      if (numBlocks > BLOCK_BLOB_MAX_BLOCKS) {\n        throw new RangeError(\n          `The buffer's size is too big or the BlockSize is too small;` +\n            `the number of blocks must be <= ${BLOCK_BLOB_MAX_BLOCKS}`\n        );\n      }\n\n      const blockList: string[] = [];\n      const blockIDPrefix = generateUuid();\n      let transferProgress: number = 0;\n\n      const batch = new Batch(options.concurrency);\n      for (let i = 0; i < numBlocks; i++) {\n        batch.addOperation(async (): Promise<any> => {\n          const blockID = generateBlockID(blockIDPrefix, i);\n          const start = options.blockSize! * i;\n          const end = i === numBlocks - 1 ? size : start + options.blockSize!;\n          const contentLength = end - start;\n          blockList.push(blockID);\n          await this.stageBlock(blockID, bodyFactory(start, contentLength), contentLength, {\n            abortSignal: options.abortSignal,\n            conditions: options.conditions,\n            encryptionScope: options.encryptionScope,\n            tracingOptions: updatedOptions.tracingOptions,\n          });\n          // Update progress after block is successfully uploaded to server, in case of block trying\n          // TODO: Hook with convenience layer progress event in finer level\n          transferProgress += contentLength;\n          if (options.onProgress) {\n            options.onProgress!({\n              loadedBytes: transferProgress,\n            });\n          }\n        });\n      }\n      await batch.do();\n\n      return this.commitBlockList(blockList, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Uploads a local file in blocks to a block blob.\n   *\n   * When file size lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.\n   * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n   * to commit the block list.\n   *\n   * @param filePath - Full path of local file\n   * @param options - Options to Upload to Block Blob operation.\n   * @returns Response data for the Blob Upload operation.\n   */\n  public async uploadFile(\n    filePath: string,\n    options: BlockBlobParallelUploadOptions = {}\n  ): Promise<BlobUploadCommonResponse> {\n    const { span, updatedOptions } = createSpan(\"BlockBlobClient-uploadFile\", options);\n    try {\n      const size = (await fsStat(filePath)).size;\n      return await this.uploadSeekableInternal(\n        (offset, count) => {\n          return () =>\n            fsCreateReadStream(filePath, {\n              autoClose: true,\n              end: count ? offset + count - 1 : Infinity,\n              start: offset,\n            });\n        },\n        size,\n        {\n          ...options,\n          tracingOptions: {\n            ...options!.tracingOptions,\n            ...convertTracingToRequestOptionsBase(updatedOptions),\n          },\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Uploads a Node.js Readable stream into block blob.\n   *\n   * PERFORMANCE IMPROVEMENT TIPS:\n   * * Input stream highWaterMark is better to set a same value with bufferSize\n   *    parameter, which will avoid Buffer.concat() operations.\n   *\n   * @param stream - Node.js Readable stream\n   * @param bufferSize - Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB\n   * @param maxConcurrency -  Max concurrency indicates the max number of buffers that can be allocated,\n   *                                 positive correlation with max uploading concurrency. Default value is 5\n   * @param options - Options to Upload Stream to Block Blob operation.\n   * @returns Response data for the Blob Upload operation.\n   */\n  public async uploadStream(\n    stream: Readable,\n    bufferSize: number = DEFAULT_BLOCK_BUFFER_SIZE_BYTES,\n    maxConcurrency: number = 5,\n    options: BlockBlobUploadStreamOptions = {}\n  ): Promise<BlobUploadCommonResponse> {\n    if (!options.blobHTTPHeaders) {\n      options.blobHTTPHeaders = {};\n    }\n    if (!options.conditions) {\n      options.conditions = {};\n    }\n\n    const { span, updatedOptions } = createSpan(\"BlockBlobClient-uploadStream\", options);\n\n    try {\n      let blockNum = 0;\n      const blockIDPrefix = generateUuid();\n      let transferProgress: number = 0;\n      const blockList: string[] = [];\n\n      const scheduler = new BufferScheduler(\n        stream,\n        bufferSize,\n        maxConcurrency,\n        async (body, length) => {\n          const blockID = generateBlockID(blockIDPrefix, blockNum);\n          blockList.push(blockID);\n          blockNum++;\n\n          await this.stageBlock(blockID, body, length, {\n            conditions: options.conditions,\n            encryptionScope: options.encryptionScope,\n            tracingOptions: updatedOptions.tracingOptions,\n          });\n\n          // Update progress after block is successfully uploaded to server, in case of block trying\n          transferProgress += length;\n          if (options.onProgress) {\n            options.onProgress({ loadedBytes: transferProgress });\n          }\n        },\n        // concurrency should set a smaller value than maxConcurrency, which is helpful to\n        // reduce the possibility when a outgoing handler waits for stream data, in\n        // this situation, outgoing handlers are blocked.\n        // Outgoing queue shouldn't be empty.\n        Math.ceil((maxConcurrency / 4) * 3)\n      );\n      await scheduler.do();\n\n      return await this.commitBlockList(blockList, {\n        ...options,\n        tracingOptions: {\n          ...options!.tracingOptions,\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n        },\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n\n/**\n * Options to configure the {@link PageBlobClient.create} operation.\n */\nexport interface PageBlobCreateOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when creating a page blob.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * A user-controlled value that can be used to track requests.\n   * The value must be between 0 and 2^63 - 1. The default value is 0.\n   */\n  blobSequenceNumber?: number;\n  /**\n   * HTTP headers to set when creating a page blob.\n   */\n  blobHTTPHeaders?: BlobHTTPHeaders;\n  /**\n   * A collection of key-value string pair to associate with the blob when creating append blobs.\n   */\n  metadata?: Metadata;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n  /**\n   * Optional. Specifies immutability policy for a blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  immutabilityPolicy?: BlobImmutabilityPolicy;\n  /**\n   * Optional. Indicates if a legal hold should be placed on the blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  legalHold?: boolean;\n  /**\n   * Access tier.\n   * More Details - https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers\n   */\n  tier?: PremiumPageBlobTier | string;\n  /**\n   * Blob tags.\n   */\n  tags?: Tags;\n}\n\n/**\n * Options to configure the {@link PageBlobClient.createIfNotExists} operation.\n */\nexport interface PageBlobCreateIfNotExistsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * A user-controlled value that can be used to track requests.\n   * The value must be between 0 and 2^63 - 1. The default value is 0.\n   */\n  blobSequenceNumber?: number;\n  /**\n   * HTTP headers to set when creating a page blob.\n   */\n  blobHTTPHeaders?: BlobHTTPHeaders;\n  /**\n   * A collection of key-value string pair to associate with the blob when creating append blobs.\n   */\n  metadata?: Metadata;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n  /**\n   * Optional. Specifies immutability policy for a blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  immutabilityPolicy?: BlobImmutabilityPolicy;\n  /**\n   * Optional. Indicates if a legal hold should be placed on the blob.\n   * Note that is parameter is only applicable to a blob within a container that\n   * has version level worm enabled.\n   */\n  legalHold?: boolean;\n  /**\n   * Access tier.\n   * More Details - https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers\n   */\n  tier?: PremiumPageBlobTier | string;\n}\n\n/**\n * Options to configure the {@link PageBlobClient.uploadPages} operation.\n */\nexport interface PageBlobUploadPagesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when uploading pages.\n   */\n  conditions?: PageBlobRequestConditions;\n  /**\n   * Callback to receive events on the progress of upload pages operation.\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n  /**\n   * An MD5 hash of the content. This hash is used to verify the integrity of the content during transport.\n   * When this is specified, the storage service compares the hash of the content that has arrived with this value.\n   *\n   * transactionalContentMD5 and transactionalContentCrc64 cannot be set at same time.\n   */\n  transactionalContentMD5?: Uint8Array;\n  /**\n   * A CRC64 hash of the content. This hash is used to verify the integrity of the content during transport.\n   * When this is specified, the storage service compares the hash of the content that has arrived with this value.\n   *\n   * transactionalContentMD5 and transactionalContentCrc64 cannot be set at same time.\n   */\n  transactionalContentCrc64?: Uint8Array;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n}\n\n/**\n * Options to configure the {@link PageBlobClient.clearPages} operation.\n */\nexport interface PageBlobClearPagesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when clearing pages.\n   */\n  conditions?: PageBlobRequestConditions;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n}\n\n/**\n * Options to configure the {@link PageBlobClient.getPageRanges} operation.\n */\nexport interface PageBlobGetPageRangesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when getting page ranges.\n   */\n  conditions?: BlobRequestConditions;\n}\n\n/**\n * Options to configure the {@link PageBlobClient.getRangesDiff} operation.\n */\nexport interface PageBlobGetPageRangesDiffOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when getting page ranges diff.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * (unused)\n   */\n  range?: string;\n}\n\n/**\n * Options to configure {@link PageBlobClient.resize} operation.\n */\nexport interface PageBlobResizeOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when resizing a page blob.\n   */\n  conditions?: BlobRequestConditions;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n}\n\n/**\n * Options to configure {@link PageBlobClient.updateSequenceNumber} operation.\n */\nexport interface PageBlobUpdateSequenceNumberOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when updating sequence number.\n   */\n  conditions?: BlobRequestConditions;\n}\n\n/**\n * Options to configure {@link PageBlobClient.startCopyIncremental} operation.\n */\nexport interface PageBlobStartCopyIncrementalOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when starting a copy incremental operation.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * Options to configure {@link PageBlobClient.uploadPagesFromURL} operation.\n */\nexport interface PageBlobUploadPagesFromURLOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when updating sequence number.\n   */\n  conditions?: PageBlobRequestConditions;\n  /**\n   * Conditions to meet for the source Azure Blob/File when copying from a URL to the blob.\n   */\n  sourceConditions?: MatchConditions & ModificationConditions;\n  /**\n   * An MD5 hash of the content from the URI.\n   * This hash is used to verify the integrity of the content during transport of the data from the URI.\n   * When this is specified, the storage service compares the hash of the content that has arrived from the copy-source with this value.\n   *\n   * sourceContentMD5 and sourceContentCrc64 cannot be set at same time.\n   */\n  sourceContentMD5?: Uint8Array;\n  /**\n   * A CRC64 hash of the content from the URI.\n   * This hash is used to verify the integrity of the content during transport of the data from the URI.\n   * When this is specified, the storage service compares the hash of the content that has arrived from the copy-source with this value.\n   *\n   * sourceContentMD5 and sourceContentCrc64 cannot be set at same time.\n   */\n  sourceContentCrc64?: Uint8Array;\n  /**\n   * Customer Provided Key Info.\n   */\n  customerProvidedKey?: CpkInfo;\n  /**\n   * Optional. Version 2019-07-07 and later.  Specifies the name of the encryption scope to use to\n   * encrypt the data provided in the request. If not specified, encryption is performed with the\n   * default account encryption scope.  For more information, see Encryption at Rest for Azure\n   * Storage Services.\n   */\n  encryptionScope?: string;\n  /**\n   * Only Bearer type is supported. Credentials should be a valid OAuth access token to copy source.\n   */\n  sourceAuthorization?: HttpAuthorization;\n}\n\n/**\n * Contains response data for the {@link PageBlobClient.createIfNotExists} operation.\n */\nexport interface PageBlobCreateIfNotExistsResponse extends PageBlobCreateResponse {\n  /**\n   * Indicate whether the blob is successfully created. Is false when the blob is not changed as it already exists.\n   */\n  succeeded: boolean;\n}\n\n/**\n * PageBlobClient defines a set of operations applicable to page blobs.\n */\nexport class PageBlobClient extends BlobClient {\n  /**\n   * pageBlobsContext provided by protocol layer.\n   */\n  private pageBlobContext: PageBlob;\n\n  /**\n   *\n   * Creates an instance of PageBlobClient.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param containerName - Container name.\n   * @param blobName - Blob name.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(\n    connectionString: string,\n    containerName: string,\n    blobName: string,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of PageBlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param url - A Client string pointing to Azure Storage page blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/pageblob\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net/mycontainer/pageblob?sasString\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(\n    url: string,\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of PageBlobClient.\n   *\n   * @param url - A URL string pointing to Azure Storage page blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/pageblob\".\n   *                     You can append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/pageblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: PipelineLike);\n  constructor(\n    urlOrConnectionString: string,\n    credentialOrPipelineOrContainerName:\n      | string\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | PipelineLike,\n    blobNameOrOptions?: string | StoragePipelineOptions,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ) {\n    // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n    let pipeline: PipelineLike;\n    let url: string;\n    options = options || {};\n    if (isPipelineLike(credentialOrPipelineOrContainerName)) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (\n      (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential) ||\n      credentialOrPipelineOrContainerName instanceof AnonymousCredential ||\n      isTokenCredential(credentialOrPipelineOrContainerName)\n    ) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      options = blobNameOrOptions as StoragePipelineOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (\n      !credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName !== \"string\"\n    ) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      // The second parameter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (\n      credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName === \"string\" &&\n      blobNameOrOptions &&\n      typeof blobNameOrOptions === \"string\"\n    ) {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      const containerName = credentialOrPipelineOrContainerName;\n      const blobName = blobNameOrOptions;\n\n      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          const sharedKeyCredential = new StorageSharedKeyCredential(\n            extractedCreds.accountName!,\n            extractedCreds.accountKey\n          );\n          url = appendToURLPath(\n            appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)),\n            encodeURIComponent(blobName)\n          );\n\n          if (!options.proxyOptions) {\n            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          }\n\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url =\n          appendToURLPath(\n            appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)),\n            encodeURIComponent(blobName)\n          ) +\n          \"?\" +\n          extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\n          \"Connection string must be either an Account connection string or a SAS connection string\"\n        );\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n    super(url, pipeline);\n    this.pageBlobContext = new PageBlob(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new PageBlobClient object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a Client to the base blob.\n   *\n   * @param snapshot - The snapshot timestamp.\n   * @returns A new PageBlobClient object identical to the source but with the specified snapshot timestamp.\n   */\n  public withSnapshot(snapshot: string): PageBlobClient {\n    return new PageBlobClient(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.SNAPSHOT,\n        snapshot.length === 0 ? undefined : snapshot\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a page blob of the specified length. Call uploadPages to upload data\n   * data to a page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param size - size of the page blob.\n   * @param options - Options to the Page Blob Create operation.\n   * @returns Response data for the Page Blob Create operation.\n   */\n  public async create(\n    size: number,\n    options: PageBlobCreateOptions = {}\n  ): Promise<PageBlobCreateResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"PageBlobClient-create\", options);\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n      return await this.pageBlobContext.create(0, size, {\n        abortSignal: options.abortSignal,\n        blobHttpHeaders: options.blobHTTPHeaders,\n        blobSequenceNumber: options.blobSequenceNumber,\n        leaseAccessConditions: options.conditions,\n        metadata: options.metadata,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        cpkInfo: options.customerProvidedKey,\n        encryptionScope: options.encryptionScope,\n        immutabilityPolicyExpiry: options.immutabilityPolicy?.expiriesOn,\n        immutabilityPolicyMode: options.immutabilityPolicy?.policyMode,\n        legalHold: options.legalHold,\n        tier: toAccessTier(options.tier),\n        blobTagsString: toBlobTagsString(options.tags),\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a page blob of the specified length. Call uploadPages to upload data\n   * data to a page blob. If the blob with the same name already exists, the content\n   * of the existing blob will remain unchanged.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param size - size of the page blob.\n   * @param options -\n   */\n  public async createIfNotExists(\n    size: number,\n    options: PageBlobCreateIfNotExistsOptions = {}\n  ): Promise<PageBlobCreateIfNotExistsResponse> {\n    const { span, updatedOptions } = createSpan(\"PageBlobClient-createIfNotExists\", options);\n    try {\n      const conditions = { ifNoneMatch: ETagAny };\n      const res = await this.create(size, {\n        ...options,\n        conditions,\n        tracingOptions: updatedOptions.tracingOptions,\n      });\n      return {\n        succeeded: true,\n        ...res,\n        _response: res._response, // _response is made non-enumerable\n      };\n    } catch (e) {\n      if (e.details?.errorCode === \"BlobAlreadyExists\") {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: \"Expected exception when creating a blob only if it does not already exist.\",\n        });\n        return {\n          succeeded: false,\n          ...e.response?.parsedHeaders,\n          _response: e.response,\n        };\n      }\n\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n   *\n   * @param body - Data to upload\n   * @param offset - Offset of destination page blob\n   * @param count - Content length of the body, also number of bytes to be uploaded\n   * @param options - Options to the Page Blob Upload Pages operation.\n   * @returns Response data for the Page Blob Upload Pages operation.\n   */\n  public async uploadPages(\n    body: HttpRequestBody,\n    offset: number,\n    count: number,\n    options: PageBlobUploadPagesOptions = {}\n  ): Promise<PageBlobUploadPagesResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"PageBlobClient-uploadPages\", options);\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n      return await this.pageBlobContext.uploadPages(count, body, {\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        requestOptions: {\n          onUploadProgress: options.onProgress,\n        },\n        range: rangeToString({ offset, count }),\n        sequenceNumberAccessConditions: options.conditions,\n        transactionalContentMD5: options.transactionalContentMD5,\n        transactionalContentCrc64: options.transactionalContentCrc64,\n        cpkInfo: options.customerProvidedKey,\n        encryptionScope: options.encryptionScope,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob where the\n   * contents are read from a URL.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url\n   *\n   * @param sourceURL - Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication\n   * @param sourceOffset - The source offset to copy from. Pass 0 to copy from the beginning of source page blob\n   * @param destOffset - Offset of destination page blob\n   * @param count - Number of bytes to be uploaded from source page blob\n   * @param options -\n   */\n  public async uploadPagesFromURL(\n    sourceURL: string,\n    sourceOffset: number,\n    destOffset: number,\n    count: number,\n    options: PageBlobUploadPagesFromURLOptions = {}\n  ): Promise<PageBlobUploadPagesFromURLResponse> {\n    options.conditions = options.conditions || {};\n    options.sourceConditions = options.sourceConditions || {};\n    const { span, updatedOptions } = createSpan(\"PageBlobClient-uploadPagesFromURL\", options);\n    try {\n      ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n      return await this.pageBlobContext.uploadPagesFromURL(\n        sourceURL,\n        rangeToString({ offset: sourceOffset, count }),\n        0,\n        rangeToString({ offset: destOffset, count }),\n        {\n          abortSignal: options.abortSignal,\n          sourceContentMD5: options.sourceContentMD5,\n          sourceContentCrc64: options.sourceContentCrc64,\n          leaseAccessConditions: options.conditions,\n          sequenceNumberAccessConditions: options.conditions,\n          modifiedAccessConditions: {\n            ...options.conditions,\n            ifTags: options.conditions?.tagConditions,\n          },\n          sourceModifiedAccessConditions: {\n            sourceIfMatch: options.sourceConditions.ifMatch,\n            sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n            sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n            sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,\n          },\n          cpkInfo: options.customerProvidedKey,\n          encryptionScope: options.encryptionScope,\n          copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Frees the specified pages from the page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n   *\n   * @param offset - Starting byte position of the pages to clear.\n   * @param count - Number of bytes to clear.\n   * @param options - Options to the Page Blob Clear Pages operation.\n   * @returns Response data for the Page Blob Clear Pages operation.\n   */\n  public async clearPages(\n    offset: number = 0,\n    count?: number,\n    options: PageBlobClearPagesOptions = {}\n  ): Promise<PageBlobClearPagesResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"PageBlobClient-clearPages\", options);\n    try {\n      return await this.pageBlobContext.clearPages(0, {\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        range: rangeToString({ offset, count }),\n        sequenceNumberAccessConditions: options.conditions,\n        cpkInfo: options.customerProvidedKey,\n        encryptionScope: options.encryptionScope,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns the list of valid page ranges for a page blob or snapshot of a page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param offset - Starting byte position of the page ranges.\n   * @param count - Number of bytes to get.\n   * @param options - Options to the Page Blob Get Ranges operation.\n   * @returns Response data for the Page Blob Get Ranges operation.\n   */\n  public async getPageRanges(\n    offset: number = 0,\n    count?: number,\n    options: PageBlobGetPageRangesOptions = {}\n  ): Promise<PageBlobGetPageRangesResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"PageBlobClient-getPageRanges\", options);\n    try {\n      return await this.pageBlobContext\n        .getPageRanges({\n          abortSignal: options.abortSignal,\n          leaseAccessConditions: options.conditions,\n          modifiedAccessConditions: {\n            ...options.conditions,\n            ifTags: options.conditions?.tagConditions,\n          },\n          range: rangeToString({ offset, count }),\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n        })\n        .then(rangeResponseFromModel);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the collection of page ranges that differ between a specified snapshot and this page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param offset - Starting byte position of the page blob\n   * @param count - Number of bytes to get ranges diff.\n   * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.\n   * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n   * @returns Response data for the Page Blob Get Page Range Diff operation.\n   */\n  public async getPageRangesDiff(\n    offset: number,\n    count: number,\n    prevSnapshot: string,\n    options: PageBlobGetPageRangesDiffOptions = {}\n  ): Promise<PageBlobGetPageRangesDiffResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"PageBlobClient-getPageRangesDiff\", options);\n\n    try {\n      return await this.pageBlobContext\n        .getPageRangesDiff({\n          abortSignal: options.abortSignal,\n          leaseAccessConditions: options.conditions,\n          modifiedAccessConditions: {\n            ...options.conditions,\n            ifTags: options.conditions?.tagConditions,\n          },\n          prevsnapshot: prevSnapshot,\n          range: rangeToString({ offset, count }),\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n        })\n        .then(rangeResponseFromModel);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param offset - Starting byte position of the page blob\n   * @param count - Number of bytes to get ranges diff.\n   * @param prevSnapshotUrl - URL of snapshot to retrieve the difference.\n   * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n   * @returns Response data for the Page Blob Get Page Range Diff operation.\n   */\n  public async getPageRangesDiffForManagedDisks(\n    offset: number,\n    count: number,\n    prevSnapshotUrl: string,\n    options: PageBlobGetPageRangesDiffOptions = {}\n  ): Promise<PageBlobGetPageRangesDiffResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\n      \"PageBlobClient-GetPageRangesDiffForManagedDisks\",\n      options\n    );\n\n    try {\n      return await this.pageBlobContext\n        .getPageRangesDiff({\n          abortSignal: options.abortSignal,\n          leaseAccessConditions: options.conditions,\n          modifiedAccessConditions: {\n            ...options.conditions,\n            ifTags: options.conditions?.tagConditions,\n          },\n          prevSnapshotUrl,\n          range: rangeToString({ offset, count }),\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n        })\n        .then(rangeResponseFromModel);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Resizes the page blob to the specified size (which must be a multiple of 512).\n   * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties\n   *\n   * @param size - Target size\n   * @param options - Options to the Page Blob Resize operation.\n   * @returns Response data for the Page Blob Resize operation.\n   */\n  public async resize(\n    size: number,\n    options: PageBlobResizeOptions = {}\n  ): Promise<PageBlobResizeResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"PageBlobClient-resize\", options);\n    try {\n      return await this.pageBlobContext.resize(size, {\n        abortSignal: options.abortSignal,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        encryptionScope: options.encryptionScope,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets a page blob's sequence number.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n   *\n   * @param sequenceNumberAction - Indicates how the service should modify the blob's sequence number.\n   * @param sequenceNumber - Required if sequenceNumberAction is max or update\n   * @param options - Options to the Page Blob Update Sequence Number operation.\n   * @returns Response data for the Page Blob Update Sequence Number operation.\n   */\n  public async updateSequenceNumber(\n    sequenceNumberAction: SequenceNumberActionType,\n    sequenceNumber?: number,\n    options: PageBlobUpdateSequenceNumberOptions = {}\n  ): Promise<PageBlobUpdateSequenceNumberResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"PageBlobClient-updateSequenceNumber\", options);\n    try {\n      return await this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, {\n        abortSignal: options.abortSignal,\n        blobSequenceNumber: sequenceNumber,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.\n   * The snapshot is copied such that only the differential changes between the previously\n   * copied snapshot are transferred to the destination.\n   * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.\n   * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n   * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots\n   *\n   * @param copySource - Specifies the name of the source page blob snapshot. For example,\n   *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n   * @param options - Options to the Page Blob Copy Incremental operation.\n   * @returns Response data for the Page Blob Copy Incremental operation.\n   */\n  public async startCopyIncremental(\n    copySource: string,\n    options: PageBlobStartCopyIncrementalOptions = {}\n  ): Promise<PageBlobCopyIncrementalResponse> {\n    const { span, updatedOptions } = createSpan(\"PageBlobClient-startCopyIncremental\", options);\n    try {\n      return await this.pageBlobContext.copyIncremental(copySource, {\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// This file is used as a shim of \"BlobDownloadResponse\" for some browser bundlers\n// when trying to bundle \"BlobDownloadResponse\"\n// \"BlobDownloadResponse\" class is only available in Node.js runtime\nexport const BlobDownloadResponse = 1;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpResponse } from \"@azure/core-http\";\n\nimport {\n  BlobDownloadResponseModel,\n  BlobType,\n  CopyStatusType,\n  LeaseDurationType,\n  LeaseStateType,\n  LeaseStatusType,\n  BlobDownloadHeaders,\n  BlobQueryResponseModel,\n} from \"./generatedModels\";\nimport { Metadata } from \"./models\";\nimport { BlobQuickQueryStreamOptions } from \"./utils/BlobQuickQueryStream\";\n\n/**\n * ONLY AVAILABLE IN BROWSER RUNTIME.\n *\n * BlobQueryResponse implements BlobDownloadResponseModel interface, and in browser runtime it will\n * parse avor data returned by blob query.\n */\nexport class BlobQueryResponse implements BlobDownloadResponseModel {\n  /**\n   * Indicates that the service supports\n   * requests for partial file content.\n   *\n   * @readonly\n   */\n  public get acceptRanges(): string | undefined {\n    return this.originalResponse.acceptRanges;\n  }\n\n  /**\n   * Returns if it was previously specified\n   * for the file.\n   *\n   * @readonly\n   */\n  public get cacheControl(): string | undefined {\n    return this.originalResponse.cacheControl;\n  }\n\n  /**\n   * Returns the value that was specified\n   * for the 'x-ms-content-disposition' header and specifies how to process the\n   * response.\n   *\n   * @readonly\n   */\n  public get contentDisposition(): string | undefined {\n    return this.originalResponse.contentDisposition;\n  }\n\n  /**\n   * Returns the value that was specified\n   * for the Content-Encoding request header.\n   *\n   * @readonly\n   */\n  public get contentEncoding(): string | undefined {\n    return this.originalResponse.contentEncoding;\n  }\n\n  /**\n   * Returns the value that was specified\n   * for the Content-Language request header.\n   *\n   * @readonly\n   */\n  public get contentLanguage(): string | undefined {\n    return this.originalResponse.contentLanguage;\n  }\n\n  /**\n   * The current sequence number for a\n   * page blob. This header is not returned for block blobs or append blobs.\n   *\n   * @readonly\n   */\n  public get blobSequenceNumber(): number | undefined {\n    return this.originalResponse.blobSequenceNumber;\n  }\n\n  /**\n   * The blob's type. Possible values include:\n   * 'BlockBlob', 'PageBlob', 'AppendBlob'.\n   *\n   * @readonly\n   */\n  public get blobType(): BlobType | undefined {\n    return this.originalResponse.blobType;\n  }\n\n  /**\n   * The number of bytes present in the\n   * response body.\n   *\n   * @readonly\n   */\n  public get contentLength(): number | undefined {\n    return this.originalResponse.contentLength;\n  }\n\n  /**\n   * If the file has an MD5 hash and the\n   * request is to read the full file, this response header is returned so that\n   * the client can check for message content integrity. If the request is to\n   * read a specified range and the 'x-ms-range-get-content-md5' is set to\n   * true, then the request returns an MD5 hash for the range, as long as the\n   * range size is less than or equal to 4 MB. If neither of these sets of\n   * conditions is true, then no value is returned for the 'Content-MD5'\n   * header.\n   *\n   * @readonly\n   */\n  public get contentMD5(): Uint8Array | undefined {\n    return this.originalResponse.contentMD5;\n  }\n\n  /**\n   * Indicates the range of bytes returned if\n   * the client requested a subset of the file by setting the Range request\n   * header.\n   *\n   * @readonly\n   */\n  public get contentRange(): string | undefined {\n    return this.originalResponse.contentRange;\n  }\n\n  /**\n   * The content type specified for the file.\n   * The default content type is 'application/octet-stream'\n   *\n   * @readonly\n   */\n  public get contentType(): string | undefined {\n    return this.originalResponse.contentType;\n  }\n\n  /**\n   * Conclusion time of the last attempted\n   * Copy File operation where this file was the destination file. This value\n   * can specify the time of a completed, aborted, or failed copy attempt.\n   *\n   * @readonly\n   */\n  public get copyCompletedOn(): Date | undefined {\n    return undefined;\n  }\n\n  /**\n   * String identifier for the last attempted Copy\n   * File operation where this file was the destination file.\n   *\n   * @readonly\n   */\n  public get copyId(): string | undefined {\n    return this.originalResponse.copyId;\n  }\n\n  /**\n   * Contains the number of bytes copied and\n   * the total bytes in the source in the last attempted Copy File operation\n   * where this file was the destination file. Can show between 0 and\n   * Content-Length bytes copied.\n   *\n   * @readonly\n   */\n  public get copyProgress(): string | undefined {\n    return this.originalResponse.copyProgress;\n  }\n\n  /**\n   * URL up to 2KB in length that specifies the\n   * source file used in the last attempted Copy File operation where this file\n   * was the destination file.\n   *\n   * @readonly\n   */\n  public get copySource(): string | undefined {\n    return this.originalResponse.copySource;\n  }\n\n  /**\n   * State of the copy operation\n   * identified by 'x-ms-copy-id'. Possible values include: 'pending',\n   * 'success', 'aborted', 'failed'\n   *\n   * @readonly\n   */\n  public get copyStatus(): CopyStatusType | undefined {\n    return this.originalResponse.copyStatus;\n  }\n\n  /**\n   * Only appears when\n   * x-ms-copy-status is failed or pending. Describes cause of fatal or\n   * non-fatal copy operation failure.\n   *\n   * @readonly\n   */\n  public get copyStatusDescription(): string | undefined {\n    return this.originalResponse.copyStatusDescription;\n  }\n\n  /**\n   * When a blob is leased,\n   * specifies whether the lease is of infinite or fixed duration. Possible\n   * values include: 'infinite', 'fixed'.\n   *\n   * @readonly\n   */\n  public get leaseDuration(): LeaseDurationType | undefined {\n    return this.originalResponse.leaseDuration;\n  }\n\n  /**\n   * Lease state of the blob. Possible\n   * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.\n   *\n   * @readonly\n   */\n  public get leaseState(): LeaseStateType | undefined {\n    return this.originalResponse.leaseState;\n  }\n\n  /**\n   * The current lease status of the\n   * blob. Possible values include: 'locked', 'unlocked'.\n   *\n   * @readonly\n   */\n  public get leaseStatus(): LeaseStatusType | undefined {\n    return this.originalResponse.leaseStatus;\n  }\n\n  /**\n   * A UTC date/time value generated by the service that\n   * indicates the time at which the response was initiated.\n   *\n   * @readonly\n   */\n  public get date(): Date | undefined {\n    return this.originalResponse.date;\n  }\n\n  /**\n   * The number of committed blocks\n   * present in the blob. This header is returned only for append blobs.\n   *\n   * @readonly\n   */\n  public get blobCommittedBlockCount(): number | undefined {\n    return this.originalResponse.blobCommittedBlockCount;\n  }\n\n  /**\n   * The ETag contains a value that you can use to\n   * perform operations conditionally, in quotes.\n   *\n   * @readonly\n   */\n  public get etag(): string | undefined {\n    return this.originalResponse.etag;\n  }\n\n  /**\n   * The error code.\n   *\n   * @readonly\n   */\n  public get errorCode(): string | undefined {\n    return this.originalResponse.errorCode;\n  }\n\n  /**\n   * The value of this header is set to\n   * true if the file data and application metadata are completely encrypted\n   * using the specified algorithm. Otherwise, the value is set to false (when\n   * the file is unencrypted, or if only parts of the file/application metadata\n   * are encrypted).\n   *\n   * @readonly\n   */\n  public get isServerEncrypted(): boolean | undefined {\n    return this.originalResponse.isServerEncrypted;\n  }\n\n  /**\n   * If the blob has a MD5 hash, and if\n   * request contains range header (Range or x-ms-range), this response header\n   * is returned with the value of the whole blob's MD5 value. This value may\n   * or may not be equal to the value returned in Content-MD5 header, with the\n   * latter calculated from the requested range.\n   *\n   * @readonly\n   */\n  public get blobContentMD5(): Uint8Array | undefined {\n    return this.originalResponse.blobContentMD5;\n  }\n\n  /**\n   * Returns the date and time the file was last\n   * modified. Any operation that modifies the file or its properties updates\n   * the last modified time.\n   *\n   * @readonly\n   */\n  public get lastModified(): Date | undefined {\n    return this.originalResponse.lastModified;\n  }\n\n  /**\n   * A name-value pair\n   * to associate with a file storage object.\n   *\n   * @readonly\n   */\n  public get metadata(): Metadata | undefined {\n    return this.originalResponse.metadata;\n  }\n\n  /**\n   * This header uniquely identifies the request\n   * that was made and can be used for troubleshooting the request.\n   *\n   * @readonly\n   */\n  public get requestId(): string | undefined {\n    return this.originalResponse.requestId;\n  }\n\n  /**\n   * If a client request id header is sent in the request, this header will be present in the\n   * response with the same value.\n   *\n   * @readonly\n   */\n  public get clientRequestId(): string | undefined {\n    return this.originalResponse.clientRequestId;\n  }\n\n  /**\n   * Indicates the version of the File service used\n   * to execute the request.\n   *\n   * @readonly\n   */\n  public get version(): string | undefined {\n    return this.originalResponse.version;\n  }\n\n  /**\n   * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned\n   * when the blob was encrypted with a customer-provided key.\n   *\n   * @readonly\n   */\n  public get encryptionKeySha256(): string | undefined {\n    return this.originalResponse.encryptionKeySha256;\n  }\n\n  /**\n   * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to\n   * true, then the request returns a crc64 for the range, as long as the range size is less than\n   * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is\n   * specified in the same request, it will fail with 400(Bad Request)\n   */\n  public get contentCrc64(): Uint8Array | undefined {\n    return this.originalResponse.contentCrc64;\n  }\n\n  /**\n   * The response body as a browser Blob.\n   * Always undefined in node.js.\n   *\n   * @readonly\n   */\n  public get blobBody(): Promise<Blob> | undefined {\n    throw Error(`Quick query in browser is not supported yet.`);\n  }\n\n  /**\n   * The response body as a node.js Readable stream.\n   * Always undefined in the browser.\n   *\n   * @readonly\n   */\n  public get readableStreamBody(): NodeJS.ReadableStream | undefined {\n    return undefined;\n  }\n\n  /**\n   * The HTTP response.\n   */\n  public get _response(): HttpResponse & {\n    parsedHeaders: BlobDownloadHeaders;\n  } {\n    return this.originalResponse._response;\n  }\n\n  private originalResponse: BlobQueryResponseModel;\n\n  /**\n   * Creates an instance of BlobQueryResponse.\n   *\n   * @param originalResponse -\n   * @param options -\n   */\n  public constructor(\n    originalResponse: BlobQueryResponseModel,\n    _options: BlobQuickQueryStreamOptions = {}\n  ) {\n    this.originalResponse = originalResponse;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { BlobImmutabilityPolicyMode } from \"./generatedModels\";\nimport {\n  LeaseAccessConditions,\n  SequenceNumberAccessConditions,\n  AppendPositionAccessConditions,\n  AccessTier,\n  CpkInfo,\n  BlobDownloadResponseModel,\n} from \"./generatedModels\";\nimport { EncryptionAlgorithmAES25 } from \"./utils/constants\";\n\n/**\n * Blob tags.\n */\nexport type Tags = Record<string, string>;\n\n/**\n * A map of name-value pairs to associate with the resource.\n */\nexport interface Metadata {\n  /**\n   * A name-value pair.\n   */\n  [propertyName: string]: string;\n}\n\n/**\n * standard HTTP conditional headers and tags condition.\n */\nexport interface ModifiedAccessConditions\n  extends MatchConditions,\n    ModificationConditions,\n    TagConditions {}\n\n/**\n * standard HTTP conditional headers, tags condition and lease condition\n */\nexport interface BlobRequestConditions extends ModifiedAccessConditions, LeaseAccessConditions {}\n\n/**\n * Conditions to add to the creation of this page blob.\n */\nexport interface PageBlobRequestConditions\n  extends BlobRequestConditions,\n    SequenceNumberAccessConditions {}\n\n/**\n * Conditions to add to the creation of this append blob.\n */\nexport interface AppendBlobRequestConditions\n  extends BlobRequestConditions,\n    AppendPositionAccessConditions {}\n\n/**\n * Specifies HTTP options for conditional requests based on modification time.\n */\nexport interface ModificationConditions {\n  /**\n   * Specify this header value to operate only on a blob if it has been modified since the\n   * specified date/time.\n   */\n  ifModifiedSince?: Date;\n  /**\n   * Specify this header value to operate only on a blob if it has not been modified since the\n   * specified date/time.\n   */\n  ifUnmodifiedSince?: Date;\n}\n\n/**\n * Specifies HTTP options for conditional requests based on ETag matching.\n */\nexport interface MatchConditions {\n  /**\n   * Specify an ETag value to operate only on blobs with a matching value.\n   */\n  ifMatch?: string;\n  /**\n   * Specify an ETag value to operate only on blobs without a matching value.\n   */\n  ifNoneMatch?: string;\n}\n\n/**\n * Specifies HTTP options for conditional requests based on blob tags.\n */\nexport interface TagConditions {\n  /**\n   * Optional SQL statement to apply to the tags of the blob.\n   */\n  tagConditions?: string;\n}\n\n/**\n * Conditions to meet for the container.\n */\nexport interface ContainerRequestConditions extends LeaseAccessConditions, ModificationConditions {}\n\n/**\n * Represents the access tier on a blob.\n * For detailed information about block blob level tiering see {@link https://docs.microsoft.com/azure/storage/blobs/storage-blob-storage-tiers|Hot, cool and archive storage tiers.}\n */\nexport enum BlockBlobTier {\n  /**\n   * Optimized for storing data that is accessed frequently.\n   */\n  Hot = \"Hot\",\n  /**\n   * Optimized for storing data that is infrequently accessed and stored for at least 30 days.\n   */\n  Cool = \"Cool\",\n  /**\n   * Optimized for storing data that is rarely accessed and stored for at least 180 days\n   * with flexible latency requirements (on the order of hours).\n   */\n  Archive = \"Archive\",\n}\n\n/**\n * Specifies the page blob tier to set the blob to. This is only applicable to page blobs on premium storage accounts.\n * Please see {@link https://docs.microsoft.com/azure/storage/storage-premium-storage#scalability-and-performance-targets|here}\n * for detailed information on the corresponding IOPS and throughput per PageBlobTier.\n */\nexport enum PremiumPageBlobTier {\n  /**\n   * P4 Tier.\n   */\n  P4 = \"P4\",\n  /**\n   * P6 Tier.\n   */\n  P6 = \"P6\",\n  /**\n   * P10 Tier.\n   */\n  P10 = \"P10\",\n  /**\n   * P15 Tier.\n   */\n  P15 = \"P15\",\n  /**\n   * P20 Tier.\n   */\n  P20 = \"P20\",\n  /**\n   * P30 Tier.\n   */\n  P30 = \"P30\",\n  /**\n   * P40 Tier.\n   */\n  P40 = \"P40\",\n  /**\n   * P50 Tier.\n   */\n  P50 = \"P50\",\n  /**\n   * P60 Tier.\n   */\n  P60 = \"P60\",\n  /**\n   * P70 Tier.\n   */\n  P70 = \"P70\",\n  /**\n   * P80 Tier.\n   */\n  P80 = \"P80\",\n}\n\nexport function toAccessTier(\n  tier: BlockBlobTier | PremiumPageBlobTier | string | undefined\n): AccessTier | undefined {\n  if (tier === undefined) {\n    return undefined;\n  }\n\n  return tier as AccessTier; // No more check if string is a valid AccessTier, and left this to underlay logic to decide(service).\n}\n\nexport function ensureCpkIfSpecified(cpk: CpkInfo | undefined, isHttps: boolean): void {\n  if (cpk && !isHttps) {\n    throw new RangeError(\"Customer-provided encryption key must be used over HTTPS.\");\n  }\n\n  if (cpk && !cpk.encryptionAlgorithm) {\n    cpk.encryptionAlgorithm = EncryptionAlgorithmAES25;\n  }\n}\n\n/**\n * Specifies the Replication Status of a blob. This is used when a storage account has\n * Object Replication Policy(s) applied. See {@link ObjectReplicationPolicy} and {@link ObjectReplicationRule}.\n */\nexport type ObjectReplicationStatus = \"complete\" | \"failed\";\n\n/**\n * Contains the Object Replication Rule ID and {@link ObjectReplicationStatus} of a blob.\n * There can be more than one {@link ObjectReplicationRule} under a {@link ObjectReplicationPolicy}.\n */\nexport interface ObjectReplicationRule {\n  /**\n   * The Object Replication Rule ID.\n   */\n  ruleId: string;\n\n  /**\n   * The Replication Status\n   */\n  replicationStatus: ObjectReplicationStatus;\n}\n\n/**\n * Contains Object Replication Policy ID and the respective list of {@link ObjectReplicationRule}.\n * This is used when retrieving the Object Replication Properties on the source blob. The policy id for the\n * destination blob is set in ObjectReplicationDestinationPolicyId of the respective method responses\n * (e.g. {@link BlobProperties.ObjectReplicationDestinationPolicyId}.\n */\nexport interface ObjectReplicationPolicy {\n  /**\n   * The Object Replication Policy ID.\n   */\n  policyId: string;\n\n  /**\n   * The Rule ID(s) and respective Replication Status(s) that are under the Policy ID.\n   */\n  rules: ObjectReplicationRule[];\n}\n\n/**\n * Contains response data for the {@link BlobClient.download} operation.\n */\nexport interface BlobDownloadResponseParsed extends BlobDownloadResponseModel {\n  /**\n   * Parsed Object Replication Policy Id, Rule Id(s) and status of the source blob.\n   */\n  objectReplicationSourceProperties?: ObjectReplicationPolicy[];\n\n  /**\n   * Object Replication Policy Id of the destination blob.\n   */\n  objectReplicationDestinationPolicyId?: string;\n}\n\n/**\n * The type of a {@link BlobQueryArrowField}.\n */\nexport type BlobQueryArrowFieldType =\n  | \"int64\"\n  | \"bool\"\n  | \"timestamp[ms]\"\n  | \"string\"\n  | \"double\"\n  | \"decimal\";\n\n/**\n * Describe a field in {@link BlobQueryArrowConfiguration}.\n */\nexport interface BlobQueryArrowField {\n  /**\n   * The type of the field.\n   */\n  type: BlobQueryArrowFieldType;\n\n  /**\n   * The name of the field.\n   */\n  name?: string;\n\n  /**\n   * The precision of the field. Required if type is \"decimal\".\n   */\n  precision?: number;\n\n  /**\n   * The scale of the field.  Required if type is is \"decimal\".\n   */\n  scale?: number;\n}\n\n/**\n * Describe immutable policy for blob.\n */\nexport interface BlobImmutabilityPolicy {\n  /**\n   * Specifies the date time when the blobs immutability policy is set to expire.\n   */\n  expiriesOn?: Date;\n  /**\n   * Specifies the immutability policy mode to set on the blob.\n   */\n  policyMode?: BlobImmutabilityPolicyMode;\n}\n\n/**\n * Represents authentication information in Authorization, ProxyAuthorization,\n * WWW-Authenticate, and Proxy-Authenticate header values.\n */\nexport interface HttpAuthorization {\n  /**\n   * The scheme to use for authorization.\n   */\n  scheme: string;\n\n  /**\n   * the credentials containing the authentication information of the user agent for the resource being requested.\n   */\n  value: string;\n}\n\n/**\n * Defines the known cloud audiences for Storage.\n */\nexport enum StorageBlobAudience {\n  /**\n   * The OAuth scope to use to retrieve an AAD token for Azure Storage.\n   */\n  StorageOAuthScopes = \"https://storage.azure.com/.default\",\n  /**\n   * The OAuth scope to use to retrieve an AAD token for Azure Disk.\n   */\n  DiskComputeOAuthScopes = \"https://disk.compute.azure.com/.default\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpResponse } from \"@azure/core-http\";\nimport {\n  PageBlobGetPageRangesHeaders,\n  PageBlobGetPageRangesDiffHeaders,\n  PageBlobGetPageRangesResponse as PageBlobGetPageRangesResponseModel,\n  PageBlobGetPageRangesDiffResponse as PageBlobGetPageRangesDiffResponseModel,\n} from \"./generatedModels\";\nimport { Range } from \"./Range\";\n\n/**\n * List of page ranges for a blob.\n */\nexport interface PageList {\n  /**\n   * Valid non-overlapping page ranges.\n   */\n  pageRange?: Range[];\n  /**\n   * Present if the prevSnapshot parameter was specified and there were cleared\n   * pages between the previous snapshot and the target snapshot.\n   */\n  clearRange?: Range[];\n}\n\n/**\n * Contains response data for the {@link BlobClient.getPageRanges} operation.\n */\nexport interface PageBlobGetPageRangesResponse extends PageList, PageBlobGetPageRangesHeaders {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: HttpResponse & {\n    /**\n     * The parsed HTTP response headers.\n     */\n    parsedHeaders: PageBlobGetPageRangesHeaders;\n\n    /**\n     * The response body as text (string format)\n     */\n    bodyAsText: string;\n\n    /**\n     * The response body as parsed JSON or XML\n     */\n    parsedBody: PageList;\n  };\n}\n\n/**\n * Contains response data for the {@link BlobClient.getPageRangesDiff} operation.\n */\nexport interface PageBlobGetPageRangesDiffResponse\n  extends PageList,\n    PageBlobGetPageRangesDiffHeaders {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: HttpResponse & {\n    /**\n     * The parsed HTTP response headers.\n     */\n    parsedHeaders: PageBlobGetPageRangesDiffHeaders;\n\n    /**\n     * The response body as text (string format)\n     */\n    bodyAsText: string;\n\n    /**\n     * The response body as parsed JSON or XML\n     */\n    parsedBody: PageList;\n  };\n}\n\n/**\n * Function that converts PageRange and ClearRange to a common Range object.\n * PageRange and ClearRange have start and end while Range offset and count\n * this function normalizes to Range.\n * @param response - Model PageBlob Range response\n */\nexport function rangeResponseFromModel(\n  response: PageBlobGetPageRangesResponseModel | PageBlobGetPageRangesDiffResponseModel\n): PageBlobGetPageRangesResponse | PageBlobGetPageRangesDiffResponse {\n  const pageRange = (response._response.parsedBody.pageRange || []).map((x) => ({\n    offset: x.start,\n    count: x.end - x.start,\n  }));\n\n  const clearRange = (response._response.parsedBody.clearRange || []).map((x) => ({\n    offset: x.start,\n    count: x.end - x.start,\n  }));\n\n  return {\n    ...response,\n    pageRange,\n    clearRange,\n    _response: {\n      ...response._response,\n      parsedBody: {\n        pageRange,\n        clearRange,\n      },\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay } from \"@azure/core-http\";\nimport { PollOperation, PollOperationState, Poller } from \"@azure/core-lro\";\nimport { BlobClient, BlobStartCopyFromURLOptions, BlobBeginCopyFromURLResponse } from \"../Clients\";\n\n/**\n * Defines the operations from a {@link BlobClient} that are needed for the poller\n * returned by {@link BlobClient.beginCopyFromURL} to work.\n */\nexport type CopyPollerBlobClient = Pick<BlobClient, \"abortCopyFromURL\" | \"getProperties\"> & {\n  startCopyFromURL(\n    copySource: string,\n    options?: BlobStartCopyFromURLOptions\n  ): Promise<BlobBeginCopyFromURLResponse>;\n};\n\n/**\n * The state used by the poller returned from {@link BlobClient.beginCopyFromURL}.\n *\n * This state is passed into the user-specified `onProgress` callback\n * whenever copy progress is detected.\n */\nexport interface BlobBeginCopyFromUrlPollState\n  extends PollOperationState<BlobBeginCopyFromURLResponse> {\n  /**\n   * The instance of {@link BlobClient} that was used when calling {@link BlobClient.beginCopyFromURL}.\n   */\n  readonly blobClient: CopyPollerBlobClient;\n  /**\n   * The copyId that identifies the in-progress blob copy.\n   */\n  copyId?: string;\n  /**\n   * the progress of the blob copy as reported by the service.\n   */\n  copyProgress?: string;\n  /**\n   * The source URL provided in {@link BlobClient.beginCopyFromURL}.\n   */\n  copySource: string;\n  /**\n   * The options that were passed to the initial {@link BlobClient.beginCopyFromURL} call.\n   * This is exposed for the poller and should not be modified directly.\n   */\n  readonly startCopyFromURLOptions?: BlobStartCopyFromURLOptions;\n}\n\n/**\n * The PollOperation responsible for:\n *  - performing the initial startCopyFromURL\n *  - checking the copy status via getProperties\n *  - cancellation via abortCopyFromURL\n * @hidden\n */\nexport interface BlobBeginCopyFromURLPollOperation\n  extends PollOperation<BlobBeginCopyFromUrlPollState, BlobBeginCopyFromURLResponse> {}\n\n/**\n * The set of options used to configure the poller.\n * This is an internal interface populated by {@link BlobClient.beginCopyFromURL}.\n *\n * @hidden\n */\nexport interface BlobBeginCopyFromUrlPollerOptions {\n  blobClient: CopyPollerBlobClient;\n  copySource: string;\n  intervalInMs?: number;\n  onProgress?: (state: BlobBeginCopyFromUrlPollState) => void;\n  resumeFrom?: string;\n  startCopyFromURLOptions?: BlobStartCopyFromURLOptions;\n}\n\n/**\n * This is the poller returned by {@link BlobClient.beginCopyFromURL}.\n * This can not be instantiated directly outside of this package.\n *\n * @hidden\n */\nexport class BlobBeginCopyFromUrlPoller extends Poller<\n  BlobBeginCopyFromUrlPollState,\n  BlobBeginCopyFromURLResponse\n> {\n  public intervalInMs: number;\n\n  constructor(options: BlobBeginCopyFromUrlPollerOptions) {\n    const {\n      blobClient,\n      copySource,\n      intervalInMs = 15000,\n      onProgress,\n      resumeFrom,\n      startCopyFromURLOptions,\n    } = options;\n\n    let state: BlobBeginCopyFromUrlPollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeBlobBeginCopyFromURLPollOperation({\n      ...state,\n      blobClient,\n      copySource,\n      startCopyFromURLOptions,\n    });\n\n    super(operation);\n\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n\n    this.intervalInMs = intervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.intervalInMs);\n  }\n}\n\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst cancel: BlobBeginCopyFromURLPollOperation[\"cancel\"] = async function cancel(\n  this: BlobBeginCopyFromURLPollOperation,\n  options = {}\n) {\n  const state = this.state;\n  const { copyId } = state;\n  if (state.isCompleted) {\n    return makeBlobBeginCopyFromURLPollOperation(state);\n  }\n\n  if (!copyId) {\n    state.isCancelled = true;\n    return makeBlobBeginCopyFromURLPollOperation(state);\n  }\n\n  // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call\n  await state.blobClient.abortCopyFromURL(copyId, {\n    abortSignal: options.abortSignal,\n  });\n  state.isCancelled = true;\n\n  return makeBlobBeginCopyFromURLPollOperation(state);\n};\n\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst update: BlobBeginCopyFromURLPollOperation[\"update\"] = async function update(\n  this: BlobBeginCopyFromURLPollOperation,\n  options = {}\n): Promise<BlobBeginCopyFromURLPollOperation> {\n  const state = this.state;\n  const { blobClient, copySource, startCopyFromURLOptions } = state;\n\n  if (!state.isStarted) {\n    state.isStarted = true;\n    const result = await blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);\n\n    // copyId is needed to abort\n    state.copyId = result.copyId;\n    if (result.copyStatus === \"success\") {\n      state.result = result;\n      state.isCompleted = true;\n    }\n  } else if (!state.isCompleted) {\n    try {\n      const result = await state.blobClient.getProperties({ abortSignal: options.abortSignal });\n      const { copyStatus, copyProgress } = result;\n      const prevCopyProgress = state.copyProgress;\n      if (copyProgress) {\n        state.copyProgress = copyProgress;\n      }\n      if (\n        copyStatus === \"pending\" &&\n        copyProgress !== prevCopyProgress &&\n        typeof options.fireProgress === \"function\"\n      ) {\n        // trigger in setTimeout, or swallow error?\n        options.fireProgress(state);\n      } else if (copyStatus === \"success\") {\n        state.result = result;\n        state.isCompleted = true;\n      } else if (copyStatus === \"failed\") {\n        state.error = new Error(\n          `Blob copy failed with reason: \"${result.copyStatusDescription || \"unknown\"}\"`\n        );\n        state.isCompleted = true;\n      }\n    } catch (err) {\n      state.error = err;\n      state.isCompleted = true;\n    }\n  }\n\n  return makeBlobBeginCopyFromURLPollOperation(state);\n};\n\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst toString: BlobBeginCopyFromURLPollOperation[\"toString\"] = function toString(\n  this: BlobBeginCopyFromURLPollOperation\n) {\n  return JSON.stringify({ state: this.state }, (key, value) => {\n    // remove blobClient from serialized state since a client can't be hydrated from this info.\n    if (key === \"blobClient\") {\n      return undefined;\n    }\n    return value;\n  });\n};\n\n/**\n * Creates a poll operation given the provided state.\n * @hidden\n */\nfunction makeBlobBeginCopyFromURLPollOperation(\n  state: BlobBeginCopyFromUrlPollState\n): BlobBeginCopyFromURLPollOperation {\n  return {\n    state: { ...state },\n    cancel,\n    toString,\n    update,\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PollOperation, PollOperationState } from \"./pollOperation\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\n\n/**\n * CancelOnProgress is used as the return value of a Poller's onProgress method.\n * When a user invokes onProgress, they're required to pass in a function that will be\n * called as a callback with the new data received each time the poll operation is updated.\n * onProgress returns a function that will prevent any further update to reach the original callback.\n */\nexport type CancelOnProgress = () => void;\n\n/**\n * PollProgressCallback<TState> is the type of the callback functions sent to onProgress.\n * These functions will receive a TState that is defined by your implementation of\n * the Poller class.\n */\nexport type PollProgressCallback<TState> = (state: TState) => void;\n\n/**\n * When a poller is manually stopped through the `stopPolling` method,\n * the poller will be rejected with an instance of the PollerStoppedError.\n */\nexport class PollerStoppedError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"PollerStoppedError\";\n    Object.setPrototypeOf(this, PollerStoppedError.prototype);\n  }\n}\n\n/**\n * When a poller is cancelled through the `cancelOperation` method,\n * the poller will be rejected with an instance of the PollerCancelledError.\n */\nexport class PollerCancelledError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"PollerCancelledError\";\n    Object.setPrototypeOf(this, PollerCancelledError.prototype);\n  }\n}\n\n/**\n * Abstract representation of a poller, intended to expose just the minimal API that the user needs to work with.\n */\n// eslint-disable-next-line no-use-before-define\nexport interface PollerLike<TState extends PollOperationState<TResult>, TResult> {\n  /**\n   * Returns a promise that will resolve once a single polling request finishes.\n   * It does this by calling the update method of the Poller's operation.\n   */\n  poll(options?: { abortSignal?: AbortSignalLike }): Promise<void>;\n  /**\n   * Returns a promise that will resolve once the underlying operation is completed.\n   */\n  pollUntilDone(): Promise<TResult>;\n  /**\n   * Invokes the provided callback after each polling is completed,\n   * sending the current state of the poller's operation.\n   *\n   * It returns a method that can be used to stop receiving updates on the given callback function.\n   */\n  onProgress(callback: (state: TState) => void): CancelOnProgress;\n  /**\n   * Returns true if the poller has finished polling.\n   */\n  isDone(): boolean;\n  /**\n   * Stops the poller. After this, no manual or automated requests can be sent.\n   */\n  stopPolling(): void;\n  /**\n   * Returns true if the poller is stopped.\n   */\n  isStopped(): boolean;\n  /**\n   * Attempts to cancel the underlying operation.\n   */\n  cancelOperation(options?: { abortSignal?: AbortSignalLike }): Promise<void>;\n  /**\n   * Returns the state of the operation.\n   * The TState defined in PollerLike can be a subset of the TState defined in\n   * the Poller implementation.\n   */\n  getOperationState(): TState;\n  /**\n   * Returns the result value of the operation,\n   * regardless of the state of the poller.\n   * It can return undefined or an incomplete form of the final TResult value\n   * depending on the implementation.\n   */\n  getResult(): TResult | undefined;\n  /**\n   * Returns a serialized version of the poller's operation\n   * by invoking the operation's toString method.\n   */\n  toString(): string;\n}\n\n/**\n * A class that represents the definition of a program that polls through consecutive requests\n * until it reaches a state of completion.\n *\n * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.\n * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.\n * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.\n *\n * ```ts\n * const poller = new MyPoller();\n *\n * // Polling just once:\n * await poller.poll();\n *\n * // We can try to cancel the request here, by calling:\n * //\n * //     await poller.cancelOperation();\n * //\n *\n * // Getting the final result:\n * const result = await poller.pollUntilDone();\n * ```\n *\n * The Poller is defined by two types, a type representing the state of the poller, which\n * must include a basic set of properties from `PollOperationState<TResult>`,\n * and a return type defined by `TResult`, which can be anything.\n *\n * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having\n * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.\n *\n * ```ts\n * class Client {\n *   public async makePoller: PollerLike<MyOperationState, MyResult> {\n *     const poller = new MyPoller({});\n *     // It might be preferred to return the poller after the first request is made,\n *     // so that some information can be obtained right away.\n *     await poller.poll();\n *     return poller;\n *   }\n * }\n *\n * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();\n * ```\n *\n * A poller can be created through its constructor, then it can be polled until it's completed.\n * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.\n * At any point in time, the intermediate forms of the result type can be requested without delay.\n * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.\n *\n * ```ts\n * const poller = myClient.makePoller();\n * const state: MyOperationState = poller.getOperationState();\n *\n * // The intermediate result can be obtained at any time.\n * const result: MyResult | undefined = poller.getResult();\n *\n * // The final result can only be obtained after the poller finishes.\n * const result: MyResult = await poller.pollUntilDone();\n * ```\n *\n */\n// eslint-disable-next-line no-use-before-define\nexport abstract class Poller<TState extends PollOperationState<TResult>, TResult>\n  implements PollerLike<TState, TResult>\n{\n  private stopped: boolean = true;\n  private resolve?: (value: TResult) => void;\n  private reject?: (error: PollerStoppedError | PollerCancelledError | Error) => void;\n  private pollOncePromise?: Promise<void>;\n  private cancelPromise?: Promise<void>;\n  private promise: Promise<TResult>;\n  private pollProgressCallbacks: PollProgressCallback<TState>[] = [];\n\n  /**\n   * The poller's operation is available in full to any of the methods of the Poller class\n   * and any class extending the Poller class.\n   */\n  protected operation: PollOperation<TState, TResult>;\n\n  /**\n   * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.\n   *\n   * When writing an implementation of a Poller, this implementation needs to deal with the initialization\n   * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's\n   * operation has already been defined, at least its basic properties. The code below shows how to approach\n   * the definition of the constructor of a new custom poller.\n   *\n   * ```ts\n   * export class MyPoller extends Poller<MyOperationState, string> {\n   *   constructor({\n   *     // Anything you might need outside of the basics\n   *   }) {\n   *     let state: MyOperationState = {\n   *       privateProperty: private,\n   *       publicProperty: public,\n   *     };\n   *\n   *     const operation = {\n   *       state,\n   *       update,\n   *       cancel,\n   *       toString\n   *     }\n   *\n   *     // Sending the operation to the parent's constructor.\n   *     super(operation);\n   *\n   *     // You can assign more local properties here.\n   *   }\n   * }\n   * ```\n   *\n   * Inside of this constructor, a new promise is created. This will be used to\n   * tell the user when the poller finishes (see `pollUntilDone()`). The promise's\n   * resolve and reject methods are also used internally to control when to resolve\n   * or reject anyone waiting for the poller to finish.\n   *\n   * The constructor of a custom implementation of a poller is where any serialized version of\n   * a previous poller's operation should be deserialized into the operation sent to the\n   * base constructor. For example:\n   *\n   * ```ts\n   * export class MyPoller extends Poller<MyOperationState, string> {\n   *   constructor(\n   *     baseOperation: string | undefined\n   *   ) {\n   *     let state: MyOperationState = {};\n   *     if (baseOperation) {\n   *       state = {\n   *         ...JSON.parse(baseOperation).state,\n   *         ...state\n   *       };\n   *     }\n   *     const operation = {\n   *       state,\n   *       // ...\n   *     }\n   *     super(operation);\n   *   }\n   * }\n   * ```\n   *\n   * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.\n   */\n  constructor(operation: PollOperation<TState, TResult>) {\n    this.operation = operation;\n    this.promise = new Promise<TResult>(\n      (\n        resolve: (result: TResult) => void,\n        reject: (error: PollerStoppedError | PollerCancelledError | Error) => void\n      ) => {\n        this.resolve = resolve;\n        this.reject = reject;\n      }\n    );\n    // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.\n    // The above warning would get thrown if `poller.poll` is called, it returns an error,\n    // and pullUntilDone did not have a .catch or await try/catch on it's return value.\n    this.promise.catch(() => {\n      /* intentionally blank */\n    });\n  }\n\n  /**\n   * Defines how much to wait between each poll request.\n   * This has to be implemented by your custom poller.\n   *\n   * \\@azure/core-http has a simple implementation of a delay function that waits as many milliseconds as specified.\n   * This can be used as follows:\n   *\n   * ```ts\n   * import { delay } from \"@azure/core-http\";\n   *\n   * export class MyPoller extends Poller<MyOperationState, string> {\n   *   // The other necessary definitions.\n   *\n   *   async delay(): Promise<void> {\n   *     const milliseconds = 1000;\n   *     return delay(milliseconds);\n   *   }\n   * }\n   * ```\n   *\n   */\n  protected abstract delay(): Promise<void>;\n\n  /**\n   * Starts a loop that will break only if the poller is done\n   * or if the poller is stopped.\n   */\n  private async startPolling(): Promise<void> {\n    if (this.stopped) {\n      this.stopped = false;\n    }\n    while (!this.isStopped() && !this.isDone()) {\n      await this.poll();\n      await this.delay();\n    }\n  }\n\n  /**\n   * pollOnce does one polling, by calling to the update method of the underlying\n   * poll operation to make any relevant change effective.\n   *\n   * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n   *\n   * @param options - Optional properties passed to the operation's update method.\n   */\n  private async pollOnce(options: { abortSignal?: AbortSignalLike } = {}): Promise<void> {\n    try {\n      if (!this.isDone()) {\n        this.operation = await this.operation.update({\n          abortSignal: options.abortSignal,\n          fireProgress: this.fireProgress.bind(this),\n        });\n        if (this.isDone() && this.resolve) {\n          // If the poller has finished polling, this means we now have a result.\n          // However, it can be the case that TResult is instantiated to void, so\n          // we are not expecting a result anyway. To assert that we might not\n          // have a result eventually after finishing polling, we cast the result\n          // to TResult.\n          this.resolve(this.operation.state.result as TResult);\n        }\n      }\n    } catch (e) {\n      this.operation.state.error = e;\n      if (this.reject) {\n        this.reject(e);\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * fireProgress calls the functions passed in via onProgress the method of the poller.\n   *\n   * It loops over all of the callbacks received from onProgress, and executes them, sending them\n   * the current operation state.\n   *\n   * @param state - The current operation state.\n   */\n  private fireProgress(state: TState): void {\n    for (const callback of this.pollProgressCallbacks) {\n      callback(state);\n    }\n  }\n\n  /**\n   * Invokes the underlying operation's cancel method, and rejects the\n   * pollUntilDone promise.\n   */\n  private async cancelOnce(options: { abortSignal?: AbortSignalLike } = {}): Promise<void> {\n    this.operation = await this.operation.cancel(options);\n    if (this.reject) {\n      this.reject(new PollerCancelledError(\"Poller cancelled\"));\n    }\n  }\n\n  /**\n   * Returns a promise that will resolve once a single polling request finishes.\n   * It does this by calling the update method of the Poller's operation.\n   *\n   * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n   *\n   * @param options - Optional properties passed to the operation's update method.\n   */\n  public poll(options: { abortSignal?: AbortSignalLike } = {}): Promise<void> {\n    if (!this.pollOncePromise) {\n      this.pollOncePromise = this.pollOnce(options);\n      const clearPollOncePromise = (): void => {\n        this.pollOncePromise = undefined;\n      };\n      this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);\n    }\n    return this.pollOncePromise;\n  }\n\n  /**\n   * Returns a promise that will resolve once the underlying operation is completed.\n   */\n  public async pollUntilDone(): Promise<TResult> {\n    if (this.stopped) {\n      this.startPolling().catch(this.reject);\n    }\n    return this.promise;\n  }\n\n  /**\n   * Invokes the provided callback after each polling is completed,\n   * sending the current state of the poller's operation.\n   *\n   * It returns a method that can be used to stop receiving updates on the given callback function.\n   */\n  public onProgress(callback: (state: TState) => void): CancelOnProgress {\n    this.pollProgressCallbacks.push(callback);\n    return (): void => {\n      this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c) => c !== callback);\n    };\n  }\n\n  /**\n   * Returns true if the poller has finished polling.\n   */\n  public isDone(): boolean {\n    const state: PollOperationState<TResult> = this.operation.state;\n    return Boolean(state.isCompleted || state.isCancelled || state.error);\n  }\n\n  /**\n   * Stops the poller from continuing to poll.\n   */\n  public stopPolling(): void {\n    if (!this.stopped) {\n      this.stopped = true;\n      if (this.reject) {\n        this.reject(new PollerStoppedError(\"This poller is already stopped\"));\n      }\n    }\n  }\n\n  /**\n   * Returns true if the poller is stopped.\n   */\n  public isStopped(): boolean {\n    return this.stopped;\n  }\n\n  /**\n   * Attempts to cancel the underlying operation.\n   *\n   * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n   *\n   * If it's called again before it finishes, it will throw an error.\n   *\n   * @param options - Optional properties passed to the operation's update method.\n   */\n  public cancelOperation(options: { abortSignal?: AbortSignalLike } = {}): Promise<void> {\n    if (!this.stopped) {\n      this.stopped = true;\n    }\n    if (!this.cancelPromise) {\n      this.cancelPromise = this.cancelOnce(options);\n    } else if (options.abortSignal) {\n      throw new Error(\"A cancel request is currently pending\");\n    }\n    return this.cancelPromise;\n  }\n\n  /**\n   * Returns the state of the operation.\n   *\n   * Even though TState will be the same type inside any of the methods of any extension of the Poller class,\n   * implementations of the pollers can customize what's shared with the public by writing their own\n   * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller\n   * and a public type representing a safe to share subset of the properties of the internal state.\n   * Their definition of getOperationState can then return their public type.\n   *\n   * Example:\n   *\n   * ```ts\n   * // Let's say we have our poller's operation state defined as:\n   * interface MyOperationState extends PollOperationState<ResultType> {\n   *   privateProperty?: string;\n   *   publicProperty?: string;\n   * }\n   *\n   * // To allow us to have a true separation of public and private state, we have to define another interface:\n   * interface PublicState extends PollOperationState<ResultType> {\n   *   publicProperty?: string;\n   * }\n   *\n   * // Then, we define our Poller as follows:\n   * export class MyPoller extends Poller<MyOperationState, ResultType> {\n   *   // ... More content is needed here ...\n   *\n   *   public getOperationState(): PublicState {\n   *     const state: PublicState = this.operation.state;\n   *     return {\n   *       // Properties from PollOperationState<TResult>\n   *       isStarted: state.isStarted,\n   *       isCompleted: state.isCompleted,\n   *       isCancelled: state.isCancelled,\n   *       error: state.error,\n   *       result: state.result,\n   *\n   *       // The only other property needed by PublicState.\n   *       publicProperty: state.publicProperty\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * You can see this in the tests of this repository, go to the file:\n   * `../test/utils/testPoller.ts`\n   * and look for the getOperationState implementation.\n   */\n  public getOperationState(): TState {\n    return this.operation.state;\n  }\n\n  /**\n   * Returns the result value of the operation,\n   * regardless of the state of the poller.\n   * It can return undefined or an incomplete form of the final TResult value\n   * depending on the implementation.\n   */\n  public getResult(): TResult | undefined {\n    const state: PollOperationState<TResult> = this.operation.state;\n    return state.result;\n  }\n\n  /**\n   * Returns a serialized version of the poller's operation\n   * by invoking the operation's toString method.\n   */\n  public toString(): string {\n    return this.operation.toString();\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Range for Blob Service Operations.\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-the-range-header-for-blob-service-operations\n */\nexport interface Range {\n  /**\n   * StartByte, larger than or equal 0.\n   */\n  offset: number;\n  /**\n   * Optional. Count of bytes, larger than 0.\n   * If not provided, will return bytes from offset to the end.\n   */\n  count?: number;\n}\n\n/**\n * Generate a range string. For example:\n *\n * \"bytes=255-\" or \"bytes=0-511\"\n *\n * @param iRange -\n */\nexport function rangeToString(iRange: Range): string {\n  if (iRange.offset < 0) {\n    throw new RangeError(`Range.offset cannot be smaller than 0.`);\n  }\n  if (iRange.count && iRange.count <= 0) {\n    throw new RangeError(\n      `Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.`\n    );\n  }\n  return iRange.count\n    ? `bytes=${iRange.offset}-${iRange.offset + iRange.count - 1}`\n    : `bytes=${iRange.offset}-`;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// In browser, during webpack or browserify bundling, this module will be replaced by 'events'\n// https://github.com/Gozala/events\nimport { EventEmitter } from \"events\";\n\n/**\n * Operation is an async function to be executed and managed by Batch.\n */\nexport declare type Operation = () => Promise<any>;\n\n/**\n * States for Batch.\n */\nenum BatchStates {\n  Good,\n  Error,\n}\n\n/**\n * Batch provides basic parallel execution with concurrency limits.\n * Will stop execute left operations when one of the executed operation throws an error.\n * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.\n */\nexport class Batch {\n  /**\n   * Concurrency. Must be lager than 0.\n   */\n  private concurrency: number;\n\n  /**\n   * Number of active operations under execution.\n   */\n  private actives: number = 0;\n\n  /**\n   * Number of completed operations under execution.\n   */\n  private completed: number = 0;\n\n  /**\n   * Offset of next operation to be executed.\n   */\n  private offset: number = 0;\n\n  /**\n   * Operation array to be executed.\n   */\n  private operations: Operation[] = [];\n\n  /**\n   * States of Batch. When an error happens, state will turn into error.\n   * Batch will stop execute left operations.\n   */\n  private state: BatchStates = BatchStates.Good;\n\n  /**\n   * A private emitter used to pass events inside this class.\n   */\n  private emitter: EventEmitter;\n\n  /**\n   * Creates an instance of Batch.\n   * @param concurrency -\n   */\n  public constructor(concurrency: number = 5) {\n    if (concurrency < 1) {\n      throw new RangeError(\"concurrency must be larger than 0\");\n    }\n    this.concurrency = concurrency;\n    this.emitter = new EventEmitter();\n  }\n\n  /**\n   * Add a operation into queue.\n   *\n   * @param operation -\n   */\n  public addOperation(operation: Operation): void {\n    this.operations.push(async () => {\n      try {\n        this.actives++;\n        await operation();\n        this.actives--;\n        this.completed++;\n        this.parallelExecute();\n      } catch (error) {\n        this.emitter.emit(\"error\", error);\n      }\n    });\n  }\n\n  /**\n   * Start execute operations in the queue.\n   *\n   */\n  public async do(): Promise<void> {\n    if (this.operations.length === 0) {\n      return Promise.resolve();\n    }\n\n    this.parallelExecute();\n\n    return new Promise<void>((resolve, reject) => {\n      this.emitter.on(\"finish\", resolve);\n\n      this.emitter.on(\"error\", (error) => {\n        this.state = BatchStates.Error;\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Get next operation to be executed. Return null when reaching ends.\n   *\n   */\n  private nextOperation(): Operation | null {\n    if (this.offset < this.operations.length) {\n      return this.operations[this.offset++];\n    }\n    return null;\n  }\n\n  /**\n   * Start execute operations. One one the most important difference between\n   * this method with do() is that do() wraps as an sync method.\n   *\n   */\n  private parallelExecute(): void {\n    if (this.state === BatchStates.Error) {\n      return;\n    }\n\n    if (this.completed >= this.operations.length) {\n      this.emitter.emit(\"finish\");\n      return;\n    }\n\n    while (this.actives < this.concurrency) {\n      const operation = this.nextOperation();\n      if (operation) {\n        operation();\n      } else {\n        return;\n      }\n    }\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// This file is used as a shim of \"BufferScheduler\" for some browser bundlers\n// when trying to bundle \"BufferScheduler\"\n// \"BufferScheduler\" class is only available in Node.js runtime\nexport class BufferScheduler {}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Convert a Browser Blob object into ArrayBuffer.\n *\n * @param blob -\n */\nexport async function blobToArrayBuffer(blob: Blob): Promise<ArrayBuffer> {\n  const fileReader = new FileReader();\n  return new Promise<ArrayBuffer>((resolve, reject) => {\n    fileReader.onloadend = (ev: any) => {\n      resolve(ev.target!.result);\n    };\n    fileReader.onerror = reject;\n    fileReader.readAsArrayBuffer(blob);\n  });\n}\n\n/**\n * Convert a Browser Blob object into string.\n *\n * @param blob -\n */\nexport async function blobToString(blob: Blob): Promise<string> {\n  const fileReader = new FileReader();\n  return new Promise<string>((resolve, reject) => {\n    fileReader.onloadend = (ev: any) => {\n      resolve(ev.target!.result);\n    };\n    fileReader.onerror = reject;\n    fileReader.readAsText(blob);\n  });\n}\n\nexport function streamToBuffer(): void {\n  /* empty */\n}\n\nexport function streamToBuffer2(): void {\n  /* empty */\n}\n\nexport function readStreamToLocalFile(): void {\n  /* empty */\n}\n\nexport const fsStat = function stat(): void {\n  /* empty */\n};\n\nexport const fsCreateReadStream = function createReadStream(): void {\n  /* empty */\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AccessTier,\n  ServiceSubmitBatchHeaders,\n  ServiceSubmitBatchOptionalParamsModel,\n  ServiceSubmitBatchResponseModel,\n} from \"./generatedModels\";\nimport { ParsedBatchResponse } from \"./BatchResponse\";\nimport { BatchResponseParser } from \"./BatchResponseParser\";\nimport { utf8ByteLength } from \"./BatchUtils\";\nimport { BlobBatch } from \"./BlobBatch\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { HttpResponse, TokenCredential } from \"@azure/core-http\";\nimport { Service, Container } from \"./generated/src/operations\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { BlobDeleteOptions, BlobClient, BlobSetTierOptions } from \"./Clients\";\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { PipelineLike, StoragePipelineOptions, newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { getURLPath } from \"./utils/utils.common\";\n\n/**\n * Options to configure the Service - Submit Batch Optional Params.\n */\nexport interface BlobBatchSubmitBatchOptionalParams extends ServiceSubmitBatchOptionalParamsModel {}\n\n/**\n * Contains response data for blob batch operations.\n */\nexport declare type BlobBatchSubmitBatchResponse = ParsedBatchResponse &\n  ServiceSubmitBatchHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: ServiceSubmitBatchHeaders;\n    };\n  };\n\n/**\n * Contains response data for the {@link deleteBlobs} operation.\n */\nexport declare type BlobBatchDeleteBlobsResponse = BlobBatchSubmitBatchResponse;\n\n/**\n * Contains response data for the {@link setBlobsAccessTier} operation.\n */\nexport declare type BlobBatchSetBlobsAccessTierResponse = BlobBatchSubmitBatchResponse;\n\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\nexport class BlobBatchClient {\n  private serviceOrContainerContext: Service | Container;\n\n  /**\n   * Creates an instance of BlobBatchClient.\n   *\n   * @param url - A url pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Options to configure the HTTP pipeline.\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  );\n\n  /**\n   * Creates an instance of BlobBatchClient.\n   *\n   * @param url - A url pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: PipelineLike);\n  constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | PipelineLike,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: PipelineLike;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (!credentialOrPipeline) {\n      // no credential provided\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    }\n\n    const storageClientContext = new StorageClientContext(url, pipeline.toServiceClientOptions());\n\n    const path = getURLPath(url);\n    if (path && path !== \"/\") {\n      // Container scoped.\n      this.serviceOrContainerContext = new Container(storageClientContext);\n    } else {\n      this.serviceOrContainerContext = new Service(storageClientContext);\n    }\n  }\n\n  /**\n   * Creates a {@link BlobBatch}.\n   * A BlobBatch represents an aggregated set of operations on blobs.\n   */\n  public createBatch(): BlobBatch {\n    return new BlobBatch();\n  }\n\n  /**\n   * Create multiple delete operations to mark the specified blobs or snapshots for deletion.\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).\n   * The operations will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param urls - The urls of the blob resources to delete.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options -\n   */\n  public async deleteBlobs(\n    urls: string[],\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse>;\n\n  /**\n   * Create multiple delete operations to mark the specified blobs or snapshots for deletion.\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).\n   * The operation(subrequest) will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClients - The BlobClients for the blobs to delete.\n   * @param options -\n   */\n  public async deleteBlobs(\n    blobClients: BlobClient[],\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse>;\n\n  public async deleteBlobs(\n    urlsOrBlobClients: string[] | BlobClient[],\n    credentialOrOptions:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | BlobDeleteOptions\n      | undefined,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions\n  ): Promise<BlobBatchDeleteBlobsResponse> {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions as TokenCredential, options);\n      } else {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions as BlobDeleteOptions);\n      }\n    }\n    return this.submitBatch(batch);\n  }\n\n  /**\n   * Create multiple set tier operations to set the tier on a blob.\n   * The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * See [set blob tier details](https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier).\n   * The operation(subrequest) will be authenticated and authorized\n   * with specified credential.See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param urls - The urls of the blob resource to delete.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobsAccessTier(\n    urls: string[],\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    tier: AccessTier,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse>;\n\n  /**\n   * Create multiple set tier operations to set the tier on a blob.\n   * The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * See [set blob tier details](https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier).\n   * The operation(subrequest) will be authenticated and authorized\n   * with specified credential.See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClients - The BlobClients for the blobs which should have a new tier set.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobsAccessTier(\n    blobClients: BlobClient[],\n    tier: AccessTier,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse>;\n\n  public async setBlobsAccessTier(\n    urlsOrBlobClients: string[] | BlobClient[],\n    credentialOrTier:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | AccessTier,\n    tierOrOptions?: AccessTier | BlobSetTierOptions,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions\n  ): Promise<BlobBatchSetBlobsAccessTierResponse> {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.setBlobAccessTier(\n          urlOrBlobClient,\n          credentialOrTier as TokenCredential,\n          tierOrOptions as AccessTier,\n          options\n        );\n      } else {\n        await batch.setBlobAccessTier(\n          urlOrBlobClient,\n          credentialOrTier as AccessTier,\n          tierOrOptions as BlobSetTierOptions\n        );\n      }\n    }\n    return this.submitBatch(batch);\n  }\n\n  /**\n   * Submit batch request which consists of multiple subrequests.\n   *\n   * Get `blobBatchClient` and other details before running the snippets.\n   * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n   *\n   * Example usage:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.deleteBlob(urlInString0, credential0);\n   * await batchRequest.deleteBlob(urlInString1, credential1, {\n   *  deleteSnapshots: \"include\"\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * Example using a lease:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n   * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n   *  conditions: { leaseId: leaseId }\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   *\n   * @param batchRequest - A set of Delete or SetTier operations.\n   * @param options -\n   */\n  public async submitBatch(\n    batchRequest: BlobBatch,\n    options: BlobBatchSubmitBatchOptionalParams = {}\n  ): Promise<BlobBatchSubmitBatchResponse> {\n    if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n      throw new RangeError(\"Batch request should contain one or more sub requests.\");\n    }\n\n    const { span, updatedOptions } = createSpan(\"BlobBatchClient-submitBatch\", options);\n    try {\n      const batchRequestBody = batchRequest.getHttpRequestBody();\n\n      // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n      const rawBatchResponse: ServiceSubmitBatchResponseModel =\n        await this.serviceOrContainerContext.submitBatch(\n          utf8ByteLength(batchRequestBody),\n          batchRequest.getMultiPartContentType(),\n          batchRequestBody,\n          {\n            ...options,\n            ...convertTracingToRequestOptionsBase(updatedOptions),\n          }\n        );\n\n      // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n      const batchResponseParser = new BatchResponseParser(\n        rawBatchResponse,\n        batchRequest.getSubRequests()\n      );\n      const responseSummary = await batchResponseParser.parseBatchResponse();\n\n      const res: BlobBatchSubmitBatchResponse = {\n        _response: rawBatchResponse._response,\n        contentType: rawBatchResponse.contentType,\n        errorCode: rawBatchResponse.errorCode,\n        requestId: rawBatchResponse.requestId,\n        clientRequestId: rawBatchResponse.clientRequestId,\n        version: rawBatchResponse.version,\n        subResponses: responseSummary.subResponses,\n        subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n        subResponsesFailedCount: responseSummary.subResponsesFailedCount,\n      };\n\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpHeaders } from \"@azure/core-http\";\n\nimport { ServiceSubmitBatchResponseModel } from \"./generatedModels\";\nimport {\n  HTTP_VERSION_1_1,\n  HTTP_LINE_ENDING,\n  HeaderConstants,\n  HTTPURLConnection,\n} from \"./utils/constants\";\nimport { getBodyAsText } from \"./BatchUtils\";\nimport { BatchSubRequest } from \"./BlobBatch\";\nimport { BatchSubResponse, ParsedBatchResponse } from \"./BatchResponse\";\nimport { logger } from \"./log\";\n\nconst HTTP_HEADER_DELIMITER = \": \";\nconst SPACE_DELIMITER = \" \";\nconst NOT_FOUND = -1;\n\n/**\n * Util class for parsing batch response.\n */\nexport class BatchResponseParser {\n  private readonly batchResponse: ServiceSubmitBatchResponseModel;\n  private readonly responseBatchBoundary: string;\n  private readonly perResponsePrefix: string;\n  private readonly batchResponseEnding: string;\n  private readonly subRequests: Map<number, BatchSubRequest>;\n\n  constructor(\n    batchResponse: ServiceSubmitBatchResponseModel,\n    subRequests: Map<number, BatchSubRequest>\n  ) {\n    if (!batchResponse || !batchResponse.contentType) {\n      // In special case(reported), server may return invalid content-type which could not be parsed.\n      throw new RangeError(\"batchResponse is malformed or doesn't contain valid content-type.\");\n    }\n\n    if (!subRequests || subRequests.size === 0) {\n      // This should be prevent during coding.\n      throw new RangeError(\"Invalid state: subRequests is not provided or size is 0.\");\n    }\n\n    this.batchResponse = batchResponse;\n    this.subRequests = subRequests;\n    this.responseBatchBoundary = this.batchResponse.contentType!.split(\"=\")[1];\n    this.perResponsePrefix = `--${this.responseBatchBoundary}${HTTP_LINE_ENDING}`;\n    this.batchResponseEnding = `--${this.responseBatchBoundary}--`;\n  }\n\n  // For example of response, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#response\n  public async parseBatchResponse(): Promise<ParsedBatchResponse> {\n    // When logic reach here, suppose batch request has already succeeded with 202, so we can further parse\n    // sub request's response.\n    if (this.batchResponse._response.status !== HTTPURLConnection.HTTP_ACCEPTED) {\n      throw new Error(\n        `Invalid state: batch request failed with status: '${this.batchResponse._response.status}'.`\n      );\n    }\n\n    const responseBodyAsText = await getBodyAsText(this.batchResponse);\n\n    const subResponses = responseBodyAsText\n      .split(this.batchResponseEnding)[0] // string after ending is useless\n      .split(this.perResponsePrefix)\n      .slice(1); // string before first response boundary is useless\n    const subResponseCount = subResponses.length;\n\n    // Defensive coding in case of potential error parsing.\n    // Note: subResponseCount == 1 is special case where sub request is invalid.\n    // We try to prevent such cases through early validation, e.g. validate sub request count >= 1.\n    // While in unexpected sub request invalid case, we allow sub response to be parsed and return to user.\n    if (subResponseCount !== this.subRequests.size && subResponseCount !== 1) {\n      throw new Error(\"Invalid state: sub responses' count is not equal to sub requests' count.\");\n    }\n\n    const deserializedSubResponses: Array<BatchSubResponse> = new Array(subResponseCount);\n    let subResponsesSucceededCount: number = 0;\n    let subResponsesFailedCount: number = 0;\n\n    // Parse sub subResponses.\n    for (let index = 0; index < subResponseCount; index++) {\n      const subResponse = subResponses[index];\n      const deserializedSubResponse = {} as BatchSubResponse;\n      deserializedSubResponse.headers = new HttpHeaders();\n\n      const responseLines = subResponse.split(`${HTTP_LINE_ENDING}`);\n      let subRespHeaderStartFound = false;\n      let subRespHeaderEndFound = false;\n      let subRespFailed = false;\n      let contentId = NOT_FOUND;\n\n      for (const responseLine of responseLines) {\n        if (!subRespHeaderStartFound) {\n          // Convention line to indicate content ID\n          if (responseLine.startsWith(HeaderConstants.CONTENT_ID)) {\n            contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);\n          }\n\n          // Http version line with status code indicates the start of sub request's response.\n          // Example: HTTP/1.1 202 Accepted\n          if (responseLine.startsWith(HTTP_VERSION_1_1)) {\n            subRespHeaderStartFound = true;\n\n            const tokens = responseLine.split(SPACE_DELIMITER);\n            deserializedSubResponse.status = parseInt(tokens[1]);\n            deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);\n          }\n\n          continue; // Skip convention headers not specifically for sub request i.e. Content-Type: application/http and Content-ID: *\n        }\n\n        if (responseLine.trim() === \"\") {\n          // Sub response's header start line already found, and the first empty line indicates header end line found.\n          if (!subRespHeaderEndFound) {\n            subRespHeaderEndFound = true;\n          }\n\n          continue; // Skip empty line\n        }\n\n        // Note: when code reach here, it indicates subRespHeaderStartFound == true\n        if (!subRespHeaderEndFound) {\n          if (responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1) {\n            // Defensive coding to prevent from missing valuable lines.\n            throw new Error(\n              `Invalid state: find non-empty line '${responseLine}' without HTTP header delimiter '${HTTP_HEADER_DELIMITER}'.`\n            );\n          }\n\n          // Parse headers of sub response.\n          const tokens = responseLine.split(HTTP_HEADER_DELIMITER);\n          deserializedSubResponse.headers.set(tokens[0], tokens[1]);\n          if (tokens[0] === HeaderConstants.X_MS_ERROR_CODE) {\n            deserializedSubResponse.errorCode = tokens[1];\n            subRespFailed = true;\n          }\n        } else {\n          // Assemble body of sub response.\n          if (!deserializedSubResponse.bodyAsText) {\n            deserializedSubResponse.bodyAsText = \"\";\n          }\n\n          deserializedSubResponse.bodyAsText += responseLine;\n        }\n      } // Inner for end\n\n      // The response will contain the Content-ID header for each corresponding subrequest response to use for tracking.\n      // The Content-IDs are set to a valid index in the subrequests we sent. In the status code 202 path, we could expect it\n      // to be 1-1 mapping from the [0, subRequests.size) to the Content-IDs returned. If not, we simply don't return that\n      // unexpected subResponse in the parsed reponse and we can always look it up in the raw response for debugging purpose.\n      if (\n        contentId !== NOT_FOUND &&\n        Number.isInteger(contentId) &&\n        contentId >= 0 &&\n        contentId < this.subRequests.size &&\n        deserializedSubResponses[contentId] === undefined\n      ) {\n        deserializedSubResponse._request = this.subRequests.get(contentId)!;\n        deserializedSubResponses[contentId] = deserializedSubResponse;\n      } else {\n        logger.error(\n          `subResponses[${index}] is dropped as the Content-ID is not found or invalid, Content-ID: ${contentId}`\n        );\n      }\n\n      if (subRespFailed) {\n        subResponsesFailedCount++;\n      } else {\n        subResponsesSucceededCount++;\n      }\n    }\n\n    return {\n      subResponses: deserializedSubResponses,\n      subResponsesSucceededCount: subResponsesSucceededCount,\n      subResponsesFailedCount: subResponsesFailedCount,\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ServiceSubmitBatchResponseModel } from \"./generatedModels\";\nimport { blobToString } from \"./utils/utils.browser\";\n\nexport async function getBodyAsText(\n  batchResponse: ServiceSubmitBatchResponseModel\n): Promise<string> {\n  const blob = (await batchResponse.blobBody) as Blob;\n  return blobToString(blob);\n}\n\nexport function utf8ByteLength(str: string): number {\n  return new Blob([str]).size;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  deserializationPolicy,\n  generateUuid,\n  HttpHeaders,\n  HttpOperationResponse,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  WebResource,\n  TokenCredential,\n  isTokenCredential,\n  bearerTokenAuthenticationPolicy,\n  isNode,\n} from \"@azure/core-http\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { BlobClient, BlobDeleteOptions, BlobSetTierOptions } from \"./Clients\";\nimport { AccessTier } from \"./generatedModels\";\nimport { Mutex } from \"./utils/Mutex\";\nimport { Pipeline } from \"./Pipeline\";\nimport { attachCredential, getURLPath, getURLPathAndQuery, iEqual } from \"./utils/utils.common\";\nimport {\n  HeaderConstants,\n  BATCH_MAX_REQUEST,\n  HTTP_VERSION_1_1,\n  HTTP_LINE_ENDING,\n  StorageOAuthScopes,\n} from \"./utils/constants\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { createSpan } from \"./utils/tracing\";\n\n/**\n * A request associated with a batch operation.\n */\nexport interface BatchSubRequest {\n  /**\n   * The URL of the resource to request operation.\n   */\n  url: string;\n\n  /**\n   * The credential used for sub request.\n   * Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service.\n   * You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   */\n  credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n}\n\n/**\n * A BlobBatch represents an aggregated set of operations on blobs.\n * Currently, only `delete` and `setAccessTier` are supported.\n */\nexport class BlobBatch {\n  private batchRequest: InnerBatchRequest;\n  private readonly batch: string = \"batch\";\n  private batchType: \"delete\" | \"setAccessTier\" | undefined;\n\n  constructor() {\n    this.batchRequest = new InnerBatchRequest();\n  }\n\n  /**\n   * Get the value of Content-Type for a batch request.\n   * The value must be multipart/mixed with a batch boundary.\n   * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252\n   */\n  public getMultiPartContentType(): string {\n    return this.batchRequest.getMultipartContentType();\n  }\n\n  /**\n   * Get assembled HTTP request body for sub requests.\n   */\n  public getHttpRequestBody(): string {\n    return this.batchRequest.getHttpRequestBody();\n  }\n\n  /**\n   * Get sub requests that are added into the batch request.\n   */\n  public getSubRequests(): Map<number, BatchSubRequest> {\n    return this.batchRequest.getSubRequests();\n  }\n\n  private async addSubRequestInternal(\n    subRequest: BatchSubRequest,\n    assembleSubRequestFunc: () => Promise<void>\n  ): Promise<void> {\n    await Mutex.lock(this.batch);\n\n    try {\n      this.batchRequest.preAddSubRequest(subRequest);\n      await assembleSubRequestFunc();\n      this.batchRequest.postAddSubRequest(subRequest);\n    } finally {\n      await Mutex.unlock(this.batch);\n    }\n  }\n\n  private setBatchType(batchType: \"delete\" | \"setAccessTier\"): void {\n    if (!this.batchType) {\n      this.batchType = batchType;\n    }\n    if (this.batchType !== batchType) {\n      throw new RangeError(\n        `BlobBatch only supports one operation type per batch and it already is being used for ${this.batchType} operations.`\n      );\n    }\n  }\n\n  /**\n   * The deleteBlob operation marks the specified blob or snapshot for deletion.\n   * The blob is later deleted during garbage collection.\n   * Only one kind of operation is allowed per batch request.\n   *\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).\n   * The operation will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param url - The url of the blob resource to delete.\n   * @param credential - Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options -\n   */\n  public async deleteBlob(\n    url: string,\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    options?: BlobDeleteOptions\n  ): Promise<void>;\n\n  /**\n   * The deleteBlob operation marks the specified blob or snapshot for deletion.\n   * The blob is later deleted during garbage collection.\n   * Only one kind of operation is allowed per batch request.\n   *\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).\n   * The operation will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClient - The BlobClient.\n   * @param options -\n   */\n  public async deleteBlob(blobClient: BlobClient, options?: BlobDeleteOptions): Promise<void>;\n\n  public async deleteBlob(\n    urlOrBlobClient: string | BlobClient,\n    credentialOrOptions:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | BlobDeleteOptions\n      | undefined,\n    options?: BlobDeleteOptions\n  ): Promise<void> {\n    let url: string;\n    let credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n\n    if (\n      typeof urlOrBlobClient === \"string\" &&\n      ((isNode && credentialOrOptions instanceof StorageSharedKeyCredential) ||\n        credentialOrOptions instanceof AnonymousCredential ||\n        isTokenCredential(credentialOrOptions))\n    ) {\n      // First overload\n      url = urlOrBlobClient;\n      credential = credentialOrOptions;\n    } else if (urlOrBlobClient instanceof BlobClient) {\n      // Second overload\n      url = urlOrBlobClient.url;\n      credential = urlOrBlobClient.credential;\n      options = credentialOrOptions as BlobDeleteOptions;\n    } else {\n      throw new RangeError(\n        \"Invalid arguments. Either url and credential, or BlobClient need be provided.\"\n      );\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const { span, updatedOptions } = createSpan(\"BatchDeleteRequest-addSubRequest\", options);\n\n    try {\n      this.setBatchType(\"delete\");\n      await this.addSubRequestInternal(\n        {\n          url: url,\n          credential: credential,\n        },\n        async () => {\n          await new BlobClient(url, this.batchRequest.createPipeline(credential)).delete(\n            updatedOptions\n          );\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * The setBlobAccessTier operation sets the tier on a blob.\n   * The operation is allowed on block blobs in a blob storage or general purpose v2 account.\n   * Only one kind of operation is allowed per batch request.\n   *\n   * A block blob's tier determines Hot/Cool/Archive storage type.\n   * This operation does not update the blob's ETag.\n   * For detailed information about block blob level tiering\n   * see [hot, cool, and archive access tiers](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers).\n   * The operation will be authenticated and authorized\n   * with specified credential. See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param url - The url of the blob resource to delete.\n   * @param credential - Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobAccessTier(\n    url: string,\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    tier: AccessTier,\n    options?: BlobSetTierOptions\n  ): Promise<void>;\n\n  /**\n   * The setBlobAccessTier operation sets the tier on a blob.\n   * The operation is allowed on block blobs in a blob storage or general purpose v2 account.\n   * Only one kind of operation is allowed per batch request.\n   *\n   * A block blob's tier determines Hot/Cool/Archive storage type.\n   * This operation does not update the blob's ETag.\n   * For detailed information about block blob level tiering\n   * see [hot, cool, and archive access tiers](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers).\n   * The operation will be authenticated and authorized\n   * with specified credential. See [blob batch authorization details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClient - The BlobClient.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobAccessTier(\n    blobClient: BlobClient,\n    tier: AccessTier,\n    options?: BlobSetTierOptions\n  ): Promise<void>;\n\n  public async setBlobAccessTier(\n    urlOrBlobClient: string | BlobClient,\n    credentialOrTier:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | AccessTier,\n    tierOrOptions?: AccessTier | BlobSetTierOptions,\n    options?: BlobSetTierOptions\n  ): Promise<void> {\n    let url: string;\n    let credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n    let tier: AccessTier;\n\n    if (\n      typeof urlOrBlobClient === \"string\" &&\n      ((isNode && credentialOrTier instanceof StorageSharedKeyCredential) ||\n        credentialOrTier instanceof AnonymousCredential ||\n        isTokenCredential(credentialOrTier))\n    ) {\n      // First overload\n      url = urlOrBlobClient;\n      credential = credentialOrTier as\n        | StorageSharedKeyCredential\n        | AnonymousCredential\n        | TokenCredential;\n      tier = tierOrOptions as AccessTier;\n    } else if (urlOrBlobClient instanceof BlobClient) {\n      // Second overload\n      url = urlOrBlobClient.url;\n      credential = urlOrBlobClient.credential;\n      tier = credentialOrTier as AccessTier;\n      options = tierOrOptions as BlobSetTierOptions;\n    } else {\n      throw new RangeError(\n        \"Invalid arguments. Either url and credential, or BlobClient need be provided.\"\n      );\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const { span, updatedOptions } = createSpan(\"BatchSetTierRequest-addSubRequest\", options);\n\n    try {\n      this.setBatchType(\"setAccessTier\");\n      await this.addSubRequestInternal(\n        {\n          url: url,\n          credential: credential,\n        },\n        async () => {\n          await new BlobClient(url, this.batchRequest.createPipeline(credential)).setAccessTier(\n            tier,\n            updatedOptions\n          );\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n\n/**\n * Inner batch request class which is responsible for assembling and serializing sub requests.\n * See https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#request-body for how requests are assembled.\n */\nclass InnerBatchRequest {\n  private operationCount: number;\n  private body: string;\n  private subRequests: Map<number, BatchSubRequest>;\n  private readonly boundary: string;\n  private readonly subRequestPrefix: string;\n  private readonly multipartContentType: string;\n  private readonly batchRequestEnding: string;\n\n  constructor() {\n    this.operationCount = 0;\n    this.body = \"\";\n\n    const tempGuid = generateUuid();\n\n    // batch_{batchid}\n    this.boundary = `batch_${tempGuid}`;\n    // --batch_{batchid}\n    // Content-Type: application/http\n    // Content-Transfer-Encoding: binary\n    this.subRequestPrefix = `--${this.boundary}${HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TYPE}: application/http${HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TRANSFER_ENCODING}: binary`;\n    // multipart/mixed; boundary=batch_{batchid}\n    this.multipartContentType = `multipart/mixed; boundary=${this.boundary}`;\n    // --batch_{batchid}--\n    this.batchRequestEnding = `--${this.boundary}--`;\n\n    this.subRequests = new Map();\n  }\n\n  /**\n   * Create pipeline to assemble sub requests. The idea here is to use existing\n   * credential and serialization/deserialization components, with additional policies to\n   * filter unnecessary headers, assemble sub requests into request's body\n   * and intercept request from going to wire.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   */\n  public createPipeline(\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential\n  ): Pipeline {\n    const isAnonymousCreds = credential instanceof AnonymousCredential;\n    const policyFactoryLength = 3 + (isAnonymousCreds ? 0 : 1); // [deserializationPolicy, BatchHeaderFilterPolicyFactory, (Optional)Credential, BatchRequestAssemblePolicyFactory]\n    const factories: RequestPolicyFactory[] = new Array(policyFactoryLength);\n\n    factories[0] = deserializationPolicy(); // Default deserializationPolicy is provided by protocol layer\n    factories[1] = new BatchHeaderFilterPolicyFactory(); // Use batch header filter policy to exclude unnecessary headers\n    if (!isAnonymousCreds) {\n      factories[2] = isTokenCredential(credential)\n        ? attachCredential(\n            bearerTokenAuthenticationPolicy(credential, StorageOAuthScopes),\n            credential\n          )\n        : credential;\n    }\n    factories[policyFactoryLength - 1] = new BatchRequestAssemblePolicyFactory(this); // Use batch assemble policy to assemble request and intercept request from going to wire\n\n    return new Pipeline(factories, {});\n  }\n\n  public appendSubRequestToBody(request: WebResource) {\n    // Start to assemble sub request\n    this.body += [\n      this.subRequestPrefix, // sub request constant prefix\n      `${HeaderConstants.CONTENT_ID}: ${this.operationCount}`, // sub request's content ID\n      \"\", // empty line after sub request's content ID\n      `${request.method.toString()} ${getURLPathAndQuery(\n        request.url\n      )} ${HTTP_VERSION_1_1}${HTTP_LINE_ENDING}`, // sub request start line with method\n    ].join(HTTP_LINE_ENDING);\n\n    for (const header of request.headers.headersArray()) {\n      this.body += `${header.name}: ${header.value}${HTTP_LINE_ENDING}`;\n    }\n\n    this.body += HTTP_LINE_ENDING; // sub request's headers need be ending with an empty line\n    // No body to assemble for current batch request support\n    // End to assemble sub request\n  }\n\n  public preAddSubRequest(subRequest: BatchSubRequest) {\n    if (this.operationCount >= BATCH_MAX_REQUEST) {\n      throw new RangeError(`Cannot exceed ${BATCH_MAX_REQUEST} sub requests in a single batch`);\n    }\n\n    // Fast fail if url for sub request is invalid\n    const path = getURLPath(subRequest.url);\n    if (!path || path === \"\") {\n      throw new RangeError(`Invalid url for sub request: '${subRequest.url}'`);\n    }\n  }\n\n  public postAddSubRequest(subRequest: BatchSubRequest) {\n    this.subRequests.set(this.operationCount, subRequest);\n    this.operationCount++;\n  }\n\n  // Return the http request body with assembling the ending line to the sub request body.\n  public getHttpRequestBody(): string {\n    return `${this.body}${this.batchRequestEnding}${HTTP_LINE_ENDING}`;\n  }\n\n  public getMultipartContentType(): string {\n    return this.multipartContentType;\n  }\n\n  public getSubRequests(): Map<number, BatchSubRequest> {\n    return this.subRequests;\n  }\n}\n\nclass BatchRequestAssemblePolicy extends BaseRequestPolicy {\n  private batchRequest: InnerBatchRequest;\n  private readonly dummyResponse: HttpOperationResponse = {\n    request: new WebResource(),\n    status: 200,\n    headers: new HttpHeaders(),\n  };\n\n  constructor(\n    batchRequest: InnerBatchRequest,\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions\n  ) {\n    super(nextPolicy, options);\n\n    this.batchRequest = batchRequest;\n  }\n\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    await this.batchRequest.appendSubRequestToBody(request);\n\n    return this.dummyResponse; // Intercept request from going to wire\n  }\n}\n\nclass BatchRequestAssemblePolicyFactory implements RequestPolicyFactory {\n  private batchRequest: InnerBatchRequest;\n\n  constructor(batchRequest: InnerBatchRequest) {\n    this.batchRequest = batchRequest;\n  }\n\n  public create(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions\n  ): BatchRequestAssemblePolicy {\n    return new BatchRequestAssemblePolicy(this.batchRequest, nextPolicy, options);\n  }\n}\n\nclass BatchHeaderFilterPolicy extends BaseRequestPolicy {\n  // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    let xMsHeaderName = \"\";\n\n    for (const header of request.headers.headersArray()) {\n      if (iEqual(header.name, HeaderConstants.X_MS_VERSION)) {\n        xMsHeaderName = header.name;\n      }\n    }\n\n    if (xMsHeaderName !== \"\") {\n      request.headers.remove(xMsHeaderName); // The subrequests should not have the x-ms-version header.\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n\nclass BatchHeaderFilterPolicyFactory implements RequestPolicyFactory {\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): BatchHeaderFilterPolicy {\n    return new BatchHeaderFilterPolicy(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nenum MutexLockStatus {\n  LOCKED,\n  UNLOCKED,\n}\n\ntype Callback = (...args: any[]) => any;\n\n/**\n * An async mutex lock.\n */\nexport class Mutex {\n  /**\n   * Lock for a specific key. If the lock has been acquired by another customer, then\n   * will wait until getting the lock.\n   *\n   * @param key - lock key\n   */\n  public static async lock(key: string): Promise<void> {\n    return new Promise<void>((resolve) => {\n      if (this.keys[key] === undefined || this.keys[key] === MutexLockStatus.UNLOCKED) {\n        this.keys[key] = MutexLockStatus.LOCKED;\n        resolve();\n      } else {\n        this.onUnlockEvent(key, () => {\n          this.keys[key] = MutexLockStatus.LOCKED;\n          resolve();\n        });\n      }\n    });\n  }\n\n  /**\n   * Unlock a key.\n   *\n   * @param key -\n   */\n  public static async unlock(key: string): Promise<void> {\n    return new Promise<void>((resolve) => {\n      if (this.keys[key] === MutexLockStatus.LOCKED) {\n        this.emitUnlockEvent(key);\n      }\n      delete this.keys[key];\n      resolve();\n    });\n  }\n\n  private static keys: { [key: string]: MutexLockStatus } = {};\n  private static listeners: { [key: string]: Callback[] } = {};\n\n  private static onUnlockEvent(key: string, handler: Callback) {\n    if (this.listeners[key] === undefined) {\n      this.listeners[key] = [handler];\n    } else {\n      this.listeners[key].push(handler);\n    }\n  }\n\n  private static emitUnlockEvent(key: string) {\n    if (this.listeners[key] !== undefined && this.listeners[key].length > 0) {\n      const handler = this.listeners[key].shift();\n      setImmediate(() => {\n        handler!.call(this);\n      });\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the\n * values are set, this should be serialized with toString and set as the permissions field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class AccountSASPermissions {\n  /**\n   * Parse initializes the AccountSASPermissions fields from a string.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): AccountSASPermissions {\n    const accountSASPermissions = new AccountSASPermissions();\n\n    for (const c of permissions) {\n      switch (c) {\n        case \"r\":\n          accountSASPermissions.read = true;\n          break;\n        case \"w\":\n          accountSASPermissions.write = true;\n          break;\n        case \"d\":\n          accountSASPermissions.delete = true;\n          break;\n        case \"x\":\n          accountSASPermissions.deleteVersion = true;\n          break;\n        case \"l\":\n          accountSASPermissions.list = true;\n          break;\n        case \"a\":\n          accountSASPermissions.add = true;\n          break;\n        case \"c\":\n          accountSASPermissions.create = true;\n          break;\n        case \"u\":\n          accountSASPermissions.update = true;\n          break;\n        case \"p\":\n          accountSASPermissions.process = true;\n          break;\n        case \"t\":\n          accountSASPermissions.tag = true;\n          break;\n        case \"f\":\n          accountSASPermissions.filter = true;\n          break;\n        case \"i\":\n          accountSASPermissions.setImmutabilityPolicy = true;\n          break;\n        case \"y\":\n          accountSASPermissions.permanentDelete = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission character: ${c}`);\n      }\n    }\n\n    return accountSASPermissions;\n  }\n\n  /**\n   * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n  public static from(permissionLike: AccountSASPermissionsLike): AccountSASPermissions {\n    const accountSASPermissions = new AccountSASPermissions();\n    if (permissionLike.read) {\n      accountSASPermissions.read = true;\n    }\n    if (permissionLike.write) {\n      accountSASPermissions.write = true;\n    }\n    if (permissionLike.delete) {\n      accountSASPermissions.delete = true;\n    }\n    if (permissionLike.deleteVersion) {\n      accountSASPermissions.deleteVersion = true;\n    }\n    if (permissionLike.filter) {\n      accountSASPermissions.filter = true;\n    }\n    if (permissionLike.tag) {\n      accountSASPermissions.tag = true;\n    }\n    if (permissionLike.list) {\n      accountSASPermissions.list = true;\n    }\n    if (permissionLike.add) {\n      accountSASPermissions.add = true;\n    }\n    if (permissionLike.create) {\n      accountSASPermissions.create = true;\n    }\n    if (permissionLike.update) {\n      accountSASPermissions.update = true;\n    }\n    if (permissionLike.process) {\n      accountSASPermissions.process = true;\n    }\n    if (permissionLike.setImmutabilityPolicy) {\n      accountSASPermissions.setImmutabilityPolicy = true;\n    }\n    if (permissionLike.permanentDelete) {\n      accountSASPermissions.permanentDelete = true;\n    }\n    return accountSASPermissions;\n  }\n\n  /**\n   * Permission to read resources and list queues and tables granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Permission to write resources granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Permission to create blobs and files granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Permission to delete versions granted.\n   */\n  public deleteVersion: boolean = false;\n\n  /**\n   * Permission to list blob containers, blobs, shares, directories, and files granted.\n   */\n  public list: boolean = false;\n\n  /**\n   * Permission to add messages, table entities, and append to blobs granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Permission to create blobs and files granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Permissions to update messages and table entities granted.\n   */\n  public update: boolean = false;\n\n  /**\n   * Permission to get and delete messages granted.\n   */\n  public process: boolean = false;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  public tag: boolean = false;\n\n  /**\n   * Permission to filter blobs.\n   */\n  public filter: boolean = false;\n\n  /**\n   * Permission to set immutability policy.\n   */\n  public setImmutabilityPolicy: boolean = false;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  public permanentDelete: boolean = false;\n\n  /**\n   * Produces the SAS permissions string for an Azure Storage account.\n   * Call this method to set AccountSASSignatureValues Permissions field.\n   *\n   * Using this method will guarantee the resource types are in\n   * an order accepted by the service.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   */\n  public toString(): string {\n    // The order of the characters should be as specified here to ensure correctness:\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n    // Use a string array instead of string concatenating += operator for performance\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n    if (this.filter) {\n      permissions.push(\"f\");\n    }\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.update) {\n      permissions.push(\"u\");\n    }\n    if (this.process) {\n      permissions.push(\"p\");\n    }\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n    return permissions.join(\"\");\n  }\n}\n\n/**\n * A type that looks like an account SAS permission.\n * Used in {@link AccountSASPermissions} to parse SAS permissions from raw objects.\n */\nexport interface AccountSASPermissionsLike {\n  /**\n   * Permission to read resources and list queues and tables granted.\n   */\n  read?: boolean;\n\n  /**\n   * Permission to write resources granted.\n   */\n  write?: boolean;\n\n  /**\n   * Permission to delete blobs and files granted.\n   */\n  delete?: boolean;\n\n  /**\n   * Permission to delete versions granted.\n   */\n  deleteVersion?: boolean;\n\n  /**\n   * Permission to list blob containers, blobs, shares, directories, and files granted.\n   */\n  list?: boolean;\n\n  /**\n   * Permission to add messages, table entities, and append to blobs granted.\n   */\n  add?: boolean;\n\n  /**\n   * Permission to create blobs and files granted.\n   */\n  create?: boolean;\n\n  /**\n   * Permissions to update messages and table entities granted.\n   */\n  update?: boolean;\n\n  /**\n   * Permission to get and delete messages granted.\n   */\n  process?: boolean;\n\n  /**\n   * Specfies Tag access granted.\n   */\n  tag?: boolean;\n\n  /**\n   * Permission to filter blobs.\n   */\n  filter?: boolean;\n\n  /**\n   * Permission to set immutability policy.\n   */\n  setImmutabilityPolicy?: boolean;\n\n  /**\n   * Specifies that Permanent Delete is permitted.\n   */\n  permanentDelete?: boolean;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccountSASPermissions } from \"./AccountSASPermissions\";\nimport { AccountSASResourceTypes } from \"./AccountSASResourceTypes\";\nimport { AccountSASServices } from \"./AccountSASServices\";\nimport { StorageSharedKeyCredential } from \"../credentials/StorageSharedKeyCredential\";\nimport { SasIPRange, ipRangeToString } from \"./SasIPRange\";\nimport { SASProtocol, SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * AccountSASSignatureValues is used to generate a Shared Access Signature (SAS) for an Azure Storage account. Once\n * all the values here are set appropriately, call {@link generateAccountSASQueryParameters} to obtain a representation\n * of the SAS which can actually be applied to blob urls. Note: that both this class and {@link SASQueryParameters}\n * exist because the former is mutable and a logical representation while the latter is immutable and used to generate\n * actual REST requests.\n *\n * @see https://docs.microsoft.com/en-us/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n * for more conceptual information on SAS\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n * for descriptions of the parameters, including which are required\n */\nexport interface AccountSASSignatureValues {\n  /**\n   * If not provided, this defaults to the service version targeted by this version of the library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols allowed.\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n\n  /**\n   * The time after which the SAS will no longer work.\n   */\n  expiresOn: Date;\n\n  /**\n   * Specifies which operations the SAS user may perform. Please refer to {@link AccountSASPermissions} for help\n   * constructing the permissions string.\n   */\n  permissions: AccountSASPermissions;\n\n  /**\n   * Optional. IP range allowed.\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * The values that indicate the services accessible with this SAS. Please refer to {@link AccountSASServices} to\n   * construct this value.\n   */\n  services: string;\n\n  /**\n   * The values that indicate the resource types accessible with this SAS. Please refer\n   * to {@link AccountSASResourceTypes} to construct this value.\n   */\n  resourceTypes: string;\n\n  /**\n   * Optional. Encryption scope to use when sending requests authorized with this SAS URI.\n   */\n  encryptionScope?: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual\n * REST request.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n * @param accountSASSignatureValues -\n * @param sharedKeyCredential -\n */\nexport function generateAccountSASQueryParameters(\n  accountSASSignatureValues: AccountSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  const version = accountSASSignatureValues.version\n    ? accountSASSignatureValues.version\n    : SERVICE_VERSION;\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.setImmutabilityPolicy &&\n    version < \"2020-08-04\"\n  ) {\n    throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n  }\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.deleteVersion &&\n    version < \"2019-10-10\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-10-10' when provided 'x' permission.\");\n  }\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.permanentDelete &&\n    version < \"2019-10-10\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-10-10' when provided 'y' permission.\");\n  }\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.tag &&\n    version < \"2019-12-12\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-12-12' when provided 't' permission.\");\n  }\n\n  if (\n    accountSASSignatureValues.permissions &&\n    accountSASSignatureValues.permissions.filter &&\n    version < \"2019-12-12\"\n  ) {\n    throw RangeError(\"'version' must be >= '2019-12-12' when provided 'f' permission.\");\n  }\n\n  if (accountSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n    throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n  }\n\n  const parsedPermissions = AccountSASPermissions.parse(\n    accountSASSignatureValues.permissions.toString()\n  );\n  const parsedServices = AccountSASServices.parse(accountSASSignatureValues.services).toString();\n  const parsedResourceTypes = AccountSASResourceTypes.parse(\n    accountSASSignatureValues.resourceTypes\n  ).toString();\n\n  let stringToSign: string;\n\n  if (version >= \"2020-12-06\") {\n    stringToSign = [\n      sharedKeyCredential.accountName,\n      parsedPermissions,\n      parsedServices,\n      parsedResourceTypes,\n      accountSASSignatureValues.startsOn\n        ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false)\n        : \"\",\n      truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),\n      accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : \"\",\n      accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n      version,\n      accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : \"\",\n      \"\", // Account SAS requires an additional newline character\n    ].join(\"\\n\");\n  } else {\n    stringToSign = [\n      sharedKeyCredential.accountName,\n      parsedPermissions,\n      parsedServices,\n      parsedResourceTypes,\n      accountSASSignatureValues.startsOn\n        ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false)\n        : \"\",\n      truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),\n      accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : \"\",\n      accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n      version,\n      \"\", // Account SAS requires an additional newline character\n    ].join(\"\\n\");\n  }\n\n  const signature: string = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    parsedPermissions.toString(),\n    parsedServices,\n    parsedResourceTypes,\n    accountSASSignatureValues.protocol,\n    accountSASSignatureValues.startsOn,\n    accountSASSignatureValues.expiresOn,\n    accountSASSignatureValues.ipRange,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    accountSASSignatureValues.encryptionScope\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the\n * values are set, this should be serialized with toString and set as the resources field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but\n * the order of the resources is particular and this class guarantees correctness.\n */\nexport class AccountSASResourceTypes {\n  /**\n   * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid resource type.\n   *\n   * @param resourceTypes -\n   */\n  public static parse(resourceTypes: string): AccountSASResourceTypes {\n    const accountSASResourceTypes = new AccountSASResourceTypes();\n\n    for (const c of resourceTypes) {\n      switch (c) {\n        case \"s\":\n          accountSASResourceTypes.service = true;\n          break;\n        case \"c\":\n          accountSASResourceTypes.container = true;\n          break;\n        case \"o\":\n          accountSASResourceTypes.object = true;\n          break;\n        default:\n          throw new RangeError(`Invalid resource type: ${c}`);\n      }\n    }\n\n    return accountSASResourceTypes;\n  }\n\n  /**\n   * Permission to access service level APIs granted.\n   */\n  public service: boolean = false;\n\n  /**\n   * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.\n   */\n  public container: boolean = false;\n\n  /**\n   * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.\n   */\n  public object: boolean = false;\n\n  /**\n   * Converts the given resource types to a string.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   */\n  public toString(): string {\n    const resourceTypes: string[] = [];\n    if (this.service) {\n      resourceTypes.push(\"s\");\n    }\n    if (this.container) {\n      resourceTypes.push(\"c\");\n    }\n    if (this.object) {\n      resourceTypes.push(\"o\");\n    }\n    return resourceTypes.join(\"\");\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n */\nexport class AccountSASServices {\n  /**\n   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid service.\n   *\n   * @param services -\n   */\n  public static parse(services: string): AccountSASServices {\n    const accountSASServices = new AccountSASServices();\n\n    for (const c of services) {\n      switch (c) {\n        case \"b\":\n          accountSASServices.blob = true;\n          break;\n        case \"f\":\n          accountSASServices.file = true;\n          break;\n        case \"q\":\n          accountSASServices.queue = true;\n          break;\n        case \"t\":\n          accountSASServices.table = true;\n          break;\n        default:\n          throw new RangeError(`Invalid service character: ${c}`);\n      }\n    }\n\n    return accountSASServices;\n  }\n\n  /**\n   * Permission to access blob resources granted.\n   */\n  public blob: boolean = false;\n\n  /**\n   * Permission to access file resources granted.\n   */\n  public file: boolean = false;\n\n  /**\n   * Permission to access queue resources granted.\n   */\n  public queue: boolean = false;\n\n  /**\n   * Permission to access table resources granted.\n   */\n  public table: boolean = false;\n\n  /**\n   * Converts the given services to a string.\n   *\n   */\n  public toString(): string {\n    const services: string[] = [];\n    if (this.blob) {\n      services.push(\"b\");\n    }\n    if (this.table) {\n      services.push(\"t\");\n    }\n    if (this.queue) {\n      services.push(\"q\");\n    }\n    if (this.file) {\n      services.push(\"f\");\n    }\n    return services.join(\"\");\n  }\n}\n","{\r\n    \"3111\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"/a4w0GlRK2oWoZo3gcXrU0OHiXGk.jpg\",\r\n        \"created_by\": [\r\n            {\r\n                \"id\": 82804,\r\n                \"credit_id\": \"52574c5819c29531db0b8bd4\",\r\n                \"name\": \"Dominic Anciano\",\r\n                \"gender\": 2,\r\n                \"profile_path\": null\r\n            },\r\n            {\r\n                \"id\": 82805,\r\n                \"credit_id\": \"52574c5819c29531db0b8bce\",\r\n                \"name\": \"Ray Burdis\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/mp3q2lsXkHH0AoZOnoippbV8CJv.jpg\"\r\n            }\r\n        ],\r\n        \"episode_run_time\": [\r\n            30\r\n        ],\r\n        \"first_air_date\": \"1997-12-29\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"\",\r\n        \"id\": 3111,\r\n        \"in_production\": false,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"2000-08-31\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"2000-08-31\",\r\n            \"episode_number\": 6,\r\n            \"id\": 234186,\r\n            \"name\": \"Operation Snowdrop\",\r\n            \"overview\": \"A race-relations officer gives the whiter-than-white squad some tips on how to conduct themselves.\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 3,\r\n            \"still_path\": null,\r\n            \"vote_average\": 0.0,\r\n            \"vote_count\": 0\r\n        },\r\n        \"name\": \"Operation Good Guys\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"BBC Two\",\r\n                \"id\": 332,\r\n                \"logo_path\": \"/6kl5tMuct7u3ej5myL4c9QQVSW1.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 19,\r\n        \"number_of_seasons\": 3,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"Operation Good Guys\",\r\n        \"overview\": \"Operation Good Guys is a British mockumentary, a fly-on-the-wall documentary series about an elite police unit's bid to snare one of Britain's most powerful crime lords.Blurring the line between fact and fiction, it witnesses, on camera, the total breakdown, professionally and personally, of the Operation Good Guys team. Throughout the operation, The 'Good Guys' have an unfortunate habit of embroiling into their calamitous world some of the country's best-known celebrities, from actors and footballers, to TV presenters and even the odd ex-convict.\",\r\n        \"popularity\": 3.226,\r\n        \"poster_path\": \"/sit87tWGoKqpWjuagovkdDWQpw.jpg\",\r\n        \"production_companies\": [],\r\n        \"production_countries\": [],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": \"1997-01-01\",\r\n                \"episode_count\": 2,\r\n                \"id\": 9846,\r\n                \"name\": \"Specials\",\r\n                \"overview\": \"Pilot Season\",\r\n                \"poster_path\": null,\r\n                \"season_number\": 0\r\n            },\r\n            {\r\n                \"air_date\": \"1997-12-29\",\r\n                \"episode_count\": 7,\r\n                \"id\": 9844,\r\n                \"name\": \"Season 1\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/ebWUMGQAZNMCfCYXjGumDnWvIpo.jpg\",\r\n                \"season_number\": 1\r\n            },\r\n            {\r\n                \"air_date\": \"1999-07-05\",\r\n                \"episode_count\": 6,\r\n                \"id\": 9843,\r\n                \"name\": \"Season 2\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": null,\r\n                \"season_number\": 2\r\n            },\r\n            {\r\n                \"air_date\": \"2000-07-07\",\r\n                \"episode_count\": 6,\r\n                \"id\": 9845,\r\n                \"name\": \"Season 3\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": null,\r\n                \"season_number\": 3\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 6.7,\r\n        \"vote_count\": 3,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"mockumentary\",\r\n                    \"id\": 11800\r\n                },\r\n                {\r\n                    \"name\": \"workplace comedy\",\r\n                    \"id\": 210605\r\n                }\r\n            ]\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"52574c5419c29531db0b87b6\",\r\n            \"air_date\": \"1997-12-29\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"1997-12-29\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5519c29531db0b8943\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1231577,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"David Seaman\",\r\n                            \"original_name\": \"David Seaman\",\r\n                            \"popularity\": 1.01,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b881b\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 86045,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gary Beadle\",\r\n                            \"original_name\": \"Gary Beadle\",\r\n                            \"popularity\": 4.067,\r\n                            \"profile_path\": \"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b8843\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 82804,\r\n                            \"known_for_department\": \"Production\",\r\n                            \"name\": \"Dominic Anciano\",\r\n                            \"original_name\": \"Dominic Anciano\",\r\n                            \"popularity\": 1.099,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b885d\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 218375,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Burdis\",\r\n                            \"original_name\": \"Mark Burdis\",\r\n                            \"popularity\": 0.866,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 234141,\r\n                    \"name\": \"The Informant\",\r\n                    \"overview\": \"Operation Good Guys has been set up catch notorious villain Smiler McCarthy. Led by DI Beach the group of officers assigned to Operation Good Guys are the most inept bunch of coppers imaginable. When a possible informant on Smiler McCarthy's next move comes forward the men are forced to sit though a session with a punk hair dresser to get the time and place of Smiler's next job. They are told that shoot has been organised and the man involved is a major player.\\n\\nThinking this could be Smiler McCarthy the Good Guys lie in wait for him to arrive the venue they have been given by the informant. A car arrives and the Good Guys descend on its occupants who turn out to include footballer David Seaman (the major player) who has turned up for a photo shoot. Beach soon finds himself facing a lawsuit from Seaman's solicitors. De Sade meanwhile discovers that the so-called informant is in fact a one Lennie McCarthy, Smiler's cousin. The incident leaves Seaman unable to play in the World Cup and En\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1998-01-03\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5519c29531db0b89c3\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 47652,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Martin Kemp\",\r\n                            \"original_name\": \"Martin Kemp\",\r\n                            \"popularity\": 3.556,\r\n                            \"profile_path\": \"/cex68RbEL5FW6VbcL1e52shUF1p.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b881b\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 86045,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gary Beadle\",\r\n                            \"original_name\": \"Gary Beadle\",\r\n                            \"popularity\": 4.067,\r\n                            \"profile_path\": \"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b8843\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 82804,\r\n                            \"known_for_department\": \"Production\",\r\n                            \"name\": \"Dominic Anciano\",\r\n                            \"original_name\": \"Dominic Anciano\",\r\n                            \"popularity\": 1.099,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b885d\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 218375,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Burdis\",\r\n                            \"original_name\": \"Mark Burdis\",\r\n                            \"popularity\": 0.866,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 234154,\r\n                    \"name\": \"Radio Silence\",\r\n                    \"overview\": \"Beach decides to set up a drugs exchange with two men believed to be connected with Smiler McCarthy. Despite Bones protests, Beach assigns Mark Kemp (the commissioners' nephew) to be the bait and hand over the money. Roy Leyton grudgingly gives Beach the £2000 needed for the exchange despite the fact that funds are low. Mark waits with the money whilst being watched by Bones and Strings who are stationed in the flat of an old lady who rather likes Strings guitar playing (though Bones finds it a pain). Ash meanwhile is lying behind a wall and de Sade and his gang are squashed in a saloon car with the film crew.\\n\\nThe two guys arrive and Mark gives them the money despite the fact that Bones told him to ask to see the merchandise before paying up. They now have no drugs and have lost £2000. Bones is furious and demands that he meet the men on the second attempt. Beach agrees but insists that Mark accompany. Bones demands another two grand off Leyton who agrees to meet him with the money at\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1998-01-10\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5519c29531db0b8a00\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 12830,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Lou Hirsch\",\r\n                            \"original_name\": \"Lou Hirsch\",\r\n                            \"popularity\": 1.096,\r\n                            \"profile_path\": \"/dxRykRWGwgODBcpzNKVMBJVnFk9.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b881b\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 86045,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gary Beadle\",\r\n                            \"original_name\": \"Gary Beadle\",\r\n                            \"popularity\": 4.067,\r\n                            \"profile_path\": \"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b8843\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 82804,\r\n                            \"known_for_department\": \"Production\",\r\n                            \"name\": \"Dominic Anciano\",\r\n                            \"original_name\": \"Dominic Anciano\",\r\n                            \"popularity\": 1.099,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b885d\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 218375,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Burdis\",\r\n                            \"original_name\": \"Mark Burdis\",\r\n                            \"popularity\": 0.866,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 234160,\r\n                    \"name\": \"Frisk 'em\",\r\n                    \"overview\": \"Beach has decided to enlist the help of US cop Lou \\\"\\\"Frisk 'em\\\"\\\" Ferrino in their latest attempt to nab Smiler McCarthy. When Ferrino arrives he is quick to mock The Good Guys efforts and much to Beach's anger proceeds to take over. He sets up an exchange with Smiler McCarthy of $500,000 for £2,000,000 of counterfeit money. He has placed the money in a bag, which is rigged with aluminium dye, which will explode over Smiler as soon as he opens the bag thereby marking him and pinning this job on him (thus creating grounds for an arrest).\\n\\nThe plan backfires when Mark Kemp decides he wants to see half a million dollars as he'll never get the chance again. He opens the bag and covers all the Good Guys (apart from Beach who is in his office telling Ferrino that they are the best in the force). They are forced to use new tactics. They send Gary Barwick rigged with a camera into a pub to meet one of Smiler's men to find out when McCarthy will be taking the fake money. Instead Gary gets drunk and\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1998-01-17\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5519c29531db0b8980\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1220307,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gillian Taylforth\",\r\n                            \"original_name\": \"Gillian Taylforth\",\r\n                            \"popularity\": 3.485,\r\n                            \"profile_path\": \"/9EiDDpgg8Voe8oe7UP4QUCRFC5r.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b881b\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 86045,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gary Beadle\",\r\n                            \"original_name\": \"Gary Beadle\",\r\n                            \"popularity\": 4.067,\r\n                            \"profile_path\": \"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b8843\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 82804,\r\n                            \"known_for_department\": \"Production\",\r\n                            \"name\": \"Dominic Anciano\",\r\n                            \"original_name\": \"Dominic Anciano\",\r\n                            \"popularity\": 1.099,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b885d\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 218375,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Burdis\",\r\n                            \"original_name\": \"Mark Burdis\",\r\n                            \"popularity\": 0.866,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 234147,\r\n                    \"name\": \"Holiday\",\r\n                    \"overview\": \"After the problems of the last couple of weeks and everything that has happened, Beach decides to give the Good Guys the day off to recoup. De Sade and the ART decide to give Mark Kemp some training in armed policing. Kim Finch goes out on the pull with her friends and ends up getting arrested. Bones spends most of the day waiting to see a doctor about what turns out to be a double hernia. Gary goes home to deal with his domestic problems with his wife only to get thrown out and find she's killed his fish. Strings goes home to relax and play his guitar and ends up having the police round to charge him with disturbing the peace. Beach and Ash meanwhile decide to have a day out on the town together to take their mind off work and all the stress of Operation Good Guys. Of all the Good Guys de Sade is the most reluctant to let the film crew come home with him. When they later turn up un-announced they find de Sade, Mark and a couple of girls involved in some kinky sex games.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1998-01-24\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5519c29531db0b8a3d\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1220501,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Matthew Wright\",\r\n                            \"original_name\": \"Matthew Wright\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": \"/o3bUrkScuFNrvzppNEyyW6whFRw.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b881b\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 86045,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gary Beadle\",\r\n                            \"original_name\": \"Gary Beadle\",\r\n                            \"popularity\": 4.067,\r\n                            \"profile_path\": \"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5519c29531db0b8a57\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1220566,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Frankie Fraser\",\r\n                            \"original_name\": \"Frankie Fraser\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b8843\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 82804,\r\n                            \"known_for_department\": \"Production\",\r\n                            \"name\": \"Dominic Anciano\",\r\n                            \"original_name\": \"Dominic Anciano\",\r\n                            \"popularity\": 1.099,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b885d\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 218375,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Burdis\",\r\n                            \"original_name\": \"Mark Burdis\",\r\n                            \"popularity\": 0.866,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 234165,\r\n                    \"name\": \"Safe as Houses\",\r\n                    \"overview\": \"Funding for Operation Good Guys hits an all time low. Things are so desperate that the electricity has been cut off at the office. Meanwhile a key witness on Smiler McCarthy has decided to come forward and expose McCarthy on national TV in exchange for police protection. The witness is none other than Mad Frankie Frazer. The Good Guys take him to a safe house or to be more accurate, Kim Finch's house, as they can't get a proper safe house. However his arrival is not much of a secret when the Good Guys put on a welcome party for him. Then later Mark brings his family round to meet Frankie despite the fact no one must know he's there.\\n\\nBack at the office meanwhile Ash is trying in vain to get the electricity going with a portable generator in time for the broadcast. Kim is getting more irritated by the Good Guys constant presence in her house especially because Strings keeps putting his feet on her sofa and Bones keeps blocking up the toilet. This also angers Frankie when Bones offers him\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1998-01-31\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5619c29531db0b8a94\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 133499,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Christopher Biggins\",\r\n                            \"original_name\": \"Christopher Biggins\",\r\n                            \"popularity\": 2.151,\r\n                            \"profile_path\": \"/vXSB66jWLWjy3DXoHTa9zeg7sLb.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b881b\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 86045,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gary Beadle\",\r\n                            \"original_name\": \"Gary Beadle\",\r\n                            \"popularity\": 4.067,\r\n                            \"profile_path\": \"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b8843\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 82804,\r\n                            \"known_for_department\": \"Production\",\r\n                            \"name\": \"Dominic Anciano\",\r\n                            \"original_name\": \"Dominic Anciano\",\r\n                            \"popularity\": 1.099,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b885d\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 218375,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Burdis\",\r\n                            \"original_name\": \"Mark Burdis\",\r\n                            \"popularity\": 0.866,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 234172,\r\n                    \"name\": \"Open Day\",\r\n                    \"overview\": \"In an attempt to persuade the Commissioner to give Operation Good Guys more funding Beach organises an Open Day at the office and enlists Christopher Biggins to help them. Biggins puts together a musical performance by Roy Leyton and Kim Finch (although Strings tries to interfere). Strings meanwhile organises a display of de Sade's Armed Response team by staging a fake hold up where he takes Gary and Kim hostage and de Sade and his team step in to save the day. Ash sets up a Smiler McCarthy shire where you throw balls at little cut outs of Smiler McCarthy. Beach and Ash them make cakes for the Open Day and Beach gives a Keith Floyd-like demonstration on how to make a prefect Fairy Cake.\\n\\nEverything seems to be going well until Mark decides to do a display of dog handling with his uncle's (the commissioner's) dog Sherlock. He enlists Bones to help him. Whilst Mark is all for keeping the display simple Bones wants it to be spectacular. They decide to try leaping through a flaming hoop. Un\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1998-02-07\",\r\n                    \"episode_number\": 7,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b8801\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1215796,\r\n                            \"known_for_department\": \"Production\",\r\n                            \"name\": \"Geoffrey Perkins\",\r\n                            \"original_name\": \"Geoffrey Perkins\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b881b\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 86045,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gary Beadle\",\r\n                            \"original_name\": \"Gary Beadle\",\r\n                            \"popularity\": 4.067,\r\n                            \"profile_path\": \"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b8843\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 82804,\r\n                            \"known_for_department\": \"Production\",\r\n                            \"name\": \"Dominic Anciano\",\r\n                            \"original_name\": \"Dominic Anciano\",\r\n                            \"popularity\": 1.099,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b885d\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 218375,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Burdis\",\r\n                            \"original_name\": \"Mark Burdis\",\r\n                            \"popularity\": 0.866,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 234181,\r\n                    \"name\": \"Sylvia La Plage\",\r\n                    \"overview\": \"The funds have gone, the Commissioner has refused to give them further funding. Operation Good Guys has been cancelled. Beach is devastated and at first refuses to accept it. Meanwhile the answer of the dwindling funds is answered when a postcard arrives from Spain. It's from Roy Leyton. He's taken all the funds from Operation Good Guys and done a runner. All the Good Guys are furious. Also Gary is still having problems with his wife whom he has promised Kim he will leave.\\n\\nBeach gives the Good Guys their final debriefing and invites them all out for a drink later. He tells them he has taught them all to be honest with one another and tonight he intends to be fully honest with them. At the Pub that night the Good Guys wait for Beach to arrive when Ash announces the entertainment for the evening, Sylvia la Plage. Out steps a large blonde lady who turns out to be none other than Beach himself - Beach is a cross dresser and he has decided to come clean and be honest about it. He and Ray do\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 1\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/ebWUMGQAZNMCfCYXjGumDnWvIpo.jpg\",\r\n            \"season_number\": 1\r\n        },\r\n        \"season/2\": {\r\n            \"_id\": \"52574c5419c29531db0b87ab\",\r\n            \"air_date\": \"1999-07-05\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"1999-07-05\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b87e7\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 50121,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Alan Yentob\",\r\n                            \"original_name\": \"Alan Yentob\",\r\n                            \"popularity\": 1.251,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b8801\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1215796,\r\n                            \"known_for_department\": \"Production\",\r\n                            \"name\": \"Geoffrey Perkins\",\r\n                            \"original_name\": \"Geoffrey Perkins\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b881b\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 86045,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gary Beadle\",\r\n                            \"original_name\": \"Gary Beadle\",\r\n                            \"popularity\": 4.067,\r\n                            \"profile_path\": \"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b8843\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 82804,\r\n                            \"known_for_department\": \"Production\",\r\n                            \"name\": \"Dominic Anciano\",\r\n                            \"original_name\": \"Dominic Anciano\",\r\n                            \"popularity\": 1.099,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b885d\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 218375,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Burdis\",\r\n                            \"original_name\": \"Mark Burdis\",\r\n                            \"popularity\": 0.866,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 234107,\r\n                    \"name\": \"Back to School\",\r\n                    \"overview\": \"Following the cancellation of Operation Good Guys, the Commissioner has decided to send Beach and his team back to Hendon for re-training before the Good Guys set off for their new assignment, Operation Zorro.\\n\\nBeach meanwhile after pleading with the BBC bosses has persuaded them to commission a new series of the documentary. He promises them that Operation Zorro will be spectacular. The Good Guys, now back in uniform arrive at Hendon and meet their Staff Sgt (or Staff as he's known). Staff is a tough man and picks on Beach mercilessly and insists on calling him Bitch. Mark meanwhile is appointed as Staff's assistant but only after Staff finds out that Mark is the commissioner's nephew.\\n\\nThe Good Guys all have sessions with a therapist and go through rigorous training and Mark loves being able to boss them all about. They split into two teams for a teamwork exercise and Beach and Strings are the captains. Ash is a little surprised when Beach chooses de Sade and Bill Zeebub from the ART a\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1999-07-12\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b8888\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 9012,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jonny Lee Miller\",\r\n                            \"original_name\": \"Jonny Lee Miller\",\r\n                            \"popularity\": 7.444,\r\n                            \"profile_path\": \"/otCQdDtnrMvZ5tPC62zLx0SaXeR.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b88a2\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 9642,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jude Law\",\r\n                            \"original_name\": \"Jude Law\",\r\n                            \"popularity\": 20.712,\r\n                            \"profile_path\": \"/pj75cHQ3oLSFPJ0IyB6Bkg6ytHu.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b8843\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 82804,\r\n                            \"known_for_department\": \"Production\",\r\n                            \"name\": \"Dominic Anciano\",\r\n                            \"original_name\": \"Dominic Anciano\",\r\n                            \"popularity\": 1.099,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b885d\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 218375,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Burdis\",\r\n                            \"original_name\": \"Mark Burdis\",\r\n                            \"popularity\": 0.866,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 234118,\r\n                    \"name\": \"Stardust\",\r\n                    \"overview\": \"Hollywood comes to Hendon in the form of Jude Law and Jonny Lee Miller. Whilst Jude observes Ash and Beach, Jonny is sent out with de Sade and the ART to do observation at the commissioner's house, which is being renovated. However they don't' know they're being filmed so de Sade and Bill set about stripping the house of anything they think they can flog, including all the plumbing which causes a flood and destroys the upper floors.\\n\\nBeach meanwhile tries to demonstrate the art of trailing criminals by trying to trail Jude and Ash. He fails dismally. He then takes Jude home to meet his mother. Bones meanwhile after eating some of his homemade butter goes out vigilante crime fighting with Mark on the underground. Their patrol is cut short when Bones has a severe case of gut rot from his butter and after failing to find a toilet is forced to go to the loo in his rucksack. Later on the streets a thugs runs past them and whips Bones bag. Bones and Mark give chase and arrest him. Bones then\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1999-07-19\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b88d9\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 65303,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Wingett\",\r\n                            \"original_name\": \"Mark Wingett\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": \"/uT3QCwMDSXw6FJdTBTpBNJnDFZS.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b8843\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 82804,\r\n                            \"known_for_department\": \"Production\",\r\n                            \"name\": \"Dominic Anciano\",\r\n                            \"original_name\": \"Dominic Anciano\",\r\n                            \"popularity\": 1.099,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52574c5419c29531db0b885d\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 218375,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Burdis\",\r\n                            \"original_name\": \"Mark Burdis\",\r\n                            \"popularity\": 0.866,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 234126,\r\n                    \"name\": \"Forensics\",\r\n                    \"overview\": \"The Good Guys begin the next stage of their training, forensics. They are sent to the scene of a sweet shop robbery to look for fingerprints and evidence. Beach and Ray however spend the whole investigation gorging themselves on the sweets and chocolates talking about things like the colour of aniseed balls and the best type of chocolate bar. The investigation is ruined when it turns out that Beach is not wearing gloves and all the prints they have found are his. Plus the robber was wearing gloves anyway.\\n\\nHowever they do find a blood and hair sample near a broken window. They decide to go to the hospital and knick anyone who has recently been admitted with a cut head. They end up bringing in some quite badly injured people for questioning and Beach is soon convinced they have the man. Not only has he a cut head but he also has a quarter of a pound of cola cubes on him. The lady from the shop however says it's not the right man though Beach is convinced still and believes the forensics\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1999-07-26\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 234136,\r\n                    \"name\": \"I Will Survive\",\r\n                    \"overview\": \"The Good Guys are sent on a survival course at Camp Alpha run by a man called Big Jim. They make their way there along a canal in boats and end up facing their first unofficial test. A bunch of kids on the towpath insulting them. Bones gets rid of them by throwing eggs at them but this later backfires when the Dad of one of the boys bombards Beach and Ray's boat and sinks them. The Good Guys eventually reach Camp Alpha and meet Mad Jim who seems to have a rather unhealthy interest in Hitler.\\n\\nGary feels threatened by Mad Jim and his hatred of black people. Beach tries to calm Gary down but Gary won't be budged. Beach goes to see Mad Jim to ask about his politics. However Mad Jim decides to introduce Ray to his pigs. When Ray emerges from the barn he looks somewhat roughed up. The next morning Mad Jim flattens the Good Guys tents with a tank and then sets up the days exercise. They have to imagine they are tracking down a mean, godless, evil person with no soul. That part will be played\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1999-08-02\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 234137,\r\n                    \"name\": \"Viva Espana\",\r\n                    \"overview\": \"Operation Zorro has at last arrived. The Good Guys are making final preparations for the trip to Spain where the Operation will take place. Problems immediately arise when they find their luggage is over weight thanks to Beach's trunk, Strings' guitar and the Commissioner's golf clubs, which Mark Kemp (his nephew) is taking to his villa for him. There are further problems when Beach looks at Ray's nine-year-old passport and notices that the photo shows a younger Ray with more hair than he has now and insists Ray wears a wig to get through Passport control.\\n\\nAt the airport later Mark leaves his uncle's clubs unattended and they get blown up. Ray and de Sade end up dropping Beach's trunk on his foot. In desperate need of some pain killers Beach ends up taking de Sade's special forces pain killers only to learn they are very powerful and have weird side effects. He turns over control to Ray just before he starts hallucinating. After a rather disturbed journey thanks to a manic Beach the Go\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1999-08-09\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 234139,\r\n                    \"name\": \"Operation Zorro\",\r\n                    \"overview\": \"The Good Guys have settled into their rooms at last and are now preparing for Operation Zorro, the reason they have come out here. However the Good Guys despite Beach's insistence that they are not on holiday seem to be spending too much time enjoying themselves.\\n\\nAs always things do not go off without a hitch. First Beach ends up lying in the sun too long and severely burns himself, which makes him very grumpy as well as sore. The Operation is put on hold whilst his skin calms down a bit. Meanwhile Bones and Mark decide to try and join in with Spanish culture by indulging in a touch of naturism which results in their being arrested for indecent exposure. They are released on bail for the Operation, which finally takes place. However the promised dramatic Operation turns out to be a simple handover of an envelope. Hugo Blick is really worried about what his bosses at the BBC will say. Beach comes up with a solution, they will shoot a reconstruction, which he will write and direct and th\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 2\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": null,\r\n            \"season_number\": 2\r\n        },\r\n        \"season/3\": {\r\n            \"_id\": \"52574c5419c29531db0b87c4\",\r\n            \"air_date\": \"2000-07-07\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2000-07-07\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 234200,\r\n                    \"name\": \"That's Entertainment\",\r\n                    \"overview\": \"Drug busts are an everyday adventure for a police unit, but how often do they get a chance to do a christmas extravaganza?  D.I Beach wants elves, snow and Val Doonican;  He gets Denise Van Outen, cocaine and a dwarf with attitude.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2000-08-03\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 234198,\r\n                    \"name\": \"Castaway\",\r\n                    \"overview\": \"The BBC see desert island TV as a sure-fire ratings winner.  Soon a starving Beach is looking at \\\"\\\"fleshy\\\"\\\" Bones in a new light, while a resourceful Donna Air is giving Ash some survival tips.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2000-08-10\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 234196,\r\n                    \"name\": \"Raging Pig\",\r\n                    \"overview\": \"Leopard skin shorts, big hair-do's, large trouser proturbance...  The good guys enter the fight game, while Bones has his wedding tackle adjusted.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2000-08-17\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 234189,\r\n                    \"name\": \"The Leader\",\r\n                    \"overview\": \"\\\"\\\"I am a policeman 24 hours a day, I am also the chosen one who wears the horns of Hurn.\\\"\\\"  A strange cult has Beach by the short and curlies - and plans to cut them off!\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2000-08-24\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 234193,\r\n                    \"name\": \"Jubilee\",\r\n                    \"overview\": \"Security is needed when the code-named 'Jubilee Family' visit.  For a change, the crap doesn't hit the fan, just the walls, windows, doors....\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2000-08-31\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 234186,\r\n                    \"name\": \"Operation Snowdrop\",\r\n                    \"overview\": \"A race-relations officer gives the whiter-than-white squad some tips on how to conduct themselves.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 3\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": null,\r\n            \"season_number\": 3\r\n        }\r\n    },\r\n    \"1073\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"/nn7ZciePhK6Q6qWhmFXzdsboBHt.jpg\",\r\n        \"created_by\": [\r\n            {\r\n                \"id\": 4581,\r\n                \"credit_id\": \"5254152219c295794036fe4d\",\r\n                \"name\": \"Steve Coogan\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/tT7OXc2qA6hlREHXdwGLp0XihzA.jpg\"\r\n            },\r\n            {\r\n                \"id\": 6732,\r\n                \"credit_id\": \"5254152219c295794036fe47\",\r\n                \"name\": \"Peter Baynham\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"\r\n            },\r\n            {\r\n                \"id\": 88926,\r\n                \"credit_id\": \"5254152219c295794036fe41\",\r\n                \"name\": \"Armando Iannucci\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n            }\r\n        ],\r\n        \"episode_run_time\": [\r\n            30\r\n        ],\r\n        \"first_air_date\": \"1997-11-03\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"http://www.bbc.co.uk/programmes/b00hxqcx\",\r\n        \"id\": 1073,\r\n        \"in_production\": false,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"2002-12-16\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"2002-12-16\",\r\n            \"episode_number\": 6,\r\n            \"id\": 55848,\r\n            \"name\": \"Alan Wide Shut\",\r\n            \"overview\": \"Alan's house is finally ready and Sonja is angling to cohabit. Meanwhile, Alan's book Bouncing Back has been unsuccessful, and is to be pulped and Lynne is to be baptised. All is going well, but Alan can't stop the flashbacks of the painful days when he ate 4 medium sized Toblerones and drove to Dundee in bare feet.\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 2,\r\n            \"still_path\": \"/erZCSbAo60ngcblFbzsJAbWJfuf.jpg\",\r\n            \"vote_average\": 0.0,\r\n            \"vote_count\": 0\r\n        },\r\n        \"name\": \"I'm Alan Partridge\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"BBC Two\",\r\n                \"id\": 332,\r\n                \"logo_path\": \"/6kl5tMuct7u3ej5myL4c9QQVSW1.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 12,\r\n        \"number_of_seasons\": 2,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"I'm Alan Partridge\",\r\n        \"overview\": \"I'm Alan Partridge is a BBC situation comedy starring Steve Coogan, of which two series of six episodes each were produced — the first in 1997 and the second in 2002. The series followed the titular Alan Partridge, a failed television presenter whose previous exploits had featured in the chat-show parody Knowing Me, Knowing You with Alan Partridge, and who is now presenting a programme on local radio in Norwich.\\n\\nBoth series were written by Peter Baynham, Coogan and Armando Iannucci; supporting Coogan were Felicity Montagu as his faithful, mouse-like personal assistant, Lynn Benfield; Simon Greenall as Geordie Travel Tavern handyman/BP garage attendant Michael; and Phil Cornwell as disc jockey Dave Clifton.\\n\\nIt has been well received by both critics and fans, and was nominated for three BAFTAs, two British Comedy Award, and a Royal Television Society award.\",\r\n        \"popularity\": 10.958,\r\n        \"poster_path\": \"/dal43UDeYGNZ14vDAHbE7U0mgrv.jpg\",\r\n        \"production_companies\": [\r\n            {\r\n                \"id\": 13157,\r\n                \"logo_path\": \"/jr4fJUF5avpcT3V0HwrIZ4t8uMn.png\",\r\n                \"name\": \"Talkback\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"production_countries\": [],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": \"1999-03-12\",\r\n                \"episode_count\": 12,\r\n                \"id\": 3033,\r\n                \"name\": \"Specials\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": null,\r\n                \"season_number\": 0\r\n            },\r\n            {\r\n                \"air_date\": \"1997-11-03\",\r\n                \"episode_count\": 6,\r\n                \"id\": 3031,\r\n                \"name\": \"Season 1\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/ouwnU2WSveF6qX22GAovP1IAWxm.jpg\",\r\n                \"season_number\": 1\r\n            },\r\n            {\r\n                \"air_date\": \"2002-11-11\",\r\n                \"episode_count\": 6,\r\n                \"id\": 3032,\r\n                \"name\": \"Season 2\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/znOKhcsRhBeW4qX2mGZvpf2TFWQ.jpg\",\r\n                \"season_number\": 2\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 7.3,\r\n        \"vote_count\": 101,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"radio\",\r\n                    \"id\": 2135\r\n                },\r\n                {\r\n                    \"name\": \"satire\",\r\n                    \"id\": 8201\r\n                },\r\n                {\r\n                    \"name\": \"sitcom\",\r\n                    \"id\": 193171\r\n                }\r\n            ]\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"5254151c19c295794036f872\",\r\n            \"air_date\": \"1997-11-03\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"1997-11-03\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f910\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f8fa\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 6732,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Peter Baynham\",\r\n                            \"original_name\": \"Peter Baynham\",\r\n                            \"popularity\": 0.75,\r\n                            \"profile_path\": \"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"5254151c19c295794036f928\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 78176,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Dominic Brigstocke\",\r\n                            \"original_name\": \"Dominic Brigstocke\",\r\n                            \"popularity\": 0.732,\r\n                            \"profile_path\": \"/15PVtHTavIAvAibjNdYc8g6kcwR.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254151d19c295794036fa67\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 75056,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Philip Fox\",\r\n                            \"original_name\": \"Philip Fox\",\r\n                            \"popularity\": 0.84,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 55843,\r\n                    \"name\": \"A Room with an Alan\",\r\n                    \"overview\": \"After the end of his chat show and the divorce from his wife Carol, Alan is now living in Linton Travel Tavern and presenting the early morning slot on Radio Norwich.\\n\\nAfter viewing a 5 bedroom house with his P.A., Lynne, Alan has a meeting with the BBC Chief Commissioner, Tony Hayers, who he needs to impress if he is to be given a second series.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/ndaTXSJ5nNtWmc0LoccBiDeMucO.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1997-11-10\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f910\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f8fa\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 6732,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Peter Baynham\",\r\n                            \"original_name\": \"Peter Baynham\",\r\n                            \"popularity\": 0.75,\r\n                            \"profile_path\": \"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"5254151c19c295794036f928\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 78176,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Dominic Brigstocke\",\r\n                            \"original_name\": \"Dominic Brigstocke\",\r\n                            \"popularity\": 0.732,\r\n                            \"profile_path\": \"/15PVtHTavIAvAibjNdYc8g6kcwR.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254151d19c295794036f9b4\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 137471,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julia Deakin\",\r\n                            \"original_name\": \"Julia Deakin\",\r\n                            \"popularity\": 3.433,\r\n                            \"profile_path\": \"/zVNNlFMPeqptJg3UWtIFsTTNi7G.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Bill\",\r\n                            \"credit_id\": \"5e0b8e8d595a560011155383\",\r\n                            \"order\": 20,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 166019,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Bill Thomas\",\r\n                            \"original_name\": \"Bill Thomas\",\r\n                            \"popularity\": 1.348,\r\n                            \"profile_path\": \"/63IssO5Y4mi3xRtZbFdYyrm2ID5.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 55840,\r\n                    \"name\": \"Alan Attraction\",\r\n                    \"overview\": \"It's Valentine's day and love is in the air. Alan is distributing chocolate oranges to every female under 50 while dealing with the fact that he cannot afford to keep his Rover 800 without sacking all the staff at Peartree Productions.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/9PGKx7pknpEBtkyXROuTO0zQOv4.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1997-11-17\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f910\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f8fa\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 6732,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Peter Baynham\",\r\n                            \"original_name\": \"Peter Baynham\",\r\n                            \"popularity\": 0.75,\r\n                            \"profile_path\": \"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"5254151c19c295794036f928\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 78176,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Dominic Brigstocke\",\r\n                            \"original_name\": \"Dominic Brigstocke\",\r\n                            \"popularity\": 0.732,\r\n                            \"profile_path\": \"/15PVtHTavIAvAibjNdYc8g6kcwR.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Peter Baxendale Thomas\",\r\n                            \"credit_id\": \"5254151c19c295794036f94d\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 117794,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Chris Morris\",\r\n                            \"original_name\": \"Chris Morris\",\r\n                            \"popularity\": 1.057,\r\n                            \"profile_path\": \"/uwaXrxAgqDUF7qr43vOnwA6Aztl.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Jenny\",\r\n                            \"credit_id\": \"5254151c19c295794036f963\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 128741,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Doon Mackichan\",\r\n                            \"original_name\": \"Doon Mackichan\",\r\n                            \"popularity\": 3.365,\r\n                            \"profile_path\": \"/dsqIBnMEGwRqruKEcpE8Be4JPSq.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Steve Bennett\",\r\n                            \"credit_id\": \"5254151c19c295794036f979\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 11108,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Simon Pegg\",\r\n                            \"original_name\": \"Simon Pegg\",\r\n                            \"popularity\": 11.104,\r\n                            \"profile_path\": \"/nOWKXxgADG98RjKyfQ7oSDfns6J.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Hugh Morris\",\r\n                            \"credit_id\": \"5ad81bfb9251413cca00a331\",\r\n                            \"order\": 19,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 6732,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Peter Baynham\",\r\n                            \"original_name\": \"Peter Baynham\",\r\n                            \"popularity\": 0.75,\r\n                            \"profile_path\": \"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 55839,\r\n                    \"name\": \"Watership Alan\",\r\n                    \"overview\": \"Just as he is ready to be the presenter of a boating holiday promotional video, Alan manages to insult Norfolk's farmers on his radio show.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/l11quKP9eYk8wKXPALfdbgEY4MU.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1997-11-24\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f910\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f8fa\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 6732,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Peter Baynham\",\r\n                            \"original_name\": \"Peter Baynham\",\r\n                            \"popularity\": 0.75,\r\n                            \"profile_path\": \"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"5254151c19c295794036f928\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 78176,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Dominic Brigstocke\",\r\n                            \"original_name\": \"Dominic Brigstocke\",\r\n                            \"popularity\": 0.732,\r\n                            \"profile_path\": \"/15PVtHTavIAvAibjNdYc8g6kcwR.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 55841,\r\n                    \"name\": \"Basic Alan\",\r\n                    \"overview\": \"Since Alan is the only weekend guest at the hotel, the manager of the Linton Travel Tavern decides to close it for renovation.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/hKnRMXTAHiJEhgGf3sjkE4ACp5E.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1997-12-01\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f910\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f8fa\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 6732,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Peter Baynham\",\r\n                            \"original_name\": \"Peter Baynham\",\r\n                            \"popularity\": 0.75,\r\n                            \"profile_path\": \"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"5254151c19c295794036f928\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 78176,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Dominic Brigstocke\",\r\n                            \"original_name\": \"Dominic Brigstocke\",\r\n                            \"popularity\": 0.732,\r\n                            \"profile_path\": \"/15PVtHTavIAvAibjNdYc8g6kcwR.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254151d19c295794036fa14\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1213132,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Arthur Mathews\",\r\n                            \"original_name\": \"Arthur Mathews\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Aidan Walsh\",\r\n                            \"credit_id\": \"5254151d19c295794036fa2a\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98107,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Graham Linehan\",\r\n                            \"original_name\": \"Graham Linehan\",\r\n                            \"popularity\": 3.119,\r\n                            \"profile_path\": \"/1N8cWaH2m0vQOdx7a99k63NoIwP.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 55842,\r\n                    \"name\": \"To Kill a Mocking Alan\",\r\n                    \"overview\": \"Alan creates a Sunday afternoon version of his radio show, inviting some executives from Irish TV over to witness the production at the travel tavern.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/mHfvm8IJNEqTLNep67040K3uAy3.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1997-12-08\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f910\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f8fa\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 6732,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Peter Baynham\",\r\n                            \"original_name\": \"Peter Baynham\",\r\n                            \"popularity\": 0.75,\r\n                            \"profile_path\": \"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"5254151c19c295794036f928\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 78176,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Dominic Brigstocke\",\r\n                            \"original_name\": \"Dominic Brigstocke\",\r\n                            \"popularity\": 0.732,\r\n                            \"profile_path\": \"/15PVtHTavIAvAibjNdYc8g6kcwR.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254151c19c295794036f8e2\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 39185,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Kevin Eldon\",\r\n                            \"original_name\": \"Kevin Eldon\",\r\n                            \"popularity\": 3.09,\r\n                            \"profile_path\": \"/5Ws7v11Y6N4bLPSed4HffjCajaX.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 55838,\r\n                    \"name\": \"Towering Alan\",\r\n                    \"overview\": \"New developments at the BBC give Alan hope that he may be able to return to TV.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/5vxVXrioye3O3dxzVYNkU8dMVeE.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 1\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/ouwnU2WSveF6qX22GAovP1IAWxm.jpg\",\r\n            \"season_number\": 1\r\n        },\r\n        \"season/2\": {\r\n            \"_id\": \"5254151c19c295794036f891\",\r\n            \"air_date\": \"2002-11-11\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2002-11-11\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f910\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f8fa\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 6732,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Peter Baynham\",\r\n                            \"original_name\": \"Peter Baynham\",\r\n                            \"popularity\": 0.75,\r\n                            \"profile_path\": \"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"5254152019c295794036fae8\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254151f19c295794036faa4\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 133037,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Andrew Burt\",\r\n                            \"original_name\": \"Andrew Burt\",\r\n                            \"popularity\": 1.312,\r\n                            \"profile_path\": \"/dZCPE6atPSZrCmFhs9fxUozIntf.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254152019c295794036fac2\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1222072,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Simon Ludders\",\r\n                            \"original_name\": \"Simon Ludders\",\r\n                            \"popularity\": 1.316,\r\n                            \"profile_path\": \"/izbYsueYkFonY4qwG034UcppAJW.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 55844,\r\n                    \"name\": \"The Talented Mr. Alan\",\r\n                    \"overview\": \"Alan's back and life is on the up: he's got the third best slot on Radio Norwich, a girlfriend and a Lexus. While at the garage, Alan meets one of his old teachers, who is persuaded to let him give a talk at the school about how he has 'bounced back'.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/dYzgiQSaGWChahAoE8qXDwTfNfq.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-11-18\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f910\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f8fa\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 6732,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Peter Baynham\",\r\n                            \"original_name\": \"Peter Baynham\",\r\n                            \"popularity\": 0.75,\r\n                            \"profile_path\": \"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"5254152019c295794036fae8\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254152019c295794036fac2\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1222072,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Simon Ludders\",\r\n                            \"original_name\": \"Simon Ludders\",\r\n                            \"popularity\": 1.316,\r\n                            \"profile_path\": \"/izbYsueYkFonY4qwG034UcppAJW.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 55845,\r\n                    \"name\": \"The Colour of Alan\",\r\n                    \"overview\": \"Alan is asked to present a sales conference for Dante's fireplaces of Reading, while Michael stays at the unfinished house after someone steals his front door.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/tIBBIaQvoaTJm303CgzTWxZh5hH.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-11-25\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f910\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f8fa\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 6732,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Peter Baynham\",\r\n                            \"original_name\": \"Peter Baynham\",\r\n                            \"popularity\": 0.75,\r\n                            \"profile_path\": \"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"5254152019c295794036fae8\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254152019c295794036fb8f\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 3930,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Phoebe Nicholls\",\r\n                            \"original_name\": \"Phoebe Nicholls\",\r\n                            \"popularity\": 2.855,\r\n                            \"profile_path\": \"/d8kT2SmUGPwYJBVapftuX2EQHRr.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254152019c295794036fba5\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 21345,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Stephen Mangan\",\r\n                            \"original_name\": \"Stephen Mangan\",\r\n                            \"popularity\": 2.374,\r\n                            \"profile_path\": \"/aBHXXvJcvyUIP3Fr0ZJDAPfvO9r.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 55847,\r\n                    \"name\": \"Brave Alan\",\r\n                    \"overview\": \"Alan makes a new friend at the BP garage called Dan. They both drink Director's bitter, use Lynx deodorant and both drive Lexi (the plural of Lexus). Dan asks Alan to present a prize at the Norfolk Bravery Awards, where Sonja is hopeful of the opportunity to try out some of her practical jokes.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/yWc6AdaC5urtCv1SrSa6R4zzch7.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-12-02\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f910\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f8fa\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 6732,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Peter Baynham\",\r\n                            \"original_name\": \"Peter Baynham\",\r\n                            \"popularity\": 0.75,\r\n                            \"profile_path\": \"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"5254152019c295794036fae8\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254152019c295794036fc4d\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 11115,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Serafinowicz\",\r\n                            \"original_name\": \"Peter Serafinowicz\",\r\n                            \"popularity\": 11.99,\r\n                            \"profile_path\": \"/atXOX0UQzIZkcnpNj1cluBdHwAE.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 55849,\r\n                    \"name\": \"Never Say Alan Again\",\r\n                    \"overview\": \"Alan plans a Bond-athon for the bank holiday weekend with Michael, but they are jeopardised when he discovers that Michael has befreinded a man called Tex, who likes American things. Meanwhile, Lynn makes a visit to her mother's grave on the first anniversary of her death.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/zPUqbSvcgMYdySVdoonjpAHPRmg.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-12-09\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f910\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f8fa\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 6732,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Peter Baynham\",\r\n                            \"original_name\": \"Peter Baynham\",\r\n                            \"popularity\": 0.75,\r\n                            \"profile_path\": \"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"5254152019c295794036fae8\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254152019c295794036fb38\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1221739,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jo Enright\",\r\n                            \"original_name\": \"Jo Enright\",\r\n                            \"popularity\": 0.62,\r\n                            \"profile_path\": \"/sJ6nPrSb1MTvTBtz85e3SrF6Ugv.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254152019c295794036fb54\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 75071,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Daniel Cerqueira\",\r\n                            \"original_name\": \"Daniel Cerqueira\",\r\n                            \"popularity\": 1.48,\r\n                            \"profile_path\": \"/aqkcXKHRFr4w1f0SfeAe0UTnacE.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 55846,\r\n                    \"name\": \"I Know What Alan Did Last Summer\",\r\n                    \"overview\": \"Alan has a visit from the Inland Revenue and is worried about the submission of a receipt for a Christmas gift from Bill Oddie. Meanwhile, he tries to convince Sonja that he is indeed friends with Bono.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/h6IZLAl3j10uW6b2j1hlNTElWX5.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-12-16\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f910\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5254151c19c295794036f8fa\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 6732,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Peter Baynham\",\r\n                            \"original_name\": \"Peter Baynham\",\r\n                            \"popularity\": 0.75,\r\n                            \"profile_path\": \"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"5254152019c295794036fae8\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 88926,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Armando Iannucci\",\r\n                            \"original_name\": \"Armando Iannucci\",\r\n                            \"popularity\": 4.652,\r\n                            \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254152019c295794036fbe0\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1836,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julia Davis\",\r\n                            \"original_name\": \"Julia Davis\",\r\n                            \"popularity\": 4.029,\r\n                            \"profile_path\": \"/wsUNCSKoNQTgSdlr9FIeIR6hRAd.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254152019c295794036fbf6\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 155530,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Rebecca Front\",\r\n                            \"original_name\": \"Rebecca Front\",\r\n                            \"popularity\": 6.016,\r\n                            \"profile_path\": \"/t0HDaqyqbHAu9xGDVvtwzLmad2e.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254152019c295794036fac2\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1222072,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Simon Ludders\",\r\n                            \"original_name\": \"Simon Ludders\",\r\n                            \"popularity\": 1.316,\r\n                            \"profile_path\": \"/izbYsueYkFonY4qwG034UcppAJW.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5254152019c295794036fc0c\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 47632,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Rob Brydon\",\r\n                            \"original_name\": \"Rob Brydon\",\r\n                            \"popularity\": 5.888,\r\n                            \"profile_path\": \"/xoKLZVwzaUgTUEvPX4vymXpC1fU.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 55848,\r\n                    \"name\": \"Alan Wide Shut\",\r\n                    \"overview\": \"Alan's house is finally ready and Sonja is angling to cohabit. Meanwhile, Alan's book Bouncing Back has been unsuccessful, and is to be pulped and Lynne is to be baptised. All is going well, but Alan can't stop the flashbacks of the painful days when he ate 4 medium sized Toblerones and drove to Dundee in bare feet.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/erZCSbAo60ngcblFbzsJAbWJfuf.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 2\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/znOKhcsRhBeW4qX2mGZvpf2TFWQ.jpg\",\r\n            \"season_number\": 2\r\n        }\r\n    },\r\n    \"63\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"/4gZmz8CiV2iXLQUc5sfCdrnxl87.jpg\",\r\n        \"created_by\": [\r\n            {\r\n                \"id\": 117794,\r\n                \"credit_id\": \"525334d719c2957940032eb7\",\r\n                \"name\": \"Chris Morris\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/uwaXrxAgqDUF7qr43vOnwA6Aztl.jpg\"\r\n            }\r\n        ],\r\n        \"episode_run_time\": [\r\n            25,\r\n            30,\r\n            168\r\n        ],\r\n        \"first_air_date\": \"1997-01-29\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"\",\r\n        \"id\": 63,\r\n        \"in_production\": false,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"1997-03-05\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"1997-03-05\",\r\n            \"episode_number\": 6,\r\n            \"id\": 2201,\r\n            \"name\": \"Decline\",\r\n            \"overview\": \"Religion falls under the spotlight in this episode, which features Terry Waite discussing how Britain has been poisoned by the gospel.\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 1,\r\n            \"still_path\": \"/o8REpbY8pQcSBJak0miLMkIMy4d.jpg\",\r\n            \"vote_average\": 0.0,\r\n            \"vote_count\": 0\r\n        },\r\n        \"name\": \"Brass Eye\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"Channel 4\",\r\n                \"id\": 26,\r\n                \"logo_path\": \"/hbifXPpM55B1fL5wPo7t72vzN78.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 6,\r\n        \"number_of_seasons\": 1,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"Brass Eye\",\r\n        \"overview\": \"Brass Eye is a UK television series of satirical news magazines. A series of six episodes aired on Channel 4 in 1997, and a further episode in 2001.\\n\\nThe series was created by Chris Morris, and written by Morris, David Quantick, Peter Baynham, Jane Bussmann, Arthur Mathews and Graham Linehan. The series was directed by Michael Cumming. It was a sequel to Morris's earlier spoof news programmes On the Hour and The Day Today. It satirised media portrayal of social ills, in particular sensationalism and creation of moral panics. The series starred Morris's The Day Today colleague Doon MacKichan and Gina McKee, Mark Heap, Simon Pegg, Julia Davis and Kevin Eldon.\",\r\n        \"popularity\": 5.929,\r\n        \"poster_path\": \"/1aC9QRe4yiZUw0qyrJfra1I30sc.jpg\",\r\n        \"production_companies\": [\r\n            {\r\n                \"id\": 13157,\r\n                \"logo_path\": \"/jr4fJUF5avpcT3V0HwrIZ4t8uMn.png\",\r\n                \"name\": \"Talkback\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"production_countries\": [],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": \"2001-07-26\",\r\n                \"episode_count\": 2,\r\n                \"id\": 147,\r\n                \"name\": \"Specials\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/uCIy8Cyt8Almbf2nr9EKKKQP1DY.jpg\",\r\n                \"season_number\": 0\r\n            },\r\n            {\r\n                \"air_date\": \"1997-01-28\",\r\n                \"episode_count\": 6,\r\n                \"id\": 146,\r\n                \"name\": \"Season 1\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/s3b5OJ2eztGWTkvyX8aAtijOKgm.jpg\",\r\n                \"season_number\": 1\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 7.7,\r\n        \"vote_count\": 57,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"dark comedy\",\r\n                    \"id\": 10123\r\n                },\r\n                {\r\n                    \"name\": \"surreal\",\r\n                    \"id\": 3307\r\n                },\r\n                {\r\n                    \"name\": \"satire\",\r\n                    \"id\": 8201\r\n                },\r\n                {\r\n                    \"name\": \"political humor\",\r\n                    \"id\": 199622\r\n                },\r\n                {\r\n                    \"name\": \"british society\",\r\n                    \"id\": 222075\r\n                }\r\n            ]\r\n        },\r\n        \"season/0\": {\r\n            \"_id\": \"525334d519c2957940032d97\",\r\n            \"air_date\": \"2001-07-26\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2001-07-26\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"525334d519c2957940032e25\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 11108,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Simon Pegg\",\r\n                            \"original_name\": \"Simon Pegg\",\r\n                            \"popularity\": 11.104,\r\n                            \"profile_path\": \"/nOWKXxgADG98RjKyfQ7oSDfns6J.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a1259251416e3900254b\",\r\n                            \"order\": 6,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1836,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julia Davis\",\r\n                            \"original_name\": \"Julia Davis\",\r\n                            \"popularity\": 4.029,\r\n                            \"profile_path\": \"/wsUNCSKoNQTgSdlr9FIeIR6hRAd.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a15a9251416e2d00259a\",\r\n                            \"order\": 8,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 110001,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Phil Collins\",\r\n                            \"original_name\": \"Phil Collins\",\r\n                            \"popularity\": 2.657,\r\n                            \"profile_path\": \"/zbIUgUJ4j2AOUerDoeOTWCvx9P2.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a16cc3a3680cc70027c6\",\r\n                            \"order\": 9,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1220503,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gary Lineker\",\r\n                            \"original_name\": \"Gary Lineker\",\r\n                            \"popularity\": 0.675,\r\n                            \"profile_path\": \"/mfHN34kbcqbkN8zYyfjE5fk5dpX.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 2203,\r\n                    \"name\": \"Paedogeddon!\",\r\n                    \"overview\": \"In this episode, celebrities were this time duped into endorsing an anti-paedophile charity by denouncing a program in which paedophiles could view children through a webcam and, wearing special gloves allowing them to molest any part of the child they so wished by simply touching their monitor.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": \"/whG3TZ7tOi5zZbeyspxtB25mpmh.jpg\",\r\n                    \"vote_average\": 10.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 2204,\r\n                    \"name\": \"Torque TV - Pilot Episode\",\r\n                    \"overview\": \"\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Specials\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/uCIy8Cyt8Almbf2nr9EKKKQP1DY.jpg\",\r\n            \"season_number\": 0\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"525334d519c2957940032d84\",\r\n            \"air_date\": \"1997-01-28\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"1997-01-29\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"job\": \"Director\",\r\n                            \"department\": \"Directing\",\r\n                            \"credit_id\": \"5c4c41790e0a264965d3487f\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1622867,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Michael Cumming\",\r\n                            \"original_name\": \"Michael Cumming\",\r\n                            \"popularity\": 0.98,\r\n                            \"profile_path\": \"/eK0frF3vjp3Ej4hbjpwu5QtSEg.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a09dc3a3682c5d000291\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1243686,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Albert Welling\",\r\n                            \"original_name\": \"Albert Welling\",\r\n                            \"popularity\": 1.976,\r\n                            \"profile_path\": \"/eB6mRbUBmgBza8lwceFkrI0ThBE.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 2196,\r\n                    \"name\": \"Animals\",\r\n                    \"overview\": \"The show is split into two halves. The first half delves into the world of animal fetishes, with helpful contributions from Paul Daniels and Carla Lane. The second half focuses on the elephant, who has trapped her trunk up her anus.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/6SY4BLSb0md3JvSRfULOFbjbxqQ.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1997-02-05\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"job\": \"Director\",\r\n                            \"department\": \"Directing\",\r\n                            \"credit_id\": \"5c4c41790e0a264965d3487f\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1622867,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Michael Cumming\",\r\n                            \"original_name\": \"Michael Cumming\",\r\n                            \"popularity\": 0.98,\r\n                            \"profile_path\": \"/eK0frF3vjp3Ej4hbjpwu5QtSEg.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a0dcc3a3680cca0028df\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 42641,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Claire Skinner\",\r\n                            \"original_name\": \"Claire Skinner\",\r\n                            \"popularity\": 6.369,\r\n                            \"profile_path\": \"/odJEMUo4utv11ylHLmrOgbhUQHZ.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 2198,\r\n                    \"name\": \"Drugs\",\r\n                    \"overview\": \"The voices of Bernard Manning, Noel Edmonds and David Amess MP attempt to save British schoolchildren from the horror drugs coming from Eastern Europe, Clarky Caps, Yellow Bentines and the made-up Cake.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/xMhlLkOxSauQEHmFsELW4r4sa59.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1997-02-12\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"job\": \"Director\",\r\n                            \"department\": \"Directing\",\r\n                            \"credit_id\": \"5c4c41790e0a264965d3487f\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1622867,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Michael Cumming\",\r\n                            \"original_name\": \"Michael Cumming\",\r\n                            \"popularity\": 0.98,\r\n                            \"profile_path\": \"/eK0frF3vjp3Ej4hbjpwu5QtSEg.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a09dc3a3682c5d000291\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1243686,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Albert Welling\",\r\n                            \"original_name\": \"Albert Welling\",\r\n                            \"popularity\": 1.976,\r\n                            \"profile_path\": \"/eB6mRbUBmgBza8lwceFkrI0ThBE.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a0dcc3a3680cca0028df\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 42641,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Claire Skinner\",\r\n                            \"original_name\": \"Claire Skinner\",\r\n                            \"popularity\": 6.369,\r\n                            \"profile_path\": \"/odJEMUo4utv11ylHLmrOgbhUQHZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a1409251416e2800257a\",\r\n                            \"order\": 7,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 151344,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Hugh Dennis\",\r\n                            \"original_name\": \"Hugh Dennis\",\r\n                            \"popularity\": 4.701,\r\n                            \"profile_path\": \"/7JH7OE7Ln4Wx74BaOYo8yaZ6Rwh.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a1889251416e2d0025a7\",\r\n                            \"order\": 10,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 29859,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Richard Briers\",\r\n                            \"original_name\": \"Richard Briers\",\r\n                            \"popularity\": 6.232,\r\n                            \"profile_path\": \"/gNsEDp8K7dRYVxYeHNgelOiOO97.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 2197,\r\n                    \"name\": \"Science\",\r\n                    \"overview\": \"Tomorrow's World meets Watchdog meets Wired. Science gets the Brass Eye treatment. A number of celebs again espouse their scripted knowledge of 'mad' experiments and covered up and untold stories of electricity falling from pylons and frogs being grown with rabbit's feet.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/suEitGp0oiF38abLgfoX6Cgru3D.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1997-02-19\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"job\": \"Director\",\r\n                            \"department\": \"Directing\",\r\n                            \"credit_id\": \"5c4c41790e0a264965d3487f\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1622867,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Michael Cumming\",\r\n                            \"original_name\": \"Michael Cumming\",\r\n                            \"popularity\": 0.98,\r\n                            \"profile_path\": \"/eK0frF3vjp3Ej4hbjpwu5QtSEg.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a09dc3a3682c5d000291\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1243686,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Albert Welling\",\r\n                            \"original_name\": \"Albert Welling\",\r\n                            \"popularity\": 1.976,\r\n                            \"profile_path\": \"/eB6mRbUBmgBza8lwceFkrI0ThBE.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a0bdc3a36859ed0009cc\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 18022,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gina McKee\",\r\n                            \"original_name\": \"Gina McKee\",\r\n                            \"popularity\": 5.264,\r\n                            \"profile_path\": \"/rHL7GGeFZ2x9PbFL2P3hVkLfvAS.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a106c3a36859ed0009e9\",\r\n                            \"order\": 5,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1250,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Alexander Armstrong\",\r\n                            \"original_name\": \"Alexander Armstrong\",\r\n                            \"popularity\": 3.059,\r\n                            \"profile_path\": \"/e0kvGIfrjah4UmbUdKKobTgcxEd.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 2200,\r\n                    \"name\": \"Sex\",\r\n                    \"overview\": \"Chris Morris casts a satirical eye over the subject of sex and its relationship to society. Helpful contributors include Peter Stringfellow and David Sullivan.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/unJAYW1IhsUd0Xzo4rIpwDzC95q.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1997-01-26\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"job\": \"Director\",\r\n                            \"department\": \"Directing\",\r\n                            \"credit_id\": \"5c4c41790e0a264965d3487f\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1622867,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Michael Cumming\",\r\n                            \"original_name\": \"Michael Cumming\",\r\n                            \"popularity\": 0.98,\r\n                            \"profile_path\": \"/eK0frF3vjp3Ej4hbjpwu5QtSEg.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a0bdc3a36859ed0009cc\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 18022,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gina McKee\",\r\n                            \"original_name\": \"Gina McKee\",\r\n                            \"popularity\": 5.264,\r\n                            \"profile_path\": \"/rHL7GGeFZ2x9PbFL2P3hVkLfvAS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 2199,\r\n                    \"name\": \"Crime\",\r\n                    \"overview\": \"Chris Morris turns his laser eye on to crime. Highlights include revelations of how elephants are being used to disperse rioters, and Vanessa Feltz's message to murderers.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/oLcI6eFu8nKy5TlKCEkV9nfkYBF.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1997-03-05\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"job\": \"Director\",\r\n                            \"department\": \"Directing\",\r\n                            \"credit_id\": \"5c4c41790e0a264965d3487f\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1622867,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Michael Cumming\",\r\n                            \"original_name\": \"Michael Cumming\",\r\n                            \"popularity\": 0.98,\r\n                            \"profile_path\": \"/eK0frF3vjp3Ej4hbjpwu5QtSEg.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a0bdc3a36859ed0009cc\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 18022,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gina McKee\",\r\n                            \"original_name\": \"Gina McKee\",\r\n                            \"popularity\": 5.264,\r\n                            \"profile_path\": \"/rHL7GGeFZ2x9PbFL2P3hVkLfvAS.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5756a0dcc3a3680cca0028df\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 42641,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Claire Skinner\",\r\n                            \"original_name\": \"Claire Skinner\",\r\n                            \"popularity\": 6.369,\r\n                            \"profile_path\": \"/odJEMUo4utv11ylHLmrOgbhUQHZ.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 2201,\r\n                    \"name\": \"Decline\",\r\n                    \"overview\": \"Religion falls under the spotlight in this episode, which features Terry Waite discussing how Britain has been poisoned by the gospel.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/o8REpbY8pQcSBJak0miLMkIMy4d.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 1\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/s3b5OJ2eztGWTkvyX8aAtijOKgm.jpg\",\r\n            \"season_number\": 1\r\n        }\r\n    },\r\n    \"2491\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": null,\r\n        \"created_by\": [\r\n            {\r\n                \"id\": 7318,\r\n                \"credit_id\": \"5f4a7972cfe48f0035b1ff6a\",\r\n                \"name\": \"Peter Kay\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n            }\r\n        ],\r\n        \"episode_run_time\": [\r\n            30\r\n        ],\r\n        \"first_air_date\": \"2004-11-12\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"http://www.channel4.com/programmes/max-and-paddys-road-to-nowhere\",\r\n        \"id\": 2491,\r\n        \"in_production\": false,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"2004-12-17\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"2004-12-17\",\r\n            \"episode_number\": 6,\r\n            \"id\": 189541,\r\n            \"name\": \"\",\r\n            \"overview\": \"A speed camera is the catalyst for a string of bad luck.\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 1,\r\n            \"still_path\": \"/2wut6iKXDzcCsINepGLsaVwqn6c.jpg\",\r\n            \"vote_average\": 0.0,\r\n            \"vote_count\": 0\r\n        },\r\n        \"name\": \"Max and Paddy's Road to Nowhere\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"Channel 4\",\r\n                \"id\": 26,\r\n                \"logo_path\": \"/hbifXPpM55B1fL5wPo7t72vzN78.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 6,\r\n        \"number_of_seasons\": 1,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"Max and Paddy's Road to Nowhere\",\r\n        \"overview\": \"Max And Paddy's Road To Nowhere is the much-loved sequel to Peter Kay's critically-acclaimed comedy series, \\\"Phoenix Nights\\\". Written by and starring Peter Kay and Patrick McGuinness, this six-part comedy/drama series is the story of clueless Phoenix Club bouncers Max (Kay) and Paddy (McGuinness), as they escape clubland in their prized motor-home and take to the open highway.\",\r\n        \"popularity\": 3.766,\r\n        \"poster_path\": \"/lenZvwj3gCXl4GDZlxTzWi5L4f1.jpg\",\r\n        \"production_companies\": [\r\n            {\r\n                \"id\": 57680,\r\n                \"logo_path\": null,\r\n                \"name\": \"Phil McIntyre Television\",\r\n                \"origin_country\": \"\"\r\n            },\r\n            {\r\n                \"id\": 52368,\r\n                \"logo_path\": null,\r\n                \"name\": \"Goodnight Vienna Productions\",\r\n                \"origin_country\": \"\"\r\n            },\r\n            {\r\n                \"id\": 5778,\r\n                \"logo_path\": \"/2loyoQweDxvotH3AknfL2zhsthg.png\",\r\n                \"name\": \"Channel 4 Television\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"production_countries\": [],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": null,\r\n                \"episode_count\": 8,\r\n                \"id\": 7916,\r\n                \"name\": \"Specials\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/8xKKjzr4aAe0w4Dzrbc3hvfwyEv.jpg\",\r\n                \"season_number\": 0\r\n            },\r\n            {\r\n                \"air_date\": \"2004-11-12\",\r\n                \"episode_count\": 6,\r\n                \"id\": 7915,\r\n                \"name\": \"Series 1\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/88wrL9BZXDRNmSWsGrnEg06NFGD.jpg\",\r\n                \"season_number\": 1\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 7.9,\r\n        \"vote_count\": 20,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"england\",\r\n                    \"id\": 392\r\n                },\r\n                {\r\n                    \"name\": \"recreational vehicle\",\r\n                    \"id\": 163795\r\n                },\r\n                {\r\n                    \"name\": \"sitcom\",\r\n                    \"id\": 193171\r\n                }\r\n            ]\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"52573aba19c29531db02be94\",\r\n            \"air_date\": \"2004-11-12\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2004-11-12\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52573abb19c29531db02beca\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.627,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52573abb19c29531db02bede\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.627,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Gypsy Joe\",\r\n                            \"credit_id\": \"5f4a7ddcd399e60032cb0ba6\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 112827,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Brendan O'Carroll\",\r\n                            \"original_name\": \"Brendan O'Carroll\",\r\n                            \"popularity\": 2.994,\r\n                            \"profile_path\": \"/akNqwQuSon0Oy9Z81zMXarXaQGh.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 189535,\r\n                    \"name\": \"Episode 1\",\r\n                    \"overview\": \"Living in such a confined space proves more difficult than they first thought and, without any suitable home entertainment, they end up sampling the local nightlife where Max's new dance moves are a hit with the infamous Belgrano sisters.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/2wut6iKXDzcCsINepGLsaVwqn6c.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-11-19\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52573abb19c29531db02beca\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.627,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52573abb19c29531db02bede\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.627,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Mick Bustin\",\r\n                            \"credit_id\": \"5f4a7e2a90dde00037adbdd8\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1092868,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noddy Holder\",\r\n                            \"original_name\": \"Noddy Holder\",\r\n                            \"popularity\": 3.492,\r\n                            \"profile_path\": \"/rs5bRDPXkYxQffUIDeoibWXRbWw.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Billy 'The Butcher' Shannon\",\r\n                            \"credit_id\": \"5f4a7e7cce6c4c0036a110c7\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1231667,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Craig Cheetham\",\r\n                            \"original_name\": \"Craig Cheetham\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": \"/kvLoDPkCDTA3drPehw0bva4HJTS.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Tina\",\r\n                            \"credit_id\": \"5f4a7f0ea1a9ba00355a8a40\",\r\n                            \"order\": 5,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1753731,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Lisa Hammond\",\r\n                            \"original_name\": \"Lisa Hammond\",\r\n                            \"popularity\": 3.23,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Brian Potter\",\r\n                            \"credit_id\": \"5fca9703e1ad790040f73d0e\",\r\n                            \"order\": 9,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.627,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 189536,\r\n                    \"name\": \"Episode 2\",\r\n                    \"overview\": \"Paddy is soon disenchanted after dabbling in the world of adult films and, on the road, disaster strikes when the motor home breaks down. This leads to a night spent sleeping rough in the woods with Max engaging in a few revealing campfire confessions.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/2wut6iKXDzcCsINepGLsaVwqn6c.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-11-26\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52573abb19c29531db02beca\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.627,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52573abb19c29531db02bede\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.627,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Tina\",\r\n                            \"credit_id\": \"5f4a7f0ea1a9ba00355a8a40\",\r\n                            \"order\": 5,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1753731,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Lisa Hammond\",\r\n                            \"original_name\": \"Lisa Hammond\",\r\n                            \"popularity\": 3.23,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"The Wolfster\",\r\n                            \"credit_id\": \"5f4a8050ce6c4c0034a1e55f\",\r\n                            \"order\": 8,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 118619,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Tony Mooney\",\r\n                            \"original_name\": \"Tony Mooney\",\r\n                            \"popularity\": 1.242,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 189537,\r\n                    \"name\": \"Episode 3\",\r\n                    \"overview\": \"Max bumps into one of his old school friends, only to find out a dark secret that turns his life upside-down.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/2wut6iKXDzcCsINepGLsaVwqn6c.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-12-03\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52573abb19c29531db02beca\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.627,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52573abb19c29531db02bede\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.627,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Tina\",\r\n                            \"credit_id\": \"5f4a7f0ea1a9ba00355a8a40\",\r\n                            \"order\": 5,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1753731,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Lisa Hammond\",\r\n                            \"original_name\": \"Lisa Hammond\",\r\n                            \"popularity\": 3.23,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Raymond the Bastard\",\r\n                            \"credit_id\": \"5f4a7f46858678003815b3b0\",\r\n                            \"order\": 5,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1862015,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Everal Walsh\",\r\n                            \"original_name\": \"Everal Walsh\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": \"/iAAGn6ZDsEykjPpKqK6iMBDHU7c.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"The Wolfster\",\r\n                            \"credit_id\": \"5f4a8050ce6c4c0034a1e55f\",\r\n                            \"order\": 8,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 118619,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Tony Mooney\",\r\n                            \"original_name\": \"Tony Mooney\",\r\n                            \"popularity\": 1.242,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Brian Potter\",\r\n                            \"credit_id\": \"5fca9703e1ad790040f73d0e\",\r\n                            \"order\": 9,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.627,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 189539,\r\n                    \"name\": \"Episode 4\",\r\n                    \"overview\": \"Max and Paddy are in prison and, to make matters worse, they have an unwelcome visitor.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/2wut6iKXDzcCsINepGLsaVwqn6c.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-12-10\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52573abb19c29531db02beca\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.627,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52573abb19c29531db02bede\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.627,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Old Farmer\",\r\n                            \"credit_id\": \"5f4a7ff0cca7de003557e209\",\r\n                            \"order\": 6,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1317170,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Graham Walker\",\r\n                            \"original_name\": \"Graham Walker\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 189540,\r\n                    \"name\": \"Episode 5\",\r\n                    \"overview\": \"Down on their luck, Max and Paddy quite literally hit on some good fortune.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/2wut6iKXDzcCsINepGLsaVwqn6c.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-12-17\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52573abb19c29531db02beca\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.627,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52573abb19c29531db02bede\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.627,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Billy 'The Butcher' Shannon\",\r\n                            \"credit_id\": \"5f4a7e7cce6c4c0036a110c7\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1231667,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Craig Cheetham\",\r\n                            \"original_name\": \"Craig Cheetham\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": \"/kvLoDPkCDTA3drPehw0bva4HJTS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 189541,\r\n                    \"name\": \"Episode 6\",\r\n                    \"overview\": \"A speed camera is the catalyst for a string of bad luck.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/2wut6iKXDzcCsINepGLsaVwqn6c.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Series 1\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/88wrL9BZXDRNmSWsGrnEg06NFGD.jpg\",\r\n            \"season_number\": 1\r\n        }\r\n    },\r\n    \"34440\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"/bTsOxyYcypnKl6eGCw5Czm2WGKx.jpg\",\r\n        \"created_by\": [],\r\n        \"episode_run_time\": [\r\n            30\r\n        ],\r\n        \"first_air_date\": \"2010-11-01\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"https://www.sky.com/watch/channel/sky-one/the-trip-to\",\r\n        \"id\": 34440,\r\n        \"in_production\": true,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"2020-03-31\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"2020-03-31\",\r\n            \"episode_number\": 6,\r\n            \"id\": 2183353,\r\n            \"name\": \"The Mani to Ithaca\",\r\n            \"overview\": \"Rob and Steve's island-hopping tour is cut short in King Nestor's home of Pilos as Steve receives some bad news. It makes for an emotional journey home.\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 4,\r\n            \"still_path\": \"/nDsucJiNZSvovFUAhRXqaVp7dxe.jpg\",\r\n            \"vote_average\": 0.0,\r\n            \"vote_count\": 0\r\n        },\r\n        \"name\": \"The Trip\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"Sky One\",\r\n                \"id\": 214,\r\n                \"logo_path\": \"/dVBHOr0nYCx9GSNesTVb1TT52Xj.png\",\r\n                \"origin_country\": \"GB\"\r\n            },\r\n            {\r\n                \"name\": \"BBC Two\",\r\n                \"id\": 332,\r\n                \"logo_path\": \"/6kl5tMuct7u3ej5myL4c9QQVSW1.png\",\r\n                \"origin_country\": \"GB\"\r\n            },\r\n            {\r\n                \"name\": \"Sky Atlantic\",\r\n                \"id\": 1063,\r\n                \"logo_path\": \"/6es7UmBjk2HTSZKq3NbtAxYEGCx.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 24,\r\n        \"number_of_seasons\": 4,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"The Trip\",\r\n        \"overview\": \"Steve agrees to review six restaurants and takes Rob with him.\",\r\n        \"popularity\": 7.666,\r\n        \"poster_path\": \"/tjyH4hjgYAKT5TDEAtgSj7uQ2X0.jpg\",\r\n        \"production_companies\": [],\r\n        \"production_countries\": [\r\n            {\r\n                \"iso_3166_1\": \"GB\",\r\n                \"name\": \"United Kingdom\"\r\n            }\r\n        ],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": null,\r\n                \"episode_count\": 21,\r\n                \"id\": 45217,\r\n                \"name\": \"Specials\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": null,\r\n                \"season_number\": 0\r\n            },\r\n            {\r\n                \"air_date\": \"2010-11-01\",\r\n                \"episode_count\": 6,\r\n                \"id\": 45216,\r\n                \"name\": \"The Trip\",\r\n                \"overview\": \"Steve and Rob review restaurants in the north of England.\",\r\n                \"poster_path\": \"/3fqfKF6mOQg3MRZgrGub3oi9Vql.jpg\",\r\n                \"season_number\": 1\r\n            },\r\n            {\r\n                \"air_date\": \"2014-04-04\",\r\n                \"episode_count\": 6,\r\n                \"id\": 61694,\r\n                \"name\": \"The Trip to Italy\",\r\n                \"overview\": \"Steve and Rob review six restaurants on a road trip around Italy.\",\r\n                \"poster_path\": \"/mVCjKfe2Jor8EoBQnGdVfhxQYyR.jpg\",\r\n                \"season_number\": 2\r\n            },\r\n            {\r\n                \"air_date\": \"2017-04-06\",\r\n                \"episode_count\": 6,\r\n                \"id\": 87171,\r\n                \"name\": \"The Trip to Spain\",\r\n                \"overview\": \"Steve and Rob take a once-in-a-lifetime coast-to-coast trip down the length of Spain in search of culture, cuisine and the perfect Mick Jagger impersonation.\",\r\n                \"poster_path\": \"/7VVKaeSHIHLf5yhOHZUEGPJuIaM.jpg\",\r\n                \"season_number\": 3\r\n            },\r\n            {\r\n                \"air_date\": \"2020-03-03\",\r\n                \"episode_count\": 6,\r\n                \"id\": 143741,\r\n                \"name\": \"The Trip to Greece\",\r\n                \"overview\": \"Steve Coogan and Rob Brydon return as their fictional alter-egos in the fourth instalment of director Michael Winterbottom's perfectly seasoned comedy road trips.\",\r\n                \"poster_path\": \"/104loUpdRaKBUCcADxW4EjQ8Rkb.jpg\",\r\n                \"season_number\": 4\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Returning Series\",\r\n        \"tagline\": \"Eat, drink and try not to kill each other.\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 7.6,\r\n        \"vote_count\": 45,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"restaurant\",\r\n                    \"id\": 1946\r\n                },\r\n                {\r\n                    \"name\": \"travel\",\r\n                    \"id\": 9935\r\n                },\r\n                {\r\n                    \"name\": \"sitcom\",\r\n                    \"id\": 193171\r\n                }\r\n            ]\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"5258d89a760ee346617198cc\",\r\n            \"air_date\": \"2010-11-01\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2010-11-01\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"job\": \"Director\",\r\n                            \"department\": \"Directing\",\r\n                            \"credit_id\": \"5258d89a760ee346617198f3\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 172,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Michael Winterbottom\",\r\n                            \"original_name\": \"Michael Winterbottom\",\r\n                            \"popularity\": 2.764,\r\n                            \"profile_path\": \"/r4cpuukDMG3xLS8tEaTV7X2IxnO.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 786967,\r\n                    \"name\": \"The Inn at Whitewell\",\r\n                    \"overview\": \"Steve is commissioned to review half a dozen restaurants and plans a trip around the north of England with his food loving American girlfriend. But when his girlfriend decides to leave him and return to the States, Steve reluctantly calls Rob, the only person he can think of who will be available.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2010-11-08\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"job\": \"Director\",\r\n                            \"department\": \"Directing\",\r\n                            \"credit_id\": \"5258d89a760ee346617198f3\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 172,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Michael Winterbottom\",\r\n                            \"original_name\": \"Michael Winterbottom\",\r\n                            \"popularity\": 2.764,\r\n                            \"profile_path\": \"/r4cpuukDMG3xLS8tEaTV7X2IxnO.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Ben Stiller\",\r\n                            \"credit_id\": \"5829bd22c3a368623f013e3a\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7399,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Ben Stiller\",\r\n                            \"original_name\": \"Ben Stiller\",\r\n                            \"popularity\": 13.897,\r\n                            \"profile_path\": \"/scgpxhI05JpdNXXfmpK6z0rPOWN.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 786966,\r\n                    \"name\": \"L'Enclume\",\r\n                    \"overview\": \"Steve and Rob enjoy a taster menu at L'Enclume in Cartmel.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2010-11-15\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"job\": \"Director\",\r\n                            \"department\": \"Directing\",\r\n                            \"credit_id\": \"5258d89a760ee346617198f3\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 172,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Michael Winterbottom\",\r\n                            \"original_name\": \"Michael Winterbottom\",\r\n                            \"popularity\": 2.764,\r\n                            \"profile_path\": \"/r4cpuukDMG3xLS8tEaTV7X2IxnO.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 786965,\r\n                    \"name\": \"Holbeck Ghyll\",\r\n                    \"overview\": \"Steve and Rob stay at Coleridge's old home, Greta Hall, in Keswick. They visit Dove Cottage and lunch at Holbeck Ghyll.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2010-11-22\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"job\": \"Director\",\r\n                            \"department\": \"Directing\",\r\n                            \"credit_id\": \"5258d89a760ee346617198f3\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 172,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Michael Winterbottom\",\r\n                            \"original_name\": \"Michael Winterbottom\",\r\n                            \"popularity\": 2.764,\r\n                            \"profile_path\": \"/r4cpuukDMG3xLS8tEaTV7X2IxnO.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 786964,\r\n                    \"name\": \"Hipping Hall\",\r\n                    \"overview\": \"Steve and Rob visit Hipping Hall near Kirkby Lonsdale as they continue their culinary tour of the north of England, reviewing restaurants for a Sunday newspaper.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2010-11-29\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"job\": \"Director\",\r\n                            \"department\": \"Directing\",\r\n                            \"credit_id\": \"5258d89a760ee346617198f3\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 172,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Michael Winterbottom\",\r\n                            \"original_name\": \"Michael Winterbottom\",\r\n                            \"popularity\": 2.764,\r\n                            \"profile_path\": \"/r4cpuukDMG3xLS8tEaTV7X2IxnO.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 786969,\r\n                    \"name\": \"The Yorke Arms\",\r\n                    \"overview\": \"Steve and Rob visit the world-famous Malham limestone pavement and eat at the Yorke Arms, as they continue their culinary tour of the north of England, reviewing restaurants for a Sunday newspaper.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2010-12-06\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"job\": \"Director\",\r\n                            \"department\": \"Directing\",\r\n                            \"credit_id\": \"5258d89a760ee346617198f3\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 172,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Michael Winterbottom\",\r\n                            \"original_name\": \"Michael Winterbottom\",\r\n                            \"popularity\": 2.764,\r\n                            \"profile_path\": \"/r4cpuukDMG3xLS8tEaTV7X2IxnO.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 786968,\r\n                    \"name\": \"The Angel at Hetton\",\r\n                    \"overview\": \"Steve and Rob visit Bolton Abbey and breakfast at The Angel at Hetton. On their way back home to London they stop off at Steve's parents' house.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/lH2apoJgiJ8Cqat7YiDNufKioY1.jpg\",\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                }\r\n            ],\r\n            \"name\": \"The Trip\",\r\n            \"overview\": \"Steve and Rob review restaurants in the north of England.\",\r\n            \"poster_path\": \"/3fqfKF6mOQg3MRZgrGub3oi9Vql.jpg\",\r\n            \"season_number\": 1\r\n        },\r\n        \"season/2\": {\r\n            \"_id\": \"53bd3a48c3a3684ce90013ae\",\r\n            \"air_date\": \"2014-04-04\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2014-04-04\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 994644,\r\n                    \"name\": \"Il Cenobio dei Dogi, Camogli\",\r\n                    \"overview\": \"Rob Brydon and Steve Coogan are asked by The Observer to do another series of restaurant reviews. The pair have six meals in six different places on a road trip around Italy.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/fRWWdTwUOI1PSMSJhv8XvLQOhBP.jpg\",\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2014-04-11\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 994645,\r\n                    \"name\": \"Da Giovanni, San Fruttuoso\",\r\n                    \"overview\": \"Rob and Steve go on a boat trip, taking in a local restaurant and Percy Shelley's house for a picture before continuing their journey and arriving at another restaurant.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/lxkpnlrRiX6ugfzk8CVTMGtX4fT.jpg\",\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2014-04-18\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 994646,\r\n                    \"name\": \"La Suvera, Pievescola\",\r\n                    \"overview\": \"Steve and Rob visit Viareggio in Tuscany, where Shelley's body was washed ashore, then have lunch at Trattoria Albana.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/c3TZ39oXPEDxestdMjlshLE85t9.jpg\",\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2014-04-25\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 994647,\r\n                    \"name\": \"The Hotel Locarno, Rome\",\r\n                    \"overview\": \"Rob Brydon and Steve Coogan's journey continues. They meet Emma and photographer Yolanda before they arrive in Rome and visit the Keats museum.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/u9Af49s28rTjN0Wv3ZjvDEO8Hdf.jpg\",\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2014-05-02\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 994648,\r\n                    \"name\": \"Villa Cimbrone, Ravello\",\r\n                    \"overview\": \"Rob Brydon and Steve Coogan journey around Italy to review six restaurants. The pair arrive in Ravello and Rob discovers he has a movie role.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/75OLELGWcBCXKxmGYnJUhClvCvZ.jpg\",\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2014-05-09\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 994649,\r\n                    \"name\": \"Il Riccio, Capri\",\r\n                    \"overview\": \"The trip takes a detour to Capri so that Steve's son can join them.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/2GBIfjvwtkHiUedOrY8atjXTm0i.jpg\",\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                }\r\n            ],\r\n            \"name\": \"The Trip to Italy\",\r\n            \"overview\": \"Steve and Rob review six restaurants on a road trip around Italy.\",\r\n            \"poster_path\": \"/mVCjKfe2Jor8EoBQnGdVfhxQYyR.jpg\",\r\n            \"season_number\": 2\r\n        },\r\n        \"season/3\": {\r\n            \"_id\": \"58e669af9251412810041987\",\r\n            \"air_date\": \"2017-04-06\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2017-04-06\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Chloe\",\r\n                            \"credit_id\": \"59828e42c3a3683279001906\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1862774,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Tessa Walker\",\r\n                            \"original_name\": \"Tessa Walker\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Charlie\",\r\n                            \"credit_id\": \"59828e4f9251413f3f001a6b\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1862775,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Charlie Jeffreys\",\r\n                            \"original_name\": \"Charlie Jeffreys\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Aurore\",\r\n                            \"credit_id\": \"59828e6492514141b3001929\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1862776,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Aurore Delion\",\r\n                            \"original_name\": \"Aurore Delion\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Altamira Guide\",\r\n                            \"credit_id\": \"59828e7992514141b300193f\",\r\n                            \"order\": 5,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1862777,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Victor M. Magaldi\",\r\n                            \"original_name\": \"Victor M. Magaldi\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Txoko Waiter\",\r\n                            \"credit_id\": \"59828e89c3a3682f78001a9a\",\r\n                            \"order\": 6,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1862778,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Ida Camara\",\r\n                            \"original_name\": \"Ida Camara\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Waitress in Bar\",\r\n                            \"credit_id\": \"59828e9b9251413d0e001c8f\",\r\n                            \"order\": 7,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1862779,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Itxaso Roteta\",\r\n                            \"original_name\": \"Itxaso Roteta\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 1300311,\r\n                    \"name\": \"Txoko\",\r\n                    \"overview\": \"The pair disembark from the ferry at Santander and take in the Cave of Altamira before visiting the picturesque port of Getaria - home to the acclaimed restaurant Txoko, and also the occasional rainstorm.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2017-04-13\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"job\": \"Director of Photography\",\r\n                            \"department\": \"Camera\",\r\n                            \"credit_id\": \"59828eeec3a3682f78001b0a\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1798643,\r\n                            \"known_for_department\": \"Camera\",\r\n                            \"name\": \"James Clarke\",\r\n                            \"original_name\": \"James Clarke\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 1343976,\r\n                    \"name\": \"Etxebarri\",\r\n                    \"overview\": \"Steve and Rob begin the second leg of their culinary odyssey as they head through the Basque Country to Etxebarri - a Michelin-starred restaurant close to Bilbao. After experiencing a delectable eight-course tasting menu (during which Rob confirms to Steve that the Welsh word for carrot is 'moron'), the pair head towards Sos del Rey Católico - taking an opportunity to belt out ABBA's SOS along the way.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 8.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2017-04-20\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 1343980,\r\n                    \"name\": \"La Posada del Laurel\",\r\n                    \"overview\": \"While taking in some local cuisine, the pair have time to reminisce over those who sadly left us in 2016, and then compete over who can do the better impersonation of them. Later they visit one of the many attractions down the 'Dinosaur Road', allowing Rob to pose for a picture in front of a fibreglass iguanodon. \\\"Which one is the dinosaur?\\\" quips Steve.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2017-04-27\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 1343981,\r\n                    \"name\": \"Nöla\",\r\n                    \"overview\": \"After checking out the Cathedral of Sigüenza, Steve and Rob head to Cuenca where Steve is irked by a travelling musician.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2017-05-04\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 1343982,\r\n                    \"name\": \"Parador de Almagro\",\r\n                    \"overview\": \"In La Mancha, Steve and Rob dress the part as Don Quixote and Sancho Panza, before treading the boards at the Corral de Comedias.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2017-05-11\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 1343983,\r\n                    \"name\": \"El Refectorium\",\r\n                    \"overview\": \"In the last leg of their tour, the duo depart Granada and reach Malaga, where Steve receives some more unfortunate news.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"The Trip to Spain\",\r\n            \"overview\": \"Steve and Rob take a once-in-a-lifetime coast-to-coast trip down the length of Spain in search of culture, cuisine and the perfect Mick Jagger impersonation.\",\r\n            \"poster_path\": \"/7VVKaeSHIHLf5yhOHZUEGPJuIaM.jpg\",\r\n            \"season_number\": 3\r\n        },\r\n        \"season/4\": {\r\n            \"_id\": \"5e4f189e283ed900155f4823\",\r\n            \"air_date\": \"2020-03-03\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2020-03-03\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 2170363,\r\n                    \"name\": \"Troy to Kavala\",\r\n                    \"overview\": \"Steve Coogan and Rob Brydon return as their fictional alter-egos as they embark on a gastronomic, island hopping trip around Greece.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/8L3EiUCeSDXliyAcqVMeZIEa6rZ.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2020-03-03\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 2183342,\r\n                    \"name\": \"Kavala to Pelion\",\r\n                    \"overview\": \"Steve Coogan and Rob Brydon's gastro tour takes them to the beach home of Mamma Mia!, where their lunchtime chat is about Alexander the Great and Ray Winstone.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/aH7B7zd3UBLet1plWQbWEchs1oC.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2020-03-10\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 2183344,\r\n                    \"name\": \"Pelion to Athens\",\r\n                    \"overview\": \"Rob and Steve enjoy a rainy day at Delphi, some Michelin-starred seafood and a battle to see who can do the greatest impressions.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/lyZgkjdRhFPpv2cZGsp1RrXNcbp.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2020-03-17\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 2183345,\r\n                    \"name\": \"Athens to Hydra\",\r\n                    \"overview\": \"Rob and Steve strike a pose at the Epidaurus Amphitheatre. Then, it's on to Hydra for a long lunch, before Steve finds romance on the waterfront.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/tzt5xm5MN8Oggy9rDKXZJswWmzs.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2020-03-24\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 2183350,\r\n                    \"name\": \"Hydra to the Mani\",\r\n                    \"overview\": \"Rob and Steve set sail for Limini, where they reflect on their middle age. Then it's off to the caves of Dios for some a cappella.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/y6pwfJ1UkmSnwUUXu4TUsYrLp0k.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2020-03-31\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 2183353,\r\n                    \"name\": \"The Mani to Ithaca\",\r\n                    \"overview\": \"Rob and Steve's island-hopping tour is cut short in King Nestor's home of Pilos as Steve receives some bad news. It makes for an emotional journey home.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/nDsucJiNZSvovFUAhRXqaVp7dxe.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"The Trip to Greece\",\r\n            \"overview\": \"Steve Coogan and Rob Brydon return as their fictional alter-egos in the fourth instalment of director Michael Winterbottom's perfectly seasoned comedy road trips.\",\r\n            \"poster_path\": \"/104loUpdRaKBUCcADxW4EjQ8Rkb.jpg\",\r\n            \"season_number\": 4\r\n        }\r\n    },\r\n    \"809\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": null,\r\n        \"created_by\": [],\r\n        \"episode_run_time\": [\r\n            30\r\n        ],\r\n        \"first_air_date\": \"2004-02-15\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"\",\r\n        \"id\": 809,\r\n        \"in_production\": false,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"2004-03-21\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"2004-03-21\",\r\n            \"episode_number\": 6,\r\n            \"id\": 43604,\r\n            \"name\": \"Episode 6\",\r\n            \"overview\": \"\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 1,\r\n            \"still_path\": null,\r\n            \"vote_average\": 0.0,\r\n            \"vote_count\": 0\r\n        },\r\n        \"name\": \"Catterick\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"BBC Three\",\r\n                \"id\": 3,\r\n                \"logo_path\": \"/qh5IQT9j5yNuxzVLC4v9DA5mPQO.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 6,\r\n        \"number_of_seasons\": 1,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"Catterick\",\r\n        \"overview\": \"Catterick, aka Vic and Bob in Catterick, is a surreal 2004 BBC situation comedy in 6 episodes, written by and starring Vic Reeves and Bob Mortimer, with Reece Shearsmith, Matt Lucas, Morwenna Banks, Tim Healy, Mark Benton and Charlie Higson. The series was originally broadcast on BBC Three and later rerun on BBC2. Reeves has said that the BBC do not want another series of Catterick, though he may produce a spin-off centring on the DI Fowler character.\\n\\nCatterick is arguably Vic and Bob's darkest and most bizarre programme to date, balancing their typically odd, idiosyncratic comedy with some genuinely dark scenes. It plays like a darkly comic road movie, albeit full of Vic and Bob's bizarre, often inscrutable and frequently silly humour. Catterick is probably Vic and Bob's most uncompromising show since their notorious and frequently baffling 1999 sketch series Bang Bang, It's Reeves and Mortimer, from which most of the characters are taken. It is in some ways stylistically similar to their short film The Weekenders first broadcast in 1992 on British television as part of Channel 4's \\\"Bunch of Five\\\" series.\\n\\nThe series is named after Catterick in North Yorkshire, Britain's largest army base. It is about 10 miles away from Darlington where Vic Reeves grew up. It is also about 20 miles away from Middlesbrough where Bob Mortimer grew up.\",\r\n        \"popularity\": 1.544,\r\n        \"poster_path\": \"/aGROLA6R31gjwnMQQhOYcSR1dSx.jpg\",\r\n        \"production_companies\": [],\r\n        \"production_countries\": [],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": \"2004-02-15\",\r\n                \"episode_count\": 6,\r\n                \"id\": 2400,\r\n                \"name\": \"Season 1\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": null,\r\n                \"season_number\": 1\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 7.7,\r\n        \"vote_count\": 3,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"brother\",\r\n                    \"id\": 5301\r\n                },\r\n                {\r\n                    \"name\": \"dark comedy\",\r\n                    \"id\": 10123\r\n                },\r\n                {\r\n                    \"name\": \"surreal\",\r\n                    \"id\": 3307\r\n                },\r\n                {\r\n                    \"name\": \"sitcom\",\r\n                    \"id\": 193171\r\n                }\r\n            ]\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"525407af19c29579402d193e\",\r\n            \"air_date\": \"2004-02-15\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2004-02-15\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525407b019c29579402d1970\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 168578,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Matt Lipsey\",\r\n                            \"original_name\": \"Matt Lipsey\",\r\n                            \"popularity\": 0.616,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 43600,\r\n                    \"name\": \"Episode 1\",\r\n                    \"overview\": \"Chris and Carl head to Catterick to search for Carl's long-lost son and unwittingly stumble on an armed robbery. Carl has booked a room at the Mermade Hotel run by the unpleasant Mr Oates. What is the secret that he keeps locked away in the hotel safe?\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-02-22\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525407b019c29579402d1970\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 168578,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Matt Lipsey\",\r\n                            \"original_name\": \"Matt Lipsey\",\r\n                            \"popularity\": 0.616,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 43601,\r\n                    \"name\": \"Episode 2\",\r\n                    \"overview\": \"Chris and Carl arrive at the Mermade Hotel and are amazed by the luxury of their room. Meanwhile, the shooting at Neil's Wheels is being investigated by the police and Tony starts his search for the brothers.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-02-29\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525407b019c29579402d1970\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 168578,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Matt Lipsey\",\r\n                            \"original_name\": \"Matt Lipsey\",\r\n                            \"popularity\": 0.616,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 43602,\r\n                    \"name\": \"Episode 3\",\r\n                    \"overview\": \"The brothers enlist the help of Mark as they continue their search to find Carl's long lost son. Mark reveals the truth about what really happened at last year's flotilla and why Mr Oates treats him so badly.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-03-07\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 43599,\r\n                    \"name\": \"Episode 4\",\r\n                    \"overview\": \"Things start to get complicated at the Mermade Hotel. Tony attacks Chris and Carl who escape with Mark, the hotel till and safe are emptied to the fury of Mr Oates, and the police return to the hotel.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-03-14\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525407b019c29579402d1970\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 168578,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Matt Lipsey\",\r\n                            \"original_name\": \"Matt Lipsey\",\r\n                            \"popularity\": 0.616,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Peter\",\r\n                            \"credit_id\": \"571e2c61c3a36836f8002bd9\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 8.062,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 43603,\r\n                    \"name\": \"Episode 5\",\r\n                    \"overview\": \"Carl, Chris and Mark have finally reached the garden centre near Catterick in their search for Carl's son. They are joined by Tony and DI Fowler. Tony has the upper hand as he has a gun!\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-03-21\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525407b019c29579402d1970\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 168578,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Matt Lipsey\",\r\n                            \"original_name\": \"Matt Lipsey\",\r\n                            \"popularity\": 0.616,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5538a96f925141275e0009a6\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 181815,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Vic Reeves\",\r\n                            \"original_name\": \"Vic Reeves\",\r\n                            \"popularity\": 1.364,\r\n                            \"profile_path\": \"/p8LNVsre1srCbvJaIIL40GYgj3D.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 43604,\r\n                    \"name\": \"Episode 6\",\r\n                    \"overview\": \"\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 1\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": null,\r\n            \"season_number\": 1\r\n        }\r\n    },\r\n    \"7755\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"/kxPXRc39ToaoZ6mq7SDpgwXWKtO.jpg\",\r\n        \"created_by\": [\r\n            {\r\n                \"id\": 209578,\r\n                \"credit_id\": \"5e271b8aed2ac2001539e2dd\",\r\n                \"name\": \"Laura Haddock\",\r\n                \"gender\": 1,\r\n                \"profile_path\": \"/6kRUvA7N3pMzznG9PdiqCOvxhGQ.jpg\"\r\n            },\r\n            {\r\n                \"id\": 1234239,\r\n                \"credit_id\": \"5e271b564ca676001a3f3640\",\r\n                \"name\": \"Dan Clark\",\r\n                \"gender\": 0,\r\n                \"profile_path\": null\r\n            },\r\n            {\r\n                \"id\": 1240146,\r\n                \"credit_id\": \"5e271b701685da0011df2034\",\r\n                \"name\": \"David Armand\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/zzQHbhg7AyX3X2XZq7rxFi5aPh0.jpg\"\r\n            }\r\n        ],\r\n        \"episode_run_time\": [\r\n            30\r\n        ],\r\n        \"first_air_date\": \"2007-09-27\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"http://www.bbc.co.uk/programmes/b00d1nmh\",\r\n        \"id\": 7755,\r\n        \"in_production\": false,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"2010-12-13\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"2010-12-13\",\r\n            \"episode_number\": 7,\r\n            \"id\": 390544,\r\n            \"name\": \"Don the Musical\",\r\n            \"overview\": \"After seeing the attention Eddie gets in his theatre club's production of Rain Man, Don decides to join up. The club puts on a tremendous production of Top Gun: The Musical. Meanwhile, Brian is still waiting to get a response from Sam about his proposal and is so desperate he even asks Don for advice.\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 3,\r\n            \"still_path\": null,\r\n            \"vote_average\": 8.0,\r\n            \"vote_count\": 1\r\n        },\r\n        \"name\": \"How Not to Live Your Life\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"BBC Three\",\r\n                \"id\": 3,\r\n                \"logo_path\": \"/qh5IQT9j5yNuxzVLC4v9DA5mPQO.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 19,\r\n        \"number_of_seasons\": 3,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"How Not to Live Your Life\",\r\n        \"overview\": \"Don is a single twentysomething who constantly fails to guide his way through life. His overactive mind doesn't help things as it plays out scenes of what he shouldn't say or do. When he moves into his recently deceased grandmother's house, he meets Eddie: his Gran's carer who doesn't want to leave. To help pay his rent, he decides to get a roommate in the shape of his teenage sweetheart...\",\r\n        \"popularity\": 4.246,\r\n        \"poster_path\": \"/tXhU3uuQxidODJEAPuXCnO6G118.jpg\",\r\n        \"production_companies\": [],\r\n        \"production_countries\": [],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": \"2009-07-22\",\r\n                \"episode_count\": 6,\r\n                \"id\": 17908,\r\n                \"name\": \"Specials\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": null,\r\n                \"season_number\": 0\r\n            },\r\n            {\r\n                \"air_date\": \"2008-08-12\",\r\n                \"episode_count\": 6,\r\n                \"id\": 17906,\r\n                \"name\": \"Season 1\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/p1bc0pPaD526t5ghidTNHmmiZYA.jpg\",\r\n                \"season_number\": 1\r\n            },\r\n            {\r\n                \"air_date\": \"2009-09-14\",\r\n                \"episode_count\": 6,\r\n                \"id\": 17905,\r\n                \"name\": \"Season 2\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/oI9ZM9HbxjPvUfLiRiCwDfNZWtk.jpg\",\r\n                \"season_number\": 2\r\n            },\r\n            {\r\n                \"air_date\": \"2010-11-08\",\r\n                \"episode_count\": 7,\r\n                \"id\": 17907,\r\n                \"name\": \"Season 3\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/r8qkxHxxkiTqlTh3hw8qfowWlBe.jpg\",\r\n                \"season_number\": 3\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 7.5,\r\n        \"vote_count\": 34,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"single\",\r\n                    \"id\": 9457\r\n                },\r\n                {\r\n                    \"name\": \"sitcom\",\r\n                    \"id\": 193171\r\n                },\r\n                {\r\n                    \"name\": \"pessimist\",\r\n                    \"id\": 206093\r\n                }\r\n            ]\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"52578e00760ee36aaa6a6bcd\",\r\n            \"air_date\": \"2008-08-12\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2008-08-12\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 390538,\r\n                    \"name\": \"Home Sweet Home\",\r\n                    \"overview\": \"Don's recently deceased grandmother has left him a house in her will. However, it comes with a huge backpayment and a strange man who won't leave. To help ease the load, Don decides to bring in a lodger.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 8.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2008-08-19\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578e02760ee36aaa6a6cab\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1239407,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Drew Pearce\",\r\n                            \"original_name\": \"Drew Pearce\",\r\n                            \"popularity\": 0.805,\r\n                            \"profile_path\": \"/yEOWkrpGXdtFWAYOY2dywSKHPKm.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 390539,\r\n                    \"name\": \"The Field Trip\",\r\n                    \"overview\": \"In an attempt to prove to Abby that he's a good person, Don accompanies her on a field trip with the kids from her school. However, his plan goes horribly wrong...\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 8.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2008-08-26\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578e02760ee36aaa6a6cab\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1239407,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Drew Pearce\",\r\n                            \"original_name\": \"Drew Pearce\",\r\n                            \"popularity\": 0.805,\r\n                            \"profile_path\": \"/yEOWkrpGXdtFWAYOY2dywSKHPKm.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 390540,\r\n                    \"name\": \"Fake Wake\",\r\n                    \"overview\": \"Don discovers he's got to put on a wake for his dead grandmother, the only problem is he's already cremated her.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2008-09-02\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578e02760ee36aaa6a6cab\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1239407,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Drew Pearce\",\r\n                            \"original_name\": \"Drew Pearce\",\r\n                            \"popularity\": 0.805,\r\n                            \"profile_path\": \"/yEOWkrpGXdtFWAYOY2dywSKHPKm.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Chugger\",\r\n                            \"credit_id\": \"52578e02760ee36aaa6a6ceb\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1239564,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Arnab Chanda\",\r\n                            \"original_name\": \"Arnab Chanda\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": \"/kDFaoVQAHoHKiTDyAey4TjjVQqm.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Charity Worker\",\r\n                            \"credit_id\": \"5ea8cd1a514c4a00218c1cfa\",\r\n                            \"order\": 10,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1663574,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Scarlett Rose Patterson\",\r\n                            \"original_name\": \"Scarlett Rose Patterson\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": \"/63fUb1PFrkJZw3kbyVnPZhGOAn9.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 390541,\r\n                    \"name\": \"The Young Ones\",\r\n                    \"overview\": \"While working as a charity street collector, Don meets an attractive girl who is nine years younger. He starts to hang out with her and her friends, but soon finds he isn't as young as he once was.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 8.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2008-09-09\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578e02760ee36aaa6a6cab\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1239407,\r\n                            \"known_for_department\": \"Writing\",\r\n                            \"name\": \"Drew Pearce\",\r\n                            \"original_name\": \"Drew Pearce\",\r\n                            \"popularity\": 0.805,\r\n                            \"profile_path\": \"/yEOWkrpGXdtFWAYOY2dywSKHPKm.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"57279ec4c3a3682dee001000\",\r\n                            \"order\": 7,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 17353,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Matthew Marsh\",\r\n                            \"original_name\": \"Matthew Marsh\",\r\n                            \"popularity\": 1.552,\r\n                            \"profile_path\": \"/9NfvGnHBZI4CwyPIOgv8qPMIaAv.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 390542,\r\n                    \"name\": \"Like Father, Like Don\",\r\n                    \"overview\": \"Don gets a new job working for Karl's dad, Glen. While there, the feud between the two increases and Don finds the father figure he never had.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 8.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2008-09-16\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 390543,\r\n                    \"name\": \"The Break Up\",\r\n                    \"overview\": \"Things don’t go as planned when Don goes out on the pull with Eddie. Don finds out that Abby is single again when he returns home and he ends up upsetting the girl he met whilst out.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 8.0,\r\n                    \"vote_count\": 1\r\n                }\r\n            ],\r\n            \"name\": \"Season 1\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/p1bc0pPaD526t5ghidTNHmmiZYA.jpg\",\r\n            \"season_number\": 1\r\n        },\r\n        \"season/2\": {\r\n            \"_id\": \"52578e00760ee36aaa6a6bc2\",\r\n            \"air_date\": \"2009-09-14\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2009-09-14\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52578e01760ee36aaa6a6bfe\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1240907,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Limahl\",\r\n                            \"original_name\": \"Limahl\",\r\n                            \"popularity\": 1.45,\r\n                            \"profile_path\": \"/cpLhwMxyI6rX5L0P5bdQKhPuE0r.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 390532,\r\n                    \"name\": \"Don's New Flatmate\",\r\n                    \"overview\": \"With Abby having been gone for about six months, Don and Eddie both want different women to move into the spare room.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2009-09-22\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"57279f229251417744006ccd\",\r\n                            \"order\": 9,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 183148,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Rachel Fielding\",\r\n                            \"original_name\": \"Rachel Fielding\",\r\n                            \"popularity\": 0.84,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 390533,\r\n                    \"name\": \"Don Dates a Cougar\",\r\n                    \"overview\": \"Don starts dating an older woman but can't handle the grown up world she lives in. Sam has befriended a male friend from university who Don catches rifling through her underwear drawer.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2009-09-29\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52578e01760ee36aaa6a6c3a\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.982,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 390534,\r\n                    \"name\": \"Don the Singer\",\r\n                    \"overview\": \"Sam is dating cool singer-songwriter Jackson, reawakening Don's hitherto unspoken ambition to be a musician.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2009-10-06\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"57279ee19251416dfb001c14\",\r\n                            \"order\": 8,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1013048,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Theo Barklem-Biggs\",\r\n                            \"original_name\": \"Theo Barklem-Biggs\",\r\n                            \"popularity\": 3.175,\r\n                            \"profile_path\": \"/r1xIDN0ca9NRngD7m560yuZg2Sp.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 390535,\r\n                    \"name\": \"Don Goes Gay\",\r\n                    \"overview\": \"Don's lodger, Sam, invites her brother, Jamie, over for the weekend. Dan starts to wonder if he is gay.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 8.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2009-10-13\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 390536,\r\n                    \"name\": \"Don Gets Healthy\",\r\n                    \"overview\": \"Don joins a gym to prove to Sam and Eddie that he's fit and healthy, but he fails to get beyond the running machine without passing out. He soon gives up on the gym and decides to go for a colonic irrigation, instead, where he ends up agreeing to go on a date with the therapist.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 8.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2009-10-20\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 390537,\r\n                    \"name\": \"Don and the Wedding\",\r\n                    \"overview\": \"Don is asked to be the best man at his old school friend's wedding. But finding someone to pretend to be his wife for the day is far from his only challenge.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 9.0,\r\n                    \"vote_count\": 1\r\n                }\r\n            ],\r\n            \"name\": \"Season 2\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/oI9ZM9HbxjPvUfLiRiCwDfNZWtk.jpg\",\r\n            \"season_number\": 2\r\n        },\r\n        \"season/3\": {\r\n            \"_id\": \"52578e00760ee36aaa6a6bd8\",\r\n            \"air_date\": \"2010-11-08\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2010-11-08\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578e02760ee36aaa6a6d65\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1234239,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Dan Clark\",\r\n                            \"original_name\": \"Dan Clark\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"57279e8f9251416dfb001bfe\",\r\n                            \"order\": 6,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 62961,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Sarah Hadland\",\r\n                            \"original_name\": \"Sarah Hadland\",\r\n                            \"popularity\": 1.65,\r\n                            \"profile_path\": \"/aVEhNxCplkThxE2flILB3YOoVPp.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 390548,\r\n                    \"name\": \"Don's New Job\",\r\n                    \"overview\": \"Don has blown his chances with flatmate Sam and to make matters worse she has a new boyfriend. With no career, Don comes up with an elaborate story about a new job to try to impress her. Things finally appear to be going his way when a chance encounter with high-flying executive Marcus leads to a promotion. Of course being Don, it's not long before it all goes wrong.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 8.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2010-11-08\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578e02760ee36aaa6a6d65\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1234239,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Dan Clark\",\r\n                            \"original_name\": \"Dan Clark\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 390549,\r\n                    \"name\": \"Don's Angry Girlfriend\",\r\n                    \"overview\": \"Things are looking up for Don as he has begun to date a sweet girl called Jenny. However, her behaviour starts to ring alarm bells as her moods swing from adorable to violent in an instant, turning Don into a battered and bruised mess. To make matters worse nobody believes him. The tension comes to a head during the local pub quiz. Don and Jenny join Sam and Brian's team. They are determined to beat arch rival Derek. Jenny hates losing. Is this a chance for Don to show everyone her violent side?\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2010-11-15\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578e02760ee36aaa6a6d65\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1234239,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Dan Clark\",\r\n                            \"original_name\": \"Dan Clark\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 390546,\r\n                    \"name\": \"Don's Posh Weekend\",\r\n                    \"overview\": \"Don and his boss Jason socialise together for the first time in the form of a double date with two posh girls they met at work. Don learns never to judge a book by its cover, as his date Felicity is far from prudish. Everything seems to be going well until Felicity invites them to her parents' country house for the weekend. It's a world away from Don's life and he struggles to fit in. He also has some over-protective parents to contend with.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 9.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2010-11-22\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578e02760ee36aaa6a6d65\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1234239,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Dan Clark\",\r\n                            \"original_name\": \"Dan Clark\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 390547,\r\n                    \"name\": \"Don Meets His Maker\",\r\n                    \"overview\": \"Don finds himself having a bad start to the week when he notices that his hair is thinning, He ends up booking an appointment with a specialist to discuss having a hair transplant. Things get worse for Don when he notices that he isn't the centre of attention after he is completely ignored he storms out. After Eddie discovers Don's letter about the transplant he ends up assuming the worst. Eddie, Sam, Brian and Mrs Treacher attempt to support Don when they think that he doesn't have long left to live and Don ends up making the most of the situation.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 7.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2010-11-29\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578e02760ee36aaa6a6d65\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1234239,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Dan Clark\",\r\n                            \"original_name\": \"Dan Clark\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 390545,\r\n                    \"name\": \"Don Dates a Homeless\",\r\n                    \"overview\": \"Don ends up surprising himself after he takes pity on pretty homeless woman called Susan. Sam ends up suggesting that he ask her out. When Sam returns home with Brian, she discovers Susan sitting on the sofa in their living room whilst Don runs her a bath. The following day Don doesn't want Susan to leave but after he offends her on a day out he tries to make it up to her by getting to know her friends better.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 8.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2010-12-06\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578e02760ee36aaa6a6d65\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1234239,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Dan Clark\",\r\n                            \"original_name\": \"Dan Clark\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 390550,\r\n                    \"name\": \"Don Does Therapy\",\r\n                    \"overview\": \"Don learns that Brian is going to ask Sam to marry him and realises that he still has feelings for Sam. Eddie suggests that Don sees a therapist where he ends up taking the therapist into his confidence and confessing his feelings for Sam, as well as some slightly shocking habits. Sam decides to throw a fancy dress party to celebrate Brian's birthday. Don feels unnerved when he learns that his therapist has come along in fancy dress. Don tries to find him at the party to stop him from revealing any of his secrets.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 8.0,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2010-12-13\",\r\n                    \"episode_number\": 7,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"57279e3cc3a3685871003c8a\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1461144,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Greg McHugh\",\r\n                            \"original_name\": \"Greg McHugh\",\r\n                            \"popularity\": 1.741,\r\n                            \"profile_path\": \"/rv1jJGjt6YV3QlqlzsJgdzwPmat.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 390544,\r\n                    \"name\": \"Don the Musical\",\r\n                    \"overview\": \"After seeing the attention Eddie gets in his theatre club's production of Rain Man, Don decides to join up. The club puts on a tremendous production of Top Gun: The Musical. Meanwhile, Brian is still waiting to get a response from Sam about his proposal and is so desperate he even asks Don for advice.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 8.0,\r\n                    \"vote_count\": 1\r\n                }\r\n            ],\r\n            \"name\": \"Season 3\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/r8qkxHxxkiTqlTh3hw8qfowWlBe.jpg\",\r\n            \"season_number\": 3\r\n        }\r\n    },\r\n    \"3641\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"/3vsQurBLHdthkTIMTEE3a5ebHyI.jpg\",\r\n        \"created_by\": [\r\n            {\r\n                \"id\": 1221040,\r\n                \"credit_id\": \"525753bc19c29531db11ab40\",\r\n                \"name\": \"Bryan Elsley\",\r\n                \"gender\": 2,\r\n                \"profile_path\": null\r\n            }\r\n        ],\r\n        \"episode_run_time\": [\r\n            35,\r\n            60\r\n        ],\r\n        \"first_air_date\": \"1998-11-10\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"\",\r\n        \"id\": 3641,\r\n        \"in_production\": false,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"1998-12-15\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"1998-12-15\",\r\n            \"episode_number\": 6,\r\n            \"id\": 257233,\r\n            \"name\": \"Shifting the Units\",\r\n            \"overview\": \"Promoting a rock band is not always easy as the band soon finds out when they realize that they have to perform on a childrens' TV show. To make matters worse, Jocks Wa Hey seems to be growing apart due to rising tensions between the band members.\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 1,\r\n            \"still_path\": null,\r\n            \"vote_average\": 0.0,\r\n            \"vote_count\": 0\r\n        },\r\n        \"name\": \"The Young Person's Guide to Becoming a Rock Star\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"Channel 4\",\r\n                \"id\": 26,\r\n                \"logo_path\": \"/hbifXPpM55B1fL5wPo7t72vzN78.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 8,\r\n        \"number_of_seasons\": 1,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"The Young Person's Guide to Becoming a Rock Star\",\r\n        \"overview\": \"The Young Person's Guide to Becoming a Rock Star is a British comedy series, which aired on Channel 4 in 1998. It was a six-part satirical take on the music industry, written by Skins creator Bryan Elsley. The plot centered around a young Glaswegian band - Jocks Wa Hey - as they struggle to find success.\\n\\nThe series won the 'Best Drama Serial' award at the 1999 RTS Television Awards and, that same year, writer Bryan Esley was nominated in the RTS 'Best Writer' category for the series.\\n\\nIt was remade as My Guide to Becoming a Rock Star, a short-lived American/Canadian series that starred Oliver Hudson and was made for the now defunct The WB Television Network.\",\r\n        \"popularity\": 2.206,\r\n        \"poster_path\": \"/a9Xq0kiB9mvDPv76U19DJTj47M6.jpg\",\r\n        \"production_companies\": [\r\n            {\r\n                \"id\": 57767,\r\n                \"logo_path\": null,\r\n                \"name\": \"Company Television\",\r\n                \"origin_country\": \"\"\r\n            },\r\n            {\r\n                \"id\": 57769,\r\n                \"logo_path\": null,\r\n                \"name\": \"Bronco Films\",\r\n                \"origin_country\": \"\"\r\n            }\r\n        ],\r\n        \"production_countries\": [],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": \"1998-11-10\",\r\n                \"episode_count\": 8,\r\n                \"id\": 10961,\r\n                \"name\": \"Season 1\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": null,\r\n                \"season_number\": 1\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 5.9,\r\n        \"vote_count\": 4,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"rock band\",\r\n                    \"id\": 18001\r\n                }\r\n            ]\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"525753bb19c29531db11aa13\",\r\n            \"air_date\": \"1998-11-10\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"1998-11-10\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525753bb19c29531db11aa40\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 123798,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Sheree Folkson\",\r\n                            \"original_name\": \"Sheree Folkson\",\r\n                            \"popularity\": 1.583,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 257227,\r\n                    \"name\": \"Lifestyles of the Rich and Famous\",\r\n                    \"overview\": \"The satirical comedy/drama about a rock band from Glasgow begins and we're introduced to Jez and his bandmates known as Jocks Wa Hey. Jez's meeting Fiona, a DSS officer/musician, along with the band's first gig leads to something unexpected.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1998-11-17\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525753bb19c29531db11aa40\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 123798,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Sheree Folkson\",\r\n                            \"original_name\": \"Sheree Folkson\",\r\n                            \"popularity\": 1.583,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 257228,\r\n                    \"name\": \"Creating the Buzz\",\r\n                    \"overview\": \"After a wild night together, involving the band's gig and nude guitar playing, Jez decides to ask Fiona to join Jocks Wa Hey.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1998-11-24\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525753bb19c29531db11aa40\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 123798,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Sheree Folkson\",\r\n                            \"original_name\": \"Sheree Folkson\",\r\n                            \"popularity\": 1.583,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 257230,\r\n                    \"name\": \"The A&R Men Cometh\",\r\n                    \"overview\": \"Three months have passed, the band has been gigging non-stop without a sniff from a record company. Fiona and Jez confront Art who agrees to put on an industry showcase at Glasgow Barrowlands. All they have to do now is sell 500 tickets in six days, prepare for the A & R onslaught and sign a deal ... with Slick Sloan from Massive Mix Records.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1998-12-01\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 257231,\r\n                    \"name\": \"Sign on the Line\",\r\n                    \"overview\": \"In London, the band readies to make a deal with Slick Sloan. A deal which could turn them into London's next big thing.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1998-12-08\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 257232,\r\n                    \"name\": \"Making Tracks\",\r\n                    \"overview\": \"Musician Fish guest stars as Derek Trout, a rock star whose house is being used to record Jocks Wa Hey's first big album.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1998-12-15\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 257233,\r\n                    \"name\": \"Shifting the Units\",\r\n                    \"overview\": \"Promoting a rock band is not always easy as the band soon finds out when they realize that they have to perform on a childrens' TV show. To make matters worse, Jocks Wa Hey seems to be growing apart due to rising tensions between the band members.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 7,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 257226,\r\n                    \"name\": \"Delete this\",\r\n                    \"overview\": \"\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 8,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 257234,\r\n                    \"name\": \"Episode 8\",\r\n                    \"overview\": \"\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 1\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": null,\r\n            \"season_number\": 1\r\n        }\r\n    },\r\n    \"7837\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"/tefTKmctid6SSjpvtxksa5Us9J7.jpg\",\r\n        \"created_by\": [\r\n            {\r\n                \"id\": 1240946,\r\n                \"credit_id\": \"52578e7c760ee36aaa6af8e9\",\r\n                \"name\": \"Damian Lanigan\",\r\n                \"profile_path\": null\r\n            }\r\n        ],\r\n        \"episode_run_time\": [\r\n            30\r\n        ],\r\n        \"first_air_date\": \"2008-09-14\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"\",\r\n        \"id\": 7837,\r\n        \"in_production\": true,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"2008-10-12\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"2008-10-12\",\r\n            \"episode_number\": 6,\r\n            \"id\": 391832,\r\n            \"name\": \"The Re-Launch\",\r\n            \"overview\": \"Lou persuades Danny and Shay to give the label another try and they set off in search of a new signing. Furious with the lads for giving up on the label, Lou draws up a list of unsigned bands and orders them to sign one. The lads blag a loan off Danny’s dad Dennis and hit the road. When the car breaks down in the middle of Pennines and they forget the band they were supposed to see it looks like the label is over again, but can Hebden Bridge five-piece The Pott Shrigleys restore their faith in music?\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 1,\r\n            \"still_path\": null,\r\n            \"vote_average\": 0.0,\r\n            \"vote_count\": 0\r\n        },\r\n        \"name\": \"Massive\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"BBC Three\",\r\n                \"id\": 3,\r\n                \"logo_path\": \"/qh5IQT9j5yNuxzVLC4v9DA5mPQO.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 6,\r\n        \"number_of_seasons\": 1,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"Massive\",\r\n        \"overview\": \"Massive is a sitcom broadcast on digital channel BBC Three. It is set in Manchester and stars Ralf Little and Carl Rice as Danny and Shay, who leave their office jobs to set up a record label when Danny inherits £10,000 following the death of his grandmother. The series began airing on BBC Three on 14 September 2008.\",\r\n        \"popularity\": 0.924,\r\n        \"poster_path\": \"/fI1QZfzh0zeIowHEm9TW1wFa10v.jpg\",\r\n        \"production_companies\": [],\r\n        \"production_countries\": [],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": \"2008-09-14\",\r\n                \"episode_count\": 6,\r\n                \"id\": 17995,\r\n                \"name\": \"Season 1\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": null,\r\n                \"season_number\": 1\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 0.0,\r\n        \"vote_count\": 0,\r\n        \"keywords\": {\r\n            \"results\": []\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"52578e7b760ee36aaa6af809\",\r\n            \"air_date\": \"2008-09-14\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2008-09-14\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578e7b760ee36aaa6af825\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1220300,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"David Kerr\",\r\n                            \"original_name\": \"David Kerr\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": \"/luSbXLwVBZCVxTA4DV4FPJOtpaz.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 391827,\r\n                    \"name\": \"Creation of the Label\",\r\n                    \"overview\": \"The two boys set up a label headquarters and hold auditions. Aftrer a few rocky moments Shady Music make their first signing.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2008-09-14\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578e7b760ee36aaa6af825\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1220300,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"David Kerr\",\r\n                            \"original_name\": \"David Kerr\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": \"/luSbXLwVBZCVxTA4DV4FPJOtpaz.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 391828,\r\n                    \"name\": \"Recording The Single\",\r\n                    \"overview\": \"Danny and Shay's first signing HearKittyKitty isn't quite what they had in mind but Danny is certain that they have talent. The team go into the studio to record the group's first single.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2008-09-21\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578e7b760ee36aaa6af825\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1220300,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"David Kerr\",\r\n                            \"original_name\": \"David Kerr\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": \"/luSbXLwVBZCVxTA4DV4FPJOtpaz.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 391829,\r\n                    \"name\": \"The Music Video\",\r\n                    \"overview\": \"Danny and Sahy are over the moon when HearKittyKitty's song is played on Radio One. The group then demand that have a music video made.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2008-09-28\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578e7b760ee36aaa6af825\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1220300,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"David Kerr\",\r\n                            \"original_name\": \"David Kerr\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": \"/luSbXLwVBZCVxTA4DV4FPJOtpaz.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 391830,\r\n                    \"name\": \"The Photo Shoot\",\r\n                    \"overview\": \"When HearKittyKitty debut single enters the charts at the number 12 position the boys decide that the group needs a makeover to continue to climb the charts.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2008-10-05\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578e7b760ee36aaa6af825\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1220300,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"David Kerr\",\r\n                            \"original_name\": \"David Kerr\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": \"/luSbXLwVBZCVxTA4DV4FPJOtpaz.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 391831,\r\n                    \"name\": \"The Break Up\",\r\n                    \"overview\": \"Just when it seemed Danny and Shay's luck couldn't get any worse, American lawyer Tommy Sadowski appears in Manchester. He has been instructed by Eminem to sue Shady Music for using the name of his company. The lads can't even afford the rent on the office, so where are they going to find 123 million dollars?\\n\\nTo top it all off, Danny's record signing plan goes wrong and HearKittyKitty sack the lads. With no money and no contract to keep the girls, Danny and Shay quit the label and call time on their own friendship. Shay retreats to the sanctum of the Finnegan household, while Danny strikes up an unlikely friendship with Tommy.\\n\\nWhile Lou desperately tries to get Danny and Shay back together, Strange Pete has demons of his own. He has been asked on a reunion tour with the other 1990s Manc explosion bands, but is terrified of getting back on stage.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2008-10-12\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578e7b760ee36aaa6af825\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1220300,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"David Kerr\",\r\n                            \"original_name\": \"David Kerr\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": \"/luSbXLwVBZCVxTA4DV4FPJOtpaz.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 391832,\r\n                    \"name\": \"The Re-Launch\",\r\n                    \"overview\": \"Lou persuades Danny and Shay to give the label another try and they set off in search of a new signing. Furious with the lads for giving up on the label, Lou draws up a list of unsigned bands and orders them to sign one. The lads blag a loan off Danny’s dad Dennis and hit the road. When the car breaks down in the middle of Pennines and they forget the band they were supposed to see it looks like the label is over again, but can Hebden Bridge five-piece The Pott Shrigleys restore their faith in music?\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 1\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": null,\r\n            \"season_number\": 1\r\n        }\r\n    },\r\n    \"2759\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"/6i9bE6hrNJNoEhGNxbARILf0egz.jpg\",\r\n        \"created_by\": [\r\n            {\r\n                \"id\": 88926,\r\n                \"credit_id\": \"52574456760ee36aaa0e91a7\",\r\n                \"name\": \"Armando Iannucci\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"\r\n            },\r\n            {\r\n                \"id\": 117794,\r\n                \"credit_id\": \"52574456760ee36aaa0e91ad\",\r\n                \"name\": \"Chris Morris\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/uwaXrxAgqDUF7qr43vOnwA6Aztl.jpg\"\r\n            }\r\n        ],\r\n        \"episode_run_time\": [\r\n            30\r\n        ],\r\n        \"first_air_date\": \"1994-01-19\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"\",\r\n        \"id\": 2759,\r\n        \"in_production\": false,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"1994-02-23\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"1994-02-23\",\r\n            \"episode_number\": 6,\r\n            \"id\": 215452,\r\n            \"name\": \"Newsatrolysis a.k.a. Factgasm\",\r\n            \"overview\": \"Features reports on Buckingham Palace culling 40 members of staff, passengers stuck on a train in Hampshire, Peter O'Hanraha-hanrahan reporting on General Motors making 35000 workers redundant, Colin Poppshed reporting from the gay desk, the decline of the NHS, and a roundup of international news. Also features a documentury set at the office of a pharmaceutical company, and Alan Partridge covering self-defence.\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 1,\r\n            \"still_path\": \"/d4UrGmK8SqjfByy4OqNrkpsVsdd.jpg\",\r\n            \"vote_average\": 0.0,\r\n            \"vote_count\": 0\r\n        },\r\n        \"name\": \"The Day Today\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"BBC Two\",\r\n                \"id\": 332,\r\n                \"logo_path\": \"/6kl5tMuct7u3ej5myL4c9QQVSW1.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 6,\r\n        \"number_of_seasons\": 1,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"The Day Today\",\r\n        \"overview\": \"The Day Today is a surreal British parody of television current affairs programmes, broadcast in 1994, and created by the comedians Armando Iannucci and Chris Morris. It is an adaptation of the radio programme On the Hour, which was broadcast on BBC Radio 4 between 1991 and 1992. On the Hour was written by Morris, Iannucci, Steven Wells, Andrew Glover, Stewart Lee, Richard Herring, David Quantick, and the cast. For The Day Today, Peter Baynham joined the writing team, and Lee and Herring were replaced by Graham Linehan and Arthur Mathews. The principal cast of On the Hour was retained for The Day Today.\\n\\nThe Day Today is composed of six half-hour episodes and a selection of shorter, five-minute slots recorded as promotion trailers for the longer segments. The six half-hour episodes were originally broadcast from 19 January to 23 February 1994 on BBC2. The Day Today has won many awards, including Morris winning the 1994 British Comedy Award for Best Newcomer. All six episodes are available on BBC DVD, having previously been issued on VHS.\",\r\n        \"popularity\": 4.854,\r\n        \"poster_path\": \"/5WInvNvWunCktJgs8gLGndjfO0A.jpg\",\r\n        \"production_companies\": [\r\n            {\r\n                \"id\": 153160,\r\n                \"logo_path\": null,\r\n                \"name\": \"TalkBack Productions\",\r\n                \"origin_country\": \"\"\r\n            }\r\n        ],\r\n        \"production_countries\": [],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": \"1993-01-29\",\r\n                \"episode_count\": 14,\r\n                \"id\": 8964,\r\n                \"name\": \"Specials\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/mzeEmzYw5VMUGe1i70CAE2i8XDM.jpg\",\r\n                \"season_number\": 0\r\n            },\r\n            {\r\n                \"air_date\": \"1994-01-19\",\r\n                \"episode_count\": 6,\r\n                \"id\": 8963,\r\n                \"name\": \"Season 1\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/aWXtEzPmwXFzt8drDNTm8johTUF.jpg\",\r\n                \"season_number\": 1\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"\",\r\n        \"type\": \"Miniseries\",\r\n        \"vote_average\": 8.2,\r\n        \"vote_count\": 33,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"surreal\",\r\n                    \"id\": 3307\r\n                },\r\n                {\r\n                    \"name\": \"satire\",\r\n                    \"id\": 8201\r\n                },\r\n                {\r\n                    \"name\": \"parody\",\r\n                    \"id\": 9755\r\n                },\r\n                {\r\n                    \"name\": \"current affairs\",\r\n                    \"id\": 193164\r\n                }\r\n            ]\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"52574455760ee36aaa0e8fa4\",\r\n            \"air_date\": \"1994-01-19\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"1994-01-19\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5606fbb4925141305e002619\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1515420,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Patience Tomlinson\",\r\n                            \"original_name\": \"Patience Tomlinson\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 215445,\r\n                    \"name\": \"Main News Attack\",\r\n                    \"overview\": \"Features reports on Prince Charles volunteering to go to prison, the London Jam Festival, bullying in the Church of England, medieval alternative medicine, and a sheepdog piloting an out of control helicopter. Also features Barbara Wintergreen's report on the Elvis styled execution of American serial killer Chapman Baxter, and Alan Partridge covering the Tour de France and Boxing.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/G2pKPccvCDE84U1KMDaGSg0PEE.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1994-01-26\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 215446,\r\n                    \"name\": \"The Big Report\",\r\n                    \"overview\": \"Features reports on the Junior Minister for health resigning, Marlon Brando being sold at auction in Sotheby's, illegal back street dentists, and Peter O'Hanraha-hanrahan reporting on the new European trade quota rates. Also features The Pool, a documentary set in a public swimming pool, a segment from RokTV, and Alan Partridge covering the horse racing at Marple.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/dToC6Kt326piSSUQkhL9lhViwpz.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1994-02-02\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 215448,\r\n                    \"name\": \"Meganews\",\r\n                    \"overview\": \"Features reports on an infestation of wild horses in the London underground, the BBC's new soap opera The Bureau (replacing the Nine O'Clock News), a fight between Queen Elizabeth and John Major, and an air jam. Also features Barbara Wintergreen's report on Chapman Baxter being executed via marriage, a continuation of The Pool, and Alan Partridge interviewing soccer players and a female show jumper.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/8haiZ4XPblwpsgZ99Z2tZG9uFGf.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1994-02-09\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 215449,\r\n                    \"name\": \"Stretchcast\",\r\n                    \"overview\": \"Features reports on suspicions that British police officers are eating their suspects, Peter O'Hanraha-hanrahan interviewing the government minister for ships regarding recent accusations, the IRA's use of explosives hidden in dogs, the immense popularity of The Bureau in Italy, the Home Office releasing the Sorted videos aimed at young people, and near-death experiences. Also features Barbara Wintergreen reporting on the natus (a method of prosthetic pregnancy), and Alan Partridge's Countdown to World Cup '94.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/5q7GvnflxMgPOehipRpoGYfkPWD.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1994-02-16\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 215451,\r\n                    \"name\": \"Magnifivent\",\r\n                    \"overview\": \"Features reports on the British Pound being stolen, the plummeting ratings of The Bureau, the clamping of the homeless in London, a reminiscence of events in 1944, government ministers contracting a disease that inhibits reading, and the trade agreement and subsequent war between Australia and Hong Kong. Also features Barbara Wintergreen reporting on Chapman Baxter being executed by the reanimated corpse of his last victim, and Alan Partridge riding with a female rally driver.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/61Zv4IgF01OBvP9m4xUcmyCLSMI.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1994-02-23\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 215452,\r\n                    \"name\": \"Newsatrolysis a.k.a. Factgasm\",\r\n                    \"overview\": \"Features reports on Buckingham Palace culling 40 members of staff, passengers stuck on a train in Hampshire, Peter O'Hanraha-hanrahan reporting on General Motors making 35000 workers redundant, Colin Poppshed reporting from the gay desk, the decline of the NHS, and a roundup of international news. Also features a documentury set at the office of a pharmaceutical company, and Alan Partridge covering self-defence.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/d4UrGmK8SqjfByy4OqNrkpsVsdd.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 1\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/aWXtEzPmwXFzt8drDNTm8johTUF.jpg\",\r\n            \"season_number\": 1\r\n        }\r\n    },\r\n    \"2349\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"/zvthkKsjGM3wrT3Y1elU4pU05n6.jpg\",\r\n        \"created_by\": [\r\n            {\r\n                \"id\": 34551,\r\n                \"credit_id\": \"525731f0760ee3776a3566fe\",\r\n                \"name\": \"Reece Shearsmith\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/fEpejkayrwRoFYcRd1xamhivxnq.jpg\"\r\n            },\r\n            {\r\n                \"id\": 34546,\r\n                \"credit_id\": \"525731f0760ee3776a3566f8\",\r\n                \"name\": \"Mark Gatiss\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n            },\r\n            {\r\n                \"id\": 28485,\r\n                \"credit_id\": \"525731f0760ee3776a3566f2\",\r\n                \"name\": \"Steve Pemberton\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/j4AFPsF6DM9nfccol3VFQgPJ6Ia.jpg\"\r\n            },\r\n            {\r\n                \"id\": 173298,\r\n                \"credit_id\": \"61e443e135811d001c2c0ada\",\r\n                \"name\": \"Jeremy Dyson\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/qbn6ibKrvfsRytxrOqi627RGE3I.jpg\"\r\n            }\r\n        ],\r\n        \"episode_run_time\": [\r\n            30\r\n        ],\r\n        \"first_air_date\": \"1999-01-11\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"http://www.bbc.co.uk/programmes/b006t8d1\",\r\n        \"id\": 2349,\r\n        \"in_production\": false,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"2017-12-20\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"2017-12-20\",\r\n            \"episode_number\": 3,\r\n            \"id\": 1408043,\r\n            \"name\": \"Royston Vasey Mon Amour\",\r\n            \"overview\": \"The local authorities, the local paper and the local police all play their part as the developing situation in Royston Vasey reaches its earth-shattering climax. Can the genii be put back in the bottle? And what dark forces have been unleashed in the amphibarium?\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 4,\r\n            \"still_path\": \"/1Jc1rBG2pxZ8IibrhkOgIj58muB.jpg\",\r\n            \"vote_average\": 0.0,\r\n            \"vote_count\": 0\r\n        },\r\n        \"name\": \"The League of Gentlemen\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"BBC Two\",\r\n                \"id\": 332,\r\n                \"logo_path\": \"/6kl5tMuct7u3ej5myL4c9QQVSW1.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 21,\r\n        \"number_of_seasons\": 4,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"The League of Gentlemen\",\r\n        \"overview\": \"The League of Gentlemen is a British comedy television series that premiered on BBC Two in 1999. The show is set in Royston Vasey, a fictional town in Northern England based on Bacup, Lancashire. It follows the lives of dozens of bizarre townspeople, most of whom are played by three of the show's four writers—Mark Gatiss, Steve Pemberton, and Reece Shearsmith—who, along with Jeremy Dyson, formed the League of Gentlemen comedy troupe in 1995. The series originally aired for three series from 1999 until 2002 followed by a film in 2005. A three-part revival mini-series was broadcast in December 2017 to celebrate the group's 20th anniversary.\",\r\n        \"popularity\": 10.014,\r\n        \"poster_path\": \"/oXe5YFf2b9kQJJmALNFdrGex3FU.jpg\",\r\n        \"production_companies\": [\r\n            {\r\n                \"id\": 80893,\r\n                \"logo_path\": \"/8rITuQjEtHEjdyU49sv9fKBYf8E.png\",\r\n                \"name\": \"BBC Studios\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"production_countries\": [\r\n            {\r\n                \"iso_3166_1\": \"GB\",\r\n                \"name\": \"United Kingdom\"\r\n            }\r\n        ],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": \"2000-12-27\",\r\n                \"episode_count\": 10,\r\n                \"id\": 7324,\r\n                \"name\": \"Specials\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/1WwLWmBrZ454RrBH9gzCcylTlDm.jpg\",\r\n                \"season_number\": 0\r\n            },\r\n            {\r\n                \"air_date\": \"1999-01-11\",\r\n                \"episode_count\": 6,\r\n                \"id\": 7322,\r\n                \"name\": \"Season 1\",\r\n                \"overview\": \"Surreal comedy about the strange inhabitants of Royston Vasey.\",\r\n                \"poster_path\": \"/hJvi9ERIlpqNd70TcVMjt7MZncL.jpg\",\r\n                \"season_number\": 1\r\n            },\r\n            {\r\n                \"air_date\": \"2000-01-14\",\r\n                \"episode_count\": 6,\r\n                \"id\": 7321,\r\n                \"name\": \"Season 2\",\r\n                \"overview\": \"The second series of the classic horror-comedy set in Royston Vasey.\",\r\n                \"poster_path\": \"/9XWAnKUaRx3WDWQjgdt5goYxnPH.jpg\",\r\n                \"season_number\": 2\r\n            },\r\n            {\r\n                \"air_date\": \"2002-09-26\",\r\n                \"episode_count\": 6,\r\n                \"id\": 7323,\r\n                \"name\": \"Season 3\",\r\n                \"overview\": \"The third series of the classic horror-comedy set in Royston Vasey.\",\r\n                \"poster_path\": \"/kQ0CuWz6EIp6oakv98pWig6k8uS.jpg\",\r\n                \"season_number\": 3\r\n            },\r\n            {\r\n                \"air_date\": \"2017-12-18\",\r\n                \"episode_count\": 3,\r\n                \"id\": 96825,\r\n                \"name\": \"Anniversary Specials\",\r\n                \"overview\": \"The comedy returns to celebrate the group's 20th anniversary at the BBC. Reece Shearsmith, Steve Pemberton and Mark Gatiss play the bizarre, darkly comic characters inhabiting Royston Vasey.\",\r\n                \"poster_path\": \"/1FpbVeSRGvSKm2aZJmXffQfiuAJ.jpg\",\r\n                \"season_number\": 4\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"Welcome to Royston Vasey. You'll Never Leave!\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 7.4,\r\n        \"vote_count\": 69,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"northern england\",\r\n                    \"id\": 5215\r\n                },\r\n                {\r\n                    \"name\": \"dark comedy\",\r\n                    \"id\": 10123\r\n                },\r\n                {\r\n                    \"name\": \"surreal\",\r\n                    \"id\": 3307\r\n                },\r\n                {\r\n                    \"name\": \"sketch comedy\",\r\n                    \"id\": 156203\r\n                }\r\n            ]\r\n        },\r\n        \"season/0\": {\r\n            \"_id\": \"525731ea760ee3776a3561ec\",\r\n            \"air_date\": \"2000-12-27\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2000-12-27\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 171331,\r\n                    \"name\": \"Christmas Special\",\r\n                    \"overview\": \"Reverend Bernice is in a typically unfestive mood at Christmas time, haunted by a terrible Christmas memory, when three visitors appear at her church, each with a chilling tale to tell.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": \"/scqX1a2R3Rp37Ci438PdyLJKWLN.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2001-11-19\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 171330,\r\n                    \"name\": \"Live at Drury Lane\",\r\n                    \"overview\": \"Regular Cast:    Mark as Scott of the Antarctic/ Stumphole Guide/ Tony/ Phil Proctor/ Brian Morgan/ Iris Krell/ Mickey Love/ Les McQueen/ Val Denton/ Al/ and Others   Steve as Tish/ Charlie Hull/ Sir Quincey Stiles/ Dave Parkes/ Tubbs/ Mike Harris/ Herr Lipp/ Pauline/ \\\"\\\"Morbid Obesity\\\"\\\"/ Harvey Denton/ Pop/ and Others   Reese as Pam Doove/ Stella Hull/ Ollie Plimsoles/ Edward/ Geoff Tipps/ Judee Levinson/ Ross Gaines/ Cathy Carter-Smith/ Papa Lazarou/ Bernice/ Benjamin Denton/ Rich/ and Others\\n\\nThe LoG's 2001 live show, which toured the country and included a run at London's Theatre Royal Drury Lane, comes to video & DVD.   ACT ONE:   Voodoo Lady: The guys make their entrance on stage and sing the classic Creme Brulee hit \\\"Voodoo Lady\\\"\\n\\nHamlet: Steve and Mark watch a performance of Hamlet in the style of very vocal football supporters (\\\"\\\"He's fat, he's bad, he murdered Hamlet's dad, Claudius!\\\"\\\") and hope this time the end will be different.\\n\\nGo Johnny Go-Go-Go-Go: A friendly game of cards\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2005-06-03\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 171333,\r\n                    \"name\": \"The League of Gentlemen's Apocalypse\",\r\n                    \"overview\": \"The fictional world of Royston Vasey is facing apocalypse and the only way to avert disaster is for our nightmarish cast of characters to find a way into the real world and confront their creators. From present day Soho to the fictional film world of 17th Century Britain, the residents must overcome countless bizarre obstacles in their bid to return Royston Vasey to safety.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2006-11-20\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 171332,\r\n                    \"name\": \"The League of Gentlemen Are Behind You\",\r\n                    \"overview\": \"The League Of Gentlemen Are Behind You is a pantomime themed stage show by The League of Gentlemen. It was their second major UK tour and premiered in 2006. The show was a departure from the Gents' trademark dark humour, thanks to the whimsical pantomime nature of it. Almost all the material performed was new and original. A performance filmed at the Apollo Theatre, Manchester, was made available on DVD. Festive fun for all local people.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-10-31\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 171335,\r\n                    \"name\": \"Making of Series 3\",\r\n                    \"overview\": \"A behind-the-scenes look at the third series of The League of Gentlemen.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 171334,\r\n                    \"name\": \"Crème Brulee’s Voodoo Lady\",\r\n                    \"overview\": \"The full ‘70s cock-rock horror that is Crème Brulee’s Voodoo Lady. A season 2 DVD extra.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 7,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 171337,\r\n                    \"name\": \"The Denton's House Rules\",\r\n                    \"overview\": \"Singalong to The Dentons’ House Rules ditty (just follow the jumping toad). A season 2 DVD extra.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2000-02-18\",\r\n                    \"episode_number\": 8,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 171336,\r\n                    \"name\": \"Series 2 - DVD Extras\",\r\n                    \"overview\": \"\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 9,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 171338,\r\n                    \"name\": \"Series 1 - DVD Extras\",\r\n                    \"overview\": \"\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2019-04-21\",\r\n                    \"episode_number\": 10,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 2685311,\r\n                    \"name\": \"Live Again\",\r\n                    \"overview\": \"The League of Gentlemen return to the stage for their first UK tour in over 12 years with their live show, featuring all the familiar faces from Royston Vasey.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Specials\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/1WwLWmBrZ454RrBH9gzCcylTlDm.jpg\",\r\n            \"season_number\": 0\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"525731ea760ee3776a3561d2\",\r\n            \"air_date\": \"1999-01-11\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"1999-01-11\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 171320,\r\n                    \"name\": \"Welcome To Royston Vasey\",\r\n                    \"overview\": \"Ben struggles to take in Auntie Val and Uncle Harvey’s incomprehensible house rules, while Martin poses a threat to the precious things in Tubbs and Edward’s Local Shop. At the local job center, Pauline is furious when someone lands an interview without her help. Taxi driver Babs makes middling progress through her sex change.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/yIhpAib0gimo9cd9wiIrzACgLp6.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1999-01-18\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"525731ed760ee3776a3563a6\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 6239,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Ameet Chana\",\r\n                            \"original_name\": \"Ameet Chana\",\r\n                            \"popularity\": 0.709,\r\n                            \"profile_path\": \"/heuV5nSewh8URoVoN3OQj7ugfX1.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 171319,\r\n                    \"name\": \"The Road To Royston Vasey\",\r\n                    \"overview\": \"Royston Vasey's new road is under construction: good news for all the town's inhabitants except Tubbs and Edward won't this bring strangers to the town? Judee is off to Antigua for a luxury holiday; Pauline is holding a workshop in selling the Big Issue (a newspaper for the homeless), and Ben is trying to use the telephone at the Dentons. We meet butcher Hillary Briss, Henry and Ally, the video-viewers and Reverend Bernice, Royston Vasey's outspoken lady vicar.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/gEAXpe6BFhD5Uon74ozu61kBV4o.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1999-01-25\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"525731ed760ee3776a35641d\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1191234,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Don Estelle\",\r\n                            \"original_name\": \"Don Estelle\",\r\n                            \"popularity\": 2.486,\r\n                            \"profile_path\": \"/ytHMIDIjAuu8MijK0qodkEDsz78.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 171322,\r\n                    \"name\": \"Nightmare in Royston Vasey\",\r\n                    \"overview\": \"An employee working on the new road stumbles into the lair of Edward and Tubbs, breakfast at the Denton's is not what Benjamin was expecting, and a tortoise has an unfortunate encounter with Dr. Chinnery.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/xaA8rWbJKjL2YyNXwyHYZNFGjd7.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1999-02-01\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"525731ed760ee3776a35641d\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1191234,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Don Estelle\",\r\n                            \"original_name\": \"Don Estelle\",\r\n                            \"popularity\": 2.486,\r\n                            \"profile_path\": \"/ytHMIDIjAuu8MijK0qodkEDsz78.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 171324,\r\n                    \"name\": \"The Beast of Royston Vasey\",\r\n                    \"overview\": \"Chinnery examines the so-called \\\"beast\\\", but has he correctly identified it? Also, the Legz Akimbo Theatre Company arrives to perform a play at the local school.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/cHETdRaE8sNa4kWpiIPZRL65HBH.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1999-02-08\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 171323,\r\n                    \"name\": \"Love Comes To Royston Vasey\",\r\n                    \"overview\": \"Ben tries to escape from the Dentons. Henry and Ally go to the wrong film but try to make the best of it. Geoff gives a very truthful and upsetting speech at Mike's wedding.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/U22oc28T7DYvFNsH3yvYNpj7x2.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1999-02-15\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 171321,\r\n                    \"name\": \"Escape From Royston Vasey\",\r\n                    \"overview\": \"- Tubbs & Edward's son David returns. Tubbs is thrilled, but Edward is resentful of his son-especially when he reveals he is responsible for the construction of \\\"\\\"newroad\\\"\\\"!   - Ben leaves Royston Vasey, taking with him a gift from the Dentons: an itemised bill covering expences incurred during his stay (phone calls, use of toilet tissue, etc).   - Ross Reveals that he is really an employee for the Social Services. He has Pauline sacked, forcing her to hand over her pens!   - Edward and David have a little chat. Facing away from Tubbs, he tells her that he no longer wants to build the road. Turning around to reveal his pig-nose, he declares \\\"\\\"I want to live locally\\\"\\\". Tubbs deserts David and Edward and leaves the shop.   - Ben approaches Tubbs out on the moors, asking if she is local. Tubbs replies \\\"\\\"Yes, I am\\\"\\\", and they both head to the shop. Ben tells Tubbs that his friend who went missing had a pair of shoes just like hers. The credits roll...\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/9JC5IzJja1xuAgSxQVr2Regg2Kg.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 1\",\r\n            \"overview\": \"Surreal comedy about the strange inhabitants of Royston Vasey.\",\r\n            \"poster_path\": \"/hJvi9ERIlpqNd70TcVMjt7MZncL.jpg\",\r\n            \"season_number\": 1\r\n        },\r\n        \"season/2\": {\r\n            \"_id\": \"525731ea760ee3776a3561c5\",\r\n            \"air_date\": \"2000-01-14\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2000-01-14\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5763f2b49251412986000312\",\r\n                            \"order\": 11,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 311811,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Paul Popplewell\",\r\n                            \"original_name\": \"Paul Popplewell\",\r\n                            \"popularity\": 1.27,\r\n                            \"profile_path\": \"/2rhOBTlnbG9gJVqq0EJnz2hHfCQ.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 171311,\r\n                    \"name\": \"Destination: Royston Vasey\",\r\n                    \"overview\": \"The carnival comes to town and Pauline starts at the Restart Room as a jobseeker. Val makes a wish on a magic toad that brings back Benjamin. A nosebleed epidemic breaks out at the circus.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/ce0cH5xn8Civ7Zn32bAeADSOCGl.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2000-01-21\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"525731eb760ee3776a35624c\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 80154,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Blake Ritson\",\r\n                            \"original_name\": \"Blake Ritson\",\r\n                            \"popularity\": 3.343,\r\n                            \"profile_path\": \"/61NhsA2UEjtQVm6IvRijrgZ0W4e.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 171312,\r\n                    \"name\": \"Lust for Royston Vasey\",\r\n                    \"overview\": \"The nosebleed epidemic continues. Pauline gets a new job as an assistant food science operative at Burger Me! Herr Lipp and students arrive on an exchange visit from Diusberg, and the guesthouse closes for a very private function.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/fxfVqe4QdwYTo695iCnDA9M6C2s.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2000-01-28\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"531b2f1ac3a3685c31004bb9\",\r\n                            \"order\": 11,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1234123,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jennifer Lin\",\r\n                            \"original_name\": \"Jennifer Lin\",\r\n                            \"popularity\": 0.626,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 171318,\r\n                    \"name\": \"A Plague on Royston Vasey\",\r\n                    \"overview\": \"Pen-obsessed Pauline tackles Ross about her job prospects or lack thereof, and Edward sets a trap to catch a bride for David. Butcher Hilary Briss has a problem with one of his \\\"special\\\" customers.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/atMsV8rmbWnUALnk2K0Gz5sAvm4.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2000-02-04\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"525731ec760ee3776a3562d6\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 482024,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Roy \\\"Chubby\\\" Brown\",\r\n                            \"original_name\": \"Roy \\\"Chubby\\\" Brown\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": \"/7PTbe56h75YyI58IOi0nRaOqZVq.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"525731eb760ee3776a35624c\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 80154,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Blake Ritson\",\r\n                            \"original_name\": \"Blake Ritson\",\r\n                            \"popularity\": 3.343,\r\n                            \"profile_path\": \"/61NhsA2UEjtQVm6IvRijrgZ0W4e.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"531b2f1ac3a3685c31004bb9\",\r\n                            \"order\": 11,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1234123,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jennifer Lin\",\r\n                            \"original_name\": \"Jennifer Lin\",\r\n                            \"popularity\": 0.626,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 171315,\r\n                    \"name\": \"Death in Royston Vasey\",\r\n                    \"overview\": \"Hilary Briss and Maurice take an early walk in the woods to collect a \\\"Special Delivery.\\\" Mike, Brian, and Geoff get lost on their way to a plastics convention, and Morris is dealt with.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/vVxAxDwg32sqdUnAY43ApxcopaD.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2000-02-11\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Tony Cluedo\",\r\n                            \"credit_id\": \"525731eb760ee3776a356295\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1218933,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Ted Robbins\",\r\n                            \"original_name\": \"Ted Robbins\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": \"/jlGzSd1O8Wtfa8gt7WemYzLczhW.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"525731eb760ee3776a35624c\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 80154,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Blake Ritson\",\r\n                            \"original_name\": \"Blake Ritson\",\r\n                            \"popularity\": 3.343,\r\n                            \"profile_path\": \"/61NhsA2UEjtQVm6IvRijrgZ0W4e.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 171314,\r\n                    \"name\": \"Anarchy in Royston Vasey\",\r\n                    \"overview\": \"Pauline leaves her hostage with Mikey to go in search fo food. Geoff and Brian bury Mike alive, and Tubbs and Edward catch a no-tail. Lee finds that Creme Brulee has reformed without him.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/e7vbtO0KNLOhq4geGfddtJkJk02.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2000-02-18\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"525731ec760ee3776a3562d6\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 482024,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Roy \\\"Chubby\\\" Brown\",\r\n                            \"original_name\": \"Roy \\\"Chubby\\\" Brown\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": \"/7PTbe56h75YyI58IOi0nRaOqZVq.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"525731ed760ee3776a356342\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 162488,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jeillo Edwards\",\r\n                            \"original_name\": \"Jeillo Edwards\",\r\n                            \"popularity\": 0.649,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 171317,\r\n                    \"name\": \"Royston Vasey and the Monster from Hell\",\r\n                    \"overview\": \"Roysten Vasey is quarantined as the nosebleed epidemic claims a distinguished victim. The Legz Akimbo Theatre Group comes to town, and there is a wedding at the local shop.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/2FNaJ0hf7B4ffkwc9gKBMsRDizU.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 2\",\r\n            \"overview\": \"The second series of the classic horror-comedy set in Royston Vasey.\",\r\n            \"poster_path\": \"/9XWAnKUaRx3WDWQjgdt5goYxnPH.jpg\",\r\n            \"season_number\": 2\r\n        },\r\n        \"season/3\": {\r\n            \"_id\": \"525731ea760ee3776a3561df\",\r\n            \"air_date\": \"2002-09-26\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2002-09-26\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 1030963,\r\n                    \"name\": \"The Lesbian and the Monkey\",\r\n                    \"overview\": \"springs Pauline from jail--provided she can find evidence to convict Mickey and get him off the Dole.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-10-03\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 171327,\r\n                    \"name\": \"The One-Armed Man Is King\",\r\n                    \"overview\": \"Lance bribes hospital disc jockey Mike King to arrange an under-the-counter arm transplant. Meanwhile, Glenn and Barry fail miserably in an attempt to recover outstanding debts.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/vtVmUpjdhTL8sloS5lauMRbUXgH.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-10-10\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"525731ed760ee3776a3564c4\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 22810,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Andy Nyman\",\r\n                            \"original_name\": \"Andy Nyman\",\r\n                            \"popularity\": 3.707,\r\n                            \"profile_path\": \"/9bN9RVoPWmsmV3VBI7hp4VKD9Kg.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Paramedic\",\r\n                            \"credit_id\": \"60d45db1ce4ddc00451b2671\",\r\n                            \"order\": 15,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 87102,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Barbara Kirby\",\r\n                            \"original_name\": \"Barbara Kirby\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 171325,\r\n                    \"name\": \"Turn Again Geoff Tipps\",\r\n                    \"overview\": \"Geoff is fired from his job and leaves in an attempt to make it as a stand-up comedian in London. There he runs into the Legz Akimbo team and Mike.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-10-17\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"525731ee760ee3776a35657a\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1215956,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Laurence Llewelyn-Bowen\",\r\n                            \"original_name\": \"Laurence Llewelyn-Bowen\",\r\n                            \"popularity\": 2.385,\r\n                            \"profile_path\": \"/2iKmOb7EGxyCwpNSXLyxzVE6mjC.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Casey Glass\",\r\n                            \"credit_id\": \"5933fd619251417e1d01e17c\",\r\n                            \"order\": 12,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1215226,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Brooke Vincent\",\r\n                            \"original_name\": \"Brooke Vincent\",\r\n                            \"popularity\": 1.96,\r\n                            \"profile_path\": \"/2iLPKnSOKit5l7BQsTnPRaWR73B.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 171329,\r\n                    \"name\": \"The Medusa Touch\",\r\n                    \"overview\": \"Regular Cast:    Mark as Alvin Steele / Les McQueen   Steve as Daddy / Nancy Glass / Barbara [voice] / Anne Hand   Reese as Noel Glass / Judith Buckle / Terry Lollard   B&B proprietors Alvin and Sunny invite their weekend 'Sexplorers' to join them in a voyage of auto-erotic discovery - although Alvin would prefer to be at the garden centre. But who is the mysterious femme fatale in the dwarf conifers and what is the secret of the fearsome 'Medusa'?   The Ending: Lawrence Llewellyn Bowen is having a fag with his wig off in the backyard of the Windermere when the white van comes crashing through the wall, sending tons of bricks down on him...\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/5LEcFgrYraNvM8zv4jxcQBQAYoY.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-10-24\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 171328,\r\n                    \"name\": \"Beauty and the Beast (Or, Come into My Parlour)\",\r\n                    \"overview\": \"Regular Cast:    Mark as Tony / Iris Krell [voice] / Neds / Professor Breastpinch'd   Steve as Charlie Hull   Reese as Stella Hull / Judee Levinson / Keith Drop   CHARLIE & STELLA / MRS LEVINSON: The Hulls' marriage seems to have disintegrated beyond repair and Stella's hooked on playing fruit machines. Meanwhile, Charlie starts working for Judee Levinson at her new beauty salon, the \\\"\\\"Spit and Polish\\\"\\\", doing massages on blindfolded clients, who think it's Judee doing them herself. His healing hands wow the customers, until an old man asks if he can do any \\\"\\\"extras\\\"\\\". Word spreads and the salon is packed with the men of Royston Vasey, blissfully unaware they are being wanked off by Charlie. When Tony comes for one of the \\\"\\\"special massages\\\"\\\", Charlie becomes obsessed with him and falls in love with him, eventually telling Tony he's the masseur with the magic hands. Tony is disgusted and the shit hits the fan: Stella wins big on the fruit machines and jets off overseas, and Judee sacks him.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/lXXcNULHiOcQgNFJHVYLl8UO71O.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-10-31\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Dougal Siepp\",\r\n                            \"credit_id\": \"525731ed760ee3776a3564fd\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 2040,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Christopher Eccleston\",\r\n                            \"original_name\": \"Christopher Eccleston\",\r\n                            \"popularity\": 9.23,\r\n                            \"profile_path\": \"/848SScSMTnjiOJRM7McbGiaEo1Q.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"531b2f1ac3a3685c31004bb9\",\r\n                            \"order\": 11,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1234123,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jennifer Lin\",\r\n                            \"original_name\": \"Jennifer Lin\",\r\n                            \"popularity\": 0.626,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Paramedic\",\r\n                            \"credit_id\": \"60d45db1ce4ddc00451b2671\",\r\n                            \"order\": 15,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 87102,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Barbara Kirby\",\r\n                            \"original_name\": \"Barbara Kirby\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 171326,\r\n                    \"name\": \"How The Elephant Got Its Trunk\",\r\n                    \"overview\": \"After a bag is blown out the window of the Charity Shop Vinnie spots it on a country road and sets out in hot pursuit. Papa Lazarou returns and all the series' loose ends are tied up.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/hIDG8r1NzeH0L5wr1UipwtN8g1C.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 3\",\r\n            \"overview\": \"The third series of the classic horror-comedy set in Royston Vasey.\",\r\n            \"poster_path\": \"/kQ0CuWz6EIp6oakv98pWig6k8uS.jpg\",\r\n            \"season_number\": 3\r\n        },\r\n        \"season/4\": {\r\n            \"_id\": \"5a3aca62c3a36814a8094bdf\",\r\n            \"air_date\": \"2017-12-18\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2017-12-18\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Receptionist\",\r\n                            \"credit_id\": \"5e79928c2f3b170011552c7b\",\r\n                            \"order\": 13,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1371829,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gemma Paige North\",\r\n                            \"original_name\": \"Gemma Paige North\",\r\n                            \"popularity\": 1.905,\r\n                            \"profile_path\": \"/jlK3Mbd2b1X6I2cS1ozWbENl9h5.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 1408041,\r\n                    \"name\": \"Return to Royston Vasey\",\r\n                    \"overview\": \"Familiar faces return to Royston Vasey, settling old scores and digging up some old friends - with more bad blood than an abattoir with septicaemia. Reece Shearsmith, Steve Pemberton and Mark Gatiss star in scripts written by themselves and Jeremy Dyson.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/xSWZeb4beNiyMqAc2l3xkFqXFfE.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2017-12-19\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 1408042,\r\n                    \"name\": \"Save Royston Vasey\",\r\n                    \"overview\": \"Royston Vasey is facing a threat more terrible than anything it has faced before - boundary changes that will erase the town from the map forever. The fight to save the community from administrative annihilation comes from unexpected and surprising directions, all of them local.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/e23DFmWQjZqonBooQ3JrhYGDMRt.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2017-12-20\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525731eb760ee3776a356207\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34546,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mark Gatiss\",\r\n                            \"original_name\": \"Mark Gatiss\",\r\n                            \"popularity\": 11.025,\r\n                            \"profile_path\": \"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525731eb760ee3776a356223\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16356,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Steve Bendelack\",\r\n                            \"original_name\": \"Steve Bendelack\",\r\n                            \"popularity\": 1.22,\r\n                            \"profile_path\": \"/rmNl92VXrO2yqoeqW2vX5rqmdKo.jpg\"\r\n                        },\r\n                        {\r\n                            \"job\": \"Writer\",\r\n                            \"department\": \"Writing\",\r\n                            \"credit_id\": \"61e441496beaea008b98defc\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 34551,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Reece Shearsmith\",\r\n                            \"original_name\": \"Reece Shearsmith\",\r\n                            \"popularity\": 6.093,\r\n                            \"profile_path\": \"/fEpejkayrwRoFYcRd1xamhivxnq.jpg\"\r\n                        },\r\n                        {\r\n                            \"job\": \"Writer\",\r\n                            \"department\": \"Writing\",\r\n                            \"credit_id\": \"61e44153fdc4fa0069ac89a6\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 28485,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Steve Pemberton\",\r\n                            \"original_name\": \"Steve Pemberton\",\r\n                            \"popularity\": 4.894,\r\n                            \"profile_path\": \"/j4AFPsF6DM9nfccol3VFQgPJ6Ia.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Gareth Chapman\",\r\n                            \"credit_id\": \"61e440db6aa8e0001c3e44de\",\r\n                            \"order\": 15,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 18616,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"David Morrissey\",\r\n                            \"original_name\": \"David Morrissey\",\r\n                            \"popularity\": 12.45,\r\n                            \"profile_path\": \"/n26A1ikHCBoCL6nsVvY1P17XPxK.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 1408043,\r\n                    \"name\": \"Royston Vasey Mon Amour\",\r\n                    \"overview\": \"The local authorities, the local paper and the local police all play their part as the developing situation in Royston Vasey reaches its earth-shattering climax. Can the genii be put back in the bottle? And what dark forces have been unleashed in the amphibarium?\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/1Jc1rBG2pxZ8IibrhkOgIj58muB.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Anniversary Specials\",\r\n            \"overview\": \"The comedy returns to celebrate the group's 20th anniversary at the BBC. Reece Shearsmith, Steve Pemberton and Mark Gatiss play the bizarre, darkly comic characters inhabiting Royston Vasey.\",\r\n            \"poster_path\": \"/1FpbVeSRGvSKm2aZJmXffQfiuAJ.jpg\",\r\n            \"season_number\": 4\r\n        }\r\n    },\r\n    \"7166\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"/jVyBaK4TxIdHHnnHRmJRyJubskX.jpg\",\r\n        \"created_by\": [\r\n            {\r\n                \"id\": 98104,\r\n                \"credit_id\": \"52578a08760ee36aaa6703af\",\r\n                \"name\": \"Julian Barratt\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n            },\r\n            {\r\n                \"id\": 98105,\r\n                \"credit_id\": \"52578a08760ee36aaa6703a9\",\r\n                \"name\": \"Noel Fielding\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n            }\r\n        ],\r\n        \"episode_run_time\": [\r\n            30\r\n        ],\r\n        \"first_air_date\": \"2004-05-18\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            },\r\n            {\r\n                \"id\": 10765,\r\n                \"name\": \"Sci-Fi & Fantasy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"http://www.bbc.co.uk/mightyboosh\",\r\n        \"id\": 7166,\r\n        \"in_production\": false,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"2007-12-20\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"2007-12-20\",\r\n            \"episode_number\": 6,\r\n            \"id\": 384763,\r\n            \"name\": \"The Chokes\",\r\n            \"overview\": \"Vince goes to great lengths to attempt to fit in to a pair of drainpipe trousers, in order to join The Black Tubes, whom have a strict thin-legs policy and are headlining a night at The Velvet Onion, which Vince is also MCing. Howard takes an acting lesson with aged actor Montgomery Flange, in order to cure him of the Chokes; an intense form of stage fright, and to outdo Sammy the Crab in a bid to impress director Jurgen Haabermaaster, who is in the audience on the night at The Velvet Onion. Sammy the Crab proceeds to run amok, after having alcohol and food poured into his tank by the Black Tubes, killing several support acts. Vince phones Howard, who stuns everyone - including Jurgen - with his impressive acting. Vince eventually gets his drainpipes on, at the price of having an exaggeratedly large head, causing him to fall over and thus ruining the gig. It later transpires that Sammy The Crab has replaced him as the frontman of The Black Tubes. Howard returns from working with Jurgen Haabermaaster, dissatisfied with the work he was offered (playing the Angry Crab Of Trapped Wind in a trapped wind commercial), much to the amusement of Naboo, Bollo and Vince.\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 3,\r\n            \"still_path\": null,\r\n            \"vote_average\": 0.0,\r\n            \"vote_count\": 0\r\n        },\r\n        \"name\": \"The Mighty Boosh\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"BBC Three\",\r\n                \"id\": 3,\r\n                \"logo_path\": \"/qh5IQT9j5yNuxzVLC4v9DA5mPQO.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 20,\r\n        \"number_of_seasons\": 3,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"The Mighty Boosh\",\r\n        \"overview\": \"The Mighty Boosh is a British comedy television show created by Julian Barratt, Noel Fielding and others. The Mighty Boosh is a comic fantasy containing humour and pop-culture references. Episodes often featured elaborate musical numbers in different genres, such as electro, heavy metal, funk, and rap. The show has been known for popularising a style called \\\"crimping\\\"; short a cappella songs which are present throughout all three series. Julian Barratt wrote the music within the show, and performs it with Noel Fielding. Fielding also designed many of the show's graphics and artwork.\\n\\nThe TV series has many animated sequences, puppets and special effects. Barratt has said that he approached Fielding with the idea of doing a show like The Goodies, as if it were a complete \\\"world\\\" rather than simply a sketch show. Barratt and Fielding play many of the recurring and one-off characters themselves, with other characters being played by other Boosh members Rich Fulcher, Dave Brown, and Michael Fielding.\",\r\n        \"popularity\": 12.081,\r\n        \"poster_path\": \"/dKlYEo7mc1XLN2PutYlRuTLUXlC.jpg\",\r\n        \"production_companies\": [],\r\n        \"production_countries\": [],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": \"2003-05-20\",\r\n                \"episode_count\": 78,\r\n                \"id\": 17362,\r\n                \"name\": \"Specials\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/msCGB3kCWHtPUxN7MyHlm12ciug.jpg\",\r\n                \"season_number\": 0\r\n            },\r\n            {\r\n                \"air_date\": \"2004-05-18\",\r\n                \"episode_count\": 8,\r\n                \"id\": 17359,\r\n                \"name\": \"Series 1\",\r\n                \"overview\": \"The Mighty Boosh's first series was originally broadcast between 18 May 2004 and 6 July 2004. The series features five main cast members; Julian Barratt, Noel Fielding, Rich Fulcher, Michael Fielding and Dave Brown. The first series centers on Howard Moon and Vince Noir, and the adventures they have whilst working at a zoo. A DVD of the series was released on 29 August 2005 in Region 2. Series 1 began to air in America on Adult Swim from 29 March 2009.\",\r\n                \"poster_path\": \"/zCwMv46uPjexlRww9x563L6IVpF.jpg\",\r\n                \"season_number\": 1\r\n            },\r\n            {\r\n                \"air_date\": \"2005-07-26\",\r\n                \"episode_count\": 6,\r\n                \"id\": 17360,\r\n                \"name\": \"Series 2\",\r\n                \"overview\": \"The Mighty Boosh's second series was originally broadcast between 25 July 2005 and 30 August 2005. The series features five main cast members: Julian Barratt, Noel Fielding, Rich Fulcher, Michael Fielding and Dave Brown. The second series centers around Howard Moon and Vince Noir, and the adventures they have whilst living in their flat. A DVD of the series was released on 13 February 2006 in Region 2, and on 21 July 2009 in Region 1. The DVD also included the pilot episode for 'The Boosh', made in 2003, before the first series. The episode was titled 'Tundra' and was remade for the first series.\",\r\n                \"poster_path\": \"/1tcHAXZqYTGO0iyzBIfc34iTWmE.jpg\",\r\n                \"season_number\": 2\r\n            },\r\n            {\r\n                \"air_date\": \"2007-11-15\",\r\n                \"episode_count\": 6,\r\n                \"id\": 17361,\r\n                \"name\": \"Series 3\",\r\n                \"overview\": \"The Mighty Boosh's third series was originally broadcast between 15 November 2007 and 20 December 2007. The series features five main cast members; Julian Barratt, Noel Fielding, Rich Fulcher, Michael Fielding and Dave Brown. The third series revolves around Howard Moon and Vince Noir, and the adventures they have whilst running a second-hand shop. A DVD of the series was released on 11 February 2008 in Region 2 and 7 August in Region 4.\",\r\n                \"poster_path\": \"/2vXDsvURfRGdTEB5uAOwdF4Pyok.jpg\",\r\n                \"season_number\": 3\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 7.6,\r\n        \"vote_count\": 84,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"surreal\",\r\n                    \"id\": 3307\r\n                },\r\n                {\r\n                    \"name\": \"slapstick\",\r\n                    \"id\": 9253\r\n                },\r\n                {\r\n                    \"name\": \"gorilla costume\",\r\n                    \"id\": 195416\r\n                },\r\n                {\r\n                    \"name\": \"post modernism\",\r\n                    \"id\": 220431\r\n                }\r\n            ]\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"525789ff760ee36aaa66f9ad\",\r\n            \"air_date\": \"2004-05-18\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2004-05-18\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa2d\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1240219,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 384744,\r\n                    \"name\": \"Killeroo\",\r\n                    \"overview\": \"Bob Fossil sets up a highly illegal and shady kangaroo boxing match between the Killeroo and Howard. Howard thinks that by winning the fight he will impress the Head of Reptiles, Mrs Gideon. Vince enlists his uncle, a bare-knuckle fighter with a very strange accent, to help with Howard's training.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/7IEPoKrZ4LM7dlMhuRmAsdW9Yhq.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-05-25\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa2d\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1240219,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"574db4a6c3a368390a000113\",\r\n                            \"order\": 5,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1488236,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Matt Berry\",\r\n                            \"original_name\": \"Matt Berry\",\r\n                            \"popularity\": 8.042,\r\n                            \"profile_path\": \"/m1Mg7Ey0j3UVIFPGwLI1ryfhRm6.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 384745,\r\n                    \"name\": \"Mutants\",\r\n                    \"overview\": \"All is not well at the Zoo-niverse. Animals are disappearing one by one. Things go from bad to worse when Joey Moose, one of the zookeepers, goes missing. When Mrs Gideon reports that her python is also on the missing list, Howard is determined to save the day. Howard and Vince stumble across Dixon Bainbridge's secret laboratory and the terrible truth behind his ‘experiments' comes to light.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/jh9SgBd8MjLnFwy4qhZJ3AB0JV7.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-05-25\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa2d\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1240219,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 384746,\r\n                    \"name\": \"Bollo\",\r\n                    \"overview\": \"Bollo, the eldest and most respected gorilla at the Zoo-niverse is gravely ill. Bob Fossil persuades Howard to dress in an ape suit, replacing Bollo, so that he can continue accepting sponsorship money for the gorilla. Everything's going smoothly until the Grim Reaper arrives and mistakenly takes Howard to Ape Hell instead. Vince sets off to rescue Howard and they run into trouble when they encounter the Ape of Death who is plagued with problem hair.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/3aOmz5gjatZFIMYnEFoUyGf2PDS.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-06-08\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa2d\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1240219,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"574db4a6c3a368390a000113\",\r\n                            \"order\": 5,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1488236,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Matt Berry\",\r\n                            \"original_name\": \"Matt Berry\",\r\n                            \"popularity\": 8.042,\r\n                            \"profile_path\": \"/m1Mg7Ey0j3UVIFPGwLI1ryfhRm6.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 384747,\r\n                    \"name\": \"Tundra\",\r\n                    \"overview\": \"In an attempt to compete with daring adventurer Dixon Bainbridge, Howard and Vince set off in search of the Egg of Mantumbi - with the assistance of Gary Numan. Into the whiteness, the nothingness of the Arctic Tundra, the boys come face to face with hideous ice demon Black Frost. Luckily, Vince has befriended a polar bear.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/xBMYbrY1MgRSwTdOP4EwVNH0gb1.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-06-08\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa2d\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1240219,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"574db4a6c3a368390a000113\",\r\n                            \"order\": 5,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1488236,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Matt Berry\",\r\n                            \"original_name\": \"Matt Berry\",\r\n                            \"popularity\": 8.042,\r\n                            \"profile_path\": \"/m1Mg7Ey0j3UVIFPGwLI1ryfhRm6.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 384748,\r\n                    \"name\": \"Jungle\",\r\n                    \"overview\": \"Dixon Bainbridge, owner of the Zoo-niverse, is intent on selling to the highest bidder. There's a road being built through it and ‘if the animals won't work on it, they'll be underneath it'. Howard and Vince embark on an arduous trip deep into the Jungle Room, in search of the only man they think can help save the zoo - Howard's hero, Tommy Nookah.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/oMr7QjeN6Ibk95KGsPF8uzGpULi.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-06-15\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa2d\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1240219,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"574db4a6c3a368390a000113\",\r\n                            \"order\": 5,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1488236,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Matt Berry\",\r\n                            \"original_name\": \"Matt Berry\",\r\n                            \"popularity\": 8.042,\r\n                            \"profile_path\": \"/m1Mg7Ey0j3UVIFPGwLI1ryfhRm6.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 384749,\r\n                    \"name\": \"Charlie\",\r\n                    \"overview\": \"Howard is hell bent on a career as a serious writer in the hope that he'll improve his chances with Mrs Gideon. However, when famous publisher Hamilton Cork arrives at the Zoo-Niverse, he decides to publish Vince's literary efforts about a pink bubblegum character called Charlie. Meanwhile, Bob Fossil has embarked on a new breeding programme for the pandas.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/oMr7QjeN6Ibk95KGsPF8uzGpULi.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-06-22\",\r\n                    \"episode_number\": 7,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa2d\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1240219,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 384750,\r\n                    \"name\": \"Electro\",\r\n                    \"overview\": \"Vince is convinced that The Human League invented music. According to Vince, Howard's past career as a jazz trumpeter does not measure up. When Vince is offered a chance to join a new band, ‘Kraftwork Orange' with Johnny Two Hats and the Electro Girls, he's intent on leaving everything behind, including Howard.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/rYSkheOBAK275e8DqizydpKiBSB.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2004-06-29\",\r\n                    \"episode_number\": 8,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa2d\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1240219,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 384751,\r\n                    \"name\": \"Hitcher\",\r\n                    \"overview\": \"After Ivan the bear becomes angry and escapes from his cage, Fossil arranges a place for Ivan at an Animal Offenders Institute. All Howard and Vince have to do is get there and back, in one piece, without falling foul of the Hitcher.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/q5ujwrfeOq98NVj8ymZ8bgD812I.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Series 1\",\r\n            \"overview\": \"The Mighty Boosh's first series was originally broadcast between 18 May 2004 and 6 July 2004. The series features five main cast members; Julian Barratt, Noel Fielding, Rich Fulcher, Michael Fielding and Dave Brown. The first series centers on Howard Moon and Vince Noir, and the adventures they have whilst working at a zoo. A DVD of the series was released on 29 August 2005 in Region 2. Series 1 began to air in America on Adult Swim from 29 March 2009.\",\r\n            \"poster_path\": \"/zCwMv46uPjexlRww9x563L6IVpF.jpg\",\r\n            \"season_number\": 1\r\n        },\r\n        \"season/2\": {\r\n            \"_id\": \"52578a00760ee36aaa66f9be\",\r\n            \"air_date\": \"2005-07-26\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2005-07-26\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa2d\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1240219,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 384752,\r\n                    \"name\": \"The Call of the Yeti\",\r\n                    \"overview\": \"Howard takes Vince, Naboo and Bollo on a weekend holiday to a cabin in the woods, owned by a yokel, Kodiak Jack. Naboo and Bollo, bored by the prospect of a lecture from Howard, go shopping, leaving Vince with Howard. Kodiak Jack arrives, taking a liking to Vince, and informing Howard, who is having delusions of grandeur about being a photographer, of the Yeti. Howard sets out to photograph the Yeti, leaving Vince with Kodiak Jack. While shopping, Naboo learns of the Yeti's breeding night, as Vince fends off Kodiak Jack's advances. Meanwhile, Howard is captured and brainwashed by the Yeti. Vince, Naboo, and Bollo set out to save Howard, and also end up brainwashed by the Yeti. As they are all about to be raped, they are saved by Kodiak Jack, who is then instead raped. They fled back to the cabin, pursued by the Queen Yeti, who is eventually defeated after stepping on Vince's bulging suitcase, catapulting her through the roof. Howard, Vince, Naboo, and Bollo then return to Dalston.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/xfOByMS4XvYxtBUPAhLINQ8Tbyj.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2005-08-02\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa2d\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1240219,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"574db5109251417925000129\",\r\n                            \"order\": 6,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 47096,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Roger Daltrey\",\r\n                            \"original_name\": \"Roger Daltrey\",\r\n                            \"popularity\": 3.114,\r\n                            \"profile_path\": \"/wQUIoUytxAoqaMpq2jW51v4CLhJ.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 384753,\r\n                    \"name\": \"The Priest and the Beast\",\r\n                    \"overview\": \"Howard and Vince are up late, struggling to find a new musical direction in order to get signed the next morning by Pie Face Records. To inspire them, Naboo tells them the story of Rudy van Disarzio and Spider Dijon; the Bongo Brothers, who form the band Rudi & Spider. Rudi and Spider wander the desert in search of inspiration; looking for the New Sound. After an argument, Spider leaves with the intention of drumming for Carlos Santana, becoming temporarily distracted by a town populated only by women. Rudi soon happens upon the town, meeting and bonding with an inhabitant of the town called Monkey, who tells him of a bandit called Betamax, who regularly terrorises the town. Rudi and Spider reconvene, the latter then earns himself a Door of Cuckundu by refusing tickets to Santana in Rio from Rudi, and together go to face Betamax. Spider eventually defeats him by rewinding him with his Door of Cuckundu. Rudi & Spider then showcase their newly found sound; found inside their own minds. This is of no help to Howard and Vince, whom Naboo gives Lucozade, telling them it is a magic potion to help their performance.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/r7aKtFVvSoohsJEAQjnfrcAlANt.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2005-08-09\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa2d\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1240219,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52578a01760ee36aaa66fc1e\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 119906,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Margaret John\",\r\n                            \"original_name\": \"Margaret John\",\r\n                            \"popularity\": 3.034,\r\n                            \"profile_path\": \"/ybGYRJxhL5QBkjqhVDf3Hxq8B8b.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Saboo\",\r\n                            \"credit_id\": \"52578a01760ee36aaa66fc38\",\r\n                            \"order\": 8,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98103,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Richard Ayoade\",\r\n                            \"original_name\": \"Richard Ayoade\",\r\n                            \"popularity\": 9.197,\r\n                            \"profile_path\": \"/qHKoy9kP4bsv4G9EkvU4FMUmYkS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 384757,\r\n                    \"name\": \"Nanageddon\",\r\n                    \"overview\": \"Vince offers Howard the chance to spend the night with two goth girls, Anthrax and Ebola, under the agreement that he dresses like a goth. It transpires Vince drunkenly bragged to the girls that he was a Warlock, stealing Naboo's book of black magic. Vince then inadvertently summons Nanatoo; the most evil demon known to man. The goth girls depart in disgust, distracting Howard and Vince from Nanatoo, who steals the book of black magic and also departs. Naboo and Bollo return, and immediately suss that Howard and Vince have summoned a demon. Naboo warns Howard and Vince of the imminence of Nanageddon, and is then summoned to the Board of Shaman who decide to remove his shaman powers, and send Saboo and Tony Harrison to retrieve the book of black magic, which neither succeed in doing; due mainly to arguing. Meanwhile, Howard and Vince retrieve the book from Nanatoo at the bingo, and flee back to the flat, pursued by Nanatoo and her army of Nanas. Naboo reverses the spell, causing Nanatoo to dissapear. The next day, a gothic Naboo and Bollo accompany the goth girls out, leaving Howard and Vince disgruntled.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/A248LkSQmLe0l3Z0j93NrITaVEW.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2005-08-16\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa2d\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1240219,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"574db528c3a368390e000170\",\r\n                            \"order\": 7,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 178622,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Ramon Tikaram\",\r\n                            \"original_name\": \"Ramon Tikaram\",\r\n                            \"popularity\": 1.142,\r\n                            \"profile_path\": \"/wtBLiI8tzeqPLMB9uswkyFhChva.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 384756,\r\n                    \"name\": \"Fountain of Youth\",\r\n                    \"overview\": \"Howard has an age crisis after being heckled at a gig of he and Vince's. After hearing from Bollo about the Fountain of Youth on Naboo's home planet Xooberon, Howard and Vince steal his amulet and travel there, where they wander the Desert of Nightmares and meet the Xooberon Tribe. Back at the flat, Naboo finds out about Howard and Vince stealing his amulet, and is annoyed that he has to save them. The Xooberon Tribe notice Vince has the amulet and make him their leader, and Howard his slave. Meanwhile, The Hitcher overviews these events, planning to steal the amulet for himself. Vince's status as the Chosen One is tested when a beast named Sandstorm threatens the Xooberon Tribe; Vince befriends him by gifting him with gloves which he uses to masturbate. Howard is tricked into stealing the amulet by The Hitcher, who knocks Howard out and leaves. He awakens with Vince, buried up to their necks in sand; a punishment from the Xooberon Tribe for loosing the amulet. Naboo and Bollo arrive, and accompany Vince and Howard to the Fountain of Youth, hindered by an evil tree; whom Vince summons Sandstorm to disposes of. Naboo then flushes the toilet of the Fountain of Youth, liquefying The Hitcher. The King who first gave Naboo the amulet and sent him to earth arrives and congratulates Naboo. On the way back to earth, Howard and Vince consume Youth Juice, which reverts them to babies.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/f8YfLLJfQmNxHzdMN4tlq5VxsEP.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2005-08-23\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa2d\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1240219,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 384755,\r\n                    \"name\": \"The Legend of Old Gregg\",\r\n                    \"overview\": \"After a bad gig, Howard and Vince travel to a village in Scotland called Black Lake to take a break. At the pub, they get the idea of going fishing; which Vince seems instantly proficient in. Vince soon leaves a disgruntled Howard to fish himself. Vince returns to the pub, where he learns about Old Gregg. Howard then inadvertently catches Old Gregg, who shows him his mangina, and takes him to his underwater cave. Vince phones Naboo to help him rescue Howard, which Naboo grudgingly agrees to do. Howard awakens, and has a short conversation with Old Gregg, ending in them performing a song together. While having a meal with Old Gregg, Howard learns of his possession of The Funk. While Old Gregg is preoccupied, Vince, Naboo and Bollo arrive in a submarine, and rescue Howard, who steals The Funk from Old Gregg. They use it to perform to the pub, singing a song about having the funk. They then leave, planning to bring the funk back to London. Old Gregg is shown to be riding atop their van; exposing his mangina.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/lfmCEp3yeaQn9TVCGDbFEEcKyFi.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2005-08-30\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa2d\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1240219,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 384754,\r\n                    \"name\": \"The Nightmare of Milky Joe\",\r\n                    \"overview\": \"Howard and Vince plan to travel to America to perform on the Pie Face Showcase. Due to Howard's fear of flying, they travel by boat, but are thrown overboard and stranded on a desert island for Vince's giving the captain a haircut whilst he slept. Howard's condition quickly deteriorates due to lack of nourishment, so they decide to eat coconuts. Howard begins keeping a journal, and Vince fashions bamboo drainpipes. Howard and Vince begin arguing, and separate to build huts: Vince's elaborate and complicated, compared to Howard's board on a stick. Howard fashions a male companion out of a coconut, calling it Milky Joe. Howard eventually builds a proper hut with the help of Milky Joe. Vince then fashions a female companion out of a coconut called Ruby. This makes Howard jealous, who fashions a wig for Milky Joe and temporarily calls her Jemima. Howard then sings a song about isolation. Vince then fashions another female companion out of a coconut called Precious Lilywhite. This agitates Howard further; he eventually persuades Vince to invite him to dinner with Precious and Ruby. Howard eventually ends up with Precious who turns out to be physically abusive. While Vince has a party on the beach, Howard accidentally kills Precious. The coconuts begin moving of their own accord; coconut police begin chasing them, they are caught and sent to coconut court, where they are found guilty of murder, and used as attractions in a coconut shie. At this point, Howard and Vince are splashed with water by a sailor, which awakens them from their rancid coconut-induced nightmare. They return home to watch the televised version of the Pie Face Showcase; headlined by Milky Joe and the Coconuts.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/zzsJObjlOcozXjc4rLtTllqS3Hf.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Series 2\",\r\n            \"overview\": \"The Mighty Boosh's second series was originally broadcast between 25 July 2005 and 30 August 2005. The series features five main cast members: Julian Barratt, Noel Fielding, Rich Fulcher, Michael Fielding and Dave Brown. The second series centers around Howard Moon and Vince Noir, and the adventures they have whilst living in their flat. A DVD of the series was released on 13 February 2006 in Region 2, and on 21 July 2009 in Region 1. The DVD also included the pilot episode for 'The Boosh', made in 2003, before the first series. The episode was titled 'Tundra' and was remade for the first series.\",\r\n            \"poster_path\": \"/1tcHAXZqYTGO0iyzBIfc34iTWmE.jpg\",\r\n            \"season_number\": 2\r\n        },\r\n        \"season/3\": {\r\n            \"_id\": \"52578a00760ee36aaa66f9cf\",\r\n            \"air_date\": \"2007-11-15\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2007-11-15\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a02760ee36aaa66fc88\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1240435,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Saboo\",\r\n                            \"credit_id\": \"52578a01760ee36aaa66fc38\",\r\n                            \"order\": 8,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98103,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Richard Ayoade\",\r\n                            \"original_name\": \"Richard Ayoade\",\r\n                            \"popularity\": 9.197,\r\n                            \"profile_path\": \"/qHKoy9kP4bsv4G9EkvU4FMUmYkS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 384758,\r\n                    \"name\": \"Eels\",\r\n                    \"overview\": \"Naboo and Bollo go away to Dennis the Head Shaman’s stag party, leaving Howard and Vince in charge of Nabootique. The two challenge one another to a sales contest, each trying to sell their latest fads; Elbow Patches and The Indie Celebrity Radar, respectively. Later, while Vince is out to tag Pete Neon for his Celebradar, Howard is paid a visit by The Hitcher, who frightens Howard with eels into a protection racket. Howard proceeds to prostitute himself to a transvestite called Eleanor for the required €1,000, but when the Hitcher comes to collect the money, he decides to kill Vince and Howard anyway. Before being able to do so, he is shot by Eleanor. The Hitcher awakens, having been saved by the Survival Elbow Patch he had stolen from Howard earlier. Feeling dejected, he turns to leave, before being stopped by Vince and Howard, who convince him to perform a song about eels with them in the New Rave style.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2007-11-22\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a02760ee36aaa66fc88\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1240435,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 384759,\r\n                    \"name\": \"Journey to the Centre of Punk\",\r\n                    \"overview\": \"Howard acquires a rare Jazz record (\\\"Voodoo Scat\\\" by Howlin' Jimmy Jefferson) which Vince, now a punk, bites in to, submitting to peer pressure from his new punk bandmates. It transpires that \\\"Voodoo Scat\\\" was made with a drop of Howlin' Jimmy Jefferson's blood, infecting Vince's blood stream with a corruptive rogue Jazz cell, causing him to embarrass his bandmates by scat singing at their gig in the Velvet Onion, which causes a riot. Vince is rushed back to the Nabootique, delirious, as the Jazz cell begins killing his cells. To save him, Naboo shrinks Howard and his blind friend Lester Corncrake down to microscopic size and injects them into Vince’s body to kill the invasive cell. Howard eventually succeeds in reaching the brain, where the Jazz cell begins to chase him. Howard and Lester catch it, and regrow to normal size. The Jazz cell is now also normal size, but is defeated by Lester, whom stabs him with Sid Vicious' safety pin, causing him to run away crying.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2007-11-29\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a02760ee36aaa66fc88\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1240435,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5eb75b35bbe1dd0022811bae\",\r\n                            \"order\": 6,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1006861,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Gary Numan\",\r\n                            \"original_name\": \"Gary Numan\",\r\n                            \"popularity\": 0.98,\r\n                            \"profile_path\": \"/v1FWaoFmeRZFPX6xzUNDvY2sfea.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 384760,\r\n                    \"name\": \"The Power of the Crimp\",\r\n                    \"overview\": \"Vince arrives at work late, depressed and distraught that a copycat named Lance Dior is stealing his style. Howard attempts to cheer him up by showing him Gary Numan and by telling him its what's inside that counts. Howard quickly abandons this philosophy when he has his style stolen by Lance Dior's partner, Harold Boom, who together become The Flighty Zeus. As The Flighty Zeus become increasingly more popular, The Mighty Boosh become increasingly dejected, feeling the Zeus are always one step ahead of them. The Boosh almost give up, before having the idea of premiering their music invention, crimping, at a gig at The Velvet Onion. They arrive to find The Flighty Zeus plagiarising an earlier crimp of theirs. The Boosh challenge the Zeus to a crimp-off, eventually winning by way of a four-way crimp, involving Howard, Vince, Naboo, and Bollo. This is only the episode to date where a character has referred to Vince and Howard as \\\"The Boosh.\\\" After their performance at the Velvet Onion, Bob Fossil states \\\"The Boosh have really lost it.\\\"\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2007-12-06\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a02760ee36aaa66fc88\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1240435,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Saboo\",\r\n                            \"credit_id\": \"52578a01760ee36aaa66fc38\",\r\n                            \"order\": 8,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98103,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Richard Ayoade\",\r\n                            \"original_name\": \"Richard Ayoade\",\r\n                            \"popularity\": 9.197,\r\n                            \"profile_path\": \"/qHKoy9kP4bsv4G9EkvU4FMUmYkS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 384761,\r\n                    \"name\": \"The Strange Tale of the Crack Fox\",\r\n                    \"overview\": \"Howard departs to a jazzercise class, leaving Vince to sort out the towering pile of bin bags in the back yard of the Nabootique. Whilst doing so, Vince meets an urban crack addict fox named The Crack Fox, whom he invites into the Nabootique. The Crack Fox then knocks Vince unconscious, and steals Naboo's powerful Shaman juice. Vince lies to Naboo, saying it is Howard who is responsible. Naboo then fires Howard, and is imprisoned by the Board of Shaman to be executed. Vince eventually decides to attempt to save Naboo, meeting Howard, who has taken up his old bin man job again, on the way. Howard and Vince descend to the sewers, discovering the Crack Fox, who has taken some Shaman Juice and wields supernatural power. Howard and Vince recover the Shaman Juice, and are chased through the sewers by the Crack Fox, who is eventually crushed to death by a bin lorry, which is waiting for him at the sewer exit. Howard and Vince then rescue Naboo, and the Board of Shaman celebrate by taking drugs.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2007-12-13\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a02760ee36aaa66fc88\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1240435,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Saboo\",\r\n                            \"credit_id\": \"52578a01760ee36aaa66fc38\",\r\n                            \"order\": 8,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98103,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Richard Ayoade\",\r\n                            \"original_name\": \"Richard Ayoade\",\r\n                            \"popularity\": 9.197,\r\n                            \"profile_path\": \"/qHKoy9kP4bsv4G9EkvU4FMUmYkS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 384762,\r\n                    \"name\": \"Party\",\r\n                    \"overview\": \"Vince decides to throw a party in the flat in celebration of Howard's birthday, inviting all his friends, who are seemingly unaware of Howard or the reason for the party, a fact made obvious when his speech is met with a stony silence, and Vince's late and extravagant entrance is met with cheers and clapping. After a short game of spin the bottle downstairs in the Nabootique, which is broken up by Naboo, the wife of Dennis the Head Shaman propositions Vince in the stock room. Dennis soon discovers this and proceeds to vow execution upon Vince. Vince meets Howard, who is sitting on the roof. Dennis then catches up with Vince, who pretends to be in love with Howard by kissing him, which Dennis accepts, and departs. Howard and Vince then fall off the roof and on to Vince's present for Howard: a bouncy castle.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2007-12-20\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66fa11\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98105,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Noel Fielding\",\r\n                            \"original_name\": \"Noel Fielding\",\r\n                            \"popularity\": 7.588,\r\n                            \"profile_path\": \"/1s5hoRdVVQJOX1OAetGfYvfZZrZ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52578a00760ee36aaa66f9f7\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98104,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Julian Barratt\",\r\n                            \"original_name\": \"Julian Barratt\",\r\n                            \"popularity\": 3.212,\r\n                            \"profile_path\": \"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52578a02760ee36aaa66fc88\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1240435,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Paul King\",\r\n                            \"original_name\": \"Paul King\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"job\": \"Writer\",\r\n                            \"department\": \"Writing\",\r\n                            \"credit_id\": \"619de37663536a00619c8556\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 98103,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Richard Ayoade\",\r\n                            \"original_name\": \"Richard Ayoade\",\r\n                            \"popularity\": 9.197,\r\n                            \"profile_path\": \"/qHKoy9kP4bsv4G9EkvU4FMUmYkS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 384763,\r\n                    \"name\": \"The Chokes\",\r\n                    \"overview\": \"Vince goes to great lengths to attempt to fit in to a pair of drainpipe trousers, in order to join The Black Tubes, whom have a strict thin-legs policy and are headlining a night at The Velvet Onion, which Vince is also MCing. Howard takes an acting lesson with aged actor Montgomery Flange, in order to cure him of the Chokes; an intense form of stage fright, and to outdo Sammy the Crab in a bid to impress director Jurgen Haabermaaster, who is in the audience on the night at The Velvet Onion. Sammy the Crab proceeds to run amok, after having alcohol and food poured into his tank by the Black Tubes, killing several support acts. Vince phones Howard, who stuns everyone - including Jurgen - with his impressive acting. Vince eventually gets his drainpipes on, at the price of having an exaggeratedly large head, causing him to fall over and thus ruining the gig. It later transpires that Sammy The Crab has replaced him as the frontman of The Black Tubes. Howard returns from working with Jurgen Haabermaaster, dissatisfied with the work he was offered (playing the Angry Crab Of Trapped Wind in a trapped wind commercial), much to the amusement of Naboo, Bollo and Vince.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Series 3\",\r\n            \"overview\": \"The Mighty Boosh's third series was originally broadcast between 15 November 2007 and 20 December 2007. The series features five main cast members; Julian Barratt, Noel Fielding, Rich Fulcher, Michael Fielding and Dave Brown. The third series revolves around Howard Moon and Vince Noir, and the adventures they have whilst running a second-hand shop. A DVD of the series was released on 11 February 2008 in Region 2 and 7 August in Region 4.\",\r\n            \"poster_path\": \"/2vXDsvURfRGdTEB5uAOwdF4Pyok.jpg\",\r\n            \"season_number\": 3\r\n        }\r\n    },\r\n    \"2331\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"/brqTkMU88sOuEckWhhI7aMnYNma.jpg\",\r\n        \"created_by\": [\r\n            {\r\n                \"id\": 7318,\r\n                \"credit_id\": \"5257315e760ee3776a34fd4c\",\r\n                \"name\": \"Peter Kay\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n            },\r\n            {\r\n                \"id\": 156142,\r\n                \"credit_id\": \"5257315f760ee3776a34fd54\",\r\n                \"name\": \"Dave Spikey\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/9cs11VZKTzRlMYmgdfHRuwvytFk.jpg\"\r\n            }\r\n        ],\r\n        \"episode_run_time\": [\r\n            25\r\n        ],\r\n        \"first_air_date\": \"2001-01-14\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"http://www.channel4.com/programmes/peter-kays-phoenix-nights\",\r\n        \"id\": 2331,\r\n        \"in_production\": false,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"2002-09-12\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"2002-09-12\",\r\n            \"episode_number\": 6,\r\n            \"id\": 170849,\r\n            \"name\": \"Stars in Their Eyes\",\r\n            \"overview\": \"The Phoenix has risen and the punters are back. Brian isn't surprised when the brewery decides to come and celebrate his victory and throws a gala Stars in Their Eyes show.\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 2,\r\n            \"still_path\": \"/zklQXZ1CRkwpkt5tSzrAcg3WTwk.jpg\",\r\n            \"vote_average\": 0.0,\r\n            \"vote_count\": 0\r\n        },\r\n        \"name\": \"Phoenix Nights\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"Channel 4\",\r\n                \"id\": 26,\r\n                \"logo_path\": \"/hbifXPpM55B1fL5wPo7t72vzN78.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 12,\r\n        \"number_of_seasons\": 2,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"Phoenix Nights\",\r\n        \"overview\": \"The owner of The Phoenix Club is the wheelchair-bound Brian Potter, who has presided over two clubs in the past: the first (The Aquarius) flooded, the second (The Neptune) burned down. His ambition (with the help of Jerry St Clair) is to see The Phoenix Club become the most popular in Bolton and thus outdo his arch-nemesis, Den Perry, owner of rival club The Banana Grove.\",\r\n        \"popularity\": 5.323,\r\n        \"poster_path\": \"/jZcUdxCsd53o3Npp53wD9hfOZCh.jpg\",\r\n        \"production_companies\": [\r\n            {\r\n                \"id\": 57765,\r\n                \"logo_path\": null,\r\n                \"name\": \"Ovation Entertainment Limited\",\r\n                \"origin_country\": \"\"\r\n            },\r\n            {\r\n                \"id\": 52368,\r\n                \"logo_path\": null,\r\n                \"name\": \"Goodnight Vienna Productions\",\r\n                \"origin_country\": \"\"\r\n            }\r\n        ],\r\n        \"production_countries\": [],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": null,\r\n                \"episode_count\": 12,\r\n                \"id\": 7285,\r\n                \"name\": \"Specials\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": null,\r\n                \"season_number\": 0\r\n            },\r\n            {\r\n                \"air_date\": \"2001-01-14\",\r\n                \"episode_count\": 6,\r\n                \"id\": 7283,\r\n                \"name\": \"Season 1\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/qIZ0IQhX2cXTwrSVa55ZRRvWMbE.jpg\",\r\n                \"season_number\": 1\r\n            },\r\n            {\r\n                \"air_date\": \"2002-08-08\",\r\n                \"episode_count\": 6,\r\n                \"id\": 7284,\r\n                \"name\": \"Season 2\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/qUysx7L1rjlrLpyD9CHao0DqlSb.jpg\",\r\n                \"season_number\": 2\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 8.0,\r\n        \"vote_count\": 30,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"northern england\",\r\n                    \"id\": 5215\r\n                },\r\n                {\r\n                    \"name\": \"nightclub\",\r\n                    \"id\": 2334\r\n                },\r\n                {\r\n                    \"name\": \"sitcom\",\r\n                    \"id\": 193171\r\n                }\r\n            ]\r\n        },\r\n        \"season/0\": {\r\n            \"_id\": \"52573155760ee3776a34f888\",\r\n            \"air_date\": \"\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170850,\r\n                    \"name\": \"One Man & His Horse (Documentary)\",\r\n                    \"overview\": \"Extras for Series One:\\n\\nOne Man & His Horse (Documentary).\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170851,\r\n                    \"name\": \"Deleted Scenes\",\r\n                    \"overview\": \"Extras for Season One:\\n\\nDeleted scenes from Season One of Phoenix Nights.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170853,\r\n                    \"name\": \"Outtakes (It'll Be Alright On The Phoenix Nights)\",\r\n                    \"overview\": \"Extras for Series One:\\n\\nOuttakes from Season One of Phoenix Nights.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170852,\r\n                    \"name\": \"Armchair Super Store\",\r\n                    \"overview\": \"Extras for Series One:\\n\\nUn-cut Armchair Super Store.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170856,\r\n                    \"name\": \"Trailers\",\r\n                    \"overview\": \"Extras for Series One:\\n\\nTV Trailers for Phoenix Nights Seasons One.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170855,\r\n                    \"name\": \"Outtakes (It'll Be Alright On The Phoenix Nights 2)\",\r\n                    \"overview\": \"Extras for Series Two:\\n\\nOuttakes from Season Two of Phoenix Nights.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 7,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170854,\r\n                    \"name\": \"Max and Paddy (It'll Be Alright On The Phoenix Nights 2)\",\r\n                    \"overview\": \"Extras for Series Two:\\n\\nMax and Paddy outtakes from Season Two of Phoenix Nights.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 8,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170857,\r\n                    \"name\": \"The Bowen (It'll Be Alright On The Phoenix Nights 2)\",\r\n                    \"overview\": \"Extras for Series Two:\\n\\nJim Bowen outtakes from Season Two of Phoenix Nights.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 9,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170858,\r\n                    \"name\": \"Comic Relief Idents\",\r\n                    \"overview\": \"Extras for Series Two:\\n\\nComic Relief Idents.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 10,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170861,\r\n                    \"name\": \"Comic Relief Outtakes\",\r\n                    \"overview\": \"Extras for Series Two:\\n\\nComic Relief Outtakes.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 11,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170859,\r\n                    \"name\": \"Deleted Scenes\",\r\n                    \"overview\": \"Extras for Series Two:\\n\\nDeleted scenes from Season Two of Phoenix Nights.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"\",\r\n                    \"episode_number\": 12,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170860,\r\n                    \"name\": \"Trailers\",\r\n                    \"overview\": \"Extras for Series Two:\\n\\nTV Trailers for Phoenix Nights Seasons Two.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 0,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Specials\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": null,\r\n            \"season_number\": 0\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"52573155760ee3776a34f874\",\r\n            \"air_date\": \"2001-01-14\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2001-01-14\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Mike Fiddler\",\r\n                            \"credit_id\": \"52573155760ee3776a34f89e\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1212181,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Tim Healy\",\r\n                            \"original_name\": \"Tim Healy\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": \"/ykWm8NQkmXEVFjdmspC9zPL374t.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Himself\",\r\n                            \"credit_id\": \"52573155760ee3776a34f8b4\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1220446,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Roy Walker\",\r\n                            \"original_name\": \"Roy Walker\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": \"/pufWj7yowr3rb4Wqz4z3NEF2p5h.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Spencer\",\r\n                            \"credit_id\": \"5643e45a9251410a44003bcd\",\r\n                            \"order\": 6,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1271491,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Daniel Kitson\",\r\n                            \"original_name\": \"Daniel Kitson\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Chinese Man\",\r\n                            \"credit_id\": \"5643e470c3a36870ec003848\",\r\n                            \"order\": 22,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1089911,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Tony Xu\",\r\n                            \"original_name\": \"Tony Xu\",\r\n                            \"popularity\": 1.38,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Debra Quinn\",\r\n                            \"credit_id\": \"5643e4b19251410a41003a04\",\r\n                            \"order\": 23,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1534713,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jayne Bickerton\",\r\n                            \"original_name\": \"Jayne Bickerton\",\r\n                            \"popularity\": 0.98,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 170838,\r\n                    \"name\": \"Opening Night\",\r\n                    \"overview\": \"The Phoenix Club is re-opening tonight with the help of Roy “It's The Way I Tell 'Em” Walker and Brian and the crew have to make sure everything runs smoothly which isn't helped by a Nazi bandit, singing builders, short circuit a  racist folk band and Max and Paddy. Opening Night is sure to be great.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/93ub9WPddHHAf9ECmuQXUmElz7k.jpg\",\r\n                    \"vote_average\": 0.5,\r\n                    \"vote_count\": 1\r\n                },\r\n                {\r\n                    \"air_date\": \"2001-01-21\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52573155760ee3776a34f8da\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1227518,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Rodney Litchfield\",\r\n                            \"original_name\": \"Rodney Litchfield\",\r\n                            \"popularity\": 1.042,\r\n                            \"profile_path\": \"/2eAiIEEMXV9kNH6L2mai710ZV8l.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52573155760ee3776a34f8f0\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1121491,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Bernard Wrigley\",\r\n                            \"original_name\": \"Bernard Wrigley\",\r\n                            \"popularity\": 2.144,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 170839,\r\n                    \"name\": \"Wild West Night\",\r\n                    \"overview\": \"A drunken horse, a dead pensioner - and that's before they've had the wild west night. It's business as usual at the Phoenix Club.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/w7xxajZRwf1ap5vOCqxGI1u8XmT.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2001-01-28\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52573155760ee3776a34f916\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 316889,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Axon\",\r\n                            \"original_name\": \"John Axon\",\r\n                            \"popularity\": 1.116,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 170840,\r\n                    \"name\": \"Disco Inferno\",\r\n                    \"overview\": \"Will fire and safety officer Keith Lard succeed in closing the Phoenix Club, or will Brian Potter keep it open in time for the sell-out psychic that is Clinton Baptiste?\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/sFVmHc88gUG4eCPE7SV5XXt75ws.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2001-02-04\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52573155760ee3776a34f93c\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1221739,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jo Enright\",\r\n                            \"original_name\": \"Jo Enright\",\r\n                            \"popularity\": 0.98,\r\n                            \"profile_path\": \"/sJ6nPrSb1MTvTBtz85e3SrF6Ugv.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 170841,\r\n                    \"name\": \"Singles Night\",\r\n                    \"overview\": \"It's Single's Night at the Phoenix! Brian runs over a lady's foot with his wheelchair which leads to sparks flying between the two.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/lymROdcDF95jpxMgGQVTfbeAgOa.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2001-02-11\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170842,\r\n                    \"name\": \"Comedy Robot Wars\",\r\n                    \"overview\": \"The Phoenix club has hit rock bottom. Can a new alternative comedy night and Robot Wars save the day? Probably not...\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/4iOXiidjVOeZbWYilu0vl58vij3.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2001-02-18\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170843,\r\n                    \"name\": \"Talent Trek Finals\",\r\n                    \"overview\": \"Things are finally looking up for Brian Potter in this final episode when the Talent Trek grand final comes to the Phoenix Club. But at what cost to Jerry St Claire?\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/k4pOOfOtCaFmXYensC2YQtYqKB3.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 1\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/qIZ0IQhX2cXTwrSVa55ZRRvWMbE.jpg\",\r\n            \"season_number\": 1\r\n        },\r\n        \"season/2\": {\r\n            \"_id\": \"52573155760ee3776a34f87e\",\r\n            \"air_date\": \"2002-08-08\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2002-08-08\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52573157760ee3776a34fa08\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.397,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52573157760ee3776a34f9d8\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1230932,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"David Prosho\",\r\n                            \"original_name\": \"David Prosho\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52573157760ee3776a34f9ee\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1216084,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jim Bowen\",\r\n                            \"original_name\": \"Jim Bowen\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": \"/l8m3ILiEXj5HmY5xAm73taBPRgS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 170844,\r\n                    \"name\": \"Brian Gets Everyone Back Together\",\r\n                    \"overview\": \"The club has burnt down (rival Den Perry did it) and Brian has been barred from holding a licence due to safety shortcuts and insurance fiddles. But, inspired by old mate Hoss Cartwright who runs Blackpool's La Ponderosa, Brian has plans for a revival. He needs the help of his former employees, especially Jerry St Clair, who has been reduced to the role of singing salesman at Asda.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/x8KdK0t4zOdoY4dbjkvNVIB5HYy.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-08-15\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5257315d760ee3776a34fbc4\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 110367,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Neil Fitzmaurice\",\r\n                            \"original_name\": \"Neil Fitzmaurice\",\r\n                            \"popularity\": 1.8,\r\n                            \"profile_path\": \"/rbRgevu1cMOihbm1jsbbIDsvEy9.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52573157760ee3776a34fa08\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.397,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"5257315d760ee3776a34fbae\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.397,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5257315a760ee3776a34faf6\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1218933,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Ted Robbins\",\r\n                            \"original_name\": \"Ted Robbins\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": \"/jlGzSd1O8Wtfa8gt7WemYzLczhW.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52573155760ee3776a34f8f0\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1121491,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Bernard Wrigley\",\r\n                            \"original_name\": \"Bernard Wrigley\",\r\n                            \"popularity\": 2.144,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5257315b760ee3776a34fb0e\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1230935,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Enid Dunn\",\r\n                            \"original_name\": \"Enid Dunn\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5257315c760ee3776a34fb26\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1230936,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Justin Moorhouse\",\r\n                            \"original_name\": \"Justin Moorhouse\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": \"/4Uq5vBptCXoCNA8FCAYSCEM1DmS.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5257315d760ee3776a34fb3e\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1230937,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Janice Connolly\",\r\n                            \"original_name\": \"Janice Connolly\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5257315d760ee3776a34fb54\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 62973,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Steve Edge\",\r\n                            \"original_name\": \"Steve Edge\",\r\n                            \"popularity\": 1.38,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5257315d760ee3776a34fb6a\",\r\n                            \"order\": 5,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1221737,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Toby Foster\",\r\n                            \"original_name\": \"Toby Foster\",\r\n                            \"popularity\": 0.732,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5257315d760ee3776a34fb80\",\r\n                            \"order\": 6,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 110367,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Neil Fitzmaurice\",\r\n                            \"original_name\": \"Neil Fitzmaurice\",\r\n                            \"popularity\": 1.8,\r\n                            \"profile_path\": \"/rbRgevu1cMOihbm1jsbbIDsvEy9.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5257315d760ee3776a34fb96\",\r\n                            \"order\": 7,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.397,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 170845,\r\n                    \"name\": \"Family Fun Day\",\r\n                    \"overview\": \"Brian is in dire need of cash for his refurbishment so he decides to hold a family fun day in the club car park. They've got fairground rides and face-painting - what could possibly go wrong?\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/zyQEf57ChaIG1eHEQhj3HrXzsGJ.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-08-22\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52573157760ee3776a34fa08\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.397,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52573158760ee3776a34fa48\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1230933,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Stuart Maconie\",\r\n                            \"original_name\": \"Stuart Maconie\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"5257315d760ee3776a34fbfa\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 80536,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"David Walliams\",\r\n                            \"original_name\": \"David Walliams\",\r\n                            \"popularity\": 7.745,\r\n                            \"profile_path\": \"/jC139tWQdQPXJ0PJ7pnXF8Mw2M8.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 170846,\r\n                    \"name\": \"Crimetime\",\r\n                    \"overview\": \"To get publicity, Brian arranges for the Phoenix Club to be featured on TV show Crimetime (presented by Stuart Maconie), recreating the night of the blaze. It turns into a blatant plug for the club – and features Jerry's performance of Reach For The Stars. Meanwhile, the Chinese cooks are stir frying everything and the seedy Spencer (Daniel Kitson) is hired as a barman.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/14gHsCMEqaDNvBK0G3KmHbn8eq5.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-08-29\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52573157760ee3776a34fa08\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.397,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 170847,\r\n                    \"name\": \"Quiz\",\r\n                    \"overview\": \"Everyone except Brian seems to know Wednesday is 'Jerry's Free and Easy Night'. So Jerry is furious when he finds Brian's organised a quiz night with a year's supply of lager up for grabs.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/uHh7IszG9aRWXGUBUoWoqR99VtQ.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-09-05\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52573157760ee3776a34fa08\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.397,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52573159760ee3776a34fa8c\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1230934,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Steve Money\",\r\n                            \"original_name\": \"Steve Money\",\r\n                            \"popularity\": 2.99,\r\n                            \"profile_path\": \"/ylAID795wsB6viDmMGx6euADEzU.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52573159760ee3776a34faa2\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1218865,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Kate Robbins\",\r\n                            \"original_name\": \"Kate Robbins\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": \"/oWjMskbSE5Fn6H2blq5ghTePxpZ.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 170848,\r\n                    \"name\": \"Ladies' Night\",\r\n                    \"overview\": \"It's Ladies' Night, Brian's stocked up on Bacardi and Paddy can't wait for the bored housewives to arrive. Max has his eye on a different chassis but he knows she's out of his league.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/g7wllPdFnRpgiz8a2B2u7bllnvx.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2002-09-12\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"52573157760ee3776a34fa08\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 7318,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Kay\",\r\n                            \"original_name\": \"Peter Kay\",\r\n                            \"popularity\": 2.397,\r\n                            \"profile_path\": \"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52573159760ee3776a34fa8c\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1230934,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Steve Money\",\r\n                            \"original_name\": \"Steve Money\",\r\n                            \"popularity\": 2.99,\r\n                            \"profile_path\": \"/ylAID795wsB6viDmMGx6euADEzU.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 170849,\r\n                    \"name\": \"Stars in Their Eyes\",\r\n                    \"overview\": \"The Phoenix has risen and the punters are back. Brian isn't surprised when the brewery decides to come and celebrate his victory and throws a gala Stars in Their Eyes show.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/zklQXZ1CRkwpkt5tSzrAcg3WTwk.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 2\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/qUysx7L1rjlrLpyD9CHao0DqlSb.jpg\",\r\n            \"season_number\": 2\r\n        }\r\n    },\r\n    \"2207\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"/6f1nH8U4kT9GaOYezYiG1CJYL9p.jpg\",\r\n        \"created_by\": [\r\n            {\r\n                \"id\": 8930,\r\n                \"credit_id\": \"525727b2760ee3776a284a44\",\r\n                \"name\": \"John Cleese\",\r\n                \"gender\": 2,\r\n                \"profile_path\": \"/kg63gNYQtGPi2fSNIvCnVAclCbi.jpg\"\r\n            },\r\n            {\r\n                \"id\": 149979,\r\n                \"credit_id\": \"525727b2760ee3776a284a4a\",\r\n                \"name\": \"Connie Booth\",\r\n                \"gender\": 1,\r\n                \"profile_path\": \"/wbqzdZDC0WjS1nYrfJxxKmB9Fzn.jpg\"\r\n            }\r\n        ],\r\n        \"episode_run_time\": [\r\n            30\r\n        ],\r\n        \"first_air_date\": \"1975-09-19\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"\",\r\n        \"id\": 2207,\r\n        \"in_production\": false,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"1979-10-25\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"1979-10-25\",\r\n            \"episode_number\": 6,\r\n            \"id\": 154640,\r\n            \"name\": \"Basil the Rat\",\r\n            \"overview\": \"The health inspector is coming and Basil tells Manuel to get rid of his pet rat, which he later finds out is named Basil.\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 2,\r\n            \"still_path\": \"/uKXG14nQYokDmqhiQEDK8T5mWIH.jpg\",\r\n            \"vote_average\": 9.2,\r\n            \"vote_count\": 13\r\n        },\r\n        \"name\": \"Fawlty Towers\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"BBC Two\",\r\n                \"id\": 332,\r\n                \"logo_path\": \"/6kl5tMuct7u3ej5myL4c9QQVSW1.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 12,\r\n        \"number_of_seasons\": 2,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"Fawlty Towers\",\r\n        \"overview\": \"Owner Basil Fawlty, his wife Sybil, a chambermaid Polly, and Spanish waiter Manuel attempt to run their hotel amidst farcical situations and an array of demanding guests.\",\r\n        \"popularity\": 16.554,\r\n        \"poster_path\": \"/tvTYIjujN87dcKAmSLqcvAahykH.jpg\",\r\n        \"production_companies\": [\r\n            {\r\n                \"id\": 3324,\r\n                \"logo_path\": \"/dqT3yOTlfJRmtvk52Ccd1O6dZ0A.png\",\r\n                \"name\": \"BBC\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"production_countries\": [\r\n            {\r\n                \"iso_3166_1\": \"GB\",\r\n                \"name\": \"United Kingdom\"\r\n            }\r\n        ],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": \"2001-10-16\",\r\n                \"episode_count\": 28,\r\n                \"id\": 6772,\r\n                \"name\": \"Specials\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": null,\r\n                \"season_number\": 0\r\n            },\r\n            {\r\n                \"air_date\": \"1975-09-19\",\r\n                \"episode_count\": 6,\r\n                \"id\": 6770,\r\n                \"name\": \"Series 1\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/cuJDQ53yDVJxMBwMdU067nbKV4A.jpg\",\r\n                \"season_number\": 1\r\n            },\r\n            {\r\n                \"air_date\": \"1979-02-19\",\r\n                \"episode_count\": 6,\r\n                \"id\": 6771,\r\n                \"name\": \"Series 2\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/1RIQAbpF1eMYLjnwUDl3YjcE56R.jpg\",\r\n                \"season_number\": 2\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 8.2,\r\n        \"vote_count\": 484,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"hotel\",\r\n                    \"id\": 612\r\n                },\r\n                {\r\n                    \"name\": \"waitress\",\r\n                    \"id\": 828\r\n                },\r\n                {\r\n                    \"name\": \"married couple\",\r\n                    \"id\": 2587\r\n                },\r\n                {\r\n                    \"name\": \"slapstick\",\r\n                    \"id\": 9253\r\n                },\r\n                {\r\n                    \"name\": \"chef\",\r\n                    \"id\": 18293\r\n                },\r\n                {\r\n                    \"name\": \"waiter\",\r\n                    \"id\": 40950\r\n                },\r\n                {\r\n                    \"name\": \"sitcom\",\r\n                    \"id\": 193171\r\n                },\r\n                {\r\n                    \"name\": \"angry\",\r\n                    \"id\": 200918\r\n                },\r\n                {\r\n                    \"name\": \"torquay\",\r\n                    \"id\": 206643\r\n                },\r\n                {\r\n                    \"name\": \"workplace comedy\",\r\n                    \"id\": 210605\r\n                },\r\n                {\r\n                    \"name\": \"devon\",\r\n                    \"id\": 234680\r\n                }\r\n            ]\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"525727a9760ee3776a2842bf\",\r\n            \"air_date\": \"1975-09-19\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"1975-09-19\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525727aa760ee3776a284386\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 67616,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"John Howard Davies\",\r\n                            \"original_name\": \"John Howard Davies\",\r\n                            \"popularity\": 2.685,\r\n                            \"profile_path\": \"/xe4IWezr7ZTqk3FPZMIsu3xGE4k.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a284358\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 149979,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Connie Booth\",\r\n                            \"original_name\": \"Connie Booth\",\r\n                            \"popularity\": 16.192,\r\n                            \"profile_path\": \"/wbqzdZDC0WjS1nYrfJxxKmB9Fzn.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a28436e\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 8930,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Cleese\",\r\n                            \"original_name\": \"John Cleese\",\r\n                            \"popularity\": 11.194,\r\n                            \"profile_path\": \"/kg63gNYQtGPi2fSNIvCnVAclCbi.jpg\"\r\n                        },\r\n                        {\r\n                            \"job\": \"Editor\",\r\n                            \"department\": \"Editing\",\r\n                            \"credit_id\": \"5dbd6f61c8a2d40014a24fd5\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 2446917,\r\n                            \"known_for_department\": \"Editing\",\r\n                            \"name\": \"Bill Harris\",\r\n                            \"original_name\": \"Bill Harris\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Lord Melbury\",\r\n                            \"credit_id\": \"525727aa760ee3776a284314\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 30705,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Michael Gwynn\",\r\n                            \"original_name\": \"Michael Gwynn\",\r\n                            \"popularity\": 1.831,\r\n                            \"profile_path\": \"/pyklvVKyfDM1JVD1LSVrIu5U05y.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Danny Brown\",\r\n                            \"credit_id\": \"525727aa760ee3776a28432a\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 140913,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Robin Ellis\",\r\n                            \"original_name\": \"Robin Ellis\",\r\n                            \"popularity\": 1.336,\r\n                            \"profile_path\": \"/eVZFtqmZPhaeU18rYAkn6YAUUJb.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Mackenzie\",\r\n                            \"credit_id\": \"525727aa760ee3776a284340\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1212163,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"David Simeon\",\r\n                            \"original_name\": \"David Simeon\",\r\n                            \"popularity\": 2.268,\r\n                            \"profile_path\": \"/p7im1W2IaY5psSYtQ3EZOwKPpww.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Sir Richard Morris\",\r\n                            \"credit_id\": \"593b8da0c3a3680f59008660\",\r\n                            \"order\": 35,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 153197,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Martin Wyldeck\",\r\n                            \"original_name\": \"Martin Wyldeck\",\r\n                            \"popularity\": 2.631,\r\n                            \"profile_path\": \"/7wg93WZtDf5WMz6LpYChNkFY2Ft.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Wareing\",\r\n                            \"credit_id\": \"5dbd6fddc8a2d40012a276c5\",\r\n                            \"order\": 56,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1831349,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Terence Conoley\",\r\n                            \"original_name\": \"Terence Conoley\",\r\n                            \"popularity\": 0.764,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mrs. Wareing\",\r\n                            \"credit_id\": \"5dbd71517d2bc1001333f5d7\",\r\n                            \"order\": 57,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1785391,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Annet Peters\",\r\n                            \"original_name\": \"Annet Peters\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 154629,\r\n                    \"name\": \"A Touch of Class\",\r\n                    \"overview\": \"A confidence trickster comes to stay at the hotel, just after Basil has taken an ad in a posh magazine to upgrade the clientele.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/qsfKIPZ9IfXWIX6rbxvkIYzHCF8.jpg\",\r\n                    \"vote_average\": 8.5,\r\n                    \"vote_count\": 19\r\n                },\r\n                {\r\n                    \"air_date\": \"1975-09-26\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525727aa760ee3776a284386\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 67616,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"John Howard Davies\",\r\n                            \"original_name\": \"John Howard Davies\",\r\n                            \"popularity\": 2.685,\r\n                            \"profile_path\": \"/xe4IWezr7ZTqk3FPZMIsu3xGE4k.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a284358\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 149979,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Connie Booth\",\r\n                            \"original_name\": \"Connie Booth\",\r\n                            \"popularity\": 16.192,\r\n                            \"profile_path\": \"/wbqzdZDC0WjS1nYrfJxxKmB9Fzn.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a28436e\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 8930,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Cleese\",\r\n                            \"original_name\": \"John Cleese\",\r\n                            \"popularity\": 11.194,\r\n                            \"profile_path\": \"/kg63gNYQtGPi2fSNIvCnVAclCbi.jpg\"\r\n                        },\r\n                        {\r\n                            \"job\": \"Editor\",\r\n                            \"department\": \"Editing\",\r\n                            \"credit_id\": \"5dbd71ccc8a2d40014a2555a\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1403627,\r\n                            \"known_for_department\": \"Editing\",\r\n                            \"name\": \"Bob Rymer\",\r\n                            \"original_name\": \"Bob Rymer\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"O'Reilly\",\r\n                            \"credit_id\": \"525727aa760ee3776a2843a8\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1282,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"David Kelly\",\r\n                            \"original_name\": \"David Kelly\",\r\n                            \"popularity\": 8.308,\r\n                            \"profile_path\": \"/4NzqVwHlbaGO3rjW0ozRL8J9SxG.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Stubbs\",\r\n                            \"credit_id\": \"593b8ef79251410593008e3a\",\r\n                            \"order\": 36,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1399161,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"James Appleby\",\r\n                            \"original_name\": \"James Appleby\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Delivery Man\",\r\n                            \"credit_id\": \"5dbd73f17d2bc1001333f9ef\",\r\n                            \"order\": 58,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1401931,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"George Lee\",\r\n                            \"original_name\": \"George Lee\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Lurphy - Workman\",\r\n                            \"credit_id\": \"5dbd74419638640012e1969a\",\r\n                            \"order\": 59,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 24712,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Michael Cronin\",\r\n                            \"original_name\": \"Michael Cronin\",\r\n                            \"popularity\": 4.673,\r\n                            \"profile_path\": \"/fPO44QWPHKyOYh0ni6JWehOCD8g.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Jones - Workman\",\r\n                            \"credit_id\": \"5dbd74c37d2bc1001333fa50\",\r\n                            \"order\": 60,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 94647,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Michael Halsey\",\r\n                            \"original_name\": \"Michael Halsey\",\r\n                            \"popularity\": 1.13,\r\n                            \"profile_path\": \"/ofvE578ka9ugkumAfUSnoD4xddc.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Kerr - Workman\",\r\n                            \"credit_id\": \"5dbd74fdefe37c001580d495\",\r\n                            \"order\": 61,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 2446931,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Barney Dorman\",\r\n                            \"original_name\": \"Barney Dorman\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 154630,\r\n                    \"name\": \"The Builders\",\r\n                    \"overview\": \"The Fawltys take a holiday and leave Polly and Manuel to run the place just as O'Reilly's builders come to redo the lobby.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/4LUVrjkM69cTTFttxMDcVwuaQTl.jpg\",\r\n                    \"vote_average\": 8.5,\r\n                    \"vote_count\": 17\r\n                },\r\n                {\r\n                    \"air_date\": \"1975-10-03\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525727aa760ee3776a284386\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 67616,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"John Howard Davies\",\r\n                            \"original_name\": \"John Howard Davies\",\r\n                            \"popularity\": 2.685,\r\n                            \"profile_path\": \"/xe4IWezr7ZTqk3FPZMIsu3xGE4k.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a284358\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 149979,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Connie Booth\",\r\n                            \"original_name\": \"Connie Booth\",\r\n                            \"popularity\": 16.192,\r\n                            \"profile_path\": \"/wbqzdZDC0WjS1nYrfJxxKmB9Fzn.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a28436e\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 8930,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Cleese\",\r\n                            \"original_name\": \"John Cleese\",\r\n                            \"popularity\": 11.194,\r\n                            \"profile_path\": \"/kg63gNYQtGPi2fSNIvCnVAclCbi.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Mrs. Rachel Lloyd\",\r\n                            \"credit_id\": \"525727aa760ee3776a2843e0\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 114535,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Diana King\",\r\n                            \"original_name\": \"Diana King\",\r\n                            \"popularity\": 3.797,\r\n                            \"profile_path\": \"/8rpwcSUKzhBdohMB9ntIdEAuwgj.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Lloyd\",\r\n                            \"credit_id\": \"525727aa760ee3776a2843f6\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 11133,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Conrad Phillips\",\r\n                            \"original_name\": \"Conrad Phillips\",\r\n                            \"popularity\": 2.161,\r\n                            \"profile_path\": \"/3YnzOo8nXweKyzbQ5LkEcMjE51z.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Alan\",\r\n                            \"credit_id\": \"525727aa760ee3776a28440c\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1219696,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Trevor Adams\",\r\n                            \"original_name\": \"Trevor Adams\",\r\n                            \"popularity\": 0.728,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mrs. Peignoir\",\r\n                            \"credit_id\": \"593b90e0c3a3680f87008ea4\",\r\n                            \"order\": 37,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1402380,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Yvonne Gilan\",\r\n                            \"original_name\": \"Yvonne Gilan\",\r\n                            \"popularity\": 3.151,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Jean\",\r\n                            \"credit_id\": \"5dbd755dc8a2d40018a25ca4\",\r\n                            \"order\": 62,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 2446933,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"April Walker\",\r\n                            \"original_name\": \"April Walker\",\r\n                            \"popularity\": 1.092,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Bar Guest\",\r\n                            \"credit_id\": \"5dbd75beefe37c001380dfd2\",\r\n                            \"order\": 63,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1225738,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jay Neill\",\r\n                            \"original_name\": \"Jay Neill\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 154631,\r\n                    \"name\": \"The Wedding Party\",\r\n                    \"overview\": \"Basil wants 'none of that' going on in his rooms and suspects some guests and Polly of carrying on.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/jjeLz1B74j8k4Heqx7ZpB3Qu2Eo.jpg\",\r\n                    \"vote_average\": 8.2,\r\n                    \"vote_count\": 14\r\n                },\r\n                {\r\n                    \"air_date\": \"1975-10-10\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525727aa760ee3776a284386\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 67616,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"John Howard Davies\",\r\n                            \"original_name\": \"John Howard Davies\",\r\n                            \"popularity\": 2.685,\r\n                            \"profile_path\": \"/xe4IWezr7ZTqk3FPZMIsu3xGE4k.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a284358\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 149979,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Connie Booth\",\r\n                            \"original_name\": \"Connie Booth\",\r\n                            \"popularity\": 16.192,\r\n                            \"profile_path\": \"/wbqzdZDC0WjS1nYrfJxxKmB9Fzn.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a28436e\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 8930,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Cleese\",\r\n                            \"original_name\": \"John Cleese\",\r\n                            \"popularity\": 11.194,\r\n                            \"profile_path\": \"/kg63gNYQtGPi2fSNIvCnVAclCbi.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Mr. Hutchinson\",\r\n                            \"credit_id\": \"525727aa760ee3776a284444\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 40943,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Bernard Cribbins\",\r\n                            \"original_name\": \"Bernard Cribbins\",\r\n                            \"popularity\": 3.732,\r\n                            \"profile_path\": \"/yBSGVUC8d37kXVkjNPuQ4vPslrI.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Walt\",\r\n                            \"credit_id\": \"525727aa760ee3776a28445a\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 33109,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"James Cossins\",\r\n                            \"original_name\": \"James Cossins\",\r\n                            \"popularity\": 0.694,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"John\",\r\n                            \"credit_id\": \"5dbd767fc8a2d40014a25d78\",\r\n                            \"order\": 64,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1409086,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Geoffrey Morris\",\r\n                            \"original_name\": \"Geoffrey Morris\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Brian\",\r\n                            \"credit_id\": \"5dbd7753c8a2d40018a25e56\",\r\n                            \"order\": 65,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 32566,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Peter Brett\",\r\n                            \"original_name\": \"Peter Brett\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 154632,\r\n                    \"name\": \"The Hotel Inspectors\",\r\n                    \"overview\": \"Some inspectors are in town and Basil gets paranoid, so he alternately fawns over and offends his guests.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/jaiI1LdQXuFu0Fb3gQFsANi3taF.jpg\",\r\n                    \"vote_average\": 8.9,\r\n                    \"vote_count\": 14\r\n                },\r\n                {\r\n                    \"air_date\": \"1975-10-17\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525727aa760ee3776a284386\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 67616,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"John Howard Davies\",\r\n                            \"original_name\": \"John Howard Davies\",\r\n                            \"popularity\": 2.685,\r\n                            \"profile_path\": \"/xe4IWezr7ZTqk3FPZMIsu3xGE4k.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a284358\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 149979,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Connie Booth\",\r\n                            \"original_name\": \"Connie Booth\",\r\n                            \"popularity\": 16.192,\r\n                            \"profile_path\": \"/wbqzdZDC0WjS1nYrfJxxKmB9Fzn.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a28436e\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 8930,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Cleese\",\r\n                            \"original_name\": \"John Cleese\",\r\n                            \"popularity\": 11.194,\r\n                            \"profile_path\": \"/kg63gNYQtGPi2fSNIvCnVAclCbi.jpg\"\r\n                        },\r\n                        {\r\n                            \"job\": \"Editor\",\r\n                            \"department\": \"Editing\",\r\n                            \"credit_id\": \"5dbd71ccc8a2d40014a2555a\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1403627,\r\n                            \"known_for_department\": \"Editing\",\r\n                            \"name\": \"Bob Rymer\",\r\n                            \"original_name\": \"Bob Rymer\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Mrs. Hall\",\r\n                            \"credit_id\": \"525727aa760ee3776a284492\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1197428,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Ann Way\",\r\n                            \"original_name\": \"Ann Way\",\r\n                            \"popularity\": 3.108,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Heath\",\r\n                            \"credit_id\": \"525727aa760ee3776a2844a8\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 107021,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jeffrey Segal\",\r\n                            \"original_name\": \"Jeffrey Segal\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Colonel Hall\",\r\n                            \"credit_id\": \"525727aa760ee3776a2844be\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 47860,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Allan Cuthbertson\",\r\n                            \"original_name\": \"Allan Cuthbertson\",\r\n                            \"popularity\": 2.919,\r\n                            \"profile_path\": \"/1OsECfFQjtslHwy9dqIwFl0LBur.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Kurt\",\r\n                            \"credit_id\": \"525727aa760ee3776a2844d4\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 140148,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Steve Plytas\",\r\n                            \"original_name\": \"Steve Plytas\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": \"/qFGSjfiC6qBEMCdpvZgI4YIUvE4.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Twitchen\",\r\n                            \"credit_id\": \"525727aa760ee3776a2844ea\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1220328,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Richard Caldicot\",\r\n                            \"original_name\": \"Richard Caldicot\",\r\n                            \"popularity\": 3.842,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Andre\",\r\n                            \"credit_id\": \"525727ab760ee3776a284500\",\r\n                            \"order\": 5,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 47848,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"André Maranne\",\r\n                            \"original_name\": \"André Maranne\",\r\n                            \"popularity\": 1.872,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mrs. Heath\",\r\n                            \"credit_id\": \"593b96f4925141059300946b\",\r\n                            \"order\": 38,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1684118,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Elizabeth Benson\",\r\n                            \"original_name\": \"Elizabeth Benson\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mrs. Twitchen\",\r\n                            \"credit_id\": \"593b97be9251410593009521\",\r\n                            \"order\": 39,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 993305,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Betty Huntley-Wright\",\r\n                            \"original_name\": \"Betty Huntley-Wright\",\r\n                            \"popularity\": 1.025,\r\n                            \"profile_path\": \"/627mHfd5YNXYFqW1k3tiHt2gLj5.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Master Ronald Heath\",\r\n                            \"credit_id\": \"5dbd781f9638640014e169a7\",\r\n                            \"order\": 66,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 2446938,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Tony Page\",\r\n                            \"original_name\": \"Tony Page\",\r\n                            \"popularity\": 0.98,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 154633,\r\n                    \"name\": \"Gourmet Night\",\r\n                    \"overview\": \"To bring the right type of crowd into the hotel Basil establishes a Gourmet Night.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/k024glDgcdmTiGLaRG191y3zrdr.jpg\",\r\n                    \"vote_average\": 8.4,\r\n                    \"vote_count\": 14\r\n                },\r\n                {\r\n                    \"air_date\": \"1975-10-24\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525727aa760ee3776a284386\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 67616,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"John Howard Davies\",\r\n                            \"original_name\": \"John Howard Davies\",\r\n                            \"popularity\": 2.685,\r\n                            \"profile_path\": \"/xe4IWezr7ZTqk3FPZMIsu3xGE4k.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a284358\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 149979,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Connie Booth\",\r\n                            \"original_name\": \"Connie Booth\",\r\n                            \"popularity\": 16.192,\r\n                            \"profile_path\": \"/wbqzdZDC0WjS1nYrfJxxKmB9Fzn.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a28436e\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 8930,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Cleese\",\r\n                            \"original_name\": \"John Cleese\",\r\n                            \"popularity\": 11.194,\r\n                            \"profile_path\": \"/kg63gNYQtGPi2fSNIvCnVAclCbi.jpg\"\r\n                        },\r\n                        {\r\n                            \"job\": \"Editor\",\r\n                            \"department\": \"Editing\",\r\n                            \"credit_id\": \"5dbd71ccc8a2d40014a2555a\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1403627,\r\n                            \"known_for_department\": \"Editing\",\r\n                            \"name\": \"Bob Rymer\",\r\n                            \"original_name\": \"Bob Rymer\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Sister\",\r\n                            \"credit_id\": \"525727ac760ee3776a28453a\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1229859,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Brenda Cowling\",\r\n                            \"original_name\": \"Brenda Cowling\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mrs. Wilson\",\r\n                            \"credit_id\": \"593b9934c3a3680f7b008e14\",\r\n                            \"order\": 40,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 692664,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Claire Davenport\",\r\n                            \"original_name\": \"Claire Davenport\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Doctor\",\r\n                            \"credit_id\": \"593b99b592514105b700952e\",\r\n                            \"order\": 41,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 185999,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Louis Mahoney\",\r\n                            \"original_name\": \"Louis Mahoney\",\r\n                            \"popularity\": 0.62,\r\n                            \"profile_path\": \"/u1Z8gQfU16zPcVBkabMyPfPNohk.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Sharp\",\r\n                            \"credit_id\": \"5dbd78c77d2bc1001133eedc\",\r\n                            \"order\": 67,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 2446942,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Lawrence\",\r\n                            \"original_name\": \"John Lawrence\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mrs. Sharp\",\r\n                            \"credit_id\": \"5dbd78dec8a2d40018a2654d\",\r\n                            \"order\": 68,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1854060,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Iris Fry\",\r\n                            \"original_name\": \"Iris Fry\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"German Guest\",\r\n                            \"credit_id\": \"5dbd796defe37c001380e543\",\r\n                            \"order\": 69,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1749598,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Willy Bowman\",\r\n                            \"original_name\": \"Willy Bowman\",\r\n                            \"popularity\": 0.833,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"German Guest\",\r\n                            \"credit_id\": \"5dbd79cac8a2d40012a28b55\",\r\n                            \"order\": 70,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 230251,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Nick Kane\",\r\n                            \"original_name\": \"Nick Kane\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"German Guest\",\r\n                            \"credit_id\": \"5dbd79e6efe37c001380e5d4\",\r\n                            \"order\": 71,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 2446944,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Lisa Bergmayr\",\r\n                            \"original_name\": \"Lisa Bergmayr\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"German Guest\",\r\n                            \"credit_id\": \"5dbd79f2c8a2d40012a28ba0\",\r\n                            \"order\": 72,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 2446946,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Dan Gillan\",\r\n                            \"original_name\": \"Dan Gillan\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Hospital Orderly\",\r\n                            \"credit_id\": \"5dbd7a1fc8a2d40018a267a5\",\r\n                            \"order\": 73,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1213432,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mike Mungarvan\",\r\n                            \"original_name\": \"Mike Mungarvan\",\r\n                            \"popularity\": 0.608,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 154634,\r\n                    \"name\": \"The Germans\",\r\n                    \"overview\": \"Sybil goes into the hospital for toe surgery, leaving Basil to cope with a fire drill single-handed. After a couple of blows on the head, Basil tells some German guests where Germany went wrong in WWII.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/qkEJzZOX4ttOxR2kcXu2uG8wwjV.jpg\",\r\n                    \"vote_average\": 9.2,\r\n                    \"vote_count\": 12\r\n                }\r\n            ],\r\n            \"name\": \"Series 1\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/cuJDQ53yDVJxMBwMdU067nbKV4A.jpg\",\r\n            \"season_number\": 1\r\n        },\r\n        \"season/2\": {\r\n            \"_id\": \"525727aa760ee3776a2842e0\",\r\n            \"air_date\": \"1979-02-19\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"1979-02-19\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a284358\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 149979,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Connie Booth\",\r\n                            \"original_name\": \"Connie Booth\",\r\n                            \"popularity\": 16.192,\r\n                            \"profile_path\": \"/wbqzdZDC0WjS1nYrfJxxKmB9Fzn.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525727ac760ee3776a284598\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 47974,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Bob Spiers\",\r\n                            \"original_name\": \"Bob Spiers\",\r\n                            \"popularity\": 2.744,\r\n                            \"profile_path\": \"/l22gNZcPsph1B5xeNtm4tqf53fQ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a28436e\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 8930,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Cleese\",\r\n                            \"original_name\": \"John Cleese\",\r\n                            \"popularity\": 11.194,\r\n                            \"profile_path\": \"/kg63gNYQtGPi2fSNIvCnVAclCbi.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Mrs. Alice Richards\",\r\n                            \"credit_id\": \"525727ac760ee3776a284572\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 161951,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Joan Sanderson\",\r\n                            \"original_name\": \"Joan Sanderson\",\r\n                            \"popularity\": 0.84,\r\n                            \"profile_path\": \"/5NyhYrPaE0njQMzQ0bW6KgyAXiP.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Firkin\",\r\n                            \"credit_id\": \"593b9bbcc3a3680f59009188\",\r\n                            \"order\": 42,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 79636,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Johnny Shannon\",\r\n                            \"original_name\": \"Johnny Shannon\",\r\n                            \"popularity\": 1.616,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Thurston\",\r\n                            \"credit_id\": \"5dbd7ac4efe37c001580e2de\",\r\n                            \"order\": 74,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1864499,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Robert Lankesheer\",\r\n                            \"original_name\": \"Robert Lankesheer\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Mackintosh\",\r\n                            \"credit_id\": \"5dbd7b5b7d2bc10017340339\",\r\n                            \"order\": 75,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 2446951,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Bill Bradley\",\r\n                            \"original_name\": \"Bill Bradley\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Kerr\",\r\n                            \"credit_id\": \"5dbd7b93c8a2d40012a28fbe\",\r\n                            \"order\": 76,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1401931,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"George Lee\",\r\n                            \"original_name\": \"George Lee\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Yardley\",\r\n                            \"credit_id\": \"5dbd7ba47d2bc100133403b4\",\r\n                            \"order\": 77,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 2446952,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mervyn Pascoe\",\r\n                            \"original_name\": \"Mervyn Pascoe\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 154635,\r\n                    \"name\": \"Communication Problems\",\r\n                    \"overview\": \"A selectively deaf woman named Mrs Richards insists that she has had a large amount of money stolen at the hotel, and against Sybil's wishes Basil puts a fiver on Dragonfly.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/qkZaTtAzBuOQkfwx1vVv3uBYxnF.jpg\",\r\n                    \"vote_average\": 9.3,\r\n                    \"vote_count\": 12\r\n                },\r\n                {\r\n                    \"air_date\": \"1979-02-26\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a284358\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 149979,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Connie Booth\",\r\n                            \"original_name\": \"Connie Booth\",\r\n                            \"popularity\": 16.192,\r\n                            \"profile_path\": \"/wbqzdZDC0WjS1nYrfJxxKmB9Fzn.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525727ac760ee3776a284598\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 47974,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Bob Spiers\",\r\n                            \"original_name\": \"Bob Spiers\",\r\n                            \"popularity\": 2.744,\r\n                            \"profile_path\": \"/l22gNZcPsph1B5xeNtm4tqf53fQ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a28436e\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 8930,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Cleese\",\r\n                            \"original_name\": \"John Cleese\",\r\n                            \"popularity\": 11.194,\r\n                            \"profile_path\": \"/kg63gNYQtGPi2fSNIvCnVAclCbi.jpg\"\r\n                        },\r\n                        {\r\n                            \"job\": \"Editor\",\r\n                            \"department\": \"Editing\",\r\n                            \"credit_id\": \"5dbd7bf1efe37c001380e976\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 2446954,\r\n                            \"known_for_department\": \"Editing\",\r\n                            \"name\": \"Susan Imrie\",\r\n                            \"original_name\": \"Susan Imrie\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Mr. Johnson\",\r\n                            \"credit_id\": \"525727ac760ee3776a2845ba\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 2964,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Nicky Henson\",\r\n                            \"original_name\": \"Nicky Henson\",\r\n                            \"popularity\": 3.72,\r\n                            \"profile_path\": \"/uuFbVEgYYud7o10ONFrx4SfkDoR.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mrs. Abbott\",\r\n                            \"credit_id\": \"525727ad760ee3776a2845d2\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1229860,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Elspet Gray\",\r\n                            \"original_name\": \"Elspet Gray\",\r\n                            \"popularity\": 6.188,\r\n                            \"profile_path\": \"/vTz3I13XpZzmVRhMeZBlyp3M61b.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Raylene Miles\",\r\n                            \"credit_id\": \"525727ad760ee3776a2845e8\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 97671,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Luan Peters\",\r\n                            \"original_name\": \"Luan Peters\",\r\n                            \"popularity\": 3.457,\r\n                            \"profile_path\": \"/bOgnA8yMsJ549anum5AyaneUs68.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Dr. Abbott\",\r\n                            \"credit_id\": \"525727ad760ee3776a2845fe\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 199925,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Basil Henson\",\r\n                            \"original_name\": \"Basil Henson\",\r\n                            \"popularity\": 1.38,\r\n                            \"profile_path\": \"/G1L7xtEJd10ezvwI9cA5ZbGhEK.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mrs. Johnson\",\r\n                            \"credit_id\": \"593b9f2fc3a3680ee000a443\",\r\n                            \"order\": 43,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 186272,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Aimée Delamain\",\r\n                            \"original_name\": \"Aimée Delamain\",\r\n                            \"popularity\": 1.614,\r\n                            \"profile_path\": \"/brsWTYLhNEKw4iSj7GrU51fQ4dy.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Girlfriend\",\r\n                            \"credit_id\": \"5dbd7c5dc8a2d40018a26c22\",\r\n                            \"order\": 78,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 37897,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Imogen Bickford-Smith\",\r\n                            \"original_name\": \"Imogen Bickford-Smith\",\r\n                            \"popularity\": 3.176,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 154636,\r\n                    \"name\": \"The Psychiatrist\",\r\n                    \"overview\": \"A psychiatrist and his wife come to stay and Basil thinks Sybil is telling them all about his life.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/rjRGF9b7aYpregDgVGQdtOjYTO3.jpg\",\r\n                    \"vote_average\": 9.2,\r\n                    \"vote_count\": 12\r\n                },\r\n                {\r\n                    \"air_date\": \"1979-03-05\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a284358\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 149979,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Connie Booth\",\r\n                            \"original_name\": \"Connie Booth\",\r\n                            \"popularity\": 16.192,\r\n                            \"profile_path\": \"/wbqzdZDC0WjS1nYrfJxxKmB9Fzn.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525727ac760ee3776a284598\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 47974,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Bob Spiers\",\r\n                            \"original_name\": \"Bob Spiers\",\r\n                            \"popularity\": 2.744,\r\n                            \"profile_path\": \"/l22gNZcPsph1B5xeNtm4tqf53fQ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a28436e\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 8930,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Cleese\",\r\n                            \"original_name\": \"John Cleese\",\r\n                            \"popularity\": 11.194,\r\n                            \"profile_path\": \"/kg63gNYQtGPi2fSNIvCnVAclCbi.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Mr. Arrad\",\r\n                            \"credit_id\": \"525727ad760ee3776a284636\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 16275,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Norman Bird\",\r\n                            \"original_name\": \"Norman Bird\",\r\n                            \"popularity\": 4.038,\r\n                            \"profile_path\": \"/gWimNB9CRJvE24vOeJbLpkxOi4q.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Harry Hamilton\",\r\n                            \"credit_id\": \"525727ad760ee3776a28464c\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 8664,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Bruce Boa\",\r\n                            \"original_name\": \"Bruce Boa\",\r\n                            \"popularity\": 2.301,\r\n                            \"profile_path\": \"/krI6JJf0w2naHn4sbvqOwj0a0ny.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mrs. Arrad\",\r\n                            \"credit_id\": \"525727ae760ee3776a284662\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1216423,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Stella Tanner\",\r\n                            \"original_name\": \"Stella Tanner\",\r\n                            \"popularity\": 0.98,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mrs. Hamilton\",\r\n                            \"credit_id\": \"525727ae760ee3776a284678\",\r\n                            \"order\": 3,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1213715,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Claire Nielson\",\r\n                            \"original_name\": \"Claire Nielson\",\r\n                            \"popularity\": 2.698,\r\n                            \"profile_path\": \"/yrRpx5N9yRDnv8WKVjgrIHd1JWb.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Johnston\",\r\n                            \"credit_id\": \"593ba1f1c3a3680f67009e20\",\r\n                            \"order\": 44,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1831349,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Terence Conoley\",\r\n                            \"original_name\": \"Terence Conoley\",\r\n                            \"popularity\": 0.764,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mrs. Johnston\",\r\n                            \"credit_id\": \"593ba24092514105970098ad\",\r\n                            \"order\": 45,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 229365,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"June Ellis\",\r\n                            \"original_name\": \"June Ellis\",\r\n                            \"popularity\": 0.98,\r\n                            \"profile_path\": \"/umSQriWXb0JVThn9e3FwamnBbuo.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Libson\",\r\n                            \"credit_id\": \"5dbd7cdfefe37c001580e62d\",\r\n                            \"order\": 79,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1399684,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Anthony Dawes\",\r\n                            \"original_name\": \"Anthony Dawes\",\r\n                            \"popularity\": 1.998,\r\n                            \"profile_path\": \"/ir0ks1tDyExpZxY5rW7Ues7x3BC.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Miss Gurke\",\r\n                            \"credit_id\": \"5dbd7da6efe37c001380eee4\",\r\n                            \"order\": 80,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1552053,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Beatrice Shaw\",\r\n                            \"original_name\": \"Beatrice Shaw\",\r\n                            \"popularity\": 1.214,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Miss Hare\",\r\n                            \"credit_id\": \"5dbd7e559638640014e1808d\",\r\n                            \"order\": 81,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1361824,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Dorothy Frere\",\r\n                            \"original_name\": \"Dorothy Frere\",\r\n                            \"popularity\": 2.588,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 154637,\r\n                    \"name\": \"Waldorf Salad\",\r\n                    \"overview\": \"An American and his wife get unsatisfactory service at Fawlty Towers when he orders a Waldorf salad, after the kitchen has closed.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/lADnDg5dgc1V3gzZyqAWmjP2Qf9.jpg\",\r\n                    \"vote_average\": 8.2,\r\n                    \"vote_count\": 12\r\n                },\r\n                {\r\n                    \"air_date\": \"1979-03-12\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a284358\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 149979,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Connie Booth\",\r\n                            \"original_name\": \"Connie Booth\",\r\n                            \"popularity\": 16.192,\r\n                            \"profile_path\": \"/wbqzdZDC0WjS1nYrfJxxKmB9Fzn.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525727ac760ee3776a284598\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 47974,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Bob Spiers\",\r\n                            \"original_name\": \"Bob Spiers\",\r\n                            \"popularity\": 2.744,\r\n                            \"profile_path\": \"/l22gNZcPsph1B5xeNtm4tqf53fQ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a28436e\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 8930,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Cleese\",\r\n                            \"original_name\": \"John Cleese\",\r\n                            \"popularity\": 11.194,\r\n                            \"profile_path\": \"/kg63gNYQtGPi2fSNIvCnVAclCbi.jpg\"\r\n                        },\r\n                        {\r\n                            \"job\": \"Editor\",\r\n                            \"department\": \"Editing\",\r\n                            \"credit_id\": \"5dbd7bf1efe37c001380e976\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 2446954,\r\n                            \"known_for_department\": \"Editing\",\r\n                            \"name\": \"Susan Imrie\",\r\n                            \"original_name\": \"Susan Imrie\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Mrs. Chase\",\r\n                            \"credit_id\": \"525727ae760ee3776a2846b0\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1214096,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Mavis Pugh\",\r\n                            \"original_name\": \"Mavis Pugh\",\r\n                            \"popularity\": 3.401,\r\n                            \"profile_path\": \"/cDF43Xv4b3Jzv0LLQH6nG5T4Its.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Dr. Price\",\r\n                            \"credit_id\": \"525727ae760ee3776a2846c6\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 10746,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Geoffrey Palmer\",\r\n                            \"original_name\": \"Geoffrey Palmer\",\r\n                            \"popularity\": 4.397,\r\n                            \"profile_path\": \"/wfFydeTnTIdtu8oKcY7SCo7u7pg.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. White\",\r\n                            \"credit_id\": \"525727ae760ee3776a2846dc\",\r\n                            \"order\": 2,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1219994,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Richard Davies\",\r\n                            \"original_name\": \"Richard Davies\",\r\n                            \"popularity\": 1.62,\r\n                            \"profile_path\": \"/lBfq02hYIZCyyzcZEZpLrN49dfz.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Leeman\",\r\n                            \"credit_id\": \"525727ae760ee3776a284708\",\r\n                            \"order\": 4,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 112455,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Derek Royle\",\r\n                            \"original_name\": \"Derek Royle\",\r\n                            \"popularity\": 1.122,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mrs. White\",\r\n                            \"credit_id\": \"593ba80292514105cf00a938\",\r\n                            \"order\": 46,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1684118,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Elizabeth Benson\",\r\n                            \"original_name\": \"Elizabeth Benson\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Zebedee\",\r\n                            \"credit_id\": \"593ba899c3a3680f140098e0\",\r\n                            \"order\": 47,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1561584,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Raymond Mason\",\r\n                            \"original_name\": \"Raymond Mason\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Miss Young\",\r\n                            \"credit_id\": \"5dbd7f1ec8a2d40018a27262\",\r\n                            \"order\": 82,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 2446969,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Pamela Buchner\",\r\n                            \"original_name\": \"Pamela Buchner\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Ingrams\",\r\n                            \"credit_id\": \"5dbd7f467d2bc10017340c2c\",\r\n                            \"order\": 83,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 374,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Charles McKeown\",\r\n                            \"original_name\": \"Charles McKeown\",\r\n                            \"popularity\": 2.172,\r\n                            \"profile_path\": \"/b6EAxzD1slnRTU7ccUW9QZC17lK.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Guest\",\r\n                            \"credit_id\": \"5dbd7fbeefe37c0018811db0\",\r\n                            \"order\": 84,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1348865,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Len Marten\",\r\n                            \"original_name\": \"Len Marten\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Xerxes\",\r\n                            \"credit_id\": \"5e112609c7a7e00017940074\",\r\n                            \"order\": 85,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 183153,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Robert McBain\",\r\n                            \"original_name\": \"Robert McBain\",\r\n                            \"popularity\": 1.465,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 154638,\r\n                    \"name\": \"The Kipper and the Corpse\",\r\n                    \"overview\": \"Unknown to Basil, a guest dies in the night and he tries to serve him breakfast anyway and an obnoxious woman insists on service for her dog.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/9d8JrZ083E7l4GnI3i1PRABiAtL.jpg\",\r\n                    \"vote_average\": 9.0,\r\n                    \"vote_count\": 12\r\n                },\r\n                {\r\n                    \"air_date\": \"1979-03-26\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a284358\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 149979,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Connie Booth\",\r\n                            \"original_name\": \"Connie Booth\",\r\n                            \"popularity\": 16.192,\r\n                            \"profile_path\": \"/wbqzdZDC0WjS1nYrfJxxKmB9Fzn.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525727ac760ee3776a284598\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 47974,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Bob Spiers\",\r\n                            \"original_name\": \"Bob Spiers\",\r\n                            \"popularity\": 2.744,\r\n                            \"profile_path\": \"/l22gNZcPsph1B5xeNtm4tqf53fQ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a28436e\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 8930,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Cleese\",\r\n                            \"original_name\": \"John Cleese\",\r\n                            \"popularity\": 11.194,\r\n                            \"profile_path\": \"/kg63gNYQtGPi2fSNIvCnVAclCbi.jpg\"\r\n                        },\r\n                        {\r\n                            \"job\": \"Editor\",\r\n                            \"department\": \"Editing\",\r\n                            \"credit_id\": \"5dbd7bf1efe37c001380e976\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 2446954,\r\n                            \"known_for_department\": \"Editing\",\r\n                            \"name\": \"Susan Imrie\",\r\n                            \"original_name\": \"Susan Imrie\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Alice\",\r\n                            \"credit_id\": \"525727ae760ee3776a284740\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1218303,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Una Stubbs\",\r\n                            \"original_name\": \"Una Stubbs\",\r\n                            \"popularity\": 8.74,\r\n                            \"profile_path\": \"/bz23ewpBlZNgSwCLqKPaa8ulKfQ.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Roger\",\r\n                            \"credit_id\": \"525727ae760ee3776a284756\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 24271,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Ken Campbell\",\r\n                            \"original_name\": \"Ken Campbell\",\r\n                            \"popularity\": 2.642,\r\n                            \"profile_path\": \"/vnDf7qSyuZ5EsVPKNNeocvnA0Qo.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Virginia\",\r\n                            \"credit_id\": \"593baa0b925141059300a315\",\r\n                            \"order\": 48,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 111327,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Pat Keen\",\r\n                            \"original_name\": \"Pat Keen\",\r\n                            \"popularity\": 1.4,\r\n                            \"profile_path\": \"/XVPOKcPVs78Qe0UgRuMQdb1xG7.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Kitty\",\r\n                            \"credit_id\": \"593baafd92514105e200a2b9\",\r\n                            \"order\": 49,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1794941,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Denyse Alexander\",\r\n                            \"original_name\": \"Denyse Alexander\",\r\n                            \"popularity\": 2.407,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Arthur\",\r\n                            \"credit_id\": \"5dbd5b279638640014e12eed\",\r\n                            \"order\": 53,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 2446877,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Robert Arnold\",\r\n                            \"original_name\": \"Robert Arnold\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Reg\",\r\n                            \"credit_id\": \"5dbd5b40efe37c001580af4f\",\r\n                            \"order\": 54,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1549646,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Roger Hume\",\r\n                            \"original_name\": \"Roger Hume\",\r\n                            \"popularity\": 1.566,\r\n                            \"profile_path\": \"/a43pw57cX5rTQf9GpUbOhoDy8F2.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Audrey\",\r\n                            \"credit_id\": \"5dbd5b757d2bc1001333d007\",\r\n                            \"order\": 55,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 2282737,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Christine Shaw\",\r\n                            \"original_name\": \"Christine Shaw\",\r\n                            \"popularity\": 0.753,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 154639,\r\n                    \"name\": \"The Anniversary\",\r\n                    \"overview\": \"Sybil leaves before Basil's surprise anniversary party and Basil spends the evening trying to convince their friends she's ill.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/y0Q5Cvx41a4XJQIHFFLy33An7nW.jpg\",\r\n                    \"vote_average\": 7.6,\r\n                    \"vote_count\": 13\r\n                },\r\n                {\r\n                    \"air_date\": \"1979-10-25\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a284358\",\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 149979,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Connie Booth\",\r\n                            \"original_name\": \"Connie Booth\",\r\n                            \"popularity\": 16.192,\r\n                            \"profile_path\": \"/wbqzdZDC0WjS1nYrfJxxKmB9Fzn.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Directing\",\r\n                            \"job\": \"Director\",\r\n                            \"credit_id\": \"525727ac760ee3776a284598\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 47974,\r\n                            \"known_for_department\": \"Directing\",\r\n                            \"name\": \"Bob Spiers\",\r\n                            \"original_name\": \"Bob Spiers\",\r\n                            \"popularity\": 2.744,\r\n                            \"profile_path\": \"/l22gNZcPsph1B5xeNtm4tqf53fQ.jpg\"\r\n                        },\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"525727aa760ee3776a28436e\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 8930,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Cleese\",\r\n                            \"original_name\": \"John Cleese\",\r\n                            \"popularity\": 11.194,\r\n                            \"profile_path\": \"/kg63gNYQtGPi2fSNIvCnVAclCbi.jpg\"\r\n                        },\r\n                        {\r\n                            \"job\": \"Editor\",\r\n                            \"department\": \"Editing\",\r\n                            \"credit_id\": \"5dbd7bf1efe37c001380e976\",\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 2446954,\r\n                            \"known_for_department\": \"Editing\",\r\n                            \"name\": \"Susan Imrie\",\r\n                            \"original_name\": \"Susan Imrie\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"Quentina\",\r\n                            \"credit_id\": \"525727ae760ee3776a28478e\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1226753,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Sabina Franklyn\",\r\n                            \"original_name\": \"Sabina Franklyn\",\r\n                            \"popularity\": 2.946,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Carnegie\",\r\n                            \"credit_id\": \"525727ae760ee3776a2847a4\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1221997,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"John Quarmby\",\r\n                            \"original_name\": \"John Quarmby\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": \"/n0zJjFxs0vJrPQQWqgrlLVRSEaX.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Ronald\",\r\n                            \"credit_id\": \"593bac86c3a3680f59009e4f\",\r\n                            \"order\": 50,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 47868,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"David Neville\",\r\n                            \"original_name\": \"David Neville\",\r\n                            \"popularity\": 0.98,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mr. Taylor\",\r\n                            \"credit_id\": \"593bacd5925141059b00a453\",\r\n                            \"order\": 51,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1427852,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"James Taylor\",\r\n                            \"original_name\": \"James Taylor\",\r\n                            \"popularity\": 1.467,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Mrs. Taylor\",\r\n                            \"credit_id\": \"593bad1f925141059300a5a7\",\r\n                            \"order\": 52,\r\n                            \"adult\": false,\r\n                            \"gender\": 0,\r\n                            \"id\": 1831373,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Melody Lang\",\r\n                            \"original_name\": \"Melody Lang\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        },\r\n                        {\r\n                            \"character\": \"Guest\",\r\n                            \"credit_id\": \"5dbd815f9638640014e183f8\",\r\n                            \"order\": 85,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 2446982,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Stuart Sherwin\",\r\n                            \"original_name\": \"Stuart Sherwin\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 154640,\r\n                    \"name\": \"Basil the Rat\",\r\n                    \"overview\": \"The health inspector is coming and Basil tells Manuel to get rid of his pet rat, which he later finds out is named Basil.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/uKXG14nQYokDmqhiQEDK8T5mWIH.jpg\",\r\n                    \"vote_average\": 9.2,\r\n                    \"vote_count\": 13\r\n                }\r\n            ],\r\n            \"name\": \"Series 2\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/1RIQAbpF1eMYLjnwUDl3YjcE56R.jpg\",\r\n            \"season_number\": 2\r\n        }\r\n    },\r\n    \"17561\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"/jdKGFmxN4uphEgPdqHRGNkhdqXH.jpg\",\r\n        \"created_by\": [],\r\n        \"episode_run_time\": [\r\n            22,\r\n            30\r\n        ],\r\n        \"first_air_date\": \"2009-02-25\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"http://www.itv.com/fm\",\r\n        \"id\": 17561,\r\n        \"in_production\": false,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"2009-04-01\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"2009-04-01\",\r\n            \"episode_number\": 6,\r\n            \"id\": 556806,\r\n            \"name\": \"Blinded by the Light\",\r\n            \"overview\": \"Lindsay finds his principles tested when he meets a gorgeous but talentless singer. Meanwhile, Dom is conflicted when he is offered a job at a rival station, and Jane meets her nemesis. Featuring a performance by The Charlatans.\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 1,\r\n            \"still_path\": null,\r\n            \"vote_average\": 0.0,\r\n            \"vote_count\": 0\r\n        },\r\n        \"name\": \"FM\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"ITV2\",\r\n                \"id\": 149,\r\n                \"logo_path\": \"/wbGo5nGjF0nFxTajmY5WOZVAEQM.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 6,\r\n        \"number_of_seasons\": 1,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"FM\",\r\n        \"overview\": \"FM is a British sitcom which aired on ITV2, starring Chris O'Dowd, Kevin Bishop and Nina Sosanya. The series followed the lives of two DJs and their producer on their FM radio programme, \\\"Skin 86.5 FM\\\". The show also featured music from real-life artists and guest stars from the music industry.\\n\\nThe first episode aired on 25 February 2009 and the series ran for 6 episodes. It broadcast on Wednesdays at 22:30. The series launched with 213,000 viewers. The whole series was re-run on Friday 3 April from 22:00 until 01:00. On 13 April 2009 the series was released on DVD with a BBFC rating of 15.\\n\\nITV Studios began searching for funding from record companies and radio stations to produce a second series for the show.\",\r\n        \"popularity\": 2.144,\r\n        \"poster_path\": \"/hZDmUBWa8tuPlbTlGVk1xEQiq70.jpg\",\r\n        \"production_companies\": [],\r\n        \"production_countries\": [],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": null,\r\n                \"episode_count\": 3,\r\n                \"id\": 28451,\r\n                \"name\": \"Specials\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": null,\r\n                \"season_number\": 0\r\n            },\r\n            {\r\n                \"air_date\": \"2009-02-25\",\r\n                \"episode_count\": 6,\r\n                \"id\": 28450,\r\n                \"name\": \"(uk) season 1\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": null,\r\n                \"season_number\": 1\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 6.6,\r\n        \"vote_count\": 10,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"producer\",\r\n                    \"id\": 33879\r\n                },\r\n                {\r\n                    \"name\": \"radio dj\",\r\n                    \"id\": 208930\r\n                }\r\n            ]\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"52585247760ee34661066b29\",\r\n            \"air_date\": \"2009-02-25\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"2009-02-25\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52585247760ee34661066b4c\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 126504,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Justin Hawkins\",\r\n                            \"original_name\": \"Justin Hawkins\",\r\n                            \"popularity\": 3.932,\r\n                            \"profile_path\": \"/gcGD0qZ6X0MTCUvgPNBWq4cTbur.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52585247760ee34661066b5e\",\r\n                            \"order\": 1,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 19995,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Marianne Faithfull\",\r\n                            \"original_name\": \"Marianne Faithfull\",\r\n                            \"popularity\": 1.471,\r\n                            \"profile_path\": \"/qJ1q0hbm0gf2xA64MRnFvdW2VYe.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 556801,\r\n                    \"name\": \"Last Night a DJ Saved My Life\",\r\n                    \"overview\": \"Lyndsay casts aside his indie roots and turns his attentions to dance music. Whilst covering a club DJ gig for Topher, his first set goes down amazingly well with the crowd. Perhaps Lyndsay's new runner, Ades (Daniel Kaluuya) has something to do with it? \\n\\nDom revisits his boy band past when a butter company wants to use their only \\\"hit\\\" - Spread Your Love - for their advert campaign. This leads to a fight over the song rights between former boy band member, Tom, and Dom. However, Dom also manages to rekindle an old flame. \\n\\nJane contemplates settling down with her current squeeze, Joe. Will she finally leave her rock 'n' roll lifestyle behind? Perhaps not when she meets Joe's mum, played by Marianne Faithfull. \\n\\nStudio guests this week include Justin Hawkins and an exclusive acoustic performance from The Guillemots.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2009-03-04\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52585247760ee34661066b81\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 126534,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Toyah Willcox\",\r\n                            \"original_name\": \"Toyah Willcox\",\r\n                            \"popularity\": 3.599,\r\n                            \"profile_path\": \"/wdLr9QLbXebAxYkZSuYwv4nrVUn.jpg\"\r\n                        },\r\n                        {\r\n                            \"character\": \"Alison\",\r\n                            \"credit_id\": \"620e224541eee1001e966f5a\",\r\n                            \"order\": 6,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 3430313,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Eliza L. Bennett\",\r\n                            \"original_name\": \"Eliza L. Bennett\",\r\n                            \"popularity\": 0.6,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 556802,\r\n                    \"name\": \"System Addict\",\r\n                    \"overview\": \"Dom decides to give up drinking whilst Jane attempts to give up smoking. Lindsay decides to give up on women.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2009-03-11\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 556803,\r\n                    \"name\": \"Return to Sender\",\r\n                    \"overview\": \"Dom finds himself going deaf It is revealed that Jane is a kleptomaniac. An email sent out by Lindsay causes mayem.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2009-03-18\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52585247760ee34661066bb5\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 1,\r\n                            \"id\": 1214523,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Konnie Huq\",\r\n                            \"original_name\": \"Konnie Huq\",\r\n                            \"popularity\": 2.076,\r\n                            \"profile_path\": null\r\n                        }\r\n                    ],\r\n                    \"id\": 556804,\r\n                    \"name\": \"Golden Lady\",\r\n                    \"overview\": \"Lindsay loses out at an awards ceremony. Jane celebrates with one of the winners.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2009-03-25\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [\r\n                        {\r\n                            \"character\": \"\",\r\n                            \"credit_id\": \"52585247760ee34661066bd8\",\r\n                            \"order\": 0,\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 1216381,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jamie Theakston\",\r\n                            \"original_name\": \"Jamie Theakston\",\r\n                            \"popularity\": 2.879,\r\n                            \"profile_path\": \"/zI1k51SZectygJpkDXtLc0FxG2V.jpg\"\r\n                        }\r\n                    ],\r\n                    \"id\": 556805,\r\n                    \"name\": \"Video Killed The Radio Star\",\r\n                    \"overview\": \"Lindsay finds it harder than he thought when he gets the chance to move on to television work. Dom insults Tim Westwood and ends up threatening Richard Bacon as he gets ready for the yearly radio industry pub quiz.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"2009-04-01\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 556806,\r\n                    \"name\": \"Blinded by the Light\",\r\n                    \"overview\": \"Lindsay finds his principles tested when he meets a gorgeous but talentless singer. Meanwhile, Dom is conflicted when he is offered a job at a rival station, and Jane meets her nemesis. Featuring a performance by The Charlatans.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": null,\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"(uk) season 1\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": null,\r\n            \"season_number\": 1\r\n        }\r\n    },\r\n    \"2416\": {\r\n        \"adult\": false,\r\n        \"backdrop_path\": \"/6oFkVPUcqHspgqJFE3YCko1GQ5y.jpg\",\r\n        \"created_by\": [],\r\n        \"episode_run_time\": [\r\n            22,\r\n            30\r\n        ],\r\n        \"first_air_date\": \"1988-09-06\",\r\n        \"genres\": [\r\n            {\r\n                \"id\": 16,\r\n                \"name\": \"Animation\"\r\n            },\r\n            {\r\n                \"id\": 10762,\r\n                \"name\": \"Kids\"\r\n            },\r\n            {\r\n                \"id\": 35,\r\n                \"name\": \"Comedy\"\r\n            }\r\n        ],\r\n        \"homepage\": \"\",\r\n        \"id\": 2416,\r\n        \"in_production\": false,\r\n        \"languages\": [\r\n            \"en\"\r\n        ],\r\n        \"last_air_date\": \"1993-02-16\",\r\n        \"last_episode_to_air\": {\r\n            \"air_date\": \"1993-02-16\",\r\n            \"episode_number\": 7,\r\n            \"id\": 182226,\r\n            \"name\": \"The Zombie Awakes\",\r\n            \"overview\": \"Dr. Quackbrain, a deranged psychiatrist, convinces Duckula to take part in an experiment and traps Duckula in his Dream Machine. It becomes up to Nanny and Igor to enter the dream and save the Count.\",\r\n            \"production_code\": \"\",\r\n            \"season_number\": 4,\r\n            \"still_path\": \"/hlOGV85sLuVMN0LDSxmeGHjC5kK.jpg\",\r\n            \"vote_average\": 0.0,\r\n            \"vote_count\": 0\r\n        },\r\n        \"name\": \"Count Duckula\",\r\n        \"next_episode_to_air\": null,\r\n        \"networks\": [\r\n            {\r\n                \"name\": \"ITV\",\r\n                \"id\": 9,\r\n                \"logo_path\": \"/5Rmw4ViYcjW14PCdOyjsue9eK99.png\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"number_of_episodes\": 65,\r\n        \"number_of_seasons\": 4,\r\n        \"origin_country\": [\r\n            \"GB\"\r\n        ],\r\n        \"original_language\": \"en\",\r\n        \"original_name\": \"Count Duckula\",\r\n        \"overview\": \"Count Duckula is a vegetarian vampire duck, coming into the world as an accident. Unlike his family and ancestors, he has no bloodlust, as when he was reincarnated, blood was omitted and replaced with ketchup.\",\r\n        \"popularity\": 8.275,\r\n        \"poster_path\": \"/xzT2j7tofLu9PHtAGjm7r9XmLl0.jpg\",\r\n        \"production_companies\": [\r\n            {\r\n                \"id\": 5846,\r\n                \"logo_path\": \"/xjhNN5Vz8LcRMtoodiRkZIU4bwa.png\",\r\n                \"name\": \"Thames Television\",\r\n                \"origin_country\": \"GB\"\r\n            }\r\n        ],\r\n        \"production_countries\": [],\r\n        \"seasons\": [\r\n            {\r\n                \"air_date\": null,\r\n                \"episode_count\": 1,\r\n                \"id\": 7592,\r\n                \"name\": \"Specials\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/jzDFg2jbZvjb1DBm0TYcyHTr8Oq.jpg\",\r\n                \"season_number\": 0\r\n            },\r\n            {\r\n                \"air_date\": \"1988-09-06\",\r\n                \"episode_count\": 26,\r\n                \"id\": 7589,\r\n                \"name\": \"Season 1\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/zhsFyTaCr65mdCNDczDpTsQgRiC.jpg\",\r\n                \"season_number\": 1\r\n            },\r\n            {\r\n                \"air_date\": \"1989-09-12\",\r\n                \"episode_count\": 19,\r\n                \"id\": 7591,\r\n                \"name\": \"Season 2\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/npG5VL4Pc0yiA7qZsqi40viUy1S.jpg\",\r\n                \"season_number\": 2\r\n            },\r\n            {\r\n                \"air_date\": \"1990-10-22\",\r\n                \"episode_count\": 13,\r\n                \"id\": 7590,\r\n                \"name\": \"Season 3\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/ohhhrPZhLYWbMRvm2FTCjoJpb3B.jpg\",\r\n                \"season_number\": 3\r\n            },\r\n            {\r\n                \"air_date\": \"1993-01-05\",\r\n                \"episode_count\": 7,\r\n                \"id\": 7588,\r\n                \"name\": \"Season 4\",\r\n                \"overview\": \"\",\r\n                \"poster_path\": \"/6ftk8JSsLRcd0ZDniYgrAh2SGsK.jpg\",\r\n                \"season_number\": 4\r\n            }\r\n        ],\r\n        \"spoken_languages\": [\r\n            {\r\n                \"english_name\": \"English\",\r\n                \"iso_639_1\": \"en\",\r\n                \"name\": \"English\"\r\n            }\r\n        ],\r\n        \"status\": \"Ended\",\r\n        \"tagline\": \"\",\r\n        \"type\": \"Scripted\",\r\n        \"vote_average\": 8.0,\r\n        \"vote_count\": 187,\r\n        \"keywords\": {\r\n            \"results\": [\r\n                {\r\n                    \"name\": \"transylvania\",\r\n                    \"id\": 272\r\n                },\r\n                {\r\n                    \"name\": \"vampire\",\r\n                    \"id\": 3133\r\n                },\r\n                {\r\n                    \"name\": \"servant\",\r\n                    \"id\": 964\r\n                },\r\n                {\r\n                    \"name\": \"duck\",\r\n                    \"id\": 1339\r\n                },\r\n                {\r\n                    \"name\": \"butler\",\r\n                    \"id\": 1307\r\n                },\r\n                {\r\n                    \"name\": \"nanny\",\r\n                    \"id\": 2341\r\n                },\r\n                {\r\n                    \"name\": \"castle\",\r\n                    \"id\": 3098\r\n                },\r\n                {\r\n                    \"name\": \"vegetarian\",\r\n                    \"id\": 4459\r\n                },\r\n                {\r\n                    \"name\": \"parody\",\r\n                    \"id\": 9755\r\n                },\r\n                {\r\n                    \"name\": \"spin off\",\r\n                    \"id\": 15285\r\n                },\r\n                {\r\n                    \"name\": \"spooky\",\r\n                    \"id\": 214801\r\n                }\r\n            ]\r\n        },\r\n        \"season/1\": {\r\n            \"_id\": \"52573801760ee3668d0038ad\",\r\n            \"air_date\": \"1988-09-06\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"1988-09-06\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182233,\r\n                    \"name\": \"No Sax Please: We're Egyptian\",\r\n                    \"overview\": \"Duckula travels to Egypt to look for an ancient saxophone that will help him to become a rock star.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/2G3jZdvdciRkFel3Y4O19f04jEv.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-09-13\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182232,\r\n                    \"name\": \"Vampire Vacation\",\r\n                    \"overview\": \"Duckula goes on a vacation to Spain to visit his cousin.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/cZCOyqFenomFXXtu3K6AVjIZYTg.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-09-20\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182231,\r\n                    \"name\": \"One Stormy Night\",\r\n                    \"overview\": \"Von Goosewing has created a creature to kill Duckula, but in order to get it to work he must enlist the help of one of Duckula's resurrected ancestors.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/aZPN51yYIjP0rT9KdKtX9ns7MeT.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-09-27\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182237,\r\n                    \"name\": \"Transylvanian Homesick Blues\",\r\n                    \"overview\": \"Duckula, Igor, and nanny go for a ride on a roller coaster run by a Mr. Fexactely. The coaster takes them on a strange trip through time.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/nlEoGgIO5NIeA8LPQmKo7n2i861.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-10-04\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182242,\r\n                    \"name\": \"Restoration Comedy\",\r\n                    \"overview\": \"To Igor's displeasure, the Count has hired Mr. Roberto to renovate the castle. He wants to make it less evil-looking.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/MQVRFPGYZjahyLS4wSmUAFYLsF.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-10-11\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182240,\r\n                    \"name\": \"Mutinous Penguins\",\r\n                    \"overview\": \"While looking for the castle, which has transported to the Antarctic, Duckula, Nanny, and Igor are trapped on an ice flow by mutinous penguins. There, they must deal not only with looking for the castle, but with the Vikings that are stuck there with them.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/64deW2SvO3vQ0C8hoc8fBPfy0nZ.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-10-18\",\r\n                    \"episode_number\": 7,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182243,\r\n                    \"name\": \"Dr. Von Goosewing's Invisible Ray\",\r\n                    \"overview\": \"Von Goosewing has built an invisible ray, which he plans to use to get rid of Duckula. Meanwhile, Duckula, Igor, and Nanny argue about magic tricks and spells.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/x3z1r77LIKPnIEBTSqNgBMK5k3c.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-10-25\",\r\n                    \"episode_number\": 8,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182236,\r\n                    \"name\": \"Down Under Duckula\",\r\n                    \"overview\": \"Duckula decides that Nanny needs psychiatric help, so he transports the caste to Austria. Unfortunatly, the castle ends up in Australia instead. There, Duckula accidentaly gives away the castle's coo-coo clock, whick is a part of the mechanism that allows the castle to transport. He, Igor, and Nanny travel all over Australia to get it back.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/bVMaqAzJBXV9vxdANRollrsg1mR.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-11-01\",\r\n                    \"episode_number\": 9,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182234,\r\n                    \"name\": \"All in a Fog\",\r\n                    \"overview\": \"Duckula decides he wants to become a famous detective, like Sherlock Holmes, so he, Nanny, and Igor travel to London.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/uFpSSwUq8rqZoktdeyqfTnXnvQa.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-11-08\",\r\n                    \"episode_number\": 10,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182238,\r\n                    \"name\": \"Castle Duckula: Open to the Public\",\r\n                    \"overview\": \"Duckula decides to raise money by opening the castle to the public. This opportunity to enter the castle gives Von Goosewing the chance he has been looking for to finally capture Duckula. Meanwhile, Nanny gets a case of amnesia.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/zOHxlSplfXDNzzevd6iJkJIHlSK.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-11-15\",\r\n                    \"episode_number\": 11,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182235,\r\n                    \"name\": \"The Ghost of McCastle McDuckula\",\r\n                    \"overview\": \"While in Scotland looking for the Loch Ness Monster, Duckula meets another vampire duck and is taken to his haunted castle.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/2H246KSyIdkB31sOenyrvuz0bzf.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-11-22\",\r\n                    \"episode_number\": 12,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182239,\r\n                    \"name\": \"Igor's Busy Day\",\r\n                    \"overview\": \"A couple who's car has broken down seek shelter in the castle, and causes Igor to think fondly about the good old evil days.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/vTMWmlYAdwb2EkyLRG0zEZEmpcC.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-11-22\",\r\n                    \"episode_number\": 13,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182241,\r\n                    \"name\": \"Autoduck\",\r\n                    \"overview\": \"in another money-making attempt, the count opens the castle as a bed and breakfast. When business is slow, he decides to attract more tourists by breaking the land speed record.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/5k6lihPubjsdKklKT2Qj5vlX87K.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-12-06\",\r\n                    \"episode_number\": 14,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182247,\r\n                    \"name\": \"The Vampire Strikes Back\",\r\n                    \"overview\": \"Von Goosewings's latest device reacts with Nanny's home-brewed Sasparilla and launches the castle into space. There, they are rescued by Tremendous Terrence, who later maroons them on the planet Cute.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/9XaxO0G81q7SYiGBCFZuDB2Qh18.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-12-13\",\r\n                    \"episode_number\": 15,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182249,\r\n                    \"name\": \"Hardluck Hotel\",\r\n                    \"overview\": \"When the Transylvanian currency loses its value, Duckula decides to take a vacation out of the country. While looking for a place to stay the night, he runs into a hotel manager that is almost exactly like Basil Fawlty (from the show Fawlty Towers).\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/1WS5ap17DCswB0s12nrPGshl33i.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1988-12-20\",\r\n                    \"episode_number\": 16,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182252,\r\n                    \"name\": \"The Hunchbudgie of Notre Dame\",\r\n                    \"overview\": \"While in Paris, Duckula buys the Eifel Tower and becomes wrapped up in a heist to steal the Mona Lisa.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/yiGRyP28s0NLBMrJcR6sTiYQXt5.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-01-03\",\r\n                    \"episode_number\": 17,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52573803760ee3668d003aa4\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 141952,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jimmy Hibbert\",\r\n                            \"original_name\": \"Jimmy Hibbert\",\r\n                            \"popularity\": 1.754,\r\n                            \"profile_path\": \"/xTJRiJPVEfLDHBU8RSJVSFka6iQ.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182245,\r\n                    \"name\": \"Dear Diary\",\r\n                    \"overview\": \"Duckula decides to have his ancestors' memoirs published.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/n2Iy8RRcADubIxvlGas6fh5QCEy.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-01-10\",\r\n                    \"episode_number\": 18,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182251,\r\n                    \"name\": \"Rent a Butler\",\r\n                    \"overview\": \"Duckula decides to make some money by renting out Igor and Nanny to other people as servants. He ends up regretting this when he finds himself alone in the castle.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/p7t5ERSAHYzStiqVuJFxrAr4K8e.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-01-24\",\r\n                    \"episode_number\": 19,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182250,\r\n                    \"name\": \"Jungle Duck\",\r\n                    \"overview\": \"Duckula travels to Africa to find the treasure of an ancient hidden city.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/msG2uZyNXSMd6fUaQ2V0JvcdO31.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-01-31\",\r\n                    \"episode_number\": 20,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182244,\r\n                    \"name\": \"Mobile Home\",\r\n                    \"overview\": \"Some wealthy American tourists visit castle Duckula and decide they want to buy it. Not knowing that it has a transport mechanism, they accept the Crow Brothers' offer to transport the castle to America in pieces.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/jYsAlmKf3bwLCS6JjViIhrDKcju.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-02-07\",\r\n                    \"episode_number\": 21,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182248,\r\n                    \"name\": \"A Fright at the Opera\",\r\n                    \"overview\": \"While visiting the Milan Opera House, Duckula, Nanny, and Igor run into the mysterious phantom. The phantom's servant turns out to be an old school chum of Igor. The action picks up as the Phantom kidnaps Nanny. In trying to rescue her, the opera house is destroyed and the Phantom goes to America to haunt the Grand Ole Opray.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/grMHkLkpjGamRnbO6XCnWXjMKLW.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-02-14\",\r\n                    \"episode_number\": 22,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182253,\r\n                    \"name\": \"Dr. Goosewing and Mr. Duck\",\r\n                    \"overview\": \"Von Goosewing's latest invention is a formula that can change people's characters. He sells it to Duckula as a carpet shampoo and it has strange effects. It makes Duckula act like a real vampire, Nanny is smart, and Igor becomes cheerful.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/snH3IfHPUmICIC5ehMe1pXubGIU.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-02-21\",\r\n                    \"episode_number\": 23,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182246,\r\n                    \"name\": \"Town Hall Terrors\",\r\n                    \"overview\": \"Realizing that the castle needs major repairs, Duckula goes to the town council to get a grant to repair it. When he gets the grant, he gives the money to some tricksters who build a railroad right through the castle.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/mZclSvIvbbIEtFJyD1sinmqVp8e.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-02-28\",\r\n                    \"episode_number\": 24,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52573803760ee3668d003aa4\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 141952,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jimmy Hibbert\",\r\n                            \"original_name\": \"Jimmy Hibbert\",\r\n                            \"popularity\": 1.754,\r\n                            \"profile_path\": \"/xTJRiJPVEfLDHBU8RSJVSFka6iQ.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182254,\r\n                    \"name\": \"Sawdust Ring\",\r\n                    \"overview\": \"Duckula decides to enter the circus. Unfortunately, the former circus workers come back to sabotage the performance.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/mdrAk5ibiV3o41WjhJ68gNfmhTt.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-03-07\",\r\n                    \"episode_number\": 25,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52573803760ee3668d003aa4\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 141952,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jimmy Hibbert\",\r\n                            \"original_name\": \"Jimmy Hibbert\",\r\n                            \"popularity\": 1.754,\r\n                            \"profile_path\": \"/xTJRiJPVEfLDHBU8RSJVSFka6iQ.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182255,\r\n                    \"name\": \"Duck and the Broccoli Stalk\",\r\n                    \"overview\": \"Von Goosewing plans to use a growth formula to grow a huge clove of garlic next to the castle to kill Duckula. He spills some on Duckula's broccoli by accident and it grows, carrying castle Duckula and its inhabitants to a castle in the clouds that is owned by a giant.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/AtgbY0vxvUn9ls3ZhrAYJhMQXN0.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-03-21\",\r\n                    \"episode_number\": 26,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52573803760ee3668d003aa4\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 141952,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jimmy Hibbert\",\r\n                            \"original_name\": \"Jimmy Hibbert\",\r\n                            \"popularity\": 1.754,\r\n                            \"profile_path\": \"/xTJRiJPVEfLDHBU8RSJVSFka6iQ.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182256,\r\n                    \"name\": \"Family Reunion\",\r\n                    \"overview\": \"Duckula is hosting the Duckula family reunion. He is scared that the others will kill him for being a vegetarian instead of a blood-sucker. When his plan to fool them goes wrong, he (in disguise) makes a deal with Von Goosewing to try to get rid of his relatives.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 1,\r\n                    \"still_path\": \"/rNhObYHbLpirTaLEEdXnEoUWd15.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 1\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/zhsFyTaCr65mdCNDczDpTsQgRiC.jpg\",\r\n            \"season_number\": 1\r\n        },\r\n        \"season/2\": {\r\n            \"_id\": \"52573802760ee3668d0038cc\",\r\n            \"air_date\": \"1989-09-12\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"1989-09-12\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182274,\r\n                    \"name\": \"Ghostly Gold\",\r\n                    \"overview\": \"Duckula finds a newspaper declaring that gold has been found in the mountains. After traveling there, and finding nothing but a ghost town, he realizes that the newspaper was several years old.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/ng7g4B6FJKEDSWo3dZpN3cjvAn8.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-09-19\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52573803760ee3668d003aa4\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 141952,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jimmy Hibbert\",\r\n                            \"original_name\": \"Jimmy Hibbert\",\r\n                            \"popularity\": 1.754,\r\n                            \"profile_path\": \"/xTJRiJPVEfLDHBU8RSJVSFka6iQ.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182271,\r\n                    \"name\": \"Ducknapped\",\r\n                    \"overview\": \"Duckula is kidnapped by two very inept kidnappers. Nanny and Igor later rescue him and spend all his ransom money without giving him a share.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/zljs0p5YhO7EjaTzLCbe60mGyu7.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-09-26\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52573803760ee3668d003aa4\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 141952,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jimmy Hibbert\",\r\n                            \"original_name\": \"Jimmy Hibbert\",\r\n                            \"popularity\": 1.754,\r\n                            \"profile_path\": \"/xTJRiJPVEfLDHBU8RSJVSFka6iQ.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182272,\r\n                    \"name\": \"The Lost Valley\",\r\n                    \"overview\": \"While trying to search for treasure, the castle and its inhabitants are transported into a movie.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/k5Yyj8Xv6Foc6UugCewcGP1Sz7V.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-10-03\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182273,\r\n                    \"name\": \"Incredible Shrinking Duck\",\r\n                    \"overview\": \"Von Goosewing's latest shrinking device shrinks Castle Duckula down to the size of a toy.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/sUGyCGnWZRteqtbcQPPRwbO7CWm.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-10-10\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [\r\n                        {\r\n                            \"department\": \"Writing\",\r\n                            \"job\": \"Writer\",\r\n                            \"credit_id\": \"52573803760ee3668d003aa4\",\r\n                            \"adult\": false,\r\n                            \"gender\": 2,\r\n                            \"id\": 141952,\r\n                            \"known_for_department\": \"Acting\",\r\n                            \"name\": \"Jimmy Hibbert\",\r\n                            \"original_name\": \"Jimmy Hibbert\",\r\n                            \"popularity\": 1.754,\r\n                            \"profile_path\": \"/xTJRiJPVEfLDHBU8RSJVSFka6iQ.jpg\"\r\n                        }\r\n                    ],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182270,\r\n                    \"name\": \"Hi-Duck\",\r\n                    \"overview\": \"Duckula, Igor, and Nanny are on their way to a vacation. The plane they are on gets hi-jacked by a couple of French criminals. Duckula manages to stop them, but must cancel his vacation so that he can return to Transylvania and give testimony at the crooks' trial.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/sX0mV5DjDuHiYrRiTEep57K3yFp.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-10-17\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182275,\r\n                    \"name\": \"Prime-Time Duck\",\r\n                    \"overview\": \"A local TV station is making a documentary about Castle Duckula and the Count. Unfortunately, they don't think Duckula is scary enough, so they make Igor play the part of the Count.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/3K7qsS1QGlIpghI0eSISpeAgsKc.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-10-24\",\r\n                    \"episode_number\": 7,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182284,\r\n                    \"name\": \"Bloodsucking Fruit Bats of the Lower Amazon\",\r\n                    \"overview\": \"While traveling in South America, Duckula, Igor, and Nanny are captured by a tribe of amazon women. Things look bleak until the tribe makes Nanny their leader.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/2hnpimZG3NrhDrwAAEuVwDjJSzz.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-10-31\",\r\n                    \"episode_number\": 8,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182282,\r\n                    \"name\": \"The Count and the Pauper (I Don't Wanna Work on Maggots Farm No More)\",\r\n                    \"overview\": \"The Count is sick of being a count, so he leaves Castle Duckula. He runs into someone who looks just like him named Sid Quack, a peasant farmer. The two decide to switch places.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/tZBB2d6vSydO0TFGm6ENvHLD7Tu.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-11-07\",\r\n                    \"episode_number\": 9,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182279,\r\n                    \"name\": \"In Arctic Circles\",\r\n                    \"overview\": \"The Count moves the castle to the North Pole to get away from a heat wave. There, he moves into a huge igloo and hires a new butler. In order to get rid of the new butler and get his job back, Igor makes a deal with Von Goosewing.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/dH5NYZuuc79XzLShgBVUiNBbtIE.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-11-14\",\r\n                    \"episode_number\": 10,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182280,\r\n                    \"name\": \"Transylvanian Take-Away\",\r\n                    \"overview\": \"French thieves Gaston and Pierre plan to break into Castle Duckula to steal a priceless vase. They are caught, and inform Duckula that the vase is actually part of a map that leads to the treasure of Mandarin leader How Fat. Duckula goes in search of it and ends up on the island of Moi Chow in a race against How Fat and the mutinous penguins to the treasure.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/kk3ANQoRs3A2eeUMTXgklEGm7z3.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-11-21\",\r\n                    \"episode_number\": 11,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182281,\r\n                    \"name\": \"Who Dunnit?\",\r\n                    \"overview\": \"Duckula travels to England to hear the will of the Duke of Mallardborough. When it is revealed that the Duke was murdered, many different suspects are interrogated. The investigation begins to focus on Duckula, who is coerced into confessing. He is put on trial and, just before the verdict is announced, the Duke appears, alive, and states that his death was a hoax.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/r0h0H2BVxmeFThytXXfgis4mvgM.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-11-28\",\r\n                    \"episode_number\": 12,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182276,\r\n                    \"name\": \"No Yaks Please, We're Tibetan\",\r\n                    \"overview\": \"Duckula, Igor, Nanny, and the Crow Brothers are mountain climbing in Tibet when they encounter the Abominable Snowman.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/qC4rgH6tqV0AxpQds3p6RCFRSQD.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-12-05\",\r\n                    \"episode_number\": 13,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182285,\r\n                    \"name\": \"Beau Duckula\",\r\n                    \"overview\": \"Sick of life at the castle, Duckula runs off and joins the French Foreign Legion.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/uuPR0CfiolNCMpWlBSq2W07AFq6.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-12-12\",\r\n                    \"episode_number\": 14,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182277,\r\n                    \"name\": \"Mississippi Duck\",\r\n                    \"overview\": \"Duckula claims to be the world's best jazz trumpeter. His claim attracts the attention of a Mississippi steamboat captain, who hires Duckula as an act.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/vs2IoWuXlszU2g79KTGsLO6Zgz5.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1989-12-19\",\r\n                    \"episode_number\": 15,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182283,\r\n                    \"name\": \"Amnesiac Duck\",\r\n                    \"overview\": \"Duckula gets amnesia after falling in a hole. He becomes a stereotypical vampire: evil. This makes Igor very happy, and not too motivated to turn Duckula back.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/6eqKOjBein55RmhZN4Jylk5IHPS.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1990-01-02\",\r\n                    \"episode_number\": 16,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182278,\r\n                    \"name\": \"Mysteries of the Wax Museum\",\r\n                    \"overview\": \"The owner of a wax museum creates robot copies of Duckula, Nanny, and Igor. He uses them to rob a bank.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/cxSGpy7S8G0OpI3Hw1sozLcDaDT.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1990-01-09\",\r\n                    \"episode_number\": 17,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182286,\r\n                    \"name\": \"Return of the Curse of the Secret of the Mummy's Tomb Meets Franken Duckula's Monster ...\",\r\n                    \"overview\": \"Duckula is chased down by a large group of people, including alien cabbage, a warewolf, a mummy, Dr. Von Goosewing, and some angry villagers.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/sBlhXg6nX15p6ltwRvSn7TTcjOO.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1990-01-16\",\r\n                    \"episode_number\": 18,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182287,\r\n                    \"name\": \"Lost City of Atlantis\",\r\n                    \"overview\": \"After being stranded on an small island, Duckula finds himself captured by the citizens of Atlantis.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/cjpmT78102G6LR4sakqtg3dUQnk.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1990-01-23\",\r\n                    \"episode_number\": 19,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182288,\r\n                    \"name\": \"Bad Luck Duck\",\r\n                    \"overview\": \"Duckula tries to prove to Nanny how stupid her superstitions about friday the 13th are. In the process, Duckula experiences a streak of incredibly bad luck.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 2,\r\n                    \"still_path\": \"/rkS0gtlJBfIfmK0tBR9vxurDS4y.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 2\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/npG5VL4Pc0yiA7qZsqi40viUy1S.jpg\",\r\n            \"season_number\": 2\r\n        },\r\n        \"season/3\": {\r\n            \"_id\": \"52573801760ee3668d0038be\",\r\n            \"air_date\": \"1990-10-22\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"1990-10-22\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182264,\r\n                    \"name\": \"Private Beak\",\r\n                    \"overview\": \"The Count becomes a private eye after reading a bunch of detective stories.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/tYwTT2pcHQTlQhQnvxYd88gGaSh.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1990-10-29\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182260,\r\n                    \"name\": \"Astro Duck\",\r\n                    \"overview\": \"Duckula's new supercomputer accidentally launches a rocket into space.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/qKq0PQZ7BH1IiT3W1idI4bNRK3r.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1990-11-05\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182259,\r\n                    \"name\": \"Unreal Estate\",\r\n                    \"overview\": \"Duckula, sick of the old castle, transports it to California so that he can sell it and make a big profit. He has trouble finding a buyer, though, since Igor, not wanting to leave the castle, shows all the buyers the torture rooms. Meanwhile, Von Goosewing has followed them in a continued effort to kill Duckula.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/qvECtIwEA5GSwhX8aEmh33zC19u.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1990-11-12\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182261,\r\n                    \"name\": \"Bombay Duck\",\r\n                    \"overview\": \"Duckula, Igor, and Nanny are lured on a decoy treasure hunt by a genie. Meanwhile, the genie's master steals the coffin from the castle so that he can woo the local princess. The princess is taken istead by Duckula, who has to decide weather to stay with her or return to Transylvania.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/wFpsn1I5KvwxpylTQefgbysEFyQ.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1990-11-19\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182257,\r\n                    \"name\": \"There are Werewolves at the Bottom of My Garden\",\r\n                    \"overview\": \"Tauser, the castle warewolf, has escaped. Duckula has to find him while at the same time dealing with a witch and a robot warewolf designed by Von Goosewing.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/7okOGPrjyytANqyxlZgwpI4do2E.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1990-11-26\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182263,\r\n                    \"name\": \"Duck Ahoy\",\r\n                    \"overview\": \"Duckula and co. enter a yacht race for a substantial prize.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/6OOY0Y09Kq5jIpJkJhNu42veSW8.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1990-12-03\",\r\n                    \"episode_number\": 7,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182258,\r\n                    \"name\": \"The Great Ducktective\",\r\n                    \"overview\": \"Duckula is disappointed when an interview with two great detectives doesn't lead to him becoming famous. Meanwhile, Igor taunts Von Goosewing.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/qZBQsnqXUo0knOplDqTxKpi3x6q.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1990-12-10\",\r\n                    \"episode_number\": 8,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182262,\r\n                    \"name\": \"Dead Eye Duck\",\r\n                    \"overview\": \"Duckula, sick of the cold Transylvanian weather, transports the castle to Colorado. Here he, Igor, and Nanny find themselves in the wild west.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/iufvoBk0w8gvPKasYtuwUp60MZ6.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1990-12-17\",\r\n                    \"episode_number\": 9,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182269,\r\n                    \"name\": \"The Show Must Go On\",\r\n                    \"overview\": \"Duckula enlists the help of the Crow Brothers to put on a stage show.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/n5fqybLHooJEg76CIyaNnYA1JkZ.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1990-12-26\",\r\n                    \"episode_number\": 10,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182265,\r\n                    \"name\": \"A Christmas Quacker\",\r\n                    \"overview\": \"Christmas has come to Castle Duckula, but there is chaos:   Duckula hallucinates that he and superhero Tremendous Terrance save Santa from a monster. Von Goosewing has a \\\"\\\"present\\\"\\\" for the Count. And the real Santa is lost in the castle's large chimney system.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/7pFh4tOBSk9bdPRTpPnzCNacLpk.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1991-01-07\",\r\n                    \"episode_number\": 11,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182267,\r\n                    \"name\": \"The Rest is History\",\r\n                    \"overview\": \"The Count goes back in time to stop the first Count Duckula from becomming a vampire.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/61GWPRpo8RM07pu0MqYCsUOb5fn.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1991-01-14\",\r\n                    \"episode_number\": 12,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182266,\r\n                    \"name\": \"O.O. Duck\",\r\n                    \"overview\": \"The Egg, an evil mastermind, needs the castle as part of his plan for world conquest. To distract Duckula, he sends him on a fake spy mission.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/9VsGwDNAuVjSkQvGhkdXp6yJd81.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1991-01-21\",\r\n                    \"episode_number\": 13,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182268,\r\n                    \"name\": \"Mystery Cruise\",\r\n                    \"overview\": \"Nanny has won a trip for 3 on a luxury cruise ship. Nanny causes so many incidents that all the other people on the ship hide until she leaves the ship.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 3,\r\n                    \"still_path\": \"/axB2CqFbUJ1TPBvDlgi2MT4Hy3I.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 3\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/ohhhrPZhLYWbMRvm2FTCjoJpb3B.jpg\",\r\n            \"season_number\": 3\r\n        },\r\n        \"season/4\": {\r\n            \"_id\": \"52573801760ee3668d0038a2\",\r\n            \"air_date\": \"1993-01-05\",\r\n            \"episodes\": [\r\n                {\r\n                    \"air_date\": \"1993-01-05\",\r\n                    \"episode_number\": 1,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182228,\r\n                    \"name\": \"Around the World in a Total Daze\",\r\n                    \"overview\": \"A famous world explorer is hired by Von Goosewing to challenge Duckula to a race around the world. Though Von Goosewing cheats, Castle Duckula still finishes first. Still, Duckula is denied the grand prize.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/j4DQloBbkdCWnaBLSrTXERi5Vju.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1993-01-12\",\r\n                    \"episode_number\": 2,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182225,\r\n                    \"name\": \"Manhattan Duck\",\r\n                    \"overview\": \"The Count transports the castle to Manhattan, where Transylvanian style suddenly becomes the newest fasion fad. Seeing his chance to make a fortune, Duckula sells off most of the contents of the caslte, including Igor. Duckula and Nanny use the money to have a grand time in the city. Unfortunately they may be stuck there, since one of the things they sold was the clock that controls the transport mechanism.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/rJTWuQmPP3yqcTkd81QIEf8Yy1c.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1993-01-19\",\r\n                    \"episode_number\": 3,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182227,\r\n                    \"name\": \"Alps-A-Daisy\",\r\n                    \"overview\": \"Duckula travels to a winter sports competition and tries to compete in every event.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/luj3vqZkC3mgFg9nRrcETiAqS9O.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1993-01-26\",\r\n                    \"episode_number\": 4,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182229,\r\n                    \"name\": \"Prince Duckula\",\r\n                    \"overview\": \"After a TV appearance, a group of revolutionaries hire Duckula to impersonate a prince.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/lkJpvO9mSTFwNkQGToalDQ3J3PL.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1993-02-02\",\r\n                    \"episode_number\": 5,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182230,\r\n                    \"name\": \"Venice a Duck Not a Duck\",\r\n                    \"overview\": \"The Egg, the Crow brothers, Maurice the Strongman, Charlie the Clown, the Mutinous Penguins, Gaston, Pierre, Cruel, and the Phantom of the Opera all combine forces to get revenge on Duckula.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/coX1Pnegmv1ohuPDjNbUEzafML0.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1993-02-09\",\r\n                    \"episode_number\": 6,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182224,\r\n                    \"name\": \"A Mountie Always Gets His Duck\",\r\n                    \"overview\": \"When a Mountie tracks and catches a criminal in Transylvania, Duckula makes a deal with him: he will transport him back to Canada, if Duckula can be a mountie. Once a mountie, Duckula finds himself on an adventure to save the beautiful Ann Marie.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/xTBxjDnCpYNy1vXB7dpILyRrARs.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                },\r\n                {\r\n                    \"air_date\": \"1993-02-16\",\r\n                    \"episode_number\": 7,\r\n                    \"crew\": [],\r\n                    \"guest_stars\": [],\r\n                    \"id\": 182226,\r\n                    \"name\": \"The Zombie Awakes\",\r\n                    \"overview\": \"Dr. Quackbrain, a deranged psychiatrist, convinces Duckula to take part in an experiment and traps Duckula in his Dream Machine. It becomes up to Nanny and Igor to enter the dream and save the Count.\",\r\n                    \"production_code\": \"\",\r\n                    \"season_number\": 4,\r\n                    \"still_path\": \"/hlOGV85sLuVMN0LDSxmeGHjC5kK.jpg\",\r\n                    \"vote_average\": 0.0,\r\n                    \"vote_count\": 0\r\n                }\r\n            ],\r\n            \"name\": \"Season 4\",\r\n            \"overview\": \"\",\r\n            \"poster_path\": \"/6ftk8JSsLRcd0ZDniYgrAh2SGsK.jpg\",\r\n            \"season_number\": 4\r\n        }\r\n    }\r\n}"],"names":["$cc634fcd0c4f5425$export$89f4855ef88b7920","_super","configuration","call","this","Map","prototype","loginRedirect","request","__awaiter","$bEamK","__generator","_a","logger","verbose","acquireTokenRedirect","$1iVNz","DEFAULT_REQUEST","loginPopup","acquireTokenPopup","config","auth","clientId","authority","scopes","account","homeAccountId","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","activeSilentTokenRequests","set","silentRequestKey","response","correlationId","acquireTokenSilentAsync","silentRequest","silentCacheClient","$l82wo","SilentCacheClient","browserStorage","browserCrypto","eventHandler","navigationClient","$0f344e7ceaf1df75$export$573384e47a12d835","$0f344e7ceaf1df75$export$c774c31b4c31da8","$0f344e7ceaf1df75$export$8f546f90896bcfa9","$0f344e7ceaf1df75$export$192d74ad69b40705","$0f344e7ceaf1df75$export$4ec29255e7e7f68f","INTERACTION_IN_PROGRESS_VALUE","INVALID_GRANT_ERROR","POPUP_WIDTH","POPUP_HEIGHT","POPUP_NAME_PREFIX","POLL_INTERVAL_MS","MSAL_SKU","$0f344e7ceaf1df75$export$21d55bedf0d269fb","$af51605ea36bf75c$export$8538731fd397fb90","createAuthCodeUrlQueryString","UrlString","appendQueryString","authorizationEndpoint","queryString","acquireToken","authCodePayload","$dXsnA","responseHandler","label","info","$4sGFf","StringUtils","isEmpty","code","$btb5q","ClientAuthError","createTokenRequestCannotBeMadeError","reqTimestamp","$gTvQX","TimeUtils","nowSeconds","$aD1tK","ResponseHandler","authOptions","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","sent","handleFragmentResponse","hashFragment","cachedState","validateServerAuthorizationCodeResponse","serverParams","createNoAuthCodeInServerResponseError","__assign","getLogoutUri","logoutRequest","createLogoutUrlQueryString","endSessionEndpoint","executeTokenRequest","requestBody","queryParameters","ccsCredential","clientInfo","headers","endpoint","thumbprint","canonicalAuthority","$9ARQz","buildClientInfo","type","$78elo","CcsCredentialType","HOME_ACCOUNT_ID","e","tokenEndpoint","executePostToTokenEndpoint","createTokenQueryParameters","$chTN2","RequestParameterBuilder","parameterBuilder","addExtraQueryParameters","tokenQueryParameters","createQueryString","createTokenRequestBody","clientAssertion","cnfString","ccsCred","includeRedirectUri","addRedirectUri","redirectUri","RequestValidator","validateRedirectUri","addAuthorizationCode","addLibraryInfo","libraryInfo","addThrottling","serverTelemetryManager","addServerTelemetry","codeVerifier","addCodeVerifier","clientCredentials","clientSecret","addClientSecret","addClientAssertion","assertion","addClientAssertionType","assertionType","addClientInfo","$9FoDI","AuthenticationScheme","POP","$7bQgv","PopTokenGenerator","generateCnf","_b","SSH","sshJwk","$cVHMZ","ClientConfigurationError","createMissingSshJwkError","addSshJwk","cryptoInterface","createNewGuid","isEmptyObj","claims","clientCapabilities","length","addClaims","undefined","credential","uid","Separators","CLIENT_INFO_SEPARATOR","utid","buildClientInfoFromHomeAccountId","addCcsOid","e1","addCcsUpn","tokenBodyParameters","enableSpaAuthorizationCode","AADServerParamKeys","RETURN_SPA_CODE","addClientId","__spreadArrays","extraScopesToConsent","addCorrelationId","addResponseMode","responseMode","addResponseTypeCode","codeChallenge","codeChallengeMethod","addCodeChallengeParams","prompt","addPrompt","domainHint","addDomainHint","PromptValue","SELECT_ACCOUNT","sid","NONE","addSid","accountSid","extractAccountSid","loginHint","addLoginHint","$b425941540279b13$export$4f22f74eddb7716a","networkManager","$jDvJH","NetworkManager","networkClient","createTokenRequestHeaders","HeaderNames","CONTENT_TYPE","Constants","URL_FORM_CONTENT_TYPE","systemOptions","preventCorsPreflight","CCS_HEADER","sendPostRequest","status","clearTelemetryCache","$e0e4999fede2ba19$export$f7a7dd6bfc156d75","tokenRenewalOffsetSeconds","proxyUrl","$e0e4999fede2ba19$var$DEFAULT_LOGGER_IMPLEMENTATION","loggerCallback","piiLoggingEnabled","logLevel","$8act0","LogLevel","Info","$dUtQ4","AuthError","createUnexpectedError","$e0e4999fede2ba19$var$DEFAULT_LIBRARY_INFO","sku","SKU","version","$gAQ7u","cpu","os","$e0e4999fede2ba19$var$DEFAULT_CLIENT_CREDENTIALS","$e0e4999fede2ba19$var$DEFAULT_AZURE_CLOUD_OPTIONS","tenant","DEFAULT_COMMON_TENANT","$e0e4999fede2ba19$export$57a091701dcdabb2","userAuthOptions","userSystemOptions","userLoggerOption","loggerOptions","storageImplementation","storageInterface","networkImplementation","networkInterface","cryptoImplementation","$8RvCC","DefaultStorageClass","$2FPRU","DEFAULT_CRYPTO_IMPLEMENTATION","$e0e4999fede2ba19$var$DEFAULT_NETWORK_IMPLEMENTATION","$1f27a522af777978$export$865f57d401606752","base64Decode","base64Encode","$a207a6b3d34d3093$export$930cbd4733f218f0","$a207a6b3d34d3093$export$145273558d58e0ac","errorCode","errorMessage","suberror","_this","errorString","Object","setPrototypeOf","EMPTY_STRING","name","__extends","setCorrelationId","$709b0e48f6b53a82$export$28d77f87efed1d88","$709b0e48f6b53a82$export$81ab9ba9bd28255c","$709b0e48f6b53a82$export$e18ac120172ed505","$709b0e48f6b53a82$export$cf7709e7db2ddf5d","LIBRARY_NAME","CACHE_PREFIX","DEFAULT_AUTHORITY_HOST","CONSUMER_UTID","OPENID_SCOPE","OFFLINE_ACCESS_SCOPE","EMAIL_SCOPE","CODE_RESPONSE_TYPE","CODE_GRANT_TYPE","RT_GRANT_TYPE","FRAGMENT_RESPONSE_MODE","S256_CODE_CHALLENGE_METHOD","AUTHORIZATION_PENDING","NOT_DEFINED","FORWARD_SLASH","IMDS_ENDPOINT","IMDS_VERSION","IMDS_TIMEOUT","$709b0e48f6b53a82$export$893b1b5b686d84ef","$709b0e48f6b53a82$export$a002182e51710d39","PROFILE_SCOPE","$709b0e48f6b53a82$export$c125cda26c71ef54","$709b0e48f6b53a82$export$7f68224783b2bd08","$709b0e48f6b53a82$export$49a06cbda5acaa5","LOGIN","CREATE","$709b0e48f6b53a82$export$f990a5bae1260b8c","$709b0e48f6b53a82$export$23244fafa2e7f55c","$709b0e48f6b53a82$export$520854da2ba5d734","$709b0e48f6b53a82$export$eca2dc7e6e608a68","$709b0e48f6b53a82$export$391dd8d838841317","$709b0e48f6b53a82$export$ba193b555633db78","$709b0e48f6b53a82$export$a1fe36237c1cc863","S256","$709b0e48f6b53a82$export$ce68f19b50b39c0b","$709b0e48f6b53a82$export$5d365d77acfcb55d","$709b0e48f6b53a82$export$7e1bea6dc1b6b32e","$709b0e48f6b53a82$export$978fe7ab5e74b539","CACHE_KEY","REFRESH_TIME_SECONDS","$709b0e48f6b53a82$export$901491a717da2ba5","$709b0e48f6b53a82$export$30fa4ad28fb9feeb","SCHEMA_VERSION","MAX_LAST_HEADER_BYTES","MAX_CACHED_ERRORS","CATEGORY_SEPARATOR","VALUE_SEPARATOR","OVERFLOW_FALSE","UNKNOWN_ERROR","$709b0e48f6b53a82$export$a2330d6808e6d893","DEFAULT_THROTTLE_TIME_SECONDS","DEFAULT_MAX_THROTTLE_TIME_SECONDS","THROTTLING_PREFIX","X_MS_LIB_CAPABILITY_VALUE","$709b0e48f6b53a82$export$b8e9cd941e8016ac","$5f18ed8a9f930396$export$243e62d78d3b544d","$5f18ed8a9f930396$export$efa9a398d6368992","packageName","packageVersion","level","clone","logMessage","options","containsPii","timestamp","Date","toUTCString","log","executeCallback","message","localCallback","error","Error","errorPii","warning","Warning","warningPii","infoPii","Verbose","$33fadf35800e4b73$export$ecc754f99843e759","decodeAuthToken","authToken","createTokenNullOrEmptyError","matches","createTokenParsingError","JSON","stringify","JWSPayload","JWSSig","str","strObj","obj","parse","keys","startsWith","search","indexOf","endsWith","lastIndexOf","query","params","split","decode","s","forEach","pair","trim","key","value","$859b00ae06117652$export$51eee17394e135b","desc","$859b00ae06117652$export$a839ff85a7957561","createClientInfoDecodingError","caughtError","clientInfoDecodingError","createClientInfoEmptyError","clientInfoEmptyError","caughtExtractionError","tokenParsingError","invalidRawTokenString","nullOrEmptyToken","errDetail","endpointResolutionError","createNetworkError","networkError","createUnableToGetOpenidConfigError","unableToGetOpenidConfigError","createHashNotDeserializedError","hashParamObj","hashNotDeserialized","createInvalidStateError","invalidState","invalidStateError","stateMismatchError","missingState","stateNotFoundError","createNonceMismatchError","nonceMismatchError","createNonceNotFoundError","missingNonce","nonceNotFoundError","createMultipleMatchingTokensInCacheError","multipleMatchingTokens","multipleMatchingAccounts","createMultipleMatchingAppMetadataInCacheError","multipleMatchingAppMetadata","tokenRequestCannotBeMade","createAppendEmptyScopeToSetError","givenScope","appendEmptyScopeError","createRemoveEmptyScopeFromSetError","removeEmptyScopeError","createAppendScopeSetError","appendError","appendScopeSetError","createEmptyInputScopeSetError","emptyInputScopeSetError","$c148700c4e017537$export$a8ff84c12d48cfa6","$c148700c4e017537$export$83d89fbfd8236492","$c7d869c1a2513d67$export$4cda21933050d9ec","$673bcd64dd27ec5e$export$996e3ea69314b5c6","cryptoImpl","getAllAccounts","currentAccounts","getAccountsFilteredBy","map","accountKey","accountValues","accountInfo","toObject","$9BS3T","AccountEntity","getAccountInfo","saveCacheRecord","cacheRecord","createNullOrUndefinedCacheRecord","idToken","setIdTokenCredential","saveAccessToken","currentScopes","currentAccessTokens","removedAccessTokens_1","currentTokenCache","getCredentialsFilteredBy","credentialType","environment","realm","tokenType","requestedClaimsHash","$7x3zR","ScopeSet","fromString","target","accessTokens","Promise","all","setAccessTokenCredential","accountFilter","getAccountsFilteredByInternal","allCacheKeys","getKeys","matchingAccounts","entity","getAccount","cacheKey","matchEnvironment","matchRealm","filter","getCredentialsFilteredByInternal","familyId","oboAssertion","keyId","credType","matchOboAssertion","matchHomeAccountId","matchClientId","matchTarget","CredentialType","ACCESS_TOKEN_WITH_AUTH_SCHEME","matchTokenType","matchKeyId","updatedCacheKey","updateCredentialCacheKey","ID_TOKEN","matchingCredentials","idTokens","getAppMetadataFilteredBy","getAppMetadataFilteredByInternal","getAuthorityMetadataByAlias","host","getAuthorityMetadataKeys","removeAllAccounts","removedAccounts","removeAccount","createNoAccountFoundError","removeAccountContext","accountId","generateAccountId","removedCredentials","$8JDk7","CredentialEntity","getCredentialType","removeCredential","kid","generateCredentialKey","toLowerCase","trys","push","createBindingKeyNotRemovedError","removeItem","CacheSchemaType","CREDENTIAL","removeAppMetadata","isAppMetadata","APP_METADATA","readCacheRecord","cachedAccount","readAccountFromCache","cachedAccessToken","readAccessTokenFromCache","cachedRefreshToken","readRefreshTokenFromCache","cachedAppMetadata","readAppMetadataFromCache","cachedIdToken","idTokenClaims","$7kZLN","AuthToken","secret","accessToken","refreshToken","appMetadata","generateAccountCacheKey","readIdTokenFromCache","idTokenFilter","tenantId","credentialCache","numIdTokens","authScheme","BEARER","ACCESS_TOKEN","accessTokenFilter","printScopesLowerCase","numAccessTokens","familyRT","id","THE_FAMILY_ID","refreshTokenFilter","REFRESH_TOKEN","refreshTokens","appMetadataFilter","appMetadataEntries","numAppMetadata","isAppMetadataFOCI","cloudMetadata","aliases","matchCredentialType","matchFamilyId","entityScopeSet","requestTargetScopeSet","containsOnlyOIDCScopes","removeScope","removeOIDCScopes","$65c107818bc998e1$export$39bc12230e4d3f33","generateAccountIdForCacheKey","generateCredentialId","generateCredentialIdForCacheKey","generateTarget","generateTargetForCacheKey","generateCredentialCacheKey","generateType","CacheType","createUnexpectedCredentialTypeError","$57be63d7f846af92$export$b9b82b0f94ae1f99","inputScopes","scopeArr","trimArrayEntries","filteredInput","removeEmptyStringsFromArray","validateInputScopes","Set","scope","add","inputScopeString","createEmptyScopesArrayError","containsScope","lowerCaseScopesSet","has","containsScopeSet","scopeSet","size","asArray","every","defaultScopeCount","OIDC_SCOPES","defaultScope","appendScope","newScope","appendScopes","newScopes","delete","unionScopeSets","otherScopes","unionScopes","$969cc688182846d2$export$8a1024301e8298df","$969cc688182846d2$export$ac9d9d20c2327339","createPostLogoutRedirectUriEmptyError","createClaimsRequestParsingError","claimsRequestParseError","createInsecureAuthorityUriError","urlString","createUrlParseError","urlParseError","createUrlEmptyError","createClientIdSingleScopeError","createInvalidPromptError","promptValue","createEmptyLogoutRequestError","join","CACHE_KEY_SEPARATOR","generateAccountKey","$6ff18147f1afb887$export$680160523e6bfa6a","localAccountId","authorityType","CacheAccountType","MSAV1_ACCOUNT_TYPE","MSA","MSSTS_ACCOUNT_TYPE","MSSTS","GENERIC_ACCOUNT_TYPE","GENERIC","username","accountInterface","createAccount","cloudGraphHostName","msGraphHost","_c","_d","_e","_f","env","getPreferredCache","tid","preferred_username","emails","createGenericAccount","$cZn6y","AuthorityType","Adfs","ADFS_ACCOUNT_TYPE","$6fc13ebc332ded7c$export$575e1419cfbab7f8","rawClientInfo","crypto","decodedClientInfo","$974d1aabbdaa4f9c$export$cd82032b224a3839","$557a50de248ab1f3$export$3a170961dab30083","rawToken","extractTokenClaims","encodedToken","decodedToken","base64TokenPayload","$e4ba46f97bce1eb3$export$c69de3e7a1e69077","e_1","$5R0g5","ThrottlingUtils","postProcess","$44321a50b91f10d9$export$c060a619741dd765","generateThrottlingStorageKey","ThrottlingConstants","preProcess","getThrottlingCache","throttleTime","now","THROTTLING","$24ymx","ServerError","errorCodes","subError","checkResponseStatus","checkResponseForRetryAfter","thumbprintValue","calculateThrottleTime","parseInt","RETRY_AFTER","error_codes","error_description","setThrottlingCache","hasOwnProperty","$18269c32984fce6f$export$ea52035eac03daf0","$531468341ade26af$export$17b7b3ac1abef49f","$8f22594edfb44d21$export$882078dd8a9e0bfa","parameters","ResponseMode","QUERY","addScopes","addOidcScopes","requestScopes","OIDC_DEFAULT_SCOPES","SCOPE","encodeURIComponent","printScopes","CLIENT_ID","$2Kwo5","addPostLogoutRedirectUri","POST_LOGOUT_URI","addIdTokenHint","idTokenHint","ID_TOKEN_HINT","SSOTypes","DOMAIN_HINT","SID","mergedClaims","addClientCapabilitiesToClaims","CLAIMS","CLIENT_REQUEST_ID","X_CLIENT_SKU","X_CLIENT_OS","X_CLIENT_CPU","validatePrompt","PROMPT","addState","state","addNonce","nonce","NONCE","validateCodeChallengeParams","createInvalidCodeChallengeParamsError","CODE_CHALLENGE","CODE_CHALLENGE_METHOD","CODE","addDeviceCode","DEVICE_CODE","addRefreshToken","CODE_VERIFIER","CLIENT_SECRET","CLIENT_ASSERTION","$2009002703090bc1$export$9800b929b6984365","createRedirectUriEmptyError","promptValues","createInvalidClaimsRequestError","validateCodeChallengeMethod","$7bceb18977467864$export$f456c9835cc63582","cacheStorage","cryptoObj","decodeURIComponent","serverResponseHash","createStateMismatchError","$3UPBi","InteractionRequiredAuthError","isInteractionRequiredError","serverResponse","correlation_id","trace_id","errString","handleServerTokenResponse","serverTokenResponse","handlingRefreshTokenResponse","idTokenObj","homeAccountIdentifier","generateHomeAccountId","client_info","requestStateObj","$ibdkJ","ProtocolUtils","parseRequestState","key_id","generateCacheRecord","$efszH","TokenCacheContext","beforeCacheAccess","cacheContext","generateAuthenticationResult","spa_code","createInvalidCacheEnvironmentError","$aHx9s","IdTokenEntity","createIdTokenEntity","id_token","generateAccountEntity","access_token","responseScopes","expiresIn","expires_in","refresh_token","$hKUQH","RefreshTokenEntity","createRefreshTokenEntity","foci","$5u84G","AppMetadataEntity","createAppMetadataEntity","CacheRecord","cloud_graph_host_name","protocolMode","fromTokenCache","requestState","expiresOn","extExpiresOn","signPopToken","$7ca7a2bf38aafdcd$export$49ed297fa7d02bde","$c2e674572252645d$export$6b7a8e14ec177765","apply","arguments","refreshOn","requestedClaims","atEntity","$c4ca7dc1578a1e7a$export$3117a0de16ab2854","Math","round","getTime","isTokenExpired","offset","expirationSec","Number","$ced2d4950dbd0255$export$2f7722c9adbc0a1b","$2d9ea0d849f19272$export$e16d6a6c677acec5","$2d9ea0d849f19272$export$9689959ec6716811","$2d9ea0d849f19272$export$d44d3b7b7a580eb6","$2d9ea0d849f19272$export$6ba3e818c6bc76ba","$5c9a0b8485eed0cc$export$5ee5669a32bdea66","accountEntity","idTokenEntity","accessTokenEntity","refreshTokenEntity","appMetadataEntity","$d3c398c9af34ca18$export$871e33217042c65e","setRequestState","userState","meta","libraryState","generateLibraryState","RESOURCE_DELIM","stateObj","stateString","createNoCryptoObjectError","$53c21a464cad5b47$var$KeyLocation","KeyLocation","$53c21a464cad5b47$export$3dd8467151c83e3e","generateKid","getPublicKeyThumbprint","tokenClaims","cnf","createTokenClaimsRequiredError","shrNonce","resourceUrlString","$eVUPY","getUrlComponents","signJwt","at","payload","ts","m","toUpperCase","u","resourceUrlComponents","HostNameAndPort","AbsolutePath","q","QueryString","client_claims","$adf27a3fcf515e87$export$3abcdca7229e54f2","url","_urlString","getHash","canonicalizeUri","get","lowerCaseUrl","slice","components","PathSegments","Protocol","removeHashFromUrl","replaceTenantPath","urlObject","pathArray","AADAuthorityConstants","COMMON","ORGANIZATIONS","constructAuthorityUriFromObject","parseHash","regEx","RegExp","match","urlComponents","pathSegments","val","substring","getDomainFromUrl","relativeUrl","baseComponents","baseUrl","hashString","$3fe60484fc3744c3$export$b939be19f91a34cc","generateAppMetadataCacheKey","$a5f8a1c901e11079$export$500ab620f6bcc747","tokenCache","hasChanged","cache","defineProperty","configurable","$0f2f6f908b4eb8f2$export$9cb096b89b92d8a8","acquireTokenByRefreshToken","noFamilyRTInCache","clientMismatchErrorWithFamilyRT","createEmptyTokenRequestError","createNoAccountInSilentRequestError","acquireTokenWithCachedRefreshToken","InteractionRequiredAuthErrorMessage","noTokensFoundError","refreshTokenRequest","createNoTokensFoundError","addGrantType","GrantType","REFRESH_TOKEN_GRANT","addPopToken","$b02dbd615fe6a054$export$e344f5b12c464597","forceRefresh","setCacheOutcome","CacheOutcome","FORCE_REFRESH","createRefreshRequiredError","NO_CACHED_ACCESS_TOKEN","wasClockTurnedBack","cachedAt","CACHED_ACCESS_TOKEN_EXPIRED","REFRESH_CACHED_ACCESS_TOKEN","generateResultFromCacheRecord","$aea8bfbe438b18c9$export$f1c6ec2e6d68c49c","authorityOptions","_canonicalAuthority","validateAsUri","regionDiscovery","$2Zln4","RegionDiscovery","regionDiscoveryMetadata","region_used","region_outcome","canonicalAuthorityUrlComponents","ADFS","enumerable","_canonicalAuthorityUrlComponents","discoveryComplete","replacePath","metadata","authorization_endpoint","replaceTenant","token_endpoint","replace","end_session_endpoint","createLogoutNotSupportedError","createEndpointDiscoveryIncompleteError","issuer","canonical_authority","currentPart","index","cachedAuthorityParts","cachedPart","$jZAgA","ProtocolMode","OIDC","metadataEntity","hostnameAndPort","$dOr9p","AuthorityMetadataEntity","updateCanonicalAuthority","updateCloudDiscoveryMetadata","preferred_network","updateEndpointMetadata","endpointSource","cloudDiscoverySource","AuthorityMetadataSource","CACHE","resetExpiresAt","generateAuthorityMetadataCacheKey","preferred_cache","setAuthorityMetadata","autodetectedRegionName","azureRegion","getEndpointMetadataFromConfig","CONFIG","detectRegion","azureRegionConfiguration","environmentRegion","NETWORK","defaultOpenIdConfigurationEndpoint","getEndpointMetadataFromNetwork","sendGetRequestAsync","isAuthoritySameType","aliasesFromNetwork","isExpired","getCloudDiscoveryMetadataFromNetwork","createUntrustedAuthorityError","getCloudDiscoveryMetadataFromConfig","cloudDiscoveryMetadata","createInvalidCloudDiscoveryMetadataError","isInKnownAuthorities","createCloudDiscoveryMetadataFromHost","instanceDiscoveryEndpoint","AAD_INSTANCE_DISCOVERY_ENDPT","$3BoEP","isCloudInstanceDiscoveryResponse","getCloudDiscoveryMetadataFromNetworkResponse","knownAuthorities","$03c18bc06fdce898$export$73a3e3dedd37150d","$a0e50176ce139744$export$49e7dcb371a5f08e","expiresAt","AUTHORITY_METADATA_CONSTANTS","fromNetwork","$22d1db1ebcd19017$export$1afa9d0f261ebb47","localIMDSVersionResponse","currentIMDSVersion","currentIMDSVersionResponse","getRegionFromIMDS","ResponseCodes","httpSuccess","region_source","RegionDiscoverySources","IMDS","httpBadRequest","getCurrentVersion","FAILED_AUTO_DETECTION","ENVIRONMENT_VARIABLE","acquireTokenAuthority","$7caa661ac4a070a1$export$4b476259e3402a97","createInstance","authorityUri","$87bb5d62a25750b6$export$ff670b37c5e10296","failedRequests","cacheHits","isServerTelemetryEntity","$7c9010589300d207$export$15b974958510ada9","isThrottlingEntity","validateKey","$f835417272f1072c$export$6d95060a8ed7155a","reject","sendPostRequestAsync","$65a3f49cb6307125$export$bddbbc43a3ca9c53","telemetryRequest","cacheOutcome","NO_CACHE_HIT","apiId","wrapperSKU","telemetryCacheKey","SERVER_TELEM_CONSTANTS","generateCurrentRequestHeaderValue","platformFields","wrapperVer","requestWithRegionDiscoveryFields","getRegionDiscoveryFields","generateLastRequestHeaderValue","lastRequests","getLastRequests","maxErrors","maxErrorsToSend","errors","errorCount","OVERFLOW_TRUE","cacheFailedRequest","shift","toString","setServerTelemetry","incrementCacheHits","initialValue","$bEuR6","ServerTelemetryEntity","getServerTelemetry","numErrorsFlushed","serverTelemEntity","serverTelemetryEntity","i","dataSize","isBrowserEnvironment","window","$9nJfD","buildConfiguration","Logger","system","$evMvC","$1HjGF","CryptoOps","EventHandler","$ikV67","BrowserCacheManager","DEFAULT_BROWSER_CACHE_MANAGER","TokenCache","handleRedirectPromise","hash","redirectResponseKey","redirectClient","loggedInAccounts","redirectResponse","emitEvent","$g98wj","EventType","HANDLE_REDIRECT_START","InteractionType","Redirect","getTemporaryCache","TemporaryCacheKeys","CORRELATION_ID","$fxitg","RedirectClient","HANDLE_REDIRECT_END","result","catch","ACQUIRE_TOKEN_FAILURE","LOGIN_FAILURE","isLoggedIn","preflightBrowserEnvironmentCheck","ACQUIRE_TOKEN_START","LOGIN_START","$lWgUr","PopupClient","then","Popup","ssoSilent","silentTokenResult","Silent","SSO_SILENT_START","ApiId","SSO_SILENT_SUCCESS","SSO_SILENT_FAILURE","acquireTokenByCode","trace","ACQUIRE_TOKEN_BY_CODE_START","$76Mtj","BrowserAuthError","createAuthCodeRequiredError","hybridAuthCodeResponses","ACQUIRE_TOKEN_BY_CODE_SUCCESS","$lBBWZ","SilentAuthCodeClient","ACQUIRE_TOKEN_NETWORK_START","$iBFS5","BrowserUtils","blockReloadInHiddenIframes","$2mnsZ","SilentRefreshClient","isServerError","isInvalidGrantError","BrowserConstants","$i86ic","SilentIframeClient","acquireTokenSilent_authCode","$0140421634b3b078$export$8d1a43f377c8df92","logout","logoutRedirect","logoutPopup","$13c91413da988abc$export$c274a7f0ebd24b14","$5yqxr","BrowserCrypto","b64Encode","$iy7Ou","Base64Encode","b64Decode","$d7G78","Base64Decode","guidGenerator","$hn4r1","GuidGenerator","asymmetricKeys","$glkI4","AsyncMemoryStorage","input","generatePkceCodes","pkceGenerator","generateCodes","publicKeyJwk","pubKeyThumprintObj","publicJwkString","publicJwkHash","privateKeyJwk","unextractablePrivateKey","keyPair","kty","n","getJwkString","exportJwk","privateKey","importJwk","requestMethod","requestUri","containsKey","clearKeystore","dataStoreNames","databaseStorage","deleteDatabase","publicKeyJwkString","header","encodedHeader","encodedPayload","tokenString","tokenBuffer","signatureBuffer","encodedSignature","getItem","cachedKeyPair","createSigningKeyNotFoundInStorageError","urlEncode","jwk","$lQABx","BrowserStringUtils","stringToArrayBuffer","sign","urlEncodeArr","Uint8Array","$ca5806521448c4be$export$62dc58eaf2cdc52","generateGuid","buffer","getRandomValues","$ikaQC","MathUtils","decimalToHex","err","$d5728265d3667971$export$6a7ef315a0d1ef07","$d811768bdff141fb$export$d99f397851818755","base64EncArr","inputArr","encode","inputUtf8Arr","stringToUtf8Arr","$fe7ad92e4391e722$export$27a4bf5378101665","sDOMStr","nChr","nArrLen","nMapIdx","nStrLen","charCodeAt","nIdx","nChrIdx","aBytes","dataString","data","ArrayBuffer","dataView","encodedString","base64DecToArr","utf8ArrToString","$98dc98c6cc205193$export$fe555b2490ffa3fb","base64String","nBlockSize","sB64Enc","nOutLen","ceil","nInLen","nMod3","nMod4","nUint24","nOutIdx","nInIdx","generateCodeVerifier","generateCodeChallengeFromVerifier","verifier","$f36e3989fdce385c$export$562113aa73225ba6","pkceCodeVerifier","pkceHashedCodeVerifier","$52ceb16ced3151d8$export$6deffaef56f0bd5a","$52ceb16ced3151d8$export$f8eb6760ca13876a","createPkceNotGeneratedError","pkceNotGenerated","createCryptoNotAvailableError","cryptoDoesNotExist","createHttpMethodNotImplementedError","method","httpMethodNotImplementedError","emptyNavigateUriError","createEmptyHashError","hashValue","hashEmptyError","hashDoesNotContainStateError","createHashDoesNotContainKnownPropertiesError","hashDoesNotContainKnownPropertiesError","createUnableToParseStateError","unableToParseStateError","stateInteractionTypeMismatchError","createInteractionInProgressError","interactionInProgress","createPopupWindowError","popupWindowError","createEmptyWindowCreatedError","emptyWindowError","userCancelledError","createMonitorPopupTimeoutError","monitorPopupTimeoutError","createMonitorIframeTimeoutError","monitorIframeTimeoutError","createRedirectInIframeError","windowParentCheck","redirectInIframeError","blockTokenRequestsInHiddenIframeError","blockAcquireTokenInPopupsError","createIframeClosedPrematurelyError","iframeClosedPrematurelyError","createSilentLogoutUnsupportedError","$40b4b6b3e358a65d$var$S256_HASH_ALG","$40b4b6b3e358a65d$export$bdaac271e902e541","$40b4b6b3e358a65d$var$PUBLIC_EXPONENT","sha256Digest","dataBuffer","hasIECrypto","msCryptoExportJwk","subtle","exportKey","KEY_FORMAT_JWK","extractable","usages","keyString","keyBuffer","msCryptoImportKey","importKey","_keygenAlgorithmOptions","msCryptoSign","hasBrowserCrypto","getSubtleCryptoDigest","algorithm","getMSCryptoDigest","resolve","digestOperation","digest","addEventListener","msCryptoGenerateKey","msGenerateKey","generateKey","msExportKey","resultString","resultBuffer","$be5eac0ea7afd09e$export$b38f35aab37afcde","inMemoryCache","$krAVx","MemoryStorage","setItem","e_4","handleDatabaseAccessError","e_5","$d7762c100436f113$export$286b0f3b569e5f16","open","openDB","indexedDB","dbName","createObjectStore","tableName","event","db","dbOpen","validateDbIsOpen","createDatabaseNotOpenError","transaction","dbGet","dbPut","dbDelete","objectStore","dbGetKeys","getAllKeys","dbContainsKey","count","$ee22f9373d02691a$export$d7392285c701ecf5","cacheKeys","clear","$d59662ac7a9a476c$export$44d7291b5c8cc149","cacheConfig","COOKIE_LIFE_MULTIPLIER","setupBrowserStorage","cacheLocation","temporaryCacheStorage","setupTemporaryCacheStorage","BrowserCacheLocation","LocalStorage","SessionStorage","$7NsJm","BrowserStorage","internalStorage","migrateCacheEntries","idTokenKey","PersistentCacheKeys","clientInfoKey","CLIENT_INFO","errorKey","ERROR","errorDescKey","ERROR_DESC","migrateCacheEntry","values","newKey","setTemporaryCache","validateAndParseJson","jsonValue","parsedJson","parsedAccount","isAccountEntity","CacheManager","getIdTokenCredential","parsedIdToken","isIdTokenEntity","accessTokenKey","parsedAccessToken","$gJrQW","AccessTokenEntity","isAccessTokenEntity","getRefreshTokenCredential","refreshTokenKey","parsedRefreshToken","isRefreshTokenEntity","setRefreshTokenCredential","getAppMetadata","appMetadataKey","parsedMetadata","isAppMetadataEntity","generateAppMetadataKey","serverTelemetryKey","serverTelemetry","getAuthorityMetadata","isAuthorityMetadata","setWrapperMetadata","wrapperVersion","InMemoryCacheKeys","WRAPPER_SKU","WRAPPER_VER","activeAccountIdKey","generateCacheKey","ACTIVE_ACCOUNT","activeAccountId","getAccountInfoByFilter","accountObj","throttlingCacheKey","parsedThrottlingCache","$aH2Lp","ThrottlingEntity","throttlingCache","itemCookie","getItemCookie","storeAuthStateInCookie","setItemCookie","clearItemCookie","__spread","cookieName","cookieValue","expires","cookieStr","getCookieExpirationTime","secureCookies","cookieList","document","cookie","charAt","clearMsalCookies","cookiePrefix","cookieKey","cookieLifeDays","today","getCache","ADAL_ID_TOKEN","generateAuthorityKey","stateId","AUTHORITY","generateNonceKey","NONCE_IDTOKEN","generateStateKey","REQUEST_STATE","getCachedAuthority","stateCacheKey","authorityCacheKey","updateCacheEntries","authorityInstance","$5ad3654d70d3fe4a$export$2baa60fa09b100be","validateWindowStorage","windowStorage","$4ieqO","BrowserConfigurationAuthError","createStorageNotSupportedError","$320409a2968f9f12$export$daccd9364f884077","$320409a2968f9f12$export$2eb7a1dfdc4c5fba","$e57b35ef8cb8f153$export$83c579d74a9d4ed7","extractBrowserRequestState","$6d495cf6d7a6f942$export$f3ffe700be354b19","$6d495cf6d7a6f942$export$f8352245bee68086","userInputAuth","userInputCache","userInputSystem","DEFAULT_AUTH_OPTIONS","DEFAULT_AUTHORITY","postLogoutRedirectUri","navigateToLoginRequestUrl","AAD","azureCloudInstance","$h9LSg","AzureCloudInstance","None","DEFAULT_CACHE_OPTIONS","DEFAULT_LOGGER_OPTIONS","DEFAULT_BROWSER_SYSTEM_OPTIONS","DEFAULT_SYSTEM_OPTIONS","getBrowserNetworkClient","$ljcK0","StubbedNetworkModule","$5zLpw","NavigationClient","loadFrameTimeout","windowHashTimeout","iframeHashTimeout","navigateFrameWait","detectIEOrEdge","redirectNavigationTimeout","asyncPopups","allowRedirectInIframe","$d8bc297369c9228b$export$311899ae85124b2d","clearHash","contentWindow","location","history","replaceState","origin","pathname","replaceHash","urlParts","isInIframe","parent","isInPopup","opener","getCurrentUri","href","getHomepage","fetch","Headers","$cxRjg","FetchClient","hashContainsKnownProperties","createBlockReloadInHiddenIframeError","navigator","onLine","createGetRequestFailedError","getHeaderDict","e_3","createPostRequestFailedError","createNoNetworkConnectivityError","createFailedToParseNetworkResponseError","$9221eb50ca62ba28$export$4c206ef5be879972","getFetchHeaders","sendRequestAsync","HTTP_REQUEST_TYPE","GET","xhr","XMLHttpRequest","POST","jsonResponse","responseText","networkResponse","onerror","send","$40f4ff622e5cf51c$export$d0d362a73d466c9b","navigateInternal","defaultNavigateWindow","navigateExternal","$a90996ccbe5c3c78$export$a8ff84c12d48cfa6","$a90996ccbe5c3c78$export$83d89fbfd8236492","$bc14188b442b4f5f$export$3d7865934588d77e","$ceb2bc16a4ee1463$export$ce0ba2422a1c7815","eventCallbacks","handleAccountCacheChange","bind","addEventCallback","callback","callbackId","removeEventCallback","enableAccountStorageEvents","listeningToStorageEvents","disableAccountStorageEvents","removeEventListener","message_1","eventType","interactionType","$ff8c21979a984477$export$43b0fce132d066f4","popupWindowAttributes","acquireTokenPopupAsync","popupName","popup","$hsS4r","PopupUtils","openSizedPopup","generateLogoutPopupName","validLogoutRequest","logoutPopupAsync","mainWindowRedirectUri","initializeServerTelemetryManager","validRequest","initializeAuthorizationCodeRequest","createAuthCodeClient","azureCloudOptions","authClient","getAuthCodeUrl","navigateUrl","popupParameters","POPUP_OPENED","popupWindow","validateAndExtractStateFromHash","removeThrottle","authCodeRequest","cleanRequestByState","requestAuthority","logoutUri","popupUtils","e_2","navigationOptions","absoluteUrl","LOGOUT_START","LOGOUT_SUCCESS","monitorPopupForSameOrigin","cleanPopup","verbosePii","$f8c29a15d1b0a83c$export$fa9179cade3eb05a","generatedPkceParams","initializeLogoutRequest","logoutHint","getLogoutHintFromIdTokenClaims","getAbsoluteUrl","getClientConfiguration","authorityUrl","requestAzureCloudOptions","AuthorizationCodeClient","clientConfig","discoveredAuthority","requestCorrelationId","platformStateObj","getDiscoveredAuthority","userAuthority","builtAuthority","authorityMetadata","$eZHOx","Authority","generateAuthority","AuthorityFactory","createDiscoveredInstance","initializeAuthorizationRequest","browserState","validatedRequest","legacyLoginHint","$fa3ce8107f1cdd19$export$d858565f81c03f1f","storageImpl","accountInfoIsEqual","getActiveAccount","initializeBaseRequest","createMissingSshKidError","getRedirectUri","requestRedirectUri","$cb6efe78eb724bfb$export$b8844d65ea952a33","unloadWindow","openPopup","urlNavigate","popupParams","assign","focus","currentWindow","setInteractionInProgress","winLeft","screenLeft","screenX","winTop","screenTop","screenY","winHeight","innerHeight","documentElement","clientHeight","width","popupSize","top","left","popupPosition","height","winWidth","max","close","browserRequestLogger","$da665f3ea8e1ce54$export$85eaf911dca9b09c","initiateAuthRequest","requestUrl","createEmptyNavigationUriError","$5c31e93d4c132ad9$export$a30cd982b4e89bdb","authCodeModule","handleCodeResponseFromHash","locationHash","networkModule","stateKey","authCodeResponse","createStateNotFoundError","handleCodeResponseFromServer","validateNonce","nonceKey","cachedNonce","cachedCcsCred","tokenResponse","updateTokenEndpointAuthority","cloud_instance_host_name","cloudInstanceHostname","cloudInstanceAuthorityUri","$aHAIj","cloudInstanceAuthority","authModule","updateAuthority","$b4f84405c017fdc8$export$a368977effbc1ed6","handleBackButton","interactionHandler","redirectStartPage","$47qaD","RedirectHandler","getRedirectStartPage","onRedirectNavigate","isInteractionInProgress","responseHash","getRedirectResponseHash","cleanRequestByInteractionType","ORIGIN_URI","loginRequestUrlNormalized","loginRequestUrl","currentUrlNormalized","handleHash","handleHashResult","URL_HASH","timeout","noHistory","processHashOnRedirect","homepage","cachedRequest","currentAuthority","clearCacheOnLogout","$2ffc1dce4039d136$export$9af91951fcedc08c","cacheCodeRequest","redirectTimeout","$d32ddae51fe097a9$export$e81c7938bccef977","createSilentPromptValueError","silentTokenHelper","msalFrame","silentHandler","$79BBX","SilentHandler","monitorIframeForHash","$53568c77e813b7f0$export$578d2d1abe796151","iframe","DEFAULT_IFRAME_TIMEOUT_MS","timeoutMark","performance","intervalId","setInterval","clearInterval","contentHash","removeHiddenIframe","loadFrame","frameHandle","createHiddenIframe","$1b7fd6cba560cfbc$export$b4a36596822a5d2","refreshTokenClient","concat","acquireTokenSilent_silentFlow","createRefreshTokenClient","$9ae077a03ac23e9f$export$ed5d1a18907a1001","storage","loadExternalTokens","createUnableToLoadTokenError","loadIdToken","loadAccessToken","idAuthToken","setAccount","$fbaa7dd7a447d187$export$d7f5ef311b3e9fca","$8qVqz","HybridSpaAuthorizationCodeClient","cloudInstanceHostName","$623d4c5789e83635$export$a2dbbd28e9bce542","$f61c4d0df2164694$export$59d4f873ee62d01e","silentAuthClient","cachedToken","error_1","acquireCachedToken","createSilentFlowClient","$f7NhI","SilentFlowClient","initializeSilentRequest","$7fa1fb1653480194$export$8a1a0c046317338","$IIHdM","StorageClient","credentialOrPipeline","pipeline","$6WAfz","isPipelineLike","$9gzxq","isNode","$FZsYB","StorageSharedKeyCredential","$jb27z","AnonymousCredential","$ekOde","isTokenCredential","newPipeline","super","serviceContext","$kdaKY","Service","storageClientContext","static","connectionString","extractedCreds","$bGQWH","extractConnectionStringParts","kind","sharedKeyCredential","accountName","proxyOptions","$iSfBP","getDefaultProxySettings","proxyUri","accountSas","getContainerClient","containerName","$2UUQE","ContainerClient","appendToURLPath","async","span","updatedOptions","$6EzLO","createSpan","containerClient","containerCreateResponse","create","setStatus","$eLZsP","SpanStatusCode","end","deletedContainerName","deletedContainerVersion","destinationContainerName","containerContext","$buzTq","Container","restore","sourceContainerName","rename","sourceLeaseId","sourceCondition","leaseId","getProperties","abortSignal","convertTracingToRequestOptionsBase","properties","setProperties","getStatistics","marker","listContainersSegment","include","tagFilterSqlExpression","filterBlobs","where","maxPageSize","_response","blobs","blob","tagValue","tags","blobTagSet","toTags","findBlobsByTagsSegments","$7WQrb","__await","findBlobsByTagsSegment","continuationToken","findBlobsByTagsItems","__asyncValues","next","done","segment","__asyncDelegator","findBlobsByTags","listSegmentOptions","iter","Symbol","asyncIterator","byPage","settings","listSegments","listContainersSegmentResponse","containerItems","listItems","listContainers","prefix","includeDeleted","includeMetadata","includeSystem","startsOn","getUserDelegationKey","truncatedISO8061Date","userDelegationKey","signedObjectId","signedTenantId","signedStartsOn","signedExpiresOn","signedService","signedVersion","requestId","clientRequestId","date","getBlobBatchClient","$2RohY","BlobBatchClient","generateAccountSasUrl","permissions","$2LiEr","AccountSASPermissions","resourceTypes","RangeError","sas","$iBqlw","generateAccountSASQueryParameters","services","$6o4Td","AccountSASServices","appendToURLQuery","$5c96a02c592fcff1$var$extendStatics","d1","b1","__proto__","Array","d","b","p","$5c96a02c592fcff1$export$a8ba968b8961cb8a","TypeError","String","__","constructor","$5c96a02c592fcff1$export$3c9a16f847548506","t","getOwnPropertySymbols","propertyIsEnumerable","$5c96a02c592fcff1$export$19a8beecd37a4c45","o","iterator","v","$5c96a02c592fcff1$export$10c90e4f7922046c","$5c96a02c592fcff1$export$e427f37a30a4de9b","thisArg","_arguments","generator","verb","g","a","resume","r","fulfill","settle","f","$5c96a02c592fcff1$export$bbd80228419bb833","v1","for","$b57c4a66be56307d$export$62587a5e41fc2768","object","castObject","$2kVkQ","isHttpHeadersLike","validateRequestProperties","prepare","$b57c4a66be56307d$export$b1fc69312ed0e6d1","streamResponseBody","withCredentials","onUploadProgress","onDownloadProgress","proxySettings","keepAlive","decompressResponse","streamResponseStatusCodes","HttpHeaders","formData","generateUuid","valueOf","pathTemplate","validMethods","pathParameters","segments","item","pathParamName","pathParam","stringifiedPathParameters","skipUrlEncoding","queryParams","queryParamName","queryParam","headerName","disableClientRequestId","bodyIsStream","serializationMapper","$aE3vx","Serializer","mappers","serialize","disableJsonStringifyOnBody","spanOptions","tracingContext","operationSpec","shouldDeserialize","operationResponseGetter","$1b39ec95f545f615$var$getHeaderKey","$1b39ec95f545f615$export$f67692cb92e78cb1","rawHeaders","contains","remove","headersArray","headerValues","headerNames","toJson","$1b39ec95f545f615$export$2b4577ff97ee74d5","_headersMap","headerValue","preserveCase","headerKey","headerKey1","resultPreservingCasing","$7c005c56c79ba41c$export$ef852775387a0be7","modelMappers","isXML","validateConstraints","mapper","objectName","failValidation","constraintName","constraintValue","constraints","valueAsNumber","ExclusiveMaximum","ExclusiveMinimum","InclusiveMaximum","InclusiveMinimum","MaxItems","MaxLength","MinItems","MinLength","MultipleOf","Pattern","UniqueItems","valueAsArray","pattern","some","ar","rootName","includeRoot","xmlCharKey","$7ZB4o","XML_CHARKEY","mapperType","serializedName","isConstant","defaultValue","required","nullable","typeName","isValidUuid","objectType","isView","Blob","$7c005c56c79ba41c$var$serializeBasicTypes","allowedValues","$7c005c56c79ba41c$var$serializeEnumType","isNaN","toISOString","floor","$7c005c56c79ba41c$var$dateToUnixTime","isDuration","$7c005c56c79ba41c$var$serializeDateTypes","returnValue","$j0pug","encodeByteArray","$7c005c56c79ba41c$var$serializeByteArrayType","ch","len","substr","$7c005c56c79ba41c$var$trimEnd","$7c005c56c79ba41c$var$bufferToBase64Url","$7c005c56c79ba41c$var$serializeBase64UrlType","serializer","isXml","isArray","elementType","element","tempArray","serializedValue","xmlNamespace","xmlnsKey","xmlNamespacePrefix","XML_ATTRKEY","$7c005c56c79ba41c$var$serializeSequenceType","Boolean","valueType","tempDictionary","$7c005c56c79ba41c$var$getXmlObjectValue","$7c005c56c79ba41c$var$serializeDictionaryType","$7c005c56c79ba41c$var$getPolymorphicDiscriminatorRecursively","$7c005c56c79ba41c$var$getPolymorphicMapper","modelProps","$7c005c56c79ba41c$var$resolveModelProperties","propertyMapper","readOnly","propName","parentObject","xmlIsWrapped","xmlName","xmlElementName","paths","$7c005c56c79ba41c$var$splitSerializeName","pop","pathName","propertyObjectName","toSerialize","polymorphicDiscriminator","clientName","xmlIsAttribute","additionalPropertiesMapper","additionalProperties","className","modelMapper","$7c005c56c79ba41c$var$resolveReferencedMapper","$7c005c56c79ba41c$var$resolveAdditionalProperties","propNames","clientPropName","pn","$7c005c56c79ba41c$var$serializeCompositeType","deserialize","responseBody","instance","handledPropertyNames","headerCollectionPrefix","dictionary","propertyName","wrapped","elementList","property","propertyInstance","res","arrayInstance","k","entries","isAdditionalProperty","responsePropName","responsePropName1","includes","$7c005c56c79ba41c$var$isSpecialXmlProperty","$7c005c56c79ba41c$var$deserializeCompositeType","castResponseBody","parseFloat","decodeString","$7c005c56c79ba41c$var$base64UrlToByteArray","$7c005c56c79ba41c$var$deserializeSequenceType","$7c005c56c79ba41c$var$deserializeDictionaryType","prop","classes","partialclass","subwords","modelProperties","polymorphicPropertyName","discriminatorName","discriminatorValue","uberParent","indexDiscriminator","polymorphicMapper","discriminators","$7c005c56c79ba41c$var$getPolymorphicDiscriminatorSafely","$7c005c56c79ba41c$export$f4b8304d9ebc88c6","$7c005c56c79ba41c$var$strEnum","$dd61c99fdd9b10ec$export$17377a4f963349ad","fromCharCode","btoa","$dd61c99fdd9b10ec$export$a0fb664af7d0cc44","byteString","atob","arr","$6bf12cd578cfd576$var$validUuidRegex","$6bf12cd578cfd576$export$8ee0fc9ee280b4ee","$hPtJY","versions","node","$6bf12cd578cfd576$export$6ad459db9a6bcc76","uuid","test","$6bf12cd578cfd576$export$1c3aefb711c3a4cc","$5sKyw","default","$6bf12cd578cfd576$export$bdfb881187112155","elementName","xmlNamespaceKey","$6bf12cd578cfd576$var$validateISODuration","$6bf12cd578cfd576$export$757a451204d10ad6","$6bf12cd578cfd576$export$b8b3234b4edfc4c2","searchValue","replaceValue","$6bf12cd578cfd576$export$1f3b27a0956fac0e","$6bf12cd578cfd576$export$a6cdc56e425d0d0a","$8f24ce0c4ccc02f1$export$a002182e51710d39","coreHttpVersion","HTTP","HTTPS","HTTP_PROXY","HTTPS_PROXY","NO_PROXY","ALL_PROXY","HttpConstants","HttpVerbs","PUT","DELETE","MERGE","HEAD","PATCH","StatusCodes","TooManyRequests","ServiceUnavailable","HeaderConstants","AUTHORIZATION","AUTHORIZATION_SCHEME","USER_AGENT","$5d1afc307b19e5fc$export$3dfa762fc17d84c8","$5d1afc307b19e5fc$export$3fa08d02e488b7ae","$3fa3ae484854b431$export$2e2bcd8739ae039","buf","rnds","random","rng","$7qKRb","$2uohp","$568f4ee4022ba00e$var$getRandomValues","$568f4ee4022ba00e$var$rnds8","msCrypto","$1d0137947e8554ce$var$byteToHex","$1d0137947e8554ce$var$i","$1d0137947e8554ce$export$2e2bcd8739ae039","$64ZUg","$46d323206dcbf256$export$2e2bcd8739ae039","$4meF0","$32c496bfb6c27b56$export$2e2bcd8739ae039","$cfae44f0dfdf62c0$var$cachedSetTimeout","$cfae44f0dfdf62c0$var$cachedClearTimeout","$cfae44f0dfdf62c0$var$process","module","exports","$cfae44f0dfdf62c0$var$defaultSetTimout","$cfae44f0dfdf62c0$var$defaultClearTimeout","$cfae44f0dfdf62c0$var$runTimeout","fun","setTimeout","clearTimeout","$cfae44f0dfdf62c0$var$currentQueue","$cfae44f0dfdf62c0$var$queue","$cfae44f0dfdf62c0$var$draining","$cfae44f0dfdf62c0$var$queueIndex","$cfae44f0dfdf62c0$var$cleanUpNextTick","$cfae44f0dfdf62c0$var$drainQueue","run","$cfae44f0dfdf62c0$var$runClearTimeout","$cfae44f0dfdf62c0$var$Item","array","$cfae44f0dfdf62c0$var$noop","nextTick","args","title","browser","argv","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","$91e0ac9e1a1a4ef4$export$33b9ed1bd07561aa","sendRequest","aborted","$yXDxz","AbortError","listener","abort","readyState","DONE","$91e0ac9e1a1a4ef4$var$addProgressListener","upload","requestForm","FormData","appendFormValue","append","formKey","formValue","j","contentType","setRequestHeader","responseType","rej","HEADERS_RECEIVED","_a1","blobBody","$91e0ac9e1a1a4ef4$var$rejectOnTerminalEvent","$91e0ac9e1a1a4ef4$export$eea2c1c5e1a37e50","reader","FileReader","onload","text","bodyAsText","readAsText","$91e0ac9e1a1a4ef4$var$handleBlobResponse","rawEvent","loadedBytes","loaded","responseHeaders","headerLines","getAllResponseHeaders","line","$fdoWI","RestError","REQUEST_SEND_ERROR","abortError","$06916fb4e84bfeba$export$18b052ffd8c84d7","$06916fb4e84bfeba$export$48f7e099c149af88","parentSignals","_signal","$4nZxD","AbortSignal","_i","parentSignals_1","parentSignal","ms","signal","timer","unref","$33190c44dddcc27c$var$listenersMap","WeakMap","$33190c44dddcc27c$var$abortedMap","$33190c44dddcc27c$export$e42c54032314dc1d","onabort","_type","splice","dispatchEvent","_event","$33190c44dddcc27c$export$b751923f1dabd654","$b13b6baf01f80518$var$errorSanitizer","$34GQB","Sanitizer","$b13b6baf01f80518$export$dc24566375af80f3","statusCode","$5DKQd","custom","sanitize","PARSE_ERROR","$23d2fb6c44db1bd3$var$RedactedString","$23d2fb6c44db1bd3$var$defaultAllowedHeaderNames","$23d2fb6c44db1bd3$var$defaultAllowedQueryParameters","$23d2fb6c44db1bd3$export$a6cec3dfaf45e6ac","allowedHeaderNames","allowedQueryParameters","seen","sanitizeHeaders","sanitizeUrl","sanitizeQuery","isObject","sanitizeObject","allowedKeys","accessor","sanitized","urlBuilder","$gKKvs","URLBuilder","getQuery","URLQuery","setQuery","$c32504680279ade3$export$e68653ddf61eee97","_rawQuery","any","parameterName","parameterValue","caseParameterValue","newValue","parameterStrings","parameterValueElement","currentState","currentCharacter","$c32504680279ade3$export$61d2e8db329a11f8","setScheme","scheme","_scheme","getScheme","setHost","_host","getHost","setPort","port","_port","getPort","setPath","path","schemeIndex","schemeStart","_path","appendPath","currentPath","getPath","_query","setQueryParameter","queryParameterName","queryParameterValue","getQueryParameterValue","startState","tokenizer","$c32504680279ade3$export$250ee83618811c07","token","current","tokenPath","replaceAll","$c32504680279ade3$export$33823a2847b65fb","_text","_textLength","_currentState","_currentIndex","_currentToken","$c32504680279ade3$var$hasCurrentCharacter","$c32504680279ade3$var$readWhile","character","characterCode","$c32504680279ade3$export$307ce473717c3895","$c32504680279ade3$var$readWhileLetterOrDigit","$c32504680279ade3$var$nextScheme","schemeOrHost","$c32504680279ade3$var$readUntilCharacter","$c32504680279ade3$var$getCurrentCharacter","$c32504680279ade3$var$peekCharacters","$c32504680279ade3$var$nextSchemeOrHost","$c32504680279ade3$var$nextCharacter","$c32504680279ade3$var$nextHost","$c32504680279ade3$var$nextPort","$c32504680279ade3$var$nextPath","$c32504680279ade3$var$readRemaining","$c32504680279ade3$var$nextQuery","step","charactersToPeek","endIndex","condition","terminatingCharacters","$632689e2825b7684$export$61abde59b50deb8e","URL","$41b4edee23f4934e$export$4c00f665f0d4b443","$fad615049cbcf97c$export$88cc7cb36821e698","opts","requestOptions","tracingOptions","__rest","$fc7e50515860e7b4$export$eca146def0f3ecb3","credentials","requestPolicyFactories","_withCredentials","_httpClient","httpClient","$4Huhp","getCachedDefaultHttpClient","_requestPolicyOptions","$1JMla","RequestPolicyOptions","httpPipelineLogger","$jpHtL","authPolicyFactory","wrappedPolicyFactory","bearerTokenPolicyFactory","serviceClient","serviceClientOptions","nextPolicy","createOptions","credentialScopes","baseUri","$8vM6X","$fc7e50515860e7b4$var$getCredentialScopes","$kpDJr","bearerTokenAuthenticationPolicy","signRequest","$l4fQd","signingPolicy","factories","generateClientRequestIdHeader","$3fyQG","generateClientRequestIdPolicy","clientRequestIdHeaderName","userAgentHeaderName","$fc7e50515860e7b4$var$getValueOrFunctionResult","$f1XXL","getDefaultUserAgentHeaderName","userAgentHeaderValue","userAgent","getDefaultUserAgentValue","userAgentPolicy","$ibjDj","redirectPolicy","$fhjCB","rpRegistrationPolicy","rpRegistrationRetryTimeout","noRetryPolicy","$6huca","exponentialRetryPolicy","$rh1dO","systemErrorRetryPolicy","$g271F","throttlingRetryPolicy","$jYdRh","deserializationPolicy","deserializationContentTypes","proxyPolicy","$3Tovl","logPolicy","$fc7e50515860e7b4$var$createDefaultRequestPolicyFactories","newRequestPolicyFactories","_requestPolicyFactories","httpRequest","$fA2FI","isWebResourceLike","WebResource","httpPipeline","operationArguments","serializerOptions","httpMethod","urlParameters","urlParameter","urlParameterValue","$fc7e50515860e7b4$var$getOperationArgumentValueFromParameter","$dxo9n","getPathStringFromParameter","skipEncoding","queryParameter","collectionFormat","$63y6L","QueryCollectionFormat","Multi","Ssv","Tsv","requestContentType","headerParameters","headerParameter","customHeaders","customHeaderName","rawResponse","sendRequestError","bodyMapper","requestBodyParameterPathString","isStream","MapperType","Stream","$fc7e50515860e7b4$var$getXmlValueWithNamespace","Sequence","$OwRe3","stringifyXML","prepareXMLRootList","mediaType","formDataParameters","formDataParameter","formDataParameterValue","formDataParameterPropertyName","$fc7e50515860e7b4$export$d41791bb388bd485","$1rPdh","getStreamResponseStatusCodes","details","$fc7e50515860e7b4$export$10ef1a07d9cdec62","responses","cb","parsedBody","defaultValueCreator","parameter","$fc7e50515860e7b4$export$8a84008cab4fa947","parameterPath","parameterMapper","propertySearchResult","$fc7e50515860e7b4$var$getPropertyFromParameterPath","propertyFound","useDefaultValue","propertyValue","parameterPathString","getPathStringFromParameterPath","propertyPath","propertyPathString","parameterPathPart","responseSpec","parsedHeaders","addOperationResponse","readableStreamBody","isPageableResponse","arrayResponse","key1","isPrimitiveType","$e89e5ee51fcc3f02$export$ac090ac7c9014334","parsingOptions","$e89e5ee51fcc3f02$export$49b4f1f8b99150f3","$e89e5ee51fcc3f02$export$2aa45d9cd8df2d17","$e89e5ee51fcc3f02$export$c572321813cb6ae","$e89e5ee51fcc3f02$export$a8659296e142885b","expectedContentTypes","json","xml","BaseRequestPolicy","requestPolicyOptions","jsonContentTypes","xmlContentTypes","_nextPolicy","operationResponse","errorHandler","msg","errCode","contentComponents","component","parseXML","$e89e5ee51fcc3f02$var$parse","parsedResponse","$e89e5ee51fcc3f02$var$shouldDeserializeResponse","$e89e5ee51fcc3f02$var$getOperationResponse","shouldReturnResponse","isSuccessByStatus","expectedStatusCodes","$e89e5ee51fcc3f02$var$isOperationSpecEmpty","isError","errorResponseSpec","initialErrorMessage","defaultBodyMapper","defaultHeadersMapper","headersMapper","parsedError","valueToDeserialize","internalError","defaultError","$e89e5ee51fcc3f02$var$handleErrorResponse","innerError","$e89e5ee51fcc3f02$export$dcf06a38f0488375","$143f7dc97c658a96$export$aa556203b6604084","_options","shouldLog","$143f7dc97c658a96$export$c4ed402bcd9cdc8","_logger","$8L32I","HttpPipelineLogLevel","OFF","minimumLogLevel","$660512bad89f19d0$export$5ccc9c2911bb6cad","self","DOMParser","Node","XMLSerializer","$097e286fdaab759f$var$doc","implementation","createDocument","$097e286fdaab759f$var$parser","$097e286fdaab759f$export$eacefc55fad2867e","dom","parseFromString","parserErrors","getElementsByTagName","$097e286fdaab759f$var$errorNS","namespaceURI","ignored","$097e286fdaab759f$var$getErrorNamespace","innerHTML","$097e286fdaab759f$var$throwIfError","$097e286fdaab759f$var$domToObject","childNodes","childNodeCount","firstChildNode","onlyChildTextValue","nodeType","TEXT_NODE","nodeValue","elementWithAttributes","attributes","$097e286fdaab759f$var$isElement","hasAttributes","$097e286fdaab759f$var$asElementWithAttributes","attr","nodeName","child","childObject","$097e286fdaab759f$var$serializer","$097e286fdaab759f$export$746eb2ada42c6647","content","$097e286fdaab759f$var$buildNode","serializeToString","$097e286fdaab759f$var$buildAttributes","attrs","createAttribute","elem","createElement","textContent","arrayElem","setNamedItem","appendChild","$35fea000ced0778c$export$9f26c198f07946d5","enable","$35fea000ced0778c$export$72a9d8f436ec30a3","keepAliveOptions","$35fea000ced0778c$export$d5bd76f2e3c89765","$d3c87bc9ca4b64d4$var$allowedRedirect","$d3c87bc9ca4b64d4$export$137846c432f31ee5","handleRedirects","maxRetries","$d3c87bc9ca4b64d4$export$aec739cfb985bd48","maximumRetries","$d3c87bc9ca4b64d4$export$ae5a2b21bc98c32f","$d3c87bc9ca4b64d4$var$handleRedirect","policy","currentRetries","locationHeader","builder","$492bc0bee386a33e$export$56412ee12c2689b3","$492bc0bee386a33e$export$ea4ad9056bda1d5f","retryCount","retryInterval","maxRetryInterval","$492bc0bee386a33e$export$4ef8690559413cbb","$492bc0bee386a33e$export$27a9180213c56535","$io0Se","DEFAULT_CLIENT_RETRY_COUNT","retryDelayInMs","DEFAULT_CLIENT_RETRY_INTERVAL","maxRetryDelayInMs","DEFAULT_CLIENT_MAX_RETRY_INTERVAL","isNumber","$492bc0bee386a33e$var$retry","retryData","requestError","updateRetryData","minRetryInterval","isAborted","shouldRetry","responseParam","$chWXl","$jB6jv","delay","$d62b256300f17cff$export$dd29bb5add950245","$d62b256300f17cff$export$8f297b82f45034be","$d62b256300f17cff$export$ff79adadd31eebee","$d62b256300f17cff$export$28a9a823898809c6","$d62b256300f17cff$export$7e4aa119212bc614","$d62b256300f17cff$export$7bfea3c3d460ecd8","retryLimit","predicate","$d62b256300f17cff$export$7cae107eb5ad3455","retryOptions","incrementDelta","pow","min","$e4465ec39727df52$export$1391212d75b2ee65","delayInMs","onAborted","rejectOnAbort","abortErrorMsg","removeListeners","$aX4qD","isDefined","$7f92d984450973fd$export$4e62c701997796c1","thing","$e22214238d9e8572$export$af88d00dbe7f521","createClientLogger","$603362c67d578264$var$registeredLoggers","$603362c67d578264$var$logLevelFromEnv","$kjyEk","$603362c67d578264$var$azureLogLevel","$603362c67d578264$export$e8fb5f2ce3b591d","$89P5J","$603362c67d578264$var$AZURE_LOG_LEVELS","$603362c67d578264$var$isAzureLogLevel","enabledNamespaces","$603362c67d578264$var$shouldEnable","namespace","$603362c67d578264$export$c622e99c0ce7b1c9","console","$603362c67d578264$var$levelMap","$603362c67d578264$export$6817aa89e2fe44fd","clientRootLogger","extend","$603362c67d578264$var$patchLogMethod","$603362c67d578264$var$createLogger","disable","$5f06cbb1e3ce579f$var$debugEnvVariable","$5f06cbb1e3ce579f$var$enabledString","$5f06cbb1e3ce579f$var$enabledNamespaces","$5f06cbb1e3ce579f$var$skippedNamespaces","$5f06cbb1e3ce579f$var$debuggers","$5f06cbb1e3ce579f$var$enable","$5f06cbb1e3ce579f$var$debugObj","$5f06cbb1e3ce579f$var$createDebugger","$5f06cbb1e3ce579f$var$enabled","$iLSsG","namespaces","wildcard","namespaceList","ns","ns1","enabled","skipped","enabledNamespace","newDebugger","$5f06cbb1e3ce579f$var$destroy","$5f06cbb1e3ce579f$var$extend","$5f06cbb1e3ce579f$export$2e2bcd8739ae039","$daa6dcb6f15bd217$export$bef1f36f5486a6a3","firstArg","warn","debug","$2d59843d57100c2d$export$c96ba9e66d66ee29","loggingOptions","$2d59843d57100c2d$export$79cf113ee90d87d3","sanitizer","logRequest","logResponse","$9db11727a20bcbaf$export$173afac482274412","$9db11727a20bcbaf$export$355bf455adcf1a72","$10e009e9324fcf3d$export$f7cbf195dc7f19","$a6f9e212bc80f660$export$59ba6af2e517603a","castCredential","getToken","$af15766a2dccdbfc$export$dffdfa7f4b379564","$fJFwJ","getDefaultUserAgentKey","$af15766a2dccdbfc$export$84b02e984c81382e","runtimeInfo","platformSpecificData","getPlatformSpecificData","telemetryInfo","keySeparator","valueSeparator","$af15766a2dccdbfc$var$getUserAgentString","$af15766a2dccdbfc$export$df2ab2ef63bad35a","userAgentData","$af15766a2dccdbfc$export$a8fd1e930b54aad5","addUserAgentHeader","$b74b456028f37efc$export$a67fb4bcfaba3c88","$b74b456028f37efc$export$87cd6e7d375c628f","oscpu","platform","$468d7b0a987a74a4$export$22bca9f2e6803072","$edc4f65def311d1b$export$52bca39539a4d010","forcedRefreshWindowInMs","retryIntervalInMs","refreshWindowInMs","$edc4f65def311d1b$var$createTokenCycler","tokenCyclerOptions","refreshWorker","cycler","isRefreshing","shouldRefresh","expiresOnTimestamp","mustRefresh","refresh","getTokenOptions","getAccessToken","timeoutInMs","tryGetAccessToken","finalToken","$edc4f65def311d1b$var$beginRefresh","_token","reason","tokenOptions","$edc4f65def311d1b$export$e5acbbd47d7d0b35","BearerTokenAuthenticationPolicy","webResource","$2b7876bbbc44ee97$var$DisbleResponseDecompressionNotSupportedInBrowser","$2b7876bbbc44ee97$export$a0d3e6ba856766d4","$25ddce0c5db2ddfb$export$c588b7f6ef3f1544","requestIdHeaderName","$25ddce0c5db2ddfb$export$e5d7283dd0b5927a","_requestIdHeaderName","$36c2aa8876bef34d$var$cachedHttpClient","$36c2aa8876bef34d$export$d93b5f299dd18102","$cwvcn","XhrHttpClient","$41fc137a9cd0d2ff$export$fb7e2fcfb4c00771","$41fc137a9cd0d2ff$var$NdJsonPolicy","$dbd960c435ff42f6$var$proxyNotSupportedInBrowser","$dbd960c435ff42f6$export$a59f045a6868232f","_proxyUrl","$dbd960c435ff42f6$export$c8ba111c8b5cde39","_proxySettings","$b1f7a9ffdc59b4f5$export$6335c2ff8904478a","retryTimeout","$b1f7a9ffdc59b4f5$export$fa31a5d4221454d7","_retryTimeout","rpName","matchRes","$b1f7a9ffdc59b4f5$var$checkRPNotRegisteredError","urlPrefix","$b1f7a9ffdc59b4f5$var$extractSubscriptionUrl","provider","originalRequest","postUrl","getUrl","reqOptions","$b1f7a9ffdc59b4f5$var$getRequestEssentials","$b1f7a9ffdc59b4f5$var$getRegistrationStatus","$b1f7a9ffdc59b4f5$var$registerRP","registrationStatus","$b1f7a9ffdc59b4f5$var$registerIfNeeded","reuseUrlToo","registrationState","$f566426b87a12706$export$fdb34e2605e8bcdf","authenticationProvider","$f566426b87a12706$export$7b7385c65d76f81d","nextRequest","$051fb94a932bb077$export$e41bcf10d1f4d64","$051fb94a932bb077$export$481ff8b6d764a521","DEFAULT_CLIENT_MIN_RETRY_INTERVAL","$051fb94a932bb077$var$retry","nestedErr","$bac2486a6ed78954$var$StatusCodes","$bac2486a6ed78954$export$e497b744d0faff7c","$bac2486a6ed78954$export$3bad17375200e1a6","$bac2486a6ed78954$var$StandardAbortMessage","_handleResponse","numberOfRetries","_defaultResponseHandler","httpResponse","retryAfterHeader","parseRetryAfterHeader","$lSiY2","DEFAULT_CLIENT_MAX_RETRY_COUNT","retryAfterInSeconds","parseDateRetryAfterHeader","diff","$fecd5aaa16f76b73$export$75f50f68723ee486","$648037cea746520a$var$createSpan","$aQbJQ","createSpanFunction","packagePrefix","$648037cea746520a$export$3ac4e45166506a4b","$648037cea746520a$export$60a896f8891f9f71","tryCreateSpan","tryProcessResponse","tryProcessError","SpanKind","CLIENT","isRecording","namespaceFromContext","getValue","setAttribute","setAttributes","spanContext","traceParentHeader","$jBgZX","getTraceParentHeader","isSpanContextValid","traceState","serviceRequestId","OK","$7e47ddb34412ca5a$export$ce59780c1dab3023","operationName","operationOptions","tracer","getTracer","INTERNAL","spanName","azureTracingDisabledValue","$7e47ddb34412ca5a$export$761e08bf207c8add","$9cmvi","wrapSpanContext","$gwur0","INVALID_SPAN_CONTEXT","startSpan","newSpanOptions","newTracingOptions","setSpan","context","active","$ac1521f309b3df3d$export$4da4ea8145910e8b","$ac1521f309b3df3d$export$8ab2f2e6ee8ed0a8","$ac1521f309b3df3d$export$a078c61943f9dbbe","$ac1521f309b3df3d$export$e4373b9a2c09216c","$ac1521f309b3df3d$export$6d9a409579229900","$ac1521f309b3df3d$export$1e28dd9b5d01db83","$6b26b0d919da0068$export$a078c61943f9dbbe","$c8e5e","ContextAPI","getInstance","$6b26b0d919da0068$export$357889f174732d38","$eWSph","TraceAPI","$eXg7Q","PropagationAPI","$6Z8kd","DiagAPI","$8d5128149d5cfd94$var$API_NAME","$8d5128149d5cfd94$var$NOOP_CONTEXT_MANAGER","$8UOAV","NoopContextManager","$8d5128149d5cfd94$export$4148866f0a453927","_instance","setGlobalContextManager","contextManager","$fm1ax","registerGlobal","_getContextManager","with","fn","$8d5128149d5cfd94$var$__spreadArray","getGlobal","unregisterGlobal","$67daccb289228955$export$a27e5df35d1539a6","$5AofO","ROOT_CONTEXT","_context","$67daccb289228955$var$__spreadArray","$411320e1da10ff3d$export$b8c322c5a7cfce78","description","$411320e1da10ff3d$export$78df28f9b2f9a7dc","BaseContext","parentContext","_currentContext","setValue","deleteValue","$b2d9d13e726c481d$var$major","$kq3MG","VERSION","$b2d9d13e726c481d$var$GLOBAL_OPENTELEMETRY_API_KEY","$b2d9d13e726c481d$var$_global","$3k7EH","_globalThis","$b2d9d13e726c481d$export$d586ae880b433238","diag","allowOverride","api","stack","$b2d9d13e726c481d$export$a4e55266d2135a7f","globalVersion","$f14TP","isCompatible","$b2d9d13e726c481d$export$d42ac835f38d1fb2","$26b92d9057f09375$export$5c524ddf7208c00c","globalThis","$parcel$global","$edd92bd5ed3d12cd$export$a4ad2735b021c132","$aeeabfecb8c43ff4$var$re","$aeeabfecb8c43ff4$export$7fc0d8c3ab188c4c","ownVersion","acceptedVersions","rejectedVersions","myVersionMatch","ownVersionParsed","_reject","_accept","globalVersionMatch","globalVersionParsed","$aeeabfecb8c43ff4$export$a5733a4d26a1ec61","$515ee5c32a70b2b2$export$5c8937ffc688cfd3","_logProxy","funcName","setLogger","$mcVbw","DiagLogLevel","INFO","oldLogger","newLogger","$hb2Mu","createLogLevelDiagLogger","createComponentLogger","$19OTn","DiagComponentLogger","$0d7e1bd3a658b161$export$b4bccc12f5b13129","props","_namespace","$0d7e1bd3a658b161$var$logProxy","unshift","$c8159f058a092f2c$export$9a9cc475abb19689","maxLevel","_filterFunc","theLevel","theFunc","ALL","WARN","DEBUG","VERBOSE","$042c1418c9626221$export$b7d7b4c0f3c95263","$ae20af81b47909fe$var$API_NAME","$ae20af81b47909fe$export$2cccde6fcc7b568a","_proxyTracerProvider","$anRkN","ProxyTracerProvider","$dbOZ9","deleteSpan","$ka1NJ","getSpan","getSpanContext","setSpanContext","setGlobalTracerProvider","success","setDelegate","getTracerProvider","$78f56c784e7c1cff$var$NOOP_TRACER_PROVIDER","NoopTracerProvider","$78f56c784e7c1cff$export$4137aabcb4254962","getDelegateTracer","$8GCiD","ProxyTracer","getDelegate","_delegate","delegate","$652ff47926e88b55$var$NOOP_TRACER","NoopTracer","$652ff47926e88b55$export$df2c38268c6bb6b3","_provider","_getTracer","startActiveSpan","_name","_fn","Reflect","$0391c1963efeb814$var$context","$0391c1963efeb814$export$714c1036cabcd223","root","$a3mWC","NonRecordingSpan","parentFromContext","arg2","arg3","arg4","ctx","contextWithSpanSet","$ead6237849042dac$var$SPAN_KEY","createContextKey","$ead6237849042dac$export$246e04ba06066af1","$ead6237849042dac$export$8ab2f2e6ee8ed0a8","$ead6237849042dac$export$a6bbfe9a17f7941c","$ead6237849042dac$export$c90bf5428c14cdb1","$ead6237849042dac$export$1a635f8f0b912781","$751bfb7d16d79d70$export$972d28f7c6a8c6c7","_spanContext","_key","_value","_attributes","addEvent","_status","updateName","_endTime","recordException","_exception","_time","$c0773e3017d46dd4$export$55cc39fb0d4bb4c0","$c0773e3017d46dd4$export$22be96e88d95e128","$c0773e3017d46dd4$export$8591e4c852b66703","traceId","spanId","traceFlags","$83hor","TraceFlags","$5dcc187a863bca89$export$bf9049ad2b0883ff","$99a3da0b8477e363$var$VALID_TRACEID_REGEX","$99a3da0b8477e363$var$VALID_SPANID_REGEX","$99a3da0b8477e363$export$e4373b9a2c09216c","INVALID_TRACEID","INVALID_SPANID","$99a3da0b8477e363$export$c19cc0f1911bdb85","$df5db4b932dc665b$export$87d8e93756f9e86e","_version","$iZYxv","$ae331592dad650ec$var$API_NAME","$ae331592dad650ec$var$NOOP_TEXT_MAP_PROPAGATOR","$kLFWv","NoopTextMapPropagator","$ae331592dad650ec$export$471eda0a6213cac9","createBaggage","$4ImBy","getBaggage","$2Pw3z","setBaggage","deleteBaggage","setGlobalPropagator","propagator","inject","carrier","setter","$7bUAK","defaultTextMapSetter","_getGlobalPropagator","extract","getter","defaultTextMapGetter","fields","$f1e8bb5930fe5111$export$8356c7eb3af7963b","_carrier","$53c5756a2197b4fb$export$a0f575f55f38720a","$53c5756a2197b4fb$export$f70f1d111fccf1c1","$20f935f8b2b2bb5d$var$BAGGAGE_KEY","$20f935f8b2b2bb5d$export$f3bffa0b5dd10d1e","$20f935f8b2b2bb5d$export$adc9ca19eab3f500","baggage","$20f935f8b2b2bb5d$export$4ca3a8a743c9f633","$36ecce552d4bbf35$export$1034a425c7384452","$bmtFv","BaggageImpl","$8458c3575773417c$export$b8c511fa1a5f4987","_entries","getEntry","entry","getAllEntries","from","setEntry","newBaggage","removeEntry","removeEntries","keys_1","$47a64c29f401437a$export$92dd2fe8ddb5cb7","$0cc84bf49b6d9783$export$94df7a7a96a92f7b","$566044c3d0fbdc36$export$4da4ea8145910e8b","$ed982b21ea27c702$export$1e28dd9b5d01db83","$18346cd4f072ded8$export$d3178722a49c4d52","rawTraceState","_internalState","_parse","_clone","unset","_keys","reduce","agg","reverse","part","listMember","$2a7KV","validateValue","$1932881cfa80ebee$var$VALID_KEY_REGEX","$1932881cfa80ebee$var$VALID_VALUE_BASE_REGEX","$1932881cfa80ebee$var$INVALID_VALUE_COMMA_EQUAL_REGEX","$1932881cfa80ebee$export$469cc9c479301ba6","$1932881cfa80ebee$export$b76e9316566cc26e","$e44ea889c776cdb3$export$106caaa113b6db24","missingFields","hexFlags","$eb6d5d92fd042929$export$8b2af884909d32a5","client","blobServiceProperties","$lxc7z","operationOptionsToRequestOptionsBase","sendOperationRequest","$eb6d5d92fd042929$var$setPropertiesOperationSpec","$eb6d5d92fd042929$var$getPropertiesOperationSpec","$eb6d5d92fd042929$var$getStatisticsOperationSpec","$eb6d5d92fd042929$var$listContainersSegmentOperationSpec","keyInfo","$eb6d5d92fd042929$var$getUserDelegationKeyOperationSpec","$eb6d5d92fd042929$var$getAccountInfoOperationSpec","submitBatch","contentLength","multipartContentType","$eb6d5d92fd042929$var$submitBatchOperationSpec","$eb6d5d92fd042929$var$filterBlobsOperationSpec","$eb6d5d92fd042929$var$xmlSerializer","$4vfq7","ServiceSetPropertiesHeaders","StorageError","ServiceSetPropertiesExceptionHeaders","$abn7y","restype","comp","timeoutInSeconds","accept","BlobServiceProperties","ServiceGetPropertiesHeaders","ServiceGetPropertiesExceptionHeaders","accept1","BlobServiceStatistics","ServiceGetStatisticsHeaders","ServiceGetStatisticsExceptionHeaders","comp1","ListContainersSegmentResponse","ServiceListContainersSegmentHeaders","ServiceListContainersSegmentExceptionHeaders","comp2","UserDelegationKey","ServiceGetUserDelegationKeyHeaders","ServiceGetUserDelegationKeyExceptionHeaders","comp3","ServiceGetAccountInfoHeaders","ServiceGetAccountInfoExceptionHeaders","restype1","ServiceSubmitBatchHeaders","ServiceSubmitBatchExceptionHeaders","comp4","FilterBlobSegment","ServiceFilterBlobsHeaders","ServiceFilterBlobsExceptionHeaders","comp5","$347604d06887703b$export$4259e3f5a82dbcb0","blobAnalyticsLogging","hourMetrics","minuteMetrics","cors","defaultServiceVersion","deleteRetentionPolicy","staticWebsite","$347604d06887703b$export$f13b02179817fff","deleteProperty","read","write","retentionPolicy","$347604d06887703b$export$9ce73b69e60c4fbd","days","$347604d06887703b$export$ed9166ec0f465b5e","includeAPIs","$347604d06887703b$export$1b686571b2e8ccbf","allowedOrigins","allowedMethods","allowedHeaders","exposedHeaders","maxAgeInSeconds","$347604d06887703b$export$848f1ca5f57d9fd9","indexDocument","errorDocument404Path","defaultIndexDocumentPath","$347604d06887703b$export$697502632950e9d3","$347604d06887703b$export$d68a391d8628904d","geoReplication","$347604d06887703b$export$209775f0703749e1","lastSyncOn","$347604d06887703b$export$873e594684c035a8","serviceEndpoint","$347604d06887703b$export$f00926cc691dad44","deleted","$347604d06887703b$export$fa098234f0650afd","lastModified","etag","leaseStatus","leaseState","leaseDuration","publicAccess","hasImmutabilityPolicy","hasLegalHold","defaultEncryptionScope","preventEncryptionScopeOverride","deletedOn","remainingRetentionDays","isImmutableStorageWithVersioningEnabled","$347604d06887703b$export$989837349c87a484","$347604d06887703b$export$730c97ccd46427bc","$347604d06887703b$export$cbc98730f73653f0","$347604d06887703b$export$ff3b8c7b1098b505","$347604d06887703b$export$4d9beab9dba32bb8","$347604d06887703b$export$549c520ea570c2d7","$347604d06887703b$export$cb0edd27bc698e6e","accessPolicy","$347604d06887703b$export$d6d948058405d011","$347604d06887703b$export$60f1987a42627948","$347604d06887703b$export$45c4bd1f9ba65311","blobItems","$347604d06887703b$export$8a628cd6477c18a4","snapshot","versionId","isCurrentVersion","blobTags","objectReplicationMetadata","hasVersionsOnly","$347604d06887703b$export$9d88596b171a9ffa","encoded","$347604d06887703b$export$b8fc653eab4de9d4","createdOn","contentEncoding","contentLanguage","contentMD5","contentDisposition","cacheControl","blobSequenceNumber","blobType","copyId","copyStatus","copySource","copyProgress","copyCompletedOn","copyStatusDescription","serverEncrypted","incrementalCopy","destinationSnapshot","accessTier","accessTierInferred","archiveStatus","customerProvidedKeySha256","encryptionScope","accessTierChangedOn","tagCount","isSealed","rehydratePriority","lastAccessedOn","immutabilityPolicyExpiresOn","immutabilityPolicyMode","legalHold","$347604d06887703b$export$9436e4b35165a692","delimiter","$347604d06887703b$export$f7761d112c9eb232","blobPrefixes","$347604d06887703b$export$e5779277e174b4f3","$347604d06887703b$export$83c6532d7571ec00","committed","uncommitted","latest","$347604d06887703b$export$4ee5952cc635fca8","committedBlocks","uncommittedBlocks","$347604d06887703b$export$d96a8827a60d6b69","$347604d06887703b$export$12ae0b2ee85cd780","pageRange","clearRange","$347604d06887703b$export$f85c34974132db42","start","$347604d06887703b$export$3805da6b5cf0fbf3","$347604d06887703b$export$737b2593018d8caa","queryType","expression","inputSerialization","outputSerialization","$347604d06887703b$export$fe3392b712a44df6","format","$347604d06887703b$export$720d285388031eeb","delimitedTextConfiguration","jsonTextConfiguration","arrowConfiguration","parquetTextConfiguration","$347604d06887703b$export$36701e782135a739","columnSeparator","fieldQuote","recordSeparator","escapeChar","headersPresent","$347604d06887703b$export$5f971921fd430f55","$347604d06887703b$export$512fe758c9f383a7","schema","$347604d06887703b$export$5a6d215f1ebebd55","precision","scale","$347604d06887703b$export$e52d1b1ae602fcd7","$347604d06887703b$export$4cd15193b6a70ce6","$347604d06887703b$export$b09a52cac48b5e0b","$347604d06887703b$export$8104c914ca6970f0","$347604d06887703b$export$36ef20675d869c03","$347604d06887703b$export$5b7e8522ae5a9a4b","$347604d06887703b$export$39ddd67c89029f64","$347604d06887703b$export$188136aa0e924dcf","$347604d06887703b$export$a7329c955f46d493","$347604d06887703b$export$d4fae2abeb4b3c52","$347604d06887703b$export$4d353489f4a6674b","skuName","accountKind","isHierarchicalNamespaceEnabled","$347604d06887703b$export$84c3160b49f6f89d","$347604d06887703b$export$641b3f695d8b37d5","$347604d06887703b$export$8f0681e0a6312cae","$347604d06887703b$export$21a9623f9b8b63f","$347604d06887703b$export$f8970c19fa7a79f2","$347604d06887703b$export$e78d94f460893044","$347604d06887703b$export$d1efed2ac91a10ff","$347604d06887703b$export$87399513e749fb27","blobPublicAccess","denyEncryptionScopeOverride","$347604d06887703b$export$4483e1d66cf11ad6","$347604d06887703b$export$647c01dd671bf710","$347604d06887703b$export$f659949d1e181053","$347604d06887703b$export$398161ec47b50c7e","$347604d06887703b$export$60e3a3330c0d81ae","$347604d06887703b$export$75f14d145ce5a895","$347604d06887703b$export$df52775da9205fea","$347604d06887703b$export$fe906fc5cdc1a43f","$347604d06887703b$export$8972a112e70b4b4d","$347604d06887703b$export$9ae856ee7a967008","$347604d06887703b$export$be1935524c03a30e","$347604d06887703b$export$282505507bd29e2a","$347604d06887703b$export$5bf336338fdf8d4a","$347604d06887703b$export$4178838965675e28","$347604d06887703b$export$c5412e7990c19893","$347604d06887703b$export$b7f9dc949a5e8376","$347604d06887703b$export$4e587fc79cde1966","$347604d06887703b$export$491ce6e032314995","$347604d06887703b$export$a92ae94bbd952c97","$347604d06887703b$export$beee9b72130554f1","$347604d06887703b$export$d5ccb61988fc3cc6","$347604d06887703b$export$b18d71d5c838ebba","$347604d06887703b$export$934e0b3895da8262","$347604d06887703b$export$66e5079c38f60687","leaseTime","$347604d06887703b$export$febb43b114b8bdad","$347604d06887703b$export$1b71c9c56c95e5f7","$347604d06887703b$export$a3d6e630cb71718","$347604d06887703b$export$9e919b72e4917277","$347604d06887703b$export$f555eac9d25bdea","$347604d06887703b$export$783bb852c2b8593e","$347604d06887703b$export$271523e84ee49c1b","$347604d06887703b$export$1c7d4f439cb7b76e","$347604d06887703b$export$c98f1b3ce7714e05","$347604d06887703b$export$e184065203bbe37e","objectReplicationPolicyId","objectReplicationRules","contentRange","acceptRanges","blobCommittedBlockCount","isServerEncrypted","encryptionKeySha256","blobContentMD5","lastAccessed","contentCrc64","$347604d06887703b$export$c7122e870c24e2a5","$347604d06887703b$export$c0ea9195a933f307","isIncrementalCopy","$347604d06887703b$export$d686168b6f37d5f6","$347604d06887703b$export$352d875a30aef980","$347604d06887703b$export$a3607bbbce48140e","$347604d06887703b$export$e3a5336a9bc97ef7","$347604d06887703b$export$4d95b6e37fa2de0f","$347604d06887703b$export$28e49586b236aa57","$347604d06887703b$export$521bb5e74d2410ab","$347604d06887703b$export$56cf94bf5d55f21","$347604d06887703b$export$6d2cea67ec093f18","$347604d06887703b$export$55f5887ec1aa7638","immutabilityPolicyExpiry","$347604d06887703b$export$64c9790ac111fec3","$347604d06887703b$export$f4f88462fc022d8b","$347604d06887703b$export$57aaf77c2b015842","$347604d06887703b$export$f94d95a188e3e244","$347604d06887703b$export$8dceeccbff029357","$347604d06887703b$export$d69a877d290fc9c0","$347604d06887703b$export$ea927eb0f49c30e4","$347604d06887703b$export$2955574a59c7f40a","$347604d06887703b$export$be77ffc0d071e70","$347604d06887703b$export$bb5c1a52ae22001","$347604d06887703b$export$b8c99ac15af78575","$347604d06887703b$export$c411bd8b9a0f699","$347604d06887703b$export$2166da6434b7f885","$347604d06887703b$export$8d637b0646e006f8","$347604d06887703b$export$44a2a8b887cacfc9","$347604d06887703b$export$18268322e1598afc","$347604d06887703b$export$92e578455a1fd1e4","$347604d06887703b$export$7c5d06b72ee9ae0f","$347604d06887703b$export$281a6ca7fa64f246","$347604d06887703b$export$7e605e841cde3ae2","$347604d06887703b$export$e04b14693b99a1cc","$347604d06887703b$export$2cca2dfe60d13e96","xMsContentCrc64","$347604d06887703b$export$950b106a5c67c2bf","$347604d06887703b$export$61211ab95578e16c","$347604d06887703b$export$93b7131c67acafb2","$347604d06887703b$export$2b0a768dc009f4a1","$347604d06887703b$export$e188322c31bf0be9","$347604d06887703b$export$b4e67afe055fb52b","$347604d06887703b$export$f806222711b5d9eb","$347604d06887703b$export$70f0f7132d76f968","copyCompletionTime","$347604d06887703b$export$222843f8586c8b8b","$347604d06887703b$export$968ffac34470fb0e","$347604d06887703b$export$3ce1608d8dd9c701","$347604d06887703b$export$507b35838ecdd23c","$347604d06887703b$export$e6bc690ab75dc5de","$347604d06887703b$export$c331016306aa6328","$347604d06887703b$export$558bfa5e3f14dfe0","$347604d06887703b$export$e3e8b65f4615ce82","$347604d06887703b$export$64317fc4d0de13b0","$347604d06887703b$export$f1743f50c40da831","$347604d06887703b$export$9a810ba72cca88d1","$347604d06887703b$export$37897f676076c079","$347604d06887703b$export$999e268a762aa3e4","$347604d06887703b$export$80572654335a6e8c","blobContentLength","$347604d06887703b$export$edcd359a134c497e","$347604d06887703b$export$40be250e9706b954","$347604d06887703b$export$7ccec5478f7a572d","$347604d06887703b$export$40f3a19c059dd5b0","$347604d06887703b$export$b593b312260a3bc1","$347604d06887703b$export$a9e7274084928b1f","$347604d06887703b$export$15558bb93f4ce4fd","$347604d06887703b$export$efb104649c8f7ba1","$347604d06887703b$export$6f9a3ae234651e4","$347604d06887703b$export$7abc4ec7db301a8c","$347604d06887703b$export$667d4a870bd017c7","$347604d06887703b$export$dc524e0e89a6df33","blobAppendOffset","$347604d06887703b$export$369918f0f25e6db4","$347604d06887703b$export$1a57b25c3bbb1d8","$347604d06887703b$export$28eebea0f29ca91f","$347604d06887703b$export$bc38d3ae3b0d7ddc","$347604d06887703b$export$cf705ff48fd2e42","$347604d06887703b$export$93a61bc874dea22f","$347604d06887703b$export$3aedf87671c5056a","$347604d06887703b$export$e4a7c4eb2da100d5","$347604d06887703b$export$17c0d004e7ff7da4","$347604d06887703b$export$954fb1c3abc73054","$347604d06887703b$export$a55344aec7dc4365","$347604d06887703b$export$a57f0c326317c07","$347604d06887703b$export$3a79a7492b4e9107","$347604d06887703b$export$33c4213b75af9be3","$347604d06887703b$export$117addb4449ac523","$347604d06887703b$export$5fdf8ff23652143","$347604d06887703b$export$a00131ce9218c2be","$769cddc42a3943b3$export$8019223850b8bf78","$769cddc42a3943b3$export$8045b089a32c825f","$769cddc42a3943b3$export$73f57eecff448cc8","$769cddc42a3943b3$export$128fa18b7194ef","$769cddc42a3943b3$export$98769f3ec74fcd50","$769cddc42a3943b3$export$1af3c925c49f37a2","$769cddc42a3943b3$export$605e2ea08b9c2971","$769cddc42a3943b3$export$83d89fbfd8236492","$769cddc42a3943b3$export$24b5117430fbc0a7","$769cddc42a3943b3$export$2f2bc9e1d998c9b1","$769cddc42a3943b3$export$768b97d6ea0f6e4e","$769cddc42a3943b3$export$f343e2546f92ee6c","$769cddc42a3943b3$export$82e9f45cca5ba907","$769cddc42a3943b3$export$ffc4d0086f1a4c9","$769cddc42a3943b3$export$98d8947f89aadd07","$769cddc42a3943b3$export$99920f638bbeb850","Csv","$769cddc42a3943b3$export$b4ede16c8f754c50","KeyInfo","$769cddc42a3943b3$export$55a03a7d096131f7","$769cddc42a3943b3$export$1307e89693851722","$769cddc42a3943b3$export$32180ef41b15b513","$769cddc42a3943b3$export$e7c0afdb5957ee6c","$769cddc42a3943b3$export$c0100fdcae152d59","$769cddc42a3943b3$export$74e682abb28398f5","$769cddc42a3943b3$export$f47394eb7577d62","$769cddc42a3943b3$export$9c59b80dda569a6e","$769cddc42a3943b3$export$ff94825b4250961c","$769cddc42a3943b3$export$dbb5e893e736e4ee","$769cddc42a3943b3$export$9bb0e144ba4929ca","$769cddc42a3943b3$export$2c1908a49113dcd6","$769cddc42a3943b3$export$aec07fc37ee05fdc","$769cddc42a3943b3$export$9617da1c20c65685","$769cddc42a3943b3$export$fc5ce0978361b9d5","$769cddc42a3943b3$export$7fe30d875b3e1ca5","$769cddc42a3943b3$export$f2c8a47ad9d7ec28","$769cddc42a3943b3$export$1de50a802befed3b","$769cddc42a3943b3$export$cf5b03f69f4edc5b","$769cddc42a3943b3$export$8a262903c018a9f9","$769cddc42a3943b3$export$908843e39bfbc7bb","$769cddc42a3943b3$export$5bff61eb924afc5a","$769cddc42a3943b3$export$a45a1e1d04d46f0f","$769cddc42a3943b3$export$3f3654a3a1de8f7c","$769cddc42a3943b3$export$7058cf03e76a9e6f","$769cddc42a3943b3$export$e44e5c89b595cf06","$769cddc42a3943b3$export$31eb53bd5b582a97","$769cddc42a3943b3$export$1f34108aa9eb96ab","$769cddc42a3943b3$export$76d6656ff7fc5f01","$769cddc42a3943b3$export$abb7654a4a89f39b","$769cddc42a3943b3$export$d704e99076aba425","$769cddc42a3943b3$export$fb75cb886ab21590","$769cddc42a3943b3$export$e76a7bf190b16f67","$769cddc42a3943b3$export$1501d36e95fda64c","$769cddc42a3943b3$export$da50a4f96c2120f0","$769cddc42a3943b3$export$22e88df9b44a7cb7","$769cddc42a3943b3$export$7d95d294aeeef093","$769cddc42a3943b3$export$c889f2fcc19dbf12","$769cddc42a3943b3$export$b8801ea43165ed7d","$769cddc42a3943b3$export$8abbc802915f4169","$769cddc42a3943b3$export$d02631cccf789723","$769cddc42a3943b3$export$97e1f64c4a01d799","$769cddc42a3943b3$export$34cbd88c55646dce","$769cddc42a3943b3$export$9632e4bbdaf78166","$769cddc42a3943b3$export$e2e7663652d2d994","$769cddc42a3943b3$export$5704971bd1bf570e","$769cddc42a3943b3$export$a4dbe9c76d310a8b","$769cddc42a3943b3$export$c7120f2d6b5d392d","$769cddc42a3943b3$export$e4104e8ef05206d9","$769cddc42a3943b3$export$cdc0ddb1efa48acd","$769cddc42a3943b3$export$db720e3cfa253eba","$769cddc42a3943b3$export$a828f524d814a4e5","$769cddc42a3943b3$export$8381649d0c9a1376","$769cddc42a3943b3$export$cf58f4bf9f83473b","$769cddc42a3943b3$export$1541f563fc3aadf3","$769cddc42a3943b3$export$33b3ca19128e73","$769cddc42a3943b3$export$b2301575204a75df","$769cddc42a3943b3$export$21a5fa2f1872ddda","$769cddc42a3943b3$export$503f7bccc4f48f6e","$769cddc42a3943b3$export$a24be954c4648da","$769cddc42a3943b3$export$66229415221806c6","$769cddc42a3943b3$export$34739e39db0307bb","$769cddc42a3943b3$export$f2395851e7e5f8b9","$769cddc42a3943b3$export$292b396b4a7eb3f9","$769cddc42a3943b3$export$3e88d138471b0bbd","$769cddc42a3943b3$export$3d7e45e746aad1fe","$769cddc42a3943b3$export$94fd0a5361354003","$769cddc42a3943b3$export$9dbe2bfcc3fd5e36","$769cddc42a3943b3$export$df61492828969833","$769cddc42a3943b3$export$8cdc7c2054e18e72","$769cddc42a3943b3$export$3b175312a7c625c2","$769cddc42a3943b3$export$12829e9655877242","$769cddc42a3943b3$export$874977547aa8415d","$769cddc42a3943b3$export$1582a1459c5c5b58","$769cddc42a3943b3$export$a9a6dadaeb5fd8f4","$769cddc42a3943b3$export$faf11b29281a475a","$769cddc42a3943b3$export$f27225d21514ae99","$769cddc42a3943b3$export$87ee8028d7bc8d95","$769cddc42a3943b3$export$52968372702aac13","$769cddc42a3943b3$export$8723c051f4133fc9","$769cddc42a3943b3$export$26f6232a97f37a42","$769cddc42a3943b3$export$664221098d43d658","$769cddc42a3943b3$export$bd862ddf50e64e1f","$769cddc42a3943b3$export$201c1586e0f2a1e0","$769cddc42a3943b3$export$d66d789848c6be52","$769cddc42a3943b3$export$eaed449e116cfa34","$769cddc42a3943b3$export$83e3a3ea6ff00bd3","QueryRequest","$769cddc42a3943b3$export$43efc87c798702a2","$769cddc42a3943b3$export$cf7fad85431b67d7","$769cddc42a3943b3$export$8b7a896ae75accbf","BlobTags","$769cddc42a3943b3$export$2d47bf03bb4bd4f7","$769cddc42a3943b3$export$8dff450462eaf041","$769cddc42a3943b3$export$4bb8740927c91cb0","$769cddc42a3943b3$export$9dd2ee36524ba5be","$769cddc42a3943b3$export$e8ed4830b8d90703","$769cddc42a3943b3$export$1b0c09e56fe46585","$769cddc42a3943b3$export$cb052dd198116c3c","$769cddc42a3943b3$export$c87f257179423fd9","$769cddc42a3943b3$export$6d84cf52e5ee1937","$769cddc42a3943b3$export$7e9f46d6dee88b2c","$769cddc42a3943b3$export$493e15a090304cfc","$769cddc42a3943b3$export$8aeccf58a6c70ec2","$769cddc42a3943b3$export$b7376fca5b7a6054","$769cddc42a3943b3$export$69a6bf5b57309d77","$769cddc42a3943b3$export$472bc51b40446458","$769cddc42a3943b3$export$456b9829db6fd6cc","$769cddc42a3943b3$export$9813f3d9f0cdc7e","$769cddc42a3943b3$export$e2a793e1858bf2b2","$769cddc42a3943b3$export$761495787b20429f","$769cddc42a3943b3$export$49a484506f372c6f","$769cddc42a3943b3$export$5d087bde0e999135","$769cddc42a3943b3$export$340be589e174076","$769cddc42a3943b3$export$aabdb88433b4a0f1","$769cddc42a3943b3$export$efe8df842bb65dce","$769cddc42a3943b3$export$ce5dad99b6e00ed3","$769cddc42a3943b3$export$e121b7707a6fdbfa","$769cddc42a3943b3$export$faa42dc22788942b","$769cddc42a3943b3$export$193b7ed39dd32321","$769cddc42a3943b3$export$dbaee55d782b7101","$769cddc42a3943b3$export$301d0af27cfbbf0a","$769cddc42a3943b3$export$b1fe13462d402b21","$769cddc42a3943b3$export$a59a0e540720c6fd","$769cddc42a3943b3$export$62a1eee3cca202aa","$769cddc42a3943b3$export$12a40731da9c9684","BlockLookupList","$769cddc42a3943b3$export$45c9504390fa74b2","$769cddc42a3943b3$export$ac32e5c97fcd34ae","$85de56a2e592e089$export$42a852a2b6b56249","$85de56a2e592e089$var$createOperationSpec","$85de56a2e592e089$var$getPropertiesOperationSpec","$85de56a2e592e089$var$deleteOperationSpec","setMetadata","$85de56a2e592e089$var$setMetadataOperationSpec","getAccessPolicy","$85de56a2e592e089$var$getAccessPolicyOperationSpec","setAccessPolicy","$85de56a2e592e089$var$setAccessPolicyOperationSpec","$85de56a2e592e089$var$restoreOperationSpec","$85de56a2e592e089$var$renameOperationSpec","$85de56a2e592e089$var$submitBatchOperationSpec","$85de56a2e592e089$var$filterBlobsOperationSpec","acquireLease","$85de56a2e592e089$var$acquireLeaseOperationSpec","releaseLease","$85de56a2e592e089$var$releaseLeaseOperationSpec","renewLease","$85de56a2e592e089$var$renewLeaseOperationSpec","breakLease","$85de56a2e592e089$var$breakLeaseOperationSpec","changeLease","proposedLeaseId","$85de56a2e592e089$var$changeLeaseOperationSpec","listBlobFlatSegment","$85de56a2e592e089$var$listBlobFlatSegmentOperationSpec","listBlobHierarchySegment","$85de56a2e592e089$var$listBlobHierarchySegmentOperationSpec","$85de56a2e592e089$var$getAccountInfoOperationSpec","$85de56a2e592e089$var$xmlSerializer","ContainerCreateHeaders","ContainerCreateExceptionHeaders","restype2","access","ContainerGetPropertiesHeaders","ContainerGetPropertiesExceptionHeaders","ContainerDeleteHeaders","ContainerDeleteExceptionHeaders","ifModifiedSince","ifUnmodifiedSince","ContainerSetMetadataHeaders","ContainerSetMetadataExceptionHeaders","comp6","ContainerGetAccessPolicyHeaders","ContainerGetAccessPolicyExceptionHeaders","comp7","ContainerSetAccessPolicyHeaders","ContainerSetAccessPolicyExceptionHeaders","containerAcl","ContainerRestoreHeaders","ContainerRestoreExceptionHeaders","comp8","ContainerRenameHeaders","ContainerRenameExceptionHeaders","comp9","ContainerSubmitBatchHeaders","ContainerSubmitBatchExceptionHeaders","ContainerFilterBlobsHeaders","ContainerFilterBlobsExceptionHeaders","ContainerAcquireLeaseHeaders","ContainerAcquireLeaseExceptionHeaders","comp10","action","duration","ContainerReleaseLeaseHeaders","ContainerReleaseLeaseExceptionHeaders","action1","leaseId1","ContainerRenewLeaseHeaders","ContainerRenewLeaseExceptionHeaders","action2","ContainerBreakLeaseHeaders","ContainerBreakLeaseExceptionHeaders","action3","breakPeriod","ContainerChangeLeaseHeaders","ContainerChangeLeaseExceptionHeaders","action4","proposedLeaseId1","ListBlobsFlatSegmentResponse","ContainerListBlobFlatSegmentHeaders","ContainerListBlobFlatSegmentExceptionHeaders","include1","ListBlobsHierarchySegmentResponse","ContainerListBlobHierarchySegmentHeaders","ContainerListBlobHierarchySegmentExceptionHeaders","ContainerGetAccountInfoHeaders","ContainerGetAccountInfoExceptionHeaders","$42e727cc340c8262$export$3b660928c86ff55c","download","$42e727cc340c8262$var$downloadOperationSpec","$42e727cc340c8262$var$getPropertiesOperationSpec","$42e727cc340c8262$var$deleteOperationSpec","undelete","$42e727cc340c8262$var$undeleteOperationSpec","setExpiry","expiryOptions","$42e727cc340c8262$var$setExpiryOperationSpec","setHttpHeaders","$42e727cc340c8262$var$setHttpHeadersOperationSpec","setImmutabilityPolicy","$42e727cc340c8262$var$setImmutabilityPolicyOperationSpec","deleteImmutabilityPolicy","$42e727cc340c8262$var$deleteImmutabilityPolicyOperationSpec","setLegalHold","$42e727cc340c8262$var$setLegalHoldOperationSpec","$42e727cc340c8262$var$setMetadataOperationSpec","$42e727cc340c8262$var$acquireLeaseOperationSpec","$42e727cc340c8262$var$releaseLeaseOperationSpec","$42e727cc340c8262$var$renewLeaseOperationSpec","$42e727cc340c8262$var$changeLeaseOperationSpec","$42e727cc340c8262$var$breakLeaseOperationSpec","createSnapshot","$42e727cc340c8262$var$createSnapshotOperationSpec","startCopyFromURL","$42e727cc340c8262$var$startCopyFromURLOperationSpec","copyFromURL","$42e727cc340c8262$var$copyFromURLOperationSpec","abortCopyFromURL","$42e727cc340c8262$var$abortCopyFromURLOperationSpec","setTier","tier","$42e727cc340c8262$var$setTierOperationSpec","$42e727cc340c8262$var$getAccountInfoOperationSpec","$42e727cc340c8262$var$queryOperationSpec","getTags","$42e727cc340c8262$var$getTagsOperationSpec","setTags","$42e727cc340c8262$var$setTagsOperationSpec","$42e727cc340c8262$var$xmlSerializer","BlobDownloadHeaders","BlobDownloadExceptionHeaders","range","rangeGetContentMD5","rangeGetContentCRC64","encryptionKey","encryptionAlgorithm","ifMatch","ifNoneMatch","ifTags","BlobGetPropertiesHeaders","BlobGetPropertiesExceptionHeaders","BlobDeleteHeaders","BlobDeleteExceptionHeaders","blobDeleteType","deleteSnapshots","BlobUndeleteHeaders","BlobUndeleteExceptionHeaders","BlobSetExpiryHeaders","BlobSetExpiryExceptionHeaders","comp11","BlobSetHttpHeadersHeaders","BlobSetHttpHeadersExceptionHeaders","blobCacheControl","blobContentType","blobContentEncoding","blobContentLanguage","blobContentDisposition","BlobSetImmutabilityPolicyHeaders","BlobSetImmutabilityPolicyExceptionHeaders","comp12","BlobDeleteImmutabilityPolicyHeaders","BlobDeleteImmutabilityPolicyExceptionHeaders","BlobSetLegalHoldHeaders","BlobSetLegalHoldExceptionHeaders","comp13","BlobSetMetadataHeaders","BlobSetMetadataExceptionHeaders","BlobAcquireLeaseHeaders","BlobAcquireLeaseExceptionHeaders","BlobReleaseLeaseHeaders","BlobReleaseLeaseExceptionHeaders","BlobRenewLeaseHeaders","BlobRenewLeaseExceptionHeaders","BlobChangeLeaseHeaders","BlobChangeLeaseExceptionHeaders","BlobBreakLeaseHeaders","BlobBreakLeaseExceptionHeaders","BlobCreateSnapshotHeaders","BlobCreateSnapshotExceptionHeaders","comp14","BlobStartCopyFromURLHeaders","BlobStartCopyFromURLExceptionHeaders","sourceIfModifiedSince","sourceIfUnmodifiedSince","sourceIfMatch","sourceIfNoneMatch","sourceIfTags","blobTagsString","sealBlob","legalHold1","BlobCopyFromURLHeaders","BlobCopyFromURLExceptionHeaders","xMsRequiresSync","sourceContentMD5","copySourceAuthorization","BlobAbortCopyFromURLHeaders","BlobAbortCopyFromURLExceptionHeaders","comp15","copyActionAbortConstant","BlobSetTierHeaders","BlobSetTierExceptionHeaders","comp16","tier1","BlobGetAccountInfoHeaders","BlobGetAccountInfoExceptionHeaders","BlobQueryHeaders","BlobQueryExceptionHeaders","queryRequest","comp17","BlobGetTagsHeaders","BlobGetTagsExceptionHeaders","comp18","BlobSetTagsHeaders","BlobSetTagsExceptionHeaders","transactionalContentMD5","transactionalContentCrc64","$e4e4d8dbcea9a970$export$a9e80e720eabfa05","$e4e4d8dbcea9a970$var$createOperationSpec","uploadPages","$e4e4d8dbcea9a970$var$uploadPagesOperationSpec","clearPages","$e4e4d8dbcea9a970$var$clearPagesOperationSpec","uploadPagesFromURL","sourceUrl","sourceRange","$e4e4d8dbcea9a970$var$uploadPagesFromURLOperationSpec","getPageRanges","$e4e4d8dbcea9a970$var$getPageRangesOperationSpec","getPageRangesDiff","$e4e4d8dbcea9a970$var$getPageRangesDiffOperationSpec","resize","$e4e4d8dbcea9a970$var$resizeOperationSpec","updateSequenceNumber","sequenceNumberAction","$e4e4d8dbcea9a970$var$updateSequenceNumberOperationSpec","copyIncremental","$e4e4d8dbcea9a970$var$copyIncrementalOperationSpec","$e4e4d8dbcea9a970$var$xmlSerializer","$e4e4d8dbcea9a970$var$serializer","PageBlobCreateHeaders","PageBlobCreateExceptionHeaders","PageBlobUploadPagesHeaders","PageBlobUploadPagesExceptionHeaders","body1","comp19","contentType1","accept2","pageWrite","ifSequenceNumberLessThanOrEqualTo","ifSequenceNumberLessThan","ifSequenceNumberEqualTo","PageBlobClearPagesHeaders","PageBlobClearPagesExceptionHeaders","pageWrite1","PageBlobUploadPagesFromURLHeaders","PageBlobUploadPagesFromURLExceptionHeaders","sourceContentCrc64","range1","PageList","PageBlobGetPageRangesHeaders","PageBlobGetPageRangesExceptionHeaders","comp20","PageBlobGetPageRangesDiffHeaders","PageBlobGetPageRangesDiffExceptionHeaders","prevsnapshot","prevSnapshotUrl","PageBlobResizeHeaders","PageBlobResizeExceptionHeaders","PageBlobUpdateSequenceNumberHeaders","PageBlobUpdateSequenceNumberExceptionHeaders","PageBlobCopyIncrementalHeaders","PageBlobCopyIncrementalExceptionHeaders","comp21","$c914b237e8ff7bb6$export$6b29df15b405f791","$c914b237e8ff7bb6$var$createOperationSpec","appendBlock","$c914b237e8ff7bb6$var$appendBlockOperationSpec","appendBlockFromUrl","$c914b237e8ff7bb6$var$appendBlockFromUrlOperationSpec","seal","$c914b237e8ff7bb6$var$sealOperationSpec","$c914b237e8ff7bb6$var$xmlSerializer","$c914b237e8ff7bb6$var$serializer","AppendBlobCreateHeaders","AppendBlobCreateExceptionHeaders","blobType1","AppendBlobAppendBlockHeaders","AppendBlobAppendBlockExceptionHeaders","comp22","maxSize","appendPosition","AppendBlobAppendBlockFromUrlHeaders","AppendBlobAppendBlockFromUrlExceptionHeaders","sourceRange1","AppendBlobSealHeaders","AppendBlobSealExceptionHeaders","comp23","$3373baef9936335e$export$e5ef4716d3005be0","$3373baef9936335e$var$uploadOperationSpec","putBlobFromUrl","$3373baef9936335e$var$putBlobFromUrlOperationSpec","stageBlock","blockId","$3373baef9936335e$var$stageBlockOperationSpec","stageBlockFromURL","$3373baef9936335e$var$stageBlockFromURLOperationSpec","commitBlockList","blocks","$3373baef9936335e$var$commitBlockListOperationSpec","getBlockList","listType","$3373baef9936335e$var$getBlockListOperationSpec","$3373baef9936335e$var$xmlSerializer","$3373baef9936335e$var$serializer","BlockBlobUploadHeaders","BlockBlobUploadExceptionHeaders","blobType2","BlockBlobPutBlobFromUrlHeaders","BlockBlobPutBlobFromUrlExceptionHeaders","copySourceBlobProperties","BlockBlobStageBlockHeaders","BlockBlobStageBlockExceptionHeaders","comp24","BlockBlobStageBlockFromURLHeaders","BlockBlobStageBlockFromURLExceptionHeaders","BlockBlobCommitBlockListHeaders","BlockBlobCommitBlockListExceptionHeaders","comp25","BlockList","BlockBlobGetBlockListHeaders","BlockBlobGetBlockListExceptionHeaders","$50e447659f62df19$export$c359764ed43025c","castPipeline","toServiceClientOptions","$50e447659f62df19$export$abd47b564b6c9ce2","$blUZt","$50e447659f62df19$export$e1f0bbad3853f80b","pipelineOptions","telemetryPolicy","$9bno6","TelemetryPolicyFactory","userAgentOptions","$8CXKm","tracingPolicy","telemetryString","$4Dpyh","keepAlivePolicy","$a3vt0","StorageBrowserPolicyFactory","$1Ty1s","StorageRetryPolicyFactory","$40xJE","$6O0cd","StorageBlobLoggingAllowedHeaderNames","StorageBlobLoggingAllowedQueryParameters","$3JolQ","disableResponseDecompressionPolicy","attachCredential","$agDf6","storageBearerTokenChallengeAuthenticationPolicy","audience","StorageOAuthScopes","$2eb154a0b4f9b723$export$af88d00dbe7f521","$752297d61c4a0694$export$3a8a67c1f8dc642a","$iIkxL","StorageBrowserPolicy","$d9fc459aa31ba31c$export$16e919f346b5ae38","setURLParameter","URLConstants","Parameters","FORCE_BROWSER_NO_CACHE","COOKIE","CONTENT_LENGTH","$4f479081d29b745e$export$31499a9cd224b78c","$4f479081d29b745e$export$829ef6b2e59d984d","$4f479081d29b745e$export$3572b19e64d4e4c5","$4f479081d29b745e$export$134a00c9028fc992","$4f479081d29b745e$export$de80496023426611","$4f479081d29b745e$export$2268714ff7917f22","$4f479081d29b745e$export$c07b6d4004f0e6c1","$4f479081d29b745e$export$f6c5cf36214bc931","$4f479081d29b745e$export$c36fd8fbedc7cfdc","$4f479081d29b745e$export$988a81a308ce5ea9","SIGNATURE","SNAPSHOT","VERSIONID","TIMEOUT","$4f479081d29b745e$export$b2a5bcbb15d3a60c","HTTP_ACCEPTED","HTTP_CONFLICT","HTTP_NOT_FOUND","HTTP_PRECON_FAILED","HTTP_RANGE_NOT_SATISFIABLE","$4f479081d29b745e$export$27208bcd4a3fbbd2","CONTENT_ENCODING","CONTENT_ID","CONTENT_LANGUAGE","CONTENT_MD5","CONTENT_TRANSFER_ENCODING","DATE","IF_MATCH","IF_MODIFIED_SINCE","IF_NONE_MATCH","IF_UNMODIFIED_SINCE","PREFIX_FOR_STORAGE","RANGE","X_MS_CLIENT_REQUEST_ID","X_MS_COPY_SOURCE","X_MS_DATE","X_MS_ERROR_CODE","X_MS_VERSION","$4f479081d29b745e$export$8e8f25b46f198bbf","$4f479081d29b745e$export$4a74b51ac41c8e9c","$4f479081d29b745e$export$3da729a3fbe88911","$4f479081d29b745e$export$1209d2f31c26a22a","$4f479081d29b745e$export$35f7ad19ed3f96fe","$4f479081d29b745e$export$a2398366f7c06e21","$4f479081d29b745e$export$44e08782fe66510c","$4f479081d29b745e$export$1142ecf912f25a86","$4f479081d29b745e$export$835ddebb207ef5ce","$4f479081d29b745e$export$62da0943e135b3b3","$882cafe703e143df$export$fcaabf7b2e7899d","urlParsed","$882cafe703e143df$export$e7a1deb12c55ccf9","argument","elements","$882cafe703e143df$export$e0644e9a061ded6f","matchCredentials","$882cafe703e143df$var$getProxyUriFromDevConnString","DevelopmentConnectionString","blobEndpoint","defaultEndpointsProtocol","$882cafe703e143df$require$Buffer","endpointSuffix","protocol","$882cafe703e143df$export$3bf69d9e8c65f1cf","$882cafe703e143df$export$c2b0fef28fdd69b3","$882cafe703e143df$export$123fed14dd18c6","$882cafe703e143df$export$d945b34716c152fb","$882cafe703e143df$export$6ab0c43fe39ad805","$882cafe703e143df$export$9e6f1d301873c209","$882cafe703e143df$export$6f1e609427f8a134","$882cafe703e143df$export$1cf8974c7e32873c","pathString","$882cafe703e143df$export$118a14717a41bf9c","queryParts","$882cafe703e143df$export$2fcc9e2da98a14da","withMilliseconds","dateString","$882cafe703e143df$export$74c98d8507eddc4d","blockIDPrefix","blockIndex","maxSourceStringLength","currentString","targetLength","padString","padStart","repeat","$882cafe703e143df$export$36cf564d487b5178","$882cafe703e143df$export$1391212d75b2ee65","timeInMs","aborter","abortHandler","$882cafe703e143df$export$52c2b9a0a1fb9e16","str1","str2","toLocaleLowerCase","parsedUrl","$882cafe703e143df$export$cedba6e3556bcc09","$882cafe703e143df$export$58e95a8caa05b354","tagPairs","$882cafe703e143df$export$831b255fdeb1bf46","$882cafe703e143df$export$f3feec15cd382cc9","blobTag","$882cafe703e143df$export$91d0c33cfacfa2a1","textConfiguration","escapeCharacter","hasHeaders","$882cafe703e143df$export$4b938afa1f01b766","objectReplicationRecord","orProperties","ids","policyPrefix","rule","ruleId","replicationStatus","policyIndex","findIndex","policyId","rules","$882cafe703e143df$export$15cf97bcc69283a5","$882cafe703e143df$export$b1bc7e8ba26e5c7f","httpAuthorization","$882cafe703e143df$export$2d1989927bd01740","$882cafe703e143df$export$edf5034e2b191672","internalResponse","blobItemInteral","$882cafe703e143df$export$5875d13b7042bb6a","blobPrefixInternal","$882cafe703e143df$var$decodeBase64String","$882cafe703e143df$var$ParseBoolean","$882cafe703e143df$var$ParseBlobName","blobNameInXML","$882cafe703e143df$var$ParseBlobItem","blobInXML","blobPropertiesInXML","blobProperties","$882cafe703e143df$var$ParseBlobTags","$882cafe703e143df$var$ParseBlobPrefix","blobPrefixInXML","$882cafe703e143df$var$ParseBlobTag","blobTagInXML","blobTagsInXML","$882cafe703e143df$export$49eec5a4cb1e2aae","blobArrayInXML","$882cafe703e143df$export$89ea30e0f4b9ad11","blobPrefixesInXML","$51861dfc7ca9d588$export$a143d493d941bafc","$51861dfc7ca9d588$export$f99ded8fe4b79145","$51861dfc7ca9d588$var$customInspectSymbol","$51861dfc7ca9d588$var$Buffer","$51861dfc7ca9d588$var$K_MAX_LENGTH","$51861dfc7ca9d588$var$createBuffer","arg","encodingOrOffset","$51861dfc7ca9d588$var$allocUnsafe","$51861dfc7ca9d588$var$from","string","encoding","isEncoding","$51861dfc7ca9d588$var$byteLength","actual","$51861dfc7ca9d588$var$fromString","arrayView","$51861dfc7ca9d588$var$isInstance","copy","$51861dfc7ca9d588$var$fromArrayBuffer","byteOffset","byteLength","$51861dfc7ca9d588$var$fromArrayLike","$51861dfc7ca9d588$var$fromArrayView","SharedArrayBuffer","isBuffer","$51861dfc7ca9d588$var$checked","$51861dfc7ca9d588$var$numberIsNaN","$51861dfc7ca9d588$var$fromObject","toPrimitive","$51861dfc7ca9d588$var$assertSize","mustMatch","loweredCase","$51861dfc7ca9d588$var$utf8ToBytes","$51861dfc7ca9d588$var$base64ToBytes","$51861dfc7ca9d588$var$slowToString","$51861dfc7ca9d588$var$hexSlice","$51861dfc7ca9d588$var$utf8Slice","$51861dfc7ca9d588$var$asciiSlice","$51861dfc7ca9d588$var$latin1Slice","$51861dfc7ca9d588$var$base64Slice","$51861dfc7ca9d588$var$utf16leSlice","$51861dfc7ca9d588$var$swap","$51861dfc7ca9d588$var$bidirectionalIndexOf","$51861dfc7ca9d588$var$arrayIndexOf","i1","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","$51861dfc7ca9d588$var$hexWrite","remaining","strLen","parsed","$51861dfc7ca9d588$var$utf8Write","$51861dfc7ca9d588$var$blitBuffer","$51861dfc7ca9d588$var$asciiWrite","byteArray","$51861dfc7ca9d588$var$asciiToBytes","$51861dfc7ca9d588$var$base64Write","$51861dfc7ca9d588$var$ucs2Write","units","c","hi","lo","$51861dfc7ca9d588$var$utf16leToBytes","$kuxul","fromByteArray","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","$51861dfc7ca9d588$var$MAX_ARGUMENTS_LENGTH","$51861dfc7ca9d588$var$decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","$51861dfc7ca9d588$var$typedArraySupport","poolSize","alloc","fill","$51861dfc7ca9d588$var$alloc","allocUnsafe","allocUnsafeSlow","_isBuffer","compare","x","y","list","pos","swap16","swap32","swap64","toLocaleString","equals","inspect","thisStart","thisEnd","thisCopy","targetCopy","isFinite","toJSON","_arr","ret","out","$51861dfc7ca9d588$var$hexSliceLookupTable","bytes","$51861dfc7ca9d588$var$checkOffset","ext","$51861dfc7ca9d588$var$checkInt","$51861dfc7ca9d588$var$wrtBigUInt64LE","$51861dfc7ca9d588$var$checkIntBI","BigInt","$51861dfc7ca9d588$var$wrtBigUInt64BE","$51861dfc7ca9d588$var$checkIEEE754","$51861dfc7ca9d588$var$writeFloat","littleEndian","noAssert","$9NvM5","$51861dfc7ca9d588$var$writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","$51861dfc7ca9d588$var$defineBigIntMethod","$51861dfc7ca9d588$var$validateNumber","first","last","$51861dfc7ca9d588$var$boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","$51861dfc7ca9d588$var$errors","$51861dfc7ca9d588$var$E","sym","getMessage","Base","writable","$51861dfc7ca9d588$var$addNumericalSeparator","ERR_OUT_OF_RANGE","$51861dfc7ca9d588$var$checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","received","isInteger","abs","$51861dfc7ca9d588$var$INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","$51861dfc7ca9d588$var$base64clean","src","dst","alphabet","table","i16","$51861dfc7ca9d588$var$BufferBigIntNotDefined","$eeb0961446aae8e3$export$d622b2ad8d90c771","$eeb0961446aae8e3$export$6100ba28696e12de","b64","tmp","lens","$eeb0961446aae8e3$var$getLens","validLen","placeHoldersLen","$eeb0961446aae8e3$var$Arr","$eeb0961446aae8e3$var$_byteLength","curByte","$eeb0961446aae8e3$var$revLookup","uint8","extraBytes","parts","maxChunkLength","len2","$eeb0961446aae8e3$var$encodeChunk","$eeb0961446aae8e3$var$lookup","$eeb0961446aae8e3$var$code","$eeb0961446aae8e3$var$i","$eeb0961446aae8e3$var$len","num","output","$7221566bd4d49f44$export$aafa59e2e03f2942","$7221566bd4d49f44$export$68d8715fc104d294","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","LN2","$161551aaa5cf2ab4$export$601a2b779c2eee87","$hCWKk","StorageRetryPolicy","$cd538e0a7afbf408$export$ed16dfd498f7f657","$cd538e0a7afbf408$var$DEFAULT_RETRY_OPTIONS","maxTries","retryPolicyType","EXPONENTIAL","secondaryHost","tryTimeoutInMs","$cd538e0a7afbf408$var$RETRY_ABORT_ERROR","$cd538e0a7afbf408$export$6d3576f994d2e84","attemptSendRequest","secondaryHas404","attempt","newRequest","isPrimaryRetry","setURLHost","retriableErrors","retriableError","delayTimeInMs","FIXED","$df60b09560087938$export$618ade69ca0baa94","$k8xuT","Credential","$azFUZ","AnonymousCredentialPolicy","$7b2db05c54b09e19$export$516a0395fce05939","$7R2iU","CredentialPolicy","$5b7f453048d695cf$export$d79d4d59a0aace81","$ea8e89d818fa9d1a$export$cd065b4d6c702722","$6af74879b07cca25$export$9da39257af41c937","telemetry","userAgentInfo","userAgentPrefix","libInfo","SDK_VERSION","release","$1eeT5","TelemetryPolicy","$0e52a59df95409a8$export$6b0d89090a3bb010","$843ddcfec7e666b9$var$_defaultHttpClient","$843ddcfec7e666b9$export$d93b5f299dd18102","$7799d6c8b40aac2f$var$Constants","$7799d6c8b40aac2f$var$DEFAULT_CYCLER_OPTIONS","$7799d6c8b40aac2f$var$createTokenCycler","$7799d6c8b40aac2f$var$beginRefresh","$7799d6c8b40aac2f$export$5fb5949e46eb88f","StorageBearerTokenChallengeAuthenticationPolicy","getTokenInternal","challenge","$7799d6c8b40aac2f$var$getChallenge","challengeInfo","keyValue","$7799d6c8b40aac2f$var$parseChallenge","challengeScopes","resource_id","authorization_uri","getTokenForChallenge","tokenForChallenge","$21fce89c9f47a5b9$export$77f358243d751f5c","urlOrConnectionString","credentialOrPipelineOrContainerName","_containerName","getContainerNameFromUrl","succeeded","getBlobClient","blobName","$fXlJM","BlobClient","getAppendBlobClient","AppendBlobClient","getBlockBlobClient","BlockBlobClient","getPageBlobClient","PageBlobClient","conditions","leaseAccessConditions","modifiedAccessConditions","signedIdentifiers","identifier","acl","getBlobLeaseClient","proposeLeaseId","$67TZp","BlobLeaseClient","blockBlobClient","blobClient","withVersion","ProcessBlobItems","ConvertInternalResponseOfListBlobFlat","BlobNameToString","objectReplicationSourceProperties","parseObjectReplicationRecord","ProcessBlobPrefixes","ConvertInternalResponseOfListBlobHierarchy","listBlobsFlatSegmentResponse","listBlobsFlat","includeCopy","includeSnapshots","includeVersions","includeUncommitedBlobs","includeTags","includeDeletedWithVersions","includeImmutabilityPolicy","includeLegalHold","listHierarchySegments","listBlobsHierarchySegmentResponse","listItemsByHierarchy","listBlobsByHierarchy","isIpEndpointStyle","generateSasUrl","$aphyi","generateBlobSASQueryParameters","$07e38263b286dc7e$export$2c1fd26e7de69311","$0866c7e4b3d5f2ab$export$6c85f5032e75eff9","escapeURLPath","getAccountNameFromUrl","$1Ub8n","StorageClientContext","isHttps","iEqual","getURLScheme","factory","$1633a86a399a0da6$export$68214d4158840e98","$lG11t","ServiceClient","defaultUserAgent","$4d8239b5f21dd0cf$export$47286723ded93599","$4d8239b5f21dd0cf$export$c12fda2ceea7adfb","$7939daac42dcc411$export$151938be7f1cf8b1","blobSASSignatureValues","sharedKeyCredentialOrUserDelegationKey","SERVICE_VERSION","userDelegationKeyCredential","$57BTB","UserDelegationKeyCredential","$7939daac42dcc411$var$SASSignatureValuesSanityCheckAndAutofill","verifiedPermissions","resource","snapshotTime","$ir8ub","BlobSASPermissions","$jECBJ","ContainerSASPermissions","stringToSign","$7939daac42dcc411$var$getCanonicalName","ipRange","$exfhB","ipRangeToString","signature","computeHMACSHA256","$eL1bP","SASQueryParameters","$7939daac42dcc411$var$generateBlobSASQueryParameters20201206","preauthorizedAgentObjectId","$7939daac42dcc411$var$generateBlobSASQueryParametersUDK20201206","$7939daac42dcc411$var$generateBlobSASQueryParameters20181109","$7939daac42dcc411$var$generateBlobSASQueryParametersUDK20200210","$7939daac42dcc411$var$generateBlobSASQueryParametersUDK20181109","$7939daac42dcc411$var$generateBlobSASQueryParameters20150405","deleteVersion","permanentDelete","tag","move","execute","filterByTags","$d6c154b60c613396$export$119717b739c0a5c8","blobSASPermissions","char","permissionLike","$e4efb361ef9cdc11$export$7ab9b7f2229e0c35","containerSASPermissions","$3bab00868981b40a$export$416573695ac24b52","$a950009e3a881829$export$201686abbba23d6","$abe660be4a766a19$export$93b55577e50f05dd","$abe660be4a766a19$export$5bab423c4be401d9","permissionsOrOptions","ipRangeInner","signedOid","queries","param","tryAppendQueryParameter","$475ed3dd34b987b5$export$3da3c80e1050d587","clientContext","_url","_isContainer","_containerOrBlobOperation","$5K7Cb","_leaseId","ETagNone","tagConditions","$b9dd3a47e1eac2b8$export$17f1bf20fe954ad7","blobNameOrOptions","getBlobAndContainerNamesFromUrl","blobContext","_snapshot","getURLParameter","_versionId","withSnapshot","$b9dd3a47e1eac2b8$export$71ba300fc68e58c6","$b9dd3a47e1eac2b8$export$a83a3f61863fa0f9","$b9dd3a47e1eac2b8$export$6c8757b0bdb4bca7","$keqWw","ensureCpkIfSpecified","customerProvidedKey","onProgress","$cnMeD","rangeToString","rangeGetContentCrc64","cpkInfo","wrappedRes","objectReplicationDestinationPolicyId","maxRetryRequests","DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS","$fU4Xj","BlobDownloadResponse","updatedDownloadOptions","BlobUsesCustomerSpecifiedEncryptionMsg","blobHTTPHeaders","blobHttpHeaders","toBlobTags","poller","$jEvd1","BlobBeginCopyFromUrlPoller","intervalInMs","resumeFrom","startCopyFromURLOptions","poll","sourceConditions","sourceModifiedAccessConditions","httpAuthorizationToString","sourceAuthorization","toBlobTagsString","immutabilityPolicy","expiriesOn","policyMode","toAccessTier","param1","param2","param3","param4","$b9dd3a47e1eac2b8$require$Buffer","blockSize","DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES","transferProgress","batch","$ar55s","Batch","concurrency","addOperation","chunkEnd","stream","maxRetryRequestsPerBlock","$1TxLM","streamToBuffer","do","filePath","readStreamToLocalFile","blobDownloadStream","pathComponents","modifiedAccessCondition","legalHoldEnabled","appendBlobContext","$hglC5","AppendBlob","ETagAny","appendPositionAccessConditions","sourceURL","sourceOffset","blockBlobContext","$4pSrF","BlockBlob","_blobContext","toQuerySerialization","inputTextConfiguration","outputTextConfiguration","$gwrki","BlobQueryResponse","onError","uploadSeekableInternal","browserBlob","browserData","bodyFactory","BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES","maxSingleShotSize","BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES","BLOCK_BLOB_MAX_BLOCKS","numBlocks","blockList","blockID","generateBlockID","fsStat","fsCreateReadStream","autoClose","bufferSize","DEFAULT_BLOCK_BUFFER_SIZE_BYTES","maxConcurrency","blockNum","scheduler","$cHHDL","BufferScheduler","pageBlobContext","$jEoCd","PageBlob","sequenceNumberAccessConditions","destOffset","$lgwJl","rangeResponseFromModel","prevSnapshot","sequenceNumber","$b93fee120096b55b$export$80b685e180447d66","$c074d4f6b0fa00cd$export$acdfb29eb2155fcf","originalResponse","$ebaa03c75494e2d5$export$e44d3f3c13370fcb","$ebaa03c75494e2d5$export$a980182357eaf579","$ebaa03c75494e2d5$export$a70b8ec7341ed31f","$ebaa03c75494e2d5$export$a18e54c8c8d78ec9","$ebaa03c75494e2d5$export$ab793a80c8d6781e","cpk","EncryptionAlgorithmAES25","$f7b47b2e06f42e08$export$1f38136ed5a43174","$e4e9f6379ff28fc0$export$a22a4d19bf4a9509","$cxWej","Poller","$e4e9f6379ff28fc0$var$makeBlobBeginCopyFromURLPollOperation","$e4e9f6379ff28fc0$var$cancel","isCompleted","isCancelled","$e4e9f6379ff28fc0$var$update","isStarted","prevCopyProgress","fireProgress","$e4e9f6379ff28fc0$var$toString","$9225bc5a0e725805$export$93c004f7371c840d","$9225bc5a0e725805$export$5c19461c9fb65462","$9225bc5a0e725805$export$d7350d97c7b41caa","operation","stopped","pollProgressCallbacks","promise","isStopped","isDone","update","cancel","pollOncePromise","pollOnce","clearPollOncePromise","startPolling","stopPolling","cancelOperation","cancelPromise","cancelOnce","getOperationState","getResult","$903d0c8034a34eac$export$42d7ba38d52e8d8d","iRange","$79905f30cb6fec5e$var$BatchStates","BatchStates","$79905f30cb6fec5e$export$33b107562567fc47","actives","completed","operations","Good","emitter","$7etJZ","EventEmitter","parallelExecute","nextOperation","$5440e9199a418654$var$ReflectOwnKeys","$5440e9199a418654$var$R","$5440e9199a418654$var$ReflectApply","receiver","Function","ownKeys","getOwnPropertyNames","$5440e9199a418654$var$NumberIsNaN","$5440e9199a418654$var$EventEmitter","init","errorListener","resolver","$5440e9199a418654$var$eventTargetAgnosticAddListener","handler","flags","$5440e9199a418654$var$addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","$5440e9199a418654$var$defaultMaxListeners","$5440e9199a418654$var$checkListener","$5440e9199a418654$var$_getMaxListeners","that","defaultMaxListeners","$5440e9199a418654$var$_addListener","prepend","events","existing","newListener","warned","w","$5440e9199a418654$var$onceWrapper","fired","wrapFn","$5440e9199a418654$var$_onceWrap","$5440e9199a418654$var$_listeners","unwrap","evlistener","$5440e9199a418654$var$unwrapListeners","$5440e9199a418654$var$arrayClone","$5440e9199a418654$var$listenerCount","wrapListener","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","position","originalListener","$5440e9199a418654$var$spliceOne","rawListeners","listenerCount","eventNames","$93fb5a41bb14b306$export$fa926c67c806d36a","$16151f6e0b366ff6$export$c6adc95df13c8b9e","fileReader","onloadend","ev","$16151f6e0b366ff6$export$f207b56f03ffaaa2","$16151f6e0b366ff6$export$60ca162ee47afd8","$16151f6e0b366ff6$export$ce125cf7651e99b1","$16151f6e0b366ff6$export$4277ca10550ffa98","$21535f4102291ba9$export$5fa5c7c597596470","getURLPath","serviceOrContainerContext","createBatch","$6HavX","BlobBatch","urlsOrBlobClients","credentialOrOptions","urlOrBlobClient","deleteBlob","credentialOrTier","tierOrOptions","setBlobAccessTier","batchRequest","getSubRequests","batchRequestBody","getHttpRequestBody","rawBatchResponse","$gtPvj","utf8ByteLength","getMultiPartContentType","batchResponseParser","$uqwlK","BatchResponseParser","responseSummary","parseBatchResponse","subResponses","subResponsesSucceededCount","subResponsesFailedCount","$05b75fedcbd93c5f$var$HTTP_HEADER_DELIMITER","$05b75fedcbd93c5f$export$2a43ee46dc902d8e","batchResponse","subRequests","responseBatchBoundary","perResponsePrefix","HTTP_LINE_ENDING","batchResponseEnding","HTTPURLConnection","getBodyAsText","subResponseCount","deserializedSubResponses","subResponse","deserializedSubResponse","responseLines","subRespHeaderStartFound","subRespHeaderEndFound","subRespFailed","contentId","responseLine","tokens","HTTP_VERSION_1_1","statusMessage","_request","$bff74e6b856f6a5a$export$ce016fb5ee339b0d","blobToString","$bff74e6b856f6a5a$export$ba35f6b806a3dbd4","$4dfeea333555f495$export$5a15b3d572d1df24","$4dfeea333555f495$var$InnerBatchRequest","getMultipartContentType","subRequest","assembleSubRequestFunc","$1XmIx","Mutex","lock","preAddSubRequest","postAddSubRequest","unlock","setBatchType","batchType","addSubRequestInternal","createPipeline","setAccessTier","operationCount","tempGuid","boundary","subRequestPrefix","batchRequestEnding","isAnonymousCreds","policyFactoryLength","$4dfeea333555f495$var$BatchHeaderFilterPolicyFactory","$4dfeea333555f495$var$BatchRequestAssemblePolicyFactory","Pipeline","appendSubRequestToBody","getURLPathAndQuery","BATCH_MAX_REQUEST","$4dfeea333555f495$var$BatchRequestAssemblePolicy","dummyResponse","$4dfeea333555f495$var$BatchHeaderFilterPolicy","xMsHeaderName","$16ccec555fc23e7e$var$MutexLockStatus","MutexLockStatus","$16ccec555fc23e7e$export$ca12f2943758ef55","UNLOCKED","LOCKED","onUnlockEvent","emitUnlockEvent","setImmediate","$202e704e678e2785$export$30da086435b2c598","process","accountSASPermissions","$d8b01e7f58276716$export$f4d7616d54019008","accountSASSignatureValues","parsedPermissions","parsedServices","parsedResourceTypes","$6dVgi","AccountSASResourceTypes","$48805ffb057be899$export$c65bb14aa1f16a9b","service","container","accountSASResourceTypes","$4a68c6eda70e3133$export$c6381cd49ab1b63e","file","queue","accountSASServices"],"version":3,"file":"index.efa04c1d.js.map"}