// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"8uF9k":[function(require,module,exports) {
"use strict";
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "a5c1076332d8f19e";
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                var oldDeps = modules[asset.id][1];
                for(var dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    var id = oldDeps[dep];
                    var parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    var modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        var deps = modules[id1][1];
        var orphans = [];
        for(var dep in deps){
            var parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach(function(id) {
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    var parents = getParents(module.bundle.root, id);
    var accepted = false;
    while(parents.length > 0){
        var v = parents.shift();
        var a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            var p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push.apply(parents, _toConsumableArray(p));
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"4YIBm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _msalBrowser = require("@azure/msal-browser");
var _storageBlob = require("@azure/storage-blob");
var _dbJson = require("./db.json");
var _dbJsonDefault = parcelHelpers.interopDefault(_dbJson);
const msalConfig = {
    auth: {
        clientId: '53bfecae-5150-4a44-8b5b-957ac4839fa4',
        authority: 'https://login.microsoftonline.com/4583a017-e1c7-4872-bb63-71c8f247fb02'
    }
};
const msalInstance = new _msalBrowser.PublicClientApplication(msalConfig);
const myAccounts = msalInstance.getAllAccounts();
const silentRequest = {
    scopes: [
        "https://storage.azure.com/user_impersonation"
    ],
    account: myAccounts[0],
    forceRefresh: false
};
const request = {
    scopes: [
        "https://storage.azure.com/user_impersonation"
    ],
    loginHint: myAccounts[0].username
};
// try and get access token silently
msalInstance.acquireTokenSilent(silentRequest).then((tokenResponse)=>{
    // console.log(tokenResponse);
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has("id")) {
        const showId = urlParams.get("id");
        const showInfo = _dbJsonDefault.default[showId];
        document.getElementById("backdrop").style.backgroundImage = showInfo.backdrop_path ? `url(https://image.tmdb.org/t/p/w780/${showInfo.backdrop_path})` : `url(https://image.tmdb.org/t/p/w780/${showInfo.poster_path})`;
        document.getElementById("title").textContent = showInfo.name;
        document.getElementById("tagline").textContent = showInfo.tagline;
        document.getElementById("overview").textContent = showInfo.overview.split(".")[0];
        document.getElementById("total-episodes").textContent = `${showInfo.number_of_episodes} episodes`;
        getEpisodes(tokenResponse.accessToken, showId);
    } else console.error("Show not found");
}).catch((err)=>{
    console.error(err);
    if (err instanceof _msalBrowser.InteractionRequiredAuthError) return msalInstance.acquireTokenRedirect(request);
});
const getEpisodes = async (accessToken, showId)=>{
    const tokenCredential = {
        getToken () {
            return {
                token: accessToken,
                expiresOnTimestamp: Date.now() + 3600000
            };
        }
    };
    const blobServiceClient = new _storageBlob.BlobServiceClient("https://azuretv.blob.core.windows.net/", tokenCredential);
    const containerClient = blobServiceClient.getContainerClient("media");
    const episodes = [];
    for await (const item of containerClient.listBlobsByHierarchy("/", {
        prefix: `TV/${showId}/`
    })){
        // console.log(item);
        const blobClient = containerClient.getBlockBlobClient(item.name);
        const meta = (await blobClient.getProperties()).metadata;
        episodes.push({
            season: parseInt(meta.season),
            episode: parseInt(meta.episode),
            blob: item
        });
    }
    episodes.sort((a, b)=>{
        if (a.season < b.season) return -1;
        else if (a.season === b.season) return a.episode - b.episode;
        else return 1;
    });
    // add series links
    const series = [];
    episodes.forEach((ep)=>{
        if (series.indexOf(ep.season) === -1) series.push(ep.season);
    });
    // addSeriesLinks(series);
    addEpisodes(episodes, showId);
};
const addSeriesLinks = (series)=>{
    series.sort().map((seriesNum)=>{
        const seriesList = document.getElementById("series");
        const seriesItem = document.createElement("li");
        const seriesLink = document.createElement("a");
        seriesLink.href = "#";
        seriesLink.appendChild(seriesItem);
        seriesLink.textContent = `Series ${seriesNum}`;
        seriesItem.appendChild(seriesLink);
        seriesList.appendChild(seriesItem);
    });
};
const addEpisodes = (episodes, showId)=>{
    const showInfo = _dbJsonDefault.default[showId];
    episodes.forEach((episode)=>{
        const seasonInfo = showInfo[`season/${episode.season}`];
        const episodeInfo = seasonInfo.episodes[episode.episode - 1];
        // console.log(seasonInfo);
        // console.log(episodeInfo);
        const episodeContainer = document.createElement("div");
        const episodeStill = document.createElement("div");
        episodeContainer.className = "episode";
        episodeStill.className = "episode-still";
        let stillPath = "";
        if (episodeInfo.still_path) stillPath = `https://image.tmdb.org/t/p/w185/${episodeInfo.still_path}`;
        else if (seasonInfo.poster_path) stillPath = `https://image.tmdb.org/t/p/w185/${seasonInfo.poster_path}`;
        else stillPath = `https://image.tmdb.org/t/p/w185/${showInfo.poster_path}`;
        episodeStill.style.backgroundImage = `url(${stillPath})`;
        const playButton = document.createElement("button");
        playButton.className = "play-btn";
        playButton.textContent = "▶";
        playButton.addEventListener("click", ()=>{
            play(episode.blob, episodeInfo, stillPath);
        }, false);
        episodeStill.appendChild(playButton);
        const episodeTitle = document.createElement("p");
        episodeTitle.className = "episode-title";
        episodeTitle.textContent = `Series ${episode.season}: ${episode.episode}. ${episodeInfo.name}`;
        const episodeBio = document.createElement("p");
        episodeBio.textContent = episodeInfo.overview.split(".")[0];
        episodeContainer.appendChild(episodeStill);
        episodeContainer.appendChild(episodeTitle);
        episodeContainer.appendChild(episodeBio);
        document.getElementById("episodes").appendChild(episodeContainer);
    });
};
const play = (blob, info, stillPath)=>{
    // console.log(blob, info);
    const castSession = cast.framework.CastContext.getInstance().getCurrentSession();
    const metadata = new chrome.cast.media.TvShowMediaMetadata();
    metadata.episode = info.episode_number;
    metadata.images = [
        stillPath
    ];
    metadata.originalAirdate = info.air_date;
    metadata.season = info.season_number;
    metadata.title = info.name;
    const mediaInfo = new chrome.cast.media.MediaInfo(`https://azuretv.blob.core.windows.net/media/${blob.name}`, blob.properties.contentType);
    mediaInfo.metadata = metadata;
    const request1 = new chrome.cast.media.LoadRequest(mediaInfo);
    castSession.loadMedia(request1).then(()=>{
        console.log('Load succeeded');
    }).catch((err)=>{
        console.error('Error code', err);
    });
};

},{"@azure/msal-browser":"l547L","@azure/storage-blob":"6Mxp0","./db.json":"549Gl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l547L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PublicClientApplication", ()=>_publicClientApplicationJs.PublicClientApplication
);
parcelHelpers.export(exports, "DEFAULT_IFRAME_TIMEOUT_MS", ()=>_configurationJs.DEFAULT_IFRAME_TIMEOUT_MS
);
parcelHelpers.export(exports, "ApiId", ()=>_browserConstantsJs.ApiId
);
parcelHelpers.export(exports, "BrowserCacheLocation", ()=>_browserConstantsJs.BrowserCacheLocation
);
parcelHelpers.export(exports, "BrowserConstants", ()=>_browserConstantsJs.BrowserConstants
);
parcelHelpers.export(exports, "InteractionStatus", ()=>_browserConstantsJs.InteractionStatus
);
parcelHelpers.export(exports, "InteractionType", ()=>_browserConstantsJs.InteractionType
);
parcelHelpers.export(exports, "TemporaryCacheKeys", ()=>_browserConstantsJs.TemporaryCacheKeys
);
parcelHelpers.export(exports, "WrapperSKU", ()=>_browserConstantsJs.WrapperSKU
);
parcelHelpers.export(exports, "BrowserUtils", ()=>_browserUtilsJs.BrowserUtils
);
parcelHelpers.export(exports, "BrowserAuthError", ()=>_browserAuthErrorJs.BrowserAuthError
);
parcelHelpers.export(exports, "BrowserAuthErrorMessage", ()=>_browserAuthErrorJs.BrowserAuthErrorMessage
);
parcelHelpers.export(exports, "BrowserConfigurationAuthError", ()=>_browserConfigurationAuthErrorJs.BrowserConfigurationAuthError
);
parcelHelpers.export(exports, "BrowserConfigurationAuthErrorMessage", ()=>_browserConfigurationAuthErrorJs.BrowserConfigurationAuthErrorMessage
);
parcelHelpers.export(exports, "stubbedPublicClientApplication", ()=>_ipublicClientApplicationJs.stubbedPublicClientApplication
);
parcelHelpers.export(exports, "NavigationClient", ()=>_navigationClientJs.NavigationClient
);
parcelHelpers.export(exports, "BrowserCacheManager", ()=>_browserCacheManagerJs.BrowserCacheManager
);
parcelHelpers.export(exports, "StandardInteractionClient", ()=>_standardInteractionClientJs.StandardInteractionClient
);
parcelHelpers.export(exports, "RedirectClient", ()=>_redirectClientJs.RedirectClient
);
parcelHelpers.export(exports, "PopupClient", ()=>_popupClientJs.PopupClient
);
parcelHelpers.export(exports, "SilentIframeClient", ()=>_silentIframeClientJs.SilentIframeClient
);
parcelHelpers.export(exports, "SilentCacheClient", ()=>_silentCacheClientJs.SilentCacheClient
);
parcelHelpers.export(exports, "SilentRefreshClient", ()=>_silentRefreshClientJs.SilentRefreshClient
);
parcelHelpers.export(exports, "RedirectHandler", ()=>_redirectHandlerJs.RedirectHandler
);
parcelHelpers.export(exports, "EventMessageUtils", ()=>_eventMessageJs.EventMessageUtils
);
parcelHelpers.export(exports, "EventType", ()=>_eventTypeJs.EventType
);
parcelHelpers.export(exports, "EventHandler", ()=>_eventHandlerJs.EventHandler
);
parcelHelpers.export(exports, "SignedHttpRequest", ()=>_signedHttpRequestJs.SignedHttpRequest
);
parcelHelpers.export(exports, "PopupUtils", ()=>_popupUtilsJs.PopupUtils
);
parcelHelpers.export(exports, "AccountEntity", ()=>_msalCommon.AccountEntity
);
parcelHelpers.export(exports, "AuthError", ()=>_msalCommon.AuthError
);
parcelHelpers.export(exports, "AuthErrorMessage", ()=>_msalCommon.AuthErrorMessage
);
parcelHelpers.export(exports, "AuthenticationHeaderParser", ()=>_msalCommon.AuthenticationHeaderParser
);
parcelHelpers.export(exports, "AuthenticationScheme", ()=>_msalCommon.AuthenticationScheme
);
parcelHelpers.export(exports, "AzureCloudInstance", ()=>_msalCommon.AzureCloudInstance
);
parcelHelpers.export(exports, "ClientAuthError", ()=>_msalCommon.ClientAuthError
);
parcelHelpers.export(exports, "ClientAuthErrorMessage", ()=>_msalCommon.ClientAuthErrorMessage
);
parcelHelpers.export(exports, "ClientConfigurationError", ()=>_msalCommon.ClientConfigurationError
);
parcelHelpers.export(exports, "ClientConfigurationErrorMessage", ()=>_msalCommon.ClientConfigurationErrorMessage
);
parcelHelpers.export(exports, "InteractionRequiredAuthError", ()=>_msalCommon.InteractionRequiredAuthError
);
parcelHelpers.export(exports, "InteractionRequiredAuthErrorMessage", ()=>_msalCommon.InteractionRequiredAuthErrorMessage
);
parcelHelpers.export(exports, "LogLevel", ()=>_msalCommon.LogLevel
);
parcelHelpers.export(exports, "Logger", ()=>_msalCommon.Logger
);
parcelHelpers.export(exports, "OIDC_DEFAULT_SCOPES", ()=>_msalCommon.OIDC_DEFAULT_SCOPES
);
parcelHelpers.export(exports, "ProtocolMode", ()=>_msalCommon.ProtocolMode
);
parcelHelpers.export(exports, "ServerError", ()=>_msalCommon.ServerError
);
parcelHelpers.export(exports, "StringUtils", ()=>_msalCommon.StringUtils
);
parcelHelpers.export(exports, "UrlString", ()=>_msalCommon.UrlString
);
parcelHelpers.export(exports, "version", ()=>_packageMetadataJs.version
);
var _publicClientApplicationJs = require("./app/PublicClientApplication.js");
var _configurationJs = require("./config/Configuration.js");
var _browserConstantsJs = require("./utils/BrowserConstants.js");
var _browserUtilsJs = require("./utils/BrowserUtils.js");
var _browserAuthErrorJs = require("./error/BrowserAuthError.js");
var _browserConfigurationAuthErrorJs = require("./error/BrowserConfigurationAuthError.js");
var _ipublicClientApplicationJs = require("./app/IPublicClientApplication.js");
var _navigationClientJs = require("./navigation/NavigationClient.js");
var _browserCacheManagerJs = require("./cache/BrowserCacheManager.js");
var _standardInteractionClientJs = require("./interaction_client/StandardInteractionClient.js");
var _redirectClientJs = require("./interaction_client/RedirectClient.js");
var _popupClientJs = require("./interaction_client/PopupClient.js");
var _silentIframeClientJs = require("./interaction_client/SilentIframeClient.js");
var _silentCacheClientJs = require("./interaction_client/SilentCacheClient.js");
var _silentRefreshClientJs = require("./interaction_client/SilentRefreshClient.js");
var _redirectHandlerJs = require("./interaction_handler/RedirectHandler.js");
var _eventMessageJs = require("./event/EventMessage.js");
var _eventTypeJs = require("./event/EventType.js");
var _eventHandlerJs = require("./event/EventHandler.js");
var _signedHttpRequestJs = require("./crypto/SignedHttpRequest.js");
var _popupUtilsJs = require("./utils/PopupUtils.js");
var _msalCommon = require("@azure/msal-common");
var _packageMetadataJs = require("./packageMetadata.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';

},{"./app/PublicClientApplication.js":"gZPvK","./config/Configuration.js":"2ePb2","./utils/BrowserConstants.js":"kJnIX","./utils/BrowserUtils.js":"l7wi6","./error/BrowserAuthError.js":"1rUUr","./error/BrowserConfigurationAuthError.js":"99jPJ","./app/IPublicClientApplication.js":"cNMcn","./navigation/NavigationClient.js":"5Vdmv","./cache/BrowserCacheManager.js":"k1P3K","./interaction_client/StandardInteractionClient.js":"64K8D","./interaction_client/RedirectClient.js":"fuuSL","./interaction_client/PopupClient.js":"k7lZu","./interaction_client/SilentIframeClient.js":"5nAus","./interaction_client/SilentCacheClient.js":"hVtGX","./interaction_client/SilentRefreshClient.js":"6VSlo","./interaction_handler/RedirectHandler.js":"eHJQ9","./event/EventMessage.js":"49tpc","./event/EventType.js":"cjqlF","./event/EventHandler.js":"jfojq","./crypto/SignedHttpRequest.js":"diGnC","./utils/PopupUtils.js":"1ts4J","@azure/msal-common":"liWRx","./packageMetadata.js":"hunPb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gZPvK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PublicClientApplication", ()=>PublicClientApplication
);
var _tslibJs = require("../_virtual/_tslib.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _clientApplicationJs = require("./ClientApplication.js");
var _eventTypeJs = require("../event/EventType.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _silentCacheClientJs = require("../interaction_client/SilentCacheClient.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications
 * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.
 */ var PublicClientApplication = function(_super) {
    _tslibJs.__extends(PublicClientApplication1, _super);
    /**
     * @constructor
     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object
     *
     * Important attributes in the Configuration object for auth are:
     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
     * - authority: the authority URL for your application.
     * - redirect_uri: the uri of your application registered in the portal.
     *
     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}
     * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
     * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
     * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
     *
     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/
     * Full B2C functionality will be available in this library in future versions.
     *
     * @param configuration object for the MSAL PublicClientApplication instance
     */ function PublicClientApplication1(configuration) {
        var _this = _super.call(this, configuration) || this;
        _this.activeSilentTokenRequests = new Map();
        return _this;
    }
    /**
     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so
     * any code that follows this function will not execute.
     *
     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
     *
     * @param request
     */ PublicClientApplication1.prototype.loginRedirect = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                this.logger.verbose("loginRedirect called");
                return [
                    2 /*return*/ ,
                    this.acquireTokenRedirect(request || _browserConstantsJs.DEFAULT_REQUEST)
                ];
            });
        });
    };
    /**
     * Use when initiating the login process via opening a popup window in the user's browser
     *
     * @param request
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ PublicClientApplication1.prototype.loginPopup = function(request) {
        this.logger.verbose("loginPopup called");
        return this.acquireTokenPopup(request || _browserConstantsJs.DEFAULT_REQUEST);
    };
    /**
     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.
     *
     * @param {@link (SilentRequest:type)}
     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
     */ PublicClientApplication1.prototype.acquireTokenSilent = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var account, thumbprint, silentRequestKey, cachedResponse, response;
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                this.preflightBrowserEnvironmentCheck(_browserConstantsJs.InteractionType.Silent);
                this.logger.verbose("acquireTokenSilent called", request.correlationId);
                account = request.account || this.getActiveAccount();
                if (!account) throw _browserAuthErrorJs.BrowserAuthError.createNoAccountError();
                thumbprint = {
                    clientId: this.config.auth.clientId,
                    authority: request.authority || "",
                    scopes: request.scopes,
                    homeAccountIdentifier: account.homeAccountId,
                    claims: request.claims,
                    authenticationScheme: request.authenticationScheme,
                    resourceRequestMethod: request.resourceRequestMethod,
                    resourceRequestUri: request.resourceRequestUri,
                    shrClaims: request.shrClaims,
                    sshKid: request.sshKid
                };
                silentRequestKey = JSON.stringify(thumbprint);
                cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);
                if (typeof cachedResponse === "undefined") {
                    this.logger.verbose("acquireTokenSilent called for the first time, storing active request", request.correlationId);
                    response = this.acquireTokenSilentAsync(request, account).then(function(result) {
                        _this.activeSilentTokenRequests.delete(silentRequestKey);
                        return result;
                    }).catch(function(error) {
                        _this.activeSilentTokenRequests.delete(silentRequestKey);
                        throw error;
                    });
                    this.activeSilentTokenRequests.set(silentRequestKey, response);
                    return [
                        2 /*return*/ ,
                        response
                    ];
                } else {
                    this.logger.verbose("acquireTokenSilent has been called previously, returning the result from the first call", request.correlationId);
                    return [
                        2 /*return*/ ,
                        cachedResponse
                    ];
                }
            });
        });
    };
    /**
     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.
     * @param {@link (SilentRequest:type)}
     * @param {@link (AccountInfo:type)}
     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}
     */ PublicClientApplication1.prototype.acquireTokenSilentAsync = function(request, account) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var silentCacheClient, silentRequest;
            var _this = this;
            return _tslibJs.__generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        silentCacheClient = new _silentCacheClientJs.SilentCacheClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, request.correlationId);
                        return [
                            4 /*yield*/ ,
                            silentCacheClient.initializeSilentRequest(request, account)
                        ];
                    case 1:
                        silentRequest = _a1.sent();
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_START, _browserConstantsJs.InteractionType.Silent, request);
                        return [
                            2 /*return*/ ,
                            silentCacheClient.acquireToken(silentRequest).catch(function() {
                                return _tslibJs.__awaiter(_this, void 0, void 0, function() {
                                    var tokenRenewalResult, tokenRenewalError_1;
                                    return _tslibJs.__generator(this, function(_a) {
                                        switch(_a.label){
                                            case 0:
                                                _a.trys.push([
                                                    0,
                                                    2,
                                                    ,
                                                    3
                                                ]);
                                                return [
                                                    4 /*yield*/ ,
                                                    this.acquireTokenByRefreshToken(silentRequest)
                                                ];
                                            case 1:
                                                tokenRenewalResult = _a.sent();
                                                this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_SUCCESS, _browserConstantsJs.InteractionType.Silent, tokenRenewalResult);
                                                return [
                                                    2 /*return*/ ,
                                                    tokenRenewalResult
                                                ];
                                            case 2:
                                                tokenRenewalError_1 = _a.sent();
                                                this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_FAILURE, _browserConstantsJs.InteractionType.Silent, null, tokenRenewalError_1);
                                                throw tokenRenewalError_1;
                                            case 3:
                                                return [
                                                    2 /*return*/ 
                                                ];
                                        }
                                    });
                                });
                            })
                        ];
                }
            });
        });
    };
    return PublicClientApplication1;
}(_clientApplicationJs.ClientApplication);

},{"../_virtual/_tslib.js":"fxaLV","../utils/BrowserConstants.js":"kJnIX","./ClientApplication.js":"kN7I0","../event/EventType.js":"cjqlF","../error/BrowserAuthError.js":"1rUUr","../interaction_client/SilentCacheClient.js":"hVtGX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fxaLV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__assign", ()=>__assign
);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter
);
parcelHelpers.export(exports, "__extends", ()=>__extends
);
parcelHelpers.export(exports, "__generator", ()=>__generator
);
parcelHelpers.export(exports, "__read", ()=>__read
);
parcelHelpers.export(exports, "__spread", ()=>__spread
);
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d1, b1) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d1, b1);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"kJnIX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ApiId", ()=>ApiId
);
parcelHelpers.export(exports, "BrowserCacheLocation", ()=>BrowserCacheLocation
);
parcelHelpers.export(exports, "BrowserConstants", ()=>BrowserConstants
);
parcelHelpers.export(exports, "DB_NAME", ()=>DB_NAME
);
parcelHelpers.export(exports, "DB_TABLE_NAME", ()=>DB_TABLE_NAME
);
parcelHelpers.export(exports, "DB_VERSION", ()=>DB_VERSION
);
parcelHelpers.export(exports, "DEFAULT_REQUEST", ()=>DEFAULT_REQUEST
);
parcelHelpers.export(exports, "HTTP_REQUEST_TYPE", ()=>HTTP_REQUEST_TYPE
);
parcelHelpers.export(exports, "InMemoryCacheKeys", ()=>InMemoryCacheKeys
);
parcelHelpers.export(exports, "InteractionStatus", ()=>InteractionStatus
);
parcelHelpers.export(exports, "InteractionType", ()=>InteractionType
);
parcelHelpers.export(exports, "KEY_FORMAT_JWK", ()=>KEY_FORMAT_JWK
);
parcelHelpers.export(exports, "TemporaryCacheKeys", ()=>TemporaryCacheKeys
);
parcelHelpers.export(exports, "WrapperSKU", ()=>WrapperSKU
);
var _msalCommon = require("@azure/msal-common");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Constants
 */ var BrowserConstants = {
    /**
     * Interaction in progress cache value
     */ INTERACTION_IN_PROGRESS_VALUE: "interaction_in_progress",
    /**
     * Invalid grant error code
     */ INVALID_GRANT_ERROR: "invalid_grant",
    /**
     * Default popup window width
     */ POPUP_WIDTH: 483,
    /**
     * Default popup window height
     */ POPUP_HEIGHT: 600,
    /**
     * Name of the popup window starts with
     */ POPUP_NAME_PREFIX: "msal",
    /**
     * Default popup monitor poll interval in milliseconds
     */ POLL_INTERVAL_MS: 50,
    /**
     * Msal-browser SKU
     */ MSAL_SKU: "msal.js.browser"
};
var BrowserCacheLocation;
(function(BrowserCacheLocation1) {
    BrowserCacheLocation1["LocalStorage"] = "localStorage";
    BrowserCacheLocation1["SessionStorage"] = "sessionStorage";
    BrowserCacheLocation1["MemoryStorage"] = "memoryStorage";
})(BrowserCacheLocation || (BrowserCacheLocation = {
}));
/**
 * HTTP Request types supported by MSAL.
 */ var HTTP_REQUEST_TYPE;
(function(HTTP_REQUEST_TYPE1) {
    HTTP_REQUEST_TYPE1["GET"] = "GET";
    HTTP_REQUEST_TYPE1["POST"] = "POST";
})(HTTP_REQUEST_TYPE || (HTTP_REQUEST_TYPE = {
}));
/**
 * Temporary cache keys for MSAL, deleted after any request.
 */ var TemporaryCacheKeys;
(function(TemporaryCacheKeys1) {
    TemporaryCacheKeys1["AUTHORITY"] = "authority";
    TemporaryCacheKeys1["ACQUIRE_TOKEN_ACCOUNT"] = "acquireToken.account";
    TemporaryCacheKeys1["SESSION_STATE"] = "session.state";
    TemporaryCacheKeys1["REQUEST_STATE"] = "request.state";
    TemporaryCacheKeys1["NONCE_IDTOKEN"] = "nonce.id_token";
    TemporaryCacheKeys1["ORIGIN_URI"] = "request.origin";
    TemporaryCacheKeys1["RENEW_STATUS"] = "token.renew.status";
    TemporaryCacheKeys1["URL_HASH"] = "urlHash";
    TemporaryCacheKeys1["REQUEST_PARAMS"] = "request.params";
    TemporaryCacheKeys1["SCOPES"] = "scopes";
    TemporaryCacheKeys1["INTERACTION_STATUS_KEY"] = "interaction.status";
    TemporaryCacheKeys1["CCS_CREDENTIAL"] = "ccs.credential";
    TemporaryCacheKeys1["CORRELATION_ID"] = "request.correlationId";
})(TemporaryCacheKeys || (TemporaryCacheKeys = {
}));
/**
 * Cache keys stored in-memory
 */ var InMemoryCacheKeys;
(function(InMemoryCacheKeys1) {
    InMemoryCacheKeys1["WRAPPER_SKU"] = "wrapper.sku";
    InMemoryCacheKeys1["WRAPPER_VER"] = "wrapper.version";
})(InMemoryCacheKeys || (InMemoryCacheKeys = {
}));
/**
 * API Codes for Telemetry purposes.
 * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs
 * 0-99 Silent Flow
 * 800-899 Auth Code Flow
 */ var ApiId;
(function(ApiId1) {
    ApiId1[ApiId1["acquireTokenRedirect"] = 861] = "acquireTokenRedirect";
    ApiId1[ApiId1["acquireTokenPopup"] = 862] = "acquireTokenPopup";
    ApiId1[ApiId1["ssoSilent"] = 863] = "ssoSilent";
    ApiId1[ApiId1["acquireTokenSilent_authCode"] = 864] = "acquireTokenSilent_authCode";
    ApiId1[ApiId1["handleRedirectPromise"] = 865] = "handleRedirectPromise";
    ApiId1[ApiId1["acquireTokenByCode"] = 866] = "acquireTokenByCode";
    ApiId1[ApiId1["acquireTokenSilent_silentFlow"] = 61] = "acquireTokenSilent_silentFlow";
    ApiId1[ApiId1["logout"] = 961] = "logout";
    ApiId1[ApiId1["logoutPopup"] = 962] = "logoutPopup";
})(ApiId || (ApiId = {
}));
/*
 * Interaction type of the API - used for state and telemetry
 */ var InteractionType;
(function(InteractionType1) {
    InteractionType1["Redirect"] = "redirect";
    InteractionType1["Popup"] = "popup";
    InteractionType1["Silent"] = "silent";
    InteractionType1["None"] = "none";
})(InteractionType || (InteractionType = {
}));
/**
 * Types of interaction currently in progress.
 * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.
 */ var InteractionStatus;
(function(InteractionStatus1) {
    /**
     * Initial status before interaction occurs
     */ InteractionStatus1["Startup"] = "startup";
    /**
     * Status set when all login calls occuring
     */ InteractionStatus1["Login"] = "login";
    /**
     * Status set when logout call occuring
     */ InteractionStatus1["Logout"] = "logout";
    /**
     * Status set for acquireToken calls
     */ InteractionStatus1["AcquireToken"] = "acquireToken";
    /**
     * Status set for ssoSilent calls
     */ InteractionStatus1["SsoSilent"] = "ssoSilent";
    /**
     * Status set when handleRedirect in progress
     */ InteractionStatus1["HandleRedirect"] = "handleRedirect";
    /**
     * Status set when interaction is complete
     */ InteractionStatus1["None"] = "none";
})(InteractionStatus || (InteractionStatus = {
}));
var DEFAULT_REQUEST = {
    scopes: _msalCommon.OIDC_DEFAULT_SCOPES
};
/**
 * JWK Key Format string (Type MUST be defined for window crypto APIs)
 */ var KEY_FORMAT_JWK = "jwk";
// Supported wrapper SKUs
var WrapperSKU;
(function(WrapperSKU1) {
    WrapperSKU1["React"] = "@azure/msal-react";
    WrapperSKU1["Angular"] = "@azure/msal-angular";
})(WrapperSKU || (WrapperSKU = {
}));
// DatabaseStorage Constants
var DB_NAME = "msal.db";
var DB_VERSION = 1;
var DB_TABLE_NAME = DB_NAME + ".keys";

},{"@azure/msal-common":"liWRx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"liWRx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthorizationCodeClient", ()=>_authorizationCodeClientJs.AuthorizationCodeClient
);
parcelHelpers.export(exports, "DeviceCodeClient", ()=>_deviceCodeClientJs.DeviceCodeClient
);
parcelHelpers.export(exports, "RefreshTokenClient", ()=>_refreshTokenClientJs.RefreshTokenClient
);
parcelHelpers.export(exports, "ClientCredentialClient", ()=>_clientCredentialClientJs.ClientCredentialClient
);
parcelHelpers.export(exports, "OnBehalfOfClient", ()=>_onBehalfOfClientJs.OnBehalfOfClient
);
parcelHelpers.export(exports, "SilentFlowClient", ()=>_silentFlowClientJs.SilentFlowClient
);
parcelHelpers.export(exports, "UsernamePasswordClient", ()=>_usernamePasswordClientJs.UsernamePasswordClient
);
parcelHelpers.export(exports, "DEFAULT_SYSTEM_OPTIONS", ()=>_clientConfigurationJs.DEFAULT_SYSTEM_OPTIONS
);
parcelHelpers.export(exports, "AuthToken", ()=>_authTokenJs.AuthToken
);
parcelHelpers.export(exports, "IdToken", ()=>_authTokenJs.AuthToken
);
parcelHelpers.export(exports, "CcsCredentialType", ()=>_ccsCredentialJs.CcsCredentialType
);
parcelHelpers.export(exports, "Authority", ()=>_authorityJs.Authority
);
parcelHelpers.export(exports, "AzureCloudInstance", ()=>_authorityOptionsJs.AzureCloudInstance
);
parcelHelpers.export(exports, "AuthorityFactory", ()=>_authorityFactoryJs.AuthorityFactory
);
parcelHelpers.export(exports, "AuthorityType", ()=>_authorityTypeJs.AuthorityType
);
parcelHelpers.export(exports, "ProtocolMode", ()=>_protocolModeJs.ProtocolMode
);
parcelHelpers.export(exports, "CacheManager", ()=>_cacheManagerJs.CacheManager
);
parcelHelpers.export(exports, "DefaultStorageClass", ()=>_cacheManagerJs.DefaultStorageClass
);
parcelHelpers.export(exports, "CredentialEntity", ()=>_credentialEntityJs.CredentialEntity
);
parcelHelpers.export(exports, "AppMetadataEntity", ()=>_appMetadataEntityJs.AppMetadataEntity
);
parcelHelpers.export(exports, "AccountEntity", ()=>_accountEntityJs.AccountEntity
);
parcelHelpers.export(exports, "IdTokenEntity", ()=>_idTokenEntityJs.IdTokenEntity
);
parcelHelpers.export(exports, "AccessTokenEntity", ()=>_accessTokenEntityJs.AccessTokenEntity
);
parcelHelpers.export(exports, "RefreshTokenEntity", ()=>_refreshTokenEntityJs.RefreshTokenEntity
);
parcelHelpers.export(exports, "ServerTelemetryEntity", ()=>_serverTelemetryEntityJs.ServerTelemetryEntity
);
parcelHelpers.export(exports, "AuthorityMetadataEntity", ()=>_authorityMetadataEntityJs.AuthorityMetadataEntity
);
parcelHelpers.export(exports, "ThrottlingEntity", ()=>_throttlingEntityJs.ThrottlingEntity
);
parcelHelpers.export(exports, "TokenCacheContext", ()=>_tokenCacheContextJs.TokenCacheContext
);
parcelHelpers.export(exports, "StubbedNetworkModule", ()=>_inetworkModuleJs.StubbedNetworkModule
);
parcelHelpers.export(exports, "NetworkManager", ()=>_networkManagerJs.NetworkManager
);
parcelHelpers.export(exports, "ThrottlingUtils", ()=>_throttlingUtilsJs.ThrottlingUtils
);
parcelHelpers.export(exports, "UrlString", ()=>_urlStringJs.UrlString
);
parcelHelpers.export(exports, "DEFAULT_CRYPTO_IMPLEMENTATION", ()=>_icryptoJs.DEFAULT_CRYPTO_IMPLEMENTATION
);
parcelHelpers.export(exports, "ScopeSet", ()=>_scopeSetJs.ScopeSet
);
parcelHelpers.export(exports, "AuthenticationHeaderParser", ()=>_authenticationHeaderParserJs.AuthenticationHeaderParser
);
parcelHelpers.export(exports, "LogLevel", ()=>_loggerJs.LogLevel
);
parcelHelpers.export(exports, "Logger", ()=>_loggerJs.Logger
);
parcelHelpers.export(exports, "InteractionRequiredAuthError", ()=>_interactionRequiredAuthErrorJs.InteractionRequiredAuthError
);
parcelHelpers.export(exports, "InteractionRequiredAuthErrorMessage", ()=>_interactionRequiredAuthErrorJs.InteractionRequiredAuthErrorMessage
);
parcelHelpers.export(exports, "AuthError", ()=>_authErrorJs.AuthError
);
parcelHelpers.export(exports, "AuthErrorMessage", ()=>_authErrorJs.AuthErrorMessage
);
parcelHelpers.export(exports, "ServerError", ()=>_serverErrorJs.ServerError
);
parcelHelpers.export(exports, "ClientAuthError", ()=>_clientAuthErrorJs.ClientAuthError
);
parcelHelpers.export(exports, "ClientAuthErrorMessage", ()=>_clientAuthErrorJs.ClientAuthErrorMessage
);
parcelHelpers.export(exports, "ClientConfigurationError", ()=>_clientConfigurationErrorJs.ClientConfigurationError
);
parcelHelpers.export(exports, "ClientConfigurationErrorMessage", ()=>_clientConfigurationErrorJs.ClientConfigurationErrorMessage
);
parcelHelpers.export(exports, "AuthenticationScheme", ()=>_constantsJs.AuthenticationScheme
);
parcelHelpers.export(exports, "CacheAccountType", ()=>_constantsJs.CacheAccountType
);
parcelHelpers.export(exports, "CacheSchemaType", ()=>_constantsJs.CacheSchemaType
);
parcelHelpers.export(exports, "CacheType", ()=>_constantsJs.CacheType
);
parcelHelpers.export(exports, "Constants", ()=>_constantsJs.Constants
);
parcelHelpers.export(exports, "CredentialType", ()=>_constantsJs.CredentialType
);
parcelHelpers.export(exports, "OIDC_DEFAULT_SCOPES", ()=>_constantsJs.OIDC_DEFAULT_SCOPES
);
parcelHelpers.export(exports, "PersistentCacheKeys", ()=>_constantsJs.PersistentCacheKeys
);
parcelHelpers.export(exports, "PromptValue", ()=>_constantsJs.PromptValue
);
parcelHelpers.export(exports, "ResponseMode", ()=>_constantsJs.ResponseMode
);
parcelHelpers.export(exports, "StringUtils", ()=>_stringUtilsJs.StringUtils
);
parcelHelpers.export(exports, "ProtocolUtils", ()=>_protocolUtilsJs.ProtocolUtils
);
parcelHelpers.export(exports, "TimeUtils", ()=>_timeUtilsJs.TimeUtils
);
parcelHelpers.export(exports, "ServerTelemetryManager", ()=>_serverTelemetryManagerJs.ServerTelemetryManager
);
parcelHelpers.export(exports, "PopTokenGenerator", ()=>_popTokenGeneratorJs.PopTokenGenerator
);
parcelHelpers.export(exports, "version", ()=>_packageMetadataJs.version
);
var _authorizationCodeClientJs = require("./client/AuthorizationCodeClient.js");
var _deviceCodeClientJs = require("./client/DeviceCodeClient.js");
var _refreshTokenClientJs = require("./client/RefreshTokenClient.js");
var _clientCredentialClientJs = require("./client/ClientCredentialClient.js");
var _onBehalfOfClientJs = require("./client/OnBehalfOfClient.js");
var _silentFlowClientJs = require("./client/SilentFlowClient.js");
var _usernamePasswordClientJs = require("./client/UsernamePasswordClient.js");
var _clientConfigurationJs = require("./config/ClientConfiguration.js");
var _authTokenJs = require("./account/AuthToken.js");
var _ccsCredentialJs = require("./account/CcsCredential.js");
var _authorityJs = require("./authority/Authority.js");
var _authorityOptionsJs = require("./authority/AuthorityOptions.js");
var _authorityFactoryJs = require("./authority/AuthorityFactory.js");
var _authorityTypeJs = require("./authority/AuthorityType.js");
var _protocolModeJs = require("./authority/ProtocolMode.js");
var _cacheManagerJs = require("./cache/CacheManager.js");
var _credentialEntityJs = require("./cache/entities/CredentialEntity.js");
var _appMetadataEntityJs = require("./cache/entities/AppMetadataEntity.js");
var _accountEntityJs = require("./cache/entities/AccountEntity.js");
var _idTokenEntityJs = require("./cache/entities/IdTokenEntity.js");
var _accessTokenEntityJs = require("./cache/entities/AccessTokenEntity.js");
var _refreshTokenEntityJs = require("./cache/entities/RefreshTokenEntity.js");
var _serverTelemetryEntityJs = require("./cache/entities/ServerTelemetryEntity.js");
var _authorityMetadataEntityJs = require("./cache/entities/AuthorityMetadataEntity.js");
var _throttlingEntityJs = require("./cache/entities/ThrottlingEntity.js");
var _tokenCacheContextJs = require("./cache/persistence/TokenCacheContext.js");
var _inetworkModuleJs = require("./network/INetworkModule.js");
var _networkManagerJs = require("./network/NetworkManager.js");
var _throttlingUtilsJs = require("./network/ThrottlingUtils.js");
var _urlStringJs = require("./url/UrlString.js");
var _icryptoJs = require("./crypto/ICrypto.js");
var _scopeSetJs = require("./request/ScopeSet.js");
var _authenticationHeaderParserJs = require("./request/AuthenticationHeaderParser.js");
var _loggerJs = require("./logger/Logger.js");
var _interactionRequiredAuthErrorJs = require("./error/InteractionRequiredAuthError.js");
var _authErrorJs = require("./error/AuthError.js");
var _serverErrorJs = require("./error/ServerError.js");
var _clientAuthErrorJs = require("./error/ClientAuthError.js");
var _clientConfigurationErrorJs = require("./error/ClientConfigurationError.js");
var _constantsJs = require("./utils/Constants.js");
var _stringUtilsJs = require("./utils/StringUtils.js");
var _protocolUtilsJs = require("./utils/ProtocolUtils.js");
var _timeUtilsJs = require("./utils/TimeUtils.js");
var _serverTelemetryManagerJs = require("./telemetry/server/ServerTelemetryManager.js");
var _popTokenGeneratorJs = require("./crypto/PopTokenGenerator.js");
var _packageMetadataJs = require("./packageMetadata.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';

},{"./client/AuthorizationCodeClient.js":"5uujx","./client/DeviceCodeClient.js":false,"./client/RefreshTokenClient.js":"j4kFD","./client/ClientCredentialClient.js":false,"./client/OnBehalfOfClient.js":false,"./client/SilentFlowClient.js":"4Ju3N","./client/UsernamePasswordClient.js":false,"./config/ClientConfiguration.js":"i6nJw","./account/AuthToken.js":"5l5Zq","./account/CcsCredential.js":"cBmfd","./authority/Authority.js":"1WtkC","./authority/AuthorityOptions.js":"78qjy","./authority/AuthorityFactory.js":"ff3ck","./authority/AuthorityType.js":"216oN","./authority/ProtocolMode.js":"iyRnB","./cache/CacheManager.js":"lsT81","./cache/entities/CredentialEntity.js":"dpbP8","./cache/entities/AppMetadataEntity.js":"7lX8V","./cache/entities/AccountEntity.js":"8CJ3A","./cache/entities/IdTokenEntity.js":"91Z1l","./cache/entities/AccessTokenEntity.js":"dJgl2","./cache/entities/RefreshTokenEntity.js":"bYJdb","./cache/entities/ServerTelemetryEntity.js":"h47zn","./cache/entities/AuthorityMetadataEntity.js":"3CPKL","./cache/entities/ThrottlingEntity.js":"l3oAG","./cache/persistence/TokenCacheContext.js":"bYCmt","./network/INetworkModule.js":"etu0y","./network/NetworkManager.js":"lJfFj","./network/ThrottlingUtils.js":"280YG","./url/UrlString.js":"gLvTY","./crypto/ICrypto.js":"dM46z","./request/ScopeSet.js":"63JqX","./request/AuthenticationHeaderParser.js":"2yUtR","./logger/Logger.js":"lhvT9","./error/InteractionRequiredAuthError.js":"5vpVA","./error/AuthError.js":"8SAdb","./error/ServerError.js":"6ak6C","./error/ClientAuthError.js":"jz6JJ","./error/ClientConfigurationError.js":"iOtcK","./utils/Constants.js":"7OLHu","./utils/StringUtils.js":"2gXP4","./utils/ProtocolUtils.js":"i2k1P","./utils/TimeUtils.js":"kDGso","./telemetry/server/ServerTelemetryManager.js":"6bbMk","./crypto/PopTokenGenerator.js":"296QH","./packageMetadata.js":"4P6mk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5uujx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthorizationCodeClient", ()=>AuthorizationCodeClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _baseClientJs = require("./BaseClient.js");
var _requestParameterBuilderJs = require("../request/RequestParameterBuilder.js");
var _constantsJs = require("../utils/Constants.js");
var _responseHandlerJs = require("../response/ResponseHandler.js");
var _stringUtilsJs = require("../utils/StringUtils.js");
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
var _urlStringJs = require("../url/UrlString.js");
var _popTokenGeneratorJs = require("../crypto/PopTokenGenerator.js");
var _timeUtilsJs = require("../utils/TimeUtils.js");
var _clientInfoJs = require("../account/ClientInfo.js");
var _ccsCredentialJs = require("../account/CcsCredential.js");
var _clientConfigurationErrorJs = require("../error/ClientConfigurationError.js");
var _requestValidatorJs = require("../request/RequestValidator.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Oauth2.0 Authorization Code client
 */ var AuthorizationCodeClient = function(_super) {
    _tslibJs.__extends(AuthorizationCodeClient1, _super);
    function AuthorizationCodeClient1(configuration) {
        var _this = _super.call(this, configuration) || this;
        // Flag to indicate if client is for hybrid spa auth code redemption
        _this.includeRedirectUri = true;
        return _this;
    }
    /**
     * Creates the URL of the authorization request letting the user input credentials and consent to the
     * application. The URL target the /authorize endpoint of the authority configured in the
     * application object.
     *
     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI
     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via
     * acquireToken(AuthorizationCodeRequest)
     * @param request
     */ AuthorizationCodeClient1.prototype.getAuthCodeUrl = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var queryString;
            return _tslibJs.__generator(this, function(_a) {
                queryString = this.createAuthCodeUrlQueryString(request);
                return [
                    2 /*return*/ ,
                    _urlStringJs.UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)
                ];
            });
        });
    };
    /**
     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the
     * authorization_code_grant
     * @param request
     */ AuthorizationCodeClient1.prototype.acquireToken = function(request, authCodePayload) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var reqTimestamp, response, responseHandler;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.logger.info("in acquireToken call");
                        if (!request || _stringUtilsJs.StringUtils.isEmpty(request.code)) throw _clientAuthErrorJs.ClientAuthError.createTokenRequestCannotBeMadeError();
                        reqTimestamp = _timeUtilsJs.TimeUtils.nowSeconds();
                        return [
                            4 /*yield*/ ,
                            this.executeTokenRequest(this.authority, request)
                        ];
                    case 1:
                        response = _a.sent();
                        responseHandler = new _responseHandlerJs.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                        // Validate response. This function throws a server error if an error is returned by the server.
                        responseHandler.validateTokenResponse(response.body);
                        return [
                            4 /*yield*/ ,
                            responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload)
                        ];
                    case 2:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                }
            });
        });
    };
    /**
     * Handles the hash fragment response from public client code request. Returns a code response used by
     * the client to exchange for a token in acquireToken.
     * @param hashFragment
     */ AuthorizationCodeClient1.prototype.handleFragmentResponse = function(hashFragment, cachedState) {
        // Handle responses.
        var responseHandler = new _responseHandlerJs.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);
        // Deserialize hash fragment response parameters.
        var hashUrlString = new _urlStringJs.UrlString(hashFragment);
        // Deserialize hash fragment response parameters.
        var serverParams = _urlStringJs.UrlString.getDeserializedHash(hashUrlString.getHash());
        // Get code response
        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);
        // throw when there is no auth code in the response
        if (!serverParams.code) throw _clientAuthErrorJs.ClientAuthError.createNoAuthCodeInServerResponseError();
        return _tslibJs.__assign(_tslibJs.__assign({
        }, serverParams), {
            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod
            code: serverParams.code
        });
    };
    /**
     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param authorityUri
     */ AuthorizationCodeClient1.prototype.getLogoutUri = function(logoutRequest) {
        // Throw error if logoutRequest is null/undefined
        if (!logoutRequest) throw _clientConfigurationErrorJs.ClientConfigurationError.createEmptyLogoutRequestError();
        var queryString = this.createLogoutUrlQueryString(logoutRequest);
        // Construct logout URI.
        return _urlStringJs.UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);
    };
    /**
     * Executes POST request to token endpoint
     * @param authority
     * @param request
     */ AuthorizationCodeClient1.prototype.executeTokenRequest = function(authority, request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        thumbprint = {
                            clientId: this.config.authOptions.clientId,
                            authority: authority.canonicalAuthority,
                            scopes: request.scopes,
                            claims: request.claims,
                            authenticationScheme: request.authenticationScheme,
                            resourceRequestMethod: request.resourceRequestMethod,
                            resourceRequestUri: request.resourceRequestUri,
                            shrClaims: request.shrClaims,
                            sshKid: request.sshKid
                        };
                        return [
                            4 /*yield*/ ,
                            this.createTokenRequestBody(request)
                        ];
                    case 1:
                        requestBody = _a.sent();
                        queryParameters = this.createTokenQueryParameters(request);
                        ccsCredential = undefined;
                        if (request.clientInfo) try {
                            clientInfo = _clientInfoJs.buildClientInfo(request.clientInfo, this.cryptoUtils);
                            ccsCredential = {
                                credential: "" + clientInfo.uid + _constantsJs.Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,
                                type: _ccsCredentialJs.CcsCredentialType.HOME_ACCOUNT_ID
                            };
                        } catch (e) {
                            this.logger.verbose("Could not parse client info for CCS Header: " + e);
                        }
                        headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);
                        endpoint = _stringUtilsJs.StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + "?" + queryParameters;
                        return [
                            2 /*return*/ ,
                            this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)
                        ];
                }
            });
        });
    };
    /**
     * Creates query string for the /token request
     * @param request
     */ AuthorizationCodeClient1.prototype.createTokenQueryParameters = function(request) {
        var parameterBuilder = new _requestParameterBuilderJs.RequestParameterBuilder();
        if (request.tokenQueryParameters) parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);
        return parameterBuilder.createQueryString();
    };
    /**
     * Generates a map for all the params to be sent to the service
     * @param request
     */ AuthorizationCodeClient1.prototype.createTokenRequestBody = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var parameterBuilder, clientAssertion, popTokenGenerator, cnfString, correlationId, ccsCred, clientInfo, clientInfo;
            var _a;
            return _tslibJs.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        parameterBuilder = new _requestParameterBuilderJs.RequestParameterBuilder();
                        parameterBuilder.addClientId(this.config.authOptions.clientId);
                        /*
                         * For hybrid spa flow, there will be a code but no verifier
                         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI
                         */ if (!this.includeRedirectUri) // Just validate
                        _requestValidatorJs.RequestValidator.validateRedirectUri(request.redirectUri);
                        else // Validate and include redirect uri
                        parameterBuilder.addRedirectUri(request.redirectUri);
                        // Add scope array, parameter builder will add default scopes and dedupe
                        parameterBuilder.addScopes(request.scopes);
                        // add code: user set, not validated
                        parameterBuilder.addAuthorizationCode(request.code);
                        // Add library metadata
                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);
                        parameterBuilder.addThrottling();
                        if (this.serverTelemetryManager) parameterBuilder.addServerTelemetry(this.serverTelemetryManager);
                        // add code_verifier if passed
                        if (request.codeVerifier) parameterBuilder.addCodeVerifier(request.codeVerifier);
                        if (this.config.clientCredentials.clientSecret) parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
                        if (this.config.clientCredentials.clientAssertion) {
                            clientAssertion = this.config.clientCredentials.clientAssertion;
                            parameterBuilder.addClientAssertion(clientAssertion.assertion);
                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
                        }
                        parameterBuilder.addGrantType(_constantsJs.GrantType.AUTHORIZATION_CODE_GRANT);
                        parameterBuilder.addClientInfo();
                        if (!(request.authenticationScheme === _constantsJs.AuthenticationScheme.POP)) return [
                            3 /*break*/ ,
                            2
                        ];
                        popTokenGenerator = new _popTokenGeneratorJs.PopTokenGenerator(this.cryptoUtils);
                        return [
                            4 /*yield*/ ,
                            popTokenGenerator.generateCnf(request)
                        ];
                    case 1:
                        cnfString = _b.sent();
                        parameterBuilder.addPopToken(cnfString);
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        if (request.authenticationScheme === _constantsJs.AuthenticationScheme.SSH) {
                            if (request.sshJwk) parameterBuilder.addSshJwk(request.sshJwk);
                            else throw _clientConfigurationErrorJs.ClientConfigurationError.createMissingSshJwkError();
                        }
                        _b.label = 3;
                    case 3:
                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
                        parameterBuilder.addCorrelationId(correlationId);
                        if (!_stringUtilsJs.StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                        ccsCred = undefined;
                        if (request.clientInfo) try {
                            clientInfo = _clientInfoJs.buildClientInfo(request.clientInfo, this.cryptoUtils);
                            ccsCred = {
                                credential: "" + clientInfo.uid + _constantsJs.Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,
                                type: _ccsCredentialJs.CcsCredentialType.HOME_ACCOUNT_ID
                            };
                        } catch (e) {
                            this.logger.verbose("Could not parse client info for CCS Header: " + e);
                        }
                        else ccsCred = request.ccsCredential;
                        // Adds these as parameters in the request instead of headers to prevent CORS preflight request
                        if (this.config.systemOptions.preventCorsPreflight && ccsCred) switch(ccsCred.type){
                            case _ccsCredentialJs.CcsCredentialType.HOME_ACCOUNT_ID:
                                try {
                                    clientInfo = _clientInfoJs.buildClientInfoFromHomeAccountId(ccsCred.credential);
                                    parameterBuilder.addCcsOid(clientInfo);
                                } catch (e1) {
                                    this.logger.verbose("Could not parse home account ID for CCS Header: " + e1);
                                }
                                break;
                            case _ccsCredentialJs.CcsCredentialType.UPN:
                                parameterBuilder.addCcsUpn(ccsCred.credential);
                                break;
                        }
                        if (request.tokenBodyParameters) parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);
                        // Add hybrid spa parameters if not already provided
                        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[_constantsJs.AADServerParamKeys.RETURN_SPA_CODE])) parameterBuilder.addExtraQueryParameters((_a = {
                        }, _a[_constantsJs.AADServerParamKeys.RETURN_SPA_CODE] = "1", _a));
                        return [
                            2 /*return*/ ,
                            parameterBuilder.createQueryString()
                        ];
                }
            });
        });
    };
    /**
     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL
     * @param request
     */ AuthorizationCodeClient1.prototype.createAuthCodeUrlQueryString = function(request) {
        var parameterBuilder = new _requestParameterBuilderJs.RequestParameterBuilder();
        parameterBuilder.addClientId(this.config.authOptions.clientId);
        var requestScopes = _tslibJs.__spreadArrays(request.scopes || [], request.extraScopesToConsent || []);
        parameterBuilder.addScopes(requestScopes);
        // validate the redirectUri (to be a non null value)
        parameterBuilder.addRedirectUri(request.redirectUri);
        // generate the correlationId if not set by the user and add
        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
        parameterBuilder.addCorrelationId(correlationId);
        // add response_mode. If not passed in it defaults to query.
        parameterBuilder.addResponseMode(request.responseMode);
        // add response_type = code
        parameterBuilder.addResponseTypeCode();
        // add library info parameters
        parameterBuilder.addLibraryInfo(this.config.libraryInfo);
        // add client_info=1
        parameterBuilder.addClientInfo();
        if (request.codeChallenge && request.codeChallengeMethod) parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);
        if (request.prompt) parameterBuilder.addPrompt(request.prompt);
        if (request.domainHint) parameterBuilder.addDomainHint(request.domainHint);
        // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object
        if (request.prompt !== _constantsJs.PromptValue.SELECT_ACCOUNT) {
            // AAD will throw if prompt=select_account is passed with an account hint
            if (request.sid && request.prompt === _constantsJs.PromptValue.NONE) {
                // SessionID is only used in silent calls
                this.logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from request");
                parameterBuilder.addSid(request.sid);
            } else if (request.account) {
                var accountSid = this.extractAccountSid(request.account);
                // If account and loginHint are provided, we will check account first for sid before adding loginHint
                if (accountSid && request.prompt === _constantsJs.PromptValue.NONE) {
                    // SessionId is only used in silent calls
                    this.logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from account");
                    parameterBuilder.addSid(accountSid);
                    try {
                        var clientInfo = _clientInfoJs.buildClientInfoFromHomeAccountId(request.account.homeAccountId);
                        parameterBuilder.addCcsOid(clientInfo);
                    } catch (e) {
                        this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                    }
                } else if (request.loginHint) {
                    this.logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from request");
                    parameterBuilder.addLoginHint(request.loginHint);
                    parameterBuilder.addCcsUpn(request.loginHint);
                } else if (request.account.username) {
                    // Fallback to account username if provided
                    this.logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from account");
                    parameterBuilder.addLoginHint(request.account.username);
                    try {
                        var clientInfo = _clientInfoJs.buildClientInfoFromHomeAccountId(request.account.homeAccountId);
                        parameterBuilder.addCcsOid(clientInfo);
                    } catch (e) {
                        this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                    }
                }
            } else if (request.loginHint) {
                this.logger.verbose("createAuthCodeUrlQueryString: No account, adding login_hint from request");
                parameterBuilder.addLoginHint(request.loginHint);
                parameterBuilder.addCcsUpn(request.loginHint);
            }
        } else this.logger.verbose("createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints");
        if (request.nonce) parameterBuilder.addNonce(request.nonce);
        if (request.state) parameterBuilder.addState(request.state);
        if (!_stringUtilsJs.StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
        if (request.extraQueryParameters) parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);
        return parameterBuilder.createQueryString();
    };
    /**
     * This API validates the `EndSessionRequest` and creates a URL
     * @param request
     */ AuthorizationCodeClient1.prototype.createLogoutUrlQueryString = function(request) {
        var parameterBuilder = new _requestParameterBuilderJs.RequestParameterBuilder();
        if (request.postLogoutRedirectUri) parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);
        if (request.correlationId) parameterBuilder.addCorrelationId(request.correlationId);
        if (request.idTokenHint) parameterBuilder.addIdTokenHint(request.idTokenHint);
        if (request.state) parameterBuilder.addState(request.state);
        if (request.logoutHint) parameterBuilder.addLogoutHint(request.logoutHint);
        if (request.extraQueryParameters) parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);
        return parameterBuilder.createQueryString();
    };
    /**
     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.
     * @param account
     */ AuthorizationCodeClient1.prototype.extractAccountSid = function(account) {
        if (account.idTokenClaims) {
            var tokenClaims = account.idTokenClaims;
            return tokenClaims.sid || null;
        }
        return null;
    };
    return AuthorizationCodeClient1;
}(_baseClientJs.BaseClient);

},{"../_virtual/_tslib.js":"9y6Jg","./BaseClient.js":"5MH0U","../request/RequestParameterBuilder.js":"beOsX","../utils/Constants.js":"7OLHu","../response/ResponseHandler.js":"LseOy","../utils/StringUtils.js":"2gXP4","../error/ClientAuthError.js":"jz6JJ","../url/UrlString.js":"gLvTY","../crypto/PopTokenGenerator.js":"296QH","../utils/TimeUtils.js":"kDGso","../account/ClientInfo.js":"1Am9c","../account/CcsCredential.js":"cBmfd","../error/ClientConfigurationError.js":"iOtcK","../request/RequestValidator.js":"eMlW6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9y6Jg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__assign", ()=>__assign
);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter
);
parcelHelpers.export(exports, "__extends", ()=>__extends
);
parcelHelpers.export(exports, "__generator", ()=>__generator
);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays
);
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d1, b1) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d1, b1);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5MH0U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseClient", ()=>BaseClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _clientConfigurationJs = require("../config/ClientConfiguration.js");
var _networkManagerJs = require("../network/NetworkManager.js");
var _loggerJs = require("../logger/Logger.js");
var _constantsJs = require("../utils/Constants.js");
var _packageMetadataJs = require("../packageMetadata.js");
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
var _ccsCredentialJs = require("../account/CcsCredential.js");
var _clientInfoJs = require("../account/ClientInfo.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.
 */ var BaseClient = function() {
    function BaseClient1(configuration) {
        // Set the configuration
        this.config = _clientConfigurationJs.buildClientConfiguration(configuration);
        // Initialize the logger
        this.logger = new _loggerJs.Logger(this.config.loggerOptions, _packageMetadataJs.name, _packageMetadataJs.version);
        // Initialize crypto
        this.cryptoUtils = this.config.cryptoInterface;
        // Initialize storage interface
        this.cacheManager = this.config.storageInterface;
        // Set the network interface
        this.networkClient = this.config.networkInterface;
        // Set the NetworkManager
        this.networkManager = new _networkManagerJs.NetworkManager(this.networkClient, this.cacheManager);
        // Set TelemetryManager
        this.serverTelemetryManager = this.config.serverTelemetryManager;
        // set Authority
        this.authority = this.config.authOptions.authority;
    }
    /**
     * Creates default headers for requests to token endpoint
     */ BaseClient1.prototype.createTokenRequestHeaders = function(ccsCred) {
        var headers = {
        };
        headers[_constantsJs.HeaderNames.CONTENT_TYPE] = _constantsJs.Constants.URL_FORM_CONTENT_TYPE;
        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) switch(ccsCred.type){
            case _ccsCredentialJs.CcsCredentialType.HOME_ACCOUNT_ID:
                try {
                    var clientInfo = _clientInfoJs.buildClientInfoFromHomeAccountId(ccsCred.credential);
                    headers[_constantsJs.HeaderNames.CCS_HEADER] = "Oid:" + clientInfo.uid + "@" + clientInfo.utid;
                } catch (e) {
                    this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                }
                break;
            case _ccsCredentialJs.CcsCredentialType.UPN:
                headers[_constantsJs.HeaderNames.CCS_HEADER] = "UPN: " + ccsCred.credential;
                break;
        }
        return headers;
    };
    /**
     * Http post to token endpoint
     * @param tokenEndpoint
     * @param queryString
     * @param headers
     * @param thumbprint
     */ BaseClient1.prototype.executePostToTokenEndpoint = function(tokenEndpoint, queryString, headers, thumbprint) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var response;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, {
                                body: queryString,
                                headers: headers,
                                proxyUrl: this.config.systemOptions.proxyUrl
                            })
                        ];
                    case 1:
                        response = _a.sent();
                        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) // Telemetry data successfully logged by server, clear Telemetry cache
                        this.config.serverTelemetryManager.clearTelemetryCache();
                        return [
                            2 /*return*/ ,
                            response
                        ];
                }
            });
        });
    };
    /**
     * Updates the authority object of the client. Endpoint discovery must be completed.
     * @param updatedAuthority
     */ BaseClient1.prototype.updateAuthority = function(updatedAuthority) {
        if (!updatedAuthority.discoveryComplete()) throw _clientAuthErrorJs.ClientAuthError.createEndpointDiscoveryIncompleteError("Updated authority has not completed endpoint discovery.");
        this.authority = updatedAuthority;
    };
    return BaseClient1;
}();

},{"../_virtual/_tslib.js":"9y6Jg","../config/ClientConfiguration.js":"i6nJw","../network/NetworkManager.js":"lJfFj","../logger/Logger.js":"lhvT9","../utils/Constants.js":"7OLHu","../packageMetadata.js":"4P6mk","../error/ClientAuthError.js":"jz6JJ","../account/CcsCredential.js":"cBmfd","../account/ClientInfo.js":"1Am9c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i6nJw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_SYSTEM_OPTIONS", ()=>DEFAULT_SYSTEM_OPTIONS
);
parcelHelpers.export(exports, "buildClientConfiguration", ()=>buildClientConfiguration
);
var _tslibJs = require("../_virtual/_tslib.js");
var _icryptoJs = require("../crypto/ICrypto.js");
var _authErrorJs = require("../error/AuthError.js");
var _loggerJs = require("../logger/Logger.js");
var _constantsJs = require("../utils/Constants.js");
var _packageMetadataJs = require("../packageMetadata.js");
var _authorityOptionsJs = require("../authority/AuthorityOptions.js");
var _cacheManagerJs = require("../cache/CacheManager.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ // Token renewal offset default in seconds
var DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;
var DEFAULT_SYSTEM_OPTIONS = {
    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,
    preventCorsPreflight: false,
    proxyUrl: ""
};
var DEFAULT_LOGGER_IMPLEMENTATION = {
    loggerCallback: function() {
    // allow users to not set loggerCallback
    },
    piiLoggingEnabled: false,
    logLevel: _loggerJs.LogLevel.Info,
    correlationId: ""
};
var DEFAULT_NETWORK_IMPLEMENTATION = {
    sendGetRequestAsync: function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var notImplErr;
            return _tslibJs.__generator(this, function(_a) {
                notImplErr = "Network interface - sendGetRequestAsync() has not been implemented";
                throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    sendPostRequestAsync: function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var notImplErr;
            return _tslibJs.__generator(this, function(_a) {
                notImplErr = "Network interface - sendPostRequestAsync() has not been implemented";
                throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
            });
        });
    }
};
var DEFAULT_LIBRARY_INFO = {
    sku: _constantsJs.Constants.SKU,
    version: _packageMetadataJs.version,
    cpu: "",
    os: ""
};
var DEFAULT_CLIENT_CREDENTIALS = {
    clientSecret: "",
    clientAssertion: undefined
};
var DEFAULT_AZURE_CLOUD_OPTIONS = {
    azureCloudInstance: _authorityOptionsJs.AzureCloudInstance.None,
    tenant: "" + _constantsJs.Constants.DEFAULT_COMMON_TENANT
};
/**
 * Function that sets the default options when not explicitly configured from app developer
 *
 * @param Configuration
 *
 * @returns Configuration
 */ function buildClientConfiguration(_a) {
    var userAuthOptions = _a.authOptions, userSystemOptions = _a.systemOptions, userLoggerOption = _a.loggerOptions, storageImplementation = _a.storageInterface, networkImplementation = _a.networkInterface, cryptoImplementation = _a.cryptoInterface, clientCredentials = _a.clientCredentials, libraryInfo = _a.libraryInfo, serverTelemetryManager = _a.serverTelemetryManager, persistencePlugin = _a.persistencePlugin, serializableCache = _a.serializableCache;
    var loggerOptions = _tslibJs.__assign(_tslibJs.__assign({
    }, DEFAULT_LOGGER_IMPLEMENTATION), userLoggerOption);
    return {
        authOptions: buildAuthOptions(userAuthOptions),
        systemOptions: _tslibJs.__assign(_tslibJs.__assign({
        }, DEFAULT_SYSTEM_OPTIONS), userSystemOptions),
        loggerOptions: loggerOptions,
        storageInterface: storageImplementation || new _cacheManagerJs.DefaultStorageClass(userAuthOptions.clientId, _icryptoJs.DEFAULT_CRYPTO_IMPLEMENTATION),
        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,
        cryptoInterface: cryptoImplementation || _icryptoJs.DEFAULT_CRYPTO_IMPLEMENTATION,
        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,
        libraryInfo: _tslibJs.__assign(_tslibJs.__assign({
        }, DEFAULT_LIBRARY_INFO), libraryInfo),
        serverTelemetryManager: serverTelemetryManager || null,
        persistencePlugin: persistencePlugin || null,
        serializableCache: serializableCache || null
    };
}
/**
 * Construct authoptions from the client and platform passed values
 * @param authOptions
 */ function buildAuthOptions(authOptions) {
    return _tslibJs.__assign({
        clientCapabilities: [],
        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS
    }, authOptions);
}

},{"../_virtual/_tslib.js":"9y6Jg","../crypto/ICrypto.js":"dM46z","../error/AuthError.js":"8SAdb","../logger/Logger.js":"lhvT9","../utils/Constants.js":"7OLHu","../packageMetadata.js":"4P6mk","../authority/AuthorityOptions.js":"78qjy","../cache/CacheManager.js":"lsT81","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dM46z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_CRYPTO_IMPLEMENTATION", ()=>DEFAULT_CRYPTO_IMPLEMENTATION
);
var _tslibJs = require("../_virtual/_tslib.js");
var _authErrorJs = require("../error/AuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var DEFAULT_CRYPTO_IMPLEMENTATION = {
    createNewGuid: function() {
        var notImplErr = "Crypto interface - createNewGuid() has not been implemented";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    },
    base64Decode: function() {
        var notImplErr = "Crypto interface - base64Decode() has not been implemented";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    },
    base64Encode: function() {
        var notImplErr = "Crypto interface - base64Encode() has not been implemented";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    },
    generatePkceCodes: function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var notImplErr;
            return _tslibJs.__generator(this, function(_a) {
                notImplErr = "Crypto interface - generatePkceCodes() has not been implemented";
                throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    getPublicKeyThumbprint: function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var notImplErr;
            return _tslibJs.__generator(this, function(_a) {
                notImplErr = "Crypto interface - getPublicKeyThumbprint() has not been implemented";
                throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    removeTokenBindingKey: function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var notImplErr;
            return _tslibJs.__generator(this, function(_a) {
                notImplErr = "Crypto interface - removeTokenBindingKey() has not been implemented";
                throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    clearKeystore: function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var notImplErr;
            return _tslibJs.__generator(this, function(_a) {
                notImplErr = "Crypto interface - clearKeystore() has not been implemented";
                throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    signJwt: function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var notImplErr;
            return _tslibJs.__generator(this, function(_a) {
                notImplErr = "Crypto interface - signJwt() has not been implemented";
                throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
            });
        });
    },
    hashString: function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var notImplErr;
            return _tslibJs.__generator(this, function(_a) {
                notImplErr = "Crypto interface - hashString() has not been implemented";
                throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
            });
        });
    }
};

},{"../_virtual/_tslib.js":"9y6Jg","../error/AuthError.js":"8SAdb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8SAdb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthError", ()=>AuthError
);
parcelHelpers.export(exports, "AuthErrorMessage", ()=>AuthErrorMessage
);
var _tslibJs = require("../_virtual/_tslib.js");
var _constantsJs = require("../utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * AuthErrorMessage class containing string constants used by error codes and messages.
 */ var AuthErrorMessage = {
    unexpectedError: {
        code: "unexpected_error",
        desc: "Unexpected error in authentication."
    }
};
/**
 * General error class thrown by the MSAL.js library.
 */ var AuthError = function(_super) {
    _tslibJs.__extends(AuthError1, _super);
    function AuthError1(errorCode, errorMessage, suberror) {
        var _this = this;
        var errorString = errorMessage ? errorCode + ": " + errorMessage : errorCode;
        _this = _super.call(this, errorString) || this;
        Object.setPrototypeOf(_this, AuthError1.prototype);
        _this.errorCode = errorCode || _constantsJs.Constants.EMPTY_STRING;
        _this.errorMessage = errorMessage || "";
        _this.subError = suberror || "";
        _this.name = "AuthError";
        return _this;
    }
    AuthError1.prototype.setCorrelationId = function(correlationId) {
        this.correlationId = correlationId;
    };
    /**
     * Creates an error that is thrown when something unexpected happens in the library.
     * @param errDesc
     */ AuthError1.createUnexpectedError = function(errDesc) {
        return new AuthError1(AuthErrorMessage.unexpectedError.code, AuthErrorMessage.unexpectedError.desc + ": " + errDesc);
    };
    return AuthError1;
}(Error);

},{"../_virtual/_tslib.js":"9y6Jg","../utils/Constants.js":"7OLHu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7OLHu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AADAuthorityConstants", ()=>AADAuthorityConstants
);
parcelHelpers.export(exports, "AADServerParamKeys", ()=>AADServerParamKeys
);
parcelHelpers.export(exports, "APP_METADATA", ()=>APP_METADATA
);
parcelHelpers.export(exports, "AUTHORITY_METADATA_CONSTANTS", ()=>AUTHORITY_METADATA_CONSTANTS
);
parcelHelpers.export(exports, "AuthenticationScheme", ()=>AuthenticationScheme
);
parcelHelpers.export(exports, "AuthorityMetadataSource", ()=>AuthorityMetadataSource
);
parcelHelpers.export(exports, "CLIENT_INFO", ()=>CLIENT_INFO
);
parcelHelpers.export(exports, "CacheAccountType", ()=>CacheAccountType
);
parcelHelpers.export(exports, "CacheOutcome", ()=>CacheOutcome
);
parcelHelpers.export(exports, "CacheSchemaType", ()=>CacheSchemaType
);
parcelHelpers.export(exports, "CacheType", ()=>CacheType
);
parcelHelpers.export(exports, "ClaimsRequestKeys", ()=>ClaimsRequestKeys
);
parcelHelpers.export(exports, "CodeChallengeMethodValues", ()=>CodeChallengeMethodValues
);
parcelHelpers.export(exports, "Constants", ()=>Constants
);
parcelHelpers.export(exports, "CredentialType", ()=>CredentialType
);
parcelHelpers.export(exports, "Errors", ()=>Errors
);
parcelHelpers.export(exports, "GrantType", ()=>GrantType
);
parcelHelpers.export(exports, "HeaderNames", ()=>HeaderNames
);
parcelHelpers.export(exports, "OIDC_DEFAULT_SCOPES", ()=>OIDC_DEFAULT_SCOPES
);
parcelHelpers.export(exports, "OIDC_SCOPES", ()=>OIDC_SCOPES
);
parcelHelpers.export(exports, "PasswordGrantConstants", ()=>PasswordGrantConstants
);
parcelHelpers.export(exports, "PersistentCacheKeys", ()=>PersistentCacheKeys
);
parcelHelpers.export(exports, "PromptValue", ()=>PromptValue
);
parcelHelpers.export(exports, "RegionDiscoveryOutcomes", ()=>RegionDiscoveryOutcomes
);
parcelHelpers.export(exports, "RegionDiscoverySources", ()=>RegionDiscoverySources
);
parcelHelpers.export(exports, "ResponseCodes", ()=>ResponseCodes
);
parcelHelpers.export(exports, "ResponseMode", ()=>ResponseMode
);
parcelHelpers.export(exports, "SERVER_TELEM_CONSTANTS", ()=>SERVER_TELEM_CONSTANTS
);
parcelHelpers.export(exports, "SSOTypes", ()=>SSOTypes
);
parcelHelpers.export(exports, "Separators", ()=>Separators
);
parcelHelpers.export(exports, "THE_FAMILY_ID", ()=>THE_FAMILY_ID
);
parcelHelpers.export(exports, "ThrottlingConstants", ()=>ThrottlingConstants
);
var _tslibJs = require("../_virtual/_tslib.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var Constants = {
    LIBRARY_NAME: "MSAL.JS",
    SKU: "msal.js.common",
    // Prefix for all library cache entries
    CACHE_PREFIX: "msal",
    // default authority
    DEFAULT_AUTHORITY: "https://login.microsoftonline.com/common/",
    DEFAULT_AUTHORITY_HOST: "login.microsoftonline.com",
    DEFAULT_COMMON_TENANT: "common",
    // ADFS String
    ADFS: "adfs",
    // Default AAD Instance Discovery Endpoint
    AAD_INSTANCE_DISCOVERY_ENDPT: "https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=",
    // Resource delimiter - used for certain cache entries
    RESOURCE_DELIM: "|",
    // Placeholder for non-existent account ids/objects
    NO_ACCOUNT: "NO_ACCOUNT",
    // Claims
    CLAIMS: "claims",
    // Consumer UTID
    CONSUMER_UTID: "9188040d-6c67-4c5b-b112-36a304b66dad",
    // Default scopes
    OPENID_SCOPE: "openid",
    PROFILE_SCOPE: "profile",
    OFFLINE_ACCESS_SCOPE: "offline_access",
    EMAIL_SCOPE: "email",
    // Default response type for authorization code flow
    CODE_RESPONSE_TYPE: "code",
    CODE_GRANT_TYPE: "authorization_code",
    RT_GRANT_TYPE: "refresh_token",
    FRAGMENT_RESPONSE_MODE: "fragment",
    S256_CODE_CHALLENGE_METHOD: "S256",
    URL_FORM_CONTENT_TYPE: "application/x-www-form-urlencoded;charset=utf-8",
    AUTHORIZATION_PENDING: "authorization_pending",
    NOT_DEFINED: "not_defined",
    EMPTY_STRING: "",
    FORWARD_SLASH: "/",
    IMDS_ENDPOINT: "http://169.254.169.254/metadata/instance/compute/location",
    IMDS_VERSION: "2020-06-01",
    IMDS_TIMEOUT: 2000,
    AZURE_REGION_AUTO_DISCOVER_FLAG: "TryAutoDetect",
    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: "login.microsoft.com",
    KNOWN_PUBLIC_CLOUDS: [
        "login.microsoftonline.com",
        "login.windows.net",
        "login.microsoft.com",
        "sts.windows.net"
    ]
};
var OIDC_DEFAULT_SCOPES = [
    Constants.OPENID_SCOPE,
    Constants.PROFILE_SCOPE,
    Constants.OFFLINE_ACCESS_SCOPE
];
var OIDC_SCOPES = _tslibJs.__spreadArrays(OIDC_DEFAULT_SCOPES, [
    Constants.EMAIL_SCOPE
]);
/**
 * Request header names
 */ var HeaderNames;
(function(HeaderNames1) {
    HeaderNames1["CONTENT_TYPE"] = "Content-Type";
    HeaderNames1["RETRY_AFTER"] = "Retry-After";
    HeaderNames1["CCS_HEADER"] = "X-AnchorMailbox";
    HeaderNames1["WWWAuthenticate"] = "WWW-Authenticate";
    HeaderNames1["AuthenticationInfo"] = "Authentication-Info";
})(HeaderNames || (HeaderNames = {
}));
/**
 * Persistent cache keys MSAL which stay while user is logged in.
 */ var PersistentCacheKeys;
(function(PersistentCacheKeys1) {
    PersistentCacheKeys1["ID_TOKEN"] = "idtoken";
    PersistentCacheKeys1["CLIENT_INFO"] = "client.info";
    PersistentCacheKeys1["ADAL_ID_TOKEN"] = "adal.idtoken";
    PersistentCacheKeys1["ERROR"] = "error";
    PersistentCacheKeys1["ERROR_DESC"] = "error.description";
    PersistentCacheKeys1["ACTIVE_ACCOUNT"] = "active-account";
})(PersistentCacheKeys || (PersistentCacheKeys = {
}));
/**
 * String constants related to AAD Authority
 */ var AADAuthorityConstants;
(function(AADAuthorityConstants1) {
    AADAuthorityConstants1["COMMON"] = "common";
    AADAuthorityConstants1["ORGANIZATIONS"] = "organizations";
    AADAuthorityConstants1["CONSUMERS"] = "consumers";
})(AADAuthorityConstants || (AADAuthorityConstants = {
}));
/**
 * Keys in the hashParams sent by AAD Server
 */ var AADServerParamKeys;
(function(AADServerParamKeys1) {
    AADServerParamKeys1["CLIENT_ID"] = "client_id";
    AADServerParamKeys1["REDIRECT_URI"] = "redirect_uri";
    AADServerParamKeys1["RESPONSE_TYPE"] = "response_type";
    AADServerParamKeys1["RESPONSE_MODE"] = "response_mode";
    AADServerParamKeys1["GRANT_TYPE"] = "grant_type";
    AADServerParamKeys1["CLAIMS"] = "claims";
    AADServerParamKeys1["SCOPE"] = "scope";
    AADServerParamKeys1["ERROR"] = "error";
    AADServerParamKeys1["ERROR_DESCRIPTION"] = "error_description";
    AADServerParamKeys1["ACCESS_TOKEN"] = "access_token";
    AADServerParamKeys1["ID_TOKEN"] = "id_token";
    AADServerParamKeys1["REFRESH_TOKEN"] = "refresh_token";
    AADServerParamKeys1["EXPIRES_IN"] = "expires_in";
    AADServerParamKeys1["STATE"] = "state";
    AADServerParamKeys1["NONCE"] = "nonce";
    AADServerParamKeys1["PROMPT"] = "prompt";
    AADServerParamKeys1["SESSION_STATE"] = "session_state";
    AADServerParamKeys1["CLIENT_INFO"] = "client_info";
    AADServerParamKeys1["CODE"] = "code";
    AADServerParamKeys1["CODE_CHALLENGE"] = "code_challenge";
    AADServerParamKeys1["CODE_CHALLENGE_METHOD"] = "code_challenge_method";
    AADServerParamKeys1["CODE_VERIFIER"] = "code_verifier";
    AADServerParamKeys1["CLIENT_REQUEST_ID"] = "client-request-id";
    AADServerParamKeys1["X_CLIENT_SKU"] = "x-client-SKU";
    AADServerParamKeys1["X_CLIENT_VER"] = "x-client-VER";
    AADServerParamKeys1["X_CLIENT_OS"] = "x-client-OS";
    AADServerParamKeys1["X_CLIENT_CPU"] = "x-client-CPU";
    AADServerParamKeys1["X_CLIENT_CURR_TELEM"] = "x-client-current-telemetry";
    AADServerParamKeys1["X_CLIENT_LAST_TELEM"] = "x-client-last-telemetry";
    AADServerParamKeys1["X_MS_LIB_CAPABILITY"] = "x-ms-lib-capability";
    AADServerParamKeys1["POST_LOGOUT_URI"] = "post_logout_redirect_uri";
    AADServerParamKeys1["ID_TOKEN_HINT"] = "id_token_hint";
    AADServerParamKeys1["DEVICE_CODE"] = "device_code";
    AADServerParamKeys1["CLIENT_SECRET"] = "client_secret";
    AADServerParamKeys1["CLIENT_ASSERTION"] = "client_assertion";
    AADServerParamKeys1["CLIENT_ASSERTION_TYPE"] = "client_assertion_type";
    AADServerParamKeys1["TOKEN_TYPE"] = "token_type";
    AADServerParamKeys1["REQ_CNF"] = "req_cnf";
    AADServerParamKeys1["OBO_ASSERTION"] = "assertion";
    AADServerParamKeys1["REQUESTED_TOKEN_USE"] = "requested_token_use";
    AADServerParamKeys1["ON_BEHALF_OF"] = "on_behalf_of";
    AADServerParamKeys1["FOCI"] = "foci";
    AADServerParamKeys1["CCS_HEADER"] = "X-AnchorMailbox";
    AADServerParamKeys1["RETURN_SPA_CODE"] = "return_spa_code";
    AADServerParamKeys1["LOGOUT_HINT"] = "logout_hint";
})(AADServerParamKeys || (AADServerParamKeys = {
}));
/**
 * Claims request keys
 */ var ClaimsRequestKeys;
(function(ClaimsRequestKeys1) {
    ClaimsRequestKeys1["ACCESS_TOKEN"] = "access_token";
    ClaimsRequestKeys1["XMS_CC"] = "xms_cc";
})(ClaimsRequestKeys || (ClaimsRequestKeys = {
}));
/**
 * we considered making this "enum" in the request instead of string, however it looks like the allowed list of
 * prompt values kept changing over past couple of years. There are some undocumented prompt values for some
 * internal partners too, hence the choice of generic "string" type instead of the "enum"
 */ var PromptValue = {
    LOGIN: "login",
    SELECT_ACCOUNT: "select_account",
    CONSENT: "consent",
    NONE: "none",
    CREATE: "create"
};
/**
 * SSO Types - generated to populate hints
 */ var SSOTypes;
(function(SSOTypes1) {
    SSOTypes1["ACCOUNT"] = "account";
    SSOTypes1["SID"] = "sid";
    SSOTypes1["LOGIN_HINT"] = "login_hint";
    SSOTypes1["ID_TOKEN"] = "id_token";
    SSOTypes1["DOMAIN_HINT"] = "domain_hint";
    SSOTypes1["ORGANIZATIONS"] = "organizations";
    SSOTypes1["CONSUMERS"] = "consumers";
    SSOTypes1["ACCOUNT_ID"] = "accountIdentifier";
    SSOTypes1["HOMEACCOUNT_ID"] = "homeAccountIdentifier";
})(SSOTypes || (SSOTypes = {
}));
/**
 * allowed values for codeVerifier
 */ var CodeChallengeMethodValues = {
    PLAIN: "plain",
    S256: "S256"
};
/**
 * allowed values for response_mode
 */ var ResponseMode;
(function(ResponseMode1) {
    ResponseMode1["QUERY"] = "query";
    ResponseMode1["FRAGMENT"] = "fragment";
    ResponseMode1["FORM_POST"] = "form_post";
})(ResponseMode || (ResponseMode = {
}));
/**
 * allowed grant_type
 */ var GrantType;
(function(GrantType1) {
    GrantType1["IMPLICIT_GRANT"] = "implicit";
    GrantType1["AUTHORIZATION_CODE_GRANT"] = "authorization_code";
    GrantType1["CLIENT_CREDENTIALS_GRANT"] = "client_credentials";
    GrantType1["RESOURCE_OWNER_PASSWORD_GRANT"] = "password";
    GrantType1["REFRESH_TOKEN_GRANT"] = "refresh_token";
    GrantType1["DEVICE_CODE_GRANT"] = "device_code";
    GrantType1["JWT_BEARER"] = "urn:ietf:params:oauth:grant-type:jwt-bearer";
})(GrantType || (GrantType = {
}));
/**
 * Account types in Cache
 */ var CacheAccountType;
(function(CacheAccountType1) {
    CacheAccountType1["MSSTS_ACCOUNT_TYPE"] = "MSSTS";
    CacheAccountType1["ADFS_ACCOUNT_TYPE"] = "ADFS";
    CacheAccountType1["MSAV1_ACCOUNT_TYPE"] = "MSA";
    CacheAccountType1["GENERIC_ACCOUNT_TYPE"] = "Generic"; // NTLM, Kerberos, FBA, Basic etc
})(CacheAccountType || (CacheAccountType = {
}));
/**
 * Separators used in cache
 */ var Separators;
(function(Separators1) {
    Separators1["CACHE_KEY_SEPARATOR"] = "-";
    Separators1["CLIENT_INFO_SEPARATOR"] = ".";
})(Separators || (Separators = {
}));
/**
 * Credential Type stored in the cache
 */ var CredentialType;
(function(CredentialType1) {
    CredentialType1["ID_TOKEN"] = "IdToken";
    CredentialType1["ACCESS_TOKEN"] = "AccessToken";
    CredentialType1["ACCESS_TOKEN_WITH_AUTH_SCHEME"] = "AccessToken_With_AuthScheme";
    CredentialType1["REFRESH_TOKEN"] = "RefreshToken";
})(CredentialType || (CredentialType = {
}));
/**
 * Credential Type stored in the cache
 */ var CacheSchemaType;
(function(CacheSchemaType1) {
    CacheSchemaType1["ACCOUNT"] = "Account";
    CacheSchemaType1["CREDENTIAL"] = "Credential";
    CacheSchemaType1["ID_TOKEN"] = "IdToken";
    CacheSchemaType1["ACCESS_TOKEN"] = "AccessToken";
    CacheSchemaType1["REFRESH_TOKEN"] = "RefreshToken";
    CacheSchemaType1["APP_METADATA"] = "AppMetadata";
    CacheSchemaType1["TEMPORARY"] = "TempCache";
    CacheSchemaType1["TELEMETRY"] = "Telemetry";
    CacheSchemaType1["UNDEFINED"] = "Undefined";
    CacheSchemaType1["THROTTLING"] = "Throttling";
})(CacheSchemaType || (CacheSchemaType = {
}));
/**
 * Combine all cache types
 */ var CacheType;
(function(CacheType1) {
    CacheType1[CacheType1["ADFS"] = 1001] = "ADFS";
    CacheType1[CacheType1["MSA"] = 1002] = "MSA";
    CacheType1[CacheType1["MSSTS"] = 1003] = "MSSTS";
    CacheType1[CacheType1["GENERIC"] = 1004] = "GENERIC";
    CacheType1[CacheType1["ACCESS_TOKEN"] = 2001] = "ACCESS_TOKEN";
    CacheType1[CacheType1["REFRESH_TOKEN"] = 2002] = "REFRESH_TOKEN";
    CacheType1[CacheType1["ID_TOKEN"] = 2003] = "ID_TOKEN";
    CacheType1[CacheType1["APP_METADATA"] = 3001] = "APP_METADATA";
    CacheType1[CacheType1["UNDEFINED"] = 9999] = "UNDEFINED";
})(CacheType || (CacheType = {
}));
/**
 * More Cache related constants
 */ var APP_METADATA = "appmetadata";
var CLIENT_INFO = "client_info";
var THE_FAMILY_ID = "1";
var AUTHORITY_METADATA_CONSTANTS = {
    CACHE_KEY: "authority-metadata",
    REFRESH_TIME_SECONDS: 86400 // 24 Hours
};
var AuthorityMetadataSource;
(function(AuthorityMetadataSource1) {
    AuthorityMetadataSource1["CONFIG"] = "config";
    AuthorityMetadataSource1["CACHE"] = "cache";
    AuthorityMetadataSource1["NETWORK"] = "network";
})(AuthorityMetadataSource || (AuthorityMetadataSource = {
}));
var SERVER_TELEM_CONSTANTS = {
    SCHEMA_VERSION: 5,
    MAX_CUR_HEADER_BYTES: 80,
    MAX_LAST_HEADER_BYTES: 330,
    MAX_CACHED_ERRORS: 50,
    CACHE_KEY: "server-telemetry",
    CATEGORY_SEPARATOR: "|",
    VALUE_SEPARATOR: ",",
    OVERFLOW_TRUE: "1",
    OVERFLOW_FALSE: "0",
    UNKNOWN_ERROR: "unknown_error"
};
/**
 * Type of the authentication request
 */ var AuthenticationScheme;
(function(AuthenticationScheme1) {
    AuthenticationScheme1["BEARER"] = "Bearer";
    AuthenticationScheme1["POP"] = "pop";
    AuthenticationScheme1["SSH"] = "ssh-cert";
})(AuthenticationScheme || (AuthenticationScheme = {
}));
/**
 * Constants related to throttling
 */ var ThrottlingConstants = {
    // Default time to throttle RequestThumbprint in seconds
    DEFAULT_THROTTLE_TIME_SECONDS: 60,
    // Default maximum time to throttle in seconds, overrides what the server sends back
    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,
    // Prefix for storing throttling entries
    THROTTLING_PREFIX: "throttling",
    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling
    X_MS_LIB_CAPABILITY_VALUE: "retry-after, h429"
};
var Errors = {
    INVALID_GRANT_ERROR: "invalid_grant",
    CLIENT_MISMATCH_ERROR: "client_mismatch"
};
/**
 * Password grant parameters
 */ var PasswordGrantConstants;
(function(PasswordGrantConstants1) {
    PasswordGrantConstants1["username"] = "username";
    PasswordGrantConstants1["password"] = "password";
})(PasswordGrantConstants || (PasswordGrantConstants = {
}));
/**
 * Response codes
 */ var ResponseCodes;
(function(ResponseCodes1) {
    ResponseCodes1[ResponseCodes1["httpSuccess"] = 200] = "httpSuccess";
    ResponseCodes1[ResponseCodes1["httpBadRequest"] = 400] = "httpBadRequest";
})(ResponseCodes || (ResponseCodes = {
}));
/**
 * Region Discovery Sources
 */ var RegionDiscoverySources;
(function(RegionDiscoverySources1) {
    RegionDiscoverySources1["FAILED_AUTO_DETECTION"] = "1";
    RegionDiscoverySources1["INTERNAL_CACHE"] = "2";
    RegionDiscoverySources1["ENVIRONMENT_VARIABLE"] = "3";
    RegionDiscoverySources1["IMDS"] = "4";
})(RegionDiscoverySources || (RegionDiscoverySources = {
}));
/**
 * Region Discovery Outcomes
 */ var RegionDiscoveryOutcomes;
(function(RegionDiscoveryOutcomes1) {
    RegionDiscoveryOutcomes1["CONFIGURED_MATCHES_DETECTED"] = "1";
    RegionDiscoveryOutcomes1["CONFIGURED_NO_AUTO_DETECTION"] = "2";
    RegionDiscoveryOutcomes1["CONFIGURED_NOT_DETECTED"] = "3";
    RegionDiscoveryOutcomes1["AUTO_DETECTION_REQUESTED_SUCCESSFUL"] = "4";
    RegionDiscoveryOutcomes1["AUTO_DETECTION_REQUESTED_FAILED"] = "5";
})(RegionDiscoveryOutcomes || (RegionDiscoveryOutcomes = {
}));
var CacheOutcome;
(function(CacheOutcome1) {
    CacheOutcome1["NO_CACHE_HIT"] = "0";
    CacheOutcome1["FORCE_REFRESH"] = "1";
    CacheOutcome1["NO_CACHED_ACCESS_TOKEN"] = "2";
    CacheOutcome1["CACHED_ACCESS_TOKEN_EXPIRED"] = "3";
    CacheOutcome1["REFRESH_CACHED_ACCESS_TOKEN"] = "4";
})(CacheOutcome || (CacheOutcome = {
}));

},{"../_virtual/_tslib.js":"9y6Jg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lhvT9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LogLevel", ()=>LogLevel
);
parcelHelpers.export(exports, "Logger", ()=>Logger
);
var _stringUtilsJs = require("../utils/StringUtils.js");
var _constantsJs = require("../utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Log message level.
 */ var LogLevel;
(function(LogLevel1) {
    LogLevel1[LogLevel1["Error"] = 0] = "Error";
    LogLevel1[LogLevel1["Warning"] = 1] = "Warning";
    LogLevel1[LogLevel1["Info"] = 2] = "Info";
    LogLevel1[LogLevel1["Verbose"] = 3] = "Verbose";
    LogLevel1[LogLevel1["Trace"] = 4] = "Trace";
})(LogLevel || (LogLevel = {
}));
/**
 * Class which facilitates logging of messages to a specific place.
 */ var Logger = function() {
    function Logger1(loggerOptions, packageName, packageVersion) {
        // Current log level, defaults to info.
        this.level = LogLevel.Info;
        var defaultLoggerCallback = function() {
            return;
        };
        this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;
        this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;
        this.level = typeof loggerOptions.logLevel === "number" ? loggerOptions.logLevel : LogLevel.Info;
        this.correlationId = loggerOptions.correlationId || "";
        this.packageName = packageName || _constantsJs.Constants.EMPTY_STRING;
        this.packageVersion = packageVersion || _constantsJs.Constants.EMPTY_STRING;
    }
    /**
     * Create new Logger with existing configurations.
     */ Logger1.prototype.clone = function(packageName, packageVersion, correlationId) {
        return new Logger1({
            loggerCallback: this.localCallback,
            piiLoggingEnabled: this.piiLoggingEnabled,
            logLevel: this.level,
            correlationId: correlationId || this.correlationId
        }, packageName, packageVersion);
    };
    /**
     * Log message with required options.
     */ Logger1.prototype.logMessage = function(logMessage, options) {
        if (options.logLevel > this.level || !this.piiLoggingEnabled && options.containsPii) return;
        var timestamp = new Date().toUTCString();
        // Add correlationId to logs if set, correlationId provided on log messages take precedence
        var logHeader;
        if (!_stringUtilsJs.StringUtils.isEmpty(options.correlationId)) logHeader = "[" + timestamp + "] : [" + options.correlationId + "]";
        else if (!_stringUtilsJs.StringUtils.isEmpty(this.correlationId)) logHeader = "[" + timestamp + "] : [" + this.correlationId + "]";
        else logHeader = "[" + timestamp + "]";
        var log = logHeader + " : " + this.packageName + "@" + this.packageVersion + " : " + LogLevel[options.logLevel] + " - " + logMessage;
        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? "-Pii": ""}${options.context ? `:${options.context}` : ""}`)(logMessage);
        this.executeCallback(options.logLevel, log, options.containsPii || false);
    };
    /**
     * Execute callback with message.
     */ Logger1.prototype.executeCallback = function(level, message, containsPii) {
        if (this.localCallback) this.localCallback(level, message, containsPii);
    };
    /**
     * Logs error messages.
     */ Logger1.prototype.error = function(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Error,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs error messages with PII.
     */ Logger1.prototype.errorPii = function(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Error,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs warning messages.
     */ Logger1.prototype.warning = function(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Warning,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs warning messages with PII.
     */ Logger1.prototype.warningPii = function(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Warning,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs info messages.
     */ Logger1.prototype.info = function(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Info,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs info messages with PII.
     */ Logger1.prototype.infoPii = function(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Info,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs verbose messages.
     */ Logger1.prototype.verbose = function(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Verbose,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs verbose messages with PII.
     */ Logger1.prototype.verbosePii = function(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Verbose,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs trace messages.
     */ Logger1.prototype.trace = function(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Trace,
            containsPii: false,
            correlationId: correlationId || ""
        });
    };
    /**
     * Logs trace messages with PII.
     */ Logger1.prototype.tracePii = function(message, correlationId) {
        this.logMessage(message, {
            logLevel: LogLevel.Trace,
            containsPii: true,
            correlationId: correlationId || ""
        });
    };
    /**
     * Returns whether PII Logging is enabled or not.
     */ Logger1.prototype.isPiiLoggingEnabled = function() {
        return this.piiLoggingEnabled || false;
    };
    return Logger1;
}();

},{"../utils/StringUtils.js":"2gXP4","../utils/Constants.js":"7OLHu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2gXP4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StringUtils", ()=>StringUtils
);
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * @hidden
 */ var StringUtils = function() {
    function StringUtils1() {
    }
    /**
     * decode a JWT
     *
     * @param authToken
     */ StringUtils1.decodeAuthToken = function(authToken) {
        if (StringUtils1.isEmpty(authToken)) throw _clientAuthErrorJs.ClientAuthError.createTokenNullOrEmptyError(authToken);
        var tokenPartsRegex = /^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/;
        var matches = tokenPartsRegex.exec(authToken);
        if (!matches || matches.length < 4) throw _clientAuthErrorJs.ClientAuthError.createTokenParsingError("Given token is malformed: " + JSON.stringify(authToken));
        var crackedToken = {
            header: matches[1],
            JWSPayload: matches[2],
            JWSSig: matches[3]
        };
        return crackedToken;
    };
    /**
     * Check if a string is empty.
     *
     * @param str
     */ StringUtils1.isEmpty = function(str) {
        return typeof str === "undefined" || !str || 0 === str.length;
    };
    /**
     * Check if stringified object is empty
     * @param strObj
     */ StringUtils1.isEmptyObj = function(strObj) {
        if (strObj && !StringUtils1.isEmpty(strObj)) try {
            var obj = JSON.parse(strObj);
            return Object.keys(obj).length === 0;
        } catch (e) {
        }
        return true;
    };
    StringUtils1.startsWith = function(str, search) {
        return str.indexOf(search) === 0;
    };
    StringUtils1.endsWith = function(str, search) {
        return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;
    };
    /**
     * Parses string into an object.
     *
     * @param query
     */ StringUtils1.queryStringToObject = function(query) {
        var obj = {
        };
        var params = query.split("&");
        var decode = function(s) {
            return decodeURIComponent(s.replace(/\+/g, " "));
        };
        params.forEach(function(pair) {
            if (pair.trim()) {
                var _a = pair.split(/=(.+)/g, 2), key = _a[0], value = _a[1]; // Split on the first occurence of the '=' character
                if (key && value) obj[decode(key)] = decode(value);
            }
        });
        return obj;
    };
    /**
     * Trims entries in an array.
     *
     * @param arr
     */ StringUtils1.trimArrayEntries = function(arr) {
        return arr.map(function(entry) {
            return entry.trim();
        });
    };
    /**
     * Removes empty strings from array
     * @param arr
     */ StringUtils1.removeEmptyStringsFromArray = function(arr) {
        return arr.filter(function(entry) {
            return !StringUtils1.isEmpty(entry);
        });
    };
    /**
     * Attempts to parse a string into JSON
     * @param str
     */ StringUtils1.jsonParseHelper = function(str) {
        try {
            return JSON.parse(str);
        } catch (e) {
            return null;
        }
    };
    /**
     * Tests if a given string matches a given pattern, with support for wildcards and queries.
     * @param pattern Wildcard pattern to string match. Supports "*" for wildcards and "?" for queries
     * @param input String to match against
     */ StringUtils1.matchPattern = function(pattern, input) {
        /**
         * Wildcard support: https://stackoverflow.com/a/3117248/4888559
         * Queries: replaces "?" in string with escaped "\?" for regex test
         */ var regex = new RegExp(pattern.replace(/\\/g, "\\\\").replace(/\*/g, "[^ ]*").replace(/\?/g, "\\\?")); // eslint-disable-line security/detect-non-literal-regexp
        return regex.test(input);
    };
    return StringUtils1;
}();

},{"../error/ClientAuthError.js":"jz6JJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jz6JJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClientAuthError", ()=>ClientAuthError
);
parcelHelpers.export(exports, "ClientAuthErrorMessage", ()=>ClientAuthErrorMessage
);
var _tslibJs = require("../_virtual/_tslib.js");
var _authErrorJs = require("./AuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * ClientAuthErrorMessage class containing string constants used by error codes and messages.
 */ var ClientAuthErrorMessage = {
    clientInfoDecodingError: {
        code: "client_info_decoding_error",
        desc: "The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause."
    },
    clientInfoEmptyError: {
        code: "client_info_empty_error",
        desc: "The client info was empty. Please review the trace to determine the root cause."
    },
    tokenParsingError: {
        code: "token_parsing_error",
        desc: "Token cannot be parsed. Please review stack trace to determine root cause."
    },
    nullOrEmptyToken: {
        code: "null_or_empty_token",
        desc: "The token is null or empty. Please review the trace to determine the root cause."
    },
    endpointResolutionError: {
        code: "endpoints_resolution_error",
        desc: "Error: could not resolve endpoints. Please check network and try again."
    },
    networkError: {
        code: "network_error",
        desc: "Network request failed. Please check network trace to determine root cause."
    },
    unableToGetOpenidConfigError: {
        code: "openid_config_error",
        desc: "Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints."
    },
    hashNotDeserialized: {
        code: "hash_not_deserialized",
        desc: "The hash parameters could not be deserialized. Please review the trace to determine the root cause."
    },
    blankGuidGenerated: {
        code: "blank_guid_generated",
        desc: "The guid generated was blank. Please review the trace to determine the root cause."
    },
    invalidStateError: {
        code: "invalid_state",
        desc: "State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState()."
    },
    stateMismatchError: {
        code: "state_mismatch",
        desc: "State mismatch error. Please check your network. Continued requests may cause cache overflow."
    },
    stateNotFoundError: {
        code: "state_not_found",
        desc: "State not found"
    },
    nonceMismatchError: {
        code: "nonce_mismatch",
        desc: "Nonce mismatch error. This may be caused by a race condition in concurrent requests."
    },
    nonceNotFoundError: {
        code: "nonce_not_found",
        desc: "nonce not found"
    },
    noTokensFoundError: {
        code: "no_tokens_found",
        desc: "No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken()."
    },
    multipleMatchingTokens: {
        code: "multiple_matching_tokens",
        desc: "The cache contains multiple tokens satisfying the requirements. Call AcquireToken again providing more requirements such as authority or account."
    },
    multipleMatchingAccounts: {
        code: "multiple_matching_accounts",
        desc: "The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account"
    },
    multipleMatchingAppMetadata: {
        code: "multiple_matching_appMetadata",
        desc: "The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata"
    },
    tokenRequestCannotBeMade: {
        code: "request_cannot_be_made",
        desc: "Token request cannot be made without authorization code or refresh token."
    },
    appendEmptyScopeError: {
        code: "cannot_append_empty_scope",
        desc: "Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info."
    },
    removeEmptyScopeError: {
        code: "cannot_remove_empty_scope",
        desc: "Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info."
    },
    appendScopeSetError: {
        code: "cannot_append_scopeset",
        desc: "Cannot append ScopeSet due to error."
    },
    emptyInputScopeSetError: {
        code: "empty_input_scopeset",
        desc: "Empty input ScopeSet cannot be processed."
    },
    DeviceCodePollingCancelled: {
        code: "device_code_polling_cancelled",
        desc: "Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true."
    },
    DeviceCodeExpired: {
        code: "device_code_expired",
        desc: "Device code is expired."
    },
    DeviceCodeUnknownError: {
        code: "device_code_unknown_error",
        desc: "Device code stopped polling for unknown reasons."
    },
    NoAccountInSilentRequest: {
        code: "no_account_in_silent_request",
        desc: "Please pass an account object, silent flow is not supported without account information"
    },
    invalidCacheRecord: {
        code: "invalid_cache_record",
        desc: "Cache record object was null or undefined."
    },
    invalidCacheEnvironment: {
        code: "invalid_cache_environment",
        desc: "Invalid environment when attempting to create cache entry"
    },
    noAccountFound: {
        code: "no_account_found",
        desc: "No account found in cache for given key."
    },
    CachePluginError: {
        code: "no cache plugin set on CacheManager",
        desc: "ICachePlugin needs to be set before using readFromStorage or writeFromStorage"
    },
    noCryptoObj: {
        code: "no_crypto_object",
        desc: "No crypto object detected. This is required for the following operation: "
    },
    invalidCacheType: {
        code: "invalid_cache_type",
        desc: "Invalid cache type"
    },
    unexpectedAccountType: {
        code: "unexpected_account_type",
        desc: "Unexpected account type."
    },
    unexpectedCredentialType: {
        code: "unexpected_credential_type",
        desc: "Unexpected credential type."
    },
    invalidAssertion: {
        code: "invalid_assertion",
        desc: "Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515"
    },
    invalidClientCredential: {
        code: "invalid_client_credential",
        desc: "Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential"
    },
    tokenRefreshRequired: {
        code: "token_refresh_required",
        desc: "Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired."
    },
    userTimeoutReached: {
        code: "user_timeout_reached",
        desc: "User defined timeout for device code polling reached"
    },
    tokenClaimsRequired: {
        code: "token_claims_cnf_required_for_signedjwt",
        desc: "Cannot generate a POP jwt if the token_claims are not populated"
    },
    noAuthorizationCodeFromServer: {
        code: "authorization_code_missing_from_server_response",
        desc: "Server response does not contain an authorization code to proceed"
    },
    noAzureRegionDetected: {
        code: "no_azure_region_detected",
        desc: "No azure region was detected and no fallback was made available"
    },
    accessTokenEntityNullError: {
        code: "access_token_entity_null",
        desc: "Access token entity is null, please check logs and cache to ensure a valid access token is present."
    },
    bindingKeyNotRemovedError: {
        code: "binding_key_not_removed",
        desc: "Could not remove the credential's binding key from storage."
    },
    logoutNotSupported: {
        code: "end_session_endpoint_not_supported",
        desc: "Provided authority does not support logout."
    }
};
/**
 * Error thrown when there is an error in the client code running on the browser.
 */ var ClientAuthError = function(_super) {
    _tslibJs.__extends(ClientAuthError1, _super);
    function ClientAuthError1(errorCode, errorMessage) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        _this.name = "ClientAuthError";
        Object.setPrototypeOf(_this, ClientAuthError1.prototype);
        return _this;
    }
    /**
     * Creates an error thrown when client info object doesn't decode correctly.
     * @param caughtError
     */ ClientAuthError1.createClientInfoDecodingError = function(caughtError) {
        return new ClientAuthError1(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + " Failed with error: " + caughtError);
    };
    /**
     * Creates an error thrown if the client info is empty.
     * @param rawClientInfo
     */ ClientAuthError1.createClientInfoEmptyError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.clientInfoEmptyError.code, "" + ClientAuthErrorMessage.clientInfoEmptyError.desc);
    };
    /**
     * Creates an error thrown when the id token extraction errors out.
     * @param err
     */ ClientAuthError1.createTokenParsingError = function(caughtExtractionError) {
        return new ClientAuthError1(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + " Failed with error: " + caughtExtractionError);
    };
    /**
     * Creates an error thrown when the id token string is null or empty.
     * @param invalidRawTokenString
     */ ClientAuthError1.createTokenNullOrEmptyError = function(invalidRawTokenString) {
        return new ClientAuthError1(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + " Raw Token Value: " + invalidRawTokenString);
    };
    /**
     * Creates an error thrown when the endpoint discovery doesn't complete correctly.
     */ ClientAuthError1.createEndpointDiscoveryIncompleteError = function(errDetail) {
        return new ClientAuthError1(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + " Detail: " + errDetail);
    };
    /**
     * Creates an error thrown when the fetch client throws
     */ ClientAuthError1.createNetworkError = function(endpoint, errDetail) {
        return new ClientAuthError1(ClientAuthErrorMessage.networkError.code, ClientAuthErrorMessage.networkError.desc + " | Fetch client threw: " + errDetail + " | Attempted to reach: " + endpoint.split("?")[0]);
    };
    /**
     * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data
     */ ClientAuthError1.createUnableToGetOpenidConfigError = function(errDetail) {
        return new ClientAuthError1(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, ClientAuthErrorMessage.unableToGetOpenidConfigError.desc + " Attempted to retrieve endpoints from: " + errDetail);
    };
    /**
     * Creates an error thrown when the hash cannot be deserialized.
     * @param hashParamObj
     */ ClientAuthError1.createHashNotDeserializedError = function(hashParamObj) {
        return new ClientAuthError1(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + " Given Object: " + hashParamObj);
    };
    /**
     * Creates an error thrown when the state cannot be parsed.
     * @param invalidState
     */ ClientAuthError1.createInvalidStateError = function(invalidState, errorString) {
        return new ClientAuthError1(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + " Invalid State: " + invalidState + ", Root Err: " + errorString);
    };
    /**
     * Creates an error thrown when two states do not match.
     */ ClientAuthError1.createStateMismatchError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);
    };
    /**
     * Creates an error thrown when the state is not present
     * @param missingState
     */ ClientAuthError1.createStateNotFoundError = function(missingState) {
        return new ClientAuthError1(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + ":  " + missingState);
    };
    /**
     * Creates an error thrown when the nonce does not match.
     */ ClientAuthError1.createNonceMismatchError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);
    };
    /**
     * Creates an error thrown when the mnonce is not present
     * @param missingNonce
     */ ClientAuthError1.createNonceNotFoundError = function(missingNonce) {
        return new ClientAuthError1(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + ":  " + missingNonce);
    };
    /**
     * Throws error when multiple tokens are in cache.
     */ ClientAuthError1.createMultipleMatchingTokensInCacheError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + ".");
    };
    /**
     * Throws error when multiple accounts are in cache for the given params
     */ ClientAuthError1.createMultipleMatchingAccountsInCacheError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);
    };
    /**
     * Throws error when multiple appMetada are in cache for the given clientId.
     */ ClientAuthError1.createMultipleMatchingAppMetadataInCacheError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);
    };
    /**
     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.
     */ ClientAuthError1.createTokenRequestCannotBeMadeError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);
    };
    /**
     * Throws error when attempting to append a null, undefined or empty scope to a set
     * @param givenScope
     */ ClientAuthError1.createAppendEmptyScopeToSetError = function(givenScope) {
        return new ClientAuthError1(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + " Given Scope: " + givenScope);
    };
    /**
     * Throws error when attempting to append a null, undefined or empty scope to a set
     * @param givenScope
     */ ClientAuthError1.createRemoveEmptyScopeFromSetError = function(givenScope) {
        return new ClientAuthError1(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + " Given Scope: " + givenScope);
    };
    /**
     * Throws error when attempting to append null or empty ScopeSet.
     * @param appendError
     */ ClientAuthError1.createAppendScopeSetError = function(appendError) {
        return new ClientAuthError1(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + " Detail Error: " + appendError);
    };
    /**
     * Throws error if ScopeSet is null or undefined.
     * @param givenScopeSet
     */ ClientAuthError1.createEmptyInputScopeSetError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.emptyInputScopeSetError.code, "" + ClientAuthErrorMessage.emptyInputScopeSetError.desc);
    };
    /**
     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow
     */ ClientAuthError1.createDeviceCodeCancelledError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, "" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);
    };
    /**
     * Throws error if device code is expired
     */ ClientAuthError1.createDeviceCodeExpiredError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.DeviceCodeExpired.code, "" + ClientAuthErrorMessage.DeviceCodeExpired.desc);
    };
    /**
     * Throws error if device code is expired
     */ ClientAuthError1.createDeviceCodeUnknownError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.DeviceCodeUnknownError.code, "" + ClientAuthErrorMessage.DeviceCodeUnknownError.desc);
    };
    /**
     * Throws error when silent requests are made without an account object
     */ ClientAuthError1.createNoAccountInSilentRequestError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.NoAccountInSilentRequest.code, "" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);
    };
    /**
     * Throws error when cache record is null or undefined.
     */ ClientAuthError1.createNullOrUndefinedCacheRecord = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);
    };
    /**
     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object
     */ ClientAuthError1.createInvalidCacheEnvironmentError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);
    };
    /**
     * Throws error when account is not found in cache.
     */ ClientAuthError1.createNoAccountFoundError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);
    };
    /**
     * Throws error if ICachePlugin not set on CacheManager.
     */ ClientAuthError1.createCachePluginError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.CachePluginError.code, "" + ClientAuthErrorMessage.CachePluginError.desc);
    };
    /**
     * Throws error if crypto object not found.
     * @param operationName
     */ ClientAuthError1.createNoCryptoObjectError = function(operationName) {
        return new ClientAuthError1(ClientAuthErrorMessage.noCryptoObj.code, "" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);
    };
    /**
     * Throws error if cache type is invalid.
     */ ClientAuthError1.createInvalidCacheTypeError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.invalidCacheType.code, "" + ClientAuthErrorMessage.invalidCacheType.desc);
    };
    /**
     * Throws error if unexpected account type.
     */ ClientAuthError1.createUnexpectedAccountTypeError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.unexpectedAccountType.code, "" + ClientAuthErrorMessage.unexpectedAccountType.desc);
    };
    /**
     * Throws error if unexpected credential type.
     */ ClientAuthError1.createUnexpectedCredentialTypeError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.unexpectedCredentialType.code, "" + ClientAuthErrorMessage.unexpectedCredentialType.desc);
    };
    /**
     * Throws error if client assertion is not valid.
     */ ClientAuthError1.createInvalidAssertionError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.invalidAssertion.code, "" + ClientAuthErrorMessage.invalidAssertion.desc);
    };
    /**
     * Throws error if client assertion is not valid.
     */ ClientAuthError1.createInvalidCredentialError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.invalidClientCredential.code, "" + ClientAuthErrorMessage.invalidClientCredential.desc);
    };
    /**
     * Throws error if token cannot be retrieved from cache due to refresh being required.
     */ ClientAuthError1.createRefreshRequiredError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);
    };
    /**
     * Throws error if the user defined timeout is reached.
     */ ClientAuthError1.createUserTimeoutReachedError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);
    };
    /*
     * Throws error if token claims are not populated for a signed jwt generation
     */ ClientAuthError1.createTokenClaimsRequiredError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);
    };
    /**
     * Throws error when the authorization code is missing from the server response
     */ ClientAuthError1.createNoAuthCodeInServerResponseError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);
    };
    ClientAuthError1.createBindingKeyNotRemovedError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.bindingKeyNotRemovedError.code, ClientAuthErrorMessage.bindingKeyNotRemovedError.desc);
    };
    /**
     * Thrown when logout is attempted for an authority that doesnt have an end_session_endpoint
     */ ClientAuthError1.createLogoutNotSupportedError = function() {
        return new ClientAuthError1(ClientAuthErrorMessage.logoutNotSupported.code, ClientAuthErrorMessage.logoutNotSupported.desc);
    };
    return ClientAuthError1;
}(_authErrorJs.AuthError);

},{"../_virtual/_tslib.js":"9y6Jg","./AuthError.js":"8SAdb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4P6mk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "name", ()=>name
);
parcelHelpers.export(exports, "version", ()=>version
);
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/* eslint-disable header/header */ var name = "@azure/msal-common";
var version = "6.1.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"78qjy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AzureCloudInstance", ()=>AzureCloudInstance
);
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var AzureCloudInstance;
(function(AzureCloudInstance1) {
    // AzureCloudInstance is not specified.
    AzureCloudInstance1[AzureCloudInstance1["None"] = 0] = "None";
    // Microsoft Azure public cloud
    AzureCloudInstance1["AzurePublic"] = "https://login.microsoftonline.com";
    // Microsoft Chinese national cloud
    AzureCloudInstance1["AzureChina"] = "https://login.chinacloudapi.cn";
    // Microsoft German national cloud ("Black Forest")
    AzureCloudInstance1["AzureGermany"] = "https://login.microsoftonline.de";
    // US Government cloud
    AzureCloudInstance1["AzureUsGovernment"] = "https://login.microsoftonline.us";
})(AzureCloudInstance || (AzureCloudInstance = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lsT81":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CacheManager", ()=>CacheManager
);
parcelHelpers.export(exports, "DefaultStorageClass", ()=>DefaultStorageClass
);
var _tslibJs = require("../_virtual/_tslib.js");
var _constantsJs = require("../utils/Constants.js");
var _credentialEntityJs = require("./entities/CredentialEntity.js");
var _scopeSetJs = require("../request/ScopeSet.js");
var _accountEntityJs = require("./entities/AccountEntity.js");
var _authErrorJs = require("../error/AuthError.js");
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
var _authTokenJs = require("../account/AuthToken.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.
 */ var CacheManager = function() {
    function CacheManager1(clientId, cryptoImpl) {
        this.clientId = clientId;
        this.cryptoImpl = cryptoImpl;
    }
    /**
     * Returns all accounts in cache
     */ CacheManager1.prototype.getAllAccounts = function() {
        var _this = this;
        var currentAccounts = this.getAccountsFilteredBy();
        var accountValues = Object.keys(currentAccounts).map(function(accountKey) {
            return currentAccounts[accountKey];
        });
        var numAccounts = accountValues.length;
        if (numAccounts < 1) return [];
        else {
            var allAccounts = accountValues.map(function(value) {
                var accountEntity = CacheManager1.toObject(new _accountEntityJs.AccountEntity(), value);
                var accountInfo = accountEntity.getAccountInfo();
                var idToken = _this.readIdTokenFromCache(_this.clientId, accountInfo);
                if (idToken && !accountInfo.idTokenClaims) accountInfo.idTokenClaims = new _authTokenJs.AuthToken(idToken.secret, _this.cryptoImpl).claims;
                return accountInfo;
            });
            return allAccounts;
        }
    };
    /**
     * saves a cache record
     * @param cacheRecord
     */ CacheManager1.prototype.saveCacheRecord = function(cacheRecord) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!cacheRecord) throw _clientAuthErrorJs.ClientAuthError.createNullOrUndefinedCacheRecord();
                        if (!!cacheRecord.account) this.setAccount(cacheRecord.account);
                        if (!!cacheRecord.idToken) this.setIdTokenCredential(cacheRecord.idToken);
                        if (!!!cacheRecord.accessToken) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            this.saveAccessToken(cacheRecord.accessToken)
                        ];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!!cacheRecord.refreshToken) this.setRefreshTokenCredential(cacheRecord.refreshToken);
                        if (!!cacheRecord.appMetadata) this.setAppMetadata(cacheRecord.appMetadata);
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * saves access token credential
     * @param credential
     */ CacheManager1.prototype.saveAccessToken = function(credential) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var currentTokenCache, currentScopes, currentAccessTokens, removedAccessTokens_1;
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        currentTokenCache = this.getCredentialsFilteredBy({
                            clientId: credential.clientId,
                            credentialType: credential.credentialType,
                            environment: credential.environment,
                            homeAccountId: credential.homeAccountId,
                            realm: credential.realm,
                            tokenType: credential.tokenType,
                            requestedClaimsHash: credential.requestedClaimsHash
                        });
                        currentScopes = _scopeSetJs.ScopeSet.fromString(credential.target);
                        currentAccessTokens = Object.keys(currentTokenCache.accessTokens).map(function(key) {
                            return currentTokenCache.accessTokens[key];
                        });
                        if (!currentAccessTokens) return [
                            3 /*break*/ ,
                            2
                        ];
                        removedAccessTokens_1 = [];
                        currentAccessTokens.forEach(function(tokenEntity) {
                            var tokenScopeSet = _scopeSetJs.ScopeSet.fromString(tokenEntity.target);
                            if (tokenScopeSet.intersectingScopeSets(currentScopes)) removedAccessTokens_1.push(_this.removeCredential(tokenEntity));
                        });
                        return [
                            4 /*yield*/ ,
                            Promise.all(removedAccessTokens_1)
                        ];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.setAccessTokenCredential(credential);
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * retrieve accounts matching all provided filters; if no filter is set, get all accounts
     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared
     * @param homeAccountId
     * @param environment
     * @param realm
     */ CacheManager1.prototype.getAccountsFilteredBy = function(accountFilter) {
        return this.getAccountsFilteredByInternal(accountFilter ? accountFilter.homeAccountId : "", accountFilter ? accountFilter.environment : "", accountFilter ? accountFilter.realm : "");
    };
    /**
     * retrieve accounts matching all provided filters; if no filter is set, get all accounts
     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared
     * @param homeAccountId
     * @param environment
     * @param realm
     */ CacheManager1.prototype.getAccountsFilteredByInternal = function(homeAccountId, environment, realm) {
        var _this = this;
        var allCacheKeys = this.getKeys();
        var matchingAccounts = {
        };
        allCacheKeys.forEach(function(cacheKey) {
            var entity = _this.getAccount(cacheKey);
            if (!entity) return;
            if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) return;
            if (!!environment && !_this.matchEnvironment(entity, environment)) return;
            if (!!realm && !_this.matchRealm(entity, realm)) return;
            matchingAccounts[cacheKey] = entity;
        });
        return matchingAccounts;
    };
    /**
     * retrieve credentails matching all provided filters; if no filter is set, get all credentials
     * @param homeAccountId
     * @param environment
     * @param credentialType
     * @param clientId
     * @param realm
     * @param target
     */ CacheManager1.prototype.getCredentialsFilteredBy = function(filter) {
        return this.getCredentialsFilteredByInternal(filter.homeAccountId, filter.environment, filter.credentialType, filter.clientId, filter.familyId, filter.realm, filter.target, filter.oboAssertion, filter.tokenType, filter.keyId, filter.requestedClaimsHash);
    };
    /**
     * Support function to help match credentials
     * @param homeAccountId
     * @param environment
     * @param credentialType
     * @param clientId
     * @param realm
     * @param target
     * @param oboAssertion
     * @param tokenType
     */ CacheManager1.prototype.getCredentialsFilteredByInternal = function(homeAccountId, environment, credentialType, clientId, familyId, realm, target, oboAssertion, tokenType, keyId, requestedClaimsHash) {
        var _this = this;
        var allCacheKeys = this.getKeys();
        var matchingCredentials = {
            idTokens: {
            },
            accessTokens: {
            },
            refreshTokens: {
            }
        };
        allCacheKeys.forEach(function(cacheKey) {
            // don't parse any non-credential type cache entities
            var credType = _credentialEntityJs.CredentialEntity.getCredentialType(cacheKey);
            if (credType === _constantsJs.Constants.NOT_DEFINED) return;
            // Attempt retrieval
            var entity = _this.getSpecificCredential(cacheKey, credType);
            if (!entity) return;
            if (!!oboAssertion && !_this.matchOboAssertion(entity, oboAssertion)) return;
            if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) return;
            if (!!environment && !_this.matchEnvironment(entity, environment)) return;
            if (!!realm && !_this.matchRealm(entity, realm)) return;
            if (!!credentialType && !_this.matchCredentialType(entity, credentialType)) return;
            if (!!clientId && !_this.matchClientId(entity, clientId)) return;
            if (!!familyId && !_this.matchFamilyId(entity, familyId)) return;
            /*
             * idTokens do not have "target", target specific refreshTokens do exist for some types of authentication
             * Resource specific refresh tokens case will be added when the support is deemed necessary
             */ if (!!target && !_this.matchTarget(entity, target)) return;
            // If request OR cached entity has requested Claims Hash, check if they match
            if (requestedClaimsHash || entity.requestedClaimsHash) {
                // Don't match if either is undefined or they are different
                if (entity.requestedClaimsHash !== requestedClaimsHash) return;
            }
            // Access Token with Auth Scheme specific matching
            if (credentialType === _constantsJs.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {
                if (!!tokenType && !_this.matchTokenType(entity, tokenType)) return;
                // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key
                if (tokenType === _constantsJs.AuthenticationScheme.SSH) {
                    if (keyId && !_this.matchKeyId(entity, keyId)) return;
                }
            }
            // At this point, the entity matches the request, update cache key if key schema has changed
            var updatedCacheKey = _this.updateCredentialCacheKey(cacheKey, entity);
            switch(credType){
                case _constantsJs.CredentialType.ID_TOKEN:
                    matchingCredentials.idTokens[updatedCacheKey] = entity;
                    break;
                case _constantsJs.CredentialType.ACCESS_TOKEN:
                case _constantsJs.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:
                    matchingCredentials.accessTokens[updatedCacheKey] = entity;
                    break;
                case _constantsJs.CredentialType.REFRESH_TOKEN:
                    matchingCredentials.refreshTokens[updatedCacheKey] = entity;
                    break;
            }
        });
        return matchingCredentials;
    };
    /**
     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata
     * @param filter
     */ CacheManager1.prototype.getAppMetadataFilteredBy = function(filter) {
        return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);
    };
    /**
     * Support function to help match appMetadata
     * @param environment
     * @param clientId
     */ CacheManager1.prototype.getAppMetadataFilteredByInternal = function(environment, clientId) {
        var _this = this;
        var allCacheKeys = this.getKeys();
        var matchingAppMetadata = {
        };
        allCacheKeys.forEach(function(cacheKey) {
            // don't parse any non-appMetadata type cache entities
            if (!_this.isAppMetadata(cacheKey)) return;
            // Attempt retrieval
            var entity = _this.getAppMetadata(cacheKey);
            if (!entity) return;
            if (!!environment && !_this.matchEnvironment(entity, environment)) return;
            if (!!clientId && !_this.matchClientId(entity, clientId)) return;
            matchingAppMetadata[cacheKey] = entity;
        });
        return matchingAppMetadata;
    };
    /**
     * retrieve authorityMetadata that contains a matching alias
     * @param filter
     */ CacheManager1.prototype.getAuthorityMetadataByAlias = function(host) {
        var _this = this;
        var allCacheKeys = this.getAuthorityMetadataKeys();
        var matchedEntity = null;
        allCacheKeys.forEach(function(cacheKey) {
            // don't parse any non-authorityMetadata type cache entities
            if (!_this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(_this.clientId) === -1) return;
            // Attempt retrieval
            var entity = _this.getAuthorityMetadata(cacheKey);
            if (!entity) return;
            if (entity.aliases.indexOf(host) === -1) return;
            matchedEntity = entity;
        });
        return matchedEntity;
    };
    /**
     * Removes all accounts and related tokens from cache.
     */ CacheManager1.prototype.removeAllAccounts = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var allCacheKeys, removedAccounts;
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        allCacheKeys = this.getKeys();
                        removedAccounts = [];
                        allCacheKeys.forEach(function(cacheKey) {
                            var entity = _this.getAccount(cacheKey);
                            if (!entity) return;
                            removedAccounts.push(_this.removeAccount(cacheKey));
                        });
                        return [
                            4 /*yield*/ ,
                            Promise.all(removedAccounts)
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            true
                        ];
                }
            });
        });
    };
    /**
     * returns a boolean if the given account is removed
     * @param account
     */ CacheManager1.prototype.removeAccount = function(accountKey) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var account;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        account = this.getAccount(accountKey);
                        if (!account) throw _clientAuthErrorJs.ClientAuthError.createNoAccountFoundError();
                        return [
                            4 /*yield*/ ,
                            this.removeAccountContext(account)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a.sent() && this.removeItem(accountKey, _constantsJs.CacheSchemaType.ACCOUNT)
                        ];
                }
            });
        });
    };
    /**
     * returns a boolean if the given account is removed
     * @param account
     */ CacheManager1.prototype.removeAccountContext = function(account) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var allCacheKeys, accountId, removedCredentials;
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        allCacheKeys = this.getKeys();
                        accountId = account.generateAccountId();
                        removedCredentials = [];
                        allCacheKeys.forEach(function(cacheKey) {
                            // don't parse any non-credential type cache entities
                            var credType = _credentialEntityJs.CredentialEntity.getCredentialType(cacheKey);
                            if (credType === _constantsJs.Constants.NOT_DEFINED) return;
                            var cacheEntity = _this.getSpecificCredential(cacheKey, credType);
                            if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) removedCredentials.push(_this.removeCredential(cacheEntity));
                        });
                        return [
                            4 /*yield*/ ,
                            Promise.all(removedCredentials)
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            true
                        ];
                }
            });
        });
    };
    /**
     * returns a boolean if the given credential is removed
     * @param credential
     */ CacheManager1.prototype.removeCredential = function(credential) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var key, accessTokenWithAuthSchemeEntity, kid;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        key = credential.generateCredentialKey();
                        if (!(credential.credentialType.toLowerCase() === _constantsJs.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase())) return [
                            3 /*break*/ ,
                            4
                        ];
                        if (!(credential.tokenType === _constantsJs.AuthenticationScheme.POP)) return [
                            3 /*break*/ ,
                            4
                        ];
                        accessTokenWithAuthSchemeEntity = credential;
                        kid = accessTokenWithAuthSchemeEntity.keyId;
                        if (!kid) return [
                            3 /*break*/ ,
                            4
                        ];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.cryptoImpl.removeTokenBindingKey(kid)
                        ];
                    case 2:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        _a.sent();
                        throw _clientAuthErrorJs.ClientAuthError.createBindingKeyNotRemovedError();
                    case 4:
                        return [
                            2 /*return*/ ,
                            this.removeItem(key, _constantsJs.CacheSchemaType.CREDENTIAL)
                        ];
                }
            });
        });
    };
    /**
     * Removes all app metadata objects from cache.
     */ CacheManager1.prototype.removeAppMetadata = function() {
        var _this = this;
        var allCacheKeys = this.getKeys();
        allCacheKeys.forEach(function(cacheKey) {
            if (_this.isAppMetadata(cacheKey)) _this.removeItem(cacheKey, _constantsJs.CacheSchemaType.APP_METADATA);
        });
        return true;
    };
    /**
     * Retrieve the cached credentials into a cacherecord
     * @param account
     * @param clientId
     * @param scopes
     * @param environment
     * @param authScheme
     */ CacheManager1.prototype.readCacheRecord = function(account, clientId, request, environment) {
        var cachedAccount = this.readAccountFromCache(account);
        var cachedIdToken = this.readIdTokenFromCache(clientId, account);
        var cachedAccessToken = this.readAccessTokenFromCache(clientId, account, request);
        var cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);
        var cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);
        if (cachedAccount && cachedIdToken) cachedAccount.idTokenClaims = new _authTokenJs.AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;
        return {
            account: cachedAccount,
            idToken: cachedIdToken,
            accessToken: cachedAccessToken,
            refreshToken: cachedRefreshToken,
            appMetadata: cachedAppMetadata
        };
    };
    /**
     * Retrieve AccountEntity from cache
     * @param account
     */ CacheManager1.prototype.readAccountFromCache = function(account) {
        var accountKey = _accountEntityJs.AccountEntity.generateAccountCacheKey(account);
        return this.getAccount(accountKey);
    };
    /**
     * Retrieve IdTokenEntity from cache
     * @param clientId
     * @param account
     * @param inputRealm
     */ CacheManager1.prototype.readIdTokenFromCache = function(clientId, account) {
        var idTokenFilter = {
            homeAccountId: account.homeAccountId,
            environment: account.environment,
            credentialType: _constantsJs.CredentialType.ID_TOKEN,
            clientId: clientId,
            realm: account.tenantId
        };
        var credentialCache = this.getCredentialsFilteredBy(idTokenFilter);
        var idTokens = Object.keys(credentialCache.idTokens).map(function(key) {
            return credentialCache.idTokens[key];
        });
        var numIdTokens = idTokens.length;
        if (numIdTokens < 1) return null;
        else if (numIdTokens > 1) throw _clientAuthErrorJs.ClientAuthError.createMultipleMatchingTokensInCacheError();
        return idTokens[0];
    };
    /**
     * Retrieve AccessTokenEntity from cache
     * @param clientId
     * @param account
     * @param scopes
     * @param authScheme
     */ CacheManager1.prototype.readAccessTokenFromCache = function(clientId, account, request) {
        var scopes = new _scopeSetJs.ScopeSet(request.scopes || []);
        var authScheme = request.authenticationScheme || _constantsJs.AuthenticationScheme.BEARER;
        /*
         * Distinguish between Bearer and PoP/SSH token cache types
         * Cast to lowercase to handle "bearer" from ADFS
         */ var credentialType = authScheme && authScheme.toLowerCase() !== _constantsJs.AuthenticationScheme.BEARER.toLowerCase() ? _constantsJs.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : _constantsJs.CredentialType.ACCESS_TOKEN;
        var accessTokenFilter = {
            homeAccountId: account.homeAccountId,
            environment: account.environment,
            credentialType: credentialType,
            clientId: clientId,
            realm: account.tenantId,
            target: scopes.printScopesLowerCase(),
            tokenType: authScheme,
            keyId: request.sshKid,
            requestedClaimsHash: request.requestedClaimsHash
        };
        var credentialCache = this.getCredentialsFilteredBy(accessTokenFilter);
        var accessTokens = Object.keys(credentialCache.accessTokens).map(function(key) {
            return credentialCache.accessTokens[key];
        });
        var numAccessTokens = accessTokens.length;
        if (numAccessTokens < 1) return null;
        else if (numAccessTokens > 1) throw _clientAuthErrorJs.ClientAuthError.createMultipleMatchingTokensInCacheError();
        return accessTokens[0];
    };
    /**
     * Helper to retrieve the appropriate refresh token from cache
     * @param clientId
     * @param account
     * @param familyRT
     */ CacheManager1.prototype.readRefreshTokenFromCache = function(clientId, account, familyRT) {
        var id = familyRT ? _constantsJs.THE_FAMILY_ID : undefined;
        var refreshTokenFilter = {
            homeAccountId: account.homeAccountId,
            environment: account.environment,
            credentialType: _constantsJs.CredentialType.REFRESH_TOKEN,
            clientId: clientId,
            familyId: id
        };
        var credentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);
        var refreshTokens = Object.keys(credentialCache.refreshTokens).map(function(key) {
            return credentialCache.refreshTokens[key];
        });
        var numRefreshTokens = refreshTokens.length;
        if (numRefreshTokens < 1) return null;
        // address the else case after remove functions address environment aliases
        return refreshTokens[0];
    };
    /**
     * Retrieve AppMetadataEntity from cache
     */ CacheManager1.prototype.readAppMetadataFromCache = function(environment, clientId) {
        var appMetadataFilter = {
            environment: environment,
            clientId: clientId
        };
        var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);
        var appMetadataEntries = Object.keys(appMetadata).map(function(key) {
            return appMetadata[key];
        });
        var numAppMetadata = appMetadataEntries.length;
        if (numAppMetadata < 1) return null;
        else if (numAppMetadata > 1) throw _clientAuthErrorJs.ClientAuthError.createMultipleMatchingAppMetadataInCacheError();
        return appMetadataEntries[0];
    };
    /**
     * Return the family_id value associated  with FOCI
     * @param environment
     * @param clientId
     */ CacheManager1.prototype.isAppMetadataFOCI = function(environment, clientId) {
        var appMetadata = this.readAppMetadataFromCache(environment, clientId);
        return !!(appMetadata && appMetadata.familyId === _constantsJs.THE_FAMILY_ID);
    };
    /**
     * helper to match account ids
     * @param value
     * @param homeAccountId
     */ CacheManager1.prototype.matchHomeAccountId = function(entity, homeAccountId) {
        return !!(entity.homeAccountId && homeAccountId === entity.homeAccountId);
    };
    /**
     * helper to match assertion
     * @param value
     * @param oboAssertion
     */ CacheManager1.prototype.matchOboAssertion = function(entity, oboAssertion) {
        return !!(entity.oboAssertion && oboAssertion === entity.oboAssertion);
    };
    /**
     * helper to match environment
     * @param value
     * @param environment
     */ CacheManager1.prototype.matchEnvironment = function(entity, environment) {
        var cloudMetadata = this.getAuthorityMetadataByAlias(environment);
        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) return true;
        return false;
    };
    /**
     * helper to match credential type
     * @param entity
     * @param credentialType
     */ CacheManager1.prototype.matchCredentialType = function(entity, credentialType) {
        return entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase();
    };
    /**
     * helper to match client ids
     * @param entity
     * @param clientId
     */ CacheManager1.prototype.matchClientId = function(entity, clientId) {
        return !!(entity.clientId && clientId === entity.clientId);
    };
    /**
     * helper to match family ids
     * @param entity
     * @param familyId
     */ CacheManager1.prototype.matchFamilyId = function(entity, familyId) {
        return !!(entity.familyId && familyId === entity.familyId);
    };
    /**
     * helper to match realm
     * @param entity
     * @param realm
     */ CacheManager1.prototype.matchRealm = function(entity, realm) {
        return !!(entity.realm && realm === entity.realm);
    };
    /**
     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.
     * @param entity
     * @param target
     */ CacheManager1.prototype.matchTarget = function(entity, target) {
        var isNotAccessTokenCredential = entity.credentialType !== _constantsJs.CredentialType.ACCESS_TOKEN && entity.credentialType !== _constantsJs.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;
        if (isNotAccessTokenCredential || !entity.target) return false;
        var entityScopeSet = _scopeSetJs.ScopeSet.fromString(entity.target);
        var requestTargetScopeSet = _scopeSetJs.ScopeSet.fromString(target);
        if (!requestTargetScopeSet.containsOnlyOIDCScopes()) requestTargetScopeSet.removeOIDCScopes(); // ignore OIDC scopes
        else requestTargetScopeSet.removeScope(_constantsJs.Constants.OFFLINE_ACCESS_SCOPE);
        return entityScopeSet.containsScopeSet(requestTargetScopeSet);
    };
    /**
     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise
     * @param entity
     * @param tokenType
     */ CacheManager1.prototype.matchTokenType = function(entity, tokenType) {
        return !!(entity.tokenType && entity.tokenType === tokenType);
    };
    /**
     * Returns true if the credential's keyId matches the one in the request, false otherwise
     * @param entity
     * @param tokenType
     */ CacheManager1.prototype.matchKeyId = function(entity, keyId) {
        return !!(entity.keyId && entity.keyId === keyId);
    };
    /**
     * returns if a given cache entity is of the type appmetadata
     * @param key
     */ CacheManager1.prototype.isAppMetadata = function(key) {
        return key.indexOf(_constantsJs.APP_METADATA) !== -1;
    };
    /**
     * returns if a given cache entity is of the type authoritymetadata
     * @param key
     */ CacheManager1.prototype.isAuthorityMetadata = function(key) {
        return key.indexOf(_constantsJs.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;
    };
    /**
     * returns cache key used for cloud instance metadata
     */ CacheManager1.prototype.generateAuthorityMetadataCacheKey = function(authority) {
        return _constantsJs.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY + "-" + this.clientId + "-" + authority;
    };
    /**
     * Returns the specific credential (IdToken/AccessToken/RefreshToken) from the cache
     * @param key
     * @param credType
     */ CacheManager1.prototype.getSpecificCredential = function(key, credType) {
        switch(credType){
            case _constantsJs.CredentialType.ID_TOKEN:
                return this.getIdTokenCredential(key);
            case _constantsJs.CredentialType.ACCESS_TOKEN:
            case _constantsJs.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:
                return this.getAccessTokenCredential(key);
            case _constantsJs.CredentialType.REFRESH_TOKEN:
                return this.getRefreshTokenCredential(key);
            default:
                return null;
        }
    };
    /**
     * Helper to convert serialized data to object
     * @param obj
     * @param json
     */ CacheManager1.toObject = function(obj, json) {
        for(var propertyName in json)obj[propertyName] = json[propertyName];
        return obj;
    };
    return CacheManager1;
}();
var DefaultStorageClass = function(_super) {
    _tslibJs.__extends(DefaultStorageClass1, _super);
    function DefaultStorageClass1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultStorageClass1.prototype.setAccount = function() {
        var notImplErr = "Storage interface - setAccount() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.getAccount = function() {
        var notImplErr = "Storage interface - getAccount() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.setIdTokenCredential = function() {
        var notImplErr = "Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.getIdTokenCredential = function() {
        var notImplErr = "Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.setAccessTokenCredential = function() {
        var notImplErr = "Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.getAccessTokenCredential = function() {
        var notImplErr = "Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.setRefreshTokenCredential = function() {
        var notImplErr = "Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.getRefreshTokenCredential = function() {
        var notImplErr = "Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.setAppMetadata = function() {
        var notImplErr = "Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.getAppMetadata = function() {
        var notImplErr = "Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.setServerTelemetry = function() {
        var notImplErr = "Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.getServerTelemetry = function() {
        var notImplErr = "Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.setAuthorityMetadata = function() {
        var notImplErr = "Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.getAuthorityMetadata = function() {
        var notImplErr = "Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.getAuthorityMetadataKeys = function() {
        var notImplErr = "Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.setThrottlingCache = function() {
        var notImplErr = "Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.getThrottlingCache = function() {
        var notImplErr = "Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.removeItem = function() {
        var notImplErr = "Storage interface - removeItem() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.containsKey = function() {
        var notImplErr = "Storage interface - containsKey() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.getKeys = function() {
        var notImplErr = "Storage interface - getKeys() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    DefaultStorageClass1.prototype.clear = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var notImplErr;
            return _tslibJs.__generator(this, function(_a) {
                notImplErr = "Storage interface - clear() has not been implemented for the cacheStorage interface.";
                throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
            });
        });
    };
    DefaultStorageClass1.prototype.updateCredentialCacheKey = function() {
        var notImplErr = "Storage interface - updateCredentialCacheKey() has not been implemented for the cacheStorage interface.";
        throw _authErrorJs.AuthError.createUnexpectedError(notImplErr);
    };
    return DefaultStorageClass1;
}(CacheManager);

},{"../_virtual/_tslib.js":"9y6Jg","../utils/Constants.js":"7OLHu","./entities/CredentialEntity.js":"dpbP8","../request/ScopeSet.js":"63JqX","./entities/AccountEntity.js":"8CJ3A","../error/AuthError.js":"8SAdb","../error/ClientAuthError.js":"jz6JJ","../account/AuthToken.js":"5l5Zq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dpbP8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CredentialEntity", ()=>CredentialEntity
);
var _constantsJs = require("../../utils/Constants.js");
var _clientAuthErrorJs = require("../../error/ClientAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc
 *
 * Key:Value Schema:
 *
 * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      familyId: Family ID identifier, usually only used for refresh tokens
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
 *      oboAssertion: access token passed in as part of OBO request
 *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)
 *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request
 * }
 */ var CredentialEntity = function() {
    function CredentialEntity1() {
    }
    /**
     * Generate Account Id key component as per the schema: <home_account_id>-<environment>
     */ CredentialEntity1.prototype.generateAccountId = function() {
        return CredentialEntity1.generateAccountIdForCacheKey(this.homeAccountId, this.environment);
    };
    /**
     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>
     */ CredentialEntity1.prototype.generateCredentialId = function() {
        return CredentialEntity1.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);
    };
    /**
     * Generate target key component as per schema: <target>
     */ CredentialEntity1.prototype.generateTarget = function() {
        return CredentialEntity1.generateTargetForCacheKey(this.target);
    };
    /**
     * generates credential key
     */ CredentialEntity1.prototype.generateCredentialKey = function() {
        return CredentialEntity1.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId, this.tokenType, this.requestedClaimsHash);
    };
    /**
     * returns the type of the cache (in this case credential)
     */ CredentialEntity1.prototype.generateType = function() {
        switch(this.credentialType){
            case _constantsJs.CredentialType.ID_TOKEN:
                return _constantsJs.CacheType.ID_TOKEN;
            case _constantsJs.CredentialType.ACCESS_TOKEN:
            case _constantsJs.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:
                return _constantsJs.CacheType.ACCESS_TOKEN;
            case _constantsJs.CredentialType.REFRESH_TOKEN:
                return _constantsJs.CacheType.REFRESH_TOKEN;
            default:
                throw _clientAuthErrorJs.ClientAuthError.createUnexpectedCredentialTypeError();
        }
    };
    /**
     * helper function to return `CredentialType`
     * @param key
     */ CredentialEntity1.getCredentialType = function(key) {
        // First keyword search will match all "AccessToken" and "AccessToken_With_AuthScheme" credentials
        if (key.indexOf(_constantsJs.CredentialType.ACCESS_TOKEN.toLowerCase()) !== -1) {
            // Perform second search to differentiate between "AccessToken" and "AccessToken_With_AuthScheme" credential types
            if (key.indexOf(_constantsJs.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) !== -1) return _constantsJs.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;
            return _constantsJs.CredentialType.ACCESS_TOKEN;
        } else if (key.indexOf(_constantsJs.CredentialType.ID_TOKEN.toLowerCase()) !== -1) return _constantsJs.CredentialType.ID_TOKEN;
        else if (key.indexOf(_constantsJs.CredentialType.REFRESH_TOKEN.toLowerCase()) !== -1) return _constantsJs.CredentialType.REFRESH_TOKEN;
        return _constantsJs.Constants.NOT_DEFINED;
    };
    /**
     * generates credential key
     * <home_account_id*>-\<environment>-<credential_type>-<client_id>-<realm\*>-<target\*>-<scheme\*>
     */ CredentialEntity1.generateCredentialCacheKey = function(homeAccountId, environment, credentialType, clientId, realm, target, familyId, tokenType, requestedClaimsHash) {
        var credentialKey = [
            this.generateAccountIdForCacheKey(homeAccountId, environment),
            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),
            this.generateTargetForCacheKey(target),
            this.generateClaimsHashForCacheKey(requestedClaimsHash),
            this.generateSchemeForCacheKey(tokenType)
        ];
        return credentialKey.join(_constantsJs.Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * generates Account Id for keys
     * @param homeAccountId
     * @param environment
     */ CredentialEntity1.generateAccountIdForCacheKey = function(homeAccountId, environment) {
        var accountId = [
            homeAccountId,
            environment
        ];
        return accountId.join(_constantsJs.Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Generates Credential Id for keys
     * @param credentialType
     * @param realm
     * @param clientId
     * @param familyId
     */ CredentialEntity1.generateCredentialIdForCacheKey = function(credentialType, clientId, realm, familyId) {
        var clientOrFamilyId = credentialType === _constantsJs.CredentialType.REFRESH_TOKEN ? familyId || clientId : clientId;
        var credentialId = [
            credentialType,
            clientOrFamilyId,
            realm || "", 
        ];
        return credentialId.join(_constantsJs.Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Generate target key component as per schema: <target>
     */ CredentialEntity1.generateTargetForCacheKey = function(scopes) {
        return (scopes || "").toLowerCase();
    };
    /**
     * Generate requested claims key component as per schema: <requestedClaims>
     */ CredentialEntity1.generateClaimsHashForCacheKey = function(requestedClaimsHash) {
        return (requestedClaimsHash || "").toLowerCase();
    };
    /**
     * Generate scheme key componenet as per schema: <scheme>
     */ CredentialEntity1.generateSchemeForCacheKey = function(tokenType) {
        /*
         * PoP Tokens and SSH certs include scheme in cache key
         * Cast to lowercase to handle "bearer" from ADFS
         */ return tokenType && tokenType.toLowerCase() !== _constantsJs.AuthenticationScheme.BEARER.toLowerCase() ? tokenType.toLowerCase() : "";
    };
    return CredentialEntity1;
}();

},{"../../utils/Constants.js":"7OLHu","../../error/ClientAuthError.js":"jz6JJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"63JqX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ScopeSet", ()=>ScopeSet
);
var _tslibJs = require("../_virtual/_tslib.js");
var _clientConfigurationErrorJs = require("../error/ClientConfigurationError.js");
var _stringUtilsJs = require("../utils/StringUtils.js");
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
var _constantsJs = require("../utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes
 * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions
 * to ensure uniqueness of strings.
 */ var ScopeSet = function() {
    function ScopeSet1(inputScopes) {
        var _this = this;
        // Filter empty string and null/undefined array items
        var scopeArr = inputScopes ? _stringUtilsJs.StringUtils.trimArrayEntries(_tslibJs.__spreadArrays(inputScopes)) : [];
        var filteredInput = scopeArr ? _stringUtilsJs.StringUtils.removeEmptyStringsFromArray(scopeArr) : [];
        // Validate and filter scopes (validate function throws if validation fails)
        this.validateInputScopes(filteredInput);
        this.scopes = new Set(); // Iterator in constructor not supported by IE11
        filteredInput.forEach(function(scope) {
            return _this.scopes.add(scope);
        });
    }
    /**
     * Factory method to create ScopeSet from space-delimited string
     * @param inputScopeString
     * @param appClientId
     * @param scopesRequired
     */ ScopeSet1.fromString = function(inputScopeString) {
        var scopeString = inputScopeString || "";
        var inputScopes = scopeString.split(" ");
        return new ScopeSet1(inputScopes);
    };
    /**
     * Used to validate the scopes input parameter requested  by the developer.
     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.
     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not
     */ ScopeSet1.prototype.validateInputScopes = function(inputScopes) {
        // Check if scopes are required but not given or is an empty array
        if (!inputScopes || inputScopes.length < 1) throw _clientConfigurationErrorJs.ClientConfigurationError.createEmptyScopesArrayError();
    };
    /**
     * Check if a given scope is present in this set of scopes.
     * @param scope
     */ ScopeSet1.prototype.containsScope = function(scope) {
        var lowerCaseScopes = this.printScopesLowerCase().split(" ");
        var lowerCaseScopesSet = new ScopeSet1(lowerCaseScopes);
        // compare lowercase scopes
        return !_stringUtilsJs.StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;
    };
    /**
     * Check if a set of scopes is present in this set of scopes.
     * @param scopeSet
     */ ScopeSet1.prototype.containsScopeSet = function(scopeSet) {
        var _this = this;
        if (!scopeSet || scopeSet.scopes.size <= 0) return false;
        return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function(scope) {
            return _this.containsScope(scope);
        });
    };
    /**
     * Check if set of scopes contains only the defaults
     */ ScopeSet1.prototype.containsOnlyOIDCScopes = function() {
        var _this = this;
        var defaultScopeCount = 0;
        _constantsJs.OIDC_SCOPES.forEach(function(defaultScope) {
            if (_this.containsScope(defaultScope)) defaultScopeCount += 1;
        });
        return this.scopes.size === defaultScopeCount;
    };
    /**
     * Appends single scope if passed
     * @param newScope
     */ ScopeSet1.prototype.appendScope = function(newScope) {
        if (!_stringUtilsJs.StringUtils.isEmpty(newScope)) this.scopes.add(newScope.trim());
    };
    /**
     * Appends multiple scopes if passed
     * @param newScopes
     */ ScopeSet1.prototype.appendScopes = function(newScopes) {
        var _this = this;
        try {
            newScopes.forEach(function(newScope) {
                return _this.appendScope(newScope);
            });
        } catch (e) {
            throw _clientAuthErrorJs.ClientAuthError.createAppendScopeSetError(e);
        }
    };
    /**
     * Removes element from set of scopes.
     * @param scope
     */ ScopeSet1.prototype.removeScope = function(scope) {
        if (_stringUtilsJs.StringUtils.isEmpty(scope)) throw _clientAuthErrorJs.ClientAuthError.createRemoveEmptyScopeFromSetError(scope);
        this.scopes.delete(scope.trim());
    };
    /**
     * Removes default scopes from set of scopes
     * Primarily used to prevent cache misses if the default scopes are not returned from the server
     */ ScopeSet1.prototype.removeOIDCScopes = function() {
        var _this = this;
        _constantsJs.OIDC_SCOPES.forEach(function(defaultScope) {
            _this.scopes.delete(defaultScope);
        });
    };
    /**
     * Combines an array of scopes with the current set of scopes.
     * @param otherScopes
     */ ScopeSet1.prototype.unionScopeSets = function(otherScopes) {
        if (!otherScopes) throw _clientAuthErrorJs.ClientAuthError.createEmptyInputScopeSetError();
        var unionScopes = new Set(); // Iterator in constructor not supported in IE11
        otherScopes.scopes.forEach(function(scope) {
            return unionScopes.add(scope.toLowerCase());
        });
        this.scopes.forEach(function(scope) {
            return unionScopes.add(scope.toLowerCase());
        });
        return unionScopes;
    };
    /**
     * Check if scopes intersect between this set and another.
     * @param otherScopes
     */ ScopeSet1.prototype.intersectingScopeSets = function(otherScopes) {
        if (!otherScopes) throw _clientAuthErrorJs.ClientAuthError.createEmptyInputScopeSetError();
        // Do not allow OIDC scopes to be the only intersecting scopes
        if (!otherScopes.containsOnlyOIDCScopes()) otherScopes.removeOIDCScopes();
        var unionScopes = this.unionScopeSets(otherScopes);
        var sizeOtherScopes = otherScopes.getScopeCount();
        var sizeThisScopes = this.getScopeCount();
        var sizeUnionScopes = unionScopes.size;
        return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;
    };
    /**
     * Returns size of set of scopes.
     */ ScopeSet1.prototype.getScopeCount = function() {
        return this.scopes.size;
    };
    /**
     * Returns the scopes as an array of string values
     */ ScopeSet1.prototype.asArray = function() {
        var array = [];
        this.scopes.forEach(function(val) {
            return array.push(val);
        });
        return array;
    };
    /**
     * Prints scopes into a space-delimited string
     */ ScopeSet1.prototype.printScopes = function() {
        if (this.scopes) {
            var scopeArr = this.asArray();
            return scopeArr.join(" ");
        }
        return "";
    };
    /**
     * Prints scopes into a space-delimited lower-case string (used for caching)
     */ ScopeSet1.prototype.printScopesLowerCase = function() {
        return this.printScopes().toLowerCase();
    };
    return ScopeSet1;
}();

},{"../_virtual/_tslib.js":"9y6Jg","../error/ClientConfigurationError.js":"iOtcK","../utils/StringUtils.js":"2gXP4","../error/ClientAuthError.js":"jz6JJ","../utils/Constants.js":"7OLHu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iOtcK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClientConfigurationError", ()=>ClientConfigurationError
);
parcelHelpers.export(exports, "ClientConfigurationErrorMessage", ()=>ClientConfigurationErrorMessage
);
var _tslibJs = require("../_virtual/_tslib.js");
var _clientAuthErrorJs = require("./ClientAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.
 */ var ClientConfigurationErrorMessage = {
    redirectUriNotSet: {
        code: "redirect_uri_empty",
        desc: "A redirect URI is required for all calls, and none has been set."
    },
    postLogoutUriNotSet: {
        code: "post_logout_uri_empty",
        desc: "A post logout redirect has not been set."
    },
    claimsRequestParsingError: {
        code: "claims_request_parsing_error",
        desc: "Could not parse the given claims request object."
    },
    authorityUriInsecure: {
        code: "authority_uri_insecure",
        desc: "Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options"
    },
    urlParseError: {
        code: "url_parse_error",
        desc: "URL could not be parsed into appropriate segments."
    },
    urlEmptyError: {
        code: "empty_url_error",
        desc: "URL was empty or null."
    },
    emptyScopesError: {
        code: "empty_input_scopes_error",
        desc: "Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token."
    },
    nonArrayScopesError: {
        code: "nonarray_input_scopes_error",
        desc: "Scopes cannot be passed as non-array."
    },
    clientIdSingleScopeError: {
        code: "clientid_input_scopes_error",
        desc: "Client ID can only be provided as a single scope."
    },
    invalidPrompt: {
        code: "invalid_prompt_value",
        desc: "Supported prompt values are 'login', 'select_account', 'consent', 'create' and 'none'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest"
    },
    invalidClaimsRequest: {
        code: "invalid_claims",
        desc: "Given claims parameter must be a stringified JSON object."
    },
    tokenRequestEmptyError: {
        code: "token_request_empty",
        desc: "Token request was empty and not found in cache."
    },
    logoutRequestEmptyError: {
        code: "logout_request_empty",
        desc: "The logout request was null or undefined."
    },
    invalidCodeChallengeMethod: {
        code: "invalid_code_challenge_method",
        desc: "code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\"."
    },
    invalidCodeChallengeParams: {
        code: "pkce_params_missing",
        desc: "Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request"
    },
    invalidCloudDiscoveryMetadata: {
        code: "invalid_cloud_discovery_metadata",
        desc: "Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields"
    },
    invalidAuthorityMetadata: {
        code: "invalid_authority_metadata",
        desc: "Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields."
    },
    untrustedAuthority: {
        code: "untrusted_authority",
        desc: "The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter."
    },
    invalidAzureCloudInstance: {
        code: "invalid_azure_cloud_instance",
        desc: "Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values"
    },
    missingSshJwk: {
        code: "missing_ssh_jwk",
        desc: "Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme."
    },
    missingSshKid: {
        code: "missing_ssh_kid",
        desc: "Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme."
    },
    missingNonceAuthenticationHeader: {
        code: "missing_nonce_authentication_header",
        desc: "Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce."
    },
    invalidAuthenticationHeader: {
        code: "invalid_authentication_header",
        desc: "Invalid authentication header provided"
    }
};
/**
 * Error thrown when there is an error in configuration of the MSAL.js library.
 */ var ClientConfigurationError = function(_super) {
    _tslibJs.__extends(ClientConfigurationError1, _super);
    function ClientConfigurationError1(errorCode, errorMessage) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        _this.name = "ClientConfigurationError";
        Object.setPrototypeOf(_this, ClientConfigurationError1.prototype);
        return _this;
    }
    /**
     * Creates an error thrown when the redirect uri is empty (not set by caller)
     */ ClientConfigurationError1.createRedirectUriEmptyError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);
    };
    /**
     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)
     */ ClientConfigurationError1.createPostLogoutRedirectUriEmptyError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);
    };
    /**
     * Creates an error thrown when the claims request could not be successfully parsed
     */ ClientConfigurationError1.createClaimsRequestParsingError = function(claimsRequestParseError) {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + " Given value: " + claimsRequestParseError);
    };
    /**
     * Creates an error thrown if authority uri is given an insecure protocol.
     * @param urlString
     */ ClientConfigurationError1.createInsecureAuthorityUriError = function(urlString) {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.authorityUriInsecure.code, ClientConfigurationErrorMessage.authorityUriInsecure.desc + " Given URI: " + urlString);
    };
    /**
     * Creates an error thrown if URL string does not parse into separate segments.
     * @param urlString
     */ ClientConfigurationError1.createUrlParseError = function(urlParseError) {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.urlParseError.code, ClientConfigurationErrorMessage.urlParseError.desc + " Given Error: " + urlParseError);
    };
    /**
     * Creates an error thrown if URL string is empty or null.
     * @param urlString
     */ ClientConfigurationError1.createUrlEmptyError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);
    };
    /**
     * Error thrown when scopes are empty.
     * @param scopesValue
     */ ClientConfigurationError1.createEmptyScopesArrayError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.emptyScopesError.code, "" + ClientConfigurationErrorMessage.emptyScopesError.desc);
    };
    /**
     * Error thrown when client id scope is not provided as single scope.
     * @param inputScopes
     */ ClientConfigurationError1.createClientIdSingleScopeError = function(inputScopes) {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, ClientConfigurationErrorMessage.clientIdSingleScopeError.desc + " Given Scopes: " + inputScopes);
    };
    /**
     * Error thrown when prompt is not an allowed type.
     * @param promptValue
     */ ClientConfigurationError1.createInvalidPromptError = function(promptValue) {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + " Given value: " + promptValue);
    };
    /**
     * Creates error thrown when claims parameter is not a stringified JSON object
     */ ClientConfigurationError1.createInvalidClaimsRequestError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);
    };
    /**
     * Throws error when token request is empty and nothing cached in storage.
     */ ClientConfigurationError1.createEmptyLogoutRequestError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);
    };
    /**
     * Throws error when token request is empty and nothing cached in storage.
     */ ClientConfigurationError1.createEmptyTokenRequestError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);
    };
    /**
     * Throws error when an invalid code_challenge_method is passed by the user
     */ ClientConfigurationError1.createInvalidCodeChallengeMethodError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);
    };
    /**
     * Throws error when both params: code_challenge and code_challenge_method are not passed together
     */ ClientConfigurationError1.createInvalidCodeChallengeParamsError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);
    };
    /**
     * Throws an error when the user passes invalid cloudDiscoveryMetadata
     */ ClientConfigurationError1.createInvalidCloudDiscoveryMetadataError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);
    };
    /**
     * Throws an error when the user passes invalid cloudDiscoveryMetadata
     */ ClientConfigurationError1.createInvalidAuthorityMetadataError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code, ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);
    };
    /**
     * Throws error when provided authority is not a member of the trusted host list
     */ ClientConfigurationError1.createUntrustedAuthorityError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);
    };
    /**
     * Throws error when the AzureCloudInstance is set to an invalid value
     */ ClientConfigurationError1.createInvalidAzureCloudInstanceError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.invalidAzureCloudInstance.code, ClientConfigurationErrorMessage.invalidAzureCloudInstance.desc);
    };
    /**
     * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request
     */ ClientConfigurationError1.createMissingSshJwkError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.missingSshJwk.code, ClientConfigurationErrorMessage.missingSshJwk.desc);
    };
    /**
     * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request
     */ ClientConfigurationError1.createMissingSshKidError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.missingSshKid.code, ClientConfigurationErrorMessage.missingSshKid.desc);
    };
    /**
     * Throws error when provided headers don't contain a header that a server nonce can be extracted from
     */ ClientConfigurationError1.createMissingNonceAuthenticationHeadersError = function() {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code, ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc);
    };
    /**
     * Throws error when a provided header is invalid in any way
     */ ClientConfigurationError1.createInvalidAuthenticationHeaderError = function(invalidHeaderName, details) {
        return new ClientConfigurationError1(ClientConfigurationErrorMessage.invalidAuthenticationHeader.code, ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc + ". Invalid header: " + invalidHeaderName + ". Details: " + details);
    };
    return ClientConfigurationError1;
}(_clientAuthErrorJs.ClientAuthError);

},{"../_virtual/_tslib.js":"9y6Jg","./ClientAuthError.js":"jz6JJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8CJ3A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AccountEntity", ()=>AccountEntity
);
var _constantsJs = require("../../utils/Constants.js");
var _clientInfoJs = require("../../account/ClientInfo.js");
var _stringUtilsJs = require("../../utils/StringUtils.js");
var _clientAuthErrorJs = require("../../error/ClientAuthError.js");
var _authorityTypeJs = require("../../authority/AuthorityType.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).
 *
 * Key : Value Schema
 *
 * Key: <home_account_id>-<environment>-<realm*>
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      localAccountId: Original tenant-specific accountID, usually used for legacy cases
 *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt
 *      authorityType: Accounts authority type as a string
 *      name: Full name for the account, including given name and family name,
 *      clientInfo: Full base64 encoded client info received from ESTS
 *      lastModificationTime: last time this entity was modified in the cache
 *      lastModificationApp:
 *      oboAssertion: access token passed in as part of OBO request
 *      idTokenClaims: Object containing claims parsed from ID token
 * }
 */ var AccountEntity = function() {
    function AccountEntity1() {
    }
    /**
     * Generate Account Id key component as per the schema: <home_account_id>-<environment>
     */ AccountEntity1.prototype.generateAccountId = function() {
        var accountId = [
            this.homeAccountId,
            this.environment
        ];
        return accountId.join(_constantsJs.Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>
     */ AccountEntity1.prototype.generateAccountKey = function() {
        return AccountEntity1.generateAccountCacheKey({
            homeAccountId: this.homeAccountId,
            environment: this.environment,
            tenantId: this.realm,
            username: this.username,
            localAccountId: this.localAccountId
        });
    };
    /**
     * returns the type of the cache (in this case account)
     */ AccountEntity1.prototype.generateType = function() {
        switch(this.authorityType){
            case _constantsJs.CacheAccountType.ADFS_ACCOUNT_TYPE:
                return _constantsJs.CacheType.ADFS;
            case _constantsJs.CacheAccountType.MSAV1_ACCOUNT_TYPE:
                return _constantsJs.CacheType.MSA;
            case _constantsJs.CacheAccountType.MSSTS_ACCOUNT_TYPE:
                return _constantsJs.CacheType.MSSTS;
            case _constantsJs.CacheAccountType.GENERIC_ACCOUNT_TYPE:
                return _constantsJs.CacheType.GENERIC;
            default:
                throw _clientAuthErrorJs.ClientAuthError.createUnexpectedAccountTypeError();
        }
    };
    /**
     * Returns the AccountInfo interface for this account.
     */ AccountEntity1.prototype.getAccountInfo = function() {
        return {
            homeAccountId: this.homeAccountId,
            environment: this.environment,
            tenantId: this.realm,
            username: this.username,
            localAccountId: this.localAccountId,
            name: this.name,
            idTokenClaims: this.idTokenClaims
        };
    };
    /**
     * Generates account key from interface
     * @param accountInterface
     */ AccountEntity1.generateAccountCacheKey = function(accountInterface) {
        var accountKey = [
            accountInterface.homeAccountId,
            accountInterface.environment || "",
            accountInterface.tenantId || "", 
        ];
        return accountKey.join(_constantsJs.Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.
     * @param clientInfo
     * @param authority
     * @param idToken
     * @param policy
     */ AccountEntity1.createAccount = function(clientInfo, homeAccountId, idToken, authority, oboAssertion, cloudGraphHostName, msGraphHost, environment) {
        var _a, _b, _c, _d, _e, _f;
        var account = new AccountEntity1();
        account.authorityType = _constantsJs.CacheAccountType.MSSTS_ACCOUNT_TYPE;
        account.clientInfo = clientInfo;
        account.homeAccountId = homeAccountId;
        var env = environment || authority && authority.getPreferredCache();
        if (!env) throw _clientAuthErrorJs.ClientAuthError.createInvalidCacheEnvironmentError();
        account.environment = env;
        // non AAD scenarios can have empty realm
        account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || "";
        account.oboAssertion = oboAssertion;
        if (idToken) {
            account.idTokenClaims = idToken.claims;
            // How do you account for MSA CID here?
            account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || "";
            /*
             * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.
             * This field should not be relied upon if a custom policy is configured to return more than 1 email.
             */ account.username = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username) || (((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : "");
            account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;
        }
        account.cloudGraphHostName = cloudGraphHostName;
        account.msGraphHost = msGraphHost;
        return account;
    };
    /**
     * Builds non-AAD/ADFS account.
     * @param authority
     * @param idToken
     */ AccountEntity1.createGenericAccount = function(homeAccountId, idToken, authority, oboAssertion, cloudGraphHostName, msGraphHost, environment) {
        var _a, _b, _c, _d;
        var account = new AccountEntity1();
        account.authorityType = authority && authority.authorityType === _authorityTypeJs.AuthorityType.Adfs ? _constantsJs.CacheAccountType.ADFS_ACCOUNT_TYPE : _constantsJs.CacheAccountType.GENERIC_ACCOUNT_TYPE;
        account.homeAccountId = homeAccountId;
        // non AAD scenarios can have empty realm
        account.realm = "";
        account.oboAssertion = oboAssertion;
        var env = environment || authority && authority.getPreferredCache();
        if (!env) throw _clientAuthErrorJs.ClientAuthError.createInvalidCacheEnvironmentError();
        if (idToken) {
            // How do you account for MSA CID here?
            account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || "";
            // upn claim for most ADFS scenarios
            account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || "";
            account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || "";
            account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;
        }
        account.environment = env;
        account.cloudGraphHostName = cloudGraphHostName;
        account.msGraphHost = msGraphHost;
        /*
         * add uniqueName to claims
         * account.name = idToken.claims.uniqueName;
         */ return account;
    };
    /**
     * Generate HomeAccountId from server response
     * @param serverClientInfo
     * @param authType
     */ AccountEntity1.generateHomeAccountId = function(serverClientInfo, authType, logger, cryptoObj, idToken) {
        var _a;
        var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : _constantsJs.Constants.EMPTY_STRING;
        // since ADFS does not have tid and does not set client_info
        if (authType === _authorityTypeJs.AuthorityType.Adfs) return accountId;
        // for cases where there is clientInfo
        if (serverClientInfo) try {
            var clientInfo = _clientInfoJs.buildClientInfo(serverClientInfo, cryptoObj);
            if (!_stringUtilsJs.StringUtils.isEmpty(clientInfo.uid) && !_stringUtilsJs.StringUtils.isEmpty(clientInfo.utid)) return "" + clientInfo.uid + _constantsJs.Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;
        } catch (e) {
        }
        // default to "sub" claim
        logger.verbose("No client info in response");
        return accountId;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */ AccountEntity1.isAccountEntity = function(entity) {
        if (!entity) return false;
        return entity.hasOwnProperty("homeAccountId") && entity.hasOwnProperty("environment") && entity.hasOwnProperty("realm") && entity.hasOwnProperty("localAccountId") && entity.hasOwnProperty("username") && entity.hasOwnProperty("authorityType");
    };
    /**
     * Helper function to determine whether 2 accountInfo objects represent the same account
     * @param accountA
     * @param accountB
     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality
     */ AccountEntity1.accountInfoIsEqual = function(accountA, accountB, compareClaims) {
        if (!accountA || !accountB) return false;
        var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false
        if (compareClaims) {
            var accountAClaims = accountA.idTokenClaims || {
            };
            var accountBClaims = accountB.idTokenClaims || {
            };
            // issued at timestamp and nonce are expected to change each time a new id token is acquired
            claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;
        }
        return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.environment === accountB.environment && claimsMatch;
    };
    return AccountEntity1;
}();

},{"../../utils/Constants.js":"7OLHu","../../account/ClientInfo.js":"1Am9c","../../utils/StringUtils.js":"2gXP4","../../error/ClientAuthError.js":"jz6JJ","../../authority/AuthorityType.js":"216oN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Am9c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildClientInfo", ()=>buildClientInfo
);
parcelHelpers.export(exports, "buildClientInfoFromHomeAccountId", ()=>buildClientInfoFromHomeAccountId
);
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
var _stringUtilsJs = require("../utils/StringUtils.js");
var _constantsJs = require("../utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Function to build a client info object from server clientInfo string
 * @param rawClientInfo
 * @param crypto
 */ function buildClientInfo(rawClientInfo, crypto) {
    if (_stringUtilsJs.StringUtils.isEmpty(rawClientInfo)) throw _clientAuthErrorJs.ClientAuthError.createClientInfoEmptyError();
    try {
        var decodedClientInfo = crypto.base64Decode(rawClientInfo);
        return JSON.parse(decodedClientInfo);
    } catch (e) {
        throw _clientAuthErrorJs.ClientAuthError.createClientInfoDecodingError(e);
    }
}
/**
 * Function to build a client info object from cached homeAccountId string
 * @param homeAccountId
 */ function buildClientInfoFromHomeAccountId(homeAccountId) {
    if (_stringUtilsJs.StringUtils.isEmpty(homeAccountId)) throw _clientAuthErrorJs.ClientAuthError.createClientInfoDecodingError("Home account ID was empty.");
    var clientInfoParts = homeAccountId.split(_constantsJs.Separators.CLIENT_INFO_SEPARATOR, 2);
    return {
        uid: clientInfoParts[0],
        utid: clientInfoParts.length < 2 ? _constantsJs.Constants.EMPTY_STRING : clientInfoParts[1]
    };
}

},{"../error/ClientAuthError.js":"jz6JJ","../utils/StringUtils.js":"2gXP4","../utils/Constants.js":"7OLHu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"216oN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthorityType", ()=>AuthorityType
);
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Authority types supported by MSAL.
 */ var AuthorityType;
(function(AuthorityType1) {
    AuthorityType1[AuthorityType1["Default"] = 0] = "Default";
    AuthorityType1[AuthorityType1["Adfs"] = 1] = "Adfs";
})(AuthorityType || (AuthorityType = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5l5Zq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthToken", ()=>AuthToken
);
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
var _stringUtilsJs = require("../utils/StringUtils.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * JWT Token representation class. Parses token string and generates claims object.
 */ var AuthToken = function() {
    function AuthToken1(rawToken, crypto) {
        if (_stringUtilsJs.StringUtils.isEmpty(rawToken)) throw _clientAuthErrorJs.ClientAuthError.createTokenNullOrEmptyError(rawToken);
        this.rawToken = rawToken;
        this.claims = AuthToken1.extractTokenClaims(rawToken, crypto);
    }
    /**
     * Extract token by decoding the rawToken
     *
     * @param encodedToken
     */ AuthToken1.extractTokenClaims = function(encodedToken, crypto) {
        var decodedToken = _stringUtilsJs.StringUtils.decodeAuthToken(encodedToken);
        // token will be decoded to get the username
        try {
            var base64TokenPayload = decodedToken.JWSPayload;
            // base64Decode() should throw an error if there is an issue
            var base64Decoded = crypto.base64Decode(base64TokenPayload);
            return JSON.parse(base64Decoded);
        } catch (err) {
            throw _clientAuthErrorJs.ClientAuthError.createTokenParsingError(err);
        }
    };
    return AuthToken1;
}();

},{"../error/ClientAuthError.js":"jz6JJ","../utils/StringUtils.js":"2gXP4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lJfFj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NetworkManager", ()=>NetworkManager
);
var _tslibJs = require("../_virtual/_tslib.js");
var _throttlingUtilsJs = require("./ThrottlingUtils.js");
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
var _authErrorJs = require("../error/AuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var NetworkManager = function() {
    function NetworkManager1(networkClient, cacheManager) {
        this.networkClient = networkClient;
        this.cacheManager = cacheManager;
    }
    /**
     * Wraps sendPostRequestAsync with necessary preflight and postflight logic
     * @param thumbprint
     * @param tokenEndpoint
     * @param options
     */ NetworkManager1.prototype.sendPostRequest = function(thumbprint, tokenEndpoint, options) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var response, e_1;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _throttlingUtilsJs.ThrottlingUtils.preProcess(this.cacheManager, thumbprint);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.networkClient.sendPostRequestAsync(tokenEndpoint, options)
                        ];
                    case 2:
                        response = _a.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        e_1 = _a.sent();
                        if (e_1 instanceof _authErrorJs.AuthError) throw e_1;
                        else throw _clientAuthErrorJs.ClientAuthError.createNetworkError(tokenEndpoint, e_1);
                    case 4:
                        _throttlingUtilsJs.ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);
                        return [
                            2 /*return*/ ,
                            response
                        ];
                }
            });
        });
    };
    return NetworkManager1;
}();

},{"../_virtual/_tslib.js":"9y6Jg","./ThrottlingUtils.js":"280YG","../error/ClientAuthError.js":"jz6JJ","../error/AuthError.js":"8SAdb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"280YG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ThrottlingUtils", ()=>ThrottlingUtils
);
var _constantsJs = require("../utils/Constants.js");
var _serverErrorJs = require("../error/ServerError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var ThrottlingUtils = function() {
    function ThrottlingUtils1() {
    }
    /**
     * Prepares a RequestThumbprint to be stored as a key.
     * @param thumbprint
     */ ThrottlingUtils1.generateThrottlingStorageKey = function(thumbprint) {
        return _constantsJs.ThrottlingConstants.THROTTLING_PREFIX + "." + JSON.stringify(thumbprint);
    };
    /**
     * Performs necessary throttling checks before a network request.
     * @param cacheManager
     * @param thumbprint
     */ ThrottlingUtils1.preProcess = function(cacheManager, thumbprint) {
        var _a;
        var key = ThrottlingUtils1.generateThrottlingStorageKey(thumbprint);
        var value = cacheManager.getThrottlingCache(key);
        if (value) {
            if (value.throttleTime < Date.now()) {
                cacheManager.removeItem(key, _constantsJs.CacheSchemaType.THROTTLING);
                return;
            }
            throw new _serverErrorJs.ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(" ")) || _constantsJs.Constants.EMPTY_STRING, value.errorMessage, value.subError);
        }
    };
    /**
     * Performs necessary throttling checks after a network request.
     * @param cacheManager
     * @param thumbprint
     * @param response
     */ ThrottlingUtils1.postProcess = function(cacheManager, thumbprint, response) {
        if (ThrottlingUtils1.checkResponseStatus(response) || ThrottlingUtils1.checkResponseForRetryAfter(response)) {
            var thumbprintValue = {
                throttleTime: ThrottlingUtils1.calculateThrottleTime(parseInt(response.headers[_constantsJs.HeaderNames.RETRY_AFTER])),
                error: response.body.error,
                errorCodes: response.body.error_codes,
                errorMessage: response.body.error_description,
                subError: response.body.suberror
            };
            cacheManager.setThrottlingCache(ThrottlingUtils1.generateThrottlingStorageKey(thumbprint), thumbprintValue);
        }
    };
    /**
     * Checks a NetworkResponse object's status codes against 429 or 5xx
     * @param response
     */ ThrottlingUtils1.checkResponseStatus = function(response) {
        return response.status === 429 || response.status >= 500 && response.status < 600;
    };
    /**
     * Checks a NetworkResponse object's RetryAfter header
     * @param response
     */ ThrottlingUtils1.checkResponseForRetryAfter = function(response) {
        if (response.headers) return response.headers.hasOwnProperty(_constantsJs.HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);
        return false;
    };
    /**
     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.
     * @param throttleTime
     */ ThrottlingUtils1.calculateThrottleTime = function(throttleTime) {
        var time = throttleTime <= 0 ? 0 : throttleTime;
        var currentSeconds = Date.now() / 1000;
        return Math.floor(Math.min(currentSeconds + (time || _constantsJs.ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + _constantsJs.ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);
    };
    ThrottlingUtils1.removeThrottle = function(cacheManager, clientId, request, homeAccountIdentifier) {
        var thumbprint = {
            clientId: clientId,
            authority: request.authority,
            scopes: request.scopes,
            homeAccountIdentifier: homeAccountIdentifier,
            claims: request.claims,
            authenticationScheme: request.authenticationScheme,
            resourceRequestMethod: request.resourceRequestMethod,
            resourceRequestUri: request.resourceRequestUri,
            shrClaims: request.shrClaims,
            sshKid: request.sshKid
        };
        var key = this.generateThrottlingStorageKey(thumbprint);
        return cacheManager.removeItem(key, _constantsJs.CacheSchemaType.THROTTLING);
    };
    return ThrottlingUtils1;
}();

},{"../utils/Constants.js":"7OLHu","../error/ServerError.js":"6ak6C","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6ak6C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ServerError", ()=>ServerError
);
var _tslibJs = require("../_virtual/_tslib.js");
var _authErrorJs = require("./AuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Error thrown when there is an error with the server code, for example, unavailability.
 */ var ServerError = function(_super) {
    _tslibJs.__extends(ServerError1, _super);
    function ServerError1(errorCode, errorMessage, subError) {
        var _this = _super.call(this, errorCode, errorMessage, subError) || this;
        _this.name = "ServerError";
        Object.setPrototypeOf(_this, ServerError1.prototype);
        return _this;
    }
    return ServerError1;
}(_authErrorJs.AuthError);

},{"../_virtual/_tslib.js":"9y6Jg","./AuthError.js":"8SAdb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cBmfd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CcsCredentialType", ()=>CcsCredentialType
);
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var CcsCredentialType;
(function(CcsCredentialType1) {
    CcsCredentialType1["HOME_ACCOUNT_ID"] = "home_account_id";
    CcsCredentialType1["UPN"] = "UPN";
})(CcsCredentialType || (CcsCredentialType = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"beOsX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RequestParameterBuilder", ()=>RequestParameterBuilder
);
var _tslibJs = require("../_virtual/_tslib.js");
var _constantsJs = require("../utils/Constants.js");
var _scopeSetJs = require("./ScopeSet.js");
var _clientConfigurationErrorJs = require("../error/ClientConfigurationError.js");
var _requestValidatorJs = require("./RequestValidator.js");
var _stringUtilsJs = require("../utils/StringUtils.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var RequestParameterBuilder = function() {
    function RequestParameterBuilder1() {
        this.parameters = new Map();
    }
    /**
     * add response_type = code
     */ RequestParameterBuilder1.prototype.addResponseTypeCode = function() {
        this.parameters.set(_constantsJs.AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(_constantsJs.Constants.CODE_RESPONSE_TYPE));
    };
    /**
     * add response_mode. defaults to query.
     * @param responseMode
     */ RequestParameterBuilder1.prototype.addResponseMode = function(responseMode) {
        this.parameters.set(_constantsJs.AADServerParamKeys.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : _constantsJs.ResponseMode.QUERY));
    };
    /**
     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios
     * @param scopeSet
     * @param addOidcScopes
     */ RequestParameterBuilder1.prototype.addScopes = function(scopes, addOidcScopes) {
        if (addOidcScopes === void 0) addOidcScopes = true;
        var requestScopes = addOidcScopes ? _tslibJs.__spreadArrays(scopes || [], _constantsJs.OIDC_DEFAULT_SCOPES) : scopes || [];
        var scopeSet = new _scopeSetJs.ScopeSet(requestScopes);
        this.parameters.set(_constantsJs.AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));
    };
    /**
     * add clientId
     * @param clientId
     */ RequestParameterBuilder1.prototype.addClientId = function(clientId) {
        this.parameters.set(_constantsJs.AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));
    };
    /**
     * add redirect_uri
     * @param redirectUri
     */ RequestParameterBuilder1.prototype.addRedirectUri = function(redirectUri) {
        _requestValidatorJs.RequestValidator.validateRedirectUri(redirectUri);
        this.parameters.set(_constantsJs.AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));
    };
    /**
     * add post logout redirectUri
     * @param redirectUri
     */ RequestParameterBuilder1.prototype.addPostLogoutRedirectUri = function(redirectUri) {
        _requestValidatorJs.RequestValidator.validateRedirectUri(redirectUri);
        this.parameters.set(_constantsJs.AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));
    };
    /**
     * add id_token_hint to logout request
     * @param idTokenHint
     */ RequestParameterBuilder1.prototype.addIdTokenHint = function(idTokenHint) {
        this.parameters.set(_constantsJs.AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));
    };
    /**
     * add domain_hint
     * @param domainHint
     */ RequestParameterBuilder1.prototype.addDomainHint = function(domainHint) {
        this.parameters.set(_constantsJs.SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));
    };
    /**
     * add login_hint
     * @param loginHint
     */ RequestParameterBuilder1.prototype.addLoginHint = function(loginHint) {
        this.parameters.set(_constantsJs.SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));
    };
    /**
     * Adds the CCS (Cache Credential Service) query parameter for login_hint
     * @param loginHint
     */ RequestParameterBuilder1.prototype.addCcsUpn = function(loginHint) {
        this.parameters.set(_constantsJs.HeaderNames.CCS_HEADER, encodeURIComponent("UPN:" + loginHint));
    };
    /**
     * Adds the CCS (Cache Credential Service) query parameter for account object
     * @param loginHint
     */ RequestParameterBuilder1.prototype.addCcsOid = function(clientInfo) {
        this.parameters.set(_constantsJs.HeaderNames.CCS_HEADER, encodeURIComponent("Oid:" + clientInfo.uid + "@" + clientInfo.utid));
    };
    /**
     * add sid
     * @param sid
     */ RequestParameterBuilder1.prototype.addSid = function(sid) {
        this.parameters.set(_constantsJs.SSOTypes.SID, encodeURIComponent(sid));
    };
    /**
     * add claims
     * @param claims
     */ RequestParameterBuilder1.prototype.addClaims = function(claims, clientCapabilities) {
        var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);
        _requestValidatorJs.RequestValidator.validateClaims(mergedClaims);
        this.parameters.set(_constantsJs.AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));
    };
    /**
     * add correlationId
     * @param correlationId
     */ RequestParameterBuilder1.prototype.addCorrelationId = function(correlationId) {
        this.parameters.set(_constantsJs.AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));
    };
    /**
     * add library info query params
     * @param libraryInfo
     */ RequestParameterBuilder1.prototype.addLibraryInfo = function(libraryInfo) {
        // Telemetry Info
        this.parameters.set(_constantsJs.AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);
        this.parameters.set(_constantsJs.AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);
        this.parameters.set(_constantsJs.AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);
        this.parameters.set(_constantsJs.AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);
    };
    /**
     * add prompt
     * @param prompt
     */ RequestParameterBuilder1.prototype.addPrompt = function(prompt) {
        _requestValidatorJs.RequestValidator.validatePrompt(prompt);
        this.parameters.set("" + _constantsJs.AADServerParamKeys.PROMPT, encodeURIComponent(prompt));
    };
    /**
     * add state
     * @param state
     */ RequestParameterBuilder1.prototype.addState = function(state) {
        if (!_stringUtilsJs.StringUtils.isEmpty(state)) this.parameters.set(_constantsJs.AADServerParamKeys.STATE, encodeURIComponent(state));
    };
    /**
     * add nonce
     * @param nonce
     */ RequestParameterBuilder1.prototype.addNonce = function(nonce) {
        this.parameters.set(_constantsJs.AADServerParamKeys.NONCE, encodeURIComponent(nonce));
    };
    /**
     * add code_challenge and code_challenge_method
     * - throw if either of them are not passed
     * @param codeChallenge
     * @param codeChallengeMethod
     */ RequestParameterBuilder1.prototype.addCodeChallengeParams = function(codeChallenge, codeChallengeMethod) {
        _requestValidatorJs.RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);
        if (codeChallenge && codeChallengeMethod) {
            this.parameters.set(_constantsJs.AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));
            this.parameters.set(_constantsJs.AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));
        } else throw _clientConfigurationErrorJs.ClientConfigurationError.createInvalidCodeChallengeParamsError();
    };
    /**
     * add the `authorization_code` passed by the user to exchange for a token
     * @param code
     */ RequestParameterBuilder1.prototype.addAuthorizationCode = function(code) {
        this.parameters.set(_constantsJs.AADServerParamKeys.CODE, encodeURIComponent(code));
    };
    /**
     * add the `authorization_code` passed by the user to exchange for a token
     * @param code
     */ RequestParameterBuilder1.prototype.addDeviceCode = function(code) {
        this.parameters.set(_constantsJs.AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));
    };
    /**
     * add the `refreshToken` passed by the user
     * @param refreshToken
     */ RequestParameterBuilder1.prototype.addRefreshToken = function(refreshToken) {
        this.parameters.set(_constantsJs.AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));
    };
    /**
     * add the `code_verifier` passed by the user to exchange for a token
     * @param codeVerifier
     */ RequestParameterBuilder1.prototype.addCodeVerifier = function(codeVerifier) {
        this.parameters.set(_constantsJs.AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));
    };
    /**
     * add client_secret
     * @param clientSecret
     */ RequestParameterBuilder1.prototype.addClientSecret = function(clientSecret) {
        this.parameters.set(_constantsJs.AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));
    };
    /**
     * add clientAssertion for confidential client flows
     * @param clientAssertion
     */ RequestParameterBuilder1.prototype.addClientAssertion = function(clientAssertion) {
        this.parameters.set(_constantsJs.AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));
    };
    /**
     * add clientAssertionType for confidential client flows
     * @param clientAssertionType
     */ RequestParameterBuilder1.prototype.addClientAssertionType = function(clientAssertionType) {
        this.parameters.set(_constantsJs.AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));
    };
    /**
     * add OBO assertion for confidential client flows
     * @param clientAssertion
     */ RequestParameterBuilder1.prototype.addOboAssertion = function(oboAssertion) {
        this.parameters.set(_constantsJs.AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));
    };
    /**
     * add grant type
     * @param grantType
     */ RequestParameterBuilder1.prototype.addRequestTokenUse = function(tokenUse) {
        this.parameters.set(_constantsJs.AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));
    };
    /**
     * add grant type
     * @param grantType
     */ RequestParameterBuilder1.prototype.addGrantType = function(grantType) {
        this.parameters.set(_constantsJs.AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));
    };
    /**
     * add client info
     *
     */ RequestParameterBuilder1.prototype.addClientInfo = function() {
        this.parameters.set(_constantsJs.CLIENT_INFO, "1");
    };
    /**
     * add extraQueryParams
     * @param eQparams
     */ RequestParameterBuilder1.prototype.addExtraQueryParameters = function(eQparams) {
        var _this = this;
        _requestValidatorJs.RequestValidator.sanitizeEQParams(eQparams, this.parameters);
        Object.keys(eQparams).forEach(function(key) {
            _this.parameters.set(key, eQparams[key]);
        });
    };
    RequestParameterBuilder1.prototype.addClientCapabilitiesToClaims = function(claims, clientCapabilities) {
        var mergedClaims;
        // Parse provided claims into JSON object or initialize empty object
        if (!claims) mergedClaims = {
        };
        else try {
            mergedClaims = JSON.parse(claims);
        } catch (e) {
            throw _clientConfigurationErrorJs.ClientConfigurationError.createInvalidClaimsRequestError();
        }
        if (clientCapabilities && clientCapabilities.length > 0) {
            if (!mergedClaims.hasOwnProperty(_constantsJs.ClaimsRequestKeys.ACCESS_TOKEN)) // Add access_token key to claims object
            mergedClaims[_constantsJs.ClaimsRequestKeys.ACCESS_TOKEN] = {
            };
            // Add xms_cc claim with provided clientCapabilities to access_token key
            mergedClaims[_constantsJs.ClaimsRequestKeys.ACCESS_TOKEN][_constantsJs.ClaimsRequestKeys.XMS_CC] = {
                values: clientCapabilities
            };
        }
        return JSON.stringify(mergedClaims);
    };
    /**
     * adds `username` for Password Grant flow
     * @param username
     */ RequestParameterBuilder1.prototype.addUsername = function(username) {
        this.parameters.set(_constantsJs.PasswordGrantConstants.username, username);
    };
    /**
     * adds `password` for Password Grant flow
     * @param password
     */ RequestParameterBuilder1.prototype.addPassword = function(password) {
        this.parameters.set(_constantsJs.PasswordGrantConstants.password, password);
    };
    /**
     * add pop_jwk to query params
     * @param cnfString
     */ RequestParameterBuilder1.prototype.addPopToken = function(cnfString) {
        if (!_stringUtilsJs.StringUtils.isEmpty(cnfString)) {
            this.parameters.set(_constantsJs.AADServerParamKeys.TOKEN_TYPE, _constantsJs.AuthenticationScheme.POP);
            this.parameters.set(_constantsJs.AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));
        }
    };
    /**
     * add SSH JWK and key ID to query params
     */ RequestParameterBuilder1.prototype.addSshJwk = function(sshJwkString) {
        if (!_stringUtilsJs.StringUtils.isEmpty(sshJwkString)) {
            this.parameters.set(_constantsJs.AADServerParamKeys.TOKEN_TYPE, _constantsJs.AuthenticationScheme.SSH);
            this.parameters.set(_constantsJs.AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));
        }
    };
    /**
     * add server telemetry fields
     * @param serverTelemetryManager
     */ RequestParameterBuilder1.prototype.addServerTelemetry = function(serverTelemetryManager) {
        this.parameters.set(_constantsJs.AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());
        this.parameters.set(_constantsJs.AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());
    };
    /**
     * Adds parameter that indicates to the server that throttling is supported
     */ RequestParameterBuilder1.prototype.addThrottling = function() {
        this.parameters.set(_constantsJs.AADServerParamKeys.X_MS_LIB_CAPABILITY, _constantsJs.ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);
    };
    /**
     * Adds logout_hint parameter for "silent" logout which prevent server account picker
     */ RequestParameterBuilder1.prototype.addLogoutHint = function(logoutHint) {
        this.parameters.set(_constantsJs.AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));
    };
    /**
     * Utility to create a URL from the params map
     */ RequestParameterBuilder1.prototype.createQueryString = function() {
        var queryParameterArray = new Array();
        this.parameters.forEach(function(value, key) {
            queryParameterArray.push(key + "=" + value);
        });
        return queryParameterArray.join("&");
    };
    return RequestParameterBuilder1;
}();

},{"../_virtual/_tslib.js":"9y6Jg","../utils/Constants.js":"7OLHu","./ScopeSet.js":"63JqX","../error/ClientConfigurationError.js":"iOtcK","./RequestValidator.js":"eMlW6","../utils/StringUtils.js":"2gXP4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eMlW6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RequestValidator", ()=>RequestValidator
);
var _stringUtilsJs = require("../utils/StringUtils.js");
var _clientConfigurationErrorJs = require("../error/ClientConfigurationError.js");
var _constantsJs = require("../utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Validates server consumable params from the "request" objects
 */ var RequestValidator = function() {
    function RequestValidator1() {
    }
    /**
     * Utility to check if the `redirectUri` in the request is a non-null value
     * @param redirectUri
     */ RequestValidator1.validateRedirectUri = function(redirectUri) {
        if (_stringUtilsJs.StringUtils.isEmpty(redirectUri)) throw _clientConfigurationErrorJs.ClientConfigurationError.createRedirectUriEmptyError();
    };
    /**
     * Utility to validate prompt sent by the user in the request
     * @param prompt
     */ RequestValidator1.validatePrompt = function(prompt) {
        var promptValues = [];
        for(var value in _constantsJs.PromptValue)promptValues.push(_constantsJs.PromptValue[value]);
        if (promptValues.indexOf(prompt) < 0) throw _clientConfigurationErrorJs.ClientConfigurationError.createInvalidPromptError(prompt);
    };
    RequestValidator1.validateClaims = function(claims) {
        try {
            JSON.parse(claims);
        } catch (e) {
            throw _clientConfigurationErrorJs.ClientConfigurationError.createInvalidClaimsRequestError();
        }
    };
    /**
     * Utility to validate code_challenge and code_challenge_method
     * @param codeChallenge
     * @param codeChallengeMethod
     */ RequestValidator1.validateCodeChallengeParams = function(codeChallenge, codeChallengeMethod) {
        if (_stringUtilsJs.StringUtils.isEmpty(codeChallenge) || _stringUtilsJs.StringUtils.isEmpty(codeChallengeMethod)) throw _clientConfigurationErrorJs.ClientConfigurationError.createInvalidCodeChallengeParamsError();
        else this.validateCodeChallengeMethod(codeChallengeMethod);
    };
    /**
     * Utility to validate code_challenge_method
     * @param codeChallengeMethod
     */ RequestValidator1.validateCodeChallengeMethod = function(codeChallengeMethod) {
        if ([
            _constantsJs.CodeChallengeMethodValues.PLAIN,
            _constantsJs.CodeChallengeMethodValues.S256
        ].indexOf(codeChallengeMethod) < 0) throw _clientConfigurationErrorJs.ClientConfigurationError.createInvalidCodeChallengeMethodError();
    };
    /**
     * Removes unnecessary or duplicate query parameters from extraQueryParameters
     * @param request
     */ RequestValidator1.sanitizeEQParams = function(eQParams, queryParams) {
        if (!eQParams) return {
        };
        // Remove any query parameters already included in SSO params
        queryParams.forEach(function(value, key) {
            if (eQParams[key]) delete eQParams[key];
        });
        return eQParams;
    };
    return RequestValidator1;
}();

},{"../utils/StringUtils.js":"2gXP4","../error/ClientConfigurationError.js":"iOtcK","../utils/Constants.js":"7OLHu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"LseOy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ResponseHandler", ()=>ResponseHandler
);
var _tslibJs = require("../_virtual/_tslib.js");
var _clientInfoJs = require("../account/ClientInfo.js");
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
var _stringUtilsJs = require("../utils/StringUtils.js");
var _serverErrorJs = require("../error/ServerError.js");
var _authTokenJs = require("../account/AuthToken.js");
var _scopeSetJs = require("../request/ScopeSet.js");
var _accountEntityJs = require("../cache/entities/AccountEntity.js");
var _authorityTypeJs = require("../authority/AuthorityType.js");
var _idTokenEntityJs = require("../cache/entities/IdTokenEntity.js");
var _accessTokenEntityJs = require("../cache/entities/AccessTokenEntity.js");
var _refreshTokenEntityJs = require("../cache/entities/RefreshTokenEntity.js");
var _interactionRequiredAuthErrorJs = require("../error/InteractionRequiredAuthError.js");
var _cacheRecordJs = require("../cache/entities/CacheRecord.js");
var _protocolUtilsJs = require("../utils/ProtocolUtils.js");
var _constantsJs = require("../utils/Constants.js");
var _popTokenGeneratorJs = require("../crypto/PopTokenGenerator.js");
var _appMetadataEntityJs = require("../cache/entities/AppMetadataEntity.js");
var _tokenCacheContextJs = require("../cache/persistence/TokenCacheContext.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Class that handles response parsing.
 */ var ResponseHandler = function() {
    function ResponseHandler1(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin) {
        this.clientId = clientId;
        this.cacheStorage = cacheStorage;
        this.cryptoObj = cryptoObj;
        this.logger = logger;
        this.serializableCache = serializableCache;
        this.persistencePlugin = persistencePlugin;
    }
    /**
     * Function which validates server authorization code response.
     * @param serverResponseHash
     * @param cachedState
     * @param cryptoObj
     */ ResponseHandler1.prototype.validateServerAuthorizationCodeResponse = function(serverResponseHash, cachedState, cryptoObj) {
        if (!serverResponseHash.state || !cachedState) throw !serverResponseHash.state ? _clientAuthErrorJs.ClientAuthError.createStateNotFoundError("Server State") : _clientAuthErrorJs.ClientAuthError.createStateNotFoundError("Cached State");
        if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) throw _clientAuthErrorJs.ClientAuthError.createStateMismatchError();
        // Check for error
        if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {
            if (_interactionRequiredAuthErrorJs.InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) throw new _interactionRequiredAuthErrorJs.InteractionRequiredAuthError(serverResponseHash.error || _constantsJs.Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);
            throw new _serverErrorJs.ServerError(serverResponseHash.error || _constantsJs.Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);
        }
        if (serverResponseHash.client_info) _clientInfoJs.buildClientInfo(serverResponseHash.client_info, cryptoObj);
    };
    /**
     * Function which validates server authorization token response.
     * @param serverResponse
     */ ResponseHandler1.prototype.validateTokenResponse = function(serverResponse) {
        // Check for error
        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {
            if (_interactionRequiredAuthErrorJs.InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) throw new _interactionRequiredAuthErrorJs.InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);
            var errString = serverResponse.error_codes + " - [" + serverResponse.timestamp + "]: " + serverResponse.error_description + " - Correlation ID: " + serverResponse.correlation_id + " - Trace ID: " + serverResponse.trace_id;
            throw new _serverErrorJs.ServerError(serverResponse.error, errString, serverResponse.suberror);
        }
    };
    /**
     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.
     * @param serverTokenResponse
     * @param authority
     */ ResponseHandler1.prototype.handleServerTokenResponse = function(serverTokenResponse, authority, reqTimestamp, request, authCodePayload, oboAssertion, handlingRefreshTokenResponse) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var idTokenObj, requestStateObj, cacheRecord, cacheContext, key, account;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (serverTokenResponse.id_token) {
                            idTokenObj = new _authTokenJs.AuthToken(serverTokenResponse.id_token || _constantsJs.Constants.EMPTY_STRING, this.cryptoObj);
                            // token nonce check (TODO: Add a warning if no nonce is given?)
                            if (authCodePayload && !_stringUtilsJs.StringUtils.isEmpty(authCodePayload.nonce)) {
                                if (idTokenObj.claims.nonce !== authCodePayload.nonce) throw _clientAuthErrorJs.ClientAuthError.createNonceMismatchError();
                            }
                        }
                        // generate homeAccountId
                        this.homeAccountIdentifier = _accountEntityJs.AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || _constantsJs.Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);
                        if (!!authCodePayload && !!authCodePayload.state) requestStateObj = _protocolUtilsJs.ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);
                        // Add keyId from request to serverTokenResponse if defined
                        serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;
                        cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenObj, oboAssertion, authCodePayload);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            ,
                            5,
                            8
                        ]);
                        if (!(this.persistencePlugin && this.serializableCache)) return [
                            3 /*break*/ ,
                            3
                        ];
                        this.logger.verbose("Persistence enabled, calling beforeCacheAccess");
                        cacheContext = new _tokenCacheContextJs.TokenCacheContext(this.serializableCache, true);
                        return [
                            4 /*yield*/ ,
                            this.persistencePlugin.beforeCacheAccess(cacheContext)
                        ];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        /*
                         * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.
                         * If not present, we should return null, as it's the case that another application called removeAccount in between
                         * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.
                         */ if (handlingRefreshTokenResponse && cacheRecord.account) {
                            key = cacheRecord.account.generateAccountKey();
                            account = this.cacheStorage.getAccount(key);
                            if (!account) {
                                this.logger.warning("Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache");
                                return [
                                    2 /*return*/ ,
                                    ResponseHandler1.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)
                                ];
                            }
                        }
                        return [
                            4 /*yield*/ ,
                            this.cacheStorage.saveCacheRecord(cacheRecord)
                        ];
                    case 4:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 5:
                        if (!(this.persistencePlugin && this.serializableCache && cacheContext)) return [
                            3 /*break*/ ,
                            7
                        ];
                        this.logger.verbose("Persistence enabled, calling afterCacheAccess");
                        return [
                            4 /*yield*/ ,
                            this.persistencePlugin.afterCacheAccess(cacheContext)
                        ];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 8:
                        return [
                            2 /*return*/ ,
                            ResponseHandler1.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj, serverTokenResponse.spa_code)
                        ];
                }
            });
        });
    };
    /**
     * Generates CacheRecord
     * @param serverTokenResponse
     * @param idTokenObj
     * @param authority
     */ ResponseHandler1.prototype.generateCacheRecord = function(serverTokenResponse, authority, reqTimestamp, request, idTokenObj, oboAssertion, authCodePayload) {
        var env = authority.getPreferredCache();
        if (_stringUtilsJs.StringUtils.isEmpty(env)) throw _clientAuthErrorJs.ClientAuthError.createInvalidCacheEnvironmentError();
        // IdToken: non AAD scenarios can have empty realm
        var cachedIdToken;
        var cachedAccount;
        if (!_stringUtilsJs.StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {
            cachedIdToken = _idTokenEntityJs.IdTokenEntity.createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token || _constantsJs.Constants.EMPTY_STRING, this.clientId, idTokenObj.claims.tid || _constantsJs.Constants.EMPTY_STRING, oboAssertion);
            cachedAccount = this.generateAccountEntity(serverTokenResponse, idTokenObj, authority, oboAssertion, authCodePayload);
        }
        // AccessToken
        var cachedAccessToken = null;
        if (!_stringUtilsJs.StringUtils.isEmpty(serverTokenResponse.access_token)) {
            // If scopes not returned in server response, use request scopes
            var responseScopes = serverTokenResponse.scope ? _scopeSetJs.ScopeSet.fromString(serverTokenResponse.scope) : new _scopeSetJs.ScopeSet(request.scopes || []);
            /*
             * Use timestamp calculated before request
             * Server may return timestamps as strings, parse to numbers if so.
             */ var expiresIn = (typeof serverTokenResponse.expires_in === "string" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;
            var extExpiresIn = (typeof serverTokenResponse.ext_expires_in === "string" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;
            var refreshIn = (typeof serverTokenResponse.refresh_in === "string" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;
            var tokenExpirationSeconds = reqTimestamp + expiresIn;
            var extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;
            var refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;
            // non AAD scenarios can have empty realm
            cachedAccessToken = _accessTokenEntityJs.AccessTokenEntity.createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token || _constantsJs.Constants.EMPTY_STRING, this.clientId, idTokenObj ? idTokenObj.claims.tid || _constantsJs.Constants.EMPTY_STRING : authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj, refreshOnSeconds, serverTokenResponse.token_type, oboAssertion, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);
        }
        // refreshToken
        var cachedRefreshToken = null;
        if (!_stringUtilsJs.StringUtils.isEmpty(serverTokenResponse.refresh_token)) cachedRefreshToken = _refreshTokenEntityJs.RefreshTokenEntity.createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token || _constantsJs.Constants.EMPTY_STRING, this.clientId, serverTokenResponse.foci, oboAssertion);
        // appMetadata
        var cachedAppMetadata = null;
        if (!_stringUtilsJs.StringUtils.isEmpty(serverTokenResponse.foci)) cachedAppMetadata = _appMetadataEntityJs.AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);
        return new _cacheRecordJs.CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);
    };
    /**
     * Generate Account
     * @param serverTokenResponse
     * @param idToken
     * @param authority
     */ ResponseHandler1.prototype.generateAccountEntity = function(serverTokenResponse, idToken, authority, oboAssertion, authCodePayload) {
        var authorityType = authority.authorityType;
        var cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : "";
        var msGraphhost = authCodePayload ? authCodePayload.msgraph_host : "";
        // ADFS does not require client_info in the response
        if (authorityType === _authorityTypeJs.AuthorityType.Adfs) {
            this.logger.verbose("Authority type is ADFS, creating ADFS account");
            return _accountEntityJs.AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost);
        }
        // This fallback applies to B2C as well as they fall under an AAD account type.
        if (_stringUtilsJs.StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === "AAD") throw _clientAuthErrorJs.ClientAuthError.createClientInfoEmptyError();
        return serverTokenResponse.client_info ? _accountEntityJs.AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost) : _accountEntityJs.AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost);
    };
    /**
     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.
     *
     * Optionally takes a state string that is set as-is in the response.
     *
     * @param cacheRecord
     * @param idTokenObj
     * @param fromTokenCache
     * @param stateString
     */ ResponseHandler1.generateAuthenticationResult = function(cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenObj, requestState, code) {
        var _a, _b, _c;
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var accessToken, responseScopes, expiresOn, extExpiresOn, familyId, popTokenGenerator, uid, tid;
            return _tslibJs.__generator(this, function(_d) {
                switch(_d.label){
                    case 0:
                        accessToken = "";
                        responseScopes = [];
                        expiresOn = null;
                        familyId = _constantsJs.Constants.EMPTY_STRING;
                        if (!cacheRecord.accessToken) return [
                            3 /*break*/ ,
                            4
                        ];
                        if (!(cacheRecord.accessToken.tokenType === _constantsJs.AuthenticationScheme.POP)) return [
                            3 /*break*/ ,
                            2
                        ];
                        popTokenGenerator = new _popTokenGeneratorJs.PopTokenGenerator(cryptoObj);
                        return [
                            4 /*yield*/ ,
                            popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, request)
                        ];
                    case 1:
                        accessToken = _d.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        accessToken = cacheRecord.accessToken.secret;
                        _d.label = 3;
                    case 3:
                        responseScopes = _scopeSetJs.ScopeSet.fromString(cacheRecord.accessToken.target).asArray();
                        expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);
                        extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);
                        _d.label = 4;
                    case 4:
                        if (cacheRecord.appMetadata) familyId = cacheRecord.appMetadata.familyId === _constantsJs.THE_FAMILY_ID ? _constantsJs.THE_FAMILY_ID : _constantsJs.Constants.EMPTY_STRING;
                        uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || _constantsJs.Constants.EMPTY_STRING;
                        tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || _constantsJs.Constants.EMPTY_STRING;
                        return [
                            2 /*return*/ ,
                            {
                                authority: authority.canonicalAuthority,
                                uniqueId: uid,
                                tenantId: tid,
                                scopes: responseScopes,
                                account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,
                                idToken: idTokenObj ? idTokenObj.rawToken : _constantsJs.Constants.EMPTY_STRING,
                                idTokenClaims: idTokenObj ? idTokenObj.claims : {
                                },
                                accessToken: accessToken,
                                fromCache: fromTokenCache,
                                expiresOn: expiresOn,
                                correlationId: request.correlationId,
                                extExpiresOn: extExpiresOn,
                                familyId: familyId,
                                tokenType: ((_a = cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || _constantsJs.Constants.EMPTY_STRING,
                                state: requestState ? requestState.userRequestState : _constantsJs.Constants.EMPTY_STRING,
                                cloudGraphHostName: ((_b = cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || _constantsJs.Constants.EMPTY_STRING,
                                msGraphHost: ((_c = cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || _constantsJs.Constants.EMPTY_STRING,
                                code: code
                            }
                        ];
                }
            });
        });
    };
    return ResponseHandler1;
}();

},{"../_virtual/_tslib.js":"9y6Jg","../account/ClientInfo.js":"1Am9c","../error/ClientAuthError.js":"jz6JJ","../utils/StringUtils.js":"2gXP4","../error/ServerError.js":"6ak6C","../account/AuthToken.js":"5l5Zq","../request/ScopeSet.js":"63JqX","../cache/entities/AccountEntity.js":"8CJ3A","../authority/AuthorityType.js":"216oN","../cache/entities/IdTokenEntity.js":"91Z1l","../cache/entities/AccessTokenEntity.js":"dJgl2","../cache/entities/RefreshTokenEntity.js":"bYJdb","../error/InteractionRequiredAuthError.js":"5vpVA","../cache/entities/CacheRecord.js":"4mPbV","../utils/ProtocolUtils.js":"i2k1P","../utils/Constants.js":"7OLHu","../crypto/PopTokenGenerator.js":"296QH","../cache/entities/AppMetadataEntity.js":"7lX8V","../cache/persistence/TokenCacheContext.js":"bYCmt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"91Z1l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IdTokenEntity", ()=>IdTokenEntity
);
var _tslibJs = require("../../_virtual/_tslib.js");
var _credentialEntityJs = require("./CredentialEntity.js");
var _constantsJs = require("../../utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * ID_TOKEN Cache
 *
 * Key:Value Schema:
 *
 * Key Example: uid.utid-login.microsoftonline.com-idtoken-clientId-contoso.com-
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      realm: Full tenant or organizational identifier that the account belongs to
 * }
 */ var IdTokenEntity = function(_super) {
    _tslibJs.__extends(IdTokenEntity1, _super);
    function IdTokenEntity1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create IdTokenEntity
     * @param homeAccountId
     * @param authenticationResult
     * @param clientId
     * @param authority
     */ IdTokenEntity1.createIdTokenEntity = function(homeAccountId, environment, idToken, clientId, tenantId, oboAssertion) {
        var idTokenEntity = new IdTokenEntity1();
        idTokenEntity.credentialType = _constantsJs.CredentialType.ID_TOKEN;
        idTokenEntity.homeAccountId = homeAccountId;
        idTokenEntity.environment = environment;
        idTokenEntity.clientId = clientId;
        idTokenEntity.secret = idToken;
        idTokenEntity.realm = tenantId;
        idTokenEntity.oboAssertion = oboAssertion;
        return idTokenEntity;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */ IdTokenEntity1.isIdTokenEntity = function(entity) {
        if (!entity) return false;
        return entity.hasOwnProperty("homeAccountId") && entity.hasOwnProperty("environment") && entity.hasOwnProperty("credentialType") && entity.hasOwnProperty("realm") && entity.hasOwnProperty("clientId") && entity.hasOwnProperty("secret") && entity["credentialType"] === _constantsJs.CredentialType.ID_TOKEN;
    };
    return IdTokenEntity1;
}(_credentialEntityJs.CredentialEntity);

},{"../../_virtual/_tslib.js":"9y6Jg","./CredentialEntity.js":"dpbP8","../../utils/Constants.js":"7OLHu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dJgl2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AccessTokenEntity", ()=>AccessTokenEntity
);
var _tslibJs = require("../../_virtual/_tslib.js");
var _credentialEntityJs = require("./CredentialEntity.js");
var _constantsJs = require("../../utils/Constants.js");
var _timeUtilsJs = require("../../utils/TimeUtils.js");
var _stringUtilsJs = require("../../utils/StringUtils.js");
var _authTokenJs = require("../../account/AuthToken.js");
var _clientAuthErrorJs = require("../../error/ClientAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * ACCESS_TOKEN Credential Type
 *
 * Key:Value Schema:
 *
 * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read
 *
 * Value Schema:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      familyId: Family ID identifier, usually only used for refresh tokens
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
 *      cachedAt: Absolute device time when entry was created in the cache.
 *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.
 *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.
 *      keyId: used for POP and SSH tokenTypes
 *      tokenType: Type of the token issued. Usually "Bearer"
 * }
 */ var AccessTokenEntity = function(_super) {
    _tslibJs.__extends(AccessTokenEntity1, _super);
    function AccessTokenEntity1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create AccessTokenEntity
     * @param homeAccountId
     * @param environment
     * @param accessToken
     * @param clientId
     * @param tenantId
     * @param scopes
     * @param expiresOn
     * @param extExpiresOn
     */ AccessTokenEntity1.createAccessTokenEntity = function(homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, cryptoUtils, refreshOn, tokenType, oboAssertion, keyId, requestedClaims, requestedClaimsHash) {
        var _a, _b;
        var atEntity = new AccessTokenEntity1();
        atEntity.homeAccountId = homeAccountId;
        atEntity.credentialType = _constantsJs.CredentialType.ACCESS_TOKEN;
        atEntity.secret = accessToken;
        var currentTime = _timeUtilsJs.TimeUtils.nowSeconds();
        atEntity.cachedAt = currentTime.toString();
        /*
         * Token expiry time.
         * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.
         */ atEntity.expiresOn = expiresOn.toString();
        atEntity.extendedExpiresOn = extExpiresOn.toString();
        if (refreshOn) atEntity.refreshOn = refreshOn.toString();
        atEntity.environment = environment;
        atEntity.clientId = clientId;
        atEntity.realm = tenantId;
        atEntity.target = scopes;
        atEntity.oboAssertion = oboAssertion;
        atEntity.tokenType = _stringUtilsJs.StringUtils.isEmpty(tokenType) ? _constantsJs.AuthenticationScheme.BEARER : tokenType;
        if (requestedClaims) {
            atEntity.requestedClaims = requestedClaims;
            atEntity.requestedClaimsHash = requestedClaimsHash;
        }
        /*
         * Create Access Token With Auth Scheme instead of regular access token
         * Cast to lower to handle "bearer" from ADFS
         */ if (((_a = atEntity.tokenType) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== _constantsJs.AuthenticationScheme.BEARER.toLowerCase()) {
            atEntity.credentialType = _constantsJs.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;
            switch(atEntity.tokenType){
                case _constantsJs.AuthenticationScheme.POP:
                    // Make sure keyId is present and add it to credential
                    var tokenClaims = _authTokenJs.AuthToken.extractTokenClaims(accessToken, cryptoUtils);
                    if (!((_b = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _b === void 0 ? void 0 : _b.kid)) throw _clientAuthErrorJs.ClientAuthError.createTokenClaimsRequiredError();
                    atEntity.keyId = tokenClaims.cnf.kid;
                    break;
                case _constantsJs.AuthenticationScheme.SSH:
                    atEntity.keyId = keyId;
            }
        }
        return atEntity;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */ AccessTokenEntity1.isAccessTokenEntity = function(entity) {
        if (!entity) return false;
        return entity.hasOwnProperty("homeAccountId") && entity.hasOwnProperty("environment") && entity.hasOwnProperty("credentialType") && entity.hasOwnProperty("realm") && entity.hasOwnProperty("clientId") && entity.hasOwnProperty("secret") && entity.hasOwnProperty("target") && (entity["credentialType"] === _constantsJs.CredentialType.ACCESS_TOKEN || entity["credentialType"] === _constantsJs.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);
    };
    return AccessTokenEntity1;
}(_credentialEntityJs.CredentialEntity);

},{"../../_virtual/_tslib.js":"9y6Jg","./CredentialEntity.js":"dpbP8","../../utils/Constants.js":"7OLHu","../../utils/TimeUtils.js":"kDGso","../../utils/StringUtils.js":"2gXP4","../../account/AuthToken.js":"5l5Zq","../../error/ClientAuthError.js":"jz6JJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kDGso":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TimeUtils", ()=>TimeUtils
);
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Utility class which exposes functions for managing date and time operations.
 */ var TimeUtils = function() {
    function TimeUtils1() {
    }
    /**
     * return the current time in Unix time (seconds).
     */ TimeUtils1.nowSeconds = function() {
        // Date.getTime() returns in milliseconds.
        return Math.round(new Date().getTime() / 1000);
    };
    /**
     * check if a token is expired based on given UTC time in seconds.
     * @param expiresOn
     */ TimeUtils1.isTokenExpired = function(expiresOn, offset) {
        // check for access token expiry
        var expirationSec = Number(expiresOn) || 0;
        var offsetCurrentTimeSec = TimeUtils1.nowSeconds() + offset;
        // If current time + offset is greater than token expiration time, then token is expired.
        return offsetCurrentTimeSec > expirationSec;
    };
    /**
     * If the current time is earlier than the time that a token was cached at, we must discard the token
     * i.e. The system clock was turned back after acquiring the cached token
     * @param cachedAt
     * @param offset
     */ TimeUtils1.wasClockTurnedBack = function(cachedAt) {
        var cachedAtSec = Number(cachedAt);
        return cachedAtSec > TimeUtils1.nowSeconds();
    };
    /**
     * Waits for t number of milliseconds
     * @param t number
     * @param value T
     */ TimeUtils1.delay = function(t, value) {
        return new Promise(function(resolve) {
            return setTimeout(function() {
                return resolve(value);
            }, t);
        });
    };
    return TimeUtils1;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bYJdb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RefreshTokenEntity", ()=>RefreshTokenEntity
);
var _tslibJs = require("../../_virtual/_tslib.js");
var _credentialEntityJs = require("./CredentialEntity.js");
var _constantsJs = require("../../utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * REFRESH_TOKEN Cache
 *
 * Key:Value Schema:
 *
 * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--
 *
 * Value:
 * {
 *      homeAccountId: home account identifier for the auth scheme,
 *      environment: entity that issued the token, represented as a full host
 *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
 *      clientId: client ID of the application
 *      secret: Actual credential as a string
 *      familyId: Family ID identifier, '1' represents Microsoft Family
 *      realm: Full tenant or organizational identifier that the account belongs to
 *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
 * }
 */ var RefreshTokenEntity = function(_super) {
    _tslibJs.__extends(RefreshTokenEntity1, _super);
    function RefreshTokenEntity1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create RefreshTokenEntity
     * @param homeAccountId
     * @param authenticationResult
     * @param clientId
     * @param authority
     */ RefreshTokenEntity1.createRefreshTokenEntity = function(homeAccountId, environment, refreshToken, clientId, familyId, oboAssertion) {
        var rtEntity = new RefreshTokenEntity1();
        rtEntity.clientId = clientId;
        rtEntity.credentialType = _constantsJs.CredentialType.REFRESH_TOKEN;
        rtEntity.environment = environment;
        rtEntity.homeAccountId = homeAccountId;
        rtEntity.secret = refreshToken;
        rtEntity.oboAssertion = oboAssertion;
        if (familyId) rtEntity.familyId = familyId;
        return rtEntity;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */ RefreshTokenEntity1.isRefreshTokenEntity = function(entity) {
        if (!entity) return false;
        return entity.hasOwnProperty("homeAccountId") && entity.hasOwnProperty("environment") && entity.hasOwnProperty("credentialType") && entity.hasOwnProperty("clientId") && entity.hasOwnProperty("secret") && entity["credentialType"] === _constantsJs.CredentialType.REFRESH_TOKEN;
    };
    return RefreshTokenEntity1;
}(_credentialEntityJs.CredentialEntity);

},{"../../_virtual/_tslib.js":"9y6Jg","./CredentialEntity.js":"dpbP8","../../utils/Constants.js":"7OLHu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5vpVA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InteractionRequiredAuthError", ()=>InteractionRequiredAuthError
);
parcelHelpers.export(exports, "InteractionRequiredAuthErrorMessage", ()=>InteractionRequiredAuthErrorMessage
);
parcelHelpers.export(exports, "InteractionRequiredAuthSubErrorMessage", ()=>InteractionRequiredAuthSubErrorMessage
);
parcelHelpers.export(exports, "InteractionRequiredServerErrorMessage", ()=>InteractionRequiredServerErrorMessage
);
var _tslibJs = require("../_virtual/_tslib.js");
var _authErrorJs = require("./AuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required
 */ var InteractionRequiredServerErrorMessage = [
    "interaction_required",
    "consent_required",
    "login_required"
];
var InteractionRequiredAuthSubErrorMessage = [
    "message_only",
    "additional_action",
    "basic_action",
    "user_password_expired",
    "consent_required"
];
/**
 * Interaction required errors defined by the SDK
 */ var InteractionRequiredAuthErrorMessage = {
    noTokensFoundError: {
        code: "no_tokens_found",
        desc: "No refresh token found in the cache. Please sign-in."
    }
};
/**
 * Error thrown when user interaction is required.
 */ var InteractionRequiredAuthError = function(_super) {
    _tslibJs.__extends(InteractionRequiredAuthError1, _super);
    function InteractionRequiredAuthError1(errorCode, errorMessage, subError) {
        var _this = _super.call(this, errorCode, errorMessage, subError) || this;
        _this.name = "InteractionRequiredAuthError";
        Object.setPrototypeOf(_this, InteractionRequiredAuthError1.prototype);
        return _this;
    }
    /**
     * Helper function used to determine if an error thrown by the server requires interaction to resolve
     * @param errorCode
     * @param errorString
     * @param subError
     */ InteractionRequiredAuthError1.isInteractionRequiredError = function(errorCode, errorString, subError) {
        var isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;
        var isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;
        var isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some(function(irErrorCode) {
            return errorString.indexOf(irErrorCode) > -1;
        });
        return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;
    };
    /**
     * Creates an error thrown when the authorization code required for a token request is null or empty.
     */ InteractionRequiredAuthError1.createNoTokensFoundError = function() {
        return new InteractionRequiredAuthError1(InteractionRequiredAuthErrorMessage.noTokensFoundError.code, InteractionRequiredAuthErrorMessage.noTokensFoundError.desc);
    };
    return InteractionRequiredAuthError1;
}(_authErrorJs.AuthError);

},{"../_virtual/_tslib.js":"9y6Jg","./AuthError.js":"8SAdb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4mPbV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CacheRecord", ()=>CacheRecord
);
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var CacheRecord = function() {
    function CacheRecord1(accountEntity, idTokenEntity, accessTokenEntity, refreshTokenEntity, appMetadataEntity) {
        this.account = accountEntity || null;
        this.idToken = idTokenEntity || null;
        this.accessToken = accessTokenEntity || null;
        this.refreshToken = refreshTokenEntity || null;
        this.appMetadata = appMetadataEntity || null;
    }
    return CacheRecord1;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i2k1P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProtocolUtils", ()=>ProtocolUtils
);
var _stringUtilsJs = require("./StringUtils.js");
var _constantsJs = require("./Constants.js");
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Class which provides helpers for OAuth 2.0 protocol specific values
 */ var ProtocolUtils = function() {
    function ProtocolUtils1() {
    }
    /**
     * Appends user state with random guid, or returns random guid.
     * @param userState
     * @param randomGuid
     */ ProtocolUtils1.setRequestState = function(cryptoObj, userState, meta) {
        var libraryState = ProtocolUtils1.generateLibraryState(cryptoObj, meta);
        return !_stringUtilsJs.StringUtils.isEmpty(userState) ? "" + libraryState + _constantsJs.Constants.RESOURCE_DELIM + userState : libraryState;
    };
    /**
     * Generates the state value used by the common library.
     * @param randomGuid
     * @param cryptoObj
     */ ProtocolUtils1.generateLibraryState = function(cryptoObj, meta) {
        if (!cryptoObj) throw _clientAuthErrorJs.ClientAuthError.createNoCryptoObjectError("generateLibraryState");
        // Create a state object containing a unique id and the timestamp of the request creation
        var stateObj = {
            id: cryptoObj.createNewGuid()
        };
        if (meta) stateObj.meta = meta;
        var stateString = JSON.stringify(stateObj);
        return cryptoObj.base64Encode(stateString);
    };
    /**
     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.
     * @param state
     * @param cryptoObj
     */ ProtocolUtils1.parseRequestState = function(cryptoObj, state) {
        if (!cryptoObj) throw _clientAuthErrorJs.ClientAuthError.createNoCryptoObjectError("parseRequestState");
        if (_stringUtilsJs.StringUtils.isEmpty(state)) throw _clientAuthErrorJs.ClientAuthError.createInvalidStateError(state, "Null, undefined or empty state");
        try {
            // Split the state between library state and user passed state and decode them separately
            var splitState = state.split(_constantsJs.Constants.RESOURCE_DELIM);
            var libraryState = splitState[0];
            var userState = splitState.length > 1 ? splitState.slice(1).join(_constantsJs.Constants.RESOURCE_DELIM) : "";
            var libraryStateString = cryptoObj.base64Decode(libraryState);
            var libraryStateObj = JSON.parse(libraryStateString);
            return {
                userRequestState: !_stringUtilsJs.StringUtils.isEmpty(userState) ? userState : "",
                libraryState: libraryStateObj
            };
        } catch (e) {
            throw _clientAuthErrorJs.ClientAuthError.createInvalidStateError(state, e);
        }
    };
    return ProtocolUtils1;
}();

},{"./StringUtils.js":"2gXP4","./Constants.js":"7OLHu","../error/ClientAuthError.js":"jz6JJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"296QH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopTokenGenerator", ()=>PopTokenGenerator
);
var _tslibJs = require("../_virtual/_tslib.js");
var _authTokenJs = require("../account/AuthToken.js");
var _timeUtilsJs = require("../utils/TimeUtils.js");
var _urlStringJs = require("../url/UrlString.js");
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var KeyLocation;
(function(KeyLocation1) {
    KeyLocation1["SW"] = "sw";
    KeyLocation1["UHW"] = "uhw";
})(KeyLocation || (KeyLocation = {
}));
var PopTokenGenerator = function() {
    function PopTokenGenerator1(cryptoUtils) {
        this.cryptoUtils = cryptoUtils;
    }
    PopTokenGenerator1.prototype.generateCnf = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var reqCnf;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.generateKid(request)
                        ];
                    case 1:
                        reqCnf = _a.sent();
                        return [
                            2 /*return*/ ,
                            this.cryptoUtils.base64Encode(JSON.stringify(reqCnf))
                        ];
                }
            });
        });
    };
    PopTokenGenerator1.prototype.generateKid = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var kidThumbprint;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.cryptoUtils.getPublicKeyThumbprint(request)
                        ];
                    case 1:
                        kidThumbprint = _a.sent();
                        return [
                            2 /*return*/ ,
                            {
                                kid: kidThumbprint,
                                xms_ksl: KeyLocation.SW
                            }
                        ];
                }
            });
        });
    };
    PopTokenGenerator1.prototype.signPopToken = function(accessToken, request) {
        var _a;
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var tokenClaims;
            return _tslibJs.__generator(this, function(_b) {
                tokenClaims = _authTokenJs.AuthToken.extractTokenClaims(accessToken, this.cryptoUtils);
                if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) throw _clientAuthErrorJs.ClientAuthError.createTokenClaimsRequiredError();
                return [
                    2 /*return*/ ,
                    this.signPayload(accessToken, tokenClaims.cnf.kid, request)
                ];
            });
        });
    };
    PopTokenGenerator1.prototype.signPayload = function(payload, kid, request, claims) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, resourceUrlString, resourceUrlComponents;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        resourceRequestMethod = request.resourceRequestMethod, resourceRequestUri = request.resourceRequestUri, shrClaims = request.shrClaims, shrNonce = request.shrNonce;
                        resourceUrlString = resourceRequestUri ? new _urlStringJs.UrlString(resourceRequestUri) : undefined;
                        resourceUrlComponents = resourceUrlString === null || resourceUrlString === void 0 ? void 0 : resourceUrlString.getUrlComponents();
                        return [
                            4 /*yield*/ ,
                            this.cryptoUtils.signJwt(_tslibJs.__assign({
                                at: payload,
                                ts: _timeUtilsJs.TimeUtils.nowSeconds(),
                                m: resourceRequestMethod === null || resourceRequestMethod === void 0 ? void 0 : resourceRequestMethod.toUpperCase(),
                                u: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.HostNameAndPort,
                                nonce: shrNonce || this.cryptoUtils.createNewGuid(),
                                p: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.AbsolutePath,
                                q: (resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.QueryString) ? [
                                    [],
                                    resourceUrlComponents.QueryString
                                ] : undefined,
                                client_claims: shrClaims || undefined
                            }, claims), kid)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                }
            });
        });
    };
    return PopTokenGenerator1;
}();

},{"../_virtual/_tslib.js":"9y6Jg","../account/AuthToken.js":"5l5Zq","../utils/TimeUtils.js":"kDGso","../url/UrlString.js":"gLvTY","../error/ClientAuthError.js":"jz6JJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gLvTY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UrlString", ()=>UrlString
);
var _clientConfigurationErrorJs = require("../error/ClientConfigurationError.js");
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
var _stringUtilsJs = require("../utils/StringUtils.js");
var _constantsJs = require("../utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Url object class which can perform various transformations on url strings.
 */ var UrlString = function() {
    function UrlString1(url) {
        this._urlString = url;
        if (_stringUtilsJs.StringUtils.isEmpty(this._urlString)) // Throws error if url is empty
        throw _clientConfigurationErrorJs.ClientConfigurationError.createUrlEmptyError();
        if (_stringUtilsJs.StringUtils.isEmpty(this.getHash())) this._urlString = UrlString1.canonicalizeUri(url);
    }
    Object.defineProperty(UrlString1.prototype, "urlString", {
        get: function() {
            return this._urlString;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Ensure urls are lower case and end with a / character.
     * @param url
     */ UrlString1.canonicalizeUri = function(url) {
        if (url) {
            var lowerCaseUrl = url.toLowerCase();
            if (_stringUtilsJs.StringUtils.endsWith(lowerCaseUrl, "?")) lowerCaseUrl = lowerCaseUrl.slice(0, -1);
            else if (_stringUtilsJs.StringUtils.endsWith(lowerCaseUrl, "?/")) lowerCaseUrl = lowerCaseUrl.slice(0, -2);
            if (!_stringUtilsJs.StringUtils.endsWith(lowerCaseUrl, "/")) lowerCaseUrl += "/";
            return lowerCaseUrl;
        }
        return url;
    };
    /**
     * Throws if urlString passed is not a valid authority URI string.
     */ UrlString1.prototype.validateAsUri = function() {
        // Attempts to parse url for uri components
        var components;
        try {
            components = this.getUrlComponents();
        } catch (e) {
            throw _clientConfigurationErrorJs.ClientConfigurationError.createUrlParseError(e);
        }
        // Throw error if URI or path segments are not parseable.
        if (!components.HostNameAndPort || !components.PathSegments) throw _clientConfigurationErrorJs.ClientConfigurationError.createUrlParseError("Given url string: " + this.urlString);
        // Throw error if uri is insecure.
        if (!components.Protocol || components.Protocol.toLowerCase() !== "https:") throw _clientConfigurationErrorJs.ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);
    };
    /**
     * Given a url and a query string return the url with provided query string appended
     * @param url
     * @param queryString
     */ UrlString1.appendQueryString = function(url, queryString) {
        if (_stringUtilsJs.StringUtils.isEmpty(queryString)) return url;
        return url.indexOf("?") < 0 ? url + "?" + queryString : url + "&" + queryString;
    };
    /**
     * Returns a url with the hash removed
     * @param url
     */ UrlString1.removeHashFromUrl = function(url) {
        return UrlString1.canonicalizeUri(url.split("#")[0]);
    };
    /**
     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d
     * @param href The url
     * @param tenantId The tenant id to replace
     */ UrlString1.prototype.replaceTenantPath = function(tenantId) {
        var urlObject = this.getUrlComponents();
        var pathArray = urlObject.PathSegments;
        if (tenantId && pathArray.length !== 0 && (pathArray[0] === _constantsJs.AADAuthorityConstants.COMMON || pathArray[0] === _constantsJs.AADAuthorityConstants.ORGANIZATIONS)) pathArray[0] = tenantId;
        return UrlString1.constructAuthorityUriFromObject(urlObject);
    };
    /**
     * Returns the anchor part(#) of the URL
     */ UrlString1.prototype.getHash = function() {
        return UrlString1.parseHash(this.urlString);
    };
    /**
     * Parses out the components from a url string.
     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.
     */ UrlString1.prototype.getUrlComponents = function() {
        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0
        var regEx = RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?");
        // If url string does not match regEx, we throw an error
        var match = this.urlString.match(regEx);
        if (!match) throw _clientConfigurationErrorJs.ClientConfigurationError.createUrlParseError("Given url string: " + this.urlString);
        // Url component object
        var urlComponents = {
            Protocol: match[1],
            HostNameAndPort: match[4],
            AbsolutePath: match[5],
            QueryString: match[7]
        };
        var pathSegments = urlComponents.AbsolutePath.split("/");
        pathSegments = pathSegments.filter(function(val) {
            return val && val.length > 0;
        }); // remove empty elements
        urlComponents.PathSegments = pathSegments;
        if (!_stringUtilsJs.StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith("/")) urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);
        return urlComponents;
    };
    UrlString1.getDomainFromUrl = function(url) {
        var regEx = RegExp("^([^:/?#]+://)?([^/?#]*)");
        var match = url.match(regEx);
        if (!match) throw _clientConfigurationErrorJs.ClientConfigurationError.createUrlParseError("Given url string: " + url);
        return match[2];
    };
    UrlString1.getAbsoluteUrl = function(relativeUrl, baseUrl) {
        if (relativeUrl[0] === _constantsJs.Constants.FORWARD_SLASH) {
            var url = new UrlString1(baseUrl);
            var baseComponents = url.getUrlComponents();
            return baseComponents.Protocol + "//" + baseComponents.HostNameAndPort + relativeUrl;
        }
        return relativeUrl;
    };
    /**
     * Parses hash string from given string. Returns empty string if no hash symbol is found.
     * @param hashString
     */ UrlString1.parseHash = function(hashString) {
        var hashIndex1 = hashString.indexOf("#");
        var hashIndex2 = hashString.indexOf("#/");
        if (hashIndex2 > -1) return hashString.substring(hashIndex2 + 2);
        else if (hashIndex1 > -1) return hashString.substring(hashIndex1 + 1);
        return "";
    };
    UrlString1.constructAuthorityUriFromObject = function(urlObject) {
        return new UrlString1(urlObject.Protocol + "//" + urlObject.HostNameAndPort + "/" + urlObject.PathSegments.join("/"));
    };
    /**
     * Returns URL hash as server auth code response object.
     */ UrlString1.getDeserializedHash = function(hash) {
        // Check if given hash is empty
        if (_stringUtilsJs.StringUtils.isEmpty(hash)) return {
        };
        // Strip the # symbol if present
        var parsedHash = UrlString1.parseHash(hash);
        // If # symbol was not present, above will return empty string, so give original hash value
        var deserializedHash = _stringUtilsJs.StringUtils.queryStringToObject(_stringUtilsJs.StringUtils.isEmpty(parsedHash) ? hash : parsedHash);
        // Check if deserialization didn't work
        if (!deserializedHash) throw _clientAuthErrorJs.ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));
        return deserializedHash;
    };
    /**
     * Check if the hash of the URL string contains known properties
     */ UrlString1.hashContainsKnownProperties = function(hash) {
        if (_stringUtilsJs.StringUtils.isEmpty(hash) || hash.indexOf("=") < 0) // Hash doesn't contain key/value pairs
        return false;
        var parameters = UrlString1.getDeserializedHash(hash);
        return !!(parameters.code || parameters.error_description || parameters.error || parameters.state);
    };
    return UrlString1;
}();

},{"../error/ClientConfigurationError.js":"iOtcK","../error/ClientAuthError.js":"jz6JJ","../utils/StringUtils.js":"2gXP4","../utils/Constants.js":"7OLHu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7lX8V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AppMetadataEntity", ()=>AppMetadataEntity
);
var _constantsJs = require("../../utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * APP_METADATA Cache
 *
 * Key:Value Schema:
 *
 * Key: appmetadata-<environment>-<client_id>
 *
 * Value:
 * {
 *      clientId: client ID of the application
 *      environment: entity that issued the token, represented as a full host
 *      familyId: Family ID identifier, '1' represents Microsoft Family
 * }
 */ var AppMetadataEntity = function() {
    function AppMetadataEntity1() {
    }
    /**
     * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>
     */ AppMetadataEntity1.prototype.generateAppMetadataKey = function() {
        return AppMetadataEntity1.generateAppMetadataCacheKey(this.environment, this.clientId);
    };
    /**
     * Generate AppMetadata Cache Key
     */ AppMetadataEntity1.generateAppMetadataCacheKey = function(environment, clientId) {
        var appMetaDataKeyArray = [
            _constantsJs.APP_METADATA,
            environment,
            clientId, 
        ];
        return appMetaDataKeyArray.join(_constantsJs.Separators.CACHE_KEY_SEPARATOR).toLowerCase();
    };
    /**
     * Creates AppMetadataEntity
     * @param clientId
     * @param environment
     * @param familyId
     */ AppMetadataEntity1.createAppMetadataEntity = function(clientId, environment, familyId) {
        var appMetadata = new AppMetadataEntity1();
        appMetadata.clientId = clientId;
        appMetadata.environment = environment;
        if (familyId) appMetadata.familyId = familyId;
        return appMetadata;
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */ AppMetadataEntity1.isAppMetadataEntity = function(key, entity) {
        if (!entity) return false;
        return key.indexOf(_constantsJs.APP_METADATA) === 0 && entity.hasOwnProperty("clientId") && entity.hasOwnProperty("environment");
    };
    return AppMetadataEntity1;
}();

},{"../../utils/Constants.js":"7OLHu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bYCmt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TokenCacheContext", ()=>TokenCacheContext
);
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class instance helps track the memory changes facilitating
 * decisions to read from and write to the persistent cache
 */ var TokenCacheContext = function() {
    function TokenCacheContext1(tokenCache, hasChanged) {
        this.cache = tokenCache;
        this.hasChanged = hasChanged;
    }
    Object.defineProperty(TokenCacheContext1.prototype, "cacheHasChanged", {
        /**
         * boolean which indicates the changes in cache
         */ get: function() {
            return this.hasChanged;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TokenCacheContext1.prototype, "tokenCache", {
        /**
         * function to retrieve the token cache
         */ get: function() {
            return this.cache;
        },
        enumerable: false,
        configurable: true
    });
    return TokenCacheContext1;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j4kFD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RefreshTokenClient", ()=>RefreshTokenClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _baseClientJs = require("./BaseClient.js");
var _requestParameterBuilderJs = require("../request/RequestParameterBuilder.js");
var _constantsJs = require("../utils/Constants.js");
var _responseHandlerJs = require("../response/ResponseHandler.js");
var _popTokenGeneratorJs = require("../crypto/PopTokenGenerator.js");
var _stringUtilsJs = require("../utils/StringUtils.js");
var _clientConfigurationErrorJs = require("../error/ClientConfigurationError.js");
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
var _serverErrorJs = require("../error/ServerError.js");
var _timeUtilsJs = require("../utils/TimeUtils.js");
var _urlStringJs = require("../url/UrlString.js");
var _ccsCredentialJs = require("../account/CcsCredential.js");
var _clientInfoJs = require("../account/ClientInfo.js");
var _interactionRequiredAuthErrorJs = require("../error/InteractionRequiredAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * OAuth2.0 refresh token client
 */ var RefreshTokenClient = function(_super) {
    _tslibJs.__extends(RefreshTokenClient1, _super);
    function RefreshTokenClient1(configuration) {
        return _super.call(this, configuration) || this;
    }
    RefreshTokenClient1.prototype.acquireToken = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var reqTimestamp, response, responseHandler;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        reqTimestamp = _timeUtilsJs.TimeUtils.nowSeconds();
                        return [
                            4 /*yield*/ ,
                            this.executeTokenRequest(request, this.authority)
                        ];
                    case 1:
                        response = _a.sent();
                        responseHandler = new _responseHandlerJs.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                        responseHandler.validateTokenResponse(response.body);
                        return [
                            2 /*return*/ ,
                            responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true)
                        ];
                }
            });
        });
    };
    /**
     * Gets cached refresh token and attaches to request, then calls acquireToken API
     * @param request
     */ RefreshTokenClient1.prototype.acquireTokenByRefreshToken = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;
            return _tslibJs.__generator(this, function(_a) {
                // Cannot renew token if no request object is given.
                if (!request) throw _clientConfigurationErrorJs.ClientConfigurationError.createEmptyTokenRequestError();
                // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
                if (!request.account) throw _clientAuthErrorJs.ClientAuthError.createNoAccountInSilentRequestError();
                isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);
                // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest
                if (isFOCI) try {
                    return [
                        2 /*return*/ ,
                        this.acquireTokenWithCachedRefreshToken(request, true)
                    ];
                } catch (e) {
                    noFamilyRTInCache = e instanceof _interactionRequiredAuthErrorJs.InteractionRequiredAuthError && e.errorCode === _interactionRequiredAuthErrorJs.InteractionRequiredAuthErrorMessage.noTokensFoundError.code;
                    clientMismatchErrorWithFamilyRT = e instanceof _serverErrorJs.ServerError && e.errorCode === _constantsJs.Errors.INVALID_GRANT_ERROR && e.subError === _constantsJs.Errors.CLIENT_MISMATCH_ERROR;
                    // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)
                    if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) return [
                        2 /*return*/ ,
                        this.acquireTokenWithCachedRefreshToken(request, false)
                    ];
                    else throw e;
                }
                // fall back to application refresh token acquisition
                return [
                    2 /*return*/ ,
                    this.acquireTokenWithCachedRefreshToken(request, false)
                ];
            });
        });
    };
    /**
     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached
     * @param request
     */ RefreshTokenClient1.prototype.acquireTokenWithCachedRefreshToken = function(request, foci) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var refreshToken, refreshTokenRequest;
            return _tslibJs.__generator(this, function(_a) {
                refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);
                // no refresh Token
                if (!refreshToken) throw _interactionRequiredAuthErrorJs.InteractionRequiredAuthError.createNoTokensFoundError();
                refreshTokenRequest = _tslibJs.__assign(_tslibJs.__assign({
                }, request), {
                    refreshToken: refreshToken.secret,
                    authenticationScheme: request.authenticationScheme || _constantsJs.AuthenticationScheme.BEARER,
                    ccsCredential: {
                        credential: request.account.homeAccountId,
                        type: _ccsCredentialJs.CcsCredentialType.HOME_ACCOUNT_ID
                    }
                });
                return [
                    2 /*return*/ ,
                    this.acquireToken(refreshTokenRequest)
                ];
            });
        });
    };
    /**
     * Constructs the network message and makes a NW call to the underlying secure token service
     * @param request
     * @param authority
     */ RefreshTokenClient1.prototype.executeTokenRequest = function(request, authority) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var requestBody, queryParameters, headers, thumbprint, endpoint;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.createTokenRequestBody(request)
                        ];
                    case 1:
                        requestBody = _a.sent();
                        queryParameters = this.createTokenQueryParameters(request);
                        headers = this.createTokenRequestHeaders(request.ccsCredential);
                        thumbprint = {
                            clientId: this.config.authOptions.clientId,
                            authority: authority.canonicalAuthority,
                            scopes: request.scopes,
                            claims: request.claims,
                            authenticationScheme: request.authenticationScheme,
                            resourceRequestMethod: request.resourceRequestMethod,
                            resourceRequestUri: request.resourceRequestUri,
                            shrClaims: request.shrClaims,
                            sshKid: request.sshKid
                        };
                        endpoint = _urlStringJs.UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);
                        return [
                            2 /*return*/ ,
                            this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)
                        ];
                }
            });
        });
    };
    /**
     * Creates query string for the /token request
     * @param request
     */ RefreshTokenClient1.prototype.createTokenQueryParameters = function(request) {
        var parameterBuilder = new _requestParameterBuilderJs.RequestParameterBuilder();
        if (request.tokenQueryParameters) parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);
        return parameterBuilder.createQueryString();
    };
    /**
     * Helper function to create the token request body
     * @param request
     */ RefreshTokenClient1.prototype.createTokenRequestBody = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var parameterBuilder, correlationId, clientAssertion, popTokenGenerator, cnfString, clientInfo;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        parameterBuilder = new _requestParameterBuilderJs.RequestParameterBuilder();
                        parameterBuilder.addClientId(this.config.authOptions.clientId);
                        parameterBuilder.addScopes(request.scopes);
                        parameterBuilder.addGrantType(_constantsJs.GrantType.REFRESH_TOKEN_GRANT);
                        parameterBuilder.addClientInfo();
                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);
                        parameterBuilder.addThrottling();
                        if (this.serverTelemetryManager) parameterBuilder.addServerTelemetry(this.serverTelemetryManager);
                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
                        parameterBuilder.addCorrelationId(correlationId);
                        parameterBuilder.addRefreshToken(request.refreshToken);
                        if (this.config.clientCredentials.clientSecret) parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
                        if (this.config.clientCredentials.clientAssertion) {
                            clientAssertion = this.config.clientCredentials.clientAssertion;
                            parameterBuilder.addClientAssertion(clientAssertion.assertion);
                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
                        }
                        if (!(request.authenticationScheme === _constantsJs.AuthenticationScheme.POP)) return [
                            3 /*break*/ ,
                            2
                        ];
                        popTokenGenerator = new _popTokenGeneratorJs.PopTokenGenerator(this.cryptoUtils);
                        return [
                            4 /*yield*/ ,
                            popTokenGenerator.generateCnf(request)
                        ];
                    case 1:
                        cnfString = _a.sent();
                        parameterBuilder.addPopToken(cnfString);
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        if (request.authenticationScheme === _constantsJs.AuthenticationScheme.SSH) {
                            if (request.sshJwk) parameterBuilder.addSshJwk(request.sshJwk);
                            else throw _clientConfigurationErrorJs.ClientConfigurationError.createMissingSshJwkError();
                        }
                        _a.label = 3;
                    case 3:
                        if (!_stringUtilsJs.StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) switch(request.ccsCredential.type){
                            case _ccsCredentialJs.CcsCredentialType.HOME_ACCOUNT_ID:
                                try {
                                    clientInfo = _clientInfoJs.buildClientInfoFromHomeAccountId(request.ccsCredential.credential);
                                    parameterBuilder.addCcsOid(clientInfo);
                                } catch (e) {
                                    this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                                }
                                break;
                            case _ccsCredentialJs.CcsCredentialType.UPN:
                                parameterBuilder.addCcsUpn(request.ccsCredential.credential);
                                break;
                        }
                        return [
                            2 /*return*/ ,
                            parameterBuilder.createQueryString()
                        ];
                }
            });
        });
    };
    return RefreshTokenClient1;
}(_baseClientJs.BaseClient);

},{"../_virtual/_tslib.js":"9y6Jg","./BaseClient.js":"5MH0U","../request/RequestParameterBuilder.js":"beOsX","../utils/Constants.js":"7OLHu","../response/ResponseHandler.js":"LseOy","../crypto/PopTokenGenerator.js":"296QH","../utils/StringUtils.js":"2gXP4","../error/ClientConfigurationError.js":"iOtcK","../error/ClientAuthError.js":"jz6JJ","../error/ServerError.js":"6ak6C","../utils/TimeUtils.js":"kDGso","../url/UrlString.js":"gLvTY","../account/CcsCredential.js":"cBmfd","../account/ClientInfo.js":"1Am9c","../error/InteractionRequiredAuthError.js":"5vpVA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Ju3N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SilentFlowClient", ()=>SilentFlowClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _baseClientJs = require("./BaseClient.js");
var _authTokenJs = require("../account/AuthToken.js");
var _timeUtilsJs = require("../utils/TimeUtils.js");
var _refreshTokenClientJs = require("./RefreshTokenClient.js");
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
var _clientConfigurationErrorJs = require("../error/ClientConfigurationError.js");
var _responseHandlerJs = require("../response/ResponseHandler.js");
var _constantsJs = require("../utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var SilentFlowClient = function(_super) {
    _tslibJs.__extends(SilentFlowClient1, _super);
    function SilentFlowClient1(configuration) {
        return _super.call(this, configuration) || this;
    }
    /**
     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew
     * the given token and returns the renewed token
     * @param request
     */ SilentFlowClient1.prototype.acquireToken = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var e_1, refreshTokenClient;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.acquireCachedToken(request)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1 instanceof _clientAuthErrorJs.ClientAuthError && e_1.errorCode === _clientAuthErrorJs.ClientAuthErrorMessage.tokenRefreshRequired.code) {
                            refreshTokenClient = new _refreshTokenClientJs.RefreshTokenClient(this.config);
                            return [
                                2 /*return*/ ,
                                refreshTokenClient.acquireTokenByRefreshToken(request)
                            ];
                        } else throw e_1;
                    case 3:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Retrieves token from cache or throws an error if it must be refreshed.
     * @param request
     */ SilentFlowClient1.prototype.acquireCachedToken = function(request) {
        var _a, _b, _c, _d;
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var environment, cacheRecord;
            return _tslibJs.__generator(this, function(_e) {
                switch(_e.label){
                    case 0:
                        // Cannot renew token if no request object is given.
                        if (!request) throw _clientConfigurationErrorJs.ClientConfigurationError.createEmptyTokenRequestError();
                        if (request.forceRefresh) {
                            // Must refresh due to present force_refresh flag.
                            (_a = this.serverTelemetryManager) === null || _a === void 0 || _a.setCacheOutcome(_constantsJs.CacheOutcome.FORCE_REFRESH);
                            this.logger.info("SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.");
                            throw _clientAuthErrorJs.ClientAuthError.createRefreshRequiredError();
                        }
                        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
                        if (!request.account) throw _clientAuthErrorJs.ClientAuthError.createNoAccountInSilentRequestError();
                        environment = request.authority || this.authority.getPreferredCache();
                        cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, request, environment);
                        if (!cacheRecord.accessToken) {
                            // Must refresh due to non-existent access_token.
                            (_b = this.serverTelemetryManager) === null || _b === void 0 || _b.setCacheOutcome(_constantsJs.CacheOutcome.NO_CACHED_ACCESS_TOKEN);
                            this.logger.info("SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.");
                            throw _clientAuthErrorJs.ClientAuthError.createRefreshRequiredError();
                        } else if (_timeUtilsJs.TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) || _timeUtilsJs.TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {
                            // Must refresh due to expired access_token.
                            (_c = this.serverTelemetryManager) === null || _c === void 0 || _c.setCacheOutcome(_constantsJs.CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);
                            this.logger.info("SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within " + this.config.systemOptions.tokenRenewalOffsetSeconds + " seconds.");
                            throw _clientAuthErrorJs.ClientAuthError.createRefreshRequiredError();
                        } else if (cacheRecord.accessToken.refreshOn && _timeUtilsJs.TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {
                            // Must refresh due to the refresh_in value.
                            (_d = this.serverTelemetryManager) === null || _d === void 0 || _d.setCacheOutcome(_constantsJs.CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);
                            this.logger.info("SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.");
                            throw _clientAuthErrorJs.ClientAuthError.createRefreshRequiredError();
                        }
                        if (this.config.serverTelemetryManager) this.config.serverTelemetryManager.incrementCacheHits();
                        return [
                            4 /*yield*/ ,
                            this.generateResultFromCacheRecord(cacheRecord, request)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _e.sent()
                        ];
                }
            });
        });
    };
    /**
     * Helper function to build response object from the CacheRecord
     * @param cacheRecord
     */ SilentFlowClient1.prototype.generateResultFromCacheRecord = function(cacheRecord, request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var idTokenObj;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (cacheRecord.idToken) idTokenObj = new _authTokenJs.AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);
                        return [
                            4 /*yield*/ ,
                            _responseHandlerJs.ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                }
            });
        });
    };
    return SilentFlowClient1;
}(_baseClientJs.BaseClient);

},{"../_virtual/_tslib.js":"9y6Jg","./BaseClient.js":"5MH0U","../account/AuthToken.js":"5l5Zq","../utils/TimeUtils.js":"kDGso","./RefreshTokenClient.js":"j4kFD","../error/ClientAuthError.js":"jz6JJ","../error/ClientConfigurationError.js":"iOtcK","../response/ResponseHandler.js":"LseOy","../utils/Constants.js":"7OLHu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1WtkC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Authority", ()=>Authority
);
var _tslibJs = require("../_virtual/_tslib.js");
var _authorityTypeJs = require("./AuthorityType.js");
var _openIdConfigResponseJs = require("./OpenIdConfigResponse.js");
var _urlStringJs = require("../url/UrlString.js");
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
var _constantsJs = require("../utils/Constants.js");
var _clientConfigurationErrorJs = require("../error/ClientConfigurationError.js");
var _protocolModeJs = require("./ProtocolMode.js");
var _authorityMetadataEntityJs = require("../cache/entities/AuthorityMetadataEntity.js");
var _authorityOptionsJs = require("./AuthorityOptions.js");
var _cloudInstanceDiscoveryResponseJs = require("./CloudInstanceDiscoveryResponse.js");
var _regionDiscoveryJs = require("./RegionDiscovery.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the
 * endpoint. It will store the pertinent config data in this object for use during token calls.
 */ var Authority = function() {
    function Authority1(authority, networkInterface, cacheManager, authorityOptions, proxyUrl) {
        this.canonicalAuthority = authority;
        this._canonicalAuthority.validateAsUri();
        this.networkInterface = networkInterface;
        this.cacheManager = cacheManager;
        this.authorityOptions = authorityOptions;
        this.regionDiscovery = new _regionDiscoveryJs.RegionDiscovery(networkInterface);
        this.regionDiscoveryMetadata = {
            region_used: undefined,
            region_source: undefined,
            region_outcome: undefined
        };
        this.proxyUrl = proxyUrl || _constantsJs.Constants.EMPTY_STRING;
    }
    Object.defineProperty(Authority1.prototype, "authorityType", {
        // See above for AuthorityType
        get: function() {
            var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;
            if (pathSegments.length && pathSegments[0].toLowerCase() === _constantsJs.Constants.ADFS) return _authorityTypeJs.AuthorityType.Adfs;
            return _authorityTypeJs.AuthorityType.Default;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority1.prototype, "protocolMode", {
        /**
         * ProtocolMode enum representing the way endpoints are constructed.
         */ get: function() {
            return this.authorityOptions.protocolMode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority1.prototype, "options", {
        /**
         * Returns authorityOptions which can be used to reinstantiate a new authority instance
         */ get: function() {
            return this.authorityOptions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority1.prototype, "canonicalAuthority", {
        /**
         * A URL that is the authority set by the developer
         */ get: function() {
            return this._canonicalAuthority.urlString;
        },
        /**
         * Sets canonical authority.
         */ set: function(url) {
            this._canonicalAuthority = new _urlStringJs.UrlString(url);
            this._canonicalAuthority.validateAsUri();
            this._canonicalAuthorityUrlComponents = null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority1.prototype, "canonicalAuthorityUrlComponents", {
        /**
         * Get authority components.
         */ get: function() {
            if (!this._canonicalAuthorityUrlComponents) this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();
            return this._canonicalAuthorityUrlComponents;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority1.prototype, "hostnameAndPort", {
        /**
         * Get hostname and port i.e. login.microsoftonline.com
         */ get: function() {
            return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority1.prototype, "tenant", {
        /**
         * Get tenant for authority.
         */ get: function() {
            return this.canonicalAuthorityUrlComponents.PathSegments[0];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority1.prototype, "authorizationEndpoint", {
        /**
         * OAuth /authorize endpoint for requests
         */ get: function() {
            if (this.discoveryComplete()) {
                var endpoint = this.replacePath(this.metadata.authorization_endpoint);
                return this.replaceTenant(endpoint);
            } else throw _clientAuthErrorJs.ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority1.prototype, "tokenEndpoint", {
        /**
         * OAuth /token endpoint for requests
         */ get: function() {
            if (this.discoveryComplete()) {
                var endpoint = this.replacePath(this.metadata.token_endpoint);
                return this.replaceTenant(endpoint);
            } else throw _clientAuthErrorJs.ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority1.prototype, "deviceCodeEndpoint", {
        get: function() {
            if (this.discoveryComplete()) {
                var endpoint = this.replacePath(this.metadata.token_endpoint.replace("/token", "/devicecode"));
                return this.replaceTenant(endpoint);
            } else throw _clientAuthErrorJs.ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority1.prototype, "endSessionEndpoint", {
        /**
         * OAuth logout endpoint for requests
         */ get: function() {
            if (this.discoveryComplete()) {
                // ROPC policies may not have end_session_endpoint set
                if (!this.metadata.end_session_endpoint) throw _clientAuthErrorJs.ClientAuthError.createLogoutNotSupportedError();
                var endpoint = this.replacePath(this.metadata.end_session_endpoint);
                return this.replaceTenant(endpoint);
            } else throw _clientAuthErrorJs.ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Authority1.prototype, "selfSignedJwtAudience", {
        /**
         * OAuth issuer for requests
         */ get: function() {
            if (this.discoveryComplete()) {
                var endpoint = this.replacePath(this.metadata.issuer);
                return this.replaceTenant(endpoint);
            } else throw _clientAuthErrorJs.ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Replaces tenant in url path with current tenant. Defaults to common.
     * @param urlString
     */ Authority1.prototype.replaceTenant = function(urlString) {
        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);
    };
    /**
     * Replaces path such as tenant or policy with the current tenant or policy.
     * @param urlString
     */ Authority1.prototype.replacePath = function(urlString) {
        var endpoint = urlString;
        var cachedAuthorityUrl = new _urlStringJs.UrlString(this.metadata.canonical_authority);
        var cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;
        var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;
        currentAuthorityParts.forEach(function(currentPart, index) {
            var cachedPart = cachedAuthorityParts[index];
            if (currentPart !== cachedPart) endpoint = endpoint.replace("/" + cachedPart + "/", "/" + currentPart + "/");
        });
        return endpoint;
    };
    Object.defineProperty(Authority1.prototype, "defaultOpenIdConfigurationEndpoint", {
        /**
         * The default open id configuration endpoint for any canonical authority.
         */ get: function() {
            if (this.authorityType === _authorityTypeJs.AuthorityType.Adfs || this.protocolMode === _protocolModeJs.ProtocolMode.OIDC) return this.canonicalAuthority + ".well-known/openid-configuration";
            return this.canonicalAuthority + "v2.0/.well-known/openid-configuration";
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Boolean that returns whethr or not tenant discovery has been completed.
     */ Authority1.prototype.discoveryComplete = function() {
        return !!this.metadata;
    };
    /**
     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network
     * and the /authorize, /token and logout endpoints.
     */ Authority1.prototype.resolveEndpointsAsync = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);
                        if (!metadataEntity) {
                            metadataEntity = new _authorityMetadataEntityJs.AuthorityMetadataEntity();
                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);
                        }
                        return [
                            4 /*yield*/ ,
                            this.updateCloudDiscoveryMetadata(metadataEntity)
                        ];
                    case 1:
                        cloudDiscoverySource = _a.sent();
                        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);
                        return [
                            4 /*yield*/ ,
                            this.updateEndpointMetadata(metadataEntity)
                        ];
                    case 2:
                        endpointSource = _a.sent();
                        if (cloudDiscoverySource !== _constantsJs.AuthorityMetadataSource.CACHE && endpointSource !== _constantsJs.AuthorityMetadataSource.CACHE) {
                            // Reset the expiration time unless both values came from a successful cache lookup
                            metadataEntity.resetExpiresAt();
                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);
                        }
                        cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);
                        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);
                        this.metadata = metadataEntity;
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Update AuthorityMetadataEntity with new endpoints and return where the information came from
     * @param metadataEntity
     */ Authority1.prototype.updateEndpointMetadata = function(metadataEntity) {
        var _a;
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var metadata, autodetectedRegionName, azureRegion;
            return _tslibJs.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        metadata = this.getEndpointMetadataFromConfig();
                        if (metadata) {
                            metadataEntity.updateEndpointMetadata(metadata, false);
                            return [
                                2 /*return*/ ,
                                _constantsJs.AuthorityMetadataSource.CONFIG
                            ];
                        }
                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) // No need to update
                        return [
                            2 /*return*/ ,
                            _constantsJs.AuthorityMetadataSource.CACHE
                        ];
                        return [
                            4 /*yield*/ ,
                            this.getEndpointMetadataFromNetwork()
                        ];
                    case 1:
                        metadata = _b.sent();
                        if (!metadata) return [
                            3 /*break*/ ,
                            4
                        ];
                        if (!((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.azureRegion)) return [
                            3 /*break*/ ,
                            3
                        ];
                        return [
                            4 /*yield*/ ,
                            this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration.environmentRegion, this.regionDiscoveryMetadata, this.proxyUrl)
                        ];
                    case 2:
                        autodetectedRegionName = _b.sent();
                        azureRegion = this.authorityOptions.azureRegionConfiguration.azureRegion === _constantsJs.Constants.AZURE_REGION_AUTO_DISCOVER_FLAG ? autodetectedRegionName : this.authorityOptions.azureRegionConfiguration.azureRegion;
                        if (this.authorityOptions.azureRegionConfiguration.azureRegion === _constantsJs.Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ? _constantsJs.RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL : _constantsJs.RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;
                        else if (autodetectedRegionName) this.regionDiscoveryMetadata.region_outcome = this.authorityOptions.azureRegionConfiguration.azureRegion === autodetectedRegionName ? _constantsJs.RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED : _constantsJs.RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;
                        else this.regionDiscoveryMetadata.region_outcome = _constantsJs.RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;
                        if (azureRegion) {
                            this.regionDiscoveryMetadata.region_used = azureRegion;
                            metadata = Authority1.replaceWithRegionalInformation(metadata, azureRegion);
                        }
                        _b.label = 3;
                    case 3:
                        metadataEntity.updateEndpointMetadata(metadata, true);
                        return [
                            2 /*return*/ ,
                            _constantsJs.AuthorityMetadataSource.NETWORK
                        ];
                    case 4:
                        throw _clientAuthErrorJs.ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);
                }
            });
        });
    };
    /**
     * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority
     * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy
     * @param metadataEntity
     */ Authority1.prototype.isAuthoritySameType = function(metadataEntity) {
        var cachedAuthorityUrl = new _urlStringJs.UrlString(metadataEntity.canonical_authority);
        var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;
        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;
    };
    /**
     * Parse authorityMetadata config option
     */ Authority1.prototype.getEndpointMetadataFromConfig = function() {
        if (this.authorityOptions.authorityMetadata) try {
            return JSON.parse(this.authorityOptions.authorityMetadata);
        } catch (e) {
            throw _clientConfigurationErrorJs.ClientConfigurationError.createInvalidAuthorityMetadataError();
        }
        return null;
    };
    /**
     * Gets OAuth endpoints from the given OpenID configuration endpoint.
     */ Authority1.prototype.getEndpointMetadataFromNetwork = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var options, response;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        options = {
                        };
                        if (this.proxyUrl) options.proxyUrl = this.proxyUrl;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.networkInterface.sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint, options)
                        ];
                    case 2:
                        response = _a.sent();
                        return [
                            2 /*return*/ ,
                            _openIdConfigResponseJs.isOpenIdConfigResponse(response.body) ? response.body : null
                        ];
                    case 3:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            null
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from
     * @param cachedMetadata
     * @param newMetadata
     */ Authority1.prototype.updateCloudDiscoveryMetadata = function(metadataEntity) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var metadata;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        metadata = this.getCloudDiscoveryMetadataFromConfig();
                        if (metadata) {
                            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);
                            return [
                                2 /*return*/ ,
                                _constantsJs.AuthorityMetadataSource.CONFIG
                            ];
                        }
                        // If The cached metadata came from config but that config was not passed to this instance, we must go to the network
                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) // No need to update
                        return [
                            2 /*return*/ ,
                            _constantsJs.AuthorityMetadataSource.CACHE
                        ];
                        return [
                            4 /*yield*/ ,
                            this.getCloudDiscoveryMetadataFromNetwork()
                        ];
                    case 1:
                        metadata = _a.sent();
                        if (metadata) {
                            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);
                            return [
                                2 /*return*/ ,
                                _constantsJs.AuthorityMetadataSource.NETWORK
                            ];
                        } else // Metadata could not be obtained from config, cache or network
                        throw _clientConfigurationErrorJs.ClientConfigurationError.createUntrustedAuthorityError();
                }
            });
        });
    };
    /**
     * Parse cloudDiscoveryMetadata config or check knownAuthorities
     */ Authority1.prototype.getCloudDiscoveryMetadataFromConfig = function() {
        // Check if network response was provided in config
        if (this.authorityOptions.cloudDiscoveryMetadata) try {
            var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);
            var metadata = Authority1.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);
            if (metadata) return metadata;
        } catch (e) {
            throw _clientConfigurationErrorJs.ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();
        }
        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities
        if (this.isInKnownAuthorities()) return Authority1.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);
        return null;
    };
    /**
     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config
     * @param networkInterface
     */ Authority1.prototype.getCloudDiscoveryMetadataFromNetwork = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var instanceDiscoveryEndpoint, options, match, response, metadata;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        instanceDiscoveryEndpoint = "" + _constantsJs.Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + "oauth2/v2.0/authorize";
                        options = {
                        };
                        if (this.proxyUrl) options.proxyUrl = this.proxyUrl;
                        match = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options)
                        ];
                    case 2:
                        response = _a.sent();
                        metadata = _cloudInstanceDiscoveryResponseJs.isCloudInstanceDiscoveryResponse(response.body) ? response.body.metadata : [];
                        if (metadata.length === 0) // If no metadata is returned, authority is untrusted
                        return [
                            2 /*return*/ ,
                            null
                        ];
                        match = Authority1.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            null
                        ];
                    case 4:
                        if (!match) // Custom Domain scenario, host is trusted because Instance Discovery call succeeded
                        match = Authority1.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);
                        return [
                            2 /*return*/ ,
                            match
                        ];
                }
            });
        });
    };
    /**
     * Helper function to determine if this host is included in the knownAuthorities config option
     */ Authority1.prototype.isInKnownAuthorities = function() {
        var _this = this;
        var matches = this.authorityOptions.knownAuthorities.filter(function(authority) {
            return _urlStringJs.UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;
        });
        return matches.length > 0;
    };
    /**
     * helper function to populate the authority based on azureCloudOptions
     * @param authorityString
     * @param azureCloudOptions
     */ Authority1.generateAuthority = function(authorityString, azureCloudOptions) {
        var authorityAzureCloudInstance;
        if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== _authorityOptionsJs.AzureCloudInstance.None) {
            var tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : _constantsJs.Constants.DEFAULT_COMMON_TENANT;
            authorityAzureCloudInstance = azureCloudOptions.azureCloudInstance + "/" + tenant + "/";
        }
        return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;
    };
    /**
     * Creates cloud discovery metadata object from a given host
     * @param host
     */ Authority1.createCloudDiscoveryMetadataFromHost = function(host) {
        return {
            preferred_network: host,
            preferred_cache: host,
            aliases: [
                host
            ]
        };
    };
    /**
     * Searches instance discovery network response for the entry that contains the host in the aliases list
     * @param response
     * @param authority
     */ Authority1.getCloudDiscoveryMetadataFromNetworkResponse = function(response, authority) {
        for(var i = 0; i < response.length; i++){
            var metadata = response[i];
            if (metadata.aliases.indexOf(authority) > -1) return metadata;
        }
        return null;
    };
    /**
     * helper function to generate environment from authority object
     */ Authority1.prototype.getPreferredCache = function() {
        if (this.discoveryComplete()) return this.metadata.preferred_cache;
        else throw _clientAuthErrorJs.ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
    };
    /**
     * Returns whether or not the provided host is an alias of this authority instance
     * @param host
     */ Authority1.prototype.isAlias = function(host) {
        return this.metadata.aliases.indexOf(host) > -1;
    };
    /**
     * Checks whether the provided host is that of a public cloud authority
     *
     * @param authority string
     * @returns bool
     */ Authority1.isPublicCloudAuthority = function(host) {
        return _constantsJs.Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;
    };
    /**
     * Rebuild the authority string with the region
     *
     * @param host string
     * @param region string
     */ Authority1.buildRegionalAuthorityString = function(host, region, queryString) {
        // Create and validate a Url string object with the initial authority string
        var authorityUrlInstance = new _urlStringJs.UrlString(host);
        authorityUrlInstance.validateAsUri();
        var authorityUrlParts = authorityUrlInstance.getUrlComponents();
        var hostNameAndPort = region + "." + authorityUrlParts.HostNameAndPort;
        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) hostNameAndPort = region + "." + _constantsJs.Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;
        // Include the query string portion of the url
        var url = _urlStringJs.UrlString.constructAuthorityUriFromObject(_tslibJs.__assign(_tslibJs.__assign({
        }, authorityUrlInstance.getUrlComponents()), {
            HostNameAndPort: hostNameAndPort
        })).urlString;
        // Add the query string if a query string was provided
        if (queryString) return url + "?" + queryString;
        return url;
    };
    /**
     * Replace the endpoints in the metadata object with their regional equivalents.
     *
     * @param metadata OpenIdConfigResponse
     * @param azureRegion string
     */ Authority1.replaceWithRegionalInformation = function(metadata, azureRegion) {
        metadata.authorization_endpoint = Authority1.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);
        // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature
        metadata.token_endpoint = Authority1.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, "allowestsrnonmsi=true");
        if (metadata.end_session_endpoint) metadata.end_session_endpoint = Authority1.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);
        return metadata;
    };
    return Authority1;
}();

},{"../_virtual/_tslib.js":"9y6Jg","./AuthorityType.js":"216oN","./OpenIdConfigResponse.js":"a9ALx","../url/UrlString.js":"gLvTY","../error/ClientAuthError.js":"jz6JJ","../utils/Constants.js":"7OLHu","../error/ClientConfigurationError.js":"iOtcK","./ProtocolMode.js":"iyRnB","../cache/entities/AuthorityMetadataEntity.js":"3CPKL","./AuthorityOptions.js":"78qjy","./CloudInstanceDiscoveryResponse.js":"1ty42","./RegionDiscovery.js":"lqOA4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a9ALx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isOpenIdConfigResponse", ()=>isOpenIdConfigResponse
);
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function isOpenIdConfigResponse(response) {
    return response.hasOwnProperty("authorization_endpoint") && response.hasOwnProperty("token_endpoint") && response.hasOwnProperty("issuer");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iyRnB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProtocolMode", ()=>ProtocolMode
);
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Protocol modes supported by MSAL.
 */ var ProtocolMode;
(function(ProtocolMode1) {
    ProtocolMode1["AAD"] = "AAD";
    ProtocolMode1["OIDC"] = "OIDC";
})(ProtocolMode || (ProtocolMode = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3CPKL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthorityMetadataEntity", ()=>AuthorityMetadataEntity
);
var _constantsJs = require("../../utils/Constants.js");
var _timeUtilsJs = require("../../utils/TimeUtils.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var AuthorityMetadataEntity = function() {
    function AuthorityMetadataEntity1() {
        this.expiresAt = _timeUtilsJs.TimeUtils.nowSeconds() + _constantsJs.AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;
    }
    /**
     * Update the entity with new aliases, preferred_cache and preferred_network values
     * @param metadata
     * @param fromNetwork
     */ AuthorityMetadataEntity1.prototype.updateCloudDiscoveryMetadata = function(metadata, fromNetwork) {
        this.aliases = metadata.aliases;
        this.preferred_cache = metadata.preferred_cache;
        this.preferred_network = metadata.preferred_network;
        this.aliasesFromNetwork = fromNetwork;
    };
    /**
     * Update the entity with new endpoints
     * @param metadata
     * @param fromNetwork
     */ AuthorityMetadataEntity1.prototype.updateEndpointMetadata = function(metadata, fromNetwork) {
        this.authorization_endpoint = metadata.authorization_endpoint;
        this.token_endpoint = metadata.token_endpoint;
        this.end_session_endpoint = metadata.end_session_endpoint;
        this.issuer = metadata.issuer;
        this.endpointsFromNetwork = fromNetwork;
    };
    /**
     * Save the authority that was used to create this cache entry
     * @param authority
     */ AuthorityMetadataEntity1.prototype.updateCanonicalAuthority = function(authority) {
        this.canonical_authority = authority;
    };
    /**
     * Reset the exiresAt value
     */ AuthorityMetadataEntity1.prototype.resetExpiresAt = function() {
        this.expiresAt = _timeUtilsJs.TimeUtils.nowSeconds() + _constantsJs.AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;
    };
    /**
     * Returns whether or not the data needs to be refreshed
     */ AuthorityMetadataEntity1.prototype.isExpired = function() {
        return this.expiresAt <= _timeUtilsJs.TimeUtils.nowSeconds();
    };
    /**
     * Validates an entity: checks for all expected params
     * @param entity
     */ AuthorityMetadataEntity1.isAuthorityMetadataEntity = function(key, entity) {
        if (!entity) return false;
        return key.indexOf(_constantsJs.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 && entity.hasOwnProperty("aliases") && entity.hasOwnProperty("preferred_cache") && entity.hasOwnProperty("preferred_network") && entity.hasOwnProperty("canonical_authority") && entity.hasOwnProperty("authorization_endpoint") && entity.hasOwnProperty("token_endpoint") && entity.hasOwnProperty("issuer") && entity.hasOwnProperty("aliasesFromNetwork") && entity.hasOwnProperty("endpointsFromNetwork") && entity.hasOwnProperty("expiresAt");
    };
    return AuthorityMetadataEntity1;
}();

},{"../../utils/Constants.js":"7OLHu","../../utils/TimeUtils.js":"kDGso","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ty42":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isCloudInstanceDiscoveryResponse", ()=>isCloudInstanceDiscoveryResponse
);
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ function isCloudInstanceDiscoveryResponse(response) {
    return response.hasOwnProperty("tenant_discovery_endpoint") && response.hasOwnProperty("metadata");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lqOA4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RegionDiscovery", ()=>RegionDiscovery
);
var _tslibJs = require("../_virtual/_tslib.js");
var _constantsJs = require("../utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var RegionDiscovery = function() {
    function RegionDiscovery1(networkInterface) {
        this.networkInterface = networkInterface;
    }
    /**
     * Detect the region from the application's environment.
     *
     * @returns Promise<string | null>
     */ RegionDiscovery1.prototype.detectRegion = function(environmentRegion, regionDiscoveryMetadata, proxyUrl) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var autodetectedRegionName, options, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        autodetectedRegionName = environmentRegion;
                        if (!!autodetectedRegionName) return [
                            3 /*break*/ ,
                            8
                        ];
                        options = RegionDiscovery1.IMDS_OPTIONS;
                        if (proxyUrl) options.proxyUrl = proxyUrl;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            6,
                            ,
                            7
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.getRegionFromIMDS(_constantsJs.Constants.IMDS_VERSION, options)
                        ];
                    case 2:
                        localIMDSVersionResponse = _a.sent();
                        if (localIMDSVersionResponse.status === _constantsJs.ResponseCodes.httpSuccess) {
                            autodetectedRegionName = localIMDSVersionResponse.body;
                            regionDiscoveryMetadata.region_source = _constantsJs.RegionDiscoverySources.IMDS;
                        }
                        if (!(localIMDSVersionResponse.status === _constantsJs.ResponseCodes.httpBadRequest)) return [
                            3 /*break*/ ,
                            5
                        ];
                        return [
                            4 /*yield*/ ,
                            this.getCurrentVersion(options)
                        ];
                    case 3:
                        currentIMDSVersion = _a.sent();
                        if (!currentIMDSVersion) {
                            regionDiscoveryMetadata.region_source = _constantsJs.RegionDiscoverySources.FAILED_AUTO_DETECTION;
                            return [
                                2 /*return*/ ,
                                null
                            ];
                        }
                        return [
                            4 /*yield*/ ,
                            this.getRegionFromIMDS(currentIMDSVersion, options)
                        ];
                    case 4:
                        currentIMDSVersionResponse = _a.sent();
                        if (currentIMDSVersionResponse.status === _constantsJs.ResponseCodes.httpSuccess) {
                            autodetectedRegionName = currentIMDSVersionResponse.body;
                            regionDiscoveryMetadata.region_source = _constantsJs.RegionDiscoverySources.IMDS;
                        }
                        _a.label = 5;
                    case 5:
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 6:
                        _a.sent();
                        regionDiscoveryMetadata.region_source = _constantsJs.RegionDiscoverySources.FAILED_AUTO_DETECTION;
                        return [
                            2 /*return*/ ,
                            null
                        ];
                    case 7:
                        return [
                            3 /*break*/ ,
                            9
                        ];
                    case 8:
                        regionDiscoveryMetadata.region_source = _constantsJs.RegionDiscoverySources.ENVIRONMENT_VARIABLE;
                        _a.label = 9;
                    case 9:
                        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION
                        if (!autodetectedRegionName) regionDiscoveryMetadata.region_source = _constantsJs.RegionDiscoverySources.FAILED_AUTO_DETECTION;
                        return [
                            2 /*return*/ ,
                            autodetectedRegionName || null
                        ];
                }
            });
        });
    };
    /**
     * Make the call to the IMDS endpoint
     *
     * @param imdsEndpointUrl
     * @returns Promise<NetworkResponse<string>>
     */ RegionDiscovery1.prototype.getRegionFromIMDS = function(version, options) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.networkInterface.sendGetRequestAsync(_constantsJs.Constants.IMDS_ENDPOINT + "?api-version=" + version + "&format=text", options, _constantsJs.Constants.IMDS_TIMEOUT)
                ];
            });
        });
    };
    /**
     * Get the most recent version of the IMDS endpoint available
     *
     * @returns Promise<string | null>
     */ RegionDiscovery1.prototype.getCurrentVersion = function(options) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var response;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.networkInterface.sendGetRequestAsync(_constantsJs.Constants.IMDS_ENDPOINT + "?format=json", options)
                        ];
                    case 1:
                        response = _a.sent();
                        // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.
                        if (response.status === _constantsJs.ResponseCodes.httpBadRequest && response.body && response.body["newest-versions"] && response.body["newest-versions"].length > 0) return [
                            2 /*return*/ ,
                            response.body["newest-versions"][0]
                        ];
                        return [
                            2 /*return*/ ,
                            null
                        ];
                    case 2:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            null
                        ];
                    case 3:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    // Options for the IMDS endpoint request
    RegionDiscovery1.IMDS_OPTIONS = {
        headers: {
            Metadata: "true"
        }
    };
    return RegionDiscovery1;
}();

},{"../_virtual/_tslib.js":"9y6Jg","../utils/Constants.js":"7OLHu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ff3ck":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthorityFactory", ()=>AuthorityFactory
);
var _tslibJs = require("../_virtual/_tslib.js");
var _authorityJs = require("./Authority.js");
var _clientConfigurationErrorJs = require("../error/ClientConfigurationError.js");
var _stringUtilsJs = require("../utils/StringUtils.js");
var _clientAuthErrorJs = require("../error/ClientAuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var AuthorityFactory = function() {
    function AuthorityFactory1() {
    }
    /**
     * Create an authority object of the correct type based on the url
     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)
     *
     * Also performs endpoint discovery.
     *
     * @param authorityUri
     * @param networkClient
     * @param protocolMode
     */ AuthorityFactory1.createDiscoveredInstance = function(authorityUri, networkClient, cacheManager, authorityOptions, proxyUrl) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var acquireTokenAuthority, e_1;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        acquireTokenAuthority = AuthorityFactory1.createInstance(authorityUri, networkClient, cacheManager, authorityOptions, proxyUrl);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            acquireTokenAuthority.resolveEndpointsAsync()
                        ];
                    case 2:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            acquireTokenAuthority
                        ];
                    case 3:
                        e_1 = _a.sent();
                        throw _clientAuthErrorJs.ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Create an authority object of the correct type based on the url
     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)
     *
     * Does not perform endpoint discovery.
     *
     * @param authorityUrl
     * @param networkInterface
     * @param protocolMode
     */ AuthorityFactory1.createInstance = function(authorityUrl, networkInterface, cacheManager, authorityOptions, proxyUrl) {
        // Throw error if authority url is empty
        if (_stringUtilsJs.StringUtils.isEmpty(authorityUrl)) throw _clientConfigurationErrorJs.ClientConfigurationError.createUrlEmptyError();
        return new _authorityJs.Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, proxyUrl);
    };
    return AuthorityFactory1;
}();

},{"../_virtual/_tslib.js":"9y6Jg","./Authority.js":"1WtkC","../error/ClientConfigurationError.js":"iOtcK","../utils/StringUtils.js":"2gXP4","../error/ClientAuthError.js":"jz6JJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h47zn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ServerTelemetryEntity", ()=>ServerTelemetryEntity
);
var _constantsJs = require("../../utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var ServerTelemetryEntity = function() {
    function ServerTelemetryEntity1() {
        this.failedRequests = [];
        this.errors = [];
        this.cacheHits = 0;
    }
    /**
     * validates if a given cache entry is "Telemetry", parses <key,value>
     * @param key
     * @param entity
     */ ServerTelemetryEntity1.isServerTelemetryEntity = function(key, entity) {
        var validateKey = key.indexOf(_constantsJs.SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;
        var validateEntity = true;
        if (entity) validateEntity = entity.hasOwnProperty("failedRequests") && entity.hasOwnProperty("errors") && entity.hasOwnProperty("cacheHits");
        return validateKey && validateEntity;
    };
    return ServerTelemetryEntity1;
}();

},{"../../utils/Constants.js":"7OLHu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l3oAG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ThrottlingEntity", ()=>ThrottlingEntity
);
var _constantsJs = require("../../utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var ThrottlingEntity = function() {
    function ThrottlingEntity1() {
    }
    /**
     * validates if a given cache entry is "Throttling", parses <key,value>
     * @param key
     * @param entity
     */ ThrottlingEntity1.isThrottlingEntity = function(key, entity) {
        var validateKey = false;
        if (key) validateKey = key.indexOf(_constantsJs.ThrottlingConstants.THROTTLING_PREFIX) === 0;
        var validateEntity = true;
        if (entity) validateEntity = entity.hasOwnProperty("throttleTime");
        return validateKey && validateEntity;
    };
    return ThrottlingEntity1;
}();

},{"../../utils/Constants.js":"7OLHu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"etu0y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StubbedNetworkModule", ()=>StubbedNetworkModule
);
var _authErrorJs = require("../error/AuthError.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var StubbedNetworkModule = {
    sendGetRequestAsync: function() {
        var notImplErr = "Network interface - sendGetRequestAsync() has not been implemented for the Network interface.";
        return Promise.reject(_authErrorJs.AuthError.createUnexpectedError(notImplErr));
    },
    sendPostRequestAsync: function() {
        var notImplErr = "Network interface - sendPostRequestAsync() has not been implemented for the Network interface.";
        return Promise.reject(_authErrorJs.AuthError.createUnexpectedError(notImplErr));
    }
};

},{"../error/AuthError.js":"8SAdb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2yUtR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthenticationHeaderParser", ()=>AuthenticationHeaderParser
);
var _clientConfigurationErrorJs = require("../error/ClientConfigurationError.js");
var _constantsJs = require("../utils/Constants.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This is a helper class that parses supported HTTP response authentication headers to extract and return
 * header challenge values that can be used outside the basic authorization flows.
 */ var AuthenticationHeaderParser = function() {
    function AuthenticationHeaderParser1(headers) {
        this.headers = headers;
    }
    /**
     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.
     * @returns
     */ AuthenticationHeaderParser1.prototype.getShrNonce = function() {
        // Attempt to parse nonce from Authentiacation-Info
        var authenticationInfo = this.headers[_constantsJs.HeaderNames.AuthenticationInfo];
        if (authenticationInfo) {
            var authenticationInfoChallenges = this.parseChallenges(authenticationInfo);
            if (authenticationInfoChallenges.nextnonce) return authenticationInfoChallenges.nextnonce;
            throw _clientConfigurationErrorJs.ClientConfigurationError.createInvalidAuthenticationHeaderError(_constantsJs.HeaderNames.AuthenticationInfo, "nextnonce challenge is missing.");
        }
        // Attempt to parse nonce from WWW-Authenticate
        var wwwAuthenticate = this.headers[_constantsJs.HeaderNames.WWWAuthenticate];
        if (wwwAuthenticate) {
            var wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);
            if (wwwAuthenticateChallenges.nonce) return wwwAuthenticateChallenges.nonce;
            throw _clientConfigurationErrorJs.ClientConfigurationError.createInvalidAuthenticationHeaderError(_constantsJs.HeaderNames.WWWAuthenticate, "nonce challenge is missing.");
        }
        // If neither header is present, throw missing headers error
        throw _clientConfigurationErrorJs.ClientConfigurationError.createMissingNonceAuthenticationHeadersError();
    };
    /**
     * Parses an HTTP header's challenge set into a key/value map.
     * @param header
     * @returns
     */ AuthenticationHeaderParser1.prototype.parseChallenges = function(header) {
        var schemeSeparator = header.indexOf(" ");
        var challenges = header.substr(schemeSeparator + 1).split(",");
        var challengeMap = {
        };
        challenges.forEach(function(challenge) {
            var _a = challenge.split("="), key = _a[0], value = _a[1];
            // Remove escaped quotation marks (', ") from challenge string to keep only the challenge value
            challengeMap[key] = unescape(value.replace(/['"]+/g, ""));
        });
        return challengeMap;
    };
    return AuthenticationHeaderParser1;
}();

},{"../error/ClientConfigurationError.js":"iOtcK","../utils/Constants.js":"7OLHu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6bbMk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ServerTelemetryManager", ()=>ServerTelemetryManager
);
var _constantsJs = require("../../utils/Constants.js");
var _serverTelemetryEntityJs = require("../../cache/entities/ServerTelemetryEntity.js");
var _stringUtilsJs = require("../../utils/StringUtils.js");
/*! @azure/msal-common v6.1.0 2022-02-08 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var ServerTelemetryManager = function() {
    function ServerTelemetryManager1(telemetryRequest, cacheManager) {
        this.cacheOutcome = _constantsJs.CacheOutcome.NO_CACHE_HIT;
        this.cacheManager = cacheManager;
        this.apiId = telemetryRequest.apiId;
        this.correlationId = telemetryRequest.correlationId;
        this.wrapperSKU = telemetryRequest.wrapperSKU || _constantsJs.Constants.EMPTY_STRING;
        this.wrapperVer = telemetryRequest.wrapperVer || _constantsJs.Constants.EMPTY_STRING;
        this.telemetryCacheKey = _constantsJs.SERVER_TELEM_CONSTANTS.CACHE_KEY + _constantsJs.Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;
    }
    /**
     * API to add MSER Telemetry to request
     */ ServerTelemetryManager1.prototype.generateCurrentRequestHeaderValue = function() {
        var request = "" + this.apiId + _constantsJs.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + this.cacheOutcome;
        var platformFields = [
            this.wrapperSKU,
            this.wrapperVer
        ].join(_constantsJs.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        var regionDiscoveryFields = this.getRegionDiscoveryFields();
        var requestWithRegionDiscoveryFields = [
            request,
            regionDiscoveryFields
        ].join(_constantsJs.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        return [
            _constantsJs.SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,
            requestWithRegionDiscoveryFields,
            platformFields
        ].join(_constantsJs.SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);
    };
    /**
     * API to add MSER Telemetry for the last failed request
     */ ServerTelemetryManager1.prototype.generateLastRequestHeaderValue = function() {
        var lastRequests = this.getLastRequests();
        var maxErrors = ServerTelemetryManager1.maxErrorsToSend(lastRequests);
        var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(_constantsJs.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        var errors = lastRequests.errors.slice(0, maxErrors).join(_constantsJs.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        var errorCount = lastRequests.errors.length;
        // Indicate whether this header contains all data or partial data
        var overflow = maxErrors < errorCount ? _constantsJs.SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : _constantsJs.SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;
        var platformFields = [
            errorCount,
            overflow
        ].join(_constantsJs.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
        return [
            _constantsJs.SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,
            lastRequests.cacheHits,
            failedRequests,
            errors,
            platformFields
        ].join(_constantsJs.SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);
    };
    /**
     * API to cache token failures for MSER data capture
     * @param error
     */ ServerTelemetryManager1.prototype.cacheFailedRequest = function(error) {
        var lastRequests = this.getLastRequests();
        if (lastRequests.errors.length >= _constantsJs.SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {
            // Remove a cached error to make room, first in first out
            lastRequests.failedRequests.shift(); // apiId
            lastRequests.failedRequests.shift(); // correlationId
            lastRequests.errors.shift();
        }
        lastRequests.failedRequests.push(this.apiId, this.correlationId);
        if (!_stringUtilsJs.StringUtils.isEmpty(error.subError)) lastRequests.errors.push(error.subError);
        else if (!_stringUtilsJs.StringUtils.isEmpty(error.errorCode)) lastRequests.errors.push(error.errorCode);
        else if (!!error && error.toString()) lastRequests.errors.push(error.toString());
        else lastRequests.errors.push(_constantsJs.SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);
        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);
        return;
    };
    /**
     * Update server telemetry cache entry by incrementing cache hit counter
     */ ServerTelemetryManager1.prototype.incrementCacheHits = function() {
        var lastRequests = this.getLastRequests();
        lastRequests.cacheHits += 1;
        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);
        return lastRequests.cacheHits;
    };
    /**
     * Get the server telemetry entity from cache or initialize a new one
     */ ServerTelemetryManager1.prototype.getLastRequests = function() {
        var initialValue = new _serverTelemetryEntityJs.ServerTelemetryEntity();
        var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);
        return lastRequests || initialValue;
    };
    /**
     * Remove server telemetry cache entry
     */ ServerTelemetryManager1.prototype.clearTelemetryCache = function() {
        var lastRequests = this.getLastRequests();
        var numErrorsFlushed = ServerTelemetryManager1.maxErrorsToSend(lastRequests);
        var errorCount = lastRequests.errors.length;
        if (numErrorsFlushed === errorCount) // All errors were sent on last request, clear Telemetry cache
        this.cacheManager.removeItem(this.telemetryCacheKey);
        else {
            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed
            var serverTelemEntity = new _serverTelemetryEntityJs.ServerTelemetryEntity();
            serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error
            serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);
            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);
        }
    };
    /**
     * Returns the maximum number of errors that can be flushed to the server in the next network request
     * @param serverTelemetryEntity
     */ ServerTelemetryManager1.maxErrorsToSend = function(serverTelemetryEntity) {
        var i;
        var maxErrors = 0;
        var dataSize = 0;
        var errorCount = serverTelemetryEntity.errors.length;
        for(i = 0; i < errorCount; i++){
            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs
            var apiId = serverTelemetryEntity.failedRequests[2 * i] || _constantsJs.Constants.EMPTY_STRING;
            var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || _constantsJs.Constants.EMPTY_STRING;
            var errorCode = serverTelemetryEntity.errors[i] || _constantsJs.Constants.EMPTY_STRING;
            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators
            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;
            if (dataSize < _constantsJs.SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) // Adding this entry to the header would still keep header size below the limit
            maxErrors += 1;
            else break;
        }
        return maxErrors;
    };
    /**
     * Get the region discovery fields
     *
     * @returns string
     */ ServerTelemetryManager1.prototype.getRegionDiscoveryFields = function() {
        var regionDiscoveryFields = [];
        regionDiscoveryFields.push(this.regionUsed || "");
        regionDiscoveryFields.push(this.regionSource || "");
        regionDiscoveryFields.push(this.regionOutcome || "");
        return regionDiscoveryFields.join(",");
    };
    /**
     * Update the region discovery metadata
     *
     * @param regionDiscoveryMetadata
     * @returns void
     */ ServerTelemetryManager1.prototype.updateRegionDiscoveryMetadata = function(regionDiscoveryMetadata) {
        this.regionUsed = regionDiscoveryMetadata.region_used;
        this.regionSource = regionDiscoveryMetadata.region_source;
        this.regionOutcome = regionDiscoveryMetadata.region_outcome;
    };
    /**
     * Set cache outcome
     */ ServerTelemetryManager1.prototype.setCacheOutcome = function(cacheOutcome) {
        this.cacheOutcome = cacheOutcome;
    };
    return ServerTelemetryManager1;
}();

},{"../../utils/Constants.js":"7OLHu","../../cache/entities/ServerTelemetryEntity.js":"h47zn","../../utils/StringUtils.js":"2gXP4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kN7I0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClientApplication", ()=>ClientApplication
);
var _tslibJs = require("../_virtual/_tslib.js");
var _cryptoOpsJs = require("../crypto/CryptoOps.js");
var _msalCommon = require("@azure/msal-common");
var _browserCacheManagerJs = require("../cache/BrowserCacheManager.js");
var _configurationJs = require("../config/Configuration.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _browserUtilsJs = require("../utils/BrowserUtils.js");
var _packageMetadataJs = require("../packageMetadata.js");
var _eventTypeJs = require("../event/EventType.js");
var _browserConfigurationAuthErrorJs = require("../error/BrowserConfigurationAuthError.js");
var _eventHandlerJs = require("../event/EventHandler.js");
var _popupClientJs = require("../interaction_client/PopupClient.js");
var _redirectClientJs = require("../interaction_client/RedirectClient.js");
var _silentIframeClientJs = require("../interaction_client/SilentIframeClient.js");
var _silentRefreshClientJs = require("../interaction_client/SilentRefreshClient.js");
var _tokenCacheJs = require("../cache/TokenCache.js");
var _silentAuthCodeClientJs = require("../interaction_client/SilentAuthCodeClient.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var ClientApplication = function() {
    /**
     * @constructor
     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object
     *
     * Important attributes in the Configuration object for auth are:
     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
     * - authority: the authority URL for your application.
     * - redirect_uri: the uri of your application registered in the portal.
     *
     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}
     * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
     * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
     * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
     *
     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/
     * Full B2C functionality will be available in this library in future versions.
     *
     * @param configuration Object for the MSAL PublicClientApplication instance
     */ function ClientApplication1(configuration) {
        /*
         * If loaded in an environment where window is not available,
         * set internal flag to false so that further requests fail.
         * This is to support server-side rendering environments.
         */ this.isBrowserEnvironment = typeof window !== "undefined";
        // Set the configuration.
        this.config = _configurationJs.buildConfiguration(configuration, this.isBrowserEnvironment);
        // Initialize logger
        this.logger = new _msalCommon.Logger(this.config.system.loggerOptions, _packageMetadataJs.name, _packageMetadataJs.version);
        // Initialize the network module class.
        this.networkClient = this.config.system.networkClient;
        // Initialize the navigation client class.
        this.navigationClient = this.config.system.navigationClient;
        // Initialize redirectResponse Map
        this.redirectResponse = new Map();
        // Initial hybrid spa map
        this.hybridAuthCodeResponses = new Map();
        // Initialize the crypto class.
        this.browserCrypto = this.isBrowserEnvironment ? new _cryptoOpsJs.CryptoOps(this.logger) : _msalCommon.DEFAULT_CRYPTO_IMPLEMENTATION;
        this.eventHandler = new _eventHandlerJs.EventHandler(this.logger, this.browserCrypto);
        // Initialize the browser storage class.
        this.browserStorage = this.isBrowserEnvironment ? new _browserCacheManagerJs.BrowserCacheManager(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger) : _browserCacheManagerJs.DEFAULT_BROWSER_CACHE_MANAGER(this.config.auth.clientId, this.logger);
        // Initialize the token cache
        this.tokenCache = new _tokenCacheJs.TokenCache(this.config, this.browserStorage, this.logger, this.browserCrypto);
    }
    // #region Redirect Flow
    /**
     * Event handler function which allows users to fire events after the PublicClientApplication object
     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect
     * auth flows.
     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.
     * @returns Token response or null. If the return value is null, then no auth redirect was detected.
     */ ClientApplication1.prototype.handleRedirectPromise = function(hash) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var loggedInAccounts, redirectResponseKey, response, correlationId, redirectClient;
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                this.logger.verbose("handleRedirectPromise called");
                loggedInAccounts = this.getAllAccounts();
                if (this.isBrowserEnvironment) {
                    redirectResponseKey = hash || _msalCommon.Constants.EMPTY_STRING;
                    response = this.redirectResponse.get(redirectResponseKey);
                    if (typeof response === "undefined") {
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.HANDLE_REDIRECT_START, _browserConstantsJs.InteractionType.Redirect);
                        this.logger.verbose("handleRedirectPromise has been called for the first time, storing the promise");
                        correlationId = this.browserStorage.getTemporaryCache(_browserConstantsJs.TemporaryCacheKeys.CORRELATION_ID, true) || "";
                        redirectClient = new _redirectClientJs.RedirectClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, correlationId);
                        response = redirectClient.handleRedirectPromise(hash).then(function(result) {
                            if (result) {
                                // Emit login event if number of accounts change
                                var isLoggingIn = loggedInAccounts.length < _this.getAllAccounts().length;
                                if (isLoggingIn) {
                                    _this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGIN_SUCCESS, _browserConstantsJs.InteractionType.Redirect, result);
                                    _this.logger.verbose("handleRedirectResponse returned result, login success");
                                } else {
                                    _this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_SUCCESS, _browserConstantsJs.InteractionType.Redirect, result);
                                    _this.logger.verbose("handleRedirectResponse returned result, acquire token success");
                                }
                            }
                            _this.eventHandler.emitEvent(_eventTypeJs.EventType.HANDLE_REDIRECT_END, _browserConstantsJs.InteractionType.Redirect);
                            return result;
                        }).catch(function(e) {
                            // Emit login event if there is an account
                            if (loggedInAccounts.length > 0) _this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_FAILURE, _browserConstantsJs.InteractionType.Redirect, null, e);
                            else _this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGIN_FAILURE, _browserConstantsJs.InteractionType.Redirect, null, e);
                            _this.eventHandler.emitEvent(_eventTypeJs.EventType.HANDLE_REDIRECT_END, _browserConstantsJs.InteractionType.Redirect);
                            throw e;
                        });
                        this.redirectResponse.set(redirectResponseKey, response);
                    } else this.logger.verbose("handleRedirectPromise has been called previously, returning the result from the first call");
                    return [
                        2 /*return*/ ,
                        response
                    ];
                }
                this.logger.verbose("handleRedirectPromise returns null, not browser environment");
                return [
                    2 /*return*/ ,
                    null
                ];
            });
        });
    };
    /**
     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects
     * the page, so any code that follows this function will not execute.
     *
     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
     *
     * @param request
     */ ClientApplication1.prototype.acquireTokenRedirect = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var isLoggedIn, redirectClient;
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                // Preflight request
                this.logger.verbose("acquireTokenRedirect called");
                this.preflightBrowserEnvironmentCheck(_browserConstantsJs.InteractionType.Redirect);
                isLoggedIn = this.getAllAccounts().length > 0;
                if (isLoggedIn) this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_START, _browserConstantsJs.InteractionType.Redirect, request);
                else this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGIN_START, _browserConstantsJs.InteractionType.Redirect, request);
                redirectClient = new _redirectClientJs.RedirectClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, request.correlationId);
                return [
                    2 /*return*/ ,
                    redirectClient.acquireToken(request).catch(function(e) {
                        // If logged in, emit acquire token events
                        if (isLoggedIn) _this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_FAILURE, _browserConstantsJs.InteractionType.Redirect, null, e);
                        else _this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGIN_FAILURE, _browserConstantsJs.InteractionType.Redirect, null, e);
                        throw e;
                    })
                ];
            });
        });
    };
    // #endregion
    // #region Popup Flow
    /**
     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser
     *
     * @param request
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ ClientApplication1.prototype.acquireTokenPopup = function(request) {
        var _this = this;
        try {
            this.logger.verbose("acquireTokenPopup called", request.correlationId);
            this.preflightBrowserEnvironmentCheck(_browserConstantsJs.InteractionType.Popup);
        } catch (e1) {
            // Since this function is syncronous we need to reject
            return Promise.reject(e1);
        }
        // If logged in, emit acquire token events
        var loggedInAccounts = this.getAllAccounts();
        if (loggedInAccounts.length > 0) this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_START, _browserConstantsJs.InteractionType.Popup, request);
        else this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGIN_START, _browserConstantsJs.InteractionType.Popup, request);
        var popupClient = new _popupClientJs.PopupClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, request.correlationId);
        return popupClient.acquireToken(request).then(function(result) {
            // If logged in, emit acquire token events
            var isLoggingIn = loggedInAccounts.length < _this.getAllAccounts().length;
            if (isLoggingIn) _this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGIN_SUCCESS, _browserConstantsJs.InteractionType.Popup, result);
            else _this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_SUCCESS, _browserConstantsJs.InteractionType.Popup, result);
            return result;
        }).catch(function(e) {
            if (loggedInAccounts.length > 0) _this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_FAILURE, _browserConstantsJs.InteractionType.Popup, null, e);
            else _this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGIN_FAILURE, _browserConstantsJs.InteractionType.Popup, null, e);
            // Since this function is syncronous we need to reject
            return Promise.reject(e);
        });
    };
    // #endregion
    // #region Silent Flow
    /**
     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:
     * - Any browser using a form of Intelligent Tracking Prevention
     * - If there is not an established session with the service
     *
     * In these cases, the request must be done inside a popup or full frame redirect.
     *
     * For the cases where interaction is required, you cannot send a request with prompt=none.
     *
     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as
     * you session on the server still exists.
     * @param request {@link SsoSilentRequest}
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ ClientApplication1.prototype.ssoSilent = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var silentIframeClient, silentTokenResult, e_1;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.preflightBrowserEnvironmentCheck(_browserConstantsJs.InteractionType.Silent);
                        this.logger.verbose("ssoSilent called", request.correlationId);
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.SSO_SILENT_START, _browserConstantsJs.InteractionType.Silent, request);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        silentIframeClient = new _silentIframeClientJs.SilentIframeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _browserConstantsJs.ApiId.ssoSilent, request.correlationId);
                        return [
                            4 /*yield*/ ,
                            silentIframeClient.acquireToken(request)
                        ];
                    case 2:
                        silentTokenResult = _a.sent();
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.SSO_SILENT_SUCCESS, _browserConstantsJs.InteractionType.Silent, silentTokenResult);
                        return [
                            2 /*return*/ ,
                            silentTokenResult
                        ];
                    case 3:
                        e_1 = _a.sent();
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.SSO_SILENT_FAILURE, _browserConstantsJs.InteractionType.Silent, null, e_1);
                        throw e_1;
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.
     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.
     * This API is not indended for normal authorization code acquisition and redemption.
     *
     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.
     *
     * @param request {@link AuthorizationCodeRequest}
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ ClientApplication1.prototype.acquireTokenByCode = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var response;
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                this.preflightBrowserEnvironmentCheck(_browserConstantsJs.InteractionType.Silent);
                this.logger.trace("acquireTokenByCode called", request.correlationId);
                this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_BY_CODE_START, _browserConstantsJs.InteractionType.Silent, request);
                try {
                    if (!request.code) throw _browserAuthErrorJs.BrowserAuthError.createAuthCodeRequiredError();
                    response = this.hybridAuthCodeResponses.get(request.code);
                    if (!response) {
                        this.logger.verbose("Initiating new acquireTokenByCode request", request.correlationId);
                        response = this.acquireTokenByCodeAsync(request).then(function(result) {
                            _this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_BY_CODE_SUCCESS, _browserConstantsJs.InteractionType.Silent, result);
                            _this.hybridAuthCodeResponses.delete(request.code);
                            return result;
                        }).catch(function(error) {
                            _this.hybridAuthCodeResponses.delete(request.code);
                            throw error;
                        });
                        this.hybridAuthCodeResponses.set(request.code, response);
                    } else this.logger.verbose("Existing acquireTokenByCode request found", request.correlationId);
                    return [
                        2 /*return*/ ,
                        response
                    ];
                } catch (e) {
                    this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE, _browserConstantsJs.InteractionType.Silent, null, e);
                    throw e;
                }
                return [
                    2 /*return*/ 
                ];
            });
        });
    };
    /**
     * Creates a SilentAuthCodeClient to redeem an authorization code.
     * @param request
     * @returns Result of the operation to redeem the authorization code
     */ ClientApplication1.prototype.acquireTokenByCodeAsync = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var silentAuthCodeClient, silentTokenResult;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.logger.trace("acquireTokenByCodeAsync called", request.correlationId);
                        silentAuthCodeClient = new _silentAuthCodeClientJs.SilentAuthCodeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _browserConstantsJs.ApiId.acquireTokenByCode, request.correlationId);
                        return [
                            4 /*yield*/ ,
                            silentAuthCodeClient.acquireToken(request)
                        ];
                    case 1:
                        silentTokenResult = _a.sent();
                        return [
                            2 /*return*/ ,
                            silentTokenResult
                        ];
                }
            });
        });
    };
    /**
     * Use this function to obtain a token before every call to the API / resource provider
     *
     * MSAL return's a cached token when available
     * Or it send's a request to the STS to obtain a new token using a refresh token.
     *
     * @param {@link SilentRequest}
     *
     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ ClientApplication1.prototype.acquireTokenByRefreshToken = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var silentRefreshClient;
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_NETWORK_START, _browserConstantsJs.InteractionType.Silent, request);
                // block the reload if it occurred inside a hidden iframe
                _browserUtilsJs.BrowserUtils.blockReloadInHiddenIframes();
                silentRefreshClient = new _silentRefreshClientJs.SilentRefreshClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, request.correlationId);
                return [
                    2 /*return*/ ,
                    silentRefreshClient.acquireToken(request).catch(function(e) {
                        var isServerError = e instanceof _msalCommon.ServerError;
                        var isInteractionRequiredError = e instanceof _msalCommon.InteractionRequiredAuthError;
                        var isInvalidGrantError = e.errorCode === _browserConstantsJs.BrowserConstants.INVALID_GRANT_ERROR;
                        if (isServerError && isInvalidGrantError && !isInteractionRequiredError) {
                            _this.logger.verbose("Refresh token expired or invalid, attempting acquire token by iframe", request.correlationId);
                            var silentIframeClient = new _silentIframeClientJs.SilentIframeClient(_this.config, _this.browserStorage, _this.browserCrypto, _this.logger, _this.eventHandler, _this.navigationClient, _browserConstantsJs.ApiId.acquireTokenSilent_authCode, request.correlationId);
                            return silentIframeClient.acquireToken(request);
                        }
                        throw e;
                    })
                ];
            });
        });
    };
    // #endregion
    // #region Logout
    /**
     * Deprecated logout function. Use logoutRedirect or logoutPopup instead
     * @param logoutRequest
     * @deprecated
     */ ClientApplication1.prototype.logout = function(logoutRequest) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                this.logger.warning("logout API is deprecated and will be removed in msal-browser v3.0.0. Use logoutRedirect instead.");
                return [
                    2 /*return*/ ,
                    this.logoutRedirect(logoutRequest)
                ];
            });
        });
    };
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param logoutRequest
     */ ClientApplication1.prototype.logoutRedirect = function(logoutRequest) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var redirectClient;
            return _tslibJs.__generator(this, function(_a) {
                this.preflightBrowserEnvironmentCheck(_browserConstantsJs.InteractionType.Redirect);
                redirectClient = new _redirectClientJs.RedirectClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId);
                return [
                    2 /*return*/ ,
                    redirectClient.logout(logoutRequest)
                ];
            });
        });
    };
    /**
     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server
     * @param logoutRequest
     */ ClientApplication1.prototype.logoutPopup = function(logoutRequest) {
        try {
            this.preflightBrowserEnvironmentCheck(_browserConstantsJs.InteractionType.Popup);
            var popupClient = new _popupClientJs.PopupClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId);
            return popupClient.logout(logoutRequest);
        } catch (e) {
            // Since this function is syncronous we need to reject
            return Promise.reject(e);
        }
    };
    // #endregion
    // #region Account APIs
    /**
     * Returns all accounts that MSAL currently has data for.
     * (the account object is created at the time of successful login)
     * or empty array when no accounts are found
     * @returns Array of account objects in cache
     */ ClientApplication1.prototype.getAllAccounts = function() {
        this.logger.verbose("getAllAccounts called");
        return this.isBrowserEnvironment ? this.browserStorage.getAllAccounts() : [];
    };
    /**
     * Returns the signed in account matching username.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found.
     * This API is provided for convenience but getAccountById should be used for best reliability
     * @param userName
     * @returns The account object stored in MSAL
     */ ClientApplication1.prototype.getAccountByUsername = function(userName) {
        var allAccounts = this.getAllAccounts();
        if (!_msalCommon.StringUtils.isEmpty(userName) && allAccounts && allAccounts.length) {
            this.logger.verbose("Account matching username found, returning");
            this.logger.verbosePii("Returning signed-in accounts matching username: " + userName);
            return allAccounts.filter(function(accountObj) {
                return accountObj.username.toLowerCase() === userName.toLowerCase();
            })[0] || null;
        } else {
            this.logger.verbose("getAccountByUsername: No matching account found, returning null");
            return null;
        }
    };
    /**
     * Returns the signed in account matching homeAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param homeAccountId
     * @returns The account object stored in MSAL
     */ ClientApplication1.prototype.getAccountByHomeId = function(homeAccountId) {
        var allAccounts = this.getAllAccounts();
        if (!_msalCommon.StringUtils.isEmpty(homeAccountId) && allAccounts && allAccounts.length) {
            this.logger.verbose("Account matching homeAccountId found, returning");
            this.logger.verbosePii("Returning signed-in accounts matching homeAccountId: " + homeAccountId);
            return allAccounts.filter(function(accountObj) {
                return accountObj.homeAccountId === homeAccountId;
            })[0] || null;
        } else {
            this.logger.verbose("getAccountByHomeId: No matching account found, returning null");
            return null;
        }
    };
    /**
     * Returns the signed in account matching localAccountId.
     * (the account object is created at the time of successful login)
     * or null when no matching account is found
     * @param localAccountId
     * @returns The account object stored in MSAL
     */ ClientApplication1.prototype.getAccountByLocalId = function(localAccountId) {
        var allAccounts = this.getAllAccounts();
        if (!_msalCommon.StringUtils.isEmpty(localAccountId) && allAccounts && allAccounts.length) {
            this.logger.verbose("Account matching localAccountId found, returning");
            this.logger.verbosePii("Returning signed-in accounts matching localAccountId: " + localAccountId);
            return allAccounts.filter(function(accountObj) {
                return accountObj.localAccountId === localAccountId;
            })[0] || null;
        } else {
            this.logger.verbose("getAccountByLocalId: No matching account found, returning null");
            return null;
        }
    };
    /**
     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.
     * @param account
     */ ClientApplication1.prototype.setActiveAccount = function(account) {
        this.browserStorage.setActiveAccount(account);
    };
    /**
     * Gets the currently active account
     */ ClientApplication1.prototype.getActiveAccount = function() {
        return this.browserStorage.getActiveAccount();
    };
    // #endregion
    // #region Helpers
    /**
     * Helper to validate app environment before making an auth request
     * * @param interactionType
     */ ClientApplication1.prototype.preflightBrowserEnvironmentCheck = function(interactionType) {
        this.logger.verbose("preflightBrowserEnvironmentCheck started");
        // Block request if not in browser environment
        _browserUtilsJs.BrowserUtils.blockNonBrowserEnvironment(this.isBrowserEnvironment);
        // Block redirects if in an iframe
        _browserUtilsJs.BrowserUtils.blockRedirectInIframe(interactionType, this.config.system.allowRedirectInIframe);
        // Block auth requests inside a hidden iframe
        _browserUtilsJs.BrowserUtils.blockReloadInHiddenIframes();
        // Block redirectUri opened in a popup from calling MSAL APIs
        _browserUtilsJs.BrowserUtils.blockAcquireTokenInPopups();
        // Block redirects if memory storage is enabled but storeAuthStateInCookie is not
        if (interactionType === _browserConstantsJs.InteractionType.Redirect && this.config.cache.cacheLocation === _browserConstantsJs.BrowserCacheLocation.MemoryStorage && !this.config.cache.storeAuthStateInCookie) throw _browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createInMemoryRedirectUnavailableError();
        if (interactionType === _browserConstantsJs.InteractionType.Redirect || interactionType === _browserConstantsJs.InteractionType.Popup) this.preflightInteractiveRequest();
    };
    /**
     * Helper to validate app environment before making a request.
     * @param request
     * @param interactionType
     */ ClientApplication1.prototype.preflightInteractiveRequest = function() {
        this.logger.verbose("preflightInteractiveRequest called, validating app environment");
        // block the reload if it occurred inside a hidden iframe
        _browserUtilsJs.BrowserUtils.blockReloadInHiddenIframes();
        // Set interaction in progress temporary cache or throw if alread set.
        this.browserStorage.setInteractionInProgress(true);
    };
    /**
     * Adds event callbacks to array
     * @param callback
     */ ClientApplication1.prototype.addEventCallback = function(callback) {
        return this.eventHandler.addEventCallback(callback);
    };
    /**
     * Removes callback with provided id from callback array
     * @param callbackId
     */ ClientApplication1.prototype.removeEventCallback = function(callbackId) {
        this.eventHandler.removeEventCallback(callbackId);
    };
    /**
     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */ ClientApplication1.prototype.enableAccountStorageEvents = function() {
        this.eventHandler.enableAccountStorageEvents();
    };
    /**
     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */ ClientApplication1.prototype.disableAccountStorageEvents = function() {
        this.eventHandler.disableAccountStorageEvents();
    };
    /**
     * Gets the token cache for the application.
     */ ClientApplication1.prototype.getTokenCache = function() {
        return this.tokenCache;
    };
    /**
     * Returns the logger instance
     */ ClientApplication1.prototype.getLogger = function() {
        return this.logger;
    };
    /**
     * Replaces the default logger set in configurations with new Logger with new configurations
     * @param logger Logger instance
     */ ClientApplication1.prototype.setLogger = function(logger) {
        this.logger = logger;
    };
    /**
     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.
     * @param sku
     * @param version
     */ ClientApplication1.prototype.initializeWrapperLibrary = function(sku, version) {
        // Validate the SKU passed in is one we expect
        this.browserStorage.setWrapperMetadata(sku, version);
    };
    /**
     * Sets navigation client
     * @param navigationClient
     */ ClientApplication1.prototype.setNavigationClient = function(navigationClient) {
        this.navigationClient = navigationClient;
    };
    /**
     * Returns the configuration object
     */ ClientApplication1.prototype.getConfiguration = function() {
        return this.config;
    };
    return ClientApplication1;
}();

},{"../_virtual/_tslib.js":"fxaLV","../crypto/CryptoOps.js":"U3W26","@azure/msal-common":"liWRx","../cache/BrowserCacheManager.js":"k1P3K","../config/Configuration.js":"2ePb2","../utils/BrowserConstants.js":"kJnIX","../utils/BrowserUtils.js":"l7wi6","../packageMetadata.js":"hunPb","../event/EventType.js":"cjqlF","../error/BrowserConfigurationAuthError.js":"99jPJ","../event/EventHandler.js":"jfojq","../interaction_client/PopupClient.js":"k7lZu","../interaction_client/RedirectClient.js":"fuuSL","../interaction_client/SilentIframeClient.js":"5nAus","../interaction_client/SilentRefreshClient.js":"6VSlo","../cache/TokenCache.js":"9pzQi","../interaction_client/SilentAuthCodeClient.js":"46QFF","../error/BrowserAuthError.js":"1rUUr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"U3W26":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CryptoOps", ()=>CryptoOps
);
var _tslibJs = require("../_virtual/_tslib.js");
var _guidGeneratorJs = require("./GuidGenerator.js");
var _base64EncodeJs = require("../encode/Base64Encode.js");
var _base64DecodeJs = require("../encode/Base64Decode.js");
var _pkceGeneratorJs = require("./PkceGenerator.js");
var _browserCryptoJs = require("./BrowserCrypto.js");
var _browserStringUtilsJs = require("../utils/BrowserStringUtils.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _asyncMemoryStorageJs = require("../cache/AsyncMemoryStorage.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and
 * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).
 */ var CryptoOps = function() {
    function CryptoOps1(logger) {
        this.logger = logger;
        // Browser crypto needs to be validated first before any other classes can be set.
        this.browserCrypto = new _browserCryptoJs.BrowserCrypto(this.logger);
        this.b64Encode = new _base64EncodeJs.Base64Encode();
        this.b64Decode = new _base64DecodeJs.Base64Decode();
        this.guidGenerator = new _guidGeneratorJs.GuidGenerator(this.browserCrypto);
        this.pkceGenerator = new _pkceGeneratorJs.PkceGenerator(this.browserCrypto);
        this.cache = {
            asymmetricKeys: new _asyncMemoryStorageJs.AsyncMemoryStorage(this.logger),
            symmetricKeys: new _asyncMemoryStorageJs.AsyncMemoryStorage(this.logger)
        };
    }
    /**
     * Creates a new random GUID - used to populate state and nonce.
     * @returns string (GUID)
     */ CryptoOps1.prototype.createNewGuid = function() {
        return this.guidGenerator.generateGuid();
    };
    /**
     * Encodes input string to base64.
     * @param input
     */ CryptoOps1.prototype.base64Encode = function(input) {
        return this.b64Encode.encode(input);
    };
    /**
     * Decodes input string from base64.
     * @param input
     */ CryptoOps1.prototype.base64Decode = function(input) {
        return this.b64Decode.decode(input);
    };
    /**
     * Generates PKCE codes used in Authorization Code Flow.
     */ CryptoOps1.prototype.generatePkceCodes = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.pkceGenerator.generateCodes()
                ];
            });
        });
    };
    /**
     * Generates a keypair, stores it and returns a thumbprint
     * @param request
     */ CryptoOps1.prototype.getPublicKeyThumbprint = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.browserCrypto.generateKeyPair(CryptoOps1.EXTRACTABLE, CryptoOps1.POP_KEY_USAGES)
                        ];
                    case 1:
                        keyPair = _a.sent();
                        return [
                            4 /*yield*/ ,
                            this.browserCrypto.exportJwk(keyPair.publicKey)
                        ];
                    case 2:
                        publicKeyJwk = _a.sent();
                        pubKeyThumprintObj = {
                            e: publicKeyJwk.e,
                            kty: publicKeyJwk.kty,
                            n: publicKeyJwk.n
                        };
                        publicJwkString = _browserCryptoJs.BrowserCrypto.getJwkString(pubKeyThumprintObj);
                        return [
                            4 /*yield*/ ,
                            this.hashString(publicJwkString)
                        ];
                    case 3:
                        publicJwkHash = _a.sent();
                        return [
                            4 /*yield*/ ,
                            this.browserCrypto.exportJwk(keyPair.privateKey)
                        ];
                    case 4:
                        privateKeyJwk = _a.sent();
                        return [
                            4 /*yield*/ ,
                            this.browserCrypto.importJwk(privateKeyJwk, false, [
                                "sign"
                            ])
                        ];
                    case 5:
                        unextractablePrivateKey = _a.sent();
                        // Store Keypair data in keystore
                        return [
                            4 /*yield*/ ,
                            this.cache.asymmetricKeys.setItem(publicJwkHash, {
                                privateKey: unextractablePrivateKey,
                                publicKey: keyPair.publicKey,
                                requestMethod: request.resourceRequestMethod,
                                requestUri: request.resourceRequestUri
                            })
                        ];
                    case 6:
                        // Store Keypair data in keystore
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            publicJwkHash
                        ];
                }
            });
        });
    };
    /**
     * Removes cryptographic keypair from key store matching the keyId passed in
     * @param kid
     */ CryptoOps1.prototype.removeTokenBindingKey = function(kid) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var keyFound;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.cache.asymmetricKeys.removeItem(kid)
                        ];
                    case 1:
                        _a.sent();
                        return [
                            4 /*yield*/ ,
                            this.cache.asymmetricKeys.containsKey(kid)
                        ];
                    case 2:
                        keyFound = _a.sent();
                        return [
                            2 /*return*/ ,
                            !keyFound
                        ];
                }
            });
        });
    };
    /**
     * Removes all cryptographic keys from IndexedDB storage
     */ CryptoOps1.prototype.clearKeystore = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var dataStoreNames, databaseStorage, _a;
            return _tslibJs.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        dataStoreNames = Object.keys(this.cache);
                        databaseStorage = this.cache[dataStoreNames[0]];
                        if (!databaseStorage) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            databaseStorage.deleteDatabase()
                        ];
                    case 1:
                        _a = _b.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        _a = false;
                        _b.label = 3;
                    case 3:
                        return [
                            2 /*return*/ ,
                            _a
                        ];
                }
            });
        });
    };
    /**
     * Signs the given object as a jwt payload with private key retrieved by given kid.
     * @param payload
     * @param kid
     */ CryptoOps1.prototype.signJwt = function(payload, kid) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var cachedKeyPair, publicKeyJwk, publicKeyJwkString, header, encodedHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.cache.asymmetricKeys.getItem(kid)
                        ];
                    case 1:
                        cachedKeyPair = _a.sent();
                        if (!cachedKeyPair) throw _browserAuthErrorJs.BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);
                        return [
                            4 /*yield*/ ,
                            this.browserCrypto.exportJwk(cachedKeyPair.publicKey)
                        ];
                    case 2:
                        publicKeyJwk = _a.sent();
                        publicKeyJwkString = _browserCryptoJs.BrowserCrypto.getJwkString(publicKeyJwk);
                        header = {
                            alg: publicKeyJwk.alg,
                            type: _browserConstantsJs.KEY_FORMAT_JWK
                        };
                        encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header));
                        // Generate payload
                        payload.cnf = {
                            jwk: JSON.parse(publicKeyJwkString)
                        };
                        encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));
                        tokenString = encodedHeader + "." + encodedPayload;
                        tokenBuffer = _browserStringUtilsJs.BrowserStringUtils.stringToArrayBuffer(tokenString);
                        return [
                            4 /*yield*/ ,
                            this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)
                        ];
                    case 3:
                        signatureBuffer = _a.sent();
                        encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));
                        return [
                            2 /*return*/ ,
                            tokenString + "." + encodedSignature
                        ];
                }
            });
        });
    };
    /**
     * Returns the SHA-256 hash of an input string
     * @param plainText
     */ CryptoOps1.prototype.hashString = function(plainText) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var hashBuffer, hashBytes;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.browserCrypto.sha256Digest(plainText)
                        ];
                    case 1:
                        hashBuffer = _a.sent();
                        hashBytes = new Uint8Array(hashBuffer);
                        return [
                            2 /*return*/ ,
                            this.b64Encode.urlEncodeArr(hashBytes)
                        ];
                }
            });
        });
    };
    CryptoOps1.POP_KEY_USAGES = [
        "sign",
        "verify"
    ];
    CryptoOps1.EXTRACTABLE = true;
    return CryptoOps1;
}();

},{"../_virtual/_tslib.js":"fxaLV","./GuidGenerator.js":"8RA5K","../encode/Base64Encode.js":"5mZLZ","../encode/Base64Decode.js":"aoDUS","./PkceGenerator.js":"4mhyR","./BrowserCrypto.js":"eogaZ","../utils/BrowserStringUtils.js":"38WJp","../utils/BrowserConstants.js":"kJnIX","../error/BrowserAuthError.js":"1rUUr","../cache/AsyncMemoryStorage.js":"ab912","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8RA5K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GuidGenerator", ()=>GuidGenerator
);
var _mathUtilsJs = require("../utils/MathUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var GuidGenerator = function() {
    function GuidGenerator1(cryptoObj) {
        this.cryptoObj = cryptoObj;
    }
    /*
     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or
     * pseudo-random numbers.
     * The algorithm is as follows:
     *     Set the two most significant bits (bits 6 and 7) of the
     *        clock_seq_hi_and_reserved to zero and one, respectively.
     *     Set the four most significant bits (bits 12 through 15) of the
     *        time_hi_and_version field to the 4-bit version number from
     *        Section 4.1.3. Version4
     *     Set all the other bits to randomly (or pseudo-randomly) chosen
     *     values.
     * UUID                   = time-low "-" time-mid "-"time-high-and-version "-"clock-seq-reserved and low(2hexOctet)"-" node
     * time-low               = 4hexOctet
     * time-mid               = 2hexOctet
     * time-high-and-version  = 2hexOctet
     * clock-seq-and-reserved = hexOctet:
     * clock-seq-low          = hexOctet
     * node                   = 6hexOctet
     * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
     * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10
     * y values are 8, 9, A, B
     */ GuidGenerator1.prototype.generateGuid = function() {
        try {
            var buffer = new Uint8Array(16);
            this.cryptoObj.getRandomValues(buffer);
            // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).
            buffer[6] |= 64; // buffer[6] | 01000000 will set the 6 bit to 1.
            buffer[6] &= 79; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = "4".
            // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.
            buffer[8] |= 128; // buffer[8] | 10000000 will set the 7 bit to 1.
            buffer[8] &= 191; // buffer[8] & 10111111 will set the 6 bit to 0.
            return _mathUtilsJs.MathUtils.decimalToHex(buffer[0]) + _mathUtilsJs.MathUtils.decimalToHex(buffer[1]) + _mathUtilsJs.MathUtils.decimalToHex(buffer[2]) + _mathUtilsJs.MathUtils.decimalToHex(buffer[3]) + "-" + _mathUtilsJs.MathUtils.decimalToHex(buffer[4]) + _mathUtilsJs.MathUtils.decimalToHex(buffer[5]) + "-" + _mathUtilsJs.MathUtils.decimalToHex(buffer[6]) + _mathUtilsJs.MathUtils.decimalToHex(buffer[7]) + "-" + _mathUtilsJs.MathUtils.decimalToHex(buffer[8]) + _mathUtilsJs.MathUtils.decimalToHex(buffer[9]) + "-" + _mathUtilsJs.MathUtils.decimalToHex(buffer[10]) + _mathUtilsJs.MathUtils.decimalToHex(buffer[11]) + _mathUtilsJs.MathUtils.decimalToHex(buffer[12]) + _mathUtilsJs.MathUtils.decimalToHex(buffer[13]) + _mathUtilsJs.MathUtils.decimalToHex(buffer[14]) + _mathUtilsJs.MathUtils.decimalToHex(buffer[15]);
        } catch (err) {
            var guidHolder = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
            var hex = "0123456789abcdef";
            var r = 0;
            var guidResponse = "";
            for(var i = 0; i < 36; i++){
                if (guidHolder[i] !== "-" && guidHolder[i] !== "4") // each x and y needs to be random
                r = Math.random() * 16 | 0;
                if (guidHolder[i] === "x") guidResponse += hex[r];
                else if (guidHolder[i] === "y") {
                    // clock-seq-and-reserved first hex is filtered and remaining hex values are random
                    r &= 3; // bit and with 0011 to set pos 2 to zero ?0??
                    r |= 8; // set pos 3 to 1 as 1???
                    guidResponse += hex[r];
                } else guidResponse += guidHolder[i];
            }
            return guidResponse;
        }
    };
    /**
     * verifies if a string is  GUID
     * @param guid
     */ GuidGenerator1.isGuid = function(guid) {
        var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        return regexGuid.test(guid);
    };
    return GuidGenerator1;
}();

},{"../utils/MathUtils.js":"1B8oE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1B8oE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MathUtils", ()=>MathUtils
);
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Utility class for math specific functions in browser.
 */ var MathUtils = function() {
    function MathUtils1() {
    }
    /**
     * Decimal to Hex
     *
     * @param num
     */ MathUtils1.decimalToHex = function(num) {
        var hex = num.toString(16);
        while(hex.length < 2)hex = "0" + hex;
        return hex;
    };
    return MathUtils1;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5mZLZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Base64Encode", ()=>Base64Encode
);
var _browserStringUtilsJs = require("../utils/BrowserStringUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:
 * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
 */ var Base64Encode = function() {
    function Base64Encode1() {
    }
    /**
     * Returns URL Safe b64 encoded string from a plaintext string.
     * @param input
     */ Base64Encode1.prototype.urlEncode = function(input) {
        return encodeURIComponent(this.encode(input).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_"));
    };
    /**
     * Returns URL Safe b64 encoded string from an int8Array.
     * @param inputArr
     */ Base64Encode1.prototype.urlEncodeArr = function(inputArr) {
        return this.base64EncArr(inputArr).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    };
    /**
     * Returns b64 encoded string from plaintext string.
     * @param input
     */ Base64Encode1.prototype.encode = function(input) {
        var inputUtf8Arr = _browserStringUtilsJs.BrowserStringUtils.stringToUtf8Arr(input);
        return this.base64EncArr(inputUtf8Arr);
    };
    /**
     * Base64 encode byte array
     * @param aBytes
     */ Base64Encode1.prototype.base64EncArr = function(aBytes) {
        var eqLen = (3 - aBytes.length % 3) % 3;
        var sB64Enc = "";
        for(var nMod3 = void 0, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++){
            nMod3 = nIdx % 3;
            /* Uncomment the following line in order to split the output in lines 76-character long: */ /*
             *if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) { sB64Enc += "\r\n"; }
             */ nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);
            if (nMod3 === 2 || aBytes.length - nIdx === 1) {
                sB64Enc += String.fromCharCode(this.uint6ToB64(nUint24 >>> 18 & 63), this.uint6ToB64(nUint24 >>> 12 & 63), this.uint6ToB64(nUint24 >>> 6 & 63), this.uint6ToB64(nUint24 & 63));
                nUint24 = 0;
            }
        }
        return eqLen === 0 ? sB64Enc : sB64Enc.substring(0, sB64Enc.length - eqLen) + (eqLen === 1 ? "=" : "==");
    };
    /**
     * Base64 string to array encoding helper
     * @param nUint6
     */ Base64Encode1.prototype.uint6ToB64 = function(nUint6) {
        return nUint6 < 26 ? nUint6 + 65 : nUint6 < 52 ? nUint6 + 71 : nUint6 < 62 ? nUint6 - 4 : nUint6 === 62 ? 43 : nUint6 === 63 ? 47 : 65;
    };
    return Base64Encode1;
}();

},{"../utils/BrowserStringUtils.js":"38WJp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"38WJp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserStringUtils", ()=>BrowserStringUtils
);
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Utility functions for strings in a browser. See here for implementation details:
 * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
 */ var BrowserStringUtils = function() {
    function BrowserStringUtils1() {
    }
    /**
     * Converts string to Uint8Array
     * @param sDOMStr
     */ BrowserStringUtils1.stringToUtf8Arr = function(sDOMStr) {
        var nChr;
        var nArrLen = 0;
        var nStrLen = sDOMStr.length;
        /* mapping... */ for(var nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++){
            nChr = sDOMStr.charCodeAt(nMapIdx);
            nArrLen += nChr < 128 ? 1 : nChr < 2048 ? 2 : nChr < 65536 ? 3 : nChr < 2097152 ? 4 : nChr < 67108864 ? 5 : 6;
        }
        var aBytes = new Uint8Array(nArrLen);
        /* transcription... */ for(var nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++){
            nChr = sDOMStr.charCodeAt(nChrIdx);
            if (nChr < 128) /* one byte */ aBytes[nIdx++] = nChr;
            else if (nChr < 2048) {
                /* two bytes */ aBytes[nIdx++] = 192 + (nChr >>> 6);
                aBytes[nIdx++] = 128 + (nChr & 63);
            } else if (nChr < 65536) {
                /* three bytes */ aBytes[nIdx++] = 224 + (nChr >>> 12);
                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                aBytes[nIdx++] = 128 + (nChr & 63);
            } else if (nChr < 2097152) {
                /* four bytes */ aBytes[nIdx++] = 240 + (nChr >>> 18);
                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                aBytes[nIdx++] = 128 + (nChr & 63);
            } else if (nChr < 67108864) {
                /* five bytes */ aBytes[nIdx++] = 248 + (nChr >>> 24);
                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                aBytes[nIdx++] = 128 + (nChr & 63);
            } else /* if (nChr <= 0x7fffffff) */ {
                /* six bytes */ aBytes[nIdx++] = 252 + (nChr >>> 30);
                aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                aBytes[nIdx++] = 128 + (nChr & 63);
            }
        }
        return aBytes;
    };
    /**
     * Converst string to ArrayBuffer
     * @param dataString
     */ BrowserStringUtils1.stringToArrayBuffer = function(dataString) {
        var data = new ArrayBuffer(dataString.length);
        var dataView = new Uint8Array(data);
        for(var i = 0; i < dataString.length; i++)dataView[i] = dataString.charCodeAt(i);
        return data;
    };
    /**
     * Converts Uint8Array to a string
     * @param aBytes
     */ BrowserStringUtils1.utf8ArrToString = function(aBytes) {
        var sView = "";
        for(var nPart = void 0, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++){
            nPart = aBytes[nIdx];
            sView += String.fromCharCode(nPart > 251 && nPart < 254 && nIdx + 5 < nLen ? /* six bytes */ /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */ (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ? /* five bytes */ (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ? /* four bytes */ (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ? /* three bytes */ (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ? /* two bytes */ (nPart - 192 << 6) + aBytes[++nIdx] - 128 : /* nPart < 127 ? */ /* one byte */ nPart);
        }
        return sView;
    };
    return BrowserStringUtils1;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aoDUS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Base64Decode", ()=>Base64Decode
);
var _browserStringUtilsJs = require("../utils/BrowserStringUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:
 * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
 */ var Base64Decode = function() {
    function Base64Decode1() {
    }
    /**
     * Returns a URL-safe plaintext decoded string from b64 encoded input.
     * @param input
     */ Base64Decode1.prototype.decode = function(input) {
        var encodedString = input.replace(/-/g, "+").replace(/_/g, "/");
        switch(encodedString.length % 4){
            case 0:
                break;
            case 2:
                encodedString += "==";
                break;
            case 3:
                encodedString += "=";
                break;
            default:
                throw new Error("Invalid base64 string");
        }
        var inputUtf8Arr = this.base64DecToArr(encodedString);
        return _browserStringUtilsJs.BrowserStringUtils.utf8ArrToString(inputUtf8Arr);
    };
    /**
     * Decodes base64 into Uint8Array
     * @param base64String
     * @param nBlockSize
     */ Base64Decode1.prototype.base64DecToArr = function(base64String, nBlockSize) {
        var sB64Enc = base64String.replace(/[^A-Za-z0-9\+\/]/g, "");
        var nInLen = sB64Enc.length;
        var nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2;
        var aBytes = new Uint8Array(nOutLen);
        for(var nMod3 = void 0, nMod4 = void 0, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++){
            nMod4 = nInIdx & 3;
            nUint24 |= this.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
            if (nMod4 === 3 || nInLen - nInIdx === 1) {
                for(nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++)aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
                nUint24 = 0;
            }
        }
        return aBytes;
    };
    /**
     * Base64 string to array decoding helper
     * @param charNum
     */ Base64Decode1.prototype.b64ToUint6 = function(charNum) {
        return charNum > 64 && charNum < 91 ? charNum - 65 : charNum > 96 && charNum < 123 ? charNum - 71 : charNum > 47 && charNum < 58 ? charNum + 4 : charNum === 43 ? 62 : charNum === 47 ? 63 : 0;
    };
    return Base64Decode1;
}();

},{"../utils/BrowserStringUtils.js":"38WJp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4mhyR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PkceGenerator", ()=>PkceGenerator
);
var _tslibJs = require("../_virtual/_tslib.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _base64EncodeJs = require("../encode/Base64Encode.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ // Constant byte array length
var RANDOM_BYTE_ARR_LENGTH = 32;
/**
 * Class which exposes APIs to generate PKCE codes and code verifiers.
 */ var PkceGenerator = function() {
    function PkceGenerator1(cryptoObj) {
        this.base64Encode = new _base64EncodeJs.Base64Encode();
        this.cryptoObj = cryptoObj;
    }
    /**
     * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636
     */ PkceGenerator1.prototype.generateCodes = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var codeVerifier, codeChallenge;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        codeVerifier = this.generateCodeVerifier();
                        return [
                            4 /*yield*/ ,
                            this.generateCodeChallengeFromVerifier(codeVerifier)
                        ];
                    case 1:
                        codeChallenge = _a.sent();
                        return [
                            2 /*return*/ ,
                            {
                                verifier: codeVerifier,
                                challenge: codeChallenge
                            }
                        ];
                }
            });
        });
    };
    /**
     * Generates a random 32 byte buffer and returns the base64
     * encoded string to be used as a PKCE Code Verifier
     */ PkceGenerator1.prototype.generateCodeVerifier = function() {
        try {
            // Generate random values as utf-8
            var buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);
            this.cryptoObj.getRandomValues(buffer);
            // encode verifier as base64
            var pkceCodeVerifierB64 = this.base64Encode.urlEncodeArr(buffer);
            return pkceCodeVerifierB64;
        } catch (e) {
            throw _browserAuthErrorJs.BrowserAuthError.createPkceNotGeneratedError(e);
        }
    };
    /**
     * Creates a base64 encoded PKCE Code Challenge string from the
     * hash created from the PKCE Code Verifier supplied
     */ PkceGenerator1.prototype.generateCodeChallengeFromVerifier = function(pkceCodeVerifier) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var pkceHashedCodeVerifier, e_1;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.cryptoObj.sha256Digest(pkceCodeVerifier)
                        ];
                    case 1:
                        pkceHashedCodeVerifier = _a.sent();
                        // encode hash as base64
                        return [
                            2 /*return*/ ,
                            this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier))
                        ];
                    case 2:
                        e_1 = _a.sent();
                        throw _browserAuthErrorJs.BrowserAuthError.createPkceNotGeneratedError(e_1);
                    case 3:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    return PkceGenerator1;
}();

},{"../_virtual/_tslib.js":"fxaLV","../error/BrowserAuthError.js":"1rUUr","../encode/Base64Encode.js":"5mZLZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1rUUr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserAuthError", ()=>BrowserAuthError
);
parcelHelpers.export(exports, "BrowserAuthErrorMessage", ()=>BrowserAuthErrorMessage
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
 */ var BrowserAuthErrorMessage = {
    pkceNotGenerated: {
        code: "pkce_not_created",
        desc: "The PKCE code challenge and verifier could not be generated."
    },
    cryptoDoesNotExist: {
        code: "crypto_nonexistent",
        desc: "The crypto object or function is not available."
    },
    httpMethodNotImplementedError: {
        code: "http_method_not_implemented",
        desc: "The HTTP method given has not been implemented in this library."
    },
    emptyNavigateUriError: {
        code: "empty_navigate_uri",
        desc: "Navigation URI is empty. Please check stack trace for more info."
    },
    hashEmptyError: {
        code: "hash_empty_error",
        desc: "Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash."
    },
    hashDoesNotContainStateError: {
        code: "no_state_in_hash",
        desc: "Hash does not contain state. Please verify that the request originated from msal."
    },
    hashDoesNotContainKnownPropertiesError: {
        code: "hash_does_not_contain_known_properties",
        desc: "Hash does not contain known properites. Please verify that your redirectUri is not changing the hash."
    },
    unableToParseStateError: {
        code: "unable_to_parse_state",
        desc: "Unable to parse state. Please verify that the request originated from msal."
    },
    stateInteractionTypeMismatchError: {
        code: "state_interaction_type_mismatch",
        desc: "Hash contains state but the interaction type does not match the caller."
    },
    interactionInProgress: {
        code: "interaction_in_progress",
        desc: "Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.  For more visit: aka.ms/msaljs/browser-errors."
    },
    popupWindowError: {
        code: "popup_window_error",
        desc: "Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser."
    },
    emptyWindowError: {
        code: "empty_window_error",
        desc: "window.open returned null or undefined window object."
    },
    userCancelledError: {
        code: "user_cancelled",
        desc: "User cancelled the flow."
    },
    monitorPopupTimeoutError: {
        code: "monitor_window_timeout",
        desc: "Token acquisition in popup failed due to timeout. For more visit: aka.ms/msaljs/browser-errors."
    },
    monitorIframeTimeoutError: {
        code: "monitor_window_timeout",
        desc: "Token acquisition in iframe failed due to timeout. For more visit: aka.ms/msaljs/browser-errors."
    },
    redirectInIframeError: {
        code: "redirect_in_iframe",
        desc: "Code flow is not supported inside an iframe. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs."
    },
    blockTokenRequestsInHiddenIframeError: {
        code: "block_iframe_reload",
        desc: "Request was blocked inside an iframe because MSAL detected an authentication response. For more visit: aka.ms/msaljs/browser-errors"
    },
    blockAcquireTokenInPopupsError: {
        code: "block_nested_popups",
        desc: "Request was blocked inside a popup because MSAL detected it was running in a popup."
    },
    iframeClosedPrematurelyError: {
        code: "iframe_closed_prematurely",
        desc: "The iframe being monitored was closed prematurely."
    },
    silentLogoutUnsupportedError: {
        code: "silent_logout_unsupported",
        desc: "Silent logout not supported. Please call logoutRedirect or logoutPopup instead."
    },
    noAccountError: {
        code: "no_account_error",
        desc: "No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request."
    },
    silentPromptValueError: {
        code: "silent_prompt_value_error",
        desc: "The value given for the prompt value is not valid for silent requests - must be set to 'none'."
    },
    noTokenRequestCacheError: {
        code: "no_token_request_cache_error",
        desc: "No token request found in cache."
    },
    unableToParseTokenRequestCacheError: {
        code: "unable_to_parse_token_request_cache_error",
        desc: "The cached token request could not be parsed."
    },
    noCachedAuthorityError: {
        code: "no_cached_authority_error",
        desc: "No cached authority found."
    },
    authRequestNotSet: {
        code: "auth_request_not_set_error",
        desc: "Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler"
    },
    invalidCacheType: {
        code: "invalid_cache_type",
        desc: "Invalid cache type"
    },
    notInBrowserEnvironment: {
        code: "non_browser_environment",
        desc: "Login and token requests are not supported in non-browser environments."
    },
    databaseNotOpen: {
        code: "database_not_open",
        desc: "Database is not open!"
    },
    noNetworkConnectivity: {
        code: "no_network_connectivity",
        desc: "No network connectivity. Check your internet connection."
    },
    postRequestFailed: {
        code: "post_request_failed",
        desc: "Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'"
    },
    getRequestFailed: {
        code: "get_request_failed",
        desc: "Network request failed. Please check the network trace to determine root cause."
    },
    failedToParseNetworkResponse: {
        code: "failed_to_parse_response",
        desc: "Failed to parse network response. Check network trace."
    },
    unableToLoadTokenError: {
        code: "unable_to_load_token",
        desc: "Error loading token to cache."
    },
    signingKeyNotFoundInStorage: {
        code: "crypto_key_not_found",
        desc: "Cryptographic Key or Keypair not found in browser storage."
    },
    authCodeRequired: {
        code: "auth_code_required",
        desc: "An authorization code must be provided (as the `code` property on the request) to this flow."
    },
    databaseUnavailable: {
        code: "database_unavailable",
        desc: "IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts."
    }
};
/**
 * Browser library error class thrown by the MSAL.js library for SPAs
 */ var BrowserAuthError = function(_super) {
    _tslibJs.__extends(BrowserAuthError1, _super);
    function BrowserAuthError1(errorCode, errorMessage) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        Object.setPrototypeOf(_this, BrowserAuthError1.prototype);
        _this.name = "BrowserAuthError";
        return _this;
    }
    /**
     * Creates an error thrown when PKCE is not implemented.
     * @param errDetail
     */ BrowserAuthError1.createPkceNotGeneratedError = function(errDetail) {
        return new BrowserAuthError1(BrowserAuthErrorMessage.pkceNotGenerated.code, BrowserAuthErrorMessage.pkceNotGenerated.desc + " Detail:" + errDetail);
    };
    /**
     * Creates an error thrown when the crypto object is unavailable.
     * @param errDetail
     */ BrowserAuthError1.createCryptoNotAvailableError = function(errDetail) {
        return new BrowserAuthError1(BrowserAuthErrorMessage.cryptoDoesNotExist.code, BrowserAuthErrorMessage.cryptoDoesNotExist.desc + " Detail:" + errDetail);
    };
    /**
     * Creates an error thrown when an HTTP method hasn't been implemented by the browser class.
     * @param method
     */ BrowserAuthError1.createHttpMethodNotImplementedError = function(method) {
        return new BrowserAuthError1(BrowserAuthErrorMessage.httpMethodNotImplementedError.code, BrowserAuthErrorMessage.httpMethodNotImplementedError.desc + " Given Method: " + method);
    };
    /**
     * Creates an error thrown when the navigation URI is empty.
     */ BrowserAuthError1.createEmptyNavigationUriError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.emptyNavigateUriError.code, BrowserAuthErrorMessage.emptyNavigateUriError.desc);
    };
    /**
     * Creates an error thrown when the hash string value is unexpectedly empty.
     * @param hashValue
     */ BrowserAuthError1.createEmptyHashError = function(hashValue) {
        return new BrowserAuthError1(BrowserAuthErrorMessage.hashEmptyError.code, BrowserAuthErrorMessage.hashEmptyError.desc + " Given Url: " + hashValue);
    };
    /**
     * Creates an error thrown when the hash string value is unexpectedly empty.
     */ BrowserAuthError1.createHashDoesNotContainStateError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.hashDoesNotContainStateError.code, BrowserAuthErrorMessage.hashDoesNotContainStateError.desc);
    };
    /**
     * Creates an error thrown when the hash string value does not contain known properties
     */ BrowserAuthError1.createHashDoesNotContainKnownPropertiesError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.code, BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.desc);
    };
    /**
     * Creates an error thrown when the hash string value is unexpectedly empty.
     */ BrowserAuthError1.createUnableToParseStateError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.unableToParseStateError.code, BrowserAuthErrorMessage.unableToParseStateError.desc);
    };
    /**
     * Creates an error thrown when the state value in the hash does not match the interaction type of the API attempting to consume it.
     */ BrowserAuthError1.createStateInteractionTypeMismatchError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.stateInteractionTypeMismatchError.code, BrowserAuthErrorMessage.stateInteractionTypeMismatchError.desc);
    };
    /**
     * Creates an error thrown when a browser interaction (redirect or popup) is in progress.
     */ BrowserAuthError1.createInteractionInProgressError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.interactionInProgress.code, BrowserAuthErrorMessage.interactionInProgress.desc);
    };
    /**
     * Creates an error thrown when the popup window could not be opened.
     * @param errDetail
     */ BrowserAuthError1.createPopupWindowError = function(errDetail) {
        var errorMessage = BrowserAuthErrorMessage.popupWindowError.desc;
        errorMessage = !_msalCommon.StringUtils.isEmpty(errDetail) ? errorMessage + " Details: " + errDetail : errorMessage;
        return new BrowserAuthError1(BrowserAuthErrorMessage.popupWindowError.code, errorMessage);
    };
    /**
     * Creates an error thrown when window.open returns an empty window object.
     * @param errDetail
     */ BrowserAuthError1.createEmptyWindowCreatedError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.emptyWindowError.code, BrowserAuthErrorMessage.emptyWindowError.desc);
    };
    /**
     * Creates an error thrown when the user closes a popup.
     */ BrowserAuthError1.createUserCancelledError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.userCancelledError.code, BrowserAuthErrorMessage.userCancelledError.desc);
    };
    /**
     * Creates an error thrown when monitorPopupFromHash times out for a given popup.
     */ BrowserAuthError1.createMonitorPopupTimeoutError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.monitorPopupTimeoutError.code, BrowserAuthErrorMessage.monitorPopupTimeoutError.desc);
    };
    /**
     * Creates an error thrown when monitorIframeFromHash times out for a given iframe.
     */ BrowserAuthError1.createMonitorIframeTimeoutError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.monitorIframeTimeoutError.code, BrowserAuthErrorMessage.monitorIframeTimeoutError.desc);
    };
    /**
     * Creates an error thrown when navigateWindow is called inside an iframe.
     * @param windowParentCheck
     */ BrowserAuthError1.createRedirectInIframeError = function(windowParentCheck) {
        return new BrowserAuthError1(BrowserAuthErrorMessage.redirectInIframeError.code, BrowserAuthErrorMessage.redirectInIframeError.desc + " (window.parent !== window) => " + windowParentCheck);
    };
    /**
     * Creates an error thrown when an auth reload is done inside an iframe.
     */ BrowserAuthError1.createBlockReloadInHiddenIframeError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.code, BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.desc);
    };
    /**
     * Creates an error thrown when a popup attempts to call an acquireToken API
     * @returns
     */ BrowserAuthError1.createBlockAcquireTokenInPopupsError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.code, BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.desc);
    };
    /**
     * Creates an error thrown when an iframe is found to be closed before the timeout is reached.
     */ BrowserAuthError1.createIframeClosedPrematurelyError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.iframeClosedPrematurelyError.code, BrowserAuthErrorMessage.iframeClosedPrematurelyError.desc);
    };
    /**
     * Creates an error thrown when the logout API is called on any of the silent interaction clients
     */ BrowserAuthError1.createSilentLogoutUnsupportedError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.silentLogoutUnsupportedError.code, BrowserAuthErrorMessage.silentLogoutUnsupportedError.desc);
    };
    /**
     * Creates an error thrown when the account object is not provided in the acquireTokenSilent API.
     */ BrowserAuthError1.createNoAccountError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.noAccountError.code, BrowserAuthErrorMessage.noAccountError.desc);
    };
    /**
     * Creates an error thrown when a given prompt value is invalid for silent requests.
     */ BrowserAuthError1.createSilentPromptValueError = function(givenPrompt) {
        return new BrowserAuthError1(BrowserAuthErrorMessage.silentPromptValueError.code, BrowserAuthErrorMessage.silentPromptValueError.desc + " Given value: " + givenPrompt);
    };
    /**
     * Creates an error thrown when the cached token request could not be retrieved from the cache
     */ BrowserAuthError1.createUnableToParseTokenRequestCacheError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.code, BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.desc);
    };
    /**
     * Creates an error thrown when the token request could not be retrieved from the cache
     */ BrowserAuthError1.createNoTokenRequestCacheError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.noTokenRequestCacheError.code, BrowserAuthErrorMessage.noTokenRequestCacheError.desc);
    };
    /**
     * Creates an error thrown when handleCodeResponse is called before initiateAuthRequest (InteractionHandler)
     */ BrowserAuthError1.createAuthRequestNotSetError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.authRequestNotSet.code, BrowserAuthErrorMessage.authRequestNotSet.desc);
    };
    /**
     * Creates an error thrown when the authority could not be retrieved from the cache
     */ BrowserAuthError1.createNoCachedAuthorityError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.noCachedAuthorityError.code, BrowserAuthErrorMessage.noCachedAuthorityError.desc);
    };
    /**
     * Creates an error thrown if cache type is invalid.
     */ BrowserAuthError1.createInvalidCacheTypeError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.invalidCacheType.code, "" + BrowserAuthErrorMessage.invalidCacheType.desc);
    };
    /**
     * Create an error thrown when login and token requests are made from a non-browser environment
     */ BrowserAuthError1.createNonBrowserEnvironmentError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.notInBrowserEnvironment.code, BrowserAuthErrorMessage.notInBrowserEnvironment.desc);
    };
    /**
     * Create an error thrown when indexDB database is not open
     */ BrowserAuthError1.createDatabaseNotOpenError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.databaseNotOpen.code, BrowserAuthErrorMessage.databaseNotOpen.desc);
    };
    /**
     * Create an error thrown when token fetch fails due to no internet
     */ BrowserAuthError1.createNoNetworkConnectivityError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.noNetworkConnectivity.code, BrowserAuthErrorMessage.noNetworkConnectivity.desc);
    };
    /**
     * Create an error thrown when token fetch fails due to reasons other than internet connectivity
     */ BrowserAuthError1.createPostRequestFailedError = function(errorDesc, endpoint) {
        return new BrowserAuthError1(BrowserAuthErrorMessage.postRequestFailed.code, BrowserAuthErrorMessage.postRequestFailed.desc + " | Network client threw: " + errorDesc + " | Attempted to reach: " + endpoint.split("?")[0]);
    };
    /**
     * Create an error thrown when get request fails due to reasons other than internet connectivity
     */ BrowserAuthError1.createGetRequestFailedError = function(errorDesc, endpoint) {
        return new BrowserAuthError1(BrowserAuthErrorMessage.getRequestFailed.code, BrowserAuthErrorMessage.getRequestFailed.desc + " | Network client threw: " + errorDesc + " | Attempted to reach: " + endpoint.split("?")[0]);
    };
    /**
     * Create an error thrown when network client fails to parse network response
     */ BrowserAuthError1.createFailedToParseNetworkResponseError = function(endpoint) {
        return new BrowserAuthError1(BrowserAuthErrorMessage.failedToParseNetworkResponse.code, BrowserAuthErrorMessage.failedToParseNetworkResponse.desc + " | Attempted to reach: " + endpoint.split("?")[0]);
    };
    /**
     * Create an error thrown when the necessary information is not available to sideload tokens
     */ BrowserAuthError1.createUnableToLoadTokenError = function(errorDetail) {
        return new BrowserAuthError1(BrowserAuthErrorMessage.unableToLoadTokenError.code, BrowserAuthErrorMessage.unableToLoadTokenError.desc + " | " + errorDetail);
    };
    /**
     * Create an error thrown when the queried cryptographic key is not found in IndexedDB
     */ BrowserAuthError1.createSigningKeyNotFoundInStorageError = function(keyId) {
        return new BrowserAuthError1(BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code, BrowserAuthErrorMessage.signingKeyNotFoundInStorage.desc + " | No match found for KeyId: " + keyId);
    };
    /**
     * Create an error when an authorization code is required but not provided
     */ BrowserAuthError1.createAuthCodeRequiredError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.authCodeRequired.code, BrowserAuthErrorMessage.authCodeRequired.desc);
    };
    /**
     * Create an error when IndexedDB is unavailable
     */ BrowserAuthError1.createDatabaseUnavailableError = function() {
        return new BrowserAuthError1(BrowserAuthErrorMessage.databaseUnavailable.code, BrowserAuthErrorMessage.databaseUnavailable.desc);
    };
    return BrowserAuthError1;
}(_msalCommon.AuthError);

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eogaZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserCrypto", ()=>BrowserCrypto
);
var _tslibJs = require("../_virtual/_tslib.js");
var _browserStringUtilsJs = require("../utils/BrowserStringUtils.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams
 */ // RSA KeyGen Algorithm
var PKCS1_V15_KEYGEN_ALG = "RSASSA-PKCS1-v1_5";
// SHA-256 hashing algorithm
var S256_HASH_ALG = "SHA-256";
// MOD length for PoP tokens
var MODULUS_LENGTH = 2048;
// Public Exponent
var PUBLIC_EXPONENT = new Uint8Array([
    1,
    0,
    1
]);
/**
 * This class implements functions used by the browser library to perform cryptography operations such as
 * hashing and encoding. It also has helper functions to validate the availability of specific APIs.
 */ var BrowserCrypto = function() {
    function BrowserCrypto1(logger) {
        this.logger = logger;
        if (!this.hasCryptoAPI()) throw _browserAuthErrorJs.BrowserAuthError.createCryptoNotAvailableError("Browser crypto or msCrypto object not available.");
        this._keygenAlgorithmOptions = {
            name: PKCS1_V15_KEYGEN_ALG,
            hash: S256_HASH_ALG,
            modulusLength: MODULUS_LENGTH,
            publicExponent: PUBLIC_EXPONENT
        };
    }
    /**
     * Returns a sha-256 hash of the given dataString as an ArrayBuffer.
     * @param dataString
     */ BrowserCrypto1.prototype.sha256Digest = function(dataString) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var data;
            return _tslibJs.__generator(this, function(_a) {
                data = _browserStringUtilsJs.BrowserStringUtils.stringToUtf8Arr(dataString);
                return [
                    2 /*return*/ ,
                    this.hasIECrypto() ? this.getMSCryptoDigest(S256_HASH_ALG, data) : this.getSubtleCryptoDigest(S256_HASH_ALG, data)
                ];
            });
        });
    };
    /**
     * Populates buffer with cryptographically random values.
     * @param dataBuffer
     */ BrowserCrypto1.prototype.getRandomValues = function(dataBuffer) {
        var cryptoObj = window["msCrypto"] || window.crypto;
        if (!cryptoObj.getRandomValues) throw _browserAuthErrorJs.BrowserAuthError.createCryptoNotAvailableError("getRandomValues does not exist.");
        cryptoObj.getRandomValues(dataBuffer);
    };
    /**
     * Generates a keypair based on current keygen algorithm config.
     * @param extractable
     * @param usages
     */ BrowserCrypto1.prototype.generateKeyPair = function(extractable, usages) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.hasIECrypto() ? this.msCryptoGenerateKey(extractable, usages) : window.crypto.subtle.generateKey(this._keygenAlgorithmOptions, extractable, usages)
                ];
            });
        });
    };
    /**
     * Export key as Json Web Key (JWK)
     * @param key
     * @param format
     */ BrowserCrypto1.prototype.exportJwk = function(key) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.hasIECrypto() ? this.msCryptoExportJwk(key) : window.crypto.subtle.exportKey(_browserConstantsJs.KEY_FORMAT_JWK, key)
                ];
            });
        });
    };
    /**
     * Imports key as Json Web Key (JWK), can set extractable and usages.
     * @param key
     * @param format
     * @param extractable
     * @param usages
     */ BrowserCrypto1.prototype.importJwk = function(key, extractable, usages) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var keyString, keyBuffer;
            return _tslibJs.__generator(this, function(_a) {
                keyString = BrowserCrypto1.getJwkString(key);
                keyBuffer = _browserStringUtilsJs.BrowserStringUtils.stringToArrayBuffer(keyString);
                return [
                    2 /*return*/ ,
                    this.hasIECrypto() ? this.msCryptoImportKey(keyBuffer, extractable, usages) : window.crypto.subtle.importKey(_browserConstantsJs.KEY_FORMAT_JWK, key, this._keygenAlgorithmOptions, extractable, usages)
                ];
            });
        });
    };
    /**
     * Signs given data with given key
     * @param key
     * @param data
     */ BrowserCrypto1.prototype.sign = function(key, data) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.hasIECrypto() ? this.msCryptoSign(key, data) : window.crypto.subtle.sign(this._keygenAlgorithmOptions, key, data)
                ];
            });
        });
    };
    /**
     * Check whether IE crypto or other browser cryptography is available.
     */ BrowserCrypto1.prototype.hasCryptoAPI = function() {
        return this.hasIECrypto() || this.hasBrowserCrypto();
    };
    /**
     * Checks whether IE crypto (AKA msCrypto) is available.
     */ BrowserCrypto1.prototype.hasIECrypto = function() {
        return "msCrypto" in window;
    };
    /**
     * Check whether browser crypto is available.
     */ BrowserCrypto1.prototype.hasBrowserCrypto = function() {
        return "crypto" in window;
    };
    /**
     * Helper function for SHA digest.
     * @param algorithm
     * @param data
     */ BrowserCrypto1.prototype.getSubtleCryptoDigest = function(algorithm, data) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    window.crypto.subtle.digest(algorithm, data)
                ];
            });
        });
    };
    /**
     * IE Helper function for SHA digest.
     * @param algorithm
     * @param data
     */ BrowserCrypto1.prototype.getMSCryptoDigest = function(algorithm, data) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    new Promise(function(resolve, reject) {
                        var digestOperation = window["msCrypto"].subtle.digest(algorithm, data.buffer);
                        digestOperation.addEventListener("complete", function(e) {
                            resolve(e.target.result);
                        });
                        digestOperation.addEventListener("error", function(error) {
                            reject(error);
                        });
                    })
                ];
            });
        });
    };
    /**
     * IE Helper function for generating a keypair
     * @param extractable
     * @param usages
     */ BrowserCrypto1.prototype.msCryptoGenerateKey = function(extractable, usages) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    new Promise(function(resolve, reject) {
                        var msGenerateKey = window["msCrypto"].subtle.generateKey(_this._keygenAlgorithmOptions, extractable, usages);
                        msGenerateKey.addEventListener("complete", function(e) {
                            resolve(e.target.result);
                        });
                        msGenerateKey.addEventListener("error", function(error) {
                            reject(error);
                        });
                    })
                ];
            });
        });
    };
    /**
     * IE Helper function for exportKey
     * @param key
     * @param format
     */ BrowserCrypto1.prototype.msCryptoExportJwk = function(key) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    new Promise(function(resolve, reject) {
                        var msExportKey = window["msCrypto"].subtle.exportKey(_browserConstantsJs.KEY_FORMAT_JWK, key);
                        msExportKey.addEventListener("complete", function(e) {
                            var resultBuffer = e.target.result;
                            var resultString = _browserStringUtilsJs.BrowserStringUtils.utf8ArrToString(new Uint8Array(resultBuffer)).replace(/\r/g, "").replace(/\n/g, "").replace(/\t/g, "").split(" ").join("").replace("\u0000", "");
                            try {
                                resolve(JSON.parse(resultString));
                            } catch (e1) {
                                reject(e1);
                            }
                        });
                        msExportKey.addEventListener("error", function(error) {
                            reject(error);
                        });
                    })
                ];
            });
        });
    };
    /**
     * IE Helper function for importKey
     * @param key
     * @param format
     * @param extractable
     * @param usages
     */ BrowserCrypto1.prototype.msCryptoImportKey = function(keyBuffer, extractable, usages) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    new Promise(function(resolve, reject) {
                        var msImportKey = window["msCrypto"].subtle.importKey(_browserConstantsJs.KEY_FORMAT_JWK, keyBuffer, _this._keygenAlgorithmOptions, extractable, usages);
                        msImportKey.addEventListener("complete", function(e) {
                            resolve(e.target.result);
                        });
                        msImportKey.addEventListener("error", function(error) {
                            reject(error);
                        });
                    })
                ];
            });
        });
    };
    /**
     * IE Helper function for sign JWT
     * @param key
     * @param data
     */ BrowserCrypto1.prototype.msCryptoSign = function(key, data) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    new Promise(function(resolve, reject) {
                        var msSign = window["msCrypto"].subtle.sign(_this._keygenAlgorithmOptions, key, data);
                        msSign.addEventListener("complete", function(e) {
                            resolve(e.target.result);
                        });
                        msSign.addEventListener("error", function(error) {
                            reject(error);
                        });
                    })
                ];
            });
        });
    };
    /**
     * Returns stringified jwk.
     * @param jwk
     */ BrowserCrypto1.getJwkString = function(jwk) {
        return JSON.stringify(jwk, Object.keys(jwk).sort());
    };
    return BrowserCrypto1;
}();

},{"../_virtual/_tslib.js":"fxaLV","../utils/BrowserStringUtils.js":"38WJp","../error/BrowserAuthError.js":"1rUUr","../utils/BrowserConstants.js":"kJnIX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ab912":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AsyncMemoryStorage", ()=>AsyncMemoryStorage
);
var _tslibJs = require("../_virtual/_tslib.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _databaseStorageJs = require("./DatabaseStorage.js");
var _memoryStorageJs = require("./MemoryStorage.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,
 * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.
 */ var AsyncMemoryStorage = function() {
    function AsyncMemoryStorage1(logger) {
        this.inMemoryCache = new _memoryStorageJs.MemoryStorage();
        this.indexedDBCache = new _databaseStorageJs.DatabaseStorage();
        this.logger = logger;
    }
    AsyncMemoryStorage1.prototype.handleDatabaseAccessError = function(error) {
        if (error instanceof _browserAuthErrorJs.BrowserAuthError && error.errorCode === _browserAuthErrorJs.BrowserAuthErrorMessage.databaseUnavailable.code) this.logger.error("Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.");
    };
    /**
     * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous
     * storage object if item isn't found in-memory.
     * @param key
     */ AsyncMemoryStorage1.prototype.getItem = function(key) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var item, e_1;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        item = this.inMemoryCache.getItem(key);
                        if (!!item) return [
                            3 /*break*/ ,
                            4
                        ];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        this.logger.verbose("Queried item not found in in-memory cache, now querying persistent storage.");
                        return [
                            4 /*yield*/ ,
                            this.indexedDBCache.getItem(key)
                        ];
                    case 2:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                    case 3:
                        e_1 = _a.sent();
                        this.handleDatabaseAccessError(e_1);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ ,
                            item
                        ];
                }
            });
        });
    };
    /**
     * Sets the item in the in-memory cache and then tries to set it in the asynchronous
     * storage object with the given key.
     * @param key
     * @param value
     */ AsyncMemoryStorage1.prototype.setItem = function(key, value) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var e_2;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.inMemoryCache.setItem(key, value);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.indexedDBCache.setItem(key, value)
                        ];
                    case 2:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        e_2 = _a.sent();
                        this.handleDatabaseAccessError(e_2);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.
     * @param key
     */ AsyncMemoryStorage1.prototype.removeItem = function(key) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var e_3;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.inMemoryCache.removeItem(key);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.indexedDBCache.removeItem(key)
                        ];
                    case 2:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        e_3 = _a.sent();
                        this.handleDatabaseAccessError(e_3);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the
     * asynchronous storage object.
     */ AsyncMemoryStorage1.prototype.getKeys = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var cacheKeys, e_4;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        cacheKeys = this.inMemoryCache.getKeys();
                        if (!(cacheKeys.length === 0)) return [
                            3 /*break*/ ,
                            4
                        ];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        this.logger.verbose("In-memory cache is empty, now querying persistent storage.");
                        return [
                            4 /*yield*/ ,
                            this.indexedDBCache.getKeys()
                        ];
                    case 2:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                    case 3:
                        e_4 = _a.sent();
                        this.handleDatabaseAccessError(e_4);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ ,
                            cacheKeys
                        ];
                }
            });
        });
    };
    /**
     * Returns true or false if the given key is present in the cache.
     * @param key
     */ AsyncMemoryStorage1.prototype.containsKey = function(key) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var containsKey, e_5;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        containsKey = this.inMemoryCache.containsKey(key);
                        if (!!containsKey) return [
                            3 /*break*/ ,
                            4
                        ];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        this.logger.verbose("Key not found in in-memory cache, now querying persistent storage.");
                        return [
                            4 /*yield*/ ,
                            this.indexedDBCache.containsKey(key)
                        ];
                    case 2:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                    case 3:
                        e_5 = _a.sent();
                        this.handleDatabaseAccessError(e_5);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ ,
                            containsKey
                        ];
                }
            });
        });
    };
    /**
     * Clears in-memory Map and tries to delete the IndexedDB database.
     */ AsyncMemoryStorage1.prototype.clear = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var e_6;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.inMemoryCache.clear();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.indexedDBCache.deleteDatabase()
                        ];
                    case 2:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        e_6 = _a.sent();
                        this.handleDatabaseAccessError(e_6);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    return AsyncMemoryStorage1;
}();

},{"../_virtual/_tslib.js":"fxaLV","../error/BrowserAuthError.js":"1rUUr","./DatabaseStorage.js":"jxvEO","./MemoryStorage.js":"bsBIh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jxvEO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DatabaseStorage", ()=>DatabaseStorage
);
var _tslibJs = require("../_virtual/_tslib.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API
 */ var DatabaseStorage = function() {
    function DatabaseStorage1() {
        this.dbName = _browserConstantsJs.DB_NAME;
        this.version = _browserConstantsJs.DB_VERSION;
        this.tableName = _browserConstantsJs.DB_TABLE_NAME;
        this.dbOpen = false;
    }
    /**
     * Opens IndexedDB instance.
     */ DatabaseStorage1.prototype.open = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    new Promise(function(resolve, reject) {
                        var openDB = window.indexedDB.open(_this.dbName, _this.version);
                        openDB.addEventListener("upgradeneeded", function(e) {
                            var event = e;
                            event.target.result.createObjectStore(_this.tableName);
                        });
                        openDB.addEventListener("success", function(e) {
                            var event = e;
                            _this.db = event.target.result;
                            _this.dbOpen = true;
                            resolve();
                        });
                        openDB.addEventListener("error", function() {
                            return reject(_browserAuthErrorJs.BrowserAuthError.createDatabaseUnavailableError());
                        });
                    })
                ];
            });
        });
    };
    /**
     * Opens database if it's not already open
     */ DatabaseStorage1.prototype.validateDbIsOpen = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!!this.dbOpen) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            this.open()
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                    case 2:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Retrieves item from IndexedDB instance.
     * @param key
     */ DatabaseStorage1.prototype.getItem = function(key) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.validateDbIsOpen()
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            new Promise(function(resolve, reject) {
                                // TODO: Add timeouts?
                                if (!_this.db) return reject(_browserAuthErrorJs.BrowserAuthError.createDatabaseNotOpenError());
                                var transaction = _this.db.transaction([
                                    _this.tableName
                                ], "readonly");
                                var objectStore = transaction.objectStore(_this.tableName);
                                var dbGet = objectStore.get(key);
                                dbGet.addEventListener("success", function(e) {
                                    var event = e;
                                    resolve(event.target.result);
                                });
                                dbGet.addEventListener("error", function(e) {
                                    return reject(e);
                                });
                            })
                        ];
                }
            });
        });
    };
    /**
     * Adds item to IndexedDB under given key
     * @param key
     * @param payload
     */ DatabaseStorage1.prototype.setItem = function(key, payload) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.validateDbIsOpen()
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            new Promise(function(resolve, reject) {
                                // TODO: Add timeouts?
                                if (!_this.db) return reject(_browserAuthErrorJs.BrowserAuthError.createDatabaseNotOpenError());
                                var transaction = _this.db.transaction([
                                    _this.tableName
                                ], "readwrite");
                                var objectStore = transaction.objectStore(_this.tableName);
                                var dbPut = objectStore.put(payload, key);
                                dbPut.addEventListener("success", function() {
                                    return resolve();
                                });
                                dbPut.addEventListener("error", function(e) {
                                    return reject(e);
                                });
                            })
                        ];
                }
            });
        });
    };
    /**
     * Removes item from IndexedDB under given key
     * @param key
     */ DatabaseStorage1.prototype.removeItem = function(key) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.validateDbIsOpen()
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            new Promise(function(resolve, reject) {
                                if (!_this.db) return reject(_browserAuthErrorJs.BrowserAuthError.createDatabaseNotOpenError());
                                var transaction = _this.db.transaction([
                                    _this.tableName
                                ], "readwrite");
                                var objectStore = transaction.objectStore(_this.tableName);
                                var dbDelete = objectStore.delete(key);
                                dbDelete.addEventListener("success", function() {
                                    return resolve();
                                });
                                dbDelete.addEventListener("error", function(e) {
                                    return reject(e);
                                });
                            })
                        ];
                }
            });
        });
    };
    /**
     * Get all the keys from the storage object as an iterable array of strings.
     */ DatabaseStorage1.prototype.getKeys = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.validateDbIsOpen()
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            new Promise(function(resolve, reject) {
                                if (!_this.db) return reject(_browserAuthErrorJs.BrowserAuthError.createDatabaseNotOpenError());
                                var transaction = _this.db.transaction([
                                    _this.tableName
                                ], "readonly");
                                var objectStore = transaction.objectStore(_this.tableName);
                                var dbGetKeys = objectStore.getAllKeys();
                                dbGetKeys.addEventListener("success", function(e) {
                                    var event = e;
                                    resolve(event.target.result);
                                });
                                dbGetKeys.addEventListener("error", function(e) {
                                    return reject(e);
                                });
                            })
                        ];
                }
            });
        });
    };
    /**
     *
     * Checks whether there is an object under the search key in the object store
     */ DatabaseStorage1.prototype.containsKey = function(key) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.validateDbIsOpen()
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            new Promise(function(resolve, reject) {
                                if (!_this.db) return reject(_browserAuthErrorJs.BrowserAuthError.createDatabaseNotOpenError());
                                var transaction = _this.db.transaction([
                                    _this.tableName
                                ], "readonly");
                                var objectStore = transaction.objectStore(_this.tableName);
                                var dbContainsKey = objectStore.count(key);
                                dbContainsKey.addEventListener("success", function(e) {
                                    var event = e;
                                    resolve(event.target.result === 1);
                                });
                                dbContainsKey.addEventListener("error", function(e) {
                                    return reject(e);
                                });
                            })
                        ];
                }
            });
        });
    };
    /**
     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible
     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues
     * with IndexedDB database versions.
     */ DatabaseStorage1.prototype.deleteDatabase = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    new Promise(function(resolve, reject) {
                        var deleteDbRequest = window.indexedDB.deleteDatabase(_browserConstantsJs.DB_NAME);
                        deleteDbRequest.addEventListener("success", function() {
                            return resolve(true);
                        });
                        deleteDbRequest.addEventListener("error", function() {
                            return reject(false);
                        });
                    })
                ];
            });
        });
    };
    return DatabaseStorage1;
}();

},{"../_virtual/_tslib.js":"fxaLV","../error/BrowserAuthError.js":"1rUUr","../utils/BrowserConstants.js":"kJnIX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bsBIh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MemoryStorage", ()=>MemoryStorage
);
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var MemoryStorage = function() {
    function MemoryStorage1() {
        this.cache = new Map();
    }
    MemoryStorage1.prototype.getItem = function(key) {
        return this.cache.get(key) || null;
    };
    MemoryStorage1.prototype.setItem = function(key, value) {
        this.cache.set(key, value);
    };
    MemoryStorage1.prototype.removeItem = function(key) {
        this.cache.delete(key);
    };
    MemoryStorage1.prototype.getKeys = function() {
        var cacheKeys = [];
        this.cache.forEach(function(value, key) {
            cacheKeys.push(key);
        });
        return cacheKeys;
    };
    MemoryStorage1.prototype.containsKey = function(key) {
        return this.cache.has(key);
    };
    MemoryStorage1.prototype.clear = function() {
        this.cache.clear();
    };
    return MemoryStorage1;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k1P3K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserCacheManager", ()=>BrowserCacheManager
);
parcelHelpers.export(exports, "DEFAULT_BROWSER_CACHE_MANAGER", ()=>DEFAULT_BROWSER_CACHE_MANAGER
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _browserStorageJs = require("./BrowserStorage.js");
var _memoryStorageJs = require("./MemoryStorage.js");
var _browserProtocolUtilsJs = require("../utils/BrowserProtocolUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class implements the cache storage interface for MSAL through browser local or session storage.
 * Cookies are only used if storeAuthStateInCookie is true, and are only used for
 * parameters such as state and nonce, generally.
 */ var BrowserCacheManager = function(_super) {
    _tslibJs.__extends(BrowserCacheManager1, _super);
    function BrowserCacheManager1(clientId, cacheConfig, cryptoImpl, logger) {
        var _this = _super.call(this, clientId, cryptoImpl) || this;
        // Cookie life calculation (hours * minutes * seconds * ms)
        _this.COOKIE_LIFE_MULTIPLIER = 86400000;
        _this.cacheConfig = cacheConfig;
        _this.logger = logger;
        _this.internalStorage = new _memoryStorageJs.MemoryStorage();
        _this.browserStorage = _this.setupBrowserStorage(_this.cacheConfig.cacheLocation);
        _this.temporaryCacheStorage = _this.setupTemporaryCacheStorage(_this.cacheConfig.cacheLocation);
        // Migrate any cache entries from older versions of MSAL.
        _this.migrateCacheEntries();
        return _this;
    }
    /**
     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.
     * @param cacheLocation
     */ BrowserCacheManager1.prototype.setupBrowserStorage = function(cacheLocation) {
        switch(cacheLocation){
            case _browserConstantsJs.BrowserCacheLocation.LocalStorage:
            case _browserConstantsJs.BrowserCacheLocation.SessionStorage:
                try {
                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs
                    return new _browserStorageJs.BrowserStorage(cacheLocation);
                } catch (e) {
                    this.logger.verbose(e);
                    break;
                }
        }
        this.cacheConfig.cacheLocation = _browserConstantsJs.BrowserCacheLocation.MemoryStorage;
        return new _memoryStorageJs.MemoryStorage();
    };
    /**
     *
     * @param cacheLocation
     */ BrowserCacheManager1.prototype.setupTemporaryCacheStorage = function(cacheLocation) {
        switch(cacheLocation){
            case _browserConstantsJs.BrowserCacheLocation.LocalStorage:
            case _browserConstantsJs.BrowserCacheLocation.SessionStorage:
                try {
                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs
                    return new _browserStorageJs.BrowserStorage(_browserConstantsJs.BrowserCacheLocation.SessionStorage);
                } catch (e) {
                    this.logger.verbose(e);
                    return this.internalStorage;
                }
            case _browserConstantsJs.BrowserCacheLocation.MemoryStorage:
            default:
                return this.internalStorage;
        }
    };
    /**
     * Migrate all old cache entries to new schema. No rollback supported.
     * @param storeAuthStateInCookie
     */ BrowserCacheManager1.prototype.migrateCacheEntries = function() {
        var _this = this;
        var idTokenKey = _msalCommon.Constants.CACHE_PREFIX + "." + _msalCommon.PersistentCacheKeys.ID_TOKEN;
        var clientInfoKey = _msalCommon.Constants.CACHE_PREFIX + "." + _msalCommon.PersistentCacheKeys.CLIENT_INFO;
        var errorKey = _msalCommon.Constants.CACHE_PREFIX + "." + _msalCommon.PersistentCacheKeys.ERROR;
        var errorDescKey = _msalCommon.Constants.CACHE_PREFIX + "." + _msalCommon.PersistentCacheKeys.ERROR_DESC;
        var idTokenValue = this.browserStorage.getItem(idTokenKey);
        var clientInfoValue = this.browserStorage.getItem(clientInfoKey);
        var errorValue = this.browserStorage.getItem(errorKey);
        var errorDescValue = this.browserStorage.getItem(errorDescKey);
        var values = [
            idTokenValue,
            clientInfoValue,
            errorValue,
            errorDescValue
        ];
        var keysToMigrate = [
            _msalCommon.PersistentCacheKeys.ID_TOKEN,
            _msalCommon.PersistentCacheKeys.CLIENT_INFO,
            _msalCommon.PersistentCacheKeys.ERROR,
            _msalCommon.PersistentCacheKeys.ERROR_DESC
        ];
        keysToMigrate.forEach(function(cacheKey, index) {
            return _this.migrateCacheEntry(cacheKey, values[index]);
        });
    };
    /**
     * Utility function to help with migration.
     * @param newKey
     * @param value
     * @param storeAuthStateInCookie
     */ BrowserCacheManager1.prototype.migrateCacheEntry = function(newKey, value) {
        if (value) this.setTemporaryCache(newKey, value, true);
    };
    /**
     * Parses passed value as JSON object, JSON.parse() will throw an error.
     * @param input
     */ BrowserCacheManager1.prototype.validateAndParseJson = function(jsonValue) {
        try {
            var parsedJson = JSON.parse(jsonValue);
            /**
             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object
             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check
             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.
             *
             */ return parsedJson && typeof parsedJson === "object" ? parsedJson : null;
        } catch (error) {
            return null;
        }
    };
    /**
     * fetches the entry from the browser storage based off the key
     * @param key
     */ BrowserCacheManager1.prototype.getItem = function(key) {
        return this.browserStorage.getItem(key);
    };
    /**
     * sets the entry in the browser storage
     * @param key
     * @param value
     */ BrowserCacheManager1.prototype.setItem = function(key, value) {
        this.browserStorage.setItem(key, value);
    };
    /**
     * fetch the account entity from the platform cache
     * @param accountKey
     */ BrowserCacheManager1.prototype.getAccount = function(accountKey) {
        var account = this.getItem(accountKey);
        if (!account) return null;
        var parsedAccount = this.validateAndParseJson(account);
        if (!parsedAccount || !_msalCommon.AccountEntity.isAccountEntity(parsedAccount)) return null;
        return _msalCommon.CacheManager.toObject(new _msalCommon.AccountEntity(), parsedAccount);
    };
    /**
     * set account entity in the platform cache
     * @param key
     * @param value
     */ BrowserCacheManager1.prototype.setAccount = function(account) {
        this.logger.trace("BrowserCacheManager.setAccount called");
        var key = account.generateAccountKey();
        this.setItem(key, JSON.stringify(account));
    };
    /**
     * generates idToken entity from a string
     * @param idTokenKey
     */ BrowserCacheManager1.prototype.getIdTokenCredential = function(idTokenKey) {
        var value = this.getItem(idTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit");
            return null;
        }
        var parsedIdToken = this.validateAndParseJson(value);
        if (!parsedIdToken || !_msalCommon.IdTokenEntity.isIdTokenEntity(parsedIdToken)) {
            this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getIdTokenCredential: cache hit");
        return _msalCommon.CacheManager.toObject(new _msalCommon.IdTokenEntity(), parsedIdToken);
    };
    /**
     * set IdToken credential to the platform cache
     * @param idToken
     */ BrowserCacheManager1.prototype.setIdTokenCredential = function(idToken) {
        this.logger.trace("BrowserCacheManager.setIdTokenCredential called");
        var idTokenKey = idToken.generateCredentialKey();
        this.setItem(idTokenKey, JSON.stringify(idToken));
    };
    /**
     * generates accessToken entity from a string
     * @param key
     */ BrowserCacheManager1.prototype.getAccessTokenCredential = function(accessTokenKey) {
        var value = this.getItem(accessTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit");
            return null;
        }
        var parsedAccessToken = this.validateAndParseJson(value);
        if (!parsedAccessToken || !_msalCommon.AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {
            this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getAccessTokenCredential: cache hit");
        return _msalCommon.CacheManager.toObject(new _msalCommon.AccessTokenEntity(), parsedAccessToken);
    };
    /**
     * set accessToken credential to the platform cache
     * @param accessToken
     */ BrowserCacheManager1.prototype.setAccessTokenCredential = function(accessToken) {
        this.logger.trace("BrowserCacheManager.setAccessTokenCredential called");
        var accessTokenKey = accessToken.generateCredentialKey();
        this.setItem(accessTokenKey, JSON.stringify(accessToken));
    };
    /**
     * generates refreshToken entity from a string
     * @param refreshTokenKey
     */ BrowserCacheManager1.prototype.getRefreshTokenCredential = function(refreshTokenKey) {
        var value = this.getItem(refreshTokenKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit");
            return null;
        }
        var parsedRefreshToken = this.validateAndParseJson(value);
        if (!parsedRefreshToken || !_msalCommon.RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {
            this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: cache hit");
        return _msalCommon.CacheManager.toObject(new _msalCommon.RefreshTokenEntity(), parsedRefreshToken);
    };
    /**
     * set refreshToken credential to the platform cache
     * @param refreshToken
     */ BrowserCacheManager1.prototype.setRefreshTokenCredential = function(refreshToken) {
        this.logger.trace("BrowserCacheManager.setRefreshTokenCredential called");
        var refreshTokenKey = refreshToken.generateCredentialKey();
        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));
    };
    /**
     * fetch appMetadata entity from the platform cache
     * @param appMetadataKey
     */ BrowserCacheManager1.prototype.getAppMetadata = function(appMetadataKey) {
        var value = this.getItem(appMetadataKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit");
            return null;
        }
        var parsedMetadata = this.validateAndParseJson(value);
        if (!parsedMetadata || !_msalCommon.AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {
            this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getAppMetadata: cache hit");
        return _msalCommon.CacheManager.toObject(new _msalCommon.AppMetadataEntity(), parsedMetadata);
    };
    /**
     * set appMetadata entity to the platform cache
     * @param appMetadata
     */ BrowserCacheManager1.prototype.setAppMetadata = function(appMetadata) {
        this.logger.trace("BrowserCacheManager.setAppMetadata called");
        var appMetadataKey = appMetadata.generateAppMetadataKey();
        this.setItem(appMetadataKey, JSON.stringify(appMetadata));
    };
    /**
     * fetch server telemetry entity from the platform cache
     * @param serverTelemetryKey
     */ BrowserCacheManager1.prototype.getServerTelemetry = function(serverTelemetryKey) {
        var value = this.getItem(serverTelemetryKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit");
            return null;
        }
        var parsedMetadata = this.validateAndParseJson(value);
        if (!parsedMetadata || !_msalCommon.ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {
            this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getServerTelemetry: cache hit");
        return _msalCommon.CacheManager.toObject(new _msalCommon.ServerTelemetryEntity(), parsedMetadata);
    };
    /**
     * set server telemetry entity to the platform cache
     * @param serverTelemetryKey
     * @param serverTelemetry
     */ BrowserCacheManager1.prototype.setServerTelemetry = function(serverTelemetryKey, serverTelemetry) {
        this.logger.trace("BrowserCacheManager.setServerTelemetry called");
        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));
    };
    /**
     *
     */ BrowserCacheManager1.prototype.getAuthorityMetadata = function(key) {
        var value = this.internalStorage.getItem(key);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getAuthorityMetadata: called, no cache hit");
            return null;
        }
        var parsedMetadata = this.validateAndParseJson(value);
        if (parsedMetadata && _msalCommon.AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {
            this.logger.trace("BrowserCacheManager.getAuthorityMetadata: cache hit");
            return _msalCommon.CacheManager.toObject(new _msalCommon.AuthorityMetadataEntity(), parsedMetadata);
        }
        return null;
    };
    /**
     *
     */ BrowserCacheManager1.prototype.getAuthorityMetadataKeys = function() {
        var _this = this;
        var allKeys = this.internalStorage.getKeys();
        return allKeys.filter(function(key) {
            return _this.isAuthorityMetadata(key);
        });
    };
    /**
     * Sets wrapper metadata in memory
     * @param wrapperSKU
     * @param wrapperVersion
     */ BrowserCacheManager1.prototype.setWrapperMetadata = function(wrapperSKU, wrapperVersion) {
        this.internalStorage.setItem(_browserConstantsJs.InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);
        this.internalStorage.setItem(_browserConstantsJs.InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);
    };
    /**
     * Returns wrapper metadata from in-memory storage
     */ BrowserCacheManager1.prototype.getWrapperMetadata = function() {
        var sku = this.internalStorage.getItem(_browserConstantsJs.InMemoryCacheKeys.WRAPPER_SKU) || "";
        var version = this.internalStorage.getItem(_browserConstantsJs.InMemoryCacheKeys.WRAPPER_VER) || "";
        return [
            sku,
            version
        ];
    };
    /**
     *
     * @param entity
     */ BrowserCacheManager1.prototype.setAuthorityMetadata = function(key, entity) {
        this.logger.trace("BrowserCacheManager.setAuthorityMetadata called");
        this.internalStorage.setItem(key, JSON.stringify(entity));
    };
    /**
     * Gets the active account
     */ BrowserCacheManager1.prototype.getActiveAccount = function() {
        var activeAccountIdKey = this.generateCacheKey(_msalCommon.PersistentCacheKeys.ACTIVE_ACCOUNT);
        var activeAccountId = this.browserStorage.getItem(activeAccountIdKey);
        if (!activeAccountId) return null;
        return this.getAccountInfoByFilter({
            localAccountId: activeAccountId
        })[0] || null;
    };
    /**
     * Sets the active account's localAccountId in cache
     * @param account
     */ BrowserCacheManager1.prototype.setActiveAccount = function(account) {
        var activeAccountIdKey = this.generateCacheKey(_msalCommon.PersistentCacheKeys.ACTIVE_ACCOUNT);
        if (account) {
            this.logger.verbose("setActiveAccount: Active account set");
            this.browserStorage.setItem(activeAccountIdKey, account.localAccountId);
        } else {
            this.logger.verbose("setActiveAccount: No account passed, active account not set");
            this.browserStorage.removeItem(activeAccountIdKey);
        }
    };
    /**
     * Gets a list of accounts that match all of the filters provided
     * @param account
     */ BrowserCacheManager1.prototype.getAccountInfoByFilter = function(accountFilter) {
        var allAccounts = this.getAllAccounts();
        return allAccounts.filter(function(accountObj) {
            if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) return false;
            if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) return false;
            if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) return false;
            if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) return false;
            if (accountFilter.environment && accountFilter.environment !== accountObj.environment) return false;
            return true;
        });
    };
    /**
     * fetch throttling entity from the platform cache
     * @param throttlingCacheKey
     */ BrowserCacheManager1.prototype.getThrottlingCache = function(throttlingCacheKey) {
        var value = this.getItem(throttlingCacheKey);
        if (!value) {
            this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit");
            return null;
        }
        var parsedThrottlingCache = this.validateAndParseJson(value);
        if (!parsedThrottlingCache || !_msalCommon.ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {
            this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getThrottlingCache: cache hit");
        return _msalCommon.CacheManager.toObject(new _msalCommon.ThrottlingEntity(), parsedThrottlingCache);
    };
    /**
     * set throttling entity to the platform cache
     * @param throttlingCacheKey
     * @param throttlingCache
     */ BrowserCacheManager1.prototype.setThrottlingCache = function(throttlingCacheKey, throttlingCache) {
        this.logger.trace("BrowserCacheManager.setThrottlingCache called");
        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));
    };
    /**
     * Gets cache item with given key.
     * Will retrieve from cookies if storeAuthStateInCookie is set to true.
     * @param key
     */ BrowserCacheManager1.prototype.getTemporaryCache = function(cacheKey, generateKey) {
        var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;
        if (this.cacheConfig.storeAuthStateInCookie) {
            var itemCookie = this.getItemCookie(key);
            if (itemCookie) {
                this.logger.trace("BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies");
                return itemCookie;
            }
        }
        var value = this.temporaryCacheStorage.getItem(key);
        if (!value) {
            // If temp cache item not found in session/memory, check local storage for items set by old versions
            if (this.cacheConfig.cacheLocation === _browserConstantsJs.BrowserCacheLocation.LocalStorage) {
                var item = this.browserStorage.getItem(key);
                if (item) {
                    this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage");
                    return item;
                }
            }
            this.logger.trace("BrowserCacheManager.getTemporaryCache: No cache item found in local storage");
            return null;
        }
        this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item returned");
        return value;
    };
    /**
     * Sets the cache item with the key and value given.
     * Stores in cookie if storeAuthStateInCookie is set to true.
     * This can cause cookie overflow if used incorrectly.
     * @param key
     * @param value
     */ BrowserCacheManager1.prototype.setTemporaryCache = function(cacheKey, value, generateKey) {
        var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;
        this.temporaryCacheStorage.setItem(key, value);
        if (this.cacheConfig.storeAuthStateInCookie) {
            this.logger.trace("BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie");
            this.setItemCookie(key, value);
        }
    };
    /**
     * Removes the cache item with the given key.
     * Will also clear the cookie item if storeAuthStateInCookie is set to true.
     * @param key
     */ BrowserCacheManager1.prototype.removeItem = function(key) {
        this.browserStorage.removeItem(key);
        this.temporaryCacheStorage.removeItem(key);
        if (this.cacheConfig.storeAuthStateInCookie) {
            this.logger.trace("BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie");
            this.clearItemCookie(key);
        }
        return true;
    };
    /**
     * Checks whether key is in cache.
     * @param key
     */ BrowserCacheManager1.prototype.containsKey = function(key) {
        return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);
    };
    /**
     * Gets all keys in window.
     */ BrowserCacheManager1.prototype.getKeys = function() {
        return _tslibJs.__spread(this.browserStorage.getKeys(), this.temporaryCacheStorage.getKeys());
    };
    /**
     * Clears all cache entries created by MSAL.
     */ BrowserCacheManager1.prototype.clear = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        // Removes all accounts and their credentials
                        return [
                            4 /*yield*/ ,
                            this.removeAllAccounts()
                        ];
                    case 1:
                        // Removes all accounts and their credentials
                        _a.sent();
                        this.removeAppMetadata();
                        // Removes all remaining MSAL cache items
                        this.getKeys().forEach(function(cacheKey) {
                            // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js
                            if ((_this.browserStorage.containsKey(cacheKey) || _this.temporaryCacheStorage.containsKey(cacheKey)) && (cacheKey.indexOf(_msalCommon.Constants.CACHE_PREFIX) !== -1 || cacheKey.indexOf(_this.clientId) !== -1)) _this.removeItem(cacheKey);
                        });
                        this.internalStorage.clear();
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Add value to cookies
     * @param cookieName
     * @param cookieValue
     * @param expires
     */ BrowserCacheManager1.prototype.setItemCookie = function(cookieName, cookieValue, expires) {
        var cookieStr = encodeURIComponent(cookieName) + "=" + encodeURIComponent(cookieValue) + ";path=/;";
        if (expires) {
            var expireTime = this.getCookieExpirationTime(expires);
            cookieStr += "expires=" + expireTime + ";";
        }
        if (this.cacheConfig.secureCookies) cookieStr += "Secure;";
        document.cookie = cookieStr;
    };
    /**
     * Get one item by key from cookies
     * @param cookieName
     */ BrowserCacheManager1.prototype.getItemCookie = function(cookieName) {
        var name = encodeURIComponent(cookieName) + "=";
        var cookieList = document.cookie.split(";");
        for(var i = 0; i < cookieList.length; i++){
            var cookie = cookieList[i];
            while(cookie.charAt(0) === " ")cookie = cookie.substring(1);
            if (cookie.indexOf(name) === 0) return decodeURIComponent(cookie.substring(name.length, cookie.length));
        }
        return "";
    };
    /**
     * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.
     */ BrowserCacheManager1.prototype.clearMsalCookies = function() {
        var _this = this;
        var cookiePrefix = _msalCommon.Constants.CACHE_PREFIX + "." + this.clientId;
        var cookieList = document.cookie.split(";");
        cookieList.forEach(function(cookie) {
            while(cookie.charAt(0) === " ")// eslint-disable-next-line no-param-reassign
            cookie = cookie.substring(1);
            if (cookie.indexOf(cookiePrefix) === 0) {
                var cookieKey = cookie.split("=")[0];
                _this.clearItemCookie(cookieKey);
            }
        });
    };
    /**
     * Clear an item in the cookies by key
     * @param cookieName
     */ BrowserCacheManager1.prototype.clearItemCookie = function(cookieName) {
        this.setItemCookie(cookieName, "", -1);
    };
    /**
     * Get cookie expiration time
     * @param cookieLifeDays
     */ BrowserCacheManager1.prototype.getCookieExpirationTime = function(cookieLifeDays) {
        var today = new Date();
        var expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);
        return expr.toUTCString();
    };
    /**
     * Gets the cache object referenced by the browser
     */ BrowserCacheManager1.prototype.getCache = function() {
        return this.browserStorage;
    };
    /**
     * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser
     */ BrowserCacheManager1.prototype.setCache = function() {
    // sets nothing
    };
    /**
     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)
     * @param key
     * @param addInstanceId
     */ BrowserCacheManager1.prototype.generateCacheKey = function(key) {
        var generatedKey = this.validateAndParseJson(key);
        if (!generatedKey) {
            if (_msalCommon.StringUtils.startsWith(key, _msalCommon.Constants.CACHE_PREFIX) || _msalCommon.StringUtils.startsWith(key, _msalCommon.PersistentCacheKeys.ADAL_ID_TOKEN)) return key;
            return _msalCommon.Constants.CACHE_PREFIX + "." + this.clientId + "." + key;
        }
        return JSON.stringify(key);
    };
    /**
     * Create authorityKey to cache authority
     * @param state
     */ BrowserCacheManager1.prototype.generateAuthorityKey = function(stateString) {
        var stateId = _msalCommon.ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
        return this.generateCacheKey(_browserConstantsJs.TemporaryCacheKeys.AUTHORITY + "." + stateId);
    };
    /**
     * Create Nonce key to cache nonce
     * @param state
     */ BrowserCacheManager1.prototype.generateNonceKey = function(stateString) {
        var stateId = _msalCommon.ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
        return this.generateCacheKey(_browserConstantsJs.TemporaryCacheKeys.NONCE_IDTOKEN + "." + stateId);
    };
    /**
     * Creates full cache key for the request state
     * @param stateString State string for the request
     */ BrowserCacheManager1.prototype.generateStateKey = function(stateString) {
        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests
        var stateId = _msalCommon.ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
        return this.generateCacheKey(_browserConstantsJs.TemporaryCacheKeys.REQUEST_STATE + "." + stateId);
    };
    /**
     * Gets the cached authority based on the cached state. Returns empty if no cached state found.
     */ BrowserCacheManager1.prototype.getCachedAuthority = function(cachedState) {
        var stateCacheKey = this.generateStateKey(cachedState);
        var state = this.getTemporaryCache(stateCacheKey);
        if (!state) return null;
        var authorityCacheKey = this.generateAuthorityKey(state);
        return this.getTemporaryCache(authorityCacheKey);
    };
    /**
     * Updates account, authority, and state in cache
     * @param serverAuthenticationRequest
     * @param account
     */ BrowserCacheManager1.prototype.updateCacheEntries = function(state, nonce, authorityInstance, loginHint, account) {
        this.logger.trace("BrowserCacheManager.updateCacheEntries called");
        // Cache the request state
        var stateCacheKey = this.generateStateKey(state);
        this.setTemporaryCache(stateCacheKey, state, false);
        // Cache the nonce
        var nonceCacheKey = this.generateNonceKey(state);
        this.setTemporaryCache(nonceCacheKey, nonce, false);
        // Cache authorityKey
        var authorityCacheKey = this.generateAuthorityKey(state);
        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);
        if (account) {
            var ccsCredential = {
                credential: account.homeAccountId,
                type: _msalCommon.CcsCredentialType.HOME_ACCOUNT_ID
            };
            this.setTemporaryCache(_browserConstantsJs.TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);
        } else if (!_msalCommon.StringUtils.isEmpty(loginHint)) {
            var ccsCredential = {
                credential: loginHint,
                type: _msalCommon.CcsCredentialType.UPN
            };
            this.setTemporaryCache(_browserConstantsJs.TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);
        }
    };
    /**
     * Reset all temporary cache items
     * @param state
     */ BrowserCacheManager1.prototype.resetRequestCache = function(state) {
        var _this = this;
        this.logger.trace("BrowserCacheManager.resetRequestCache called");
        // check state and remove associated cache items
        if (!_msalCommon.StringUtils.isEmpty(state)) this.getKeys().forEach(function(key) {
            if (key.indexOf(state) !== -1) _this.removeItem(key);
        });
        // delete generic interactive request parameters
        if (state) {
            this.removeItem(this.generateStateKey(state));
            this.removeItem(this.generateNonceKey(state));
            this.removeItem(this.generateAuthorityKey(state));
        }
        this.removeItem(this.generateCacheKey(_browserConstantsJs.TemporaryCacheKeys.REQUEST_PARAMS));
        this.removeItem(this.generateCacheKey(_browserConstantsJs.TemporaryCacheKeys.ORIGIN_URI));
        this.removeItem(this.generateCacheKey(_browserConstantsJs.TemporaryCacheKeys.URL_HASH));
        this.removeItem(this.generateCacheKey(_browserConstantsJs.TemporaryCacheKeys.CORRELATION_ID));
        this.removeItem(this.generateCacheKey(_browserConstantsJs.TemporaryCacheKeys.CCS_CREDENTIAL));
        this.setInteractionInProgress(false);
    };
    /**
     * Removes temporary cache for the provided state
     * @param stateString
     */ BrowserCacheManager1.prototype.cleanRequestByState = function(stateString) {
        this.logger.trace("BrowserCacheManager.cleanRequestByState called");
        // Interaction is completed - remove interaction status.
        if (stateString) {
            var stateKey = this.generateStateKey(stateString);
            var cachedState = this.temporaryCacheStorage.getItem(stateKey);
            this.logger.infoPii("BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: " + cachedState);
            this.resetRequestCache(cachedState || "");
        }
        this.clearMsalCookies();
    };
    /**
     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state
     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.
     * @param interactionType
     */ BrowserCacheManager1.prototype.cleanRequestByInteractionType = function(interactionType) {
        var _this = this;
        this.logger.trace("BrowserCacheManager.cleanRequestByInteractionType called");
        // Loop through all keys to find state key
        this.getKeys().forEach(function(key) {
            // If this key is not the state key, move on
            if (key.indexOf(_browserConstantsJs.TemporaryCacheKeys.REQUEST_STATE) === -1) return;
            // Retrieve state value, return if not a valid value
            var stateValue = _this.temporaryCacheStorage.getItem(key);
            if (!stateValue) return;
            // Extract state and ensure it matches given InteractionType, then clean request cache
            var parsedState = _browserProtocolUtilsJs.BrowserProtocolUtils.extractBrowserRequestState(_this.cryptoImpl, stateValue);
            if (parsedState && parsedState.interactionType === interactionType) {
                _this.logger.infoPii("BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: " + stateValue);
                _this.resetRequestCache(stateValue);
            }
        });
        this.clearMsalCookies();
        this.setInteractionInProgress(false);
    };
    BrowserCacheManager1.prototype.cacheCodeRequest = function(authCodeRequest, browserCrypto) {
        this.logger.trace("BrowserCacheManager.cacheCodeRequest called");
        var encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));
        this.setTemporaryCache(_browserConstantsJs.TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);
    };
    /**
     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.
     */ BrowserCacheManager1.prototype.getCachedRequest = function(state, browserCrypto) {
        this.logger.trace("BrowserCacheManager.getCachedRequest called");
        // Get token request from cache and parse as TokenExchangeParameters.
        var encodedTokenRequest = this.getTemporaryCache(_browserConstantsJs.TemporaryCacheKeys.REQUEST_PARAMS, true);
        if (!encodedTokenRequest) throw _browserAuthErrorJs.BrowserAuthError.createNoTokenRequestCacheError();
        var parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest));
        if (!parsedRequest) throw _browserAuthErrorJs.BrowserAuthError.createUnableToParseTokenRequestCacheError();
        this.removeItem(this.generateCacheKey(_browserConstantsJs.TemporaryCacheKeys.REQUEST_PARAMS));
        // Get cached authority and use if no authority is cached with request.
        if (_msalCommon.StringUtils.isEmpty(parsedRequest.authority)) {
            var authorityCacheKey = this.generateAuthorityKey(state);
            var cachedAuthority = this.getTemporaryCache(authorityCacheKey);
            if (!cachedAuthority) throw _browserAuthErrorJs.BrowserAuthError.createNoCachedAuthorityError();
            parsedRequest.authority = cachedAuthority;
        }
        return parsedRequest;
    };
    BrowserCacheManager1.prototype.isInteractionInProgress = function(matchClientId) {
        var clientId = this.getInteractionInProgress();
        if (matchClientId) return clientId === this.clientId;
        else return !!clientId;
    };
    BrowserCacheManager1.prototype.getInteractionInProgress = function() {
        var key = _msalCommon.Constants.CACHE_PREFIX + "." + _browserConstantsJs.TemporaryCacheKeys.INTERACTION_STATUS_KEY;
        return this.getTemporaryCache(key, false);
    };
    BrowserCacheManager1.prototype.setInteractionInProgress = function(inProgress) {
        // Ensure we don't overwrite interaction in progress for a different clientId
        var key = _msalCommon.Constants.CACHE_PREFIX + "." + _browserConstantsJs.TemporaryCacheKeys.INTERACTION_STATUS_KEY;
        if (inProgress) {
            if (this.getInteractionInProgress()) throw _browserAuthErrorJs.BrowserAuthError.createInteractionInProgressError();
            else // No interaction is in progress
            this.setTemporaryCache(key, this.clientId, false);
        } else if (!inProgress && this.getInteractionInProgress() === this.clientId) this.removeItem(key);
    };
    /**
     * Returns username retrieved from ADAL or MSAL v1 idToken
     */ BrowserCacheManager1.prototype.getLegacyLoginHint = function() {
        // Only check for adal/msal token if no SSO params are being used
        var adalIdTokenString = this.getTemporaryCache(_msalCommon.PersistentCacheKeys.ADAL_ID_TOKEN);
        if (adalIdTokenString) {
            this.browserStorage.removeItem(_msalCommon.PersistentCacheKeys.ADAL_ID_TOKEN);
            this.logger.verbose("Cached ADAL id token retrieved.");
        }
        // Check for cached MSAL v1 id token
        var msalIdTokenString = this.getTemporaryCache(_msalCommon.PersistentCacheKeys.ID_TOKEN, true);
        if (msalIdTokenString) {
            this.removeItem(this.generateCacheKey(_msalCommon.PersistentCacheKeys.ID_TOKEN));
            this.logger.verbose("Cached MSAL.js v1 id token retrieved");
        }
        var cachedIdTokenString = msalIdTokenString || adalIdTokenString;
        if (cachedIdTokenString) {
            var cachedIdToken = new _msalCommon.IdToken(cachedIdTokenString, this.cryptoImpl);
            if (cachedIdToken.claims && cachedIdToken.claims.preferred_username) {
                this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint");
                return cachedIdToken.claims.preferred_username;
            } else if (cachedIdToken.claims && cachedIdToken.claims.upn) {
                this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint");
                return cachedIdToken.claims.upn;
            } else this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.");
        }
        return null;
    };
    /**
     * Updates a credential's cache key if the current cache key is outdated
     */ BrowserCacheManager1.prototype.updateCredentialCacheKey = function(currentCacheKey, credential) {
        var updatedCacheKey = credential.generateCredentialKey();
        if (currentCacheKey !== updatedCacheKey) {
            var cacheItem = this.getItem(currentCacheKey);
            if (cacheItem) {
                this.removeItem(currentCacheKey);
                this.setItem(updatedCacheKey, cacheItem);
                this.logger.verbose("Updated an outdated " + credential.credentialType + " cache key");
                return updatedCacheKey;
            } else this.logger.error("Attempted to update an outdated " + credential.credentialType + " cache key but no item matching the outdated key was found in storage");
        }
        return currentCacheKey;
    };
    return BrowserCacheManager1;
}(_msalCommon.CacheManager);
var DEFAULT_BROWSER_CACHE_MANAGER = function(clientId, logger) {
    var cacheOptions = {
        cacheLocation: _browserConstantsJs.BrowserCacheLocation.MemoryStorage,
        storeAuthStateInCookie: false,
        secureCookies: false
    };
    return new BrowserCacheManager(clientId, cacheOptions, _msalCommon.DEFAULT_CRYPTO_IMPLEMENTATION, logger);
};

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","../error/BrowserAuthError.js":"1rUUr","../utils/BrowserConstants.js":"kJnIX","./BrowserStorage.js":"iJUde","./MemoryStorage.js":"bsBIh","../utils/BrowserProtocolUtils.js":"i6ZVK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iJUde":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserStorage", ()=>BrowserStorage
);
var _browserConfigurationAuthErrorJs = require("../error/BrowserConfigurationAuthError.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var BrowserStorage = function() {
    function BrowserStorage1(cacheLocation) {
        this.validateWindowStorage(cacheLocation);
        this.windowStorage = window[cacheLocation];
    }
    BrowserStorage1.prototype.validateWindowStorage = function(cacheLocation) {
        if (cacheLocation !== _browserConstantsJs.BrowserCacheLocation.LocalStorage && cacheLocation !== _browserConstantsJs.BrowserCacheLocation.SessionStorage) throw _browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStorageNotSupportedError(cacheLocation);
        var storageSupported = !!window[cacheLocation];
        if (!storageSupported) throw _browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStorageNotSupportedError(cacheLocation);
    };
    BrowserStorage1.prototype.getItem = function(key) {
        return this.windowStorage.getItem(key);
    };
    BrowserStorage1.prototype.setItem = function(key, value) {
        this.windowStorage.setItem(key, value);
    };
    BrowserStorage1.prototype.removeItem = function(key) {
        this.windowStorage.removeItem(key);
    };
    BrowserStorage1.prototype.getKeys = function() {
        return Object.keys(this.windowStorage);
    };
    BrowserStorage1.prototype.containsKey = function(key) {
        return this.windowStorage.hasOwnProperty(key);
    };
    return BrowserStorage1;
}();

},{"../error/BrowserConfigurationAuthError.js":"99jPJ","../utils/BrowserConstants.js":"kJnIX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"99jPJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserConfigurationAuthError", ()=>BrowserConfigurationAuthError
);
parcelHelpers.export(exports, "BrowserConfigurationAuthErrorMessage", ()=>BrowserConfigurationAuthErrorMessage
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
 */ var BrowserConfigurationAuthErrorMessage = {
    redirectUriNotSet: {
        code: "redirect_uri_empty",
        desc: "A redirect URI is required for all calls, and none has been set."
    },
    postLogoutUriNotSet: {
        code: "post_logout_uri_empty",
        desc: "A post logout redirect has not been set."
    },
    storageNotSupportedError: {
        code: "storage_not_supported",
        desc: "Given storage configuration option was not supported."
    },
    noRedirectCallbacksSet: {
        code: "no_redirect_callbacks",
        desc: "No redirect callbacks have been set. Please call setRedirectCallbacks() with the appropriate function arguments before continuing. More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
    },
    invalidCallbackObject: {
        code: "invalid_callback_object",
        desc: "The object passed for the callback was invalid. More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
    },
    stubPcaInstanceCalled: {
        code: "stubbed_public_client_application_called",
        desc: "Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors"
    },
    inMemRedirectUnavailable: {
        code: "in_mem_redirect_unavailable",
        desc: "Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true."
    }
};
/**
 * Browser library error class thrown by the MSAL.js library for SPAs
 */ var BrowserConfigurationAuthError = function(_super) {
    _tslibJs.__extends(BrowserConfigurationAuthError1, _super);
    function BrowserConfigurationAuthError1(errorCode, errorMessage) {
        var _this = _super.call(this, errorCode, errorMessage) || this;
        _this.name = "BrowserConfigurationAuthError";
        Object.setPrototypeOf(_this, BrowserConfigurationAuthError1.prototype);
        return _this;
    }
    /**
     * Creates an error thrown when the redirect uri is empty (not set by caller)
     */ BrowserConfigurationAuthError1.createRedirectUriEmptyError = function() {
        return new BrowserConfigurationAuthError1(BrowserConfigurationAuthErrorMessage.redirectUriNotSet.code, BrowserConfigurationAuthErrorMessage.redirectUriNotSet.desc);
    };
    /**
     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)
     */ BrowserConfigurationAuthError1.createPostLogoutRedirectUriEmptyError = function() {
        return new BrowserConfigurationAuthError1(BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.code, BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.desc);
    };
    /**
     * Creates error thrown when given storage location is not supported.
     * @param givenStorageLocation
     */ BrowserConfigurationAuthError1.createStorageNotSupportedError = function(givenStorageLocation) {
        return new BrowserConfigurationAuthError1(BrowserConfigurationAuthErrorMessage.storageNotSupportedError.code, BrowserConfigurationAuthErrorMessage.storageNotSupportedError.desc + " Given Location: " + givenStorageLocation);
    };
    /**
     * Creates error thrown when redirect callbacks are not set before calling loginRedirect() or acquireTokenRedirect().
     */ BrowserConfigurationAuthError1.createRedirectCallbacksNotSetError = function() {
        return new BrowserConfigurationAuthError1(BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.code, BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.desc);
    };
    /**
     * Creates error thrown when the stub instance of PublicClientApplication is called.
     */ BrowserConfigurationAuthError1.createStubPcaInstanceCalledError = function() {
        return new BrowserConfigurationAuthError1(BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.code, BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.desc);
    };
    /*
     * Create an error thrown when in-memory storage is used and storeAuthStateInCookie=false.
     */ BrowserConfigurationAuthError1.createInMemoryRedirectUnavailableError = function() {
        return new BrowserConfigurationAuthError1(BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.code, BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.desc);
    };
    return BrowserConfigurationAuthError1;
}(_msalCommon.AuthError);

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i6ZVK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserProtocolUtils", ()=>BrowserProtocolUtils
);
var _msalCommon = require("@azure/msal-common");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var BrowserProtocolUtils = function() {
    function BrowserProtocolUtils1() {
    }
    /**
     * Extracts the BrowserStateObject from the state string.
     * @param browserCrypto
     * @param state
     */ BrowserProtocolUtils1.extractBrowserRequestState = function(browserCrypto, state) {
        if (_msalCommon.StringUtils.isEmpty(state)) return null;
        try {
            var requestStateObj = _msalCommon.ProtocolUtils.parseRequestState(browserCrypto, state);
            return requestStateObj.libraryState.meta;
        } catch (e) {
            throw _msalCommon.ClientAuthError.createInvalidStateError(state, e);
        }
    };
    /**
     * Parses properties of server response from url hash
     * @param locationHash Hash from url
     */ BrowserProtocolUtils1.parseServerResponseFromHash = function(locationHash) {
        if (!locationHash) return {
        };
        var hashUrlString = new _msalCommon.UrlString(locationHash);
        return _msalCommon.UrlString.getDeserializedHash(hashUrlString.getHash());
    };
    return BrowserProtocolUtils1;
}();

},{"@azure/msal-common":"liWRx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ePb2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_IFRAME_TIMEOUT_MS", ()=>DEFAULT_IFRAME_TIMEOUT_MS
);
parcelHelpers.export(exports, "DEFAULT_POPUP_TIMEOUT_MS", ()=>DEFAULT_POPUP_TIMEOUT_MS
);
parcelHelpers.export(exports, "DEFAULT_REDIRECT_TIMEOUT_MS", ()=>DEFAULT_REDIRECT_TIMEOUT_MS
);
parcelHelpers.export(exports, "buildConfiguration", ()=>buildConfiguration
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
var _browserUtilsJs = require("../utils/BrowserUtils.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _navigationClientJs = require("../navigation/NavigationClient.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ // Default timeout for popup windows and iframes in milliseconds
var DEFAULT_POPUP_TIMEOUT_MS = 60000;
var DEFAULT_IFRAME_TIMEOUT_MS = 6000;
var DEFAULT_REDIRECT_TIMEOUT_MS = 30000;
/**
 * MSAL function that sets the default options when not explicitly configured from app developer
 *
 * @param auth
 * @param cache
 * @param system
 *
 * @returns Configuration object
 */ function buildConfiguration(_a, isBrowserEnvironment) {
    var userInputAuth = _a.auth, userInputCache = _a.cache, userInputSystem = _a.system;
    // Default auth options for browser
    var DEFAULT_AUTH_OPTIONS = {
        clientId: "",
        authority: "" + _msalCommon.Constants.DEFAULT_AUTHORITY,
        knownAuthorities: [],
        cloudDiscoveryMetadata: "",
        authorityMetadata: "",
        redirectUri: "",
        postLogoutRedirectUri: "",
        navigateToLoginRequestUrl: true,
        clientCapabilities: [],
        protocolMode: _msalCommon.ProtocolMode.AAD,
        azureCloudOptions: {
            azureCloudInstance: _msalCommon.AzureCloudInstance.None,
            tenant: ""
        }
    };
    // Default cache options for browser
    var DEFAULT_CACHE_OPTIONS = {
        cacheLocation: _browserConstantsJs.BrowserCacheLocation.SessionStorage,
        storeAuthStateInCookie: false,
        secureCookies: false
    };
    // Default logger options for browser
    var DEFAULT_LOGGER_OPTIONS = {
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        loggerCallback: function() {
        },
        logLevel: _msalCommon.LogLevel.Info,
        piiLoggingEnabled: false
    };
    // Default system options for browser
    var DEFAULT_BROWSER_SYSTEM_OPTIONS = _tslibJs.__assign(_tslibJs.__assign({
    }, _msalCommon.DEFAULT_SYSTEM_OPTIONS), {
        loggerOptions: DEFAULT_LOGGER_OPTIONS,
        networkClient: isBrowserEnvironment ? _browserUtilsJs.BrowserUtils.getBrowserNetworkClient() : _msalCommon.StubbedNetworkModule,
        navigationClient: new _navigationClientJs.NavigationClient(),
        loadFrameTimeout: 0,
        // If loadFrameTimeout is provided, use that as default.
        windowHashTimeout: userInputSystem && userInputSystem.loadFrameTimeout || DEFAULT_POPUP_TIMEOUT_MS,
        iframeHashTimeout: userInputSystem && userInputSystem.loadFrameTimeout || DEFAULT_IFRAME_TIMEOUT_MS,
        navigateFrameWait: isBrowserEnvironment && _browserUtilsJs.BrowserUtils.detectIEOrEdge() ? 500 : 0,
        redirectNavigationTimeout: DEFAULT_REDIRECT_TIMEOUT_MS,
        asyncPopups: false,
        allowRedirectInIframe: false
    });
    var overlayedConfig = {
        auth: _tslibJs.__assign(_tslibJs.__assign({
        }, DEFAULT_AUTH_OPTIONS), userInputAuth),
        cache: _tslibJs.__assign(_tslibJs.__assign({
        }, DEFAULT_CACHE_OPTIONS), userInputCache),
        system: _tslibJs.__assign(_tslibJs.__assign({
        }, DEFAULT_BROWSER_SYSTEM_OPTIONS), userInputSystem)
    };
    return overlayedConfig;
}

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","../utils/BrowserUtils.js":"l7wi6","../utils/BrowserConstants.js":"kJnIX","../navigation/NavigationClient.js":"5Vdmv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l7wi6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserUtils", ()=>BrowserUtils
);
var _msalCommon = require("@azure/msal-common");
var _fetchClientJs = require("../network/FetchClient.js");
var _xhrClientJs = require("../network/XhrClient.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _browserConstantsJs = require("./BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Utility class for browser specific functions
 */ var BrowserUtils = function() {
    function BrowserUtils1() {
    }
    // #region Window Navigation and URL management
    /**
     * Clears hash from window url.
     */ BrowserUtils1.clearHash = function(contentWindow) {
        // Office.js sets history.replaceState to null
        contentWindow.location.hash = _msalCommon.Constants.EMPTY_STRING;
        if (typeof contentWindow.history.replaceState === "function") // Full removes "#" from url
        contentWindow.history.replaceState(null, _msalCommon.Constants.EMPTY_STRING, "" + contentWindow.location.origin + contentWindow.location.pathname + contentWindow.location.search);
    };
    /**
     * Replaces current hash with hash from provided url
     */ BrowserUtils1.replaceHash = function(url) {
        var urlParts = url.split("#");
        urlParts.shift(); // Remove part before the hash
        window.location.hash = urlParts.length > 0 ? urlParts.join("#") : "";
    };
    /**
     * Returns boolean of whether the current window is in an iframe or not.
     */ BrowserUtils1.isInIframe = function() {
        return window.parent !== window;
    };
    /**
     * Returns boolean of whether or not the current window is a popup opened by msal
     */ BrowserUtils1.isInPopup = function() {
        return typeof window !== "undefined" && !!window.opener && window.opener !== window && typeof window.name === "string" && window.name.indexOf(_browserConstantsJs.BrowserConstants.POPUP_NAME_PREFIX + ".") === 0;
    };
    // #endregion
    /**
     * Returns current window URL as redirect uri
     */ BrowserUtils1.getCurrentUri = function() {
        return window.location.href.split("?")[0].split("#")[0];
    };
    /**
     * Gets the homepage url for the current window location.
     */ BrowserUtils1.getHomepage = function() {
        var currentUrl = new _msalCommon.UrlString(window.location.href);
        var urlComponents = currentUrl.getUrlComponents();
        return urlComponents.Protocol + "//" + urlComponents.HostNameAndPort + "/";
    };
    /**
     * Returns best compatible network client object.
     */ BrowserUtils1.getBrowserNetworkClient = function() {
        if (window.fetch && window.Headers) return new _fetchClientJs.FetchClient();
        else return new _xhrClientJs.XhrClient();
    };
    /**
     * Throws error if we have completed an auth and are
     * attempting another auth request inside an iframe.
     */ BrowserUtils1.blockReloadInHiddenIframes = function() {
        var isResponseHash = _msalCommon.UrlString.hashContainsKnownProperties(window.location.hash);
        // return an error if called from the hidden iframe created by the msal js silent calls
        if (isResponseHash && BrowserUtils1.isInIframe()) throw _browserAuthErrorJs.BrowserAuthError.createBlockReloadInHiddenIframeError();
    };
    /**
     * Block redirect operations in iframes unless explicitly allowed
     * @param interactionType Interaction type for the request
     * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe
     */ BrowserUtils1.blockRedirectInIframe = function(interactionType, allowRedirectInIframe) {
        var isIframedApp = BrowserUtils1.isInIframe();
        if (interactionType === _browserConstantsJs.InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) // If we are not in top frame, we shouldn't redirect. This is also handled by the service.
        throw _browserAuthErrorJs.BrowserAuthError.createRedirectInIframeError(isIframedApp);
    };
    /**
     * Block redirectUri loaded in popup from calling AcquireToken APIs
     */ BrowserUtils1.blockAcquireTokenInPopups = function() {
        // Popups opened by msal popup APIs are given a name that starts with "msal."
        if (BrowserUtils1.isInPopup()) throw _browserAuthErrorJs.BrowserAuthError.createBlockAcquireTokenInPopupsError();
    };
    /**
     * Throws error if token requests are made in non-browser environment
     * @param isBrowserEnvironment Flag indicating if environment is a browser.
     */ BrowserUtils1.blockNonBrowserEnvironment = function(isBrowserEnvironment) {
        if (!isBrowserEnvironment) throw _browserAuthErrorJs.BrowserAuthError.createNonBrowserEnvironmentError();
    };
    /**
     * Returns boolean of whether current browser is an Internet Explorer or Edge browser.
     */ BrowserUtils1.detectIEOrEdge = function() {
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf("MSIE ");
        var msie11 = ua.indexOf("Trident/");
        var msedge = ua.indexOf("Edge/");
        var isIE = msie > 0 || msie11 > 0;
        var isEdge = msedge > 0;
        return isIE || isEdge;
    };
    return BrowserUtils1;
}();

},{"@azure/msal-common":"liWRx","../network/FetchClient.js":"8zdH9","../network/XhrClient.js":"2GOkE","../error/BrowserAuthError.js":"1rUUr","./BrowserConstants.js":"kJnIX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8zdH9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FetchClient", ()=>FetchClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
 */ var FetchClient = function() {
    function FetchClient1() {
    }
    /**
     * Fetch Client for REST endpoints - Get request
     * @param url
     * @param headers
     * @param body
     */ FetchClient1.prototype.sendGetRequestAsync = function(url, options) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var response, e_1, _a;
            return _tslibJs.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        _b.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            fetch(url, {
                                method: _browserConstantsJs.HTTP_REQUEST_TYPE.GET,
                                headers: this.getFetchHeaders(options)
                            })
                        ];
                    case 1:
                        response = _b.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        e_1 = _b.sent();
                        if (window.navigator.onLine) throw _browserAuthErrorJs.BrowserAuthError.createGetRequestFailedError(e_1, url);
                        else throw _browserAuthErrorJs.BrowserAuthError.createNoNetworkConnectivityError();
                    case 3:
                        _b.trys.push([
                            3,
                            5,
                            ,
                            6
                        ]);
                        _a = {
                            headers: this.getHeaderDict(response.headers)
                        };
                        return [
                            4 /*yield*/ ,
                            response.json()
                        ];
                    case 4:
                        return [
                            2 /*return*/ ,
                            (_a.body = _b.sent(), _a.status = response.status, _a)
                        ];
                    case 5:
                        _b.sent();
                        throw _browserAuthErrorJs.BrowserAuthError.createFailedToParseNetworkResponseError(url);
                    case 6:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Fetch Client for REST endpoints - Post request
     * @param url
     * @param headers
     * @param body
     */ FetchClient1.prototype.sendPostRequestAsync = function(url, options) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var reqBody, response, e_3, _a;
            return _tslibJs.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        reqBody = options && options.body || "";
                        _b.label = 1;
                    case 1:
                        _b.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            fetch(url, {
                                method: _browserConstantsJs.HTTP_REQUEST_TYPE.POST,
                                headers: this.getFetchHeaders(options),
                                body: reqBody
                            })
                        ];
                    case 2:
                        response = _b.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        e_3 = _b.sent();
                        if (window.navigator.onLine) throw _browserAuthErrorJs.BrowserAuthError.createPostRequestFailedError(e_3, url);
                        else throw _browserAuthErrorJs.BrowserAuthError.createNoNetworkConnectivityError();
                    case 4:
                        _b.trys.push([
                            4,
                            6,
                            ,
                            7
                        ]);
                        _a = {
                            headers: this.getHeaderDict(response.headers)
                        };
                        return [
                            4 /*yield*/ ,
                            response.json()
                        ];
                    case 5:
                        return [
                            2 /*return*/ ,
                            (_a.body = _b.sent(), _a.status = response.status, _a)
                        ];
                    case 6:
                        _b.sent();
                        throw _browserAuthErrorJs.BrowserAuthError.createFailedToParseNetworkResponseError(url);
                    case 7:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Get Fetch API Headers object from string map
     * @param inputHeaders
     */ FetchClient1.prototype.getFetchHeaders = function(options) {
        var headers = new Headers();
        if (!(options && options.headers)) return headers;
        var optionsHeaders = options.headers;
        Object.keys(optionsHeaders).forEach(function(key) {
            headers.append(key, optionsHeaders[key]);
        });
        return headers;
    };
    FetchClient1.prototype.getHeaderDict = function(headers) {
        var headerDict = {
        };
        headers.forEach(function(value, key) {
            headerDict[key] = value;
        });
        return headerDict;
    };
    return FetchClient1;
}();

},{"../_virtual/_tslib.js":"fxaLV","../error/BrowserAuthError.js":"1rUUr","../utils/BrowserConstants.js":"kJnIX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2GOkE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "XhrClient", ()=>XhrClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This client implements the XMLHttpRequest class to send GET and POST requests.
 */ var XhrClient = function() {
    function XhrClient1() {
    }
    /**
     * XhrClient for REST endpoints - Get request
     * @param url
     * @param headers
     * @param body
     */ XhrClient1.prototype.sendGetRequestAsync = function(url, options) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.sendRequestAsync(url, _browserConstantsJs.HTTP_REQUEST_TYPE.GET, options)
                ];
            });
        });
    };
    /**
     * XhrClient for REST endpoints - Post request
     * @param url
     * @param headers
     * @param body
     */ XhrClient1.prototype.sendPostRequestAsync = function(url, options) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.sendRequestAsync(url, _browserConstantsJs.HTTP_REQUEST_TYPE.POST, options)
                ];
            });
        });
    };
    /**
     * Helper for XhrClient requests.
     * @param url
     * @param method
     * @param options
     */ XhrClient1.prototype.sendRequestAsync = function(url, method, options) {
        var _this = this;
        return new Promise(function(resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.open(method, url, /* async: */ true);
            _this.setXhrHeaders(xhr, options);
            xhr.onload = function() {
                if (xhr.status < 200 || xhr.status >= 300) {
                    if (method === _browserConstantsJs.HTTP_REQUEST_TYPE.POST) reject(_browserAuthErrorJs.BrowserAuthError.createPostRequestFailedError("Failed with status " + xhr.status, url));
                    else reject(_browserAuthErrorJs.BrowserAuthError.createGetRequestFailedError("Failed with status " + xhr.status, url));
                }
                try {
                    var jsonResponse = JSON.parse(xhr.responseText);
                    var networkResponse = {
                        headers: _this.getHeaderDict(xhr),
                        body: jsonResponse,
                        status: xhr.status
                    };
                    resolve(networkResponse);
                } catch (e) {
                    reject(_browserAuthErrorJs.BrowserAuthError.createFailedToParseNetworkResponseError(url));
                }
            };
            xhr.onerror = function() {
                if (window.navigator.onLine) {
                    if (method === _browserConstantsJs.HTTP_REQUEST_TYPE.POST) reject(_browserAuthErrorJs.BrowserAuthError.createPostRequestFailedError("Failed with status " + xhr.status, url));
                    else reject(_browserAuthErrorJs.BrowserAuthError.createGetRequestFailedError("Failed with status " + xhr.status, url));
                } else reject(_browserAuthErrorJs.BrowserAuthError.createNoNetworkConnectivityError());
            };
            if (method === _browserConstantsJs.HTTP_REQUEST_TYPE.POST && options && options.body) xhr.send(options.body);
            else if (method === _browserConstantsJs.HTTP_REQUEST_TYPE.GET) xhr.send();
            else throw _browserAuthErrorJs.BrowserAuthError.createHttpMethodNotImplementedError(method);
        });
    };
    /**
     * Helper to set XHR headers for request.
     * @param xhr
     * @param options
     */ XhrClient1.prototype.setXhrHeaders = function(xhr, options) {
        if (options && options.headers) {
            var headers_1 = options.headers;
            Object.keys(headers_1).forEach(function(key) {
                xhr.setRequestHeader(key, headers_1[key]);
            });
        }
    };
    /**
     * Gets a string map of the headers received in the response.
     *
     * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders
     * @param xhr
     */ XhrClient1.prototype.getHeaderDict = function(xhr) {
        var headerString = xhr.getAllResponseHeaders();
        var headerArr = headerString.trim().split(/[\r\n]+/);
        var headerDict = {
        };
        headerArr.forEach(function(value) {
            var parts = value.split(": ");
            var headerName = parts.shift();
            var headerVal = parts.join(": ");
            if (headerName && headerVal) headerDict[headerName] = headerVal;
        });
        return headerDict;
    };
    return XhrClient1;
}();

},{"../_virtual/_tslib.js":"fxaLV","../error/BrowserAuthError.js":"1rUUr","../utils/BrowserConstants.js":"kJnIX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Vdmv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NavigationClient", ()=>NavigationClient
);
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var NavigationClient = function() {
    function NavigationClient1() {
    }
    /**
     * Navigates to other pages within the same web application
     * @param url
     * @param options
     */ NavigationClient1.prototype.navigateInternal = function(url, options) {
        return NavigationClient1.defaultNavigateWindow(url, options);
    };
    /**
     * Navigates to other pages outside the web application i.e. the Identity Provider
     * @param url
     * @param options
     */ NavigationClient1.prototype.navigateExternal = function(url, options) {
        return NavigationClient1.defaultNavigateWindow(url, options);
    };
    /**
     * Default navigation implementation invoked by the internal and external functions
     * @param url
     * @param options
     */ NavigationClient1.defaultNavigateWindow = function(url, options) {
        if (options.noHistory) window.location.replace(url);
        else window.location.assign(url);
        return new Promise(function(resolve) {
            setTimeout(function() {
                resolve(true);
            }, options.timeout);
        });
    };
    return NavigationClient1;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hunPb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "name", ()=>name
);
parcelHelpers.export(exports, "version", ()=>version
);
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/* eslint-disable header/header */ var name = "@azure/msal-browser";
var version = "2.22.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cjqlF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventType", ()=>EventType
);
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var EventType;
(function(EventType1) {
    EventType1["ACCOUNT_ADDED"] = "msal:accountAdded";
    EventType1["ACCOUNT_REMOVED"] = "msal:accountRemoved";
    EventType1["LOGIN_START"] = "msal:loginStart";
    EventType1["LOGIN_SUCCESS"] = "msal:loginSuccess";
    EventType1["LOGIN_FAILURE"] = "msal:loginFailure";
    EventType1["ACQUIRE_TOKEN_START"] = "msal:acquireTokenStart";
    EventType1["ACQUIRE_TOKEN_SUCCESS"] = "msal:acquireTokenSuccess";
    EventType1["ACQUIRE_TOKEN_FAILURE"] = "msal:acquireTokenFailure";
    EventType1["ACQUIRE_TOKEN_NETWORK_START"] = "msal:acquireTokenFromNetworkStart";
    EventType1["SSO_SILENT_START"] = "msal:ssoSilentStart";
    EventType1["SSO_SILENT_SUCCESS"] = "msal:ssoSilentSuccess";
    EventType1["SSO_SILENT_FAILURE"] = "msal:ssoSilentFailure";
    EventType1["ACQUIRE_TOKEN_BY_CODE_START"] = "msal:acquireTokenByCodeStart";
    EventType1["ACQUIRE_TOKEN_BY_CODE_SUCCESS"] = "msal:acquireTokenByCodeSuccess";
    EventType1["ACQUIRE_TOKEN_BY_CODE_FAILURE"] = "msal:acquireTokenByCodeFailure";
    EventType1["HANDLE_REDIRECT_START"] = "msal:handleRedirectStart";
    EventType1["HANDLE_REDIRECT_END"] = "msal:handleRedirectEnd";
    EventType1["POPUP_OPENED"] = "msal:popupOpened";
    EventType1["LOGOUT_START"] = "msal:logoutStart";
    EventType1["LOGOUT_SUCCESS"] = "msal:logoutSuccess";
    EventType1["LOGOUT_FAILURE"] = "msal:logoutFailure";
    EventType1["LOGOUT_END"] = "msal:logoutEnd";
})(EventType || (EventType = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jfojq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventHandler", ()=>EventHandler
);
var _msalCommon = require("@azure/msal-common");
var _eventTypeJs = require("./EventType.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var EventHandler = function() {
    function EventHandler1(logger, browserCrypto) {
        this.eventCallbacks = new Map();
        this.logger = logger;
        this.browserCrypto = browserCrypto;
        this.listeningToStorageEvents = false;
        this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);
    }
    /**
     * Adds event callbacks to array
     * @param callback
     */ EventHandler1.prototype.addEventCallback = function(callback) {
        if (typeof window !== "undefined") {
            var callbackId = this.browserCrypto.createNewGuid();
            this.eventCallbacks.set(callbackId, callback);
            this.logger.verbose("Event callback registered with id: " + callbackId);
            return callbackId;
        }
        return null;
    };
    /**
     * Removes callback with provided id from callback array
     * @param callbackId
     */ EventHandler1.prototype.removeEventCallback = function(callbackId) {
        this.eventCallbacks.delete(callbackId);
        this.logger.verbose("Event callback " + callbackId + " removed.");
    };
    /**
     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */ EventHandler1.prototype.enableAccountStorageEvents = function() {
        if (typeof window === "undefined") return;
        if (!this.listeningToStorageEvents) {
            this.logger.verbose("Adding account storage listener.");
            this.listeningToStorageEvents = true;
            window.addEventListener("storage", this.handleAccountCacheChange);
        } else this.logger.verbose("Account storage listener already registered.");
    };
    /**
     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
     */ EventHandler1.prototype.disableAccountStorageEvents = function() {
        if (typeof window === "undefined") return;
        if (this.listeningToStorageEvents) {
            this.logger.verbose("Removing account storage listener.");
            window.removeEventListener("storage", this.handleAccountCacheChange);
            this.listeningToStorageEvents = false;
        } else this.logger.verbose("No account storage listener registered.");
    };
    /**
     * Emits events by calling callback with event message
     * @param eventType
     * @param interactionType
     * @param payload
     * @param error
     */ EventHandler1.prototype.emitEvent = function(eventType, interactionType, payload, error) {
        var _this = this;
        if (typeof window !== "undefined") {
            var message_1 = {
                eventType: eventType,
                interactionType: interactionType || null,
                payload: payload || null,
                error: error || null,
                timestamp: Date.now()
            };
            this.logger.info("Emitting event: " + eventType);
            this.eventCallbacks.forEach(function(callback, callbackId) {
                _this.logger.verbose("Emitting event to callback " + callbackId + ": " + eventType);
                callback.apply(null, [
                    message_1
                ]);
            });
        }
    };
    /**
     * Emit account added/removed events when cached accounts are changed in a different tab or frame
     */ EventHandler1.prototype.handleAccountCacheChange = function(e) {
        try {
            var cacheValue = e.newValue || e.oldValue;
            if (!cacheValue) return;
            var parsedValue = JSON.parse(cacheValue);
            if (typeof parsedValue !== "object" || !_msalCommon.AccountEntity.isAccountEntity(parsedValue)) return;
            var accountEntity = _msalCommon.CacheManager.toObject(new _msalCommon.AccountEntity(), parsedValue);
            var accountInfo = accountEntity.getAccountInfo();
            if (!e.oldValue && e.newValue) {
                this.logger.info("Account was added to cache in a different window");
                this.emitEvent(_eventTypeJs.EventType.ACCOUNT_ADDED, undefined, accountInfo);
            } else if (!e.newValue && e.oldValue) {
                this.logger.info("Account was removed from cache in a different window");
                this.emitEvent(_eventTypeJs.EventType.ACCOUNT_REMOVED, undefined, accountInfo);
            }
        } catch (e1) {
            return;
        }
    };
    return EventHandler1;
}();

},{"@azure/msal-common":"liWRx","./EventType.js":"cjqlF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k7lZu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopupClient", ()=>PopupClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
var _standardInteractionClientJs = require("./StandardInteractionClient.js");
var _popupUtilsJs = require("../utils/PopupUtils.js");
var _eventTypeJs = require("../event/EventType.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _popupHandlerJs = require("../interaction_handler/PopupHandler.js");
var _browserUtilsJs = require("../utils/BrowserUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var PopupClient = function(_super) {
    _tslibJs.__extends(PopupClient1, _super);
    function PopupClient1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority
     * @param request
     */ PopupClient1.prototype.acquireToken = function(request) {
        try {
            var popupName = _popupUtilsJs.PopupUtils.generatePopupName(this.config.auth.clientId, request.scopes || _msalCommon.OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority, this.correlationId);
            var popupWindowAttributes = request.popupWindowAttributes || {
            };
            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.
            if (this.config.system.asyncPopups) {
                this.logger.verbose("asyncPopups set to true, acquiring token");
                // Passes on popup position and dimensions if in request
                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);
            } else {
                // asyncPopups flag is set to false. Opens popup before acquiring token.
                this.logger.verbose("asyncPopup set to false, opening popup before acquiring token");
                var popup = _popupUtilsJs.PopupUtils.openSizedPopup("about:blank", popupName, popupWindowAttributes, this.logger);
                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);
            }
        } catch (e) {
            return Promise.reject(e);
        }
    };
    /**
     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server
     * @param logoutRequest
     */ PopupClient1.prototype.logout = function(logoutRequest) {
        try {
            this.logger.verbose("logoutPopup called");
            var validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
            var popupName = _popupUtilsJs.PopupUtils.generateLogoutPopupName(this.config.auth.clientId, validLogoutRequest);
            var authority = logoutRequest && logoutRequest.authority;
            var mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;
            var popupWindowAttributes = (logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.popupWindowAttributes) || {
            };
            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.
            if (this.config.system.asyncPopups) {
                this.logger.verbose("asyncPopups set to true");
                // Passes on popup position and dimensions if in request
                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);
            } else {
                // asyncPopups flag is set to false. Opens popup before logging out.
                this.logger.verbose("asyncPopup set to false, opening popup");
                var popup = _popupUtilsJs.PopupUtils.openSizedPopup("about:blank", popupName, popupWindowAttributes, this.logger);
                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);
            }
        } catch (e) {
            // Since this function is synchronous we need to reject
            return Promise.reject(e);
        }
    };
    /**
     * Helper which obtains an access_token for your API via opening a popup window in the user's browser
     * @param validRequest
     * @param popupName
     * @param popup
     * @param popupWindowAttributes
     *
     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
     */ PopupClient1.prototype.acquireTokenPopupAsync = function(request, popupName, popupWindowAttributes, popup) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var serverTelemetryManager, validRequest, authCodeRequest, authClient, navigateUrl, interactionHandler, popupParameters, popupWindow, hash, state, result, e_1;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.logger.verbose("acquireTokenPopupAsync called");
                        serverTelemetryManager = this.initializeServerTelemetryManager(_browserConstantsJs.ApiId.acquireTokenPopup);
                        return [
                            4 /*yield*/ ,
                            this.initializeAuthorizationRequest(request, _browserConstantsJs.InteractionType.Popup)
                        ];
                    case 1:
                        validRequest = _a.sent();
                        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || "", validRequest.account || null);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            8,
                            ,
                            9
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.initializeAuthorizationCodeRequest(validRequest)
                        ];
                    case 3:
                        authCodeRequest = _a.sent();
                        return [
                            4 /*yield*/ ,
                            this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)
                        ];
                    case 4:
                        authClient = _a.sent();
                        this.logger.verbose("Auth code client created");
                        return [
                            4 /*yield*/ ,
                            authClient.getAuthCodeUrl(validRequest)
                        ];
                    case 5:
                        navigateUrl = _a.sent();
                        interactionHandler = new _popupHandlerJs.PopupHandler(authClient, this.browserStorage, authCodeRequest, this.logger);
                        popupParameters = {
                            popup: popup,
                            popupName: popupName,
                            popupWindowAttributes: popupWindowAttributes
                        };
                        popupWindow = interactionHandler.initiateAuthRequest(navigateUrl, popupParameters);
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.POPUP_OPENED, _browserConstantsJs.InteractionType.Popup, {
                            popupWindow: popupWindow
                        }, null);
                        return [
                            4 /*yield*/ ,
                            interactionHandler.monitorPopupForHash(popupWindow)
                        ];
                    case 6:
                        hash = _a.sent();
                        state = this.validateAndExtractStateFromHash(hash, _browserConstantsJs.InteractionType.Popup, validRequest.correlationId);
                        // Remove throttle if it exists
                        _msalCommon.ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);
                        return [
                            4 /*yield*/ ,
                            interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)
                        ];
                    case 7:
                        result = _a.sent();
                        return [
                            2 /*return*/ ,
                            result
                        ];
                    case 8:
                        e_1 = _a.sent();
                        if (popup) // Close the synchronous popup if an error is thrown before the window unload event is registered
                        popup.close();
                        if (e_1 instanceof _msalCommon.AuthError) e_1.setCorrelationId(this.correlationId);
                        serverTelemetryManager.cacheFailedRequest(e_1);
                        this.browserStorage.cleanRequestByState(validRequest.state);
                        throw e_1;
                    case 9:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     *
     * @param validRequest
     * @param popupName
     * @param requestAuthority
     * @param popup
     * @param mainWindowRedirectUri
     * @param popupWindowAttributes
     */ PopupClient1.prototype.logoutPopupAsync = function(validRequest, popupName, popupWindowAttributes, requestAuthority, popup, mainWindowRedirectUri) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var serverTelemetryManager, authClient, logoutUri, popupUtils, popupWindow, e_2, navigationOptions, absoluteUrl, e_3;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.logger.verbose("logoutPopupAsync called");
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGOUT_START, _browserConstantsJs.InteractionType.Popup, validRequest);
                        serverTelemetryManager = this.initializeServerTelemetryManager(_browserConstantsJs.ApiId.logoutPopup);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            8,
                            ,
                            9
                        ]);
                        // Clear cache on logout
                        return [
                            4 /*yield*/ ,
                            this.clearCacheOnLogout(validRequest.account)
                        ];
                    case 2:
                        // Clear cache on logout
                        _a.sent();
                        return [
                            4 /*yield*/ ,
                            this.createAuthCodeClient(serverTelemetryManager, requestAuthority)
                        ];
                    case 3:
                        authClient = _a.sent();
                        this.logger.verbose("Auth code client created");
                        logoutUri = authClient.getLogoutUri(validRequest);
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGOUT_SUCCESS, _browserConstantsJs.InteractionType.Popup, validRequest);
                        popupUtils = new _popupUtilsJs.PopupUtils(this.browserStorage, this.logger);
                        popupWindow = popupUtils.openPopup(logoutUri, {
                            popupName: popupName,
                            popupWindowAttributes: popupWindowAttributes,
                            popup: popup
                        });
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.POPUP_OPENED, _browserConstantsJs.InteractionType.Popup, {
                            popupWindow: popupWindow
                        }, null);
                        _a.label = 4;
                    case 4:
                        _a.trys.push([
                            4,
                            6,
                            ,
                            7
                        ]);
                        // Don't care if this throws an error (User Cancelled)
                        return [
                            4 /*yield*/ ,
                            popupUtils.monitorPopupForSameOrigin(popupWindow)
                        ];
                    case 5:
                        // Don't care if this throws an error (User Cancelled)
                        _a.sent();
                        this.logger.verbose("Popup successfully redirected to postLogoutRedirectUri");
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 6:
                        e_2 = _a.sent();
                        this.logger.verbose("Error occurred while monitoring popup for same origin. Session on server may remain active. Error: " + e_2);
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 7:
                        popupUtils.cleanPopup(popupWindow);
                        if (mainWindowRedirectUri) {
                            navigationOptions = {
                                apiId: _browserConstantsJs.ApiId.logoutPopup,
                                timeout: this.config.system.redirectNavigationTimeout,
                                noHistory: false
                            };
                            absoluteUrl = _msalCommon.UrlString.getAbsoluteUrl(mainWindowRedirectUri, _browserUtilsJs.BrowserUtils.getCurrentUri());
                            this.logger.verbose("Redirecting main window to url specified in the request");
                            this.logger.verbosePii("Redirecting main window to: " + absoluteUrl);
                            this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);
                        } else this.logger.verbose("No main window navigation requested");
                        return [
                            3 /*break*/ ,
                            9
                        ];
                    case 8:
                        e_3 = _a.sent();
                        if (popup) // Close the synchronous popup if an error is thrown before the window unload event is registered
                        popup.close();
                        if (e_3 instanceof _msalCommon.AuthError) e_3.setCorrelationId(this.correlationId);
                        this.browserStorage.setInteractionInProgress(false);
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGOUT_FAILURE, _browserConstantsJs.InteractionType.Popup, null, e_3);
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGOUT_END, _browserConstantsJs.InteractionType.Popup);
                        serverTelemetryManager.cacheFailedRequest(e_3);
                        throw e_3;
                    case 9:
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGOUT_END, _browserConstantsJs.InteractionType.Popup);
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    return PopupClient1;
}(_standardInteractionClientJs.StandardInteractionClient);

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","./StandardInteractionClient.js":"64K8D","../utils/PopupUtils.js":"1ts4J","../event/EventType.js":"cjqlF","../utils/BrowserConstants.js":"kJnIX","../interaction_handler/PopupHandler.js":"2s5F7","../utils/BrowserUtils.js":"l7wi6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"64K8D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StandardInteractionClient", ()=>StandardInteractionClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
var _baseInteractionClientJs = require("./BaseInteractionClient.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _packageMetadataJs = require("../packageMetadata.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _browserProtocolUtilsJs = require("../utils/BrowserProtocolUtils.js");
var _browserUtilsJs = require("../utils/BrowserUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Defines the class structure and helper functions used by the "standard", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))
 */ var StandardInteractionClient = function(_super) {
    _tslibJs.__extends(StandardInteractionClient1, _super);
    function StandardInteractionClient1(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId) {
        var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, correlationId) || this;
        _this.navigationClient = navigationClient;
        return _this;
    }
    /**
     * Generates an auth code request tied to the url request.
     * @param request
     */ StandardInteractionClient1.prototype.initializeAuthorizationCodeRequest = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var generatedPkceParams, authCodeRequest;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.logger.verbose("initializeAuthorizationRequest called", request.correlationId);
                        return [
                            4 /*yield*/ ,
                            this.browserCrypto.generatePkceCodes()
                        ];
                    case 1:
                        generatedPkceParams = _a.sent();
                        authCodeRequest = _tslibJs.__assign(_tslibJs.__assign({
                        }, request), {
                            redirectUri: request.redirectUri,
                            code: "",
                            codeVerifier: generatedPkceParams.verifier
                        });
                        request.codeChallenge = generatedPkceParams.challenge;
                        request.codeChallengeMethod = _msalCommon.Constants.S256_CODE_CHALLENGE_METHOD;
                        return [
                            2 /*return*/ ,
                            authCodeRequest
                        ];
                }
            });
        });
    };
    /**
     * Initializer for the logout request.
     * @param logoutRequest
     */ StandardInteractionClient1.prototype.initializeLogoutRequest = function(logoutRequest) {
        this.logger.verbose("initializeLogoutRequest called", logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId);
        var validLogoutRequest = _tslibJs.__assign({
            correlationId: this.browserCrypto.createNewGuid()
        }, logoutRequest);
        /**
         * Set logout_hint to be login_hint from ID Token Claims if present
         * and logoutHint attribute wasn't manually set in logout request
         */ if (logoutRequest) {
            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims
            if (!logoutRequest.logoutHint) {
                if (logoutRequest.account) {
                    var logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);
                    if (logoutHint) {
                        this.logger.verbose("Setting logoutHint to login_hint ID Token Claim value for the account provided");
                        validLogoutRequest.logoutHint = logoutHint;
                    }
                } else this.logger.verbose("logoutHint was not set and account was not passed into logout request, logoutHint will not be set");
            } else this.logger.verbose("logoutHint has already been set in logoutRequest");
        } else this.logger.verbose("logoutHint will not be set since no logout request was configured");
        /*
         * Only set redirect uri if logout request isn't provided or the set uri isn't null.
         * Otherwise, use passed uri, config, or current page.
         */ if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {
            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {
                this.logger.verbose("Setting postLogoutRedirectUri to uri set on logout request", validLogoutRequest.correlationId);
                validLogoutRequest.postLogoutRedirectUri = _msalCommon.UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, _browserUtilsJs.BrowserUtils.getCurrentUri());
            } else if (this.config.auth.postLogoutRedirectUri === null) this.logger.verbose("postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect", validLogoutRequest.correlationId);
            else if (this.config.auth.postLogoutRedirectUri) {
                this.logger.verbose("Setting postLogoutRedirectUri to configured uri", validLogoutRequest.correlationId);
                validLogoutRequest.postLogoutRedirectUri = _msalCommon.UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, _browserUtilsJs.BrowserUtils.getCurrentUri());
            } else {
                this.logger.verbose("Setting postLogoutRedirectUri to current page", validLogoutRequest.correlationId);
                validLogoutRequest.postLogoutRedirectUri = _msalCommon.UrlString.getAbsoluteUrl(_browserUtilsJs.BrowserUtils.getCurrentUri(), _browserUtilsJs.BrowserUtils.getCurrentUri());
            }
        } else this.logger.verbose("postLogoutRedirectUri passed as null, not setting post logout redirect uri", validLogoutRequest.correlationId);
        return validLogoutRequest;
    };
    /**
     * Parses login_hint ID Token Claim out of AccountInfo object to be used as
     * logout_hint in end session request.
     * @param account
     */ StandardInteractionClient1.prototype.getLogoutHintFromIdTokenClaims = function(account) {
        var idTokenClaims = account.idTokenClaims;
        if (idTokenClaims) {
            if (idTokenClaims.login_hint) return idTokenClaims.login_hint;
            else this.logger.verbose("The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request");
        } else this.logger.verbose("The provided account does not contain ID Token Claims, logoutHint will not be added to logout request");
        return null;
    };
    /**
     * Creates an Authorization Code Client with the given authority, or the default authority.
     * @param serverTelemetryManager
     * @param authorityUrl
     */ StandardInteractionClient1.prototype.createAuthCodeClient = function(serverTelemetryManager, authorityUrl, requestAzureCloudOptions) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var clientConfig;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions)
                        ];
                    case 1:
                        clientConfig = _a.sent();
                        return [
                            2 /*return*/ ,
                            new _msalCommon.AuthorizationCodeClient(clientConfig)
                        ];
                }
            });
        });
    };
    /**
     * Creates a Client Configuration object with the given request authority, or the default authority.
     * @param serverTelemetryManager
     * @param requestAuthority
     * @param requestCorrelationId
     */ StandardInteractionClient1.prototype.getClientConfiguration = function(serverTelemetryManager, requestAuthority, requestAzureCloudOptions) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var discoveredAuthority;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.logger.verbose("getClientConfiguration called");
                        return [
                            4 /*yield*/ ,
                            this.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions)
                        ];
                    case 1:
                        discoveredAuthority = _a.sent();
                        return [
                            2 /*return*/ ,
                            {
                                authOptions: {
                                    clientId: this.config.auth.clientId,
                                    authority: discoveredAuthority,
                                    clientCapabilities: this.config.auth.clientCapabilities
                                },
                                systemOptions: {
                                    tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,
                                    preventCorsPreflight: true
                                },
                                loggerOptions: {
                                    loggerCallback: this.config.system.loggerOptions.loggerCallback,
                                    piiLoggingEnabled: this.config.system.loggerOptions.piiLoggingEnabled,
                                    logLevel: this.config.system.loggerOptions.logLevel,
                                    correlationId: this.correlationId
                                },
                                cryptoInterface: this.browserCrypto,
                                networkInterface: this.networkClient,
                                storageInterface: this.browserStorage,
                                serverTelemetryManager: serverTelemetryManager,
                                libraryInfo: {
                                    sku: _browserConstantsJs.BrowserConstants.MSAL_SKU,
                                    version: _packageMetadataJs.version,
                                    cpu: "",
                                    os: ""
                                }
                            }
                        ];
                }
            });
        });
    };
    /**
     * @param hash
     * @param interactionType
     */ StandardInteractionClient1.prototype.validateAndExtractStateFromHash = function(hash, interactionType, requestCorrelationId) {
        this.logger.verbose("validateAndExtractStateFromHash called", requestCorrelationId);
        // Deserialize hash fragment response parameters.
        var serverParams = _msalCommon.UrlString.getDeserializedHash(hash);
        if (!serverParams.state) throw _browserAuthErrorJs.BrowserAuthError.createHashDoesNotContainStateError();
        var platformStateObj = _browserProtocolUtilsJs.BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);
        if (!platformStateObj) throw _browserAuthErrorJs.BrowserAuthError.createUnableToParseStateError();
        if (platformStateObj.interactionType !== interactionType) throw _browserAuthErrorJs.BrowserAuthError.createStateInteractionTypeMismatchError();
        this.logger.verbose("Returning state from hash", requestCorrelationId);
        return serverParams.state;
    };
    /**
     * Used to get a discovered version of the default authority.
     * @param requestAuthority
     * @param requestCorrelationId
     */ StandardInteractionClient1.prototype.getDiscoveredAuthority = function(requestAuthority, requestAzureCloudOptions) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var authorityOptions, userAuthority, builtAuthority;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.logger.verbose("getDiscoveredAuthority called");
                        authorityOptions = {
                            protocolMode: this.config.auth.protocolMode,
                            knownAuthorities: this.config.auth.knownAuthorities,
                            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,
                            authorityMetadata: this.config.auth.authorityMetadata
                        };
                        userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;
                        builtAuthority = _msalCommon.Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);
                        this.logger.verbose("Creating discovered authority with configured authority");
                        return [
                            4 /*yield*/ ,
                            _msalCommon.AuthorityFactory.createDiscoveredInstance(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                }
            });
        });
    };
    /**
     * Helper to initialize required request parameters for interactive APIs and ssoSilent()
     * @param request
     * @param interactionType
     */ StandardInteractionClient1.prototype.initializeAuthorizationRequest = function(request, interactionType) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var redirectUri, browserState, state, validatedRequest, _a, account, legacyLoginHint;
            return _tslibJs.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        this.logger.verbose("initializeAuthorizationRequest called");
                        redirectUri = this.getRedirectUri(request.redirectUri);
                        browserState = {
                            interactionType: interactionType
                        };
                        state = _msalCommon.ProtocolUtils.setRequestState(this.browserCrypto, request && request.state || _msalCommon.Constants.EMPTY_STRING, browserState);
                        _a = [
                            {
                            }
                        ];
                        return [
                            4 /*yield*/ ,
                            this.initializeBaseRequest(request)
                        ];
                    case 1:
                        validatedRequest = _tslibJs.__assign.apply(void 0, [
                            _tslibJs.__assign.apply(void 0, _a.concat([
                                _b.sent()
                            ])),
                            {
                                redirectUri: redirectUri,
                                state: state,
                                nonce: request.nonce || this.browserCrypto.createNewGuid(),
                                responseMode: _msalCommon.ResponseMode.FRAGMENT
                            }
                        ]);
                        account = request.account || this.browserStorage.getActiveAccount();
                        if (account) {
                            this.logger.verbose("Setting validated request account");
                            this.logger.verbosePii("Setting validated request account: " + account);
                            validatedRequest.account = account;
                        }
                        // Check for ADAL/MSAL v1 SSO
                        if (_msalCommon.StringUtils.isEmpty(validatedRequest.loginHint) && !account) {
                            legacyLoginHint = this.browserStorage.getLegacyLoginHint();
                            if (legacyLoginHint) validatedRequest.loginHint = legacyLoginHint;
                        }
                        return [
                            2 /*return*/ ,
                            validatedRequest
                        ];
                }
            });
        });
    };
    return StandardInteractionClient1;
}(_baseInteractionClientJs.BaseInteractionClient);

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","./BaseInteractionClient.js":"c605j","../utils/BrowserConstants.js":"kJnIX","../packageMetadata.js":"hunPb","../error/BrowserAuthError.js":"1rUUr","../utils/BrowserProtocolUtils.js":"i6ZVK","../utils/BrowserUtils.js":"l7wi6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c605j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseInteractionClient", ()=>BaseInteractionClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
var _packageMetadataJs = require("../packageMetadata.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _browserUtilsJs = require("../utils/BrowserUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var BaseInteractionClient = function() {
    function BaseInteractionClient1(config, storageImpl, browserCrypto, logger, eventHandler, correlationId) {
        this.config = config;
        this.browserStorage = storageImpl;
        this.browserCrypto = browserCrypto;
        this.networkClient = this.config.system.networkClient;
        this.eventHandler = eventHandler;
        this.correlationId = correlationId || this.browserCrypto.createNewGuid();
        this.logger = logger.clone(_browserConstantsJs.BrowserConstants.MSAL_SKU, _packageMetadataJs.version, this.correlationId);
    }
    BaseInteractionClient1.prototype.clearCacheOnLogout = function(account) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!account) return [
                            3 /*break*/ ,
                            5
                        ];
                        if (_msalCommon.AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {
                            this.logger.verbose("Setting active account to null");
                            this.browserStorage.setActiveAccount(null);
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.browserStorage.removeAccount(_msalCommon.AccountEntity.generateAccountCacheKey(account))
                        ];
                    case 2:
                        _a.sent();
                        this.logger.verbose("Cleared cache items belonging to the account provided in the logout request.");
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        _a.sent();
                        this.logger.error("Account provided in logout request was not found. Local cache unchanged.");
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            3 /*break*/ ,
                            9
                        ];
                    case 5:
                        _a.trys.push([
                            5,
                            8,
                            ,
                            9
                        ]);
                        // Clear all accounts and tokens
                        return [
                            4 /*yield*/ ,
                            this.browserStorage.clear()
                        ];
                    case 6:
                        // Clear all accounts and tokens
                        _a.sent();
                        // Clear any stray keys from IndexedDB
                        return [
                            4 /*yield*/ ,
                            this.browserCrypto.clearKeystore()
                        ];
                    case 7:
                        // Clear any stray keys from IndexedDB
                        _a.sent();
                        this.logger.verbose("No account provided in logout request, clearing all cache items.");
                        return [
                            3 /*break*/ ,
                            9
                        ];
                    case 8:
                        _a.sent();
                        this.logger.error("Attempted to clear all MSAL cache items and failed. Local cache unchanged.");
                        return [
                            3 /*break*/ ,
                            9
                        ];
                    case 9:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Initializer function for all request APIs
     * @param request
     */ BaseInteractionClient1.prototype.initializeBaseRequest = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var authority, scopes, validatedRequest, _a;
            return _tslibJs.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        this.logger.verbose("Initializing BaseAuthRequest");
                        authority = request.authority || this.config.auth.authority;
                        scopes = _tslibJs.__spread(request && request.scopes || []);
                        validatedRequest = _tslibJs.__assign(_tslibJs.__assign({
                        }, request), {
                            correlationId: this.correlationId,
                            authority: authority,
                            scopes: scopes
                        });
                        // Set authenticationScheme to BEARER if not explicitly set in the request
                        if (!validatedRequest.authenticationScheme) {
                            validatedRequest.authenticationScheme = _msalCommon.AuthenticationScheme.BEARER;
                            this.logger.verbose("Authentication Scheme wasn't explicitly set in request, defaulting to \"Bearer\" request");
                        } else {
                            if (validatedRequest.authenticationScheme === _msalCommon.AuthenticationScheme.SSH) {
                                if (!request.sshJwk) throw _msalCommon.ClientConfigurationError.createMissingSshJwkError();
                                if (!request.sshKid) throw _msalCommon.ClientConfigurationError.createMissingSshKidError();
                            }
                            this.logger.verbose("Authentication Scheme set to \"" + validatedRequest.authenticationScheme + "\" as configured in Auth request");
                        }
                        if (!(request.claims && !_msalCommon.StringUtils.isEmpty(request.claims))) return [
                            3 /*break*/ ,
                            2
                        ];
                        _a = validatedRequest;
                        return [
                            4 /*yield*/ ,
                            this.browserCrypto.hashString(request.claims)
                        ];
                    case 1:
                        _a.requestedClaimsHash = _b.sent();
                        _b.label = 2;
                    case 2:
                        return [
                            2 /*return*/ ,
                            validatedRequest
                        ];
                }
            });
        });
    };
    /**
     *
     * Use to get the redirect uri configured in MSAL or null.
     * @param requestRedirectUri
     * @returns Redirect URL
     *
     */ BaseInteractionClient1.prototype.getRedirectUri = function(requestRedirectUri) {
        this.logger.verbose("getRedirectUri called");
        var redirectUri = requestRedirectUri || this.config.auth.redirectUri || _browserUtilsJs.BrowserUtils.getCurrentUri();
        return _msalCommon.UrlString.getAbsoluteUrl(redirectUri, _browserUtilsJs.BrowserUtils.getCurrentUri());
    };
    /**
     *
     * @param apiId
     * @param correlationId
     * @param forceRefresh
     */ BaseInteractionClient1.prototype.initializeServerTelemetryManager = function(apiId, forceRefresh) {
        this.logger.verbose("initializeServerTelemetryManager called");
        var telemetryPayload = {
            clientId: this.config.auth.clientId,
            correlationId: this.correlationId,
            apiId: apiId,
            forceRefresh: forceRefresh || false,
            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],
            wrapperVer: this.browserStorage.getWrapperMetadata()[1]
        };
        return new _msalCommon.ServerTelemetryManager(telemetryPayload, this.browserStorage);
    };
    return BaseInteractionClient1;
}();

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","../packageMetadata.js":"hunPb","../utils/BrowserConstants.js":"kJnIX","../utils/BrowserUtils.js":"l7wi6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ts4J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopupUtils", ()=>PopupUtils
);
var _msalCommon = require("@azure/msal-common");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _browserConstantsJs = require("./BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var PopupUtils = function() {
    function PopupUtils1(storageImpl, logger) {
        this.browserStorage = storageImpl;
        this.logger = logger;
        // Properly sets this reference for the unload event.
        this.unloadWindow = this.unloadWindow.bind(this);
    }
    /**
     * @hidden
     *
     * Configures popup window for login.
     *
     * @param urlNavigate
     * @param title
     * @param popUpWidth
     * @param popUpHeight
     * @param popupWindowAttributes
     * @ignore
     * @hidden
     */ PopupUtils1.prototype.openPopup = function(urlNavigate, popupParams) {
        try {
            var popupWindow = void 0;
            // Popup window passed in, setting url to navigate to
            if (popupParams.popup) {
                popupWindow = popupParams.popup;
                this.logger.verbosePii("Navigating popup window to: " + urlNavigate);
                popupWindow.location.assign(urlNavigate);
            } else if (typeof popupParams.popup === "undefined") {
                // Popup will be undefined if it was not passed in
                this.logger.verbosePii("Opening popup window to: " + urlNavigate);
                popupWindow = PopupUtils1.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes, this.logger);
            }
            // Popup will be null if popups are blocked
            if (!popupWindow) throw _browserAuthErrorJs.BrowserAuthError.createEmptyWindowCreatedError();
            if (popupWindow.focus) popupWindow.focus();
            this.currentWindow = popupWindow;
            window.addEventListener("beforeunload", this.unloadWindow);
            return popupWindow;
        } catch (e) {
            this.logger.error("error opening popup " + e.message);
            this.browserStorage.setInteractionInProgress(false);
            throw _browserAuthErrorJs.BrowserAuthError.createPopupWindowError(e.toString());
        }
    };
    /**
     * Helper function to set popup window dimensions and position
     * @param urlNavigate
     * @param popupName
     * @param popupWindowAttributes
     * @returns
     */ PopupUtils1.openSizedPopup = function(urlNavigate, popupName, popupWindowAttributes, logger) {
        var _a, _b, _c, _d;
        /**
         * adding winLeft and winTop to account for dual monitor
         * using screenLeft and screenTop for IE8 and earlier
         */ var winLeft = window.screenLeft ? window.screenLeft : window.screenX;
        var winTop = window.screenTop ? window.screenTop : window.screenY;
        /**
         * window.innerWidth displays browser window"s height and width excluding toolbars
         * using document.documentElement.clientWidth for IE8 and earlier
         */ var winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        var winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        var width = (_a = popupWindowAttributes.popupSize) === null || _a === void 0 ? void 0 : _a.width;
        var height = (_b = popupWindowAttributes.popupSize) === null || _b === void 0 ? void 0 : _b.height;
        var top = (_c = popupWindowAttributes.popupPosition) === null || _c === void 0 ? void 0 : _c.top;
        var left = (_d = popupWindowAttributes.popupPosition) === null || _d === void 0 ? void 0 : _d.left;
        if (!width || width < 0 || width > winWidth) {
            logger.verbose("Default popup window width used. Window width not configured or invalid.");
            width = _browserConstantsJs.BrowserConstants.POPUP_WIDTH;
        }
        if (!height || height < 0 || height > winHeight) {
            logger.verbose("Default popup window height used. Window height not configured or invalid.");
            height = _browserConstantsJs.BrowserConstants.POPUP_HEIGHT;
        }
        if (!top || top < 0 || top > winHeight) {
            logger.verbose("Default popup window top position used. Window top not configured or invalid.");
            top = Math.max(0, winHeight / 2 - _browserConstantsJs.BrowserConstants.POPUP_HEIGHT / 2 + winTop);
        }
        if (!left || left < 0 || left > winWidth) {
            logger.verbose("Default popup window left position used. Window left not configured or invalid.");
            left = Math.max(0, winWidth / 2 - _browserConstantsJs.BrowserConstants.POPUP_WIDTH / 2 + winLeft);
        }
        return window.open(urlNavigate, popupName, "width=" + width + ", height=" + height + ", top=" + top + ", left=" + left + ", scrollbars=yes");
    };
    /**
     * Event callback to unload main window.
     */ PopupUtils1.prototype.unloadWindow = function(e) {
        this.browserStorage.cleanRequestByInteractionType(_browserConstantsJs.InteractionType.Popup);
        if (this.currentWindow) this.currentWindow.close();
        // Guarantees browser unload will happen, so no other errors will be thrown.
        e.preventDefault();
    };
    /**
     * Closes popup, removes any state vars created during popup calls.
     * @param popupWindow
     */ PopupUtils1.prototype.cleanPopup = function(popupWindow) {
        if (popupWindow) // Close window.
        popupWindow.close();
        // Remove window unload function
        window.removeEventListener("beforeunload", this.unloadWindow);
        // Interaction is completed - remove interaction status.
        this.browserStorage.setInteractionInProgress(false);
    };
    /**
     * Monitors a window until it loads a url with the same origin.
     * @param popupWindow - window that is being monitored
     */ PopupUtils1.prototype.monitorPopupForSameOrigin = function(popupWindow) {
        var _this = this;
        return new Promise(function(resolve, reject) {
            var intervalId = setInterval(function() {
                if (popupWindow.closed) {
                    // Window is closed
                    _this.cleanPopup();
                    clearInterval(intervalId);
                    reject(_browserAuthErrorJs.BrowserAuthError.createUserCancelledError());
                    return;
                }
                var href = _msalCommon.Constants.EMPTY_STRING;
                try {
                    /*
                     * Will throw if cross origin,
                     * which should be caught and ignored
                     * since we need the interval to keep running while on STS UI.
                     */ href = popupWindow.location.href;
                } catch (e) {
                }
                // Don't process blank pages or cross domain
                if (_msalCommon.StringUtils.isEmpty(href) || href === "about:blank") return;
                clearInterval(intervalId);
                resolve();
            }, _browserConstantsJs.BrowserConstants.POLL_INTERVAL_MS);
        });
    };
    /**
     * Generates the name for the popup based on the client id and request
     * @param clientId
     * @param request
     */ PopupUtils1.generatePopupName = function(clientId, scopes, authority, correlationId) {
        return _browserConstantsJs.BrowserConstants.POPUP_NAME_PREFIX + "." + clientId + "." + scopes.join("-") + "." + authority + "." + correlationId;
    };
    /**
     * Generates the name for the popup based on the client id and request for logouts
     * @param clientId
     * @param request
     */ PopupUtils1.generateLogoutPopupName = function(clientId, request) {
        var homeAccountId = request.account && request.account.homeAccountId;
        return _browserConstantsJs.BrowserConstants.POPUP_NAME_PREFIX + "." + clientId + "." + homeAccountId + "." + request.correlationId;
    };
    return PopupUtils1;
}();

},{"@azure/msal-common":"liWRx","../error/BrowserAuthError.js":"1rUUr","./BrowserConstants.js":"kJnIX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2s5F7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PopupHandler", ()=>PopupHandler
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
var _interactionHandlerJs = require("./InteractionHandler.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _popupUtilsJs = require("../utils/PopupUtils.js");
var _browserUtilsJs = require("../utils/BrowserUtils.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * This class implements the interaction handler base class for browsers. It is written specifically for handling
 * popup window scenarios. It includes functions for monitoring the popup window for a hash.
 */ var PopupHandler = function(_super) {
    _tslibJs.__extends(PopupHandler1, _super);
    function PopupHandler1(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) {
        var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this;
        // Properly sets this reference for the unload event.
        _this.popupUtils = new _popupUtilsJs.PopupUtils(storageImpl, browserRequestLogger);
        return _this;
    }
    /**
     * Opens a popup window with given request Url.
     * @param requestUrl
     */ PopupHandler1.prototype.initiateAuthRequest = function(requestUrl, params) {
        // Check that request url is not empty.
        if (!_msalCommon.StringUtils.isEmpty(requestUrl)) {
            this.browserRequestLogger.infoPii("Navigate to: " + requestUrl);
            // Open the popup window to requestUrl.
            return this.popupUtils.openPopup(requestUrl, params);
        } else {
            // Throw error if request URL is empty.
            this.browserRequestLogger.error("Navigate url is empty");
            throw _browserAuthErrorJs.BrowserAuthError.createEmptyNavigationUriError();
        }
    };
    /**
     * Monitors a window until it loads a url with a known hash, or hits a specified timeout.
     * @param popupWindow - window that is being monitored
     * @param timeout - milliseconds until timeout
     */ PopupHandler1.prototype.monitorPopupForHash = function(popupWindow) {
        var _this = this;
        return this.popupUtils.monitorPopupForSameOrigin(popupWindow).then(function() {
            var contentHash = popupWindow.location.hash;
            _browserUtilsJs.BrowserUtils.clearHash(popupWindow);
            _this.popupUtils.cleanPopup(popupWindow);
            if (!contentHash) throw _browserAuthErrorJs.BrowserAuthError.createEmptyHashError(popupWindow.location.href);
            if (_msalCommon.UrlString.hashContainsKnownProperties(contentHash)) return contentHash;
            else throw _browserAuthErrorJs.BrowserAuthError.createHashDoesNotContainKnownPropertiesError();
        });
    };
    return PopupHandler1;
}(_interactionHandlerJs.InteractionHandler);

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","./InteractionHandler.js":"cS9BW","../error/BrowserAuthError.js":"1rUUr","../utils/PopupUtils.js":"1ts4J","../utils/BrowserUtils.js":"l7wi6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cS9BW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InteractionHandler", ()=>InteractionHandler
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Abstract class which defines operations for a browser interaction handling class.
 */ var InteractionHandler = function() {
    function InteractionHandler1(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) {
        this.authModule = authCodeModule;
        this.browserStorage = storageImpl;
        this.authCodeRequest = authCodeRequest;
        this.browserRequestLogger = browserRequestLogger;
    }
    /**
     * Function to handle response parameters from hash.
     * @param locationHash
     */ InteractionHandler1.prototype.handleCodeResponseFromHash = function(locationHash, state, authority, networkModule) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var stateKey, requestState, authCodeResponse;
            return _tslibJs.__generator(this, function(_a) {
                this.browserRequestLogger.verbose("InteractionHandler.handleCodeResponse called");
                // Check that location hash isn't empty.
                if (_msalCommon.StringUtils.isEmpty(locationHash)) throw _browserAuthErrorJs.BrowserAuthError.createEmptyHashError(locationHash);
                stateKey = this.browserStorage.generateStateKey(state);
                requestState = this.browserStorage.getTemporaryCache(stateKey);
                if (!requestState) throw _msalCommon.ClientAuthError.createStateNotFoundError("Cached State");
                authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);
                return [
                    2 /*return*/ ,
                    this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule)
                ];
            });
        });
    };
    /**
     * Process auth code response from AAD
     * @param authCodeResponse
     * @param state
     * @param authority
     * @param networkModule
     * @returns
     */ InteractionHandler1.prototype.handleCodeResponseFromServer = function(authCodeResponse, state, authority, networkModule, validateNonce) {
        if (validateNonce === void 0) validateNonce = true;
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var stateKey, requestState, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.browserRequestLogger.trace("InteractionHandler.handleCodeResponseFromServer called");
                        stateKey = this.browserStorage.generateStateKey(state);
                        requestState = this.browserStorage.getTemporaryCache(stateKey);
                        if (!requestState) throw _msalCommon.ClientAuthError.createStateNotFoundError("Cached State");
                        nonceKey = this.browserStorage.generateNonceKey(requestState);
                        cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);
                        // Assign code to request
                        this.authCodeRequest.code = authCodeResponse.code;
                        if (!authCodeResponse.cloud_instance_host_name) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)
                        ];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)
                        if (validateNonce) authCodeResponse.nonce = cachedNonce || undefined;
                        authCodeResponse.state = requestState;
                        // Add CCS parameters if available
                        if (authCodeResponse.client_info) this.authCodeRequest.clientInfo = authCodeResponse.client_info;
                        else {
                            cachedCcsCred = this.checkCcsCredentials();
                            if (cachedCcsCred) this.authCodeRequest.ccsCredential = cachedCcsCred;
                        }
                        return [
                            4 /*yield*/ ,
                            this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)
                        ];
                    case 3:
                        tokenResponse = _a.sent();
                        this.browserStorage.cleanRequestByState(state);
                        return [
                            2 /*return*/ ,
                            tokenResponse
                        ];
                }
            });
        });
    };
    /**
     * Updates authority based on cloudInstanceHostname
     * @param cloudInstanceHostname
     * @param authority
     * @param networkModule
     */ InteractionHandler1.prototype.updateTokenEndpointAuthority = function(cloudInstanceHostname, authority, networkModule) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var cloudInstanceAuthorityUri, cloudInstanceAuthority;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        cloudInstanceAuthorityUri = "https://" + cloudInstanceHostname + "/" + authority.tenant + "/";
                        return [
                            4 /*yield*/ ,
                            _msalCommon.AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options)
                        ];
                    case 1:
                        cloudInstanceAuthority = _a.sent();
                        this.authModule.updateAuthority(cloudInstanceAuthority);
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Looks up ccs creds in the cache
     */ InteractionHandler1.prototype.checkCcsCredentials = function() {
        // Look up ccs credential in temp cache
        var cachedCcsCred = this.browserStorage.getTemporaryCache(_browserConstantsJs.TemporaryCacheKeys.CCS_CREDENTIAL, true);
        if (cachedCcsCred) try {
            return JSON.parse(cachedCcsCred);
        } catch (e) {
            this.authModule.logger.error("Cache credential could not be parsed");
            this.authModule.logger.errorPii("Cache credential could not be parsed: " + cachedCcsCred);
        }
        return null;
    };
    return InteractionHandler1;
}();

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","../error/BrowserAuthError.js":"1rUUr","../utils/BrowserConstants.js":"kJnIX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fuuSL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RedirectClient", ()=>RedirectClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
var _standardInteractionClientJs = require("./StandardInteractionClient.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _redirectHandlerJs = require("../interaction_handler/RedirectHandler.js");
var _browserUtilsJs = require("../utils/BrowserUtils.js");
var _eventTypeJs = require("../event/EventType.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var RedirectClient = function(_super) {
    _tslibJs.__extends(RedirectClient1, _super);
    function RedirectClient1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Redirects the page to the /authorize endpoint of the IDP
     * @param request
     */ RedirectClient1.prototype.acquireToken = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var validRequest, serverTelemetryManager, handleBackButton, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_1;
            var _this = this;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.initializeAuthorizationRequest(request, _browserConstantsJs.InteractionType.Redirect)
                        ];
                    case 1:
                        validRequest = _a.sent();
                        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || "", validRequest.account || null);
                        serverTelemetryManager = this.initializeServerTelemetryManager(_browserConstantsJs.ApiId.acquireTokenRedirect);
                        handleBackButton = function(event) {
                            // Clear temporary cache if the back button is clicked during the redirect flow.
                            if (event.persisted) {
                                _this.logger.verbose("Page was restored from back/forward cache. Clearing temporary cache.");
                                _this.browserStorage.cleanRequestByState(validRequest.state);
                            }
                        };
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            7,
                            ,
                            8
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.initializeAuthorizationCodeRequest(validRequest)
                        ];
                    case 3:
                        authCodeRequest = _a.sent();
                        return [
                            4 /*yield*/ ,
                            this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)
                        ];
                    case 4:
                        authClient = _a.sent();
                        this.logger.verbose("Auth code client created");
                        interactionHandler = new _redirectHandlerJs.RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto);
                        return [
                            4 /*yield*/ ,
                            authClient.getAuthCodeUrl(validRequest)
                        ];
                    case 5:
                        navigateUrl = _a.sent();
                        redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);
                        this.logger.verbosePii("Redirect start page: " + redirectStartPage);
                        // Clear temporary cache if the back button is clicked during the redirect flow.
                        window.addEventListener("pageshow", handleBackButton);
                        return [
                            4 /*yield*/ ,
                            interactionHandler.initiateAuthRequest(navigateUrl, {
                                navigationClient: this.navigationClient,
                                redirectTimeout: this.config.system.redirectNavigationTimeout,
                                redirectStartPage: redirectStartPage,
                                onRedirectNavigate: request.onRedirectNavigate
                            })
                        ];
                    case 6:
                        // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                    case 7:
                        e_1 = _a.sent();
                        if (e_1 instanceof _msalCommon.AuthError) e_1.setCorrelationId(this.correlationId);
                        window.removeEventListener("pageshow", handleBackButton);
                        serverTelemetryManager.cacheFailedRequest(e_1);
                        this.browserStorage.cleanRequestByState(validRequest.state);
                        throw e_1;
                    case 8:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Checks if navigateToLoginRequestUrl is set, and:
     * - if true, performs logic to cache and navigate
     * - if false, handles hash string and parses response
     * @param hash
     */ RedirectClient1.prototype.handleRedirectPromise = function(hash) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var serverTelemetryManager, responseHash, state, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, navigationOptions, processHashOnRedirect, homepage, e_2;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        serverTelemetryManager = this.initializeServerTelemetryManager(_browserConstantsJs.ApiId.handleRedirectPromise);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            10,
                            ,
                            11
                        ]);
                        if (!this.browserStorage.isInteractionInProgress(true)) {
                            this.logger.info("handleRedirectPromise called but there is no interaction in progress, returning null.");
                            return [
                                2 /*return*/ ,
                                null
                            ];
                        }
                        responseHash = this.getRedirectResponseHash(hash || window.location.hash);
                        if (!responseHash) {
                            // Not a recognized server response hash or hash not associated with a redirect request
                            this.logger.info("handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.");
                            this.browserStorage.cleanRequestByInteractionType(_browserConstantsJs.InteractionType.Redirect);
                            return [
                                2 /*return*/ ,
                                null
                            ];
                        }
                        state = void 0;
                        try {
                            state = this.validateAndExtractStateFromHash(responseHash, _browserConstantsJs.InteractionType.Redirect);
                            this.logger.verbose("State extracted from hash");
                        } catch (e) {
                            this.logger.info("handleRedirectPromise was unable to extract state due to: " + e);
                            this.browserStorage.cleanRequestByInteractionType(_browserConstantsJs.InteractionType.Redirect);
                            return [
                                2 /*return*/ ,
                                null
                            ];
                        }
                        loginRequestUrl = this.browserStorage.getTemporaryCache(_browserConstantsJs.TemporaryCacheKeys.ORIGIN_URI, true) || "";
                        loginRequestUrlNormalized = _msalCommon.UrlString.removeHashFromUrl(loginRequestUrl);
                        currentUrlNormalized = _msalCommon.UrlString.removeHashFromUrl(window.location.href);
                        if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [
                            3 /*break*/ ,
                            3
                        ];
                        // We are on the page we need to navigate to - handle hash
                        this.logger.verbose("Current page is loginRequestUrl, handling hash");
                        return [
                            4 /*yield*/ ,
                            this.handleHash(responseHash, state, serverTelemetryManager)
                        ];
                    case 2:
                        handleHashResult = _a.sent();
                        if (loginRequestUrl.indexOf("#") > -1) // Replace current hash with non-msal hash, if present
                        _browserUtilsJs.BrowserUtils.replaceHash(loginRequestUrl);
                        return [
                            2 /*return*/ ,
                            handleHashResult
                        ];
                    case 3:
                        if (!!this.config.auth.navigateToLoginRequestUrl) return [
                            3 /*break*/ ,
                            4
                        ];
                        this.logger.verbose("NavigateToLoginRequestUrl set to false, handling hash");
                        return [
                            2 /*return*/ ,
                            this.handleHash(responseHash, state, serverTelemetryManager)
                        ];
                    case 4:
                        if (!(!_browserUtilsJs.BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe)) return [
                            3 /*break*/ ,
                            9
                        ];
                        /*
                         * Returned from authority using redirect - need to perform navigation before processing response
                         * Cache the hash to be retrieved after the next redirect
                         */ this.browserStorage.setTemporaryCache(_browserConstantsJs.TemporaryCacheKeys.URL_HASH, responseHash, true);
                        navigationOptions = {
                            apiId: _browserConstantsJs.ApiId.handleRedirectPromise,
                            timeout: this.config.system.redirectNavigationTimeout,
                            noHistory: true
                        };
                        processHashOnRedirect = true;
                        if (!(!loginRequestUrl || loginRequestUrl === "null")) return [
                            3 /*break*/ ,
                            6
                        ];
                        homepage = _browserUtilsJs.BrowserUtils.getHomepage();
                        // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage
                        this.browserStorage.setTemporaryCache(_browserConstantsJs.TemporaryCacheKeys.ORIGIN_URI, homepage, true);
                        this.logger.warning("Unable to get valid login request url from cache, redirecting to home page");
                        return [
                            4 /*yield*/ ,
                            this.navigationClient.navigateInternal(homepage, navigationOptions)
                        ];
                    case 5:
                        processHashOnRedirect = _a.sent();
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 6:
                        // Navigate to page that initiated the redirect request
                        this.logger.verbose("Navigating to loginRequestUrl: " + loginRequestUrl);
                        return [
                            4 /*yield*/ ,
                            this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions)
                        ];
                    case 7:
                        processHashOnRedirect = _a.sent();
                        _a.label = 8;
                    case 8:
                        // If navigateInternal implementation returns false, handle the hash now
                        if (!processHashOnRedirect) return [
                            2 /*return*/ ,
                            this.handleHash(responseHash, state, serverTelemetryManager)
                        ];
                        _a.label = 9;
                    case 9:
                        return [
                            2 /*return*/ ,
                            null
                        ];
                    case 10:
                        e_2 = _a.sent();
                        if (e_2 instanceof _msalCommon.AuthError) e_2.setCorrelationId(this.correlationId);
                        serverTelemetryManager.cacheFailedRequest(e_2);
                        this.browserStorage.cleanRequestByInteractionType(_browserConstantsJs.InteractionType.Redirect);
                        throw e_2;
                    case 11:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Gets the response hash for a redirect request
     * Returns null if interactionType in the state value is not "redirect" or the hash does not contain known properties
     * @param hash
     */ RedirectClient1.prototype.getRedirectResponseHash = function(hash) {
        this.logger.verbose("getRedirectResponseHash called");
        // Get current location hash from window or cache.
        var isResponseHash = _msalCommon.UrlString.hashContainsKnownProperties(hash);
        if (isResponseHash) {
            _browserUtilsJs.BrowserUtils.clearHash(window);
            this.logger.verbose("Hash contains known properties, returning response hash");
            return hash;
        }
        var cachedHash = this.browserStorage.getTemporaryCache(_browserConstantsJs.TemporaryCacheKeys.URL_HASH, true);
        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(_browserConstantsJs.TemporaryCacheKeys.URL_HASH));
        this.logger.verbose("Hash does not contain known properties, returning cached hash");
        return cachedHash;
    };
    /**
     * Checks if hash exists and handles in window.
     * @param hash
     * @param state
     */ RedirectClient1.prototype.handleHash = function(hash, state, serverTelemetryManager) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var cachedRequest, currentAuthority, authClient, interactionHandler;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);
                        this.logger.verbose("handleHash called, retrieved cached request");
                        currentAuthority = this.browserStorage.getCachedAuthority(state);
                        if (!currentAuthority) throw _browserAuthErrorJs.BrowserAuthError.createNoCachedAuthorityError();
                        return [
                            4 /*yield*/ ,
                            this.createAuthCodeClient(serverTelemetryManager, currentAuthority)
                        ];
                    case 1:
                        authClient = _a.sent();
                        this.logger.verbose("Auth code client created");
                        interactionHandler = new _redirectHandlerJs.RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto);
                        return [
                            4 /*yield*/ ,
                            interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient, this.config.auth.clientId)
                        ];
                    case 2:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                }
            });
        });
    };
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param logoutRequest
     */ RedirectClient1.prototype.logout = function(logoutRequest) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var validLogoutRequest, serverTelemetryManager, navigationOptions, authClient, logoutUri, navigate, e_3;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.logger.verbose("logoutRedirect called");
                        validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
                        serverTelemetryManager = this.initializeServerTelemetryManager(_browserConstantsJs.ApiId.logout);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            10,
                            ,
                            11
                        ]);
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGOUT_START, _browserConstantsJs.InteractionType.Redirect, logoutRequest);
                        // Clear cache on logout
                        return [
                            4 /*yield*/ ,
                            this.clearCacheOnLogout(validLogoutRequest.account)
                        ];
                    case 2:
                        // Clear cache on logout
                        _a.sent();
                        navigationOptions = {
                            apiId: _browserConstantsJs.ApiId.logout,
                            timeout: this.config.system.redirectNavigationTimeout,
                            noHistory: false
                        };
                        return [
                            4 /*yield*/ ,
                            this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)
                        ];
                    case 3:
                        authClient = _a.sent();
                        this.logger.verbose("Auth code client created");
                        logoutUri = authClient.getLogoutUri(validLogoutRequest);
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGOUT_SUCCESS, _browserConstantsJs.InteractionType.Redirect, validLogoutRequest);
                        if (!(logoutRequest && typeof logoutRequest.onRedirectNavigate === "function")) return [
                            3 /*break*/ ,
                            7
                        ];
                        navigate = logoutRequest.onRedirectNavigate(logoutUri);
                        if (!(navigate !== false)) return [
                            3 /*break*/ ,
                            5
                        ];
                        this.logger.verbose("Logout onRedirectNavigate did not return false, navigating");
                        return [
                            4 /*yield*/ ,
                            this.navigationClient.navigateExternal(logoutUri, navigationOptions)
                        ];
                    case 4:
                        _a.sent();
                        return [
                            2 /*return*/ 
                        ];
                    case 5:
                        this.logger.verbose("Logout onRedirectNavigate returned false, stopping navigation");
                        _a.label = 6;
                    case 6:
                        return [
                            3 /*break*/ ,
                            9
                        ];
                    case 7:
                        return [
                            4 /*yield*/ ,
                            this.navigationClient.navigateExternal(logoutUri, navigationOptions)
                        ];
                    case 8:
                        _a.sent();
                        return [
                            2 /*return*/ 
                        ];
                    case 9:
                        return [
                            3 /*break*/ ,
                            11
                        ];
                    case 10:
                        e_3 = _a.sent();
                        if (e_3 instanceof _msalCommon.AuthError) e_3.setCorrelationId(this.correlationId);
                        serverTelemetryManager.cacheFailedRequest(e_3);
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGOUT_FAILURE, _browserConstantsJs.InteractionType.Redirect, null, e_3);
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGOUT_END, _browserConstantsJs.InteractionType.Redirect);
                        throw e_3;
                    case 11:
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.LOGOUT_END, _browserConstantsJs.InteractionType.Redirect);
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Use to get the redirectStartPage either from request or use current window
     * @param requestStartPage
     */ RedirectClient1.prototype.getRedirectStartPage = function(requestStartPage) {
        var redirectStartPage = requestStartPage || window.location.href;
        return _msalCommon.UrlString.getAbsoluteUrl(redirectStartPage, _browserUtilsJs.BrowserUtils.getCurrentUri());
    };
    return RedirectClient1;
}(_standardInteractionClientJs.StandardInteractionClient);

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","./StandardInteractionClient.js":"64K8D","../utils/BrowserConstants.js":"kJnIX","../interaction_handler/RedirectHandler.js":"eHJQ9","../utils/BrowserUtils.js":"l7wi6","../event/EventType.js":"cjqlF","../error/BrowserAuthError.js":"1rUUr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eHJQ9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RedirectHandler", ()=>RedirectHandler
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _interactionHandlerJs = require("./InteractionHandler.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var RedirectHandler = function(_super) {
    _tslibJs.__extends(RedirectHandler1, _super);
    function RedirectHandler1(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger, browserCrypto) {
        var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this;
        _this.browserCrypto = browserCrypto;
        return _this;
    }
    /**
     * Redirects window to given URL.
     * @param urlNavigate
     */ RedirectHandler1.prototype.initiateAuthRequest = function(requestUrl, params) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var navigationOptions, navigate;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest called");
                        if (!!_msalCommon.StringUtils.isEmpty(requestUrl)) return [
                            3 /*break*/ ,
                            7
                        ];
                        // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true
                        if (params.redirectStartPage) {
                            this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page");
                            this.browserStorage.setTemporaryCache(_browserConstantsJs.TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);
                        }
                        // Set interaction status in the library.
                        this.browserStorage.setTemporaryCache(_browserConstantsJs.TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);
                        this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);
                        this.browserRequestLogger.infoPii("RedirectHandler.initiateAuthRequest: Navigate to: " + requestUrl);
                        navigationOptions = {
                            apiId: _browserConstantsJs.ApiId.acquireTokenRedirect,
                            timeout: params.redirectTimeout,
                            noHistory: false
                        };
                        if (!(typeof params.onRedirectNavigate === "function")) return [
                            3 /*break*/ ,
                            4
                        ];
                        this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback");
                        navigate = params.onRedirectNavigate(requestUrl);
                        if (!(navigate !== false)) return [
                            3 /*break*/ ,
                            2
                        ];
                        this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating");
                        return [
                            4 /*yield*/ ,
                            params.navigationClient.navigateExternal(requestUrl, navigationOptions)
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2 /*return*/ 
                        ];
                    case 2:
                        this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation");
                        return [
                            2 /*return*/ 
                        ];
                    case 3:
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 4:
                        // Navigate window to request URL
                        this.browserRequestLogger.verbose("RedirectHandler.initiateAuthRequest: Navigating window to navigate url");
                        return [
                            4 /*yield*/ ,
                            params.navigationClient.navigateExternal(requestUrl, navigationOptions)
                        ];
                    case 5:
                        _a.sent();
                        return [
                            2 /*return*/ 
                        ];
                    case 6:
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 7:
                        // Throw error if request URL is empty.
                        this.browserRequestLogger.info("RedirectHandler.initiateAuthRequest: Navigate url is empty");
                        throw _browserAuthErrorJs.BrowserAuthError.createEmptyNavigationUriError();
                    case 8:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Handle authorization code response in the window.
     * @param hash
     */ RedirectHandler1.prototype.handleCodeResponseFromHash = function(locationHash, state, authority, networkModule, clientId) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.browserRequestLogger.verbose("RedirectHandler.handleCodeResponse called");
                        // Check that location hash isn't empty.
                        if (_msalCommon.StringUtils.isEmpty(locationHash)) throw _browserAuthErrorJs.BrowserAuthError.createEmptyHashError(locationHash);
                        // Interaction is completed - remove interaction status.
                        this.browserStorage.setInteractionInProgress(false);
                        stateKey = this.browserStorage.generateStateKey(state);
                        requestState = this.browserStorage.getTemporaryCache(stateKey);
                        if (!requestState) throw _msalCommon.ClientAuthError.createStateNotFoundError("Cached State");
                        authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);
                        nonceKey = this.browserStorage.generateNonceKey(requestState);
                        cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);
                        // Assign code to request
                        this.authCodeRequest.code = authCodeResponse.code;
                        if (!authCodeResponse.cloud_instance_host_name) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)
                        ];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        authCodeResponse.nonce = cachedNonce || undefined;
                        authCodeResponse.state = requestState;
                        // Add CCS parameters if available
                        if (authCodeResponse.client_info) this.authCodeRequest.clientInfo = authCodeResponse.client_info;
                        else {
                            cachedCcsCred = this.checkCcsCredentials();
                            if (cachedCcsCred) this.authCodeRequest.ccsCredential = cachedCcsCred;
                        }
                        // Remove throttle if it exists
                        if (clientId) _msalCommon.ThrottlingUtils.removeThrottle(this.browserStorage, clientId, this.authCodeRequest);
                        return [
                            4 /*yield*/ ,
                            this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)
                        ];
                    case 3:
                        tokenResponse = _a.sent();
                        this.browserStorage.cleanRequestByState(state);
                        return [
                            2 /*return*/ ,
                            tokenResponse
                        ];
                }
            });
        });
    };
    return RedirectHandler1;
}(_interactionHandlerJs.InteractionHandler);

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","../error/BrowserAuthError.js":"1rUUr","../utils/BrowserConstants.js":"kJnIX","./InteractionHandler.js":"cS9BW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5nAus":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SilentIframeClient", ()=>SilentIframeClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
var _standardInteractionClientJs = require("./StandardInteractionClient.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _silentHandlerJs = require("../interaction_handler/SilentHandler.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var SilentIframeClient = function(_super) {
    _tslibJs.__extends(SilentIframeClient1, _super);
    function SilentIframeClient1(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, correlationId) {
        var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId) || this;
        _this.apiId = apiId;
        return _this;
    }
    /**
     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none
     * @param request
     */ SilentIframeClient1.prototype.acquireToken = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var silentRequest, serverTelemetryManager, authCodeRequest, authClient, navigateUrl, e_1;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.logger.verbose("acquireTokenByIframe called");
                        // Check that we have some SSO data
                        if (_msalCommon.StringUtils.isEmpty(request.loginHint) && _msalCommon.StringUtils.isEmpty(request.sid) && (!request.account || _msalCommon.StringUtils.isEmpty(request.account.username))) this.logger.warning("No user hint provided. The authorization server may need more information to complete this request.");
                        // Check that prompt is set to none, throw error if it is set to anything else.
                        if (request.prompt && request.prompt !== _msalCommon.PromptValue.NONE) throw _browserAuthErrorJs.BrowserAuthError.createSilentPromptValueError(request.prompt);
                        return [
                            4 /*yield*/ ,
                            this.initializeAuthorizationRequest(_tslibJs.__assign(_tslibJs.__assign({
                            }, request), {
                                prompt: _msalCommon.PromptValue.NONE
                            }), _browserConstantsJs.InteractionType.Silent)
                        ];
                    case 1:
                        silentRequest = _a.sent();
                        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || "", silentRequest.account || null);
                        serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            7,
                            ,
                            8
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.initializeAuthorizationCodeRequest(silentRequest)
                        ];
                    case 3:
                        authCodeRequest = _a.sent();
                        return [
                            4 /*yield*/ ,
                            this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)
                        ];
                    case 4:
                        authClient = _a.sent();
                        this.logger.verbose("Auth code client created");
                        return [
                            4 /*yield*/ ,
                            authClient.getAuthCodeUrl(silentRequest)
                        ];
                    case 5:
                        navigateUrl = _a.sent();
                        return [
                            4 /*yield*/ ,
                            this.silentTokenHelper(navigateUrl, authCodeRequest, authClient, this.logger)
                        ];
                    case 6:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                    case 7:
                        e_1 = _a.sent();
                        if (e_1 instanceof _msalCommon.AuthError) e_1.setCorrelationId(this.correlationId);
                        serverTelemetryManager.cacheFailedRequest(e_1);
                        this.browserStorage.cleanRequestByState(silentRequest.state);
                        throw e_1;
                    case 8:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Currently Unsupported
     */ SilentIframeClient1.prototype.logout = function() {
        // Synchronous so we must reject
        return Promise.reject(_browserAuthErrorJs.BrowserAuthError.createSilentLogoutUnsupportedError());
    };
    /**
     * Helper which acquires an authorization code silently using a hidden iframe from given url
     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.
     * @param navigateUrl
     * @param userRequestScopes
     */ SilentIframeClient1.prototype.silentTokenHelper = function(navigateUrl, authCodeRequest, authClient, browserRequestLogger) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var silentHandler, msalFrame, hash, state;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        silentHandler = new _silentHandlerJs.SilentHandler(authClient, this.browserStorage, authCodeRequest, browserRequestLogger, this.config.system.navigateFrameWait);
                        return [
                            4 /*yield*/ ,
                            silentHandler.initiateAuthRequest(navigateUrl)
                        ];
                    case 1:
                        msalFrame = _a.sent();
                        return [
                            4 /*yield*/ ,
                            silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout)
                        ];
                    case 2:
                        hash = _a.sent();
                        state = this.validateAndExtractStateFromHash(hash, _browserConstantsJs.InteractionType.Silent, authCodeRequest.correlationId);
                        // Handle response from hash string
                        return [
                            2 /*return*/ ,
                            silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)
                        ];
                }
            });
        });
    };
    return SilentIframeClient1;
}(_standardInteractionClientJs.StandardInteractionClient);

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","./StandardInteractionClient.js":"64K8D","../error/BrowserAuthError.js":"1rUUr","../utils/BrowserConstants.js":"kJnIX","../interaction_handler/SilentHandler.js":"e1wk9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e1wk9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SilentHandler", ()=>SilentHandler
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
var _interactionHandlerJs = require("./InteractionHandler.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _configurationJs = require("../config/Configuration.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var SilentHandler = function(_super) {
    _tslibJs.__extends(SilentHandler1, _super);
    function SilentHandler1(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger, navigateFrameWait) {
        var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this;
        _this.navigateFrameWait = navigateFrameWait;
        return _this;
    }
    /**
     * Creates a hidden iframe to given URL using user-requested scopes as an id.
     * @param urlNavigate
     * @param userRequestScopes
     */ SilentHandler1.prototype.initiateAuthRequest = function(requestUrl) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var _a;
            return _tslibJs.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        if (_msalCommon.StringUtils.isEmpty(requestUrl)) {
                            // Throw error if request URL is empty.
                            this.browserRequestLogger.info("Navigate url is empty");
                            throw _browserAuthErrorJs.BrowserAuthError.createEmptyNavigationUriError();
                        }
                        if (!this.navigateFrameWait) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            this.loadFrame(requestUrl)
                        ];
                    case 1:
                        _a = _b.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        _a = this.loadFrameSync(requestUrl);
                        _b.label = 3;
                    case 3:
                        return [
                            2 /*return*/ ,
                            _a
                        ];
                }
            });
        });
    };
    /**
     * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.
     * @param iframe
     * @param timeout
     */ SilentHandler1.prototype.monitorIframeForHash = function(iframe, timeout) {
        var _this = this;
        return new Promise(function(resolve, reject) {
            if (timeout < _configurationJs.DEFAULT_IFRAME_TIMEOUT_MS) _this.browserRequestLogger.warning("system.loadFrameTimeout or system.iframeHashTimeout set to lower (" + timeout + "ms) than the default (" + _configurationJs.DEFAULT_IFRAME_TIMEOUT_MS + "ms). This may result in timeouts.");
            /*
             * Polling for iframes can be purely timing based,
             * since we don't need to account for interaction.
             */ var nowMark = window.performance.now();
            var timeoutMark = nowMark + timeout;
            var intervalId = setInterval(function() {
                if (window.performance.now() > timeoutMark) {
                    _this.removeHiddenIframe(iframe);
                    clearInterval(intervalId);
                    reject(_browserAuthErrorJs.BrowserAuthError.createMonitorIframeTimeoutError());
                    return;
                }
                var href = _msalCommon.Constants.EMPTY_STRING;
                var contentWindow = iframe.contentWindow;
                try {
                    /*
                     * Will throw if cross origin,
                     * which should be caught and ignored
                     * since we need the interval to keep running while on STS UI.
                     */ href = contentWindow ? contentWindow.location.href : _msalCommon.Constants.EMPTY_STRING;
                } catch (e) {
                }
                if (_msalCommon.StringUtils.isEmpty(href)) return;
                var contentHash = contentWindow ? contentWindow.location.hash : _msalCommon.Constants.EMPTY_STRING;
                if (_msalCommon.UrlString.hashContainsKnownProperties(contentHash)) {
                    // Success case
                    _this.removeHiddenIframe(iframe);
                    clearInterval(intervalId);
                    resolve(contentHash);
                    return;
                }
            }, _browserConstantsJs.BrowserConstants.POLL_INTERVAL_MS);
        });
    };
    /**
     * @hidden
     * Loads iframe with authorization endpoint URL
     * @ignore
     */ SilentHandler1.prototype.loadFrame = function(urlNavigate) {
        /*
         * This trick overcomes iframe navigation in IE
         * IE does not load the page consistently in iframe
         */ var _this = this;
        return new Promise(function(resolve, reject) {
            var frameHandle = _this.createHiddenIframe();
            setTimeout(function() {
                if (!frameHandle) {
                    reject("Unable to load iframe");
                    return;
                }
                frameHandle.src = urlNavigate;
                resolve(frameHandle);
            }, _this.navigateFrameWait);
        });
    };
    /**
     * @hidden
     * Loads the iframe synchronously when the navigateTimeFrame is set to `0`
     * @param urlNavigate
     * @param frameName
     * @param logger
     */ SilentHandler1.prototype.loadFrameSync = function(urlNavigate) {
        var frameHandle = this.createHiddenIframe();
        frameHandle.src = urlNavigate;
        return frameHandle;
    };
    /**
     * @hidden
     * Creates a new hidden iframe or gets an existing one for silent token renewal.
     * @ignore
     */ SilentHandler1.prototype.createHiddenIframe = function() {
        var authFrame = document.createElement("iframe");
        authFrame.style.visibility = "hidden";
        authFrame.style.position = "absolute";
        authFrame.style.width = authFrame.style.height = "0";
        authFrame.style.border = "0";
        authFrame.setAttribute("sandbox", "allow-scripts allow-same-origin allow-forms");
        document.getElementsByTagName("body")[0].appendChild(authFrame);
        return authFrame;
    };
    /**
     * @hidden
     * Removes a hidden iframe from the page.
     * @ignore
     */ SilentHandler1.prototype.removeHiddenIframe = function(iframe) {
        if (document.body === iframe.parentNode) document.body.removeChild(iframe);
    };
    return SilentHandler1;
}(_interactionHandlerJs.InteractionHandler);

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","./InteractionHandler.js":"cS9BW","../utils/BrowserConstants.js":"kJnIX","../error/BrowserAuthError.js":"1rUUr","../config/Configuration.js":"2ePb2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6VSlo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SilentRefreshClient", ()=>SilentRefreshClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _standardInteractionClientJs = require("./StandardInteractionClient.js");
var _msalCommon = require("@azure/msal-common");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var SilentRefreshClient = function(_super) {
    _tslibJs.__extends(SilentRefreshClient1, _super);
    function SilentRefreshClient1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Exchanges the refresh token for new tokens
     * @param request
     */ SilentRefreshClient1.prototype.acquireToken = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var silentRequest, _a, serverTelemetryManager, refreshTokenClient;
            var _this = this;
            return _tslibJs.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        _a = [
                            _tslibJs.__assign({
                            }, request)
                        ];
                        return [
                            4 /*yield*/ ,
                            this.initializeBaseRequest(request)
                        ];
                    case 1:
                        silentRequest = _tslibJs.__assign.apply(void 0, _a.concat([
                            _b.sent()
                        ]));
                        serverTelemetryManager = this.initializeServerTelemetryManager(_browserConstantsJs.ApiId.acquireTokenSilent_silentFlow);
                        return [
                            4 /*yield*/ ,
                            this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)
                        ];
                    case 2:
                        refreshTokenClient = _b.sent();
                        this.logger.verbose("Refresh token client created");
                        // Send request to renew token. Auth module will throw errors if token cannot be renewed.
                        return [
                            2 /*return*/ ,
                            refreshTokenClient.acquireTokenByRefreshToken(silentRequest).catch(function(e) {
                                if (e instanceof _msalCommon.AuthError) e.setCorrelationId(_this.correlationId);
                                serverTelemetryManager.cacheFailedRequest(e);
                                throw e;
                            })
                        ];
                }
            });
        });
    };
    /**
     * Currently Unsupported
     */ SilentRefreshClient1.prototype.logout = function() {
        // Synchronous so we must reject
        return Promise.reject(_browserAuthErrorJs.BrowserAuthError.createSilentLogoutUnsupportedError());
    };
    /**
     * Creates a Refresh Client with the given authority, or the default authority.
     * @param serverTelemetryManager
     * @param authorityUrl
     */ SilentRefreshClient1.prototype.createRefreshTokenClient = function(serverTelemetryManager, authorityUrl, azureCloudOptions) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var clientConfig;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)
                        ];
                    case 1:
                        clientConfig = _a.sent();
                        return [
                            2 /*return*/ ,
                            new _msalCommon.RefreshTokenClient(clientConfig)
                        ];
                }
            });
        });
    };
    return SilentRefreshClient1;
}(_standardInteractionClientJs.StandardInteractionClient);

},{"../_virtual/_tslib.js":"fxaLV","./StandardInteractionClient.js":"64K8D","@azure/msal-common":"liWRx","../utils/BrowserConstants.js":"kJnIX","../error/BrowserAuthError.js":"1rUUr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9pzQi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TokenCache", ()=>TokenCache
);
var _msalCommon = require("@azure/msal-common");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ /**
 * Token cache manager
 */ var TokenCache = function() {
    function TokenCache1(configuration, storage, logger, cryptoObj) {
        this.isBrowserEnvironment = typeof window !== "undefined";
        this.config = configuration;
        this.storage = storage;
        this.logger = logger;
        this.cryptoObj = cryptoObj;
    }
    // Move getAllAccounts here and cache utility APIs
    /**
     * API to load tokens to msal-browser cache.
     * @param request
     * @param response
     * @param options
     */ TokenCache1.prototype.loadExternalTokens = function(request, response, options) {
        this.logger.info("TokenCache - loadExternalTokens called");
        if (!response.id_token) throw _browserAuthErrorJs.BrowserAuthError.createUnableToLoadTokenError("Please ensure server response includes id token.");
        if (request.account) {
            this.loadIdToken(response.id_token, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);
            this.loadAccessToken(request, response, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);
        } else if (request.authority) {
            var authorityUrl = _msalCommon.Authority.generateAuthority(request.authority, request.azureCloudOptions);
            var authorityOptions = {
                protocolMode: this.config.auth.protocolMode,
                knownAuthorities: this.config.auth.knownAuthorities,
                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,
                authorityMetadata: this.config.auth.authorityMetadata
            };
            var authority = new _msalCommon.Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions);
            // "clientInfo" from options takes precedence over "clientInfo" in response
            if (options.clientInfo) {
                this.logger.trace("TokenCache - homeAccountId from options");
                this.loadIdToken(response.id_token, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);
                this.loadAccessToken(request, response, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);
            } else if (response.client_info) {
                this.logger.trace("TokenCache - homeAccountId from response");
                this.loadIdToken(response.id_token, response.client_info, authority.hostnameAndPort, authority.tenant, options);
                this.loadAccessToken(request, response, response.client_info, authority.hostnameAndPort, authority.tenant, options);
            } else throw _browserAuthErrorJs.BrowserAuthError.createUnableToLoadTokenError("Please provide clientInfo in the response or options.");
        } else throw _browserAuthErrorJs.BrowserAuthError.createUnableToLoadTokenError("Please provide a request with an account or a request with authority.");
    };
    /**
     * Helper function to load id tokens to msal-browser cache
     * @param idToken
     * @param homeAccountId
     * @param environment
     * @param tenantId
     * @param options
     */ TokenCache1.prototype.loadIdToken = function(idToken, homeAccountId, environment, tenantId, options) {
        var idTokenEntity = _msalCommon.IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken, this.config.auth.clientId, tenantId);
        var idAuthToken = new _msalCommon.AuthToken(idToken, this.cryptoObj);
        var accountEntity = options.clientInfo ? _msalCommon.AccountEntity.createAccount(options.clientInfo, homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment) : _msalCommon.AccountEntity.createGenericAccount(homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment);
        if (this.isBrowserEnvironment) {
            this.logger.verbose("TokenCache - loading id token");
            this.storage.setAccount(accountEntity);
            this.storage.setIdTokenCredential(idTokenEntity);
        } else throw _browserAuthErrorJs.BrowserAuthError.createUnableToLoadTokenError("loadExternalTokens is designed to work in browser environments only.");
    };
    /**
     * Helper function to load access tokens to msal-browser cache
     * @param request
     * @param response
     * @param options
     * @param homeAccountId
     * @param environment
     * @param tenantId
     * @returns
     */ TokenCache1.prototype.loadAccessToken = function(request, response, homeAccountId, environment, tenantId, options) {
        if (!response.access_token) {
            this.logger.verbose("TokenCache - No access token provided for caching");
            return;
        }
        if (!response.expires_in) throw _browserAuthErrorJs.BrowserAuthError.createUnableToLoadTokenError("Please ensure server response includes expires_in value.");
        if (!options.extendedExpiresOn) throw _browserAuthErrorJs.BrowserAuthError.createUnableToLoadTokenError("Please provide an extendedExpiresOn value in the options.");
        var scopes = new _msalCommon.ScopeSet(request.scopes).printScopes();
        var expiresOn = response.expires_in;
        var extendedExpiresOn = options.extendedExpiresOn;
        var accessTokenEntity = _msalCommon.AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);
        if (this.isBrowserEnvironment) {
            this.logger.verbose("TokenCache - loading access token");
            this.storage.setAccessTokenCredential(accessTokenEntity);
        } else throw _browserAuthErrorJs.BrowserAuthError.createUnableToLoadTokenError("loadExternalTokens is designed to work in browser environments only.");
    };
    return TokenCache1;
}();

},{"@azure/msal-common":"liWRx","../error/BrowserAuthError.js":"1rUUr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"46QFF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SilentAuthCodeClient", ()=>SilentAuthCodeClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
var _standardInteractionClientJs = require("./StandardInteractionClient.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _silentHandlerJs = require("../interaction_handler/SilentHandler.js");
var _hybridSpaAuthorizationCodeClientJs = require("./HybridSpaAuthorizationCodeClient.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var SilentAuthCodeClient = function(_super) {
    _tslibJs.__extends(SilentAuthCodeClient1, _super);
    function SilentAuthCodeClient1(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, correlationId) {
        var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId) || this;
        _this.apiId = apiId;
        return _this;
    }
    /**
     * Acquires a token silently by redeeming an authorization code against the /token endpoint
     * @param request
     */ SilentAuthCodeClient1.prototype.acquireToken = function(request) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var silentRequest, serverTelemetryManager, authCodeRequest, clientConfig, authClient, silentHandler, e_1;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        this.logger.trace("SilentAuthCodeClient.acquireToken called");
                        // Auth code payload is required
                        if (!request.code) throw _browserAuthErrorJs.BrowserAuthError.createAuthCodeRequiredError();
                        return [
                            4 /*yield*/ ,
                            this.initializeAuthorizationRequest(request, _browserConstantsJs.InteractionType.Silent)
                        ];
                    case 1:
                        silentRequest = _a.sent();
                        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || "", silentRequest.account || null);
                        serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            4,
                            ,
                            5
                        ]);
                        authCodeRequest = _tslibJs.__assign(_tslibJs.__assign({
                        }, silentRequest), {
                            code: request.code
                        });
                        return [
                            4 /*yield*/ ,
                            this.getClientConfiguration(serverTelemetryManager, silentRequest.authority)
                        ];
                    case 3:
                        clientConfig = _a.sent();
                        authClient = new _hybridSpaAuthorizationCodeClientJs.HybridSpaAuthorizationCodeClient(clientConfig);
                        this.logger.verbose("Auth code client created");
                        silentHandler = new _silentHandlerJs.SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system.navigateFrameWait);
                        // Handle auth code parameters from request
                        return [
                            2 /*return*/ ,
                            silentHandler.handleCodeResponseFromServer({
                                code: request.code,
                                msgraph_host: request.msGraphHost,
                                cloud_graph_host_name: request.cloudGraphHostName,
                                cloud_instance_host_name: request.cloudInstanceHostName
                            }, silentRequest.state, authClient.authority, this.networkClient, false)
                        ];
                    case 4:
                        e_1 = _a.sent();
                        if (e_1 instanceof _msalCommon.AuthError) e_1.setCorrelationId(this.correlationId);
                        serverTelemetryManager.cacheFailedRequest(e_1);
                        this.browserStorage.cleanRequestByState(silentRequest.state);
                        throw e_1;
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Currently Unsupported
     */ SilentAuthCodeClient1.prototype.logout = function() {
        // Synchronous so we must reject
        return Promise.reject(_browserAuthErrorJs.BrowserAuthError.createSilentLogoutUnsupportedError());
    };
    return SilentAuthCodeClient1;
}(_standardInteractionClientJs.StandardInteractionClient);

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","./StandardInteractionClient.js":"64K8D","../error/BrowserAuthError.js":"1rUUr","../utils/BrowserConstants.js":"kJnIX","../interaction_handler/SilentHandler.js":"e1wk9","./HybridSpaAuthorizationCodeClient.js":"lz9Dh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lz9Dh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HybridSpaAuthorizationCodeClient", ()=>HybridSpaAuthorizationCodeClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _msalCommon = require("@azure/msal-common");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var HybridSpaAuthorizationCodeClient = function(_super) {
    _tslibJs.__extends(HybridSpaAuthorizationCodeClient1, _super);
    function HybridSpaAuthorizationCodeClient1(config) {
        var _this = _super.call(this, config) || this;
        _this.includeRedirectUri = false;
        return _this;
    }
    return HybridSpaAuthorizationCodeClient1;
}(_msalCommon.AuthorizationCodeClient);

},{"../_virtual/_tslib.js":"fxaLV","@azure/msal-common":"liWRx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hVtGX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SilentCacheClient", ()=>SilentCacheClient
);
var _tslibJs = require("../_virtual/_tslib.js");
var _standardInteractionClientJs = require("./StandardInteractionClient.js");
var _msalCommon = require("@azure/msal-common");
var _eventTypeJs = require("../event/EventType.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
var _browserAuthErrorJs = require("../error/BrowserAuthError.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var SilentCacheClient = function(_super) {
    _tslibJs.__extends(SilentCacheClient1, _super);
    function SilentCacheClient1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns unexpired tokens from the cache, if available
     * @param silentRequest
     */ SilentCacheClient1.prototype.acquireToken = function(silentRequest) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var serverTelemetryManager, silentAuthClient, cachedToken, error_1;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        serverTelemetryManager = this.initializeServerTelemetryManager(_browserConstantsJs.ApiId.acquireTokenSilent_silentFlow);
                        return [
                            4 /*yield*/ ,
                            this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)
                        ];
                    case 1:
                        silentAuthClient = _a.sent();
                        this.logger.verbose("Silent auth client created");
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            silentAuthClient.acquireCachedToken(silentRequest)
                        ];
                    case 3:
                        cachedToken = _a.sent();
                        this.eventHandler.emitEvent(_eventTypeJs.EventType.ACQUIRE_TOKEN_SUCCESS, _browserConstantsJs.InteractionType.Silent, cachedToken);
                        return [
                            2 /*return*/ ,
                            cachedToken
                        ];
                    case 4:
                        error_1 = _a.sent();
                        if (error_1 instanceof _browserAuthErrorJs.BrowserAuthError && error_1.errorCode === _browserAuthErrorJs.BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code) this.logger.verbose("Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.");
                        throw error_1;
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Currently Unsupported
     */ SilentCacheClient1.prototype.logout = function() {
        // Synchronous so we must reject
        return Promise.reject(_browserAuthErrorJs.BrowserAuthError.createSilentLogoutUnsupportedError());
    };
    /**
     * Creates an Silent Flow Client with the given authority, or the default authority.
     * @param serverTelemetryManager
     * @param authorityUrl
     */ SilentCacheClient1.prototype.createSilentFlowClient = function(serverTelemetryManager, authorityUrl, azureCloudOptions) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var clientConfig;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)
                        ];
                    case 1:
                        clientConfig = _a.sent();
                        return [
                            2 /*return*/ ,
                            new _msalCommon.SilentFlowClient(clientConfig)
                        ];
                }
            });
        });
    };
    SilentCacheClient1.prototype.initializeSilentRequest = function(request, account) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var _a;
            return _tslibJs.__generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        _a = [
                            _tslibJs.__assign({
                            }, request)
                        ];
                        return [
                            4 /*yield*/ ,
                            this.initializeBaseRequest(request)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _tslibJs.__assign.apply(void 0, [
                                _tslibJs.__assign.apply(void 0, _a.concat([
                                    _b.sent()
                                ])),
                                {
                                    account: account,
                                    forceRefresh: request.forceRefresh || false
                                }
                            ])
                        ];
                }
            });
        });
    };
    return SilentCacheClient1;
}(_standardInteractionClientJs.StandardInteractionClient);

},{"../_virtual/_tslib.js":"fxaLV","./StandardInteractionClient.js":"64K8D","@azure/msal-common":"liWRx","../event/EventType.js":"cjqlF","../utils/BrowserConstants.js":"kJnIX","../error/BrowserAuthError.js":"1rUUr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cNMcn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stubbedPublicClientApplication", ()=>stubbedPublicClientApplication
);
var _browserConfigurationAuthErrorJs = require("../error/BrowserConfigurationAuthError.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var stubbedPublicClientApplication = {
    acquireTokenPopup: function() {
        return Promise.reject(_browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    acquireTokenRedirect: function() {
        return Promise.reject(_browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    acquireTokenSilent: function() {
        return Promise.reject(_browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    acquireTokenByCode: function() {
        return Promise.reject(_browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    getAllAccounts: function() {
        return [];
    },
    getAccountByHomeId: function() {
        return null;
    },
    getAccountByUsername: function() {
        return null;
    },
    getAccountByLocalId: function() {
        return null;
    },
    handleRedirectPromise: function() {
        return Promise.reject(_browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    loginPopup: function() {
        return Promise.reject(_browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    loginRedirect: function() {
        return Promise.reject(_browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    logout: function() {
        return Promise.reject(_browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    logoutRedirect: function() {
        return Promise.reject(_browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    logoutPopup: function() {
        return Promise.reject(_browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    ssoSilent: function() {
        return Promise.reject(_browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
    },
    addEventCallback: function() {
        return null;
    },
    removeEventCallback: function() {
        return;
    },
    enableAccountStorageEvents: function() {
        return;
    },
    disableAccountStorageEvents: function() {
        return;
    },
    getTokenCache: function() {
        throw _browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStubPcaInstanceCalledError();
    },
    getLogger: function() {
        throw _browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStubPcaInstanceCalledError();
    },
    setLogger: function() {
        return;
    },
    setActiveAccount: function() {
        return;
    },
    getActiveAccount: function() {
        return null;
    },
    initializeWrapperLibrary: function() {
        return;
    },
    setNavigationClient: function() {
        return;
    },
    getConfiguration: function() {
        throw _browserConfigurationAuthErrorJs.BrowserConfigurationAuthError.createStubPcaInstanceCalledError();
    }
};

},{"../error/BrowserConfigurationAuthError.js":"99jPJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"49tpc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventMessageUtils", ()=>EventMessageUtils
);
var _eventTypeJs = require("./EventType.js");
var _browserConstantsJs = require("../utils/BrowserConstants.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var EventMessageUtils = function() {
    function EventMessageUtils1() {
    }
    /**
     * Gets interaction status from event message
     * @param message
     * @param currentStatus
     */ EventMessageUtils1.getInteractionStatusFromEvent = function(message, currentStatus) {
        switch(message.eventType){
            case _eventTypeJs.EventType.LOGIN_START:
                return _browserConstantsJs.InteractionStatus.Login;
            case _eventTypeJs.EventType.SSO_SILENT_START:
                return _browserConstantsJs.InteractionStatus.SsoSilent;
            case _eventTypeJs.EventType.ACQUIRE_TOKEN_START:
                if (message.interactionType === _browserConstantsJs.InteractionType.Redirect || message.interactionType === _browserConstantsJs.InteractionType.Popup) return _browserConstantsJs.InteractionStatus.AcquireToken;
                break;
            case _eventTypeJs.EventType.HANDLE_REDIRECT_START:
                return _browserConstantsJs.InteractionStatus.HandleRedirect;
            case _eventTypeJs.EventType.LOGOUT_START:
                return _browserConstantsJs.InteractionStatus.Logout;
            case _eventTypeJs.EventType.SSO_SILENT_SUCCESS:
            case _eventTypeJs.EventType.SSO_SILENT_FAILURE:
                if (currentStatus && currentStatus !== _browserConstantsJs.InteractionStatus.SsoSilent) break;
                return _browserConstantsJs.InteractionStatus.None;
            case _eventTypeJs.EventType.LOGOUT_END:
                if (currentStatus && currentStatus !== _browserConstantsJs.InteractionStatus.Logout) break;
                return _browserConstantsJs.InteractionStatus.None;
            case _eventTypeJs.EventType.HANDLE_REDIRECT_END:
                if (currentStatus && currentStatus !== _browserConstantsJs.InteractionStatus.HandleRedirect) break;
                return _browserConstantsJs.InteractionStatus.None;
            case _eventTypeJs.EventType.LOGIN_SUCCESS:
            case _eventTypeJs.EventType.LOGIN_FAILURE:
            case _eventTypeJs.EventType.ACQUIRE_TOKEN_SUCCESS:
            case _eventTypeJs.EventType.ACQUIRE_TOKEN_FAILURE:
                if (message.interactionType === _browserConstantsJs.InteractionType.Redirect || message.interactionType === _browserConstantsJs.InteractionType.Popup) {
                    if (currentStatus && currentStatus !== _browserConstantsJs.InteractionStatus.Login && currentStatus !== _browserConstantsJs.InteractionStatus.AcquireToken) break;
                    return _browserConstantsJs.InteractionStatus.None;
                }
                break;
        }
        return null;
    };
    return EventMessageUtils1;
}();

},{"./EventType.js":"cjqlF","../utils/BrowserConstants.js":"kJnIX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"diGnC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SignedHttpRequest", ()=>SignedHttpRequest
);
var _tslibJs = require("../_virtual/_tslib.js");
var _cryptoOpsJs = require("./CryptoOps.js");
var _msalCommon = require("@azure/msal-common");
var _packageMetadataJs = require("../packageMetadata.js");
/*! @azure/msal-browser v2.22.1 2022-03-07 */ 'use strict';
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */ var SignedHttpRequest = function() {
    function SignedHttpRequest1(shrParameters, shrOptions) {
        var loggerOptions = shrOptions && shrOptions.loggerOptions || {
        };
        this.logger = new _msalCommon.Logger(loggerOptions, _packageMetadataJs.name, _packageMetadataJs.version);
        this.cryptoOps = new _cryptoOpsJs.CryptoOps(this.logger);
        this.popTokenGenerator = new _msalCommon.PopTokenGenerator(this.cryptoOps);
        this.shrParameters = shrParameters;
    }
    /**
     * Generates and caches a keypair for the given request options.
     * @returns Public key digest, which should be sent to the token issuer.
     */ SignedHttpRequest1.prototype.generatePublicKeyThumbprint = function() {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            var kid;
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.popTokenGenerator.generateKid(this.shrParameters)
                        ];
                    case 1:
                        kid = _a.sent().kid;
                        return [
                            2 /*return*/ ,
                            kid
                        ];
                }
            });
        });
    };
    /**
     * Generates a signed http request for the given payload with the given key.
     * @param payload Payload to sign (e.g. access token)
     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)
     * @param claims Additional claims to include/override in the signed JWT
     * @returns Pop token signed with the corresponding private key
     */ SignedHttpRequest1.prototype.signRequest = function(payload, publicKeyThumbprint, claims) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.popTokenGenerator.signPayload(payload, publicKeyThumbprint, this.shrParameters, claims)
                ];
            });
        });
    };
    /**
     * Removes cached keys from browser for given public key thumbprint
     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)
     * @returns If keys are properly deleted
     */ SignedHttpRequest1.prototype.removeKeys = function(publicKeyThumbprint) {
        return _tslibJs.__awaiter(this, void 0, void 0, function() {
            return _tslibJs.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                }
            });
        });
    };
    return SignedHttpRequest1;
}();

},{"../_virtual/_tslib.js":"fxaLV","./CryptoOps.js":"U3W26","@azure/msal-common":"liWRx","../packageMetadata.js":"hunPb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Mxp0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BlockBlobTier", ()=>_models.BlockBlobTier
);
parcelHelpers.export(exports, "PremiumPageBlobTier", ()=>_models.PremiumPageBlobTier
);
parcelHelpers.export(exports, "RestError", ()=>_coreHttp.RestError
);
parcelHelpers.export(exports, "logger", ()=>_log.logger
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreHttp = require("@azure/core-http");
var _blobServiceClient = require("./BlobServiceClient");
parcelHelpers.exportAll(_blobServiceClient, exports);
var _clients = require("./Clients");
parcelHelpers.exportAll(_clients, exports);
var _containerClient = require("./ContainerClient");
parcelHelpers.exportAll(_containerClient, exports);
var _blobLeaseClient = require("./BlobLeaseClient");
parcelHelpers.exportAll(_blobLeaseClient, exports);
var _blobBatch = require("./BlobBatch");
parcelHelpers.exportAll(_blobBatch, exports);
var _blobBatchClient = require("./BlobBatchClient");
parcelHelpers.exportAll(_blobBatchClient, exports);
var _batchResponse = require("./BatchResponse");
parcelHelpers.exportAll(_batchResponse, exports);
var _storageBrowserPolicyFactory = require("./StorageBrowserPolicyFactory");
parcelHelpers.exportAll(_storageBrowserPolicyFactory, exports);
var _anonymousCredential = require("./credentials/AnonymousCredential");
parcelHelpers.exportAll(_anonymousCredential, exports);
var _credential = require("./credentials/Credential");
parcelHelpers.exportAll(_credential, exports);
var _models = require("./models");
var _pipeline = require("./Pipeline");
parcelHelpers.exportAll(_pipeline, exports);
var _anonymousCredentialPolicy = require("./policies/AnonymousCredentialPolicy");
parcelHelpers.exportAll(_anonymousCredentialPolicy, exports);
var _credentialPolicy = require("./policies/CredentialPolicy");
parcelHelpers.exportAll(_credentialPolicy, exports);
var _storageRetryPolicyFactory = require("./StorageRetryPolicyFactory");
parcelHelpers.exportAll(_storageRetryPolicyFactory, exports);
var _generatedModels = require("./generatedModels");
parcelHelpers.exportAll(_generatedModels, exports);
var _log = require("./log");

},{"@azure/core-http":"iSINq","./BlobServiceClient":"5lLVn","./Clients":"kUV1b","./ContainerClient":"45MBz","./BlobLeaseClient":"hZ8uc","./BlobBatch":"Lat0V","./BlobBatchClient":"iF02i","./BatchResponse":"2yAzo","./StorageBrowserPolicyFactory":"lNMbH","./credentials/AnonymousCredential":"f0sOe","./credentials/Credential":"1Ib4y","./models":"179yc","./Pipeline":"bsozg","./policies/AnonymousCredentialPolicy":"kNMa0","./policies/CredentialPolicy":"eiIAi","./StorageRetryPolicyFactory":"ealHa","./generatedModels":"cORgJ","./log":"gc1Rl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iSINq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/* eslint-disable-next-line @typescript-eslint/triple-slash-reference */ /// <reference path="../dom-shim.d.ts" />
parcelHelpers.export(exports, "WebResource", ()=>_webResource.WebResource
);
parcelHelpers.export(exports, "DefaultHttpClient", ()=>_defaultHttpClient.DefaultHttpClient
);
parcelHelpers.export(exports, "HttpHeaders", ()=>_httpHeaders.HttpHeaders
);
parcelHelpers.export(exports, "HttpPipelineLogLevel", ()=>_httpPipelineLogLevel.HttpPipelineLogLevel
);
parcelHelpers.export(exports, "RestError", ()=>_restError.RestError
);
parcelHelpers.export(exports, "operationOptionsToRequestOptionsBase", ()=>_operationOptions.operationOptionsToRequestOptionsBase
);
parcelHelpers.export(exports, "ServiceClient", ()=>_serviceClient.ServiceClient
);
parcelHelpers.export(exports, "flattenResponse", ()=>_serviceClient.flattenResponse
);
parcelHelpers.export(exports, "createPipelineFromOptions", ()=>_serviceClient.createPipelineFromOptions
);
parcelHelpers.export(exports, "QueryCollectionFormat", ()=>_queryCollectionFormat.QueryCollectionFormat
);
parcelHelpers.export(exports, "Constants", ()=>_constants.Constants
);
parcelHelpers.export(exports, "bearerTokenAuthenticationPolicy", ()=>_bearerTokenAuthenticationPolicy.bearerTokenAuthenticationPolicy
);
parcelHelpers.export(exports, "logPolicy", ()=>_logPolicy.logPolicy
);
parcelHelpers.export(exports, "BaseRequestPolicy", ()=>_requestPolicy.BaseRequestPolicy
);
parcelHelpers.export(exports, "RequestPolicyOptions", ()=>_requestPolicy.RequestPolicyOptions
);
parcelHelpers.export(exports, "generateClientRequestIdPolicy", ()=>_generateClientRequestIdPolicy.generateClientRequestIdPolicy
);
parcelHelpers.export(exports, "exponentialRetryPolicy", ()=>_exponentialRetryPolicy.exponentialRetryPolicy
);
parcelHelpers.export(exports, "RetryMode", ()=>_exponentialRetryPolicy.RetryMode
);
parcelHelpers.export(exports, "systemErrorRetryPolicy", ()=>_systemErrorRetryPolicy.systemErrorRetryPolicy
);
parcelHelpers.export(exports, "throttlingRetryPolicy", ()=>_throttlingRetryPolicy.throttlingRetryPolicy
);
parcelHelpers.export(exports, "getDefaultProxySettings", ()=>_proxyPolicy.getDefaultProxySettings
);
parcelHelpers.export(exports, "proxyPolicy", ()=>_proxyPolicy.proxyPolicy
);
parcelHelpers.export(exports, "redirectPolicy", ()=>_redirectPolicy.redirectPolicy
);
parcelHelpers.export(exports, "keepAlivePolicy", ()=>_keepAlivePolicy.keepAlivePolicy
);
parcelHelpers.export(exports, "disableResponseDecompressionPolicy", ()=>_disableResponseDecompressionPolicy.disableResponseDecompressionPolicy
);
parcelHelpers.export(exports, "signingPolicy", ()=>_signingPolicy.signingPolicy
);
parcelHelpers.export(exports, "userAgentPolicy", ()=>_userAgentPolicy.userAgentPolicy
);
parcelHelpers.export(exports, "getDefaultUserAgentValue", ()=>_userAgentPolicy.getDefaultUserAgentValue
);
parcelHelpers.export(exports, "deserializationPolicy", ()=>_deserializationPolicy.deserializationPolicy
);
parcelHelpers.export(exports, "deserializeResponseBody", ()=>_deserializationPolicy.deserializeResponseBody
);
parcelHelpers.export(exports, "tracingPolicy", ()=>_tracingPolicy.tracingPolicy
);
parcelHelpers.export(exports, "MapperType", ()=>_serializer.MapperType
);
parcelHelpers.export(exports, "Serializer", ()=>_serializer.Serializer
);
parcelHelpers.export(exports, "serializeObject", ()=>_serializer.serializeObject
);
parcelHelpers.export(exports, "stripRequest", ()=>_utils.stripRequest
);
parcelHelpers.export(exports, "stripResponse", ()=>_utils.stripResponse
);
parcelHelpers.export(exports, "executePromisesSequentially", ()=>_utils.executePromisesSequentially
);
parcelHelpers.export(exports, "generateUuid", ()=>_utils.generateUuid
);
parcelHelpers.export(exports, "encodeUri", ()=>_utils.encodeUri
);
parcelHelpers.export(exports, "promiseToCallback", ()=>_utils.promiseToCallback
);
parcelHelpers.export(exports, "promiseToServiceCallback", ()=>_utils.promiseToServiceCallback
);
parcelHelpers.export(exports, "isValidUuid", ()=>_utils.isValidUuid
);
parcelHelpers.export(exports, "applyMixins", ()=>_utils.applyMixins
);
parcelHelpers.export(exports, "isNode", ()=>_utils.isNode
);
parcelHelpers.export(exports, "isDuration", ()=>_utils.isDuration
);
parcelHelpers.export(exports, "URLBuilder", ()=>_url.URLBuilder
);
parcelHelpers.export(exports, "URLQuery", ()=>_url.URLQuery
);
parcelHelpers.export(exports, "delay", ()=>_delay.delay
);
// legacy exports. Use core-tracing instead (and remove on next major version update of core-http).
parcelHelpers.export(exports, "createSpanFunction", ()=>_createSpanLegacy.createSpanFunction
);
// Credentials
parcelHelpers.export(exports, "isTokenCredential", ()=>_coreAuth.isTokenCredential
);
parcelHelpers.export(exports, "ExpiringAccessTokenCache", ()=>_accessTokenCache.ExpiringAccessTokenCache
);
parcelHelpers.export(exports, "AccessTokenRefresher", ()=>_accessTokenRefresher.AccessTokenRefresher
);
parcelHelpers.export(exports, "BasicAuthenticationCredentials", ()=>_basicAuthenticationCredentials.BasicAuthenticationCredentials
);
parcelHelpers.export(exports, "ApiKeyCredentials", ()=>_apiKeyCredentials.ApiKeyCredentials
);
parcelHelpers.export(exports, "TopicCredentials", ()=>_topicCredentials.TopicCredentials
);
parcelHelpers.export(exports, "parseXML", ()=>_xml.parseXML
);
parcelHelpers.export(exports, "stringifyXML", ()=>_xml.stringifyXML
);
parcelHelpers.export(exports, "XML_ATTRKEY", ()=>_serializerCommon.XML_ATTRKEY
);
parcelHelpers.export(exports, "XML_CHARKEY", ()=>_serializerCommon.XML_CHARKEY
);
var _coreAsynciteratorPolyfill = require("@azure/core-asynciterator-polyfill");
var _webResource = require("./webResource");
var _defaultHttpClient = require("./defaultHttpClient");
var _httpHeaders = require("./httpHeaders");
var _httpPipelineLogLevel = require("./httpPipelineLogLevel");
var _restError = require("./restError");
var _operationOptions = require("./operationOptions");
var _serviceClient = require("./serviceClient");
var _queryCollectionFormat = require("./queryCollectionFormat");
var _constants = require("./util/constants");
var _bearerTokenAuthenticationPolicy = require("./policies/bearerTokenAuthenticationPolicy");
var _logPolicy = require("./policies/logPolicy");
var _requestPolicy = require("./policies/requestPolicy");
var _generateClientRequestIdPolicy = require("./policies/generateClientRequestIdPolicy");
var _exponentialRetryPolicy = require("./policies/exponentialRetryPolicy");
var _systemErrorRetryPolicy = require("./policies/systemErrorRetryPolicy");
var _throttlingRetryPolicy = require("./policies/throttlingRetryPolicy");
var _proxyPolicy = require("./policies/proxyPolicy");
var _redirectPolicy = require("./policies/redirectPolicy");
var _keepAlivePolicy = require("./policies/keepAlivePolicy");
var _disableResponseDecompressionPolicy = require("./policies/disableResponseDecompressionPolicy");
var _signingPolicy = require("./policies/signingPolicy");
var _userAgentPolicy = require("./policies/userAgentPolicy");
var _deserializationPolicy = require("./policies/deserializationPolicy");
var _tracingPolicy = require("./policies/tracingPolicy");
var _serializer = require("./serializer");
var _utils = require("./util/utils");
var _url = require("./url");
var _delay = require("./util/delay");
var _createSpanLegacy = require("./createSpanLegacy");
var _coreAuth = require("@azure/core-auth");
var _accessTokenCache = require("./credentials/accessTokenCache");
var _accessTokenRefresher = require("./credentials/accessTokenRefresher");
var _basicAuthenticationCredentials = require("./credentials/basicAuthenticationCredentials");
var _apiKeyCredentials = require("./credentials/apiKeyCredentials");
var _topicCredentials = require("./credentials/topicCredentials");
var _xml = require("./util/xml");
var _serializerCommon = require("./util/serializer.common");

},{"@azure/core-asynciterator-polyfill":"7M3bg","./webResource":"6Zs5C","./defaultHttpClient":"3BG92","./httpHeaders":"e4FzO","./httpPipelineLogLevel":"bsJP9","./restError":"1TBBz","./operationOptions":"96hoF","./serviceClient":"3sFZ1","./queryCollectionFormat":"f7tlP","./util/constants":"anVPh","./policies/bearerTokenAuthenticationPolicy":"eCkAA","./policies/logPolicy":"a9Pvl","./policies/requestPolicy":"kMiVw","./policies/generateClientRequestIdPolicy":"6eO6U","./policies/exponentialRetryPolicy":"4gFjR","./policies/systemErrorRetryPolicy":"8ojdS","./policies/throttlingRetryPolicy":"83jUi","./policies/proxyPolicy":"5RWWg","./policies/redirectPolicy":"hYsWZ","./policies/keepAlivePolicy":"ejlyC","./policies/disableResponseDecompressionPolicy":"lWifw","./policies/signingPolicy":"aI9O3","./policies/userAgentPolicy":"hAlcn","./policies/deserializationPolicy":"bALn1","./policies/tracingPolicy":"8oKhd","./serializer":"70Aao","./util/utils":"9PNR0","./url":"5Foit","./util/delay":"kptxH","./createSpanLegacy":"iewsm","@azure/core-auth":"7ariO","./credentials/accessTokenCache":"7woKG","./credentials/accessTokenRefresher":"fC0U3","./credentials/basicAuthenticationCredentials":"5SR1p","./credentials/apiKeyCredentials":"XUiaw","./credentials/topicCredentials":"gq6Zy","./util/xml":"cNVGy","./util/serializer.common":"imsp0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7M3bg":[function(require,module,exports) {
"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
if (!Symbol.asyncIterator) Symbol.asyncIterator = Symbol.for("Symbol.asyncIterator");

},{}],"6Zs5C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isWebResourceLike", ()=>isWebResourceLike
);
/**
 * Creates a new WebResource object.
 *
 * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary
 * properties to initiate a request.
 */ parcelHelpers.export(exports, "WebResource", ()=>WebResource
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _httpHeaders = require("./httpHeaders");
var _serializer = require("./serializer");
var _utils = require("./util/utils");
function isWebResourceLike(object) {
    if (object && typeof object === "object") {
        const castObject = object;
        if (typeof castObject.url === "string" && typeof castObject.method === "string" && typeof castObject.headers === "object" && _httpHeaders.isHttpHeadersLike(castObject.headers) && typeof castObject.validateRequestProperties === "function" && typeof castObject.prepare === "function" && typeof castObject.clone === "function") return true;
    }
    return false;
}
class WebResource {
    constructor(url, method, body, query, headers, streamResponseBody, withCredentials, abortSignal, timeout, onUploadProgress, onDownloadProgress, proxySettings, keepAlive, decompressResponse, streamResponseStatusCodes){
        this.streamResponseBody = streamResponseBody;
        this.streamResponseStatusCodes = streamResponseStatusCodes;
        this.url = url || "";
        this.method = method || "GET";
        this.headers = _httpHeaders.isHttpHeadersLike(headers) ? headers : new _httpHeaders.HttpHeaders(headers);
        this.body = body;
        this.query = query;
        this.formData = undefined;
        this.withCredentials = withCredentials || false;
        this.abortSignal = abortSignal;
        this.timeout = timeout || 0;
        this.onUploadProgress = onUploadProgress;
        this.onDownloadProgress = onDownloadProgress;
        this.proxySettings = proxySettings;
        this.keepAlive = keepAlive;
        this.decompressResponse = decompressResponse;
        this.requestId = this.headers.get("x-ms-client-request-id") || _utils.generateUuid();
    }
    /**
     * Validates that the required properties such as method, url, headers["Content-Type"],
     * headers["accept-language"] are defined. It will throw an error if one of the above
     * mentioned properties are not defined.
     */ validateRequestProperties() {
        if (!this.method) throw new Error("WebResource.method is required.");
        if (!this.url) throw new Error("WebResource.url is required.");
    }
    /**
     * Prepares the request.
     * @param options - Options to provide for preparing the request.
     * @returns Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.
     */ prepare(options) {
        if (!options) throw new Error("options object is required");
        if (options.method === undefined || options.method === null || typeof options.method.valueOf() !== "string") throw new Error("options.method must be a string.");
        if (options.url && options.pathTemplate) throw new Error("options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.");
        if ((options.pathTemplate === undefined || options.pathTemplate === null || typeof options.pathTemplate.valueOf() !== "string") && (options.url === undefined || options.url === null || typeof options.url.valueOf() !== "string")) throw new Error("Please provide exactly one of options.pathTemplate or options.url.");
        // set the url if it is provided.
        if (options.url) {
            if (typeof options.url !== "string") throw new Error('options.url must be of type "string".');
            this.url = options.url;
        }
        // set the method
        if (options.method) {
            const validMethods = [
                "GET",
                "PUT",
                "HEAD",
                "DELETE",
                "OPTIONS",
                "POST",
                "PATCH",
                "TRACE"
            ];
            if (validMethods.indexOf(options.method.toUpperCase()) === -1) throw new Error('The provided method "' + options.method + '" is invalid. Supported HTTP methods are: ' + JSON.stringify(validMethods));
        }
        this.method = options.method.toUpperCase();
        // construct the url if path template is provided
        if (options.pathTemplate) {
            const { pathTemplate , pathParameters  } = options;
            if (typeof pathTemplate !== "string") throw new Error('options.pathTemplate must be of type "string".');
            if (!options.baseUrl) options.baseUrl = "https://management.azure.com";
            const baseUrl = options.baseUrl;
            let url = baseUrl + (baseUrl.endsWith("/") ? "" : "/") + (pathTemplate.startsWith("/") ? pathTemplate.slice(1) : pathTemplate);
            const segments = url.match(/({[\w-]*\s*[\w-]*})/gi);
            if (segments && segments.length) {
                if (!pathParameters) throw new Error(`pathTemplate: ${pathTemplate} has been provided. Hence, options.pathParameters must also be provided.`);
                segments.forEach(function(item) {
                    const pathParamName = item.slice(1, -1);
                    const pathParam = pathParameters[pathParamName];
                    if (pathParam === null || pathParam === undefined || !(typeof pathParam === "string" || typeof pathParam === "object")) {
                        const stringifiedPathParameters = JSON.stringify(pathParameters, undefined, 2);
                        throw new Error(`pathTemplate: ${pathTemplate} contains the path parameter ${pathParamName}` + ` however, it is not present in parameters: ${stringifiedPathParameters}.` + `The value of the path parameter can either be a "string" of the form { ${pathParamName}: "some sample value" } or ` + `it can be an "object" of the form { "${pathParamName}": { value: "some sample value", skipUrlEncoding: true } }.`);
                    }
                    if (typeof pathParam.valueOf() === "string") url = url.replace(item, encodeURIComponent(pathParam));
                    if (typeof pathParam.valueOf() === "object") {
                        if (!pathParam.value) throw new Error(`options.pathParameters[${pathParamName}] is of type "object" but it does not contain a "value" property.`);
                        if (pathParam.skipUrlEncoding) url = url.replace(item, pathParam.value);
                        else url = url.replace(item, encodeURIComponent(pathParam.value));
                    }
                });
            }
            this.url = url;
        }
        // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.
        if (options.queryParameters) {
            const queryParameters = options.queryParameters;
            if (typeof queryParameters !== "object") throw new Error(`options.queryParameters must be of type object. It should be a JSON object ` + `of "query-parameter-name" as the key and the "query-parameter-value" as the value. ` + `The "query-parameter-value" may be fo type "string" or an "object" of the form { value: "query-parameter-value", skipUrlEncoding: true }.`);
            // append question mark if it is not present in the url
            if (this.url && this.url.indexOf("?") === -1) this.url += "?";
            // construct queryString
            const queryParams = [];
            // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().
            this.query = {
            };
            for(const queryParamName in queryParameters){
                const queryParam = queryParameters[queryParamName];
                if (queryParam) {
                    if (typeof queryParam === "string") {
                        queryParams.push(queryParamName + "=" + encodeURIComponent(queryParam));
                        this.query[queryParamName] = encodeURIComponent(queryParam);
                    } else if (typeof queryParam === "object") {
                        if (!queryParam.value) throw new Error(`options.queryParameters[${queryParamName}] is of type "object" but it does not contain a "value" property.`);
                        if (queryParam.skipUrlEncoding) {
                            queryParams.push(queryParamName + "=" + queryParam.value);
                            this.query[queryParamName] = queryParam.value;
                        } else {
                            queryParams.push(queryParamName + "=" + encodeURIComponent(queryParam.value));
                            this.query[queryParamName] = encodeURIComponent(queryParam.value);
                        }
                    }
                }
            } // end-of-for
            // append the queryString
            this.url += queryParams.join("&");
        }
        // add headers to the request if they are provided
        if (options.headers) {
            const headers = options.headers;
            for (const headerName of Object.keys(options.headers))this.headers.set(headerName, headers[headerName]);
        }
        // ensure accept-language is set correctly
        if (!this.headers.get("accept-language")) this.headers.set("accept-language", "en-US");
        // ensure the request-id is set correctly
        if (!this.headers.get("x-ms-client-request-id") && !options.disableClientRequestId) this.headers.set("x-ms-client-request-id", this.requestId);
        // default
        if (!this.headers.get("Content-Type")) this.headers.set("Content-Type", "application/json; charset=utf-8");
        // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicitly
        this.body = options.body;
        if (options.body !== undefined && options.body !== null) {
            // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.
            if (options.bodyIsStream) {
                if (!this.headers.get("Transfer-Encoding")) this.headers.set("Transfer-Encoding", "chunked");
                if (this.headers.get("Content-Type") !== "application/octet-stream") this.headers.set("Content-Type", "application/octet-stream");
            } else {
                if (options.serializationMapper) this.body = new _serializer.Serializer(options.mappers).serialize(options.serializationMapper, options.body, "requestBody");
                if (!options.disableJsonStringifyOnBody) this.body = JSON.stringify(options.body);
            }
        }
        if (options.spanOptions) this.spanOptions = options.spanOptions;
        if (options.tracingContext) this.tracingContext = options.tracingContext;
        this.abortSignal = options.abortSignal;
        this.onDownloadProgress = options.onDownloadProgress;
        this.onUploadProgress = options.onUploadProgress;
        return this;
    }
    /**
     * Clone this WebResource HTTP request object.
     * @returns The clone of this WebResource HTTP request object.
     */ clone() {
        const result = new WebResource(this.url, this.method, this.body, this.query, this.headers && this.headers.clone(), this.streamResponseBody, this.withCredentials, this.abortSignal, this.timeout, this.onUploadProgress, this.onDownloadProgress, this.proxySettings, this.keepAlive, this.decompressResponse, this.streamResponseStatusCodes);
        if (this.formData) result.formData = this.formData;
        if (this.operationSpec) result.operationSpec = this.operationSpec;
        if (this.shouldDeserialize) result.shouldDeserialize = this.shouldDeserialize;
        if (this.operationResponseGetter) result.operationResponseGetter = this.operationResponseGetter;
        return result;
    }
}

},{"./httpHeaders":"e4FzO","./serializer":"70Aao","./util/utils":"9PNR0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e4FzO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isHttpHeadersLike", ()=>isHttpHeadersLike
);
/**
 * A collection of HTTP header key/value pairs.
 */ parcelHelpers.export(exports, "HttpHeaders", ()=>HttpHeaders
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * A collection of HttpHeaders that can be sent with a HTTP request.
 */ function getHeaderKey(headerName) {
    return headerName.toLowerCase();
}
function isHttpHeadersLike(object) {
    if (object && typeof object === "object") {
        const castObject = object;
        if (typeof castObject.rawHeaders === "function" && typeof castObject.clone === "function" && typeof castObject.get === "function" && typeof castObject.set === "function" && typeof castObject.contains === "function" && typeof castObject.remove === "function" && typeof castObject.headersArray === "function" && typeof castObject.headerValues === "function" && typeof castObject.headerNames === "function" && typeof castObject.toJson === "function") return true;
    }
    return false;
}
class HttpHeaders {
    constructor(rawHeaders){
        this._headersMap = {
        };
        if (rawHeaders) for(const headerName in rawHeaders)this.set(headerName, rawHeaders[headerName]);
    }
    /**
     * Set a header in this collection with the provided name and value. The name is
     * case-insensitive.
     * @param headerName - The name of the header to set. This value is case-insensitive.
     * @param headerValue - The value of the header to set.
     */ set(headerName, headerValue) {
        this._headersMap[getHeaderKey(headerName)] = {
            name: headerName,
            value: headerValue.toString()
        };
    }
    /**
     * Get the header value for the provided header name, or undefined if no header exists in this
     * collection with the provided name.
     * @param headerName - The name of the header.
     */ get(headerName) {
        const header = this._headersMap[getHeaderKey(headerName)];
        return !header ? undefined : header.value;
    }
    /**
     * Get whether or not this header collection contains a header entry for the provided header name.
     */ contains(headerName) {
        return !!this._headersMap[getHeaderKey(headerName)];
    }
    /**
     * Remove the header with the provided headerName. Return whether or not the header existed and
     * was removed.
     * @param headerName - The name of the header to remove.
     */ remove(headerName) {
        const result = this.contains(headerName);
        delete this._headersMap[getHeaderKey(headerName)];
        return result;
    }
    /**
     * Get the headers that are contained this collection as an object.
     */ rawHeaders() {
        return this.toJson({
            preserveCase: true
        });
    }
    /**
     * Get the headers that are contained in this collection as an array.
     */ headersArray() {
        const headers = [];
        for(const headerKey in this._headersMap)headers.push(this._headersMap[headerKey]);
        return headers;
    }
    /**
     * Get the header names that are contained in this collection.
     */ headerNames() {
        const headerNames = [];
        const headers = this.headersArray();
        for(let i = 0; i < headers.length; ++i)headerNames.push(headers[i].name);
        return headerNames;
    }
    /**
     * Get the header values that are contained in this collection.
     */ headerValues() {
        const headerValues = [];
        const headers = this.headersArray();
        for(let i = 0; i < headers.length; ++i)headerValues.push(headers[i].value);
        return headerValues;
    }
    /**
     * Get the JSON object representation of this HTTP header collection.
     */ toJson(options = {
    }) {
        const result = {
        };
        if (options.preserveCase) for(const headerKey in this._headersMap){
            const header = this._headersMap[headerKey];
            result[header.name] = header.value;
        }
        else for(const headerKey1 in this._headersMap){
            const header = this._headersMap[headerKey1];
            result[getHeaderKey(header.name)] = header.value;
        }
        return result;
    }
    /**
     * Get the string representation of this HTTP header collection.
     */ toString() {
        return JSON.stringify(this.toJson({
            preserveCase: true
        }));
    }
    /**
     * Create a deep clone/copy of this HttpHeaders collection.
     */ clone() {
        const resultPreservingCasing = {
        };
        for(const headerKey in this._headersMap){
            const header = this._headersMap[headerKey];
            resultPreservingCasing[header.name] = header.value;
        }
        return new HttpHeaders(resultPreservingCasing);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"70Aao":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This file contains utility code to serialize and deserialize network operations according to `OperationSpec` objects generated by AutoRest.TypeScript from OpenAPI specifications.
/**
 * Used to map raw response objects to final shapes.
 * Helps packing and unpacking Dates and other encoded types that are not intrinsic to JSON.
 * Also allows pulling values from headers, as well as inserting default values and constants.
 */ parcelHelpers.export(exports, "Serializer", ()=>Serializer
);
/**
 * Utility function that serializes an object that might contain binary information into a plain object, array or a string.
 */ parcelHelpers.export(exports, "serializeObject", ()=>serializeObject
);
parcelHelpers.export(exports, "MapperType", ()=>MapperType
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/* eslint-disable eqeqeq */ var _base64 = require("./util/base64");
var _utils = require("./util/utils");
var _serializerCommon = require("./util/serializer.common");
class Serializer {
    constructor(/**
     * The provided model mapper.
     */ modelMappers = {
    }, /**
     * Whether the contents are XML or not.
     */ isXML){
        this.modelMappers = modelMappers;
        this.isXML = isXML;
    }
    /**
     * Validates constraints, if any. This function will throw if the provided value does not respect those constraints.
     * @param mapper - The definition of data models.
     * @param value - The value.
     * @param objectName - Name of the object. Used in the error messages.
     */ validateConstraints(mapper, value, objectName) {
        const failValidation = (constraintName, constraintValue)=>{
            throw new Error(`"${objectName}" with value "${value}" should satisfy the constraint "${constraintName}": ${constraintValue}.`);
        };
        if (mapper.constraints && value != undefined) {
            const valueAsNumber = value;
            const { ExclusiveMaximum , ExclusiveMinimum , InclusiveMaximum , InclusiveMinimum , MaxItems , MaxLength , MinItems , MinLength , MultipleOf , Pattern , UniqueItems ,  } = mapper.constraints;
            if (ExclusiveMaximum != undefined && valueAsNumber >= ExclusiveMaximum) failValidation("ExclusiveMaximum", ExclusiveMaximum);
            if (ExclusiveMinimum != undefined && valueAsNumber <= ExclusiveMinimum) failValidation("ExclusiveMinimum", ExclusiveMinimum);
            if (InclusiveMaximum != undefined && valueAsNumber > InclusiveMaximum) failValidation("InclusiveMaximum", InclusiveMaximum);
            if (InclusiveMinimum != undefined && valueAsNumber < InclusiveMinimum) failValidation("InclusiveMinimum", InclusiveMinimum);
            const valueAsArray = value;
            if (MaxItems != undefined && valueAsArray.length > MaxItems) failValidation("MaxItems", MaxItems);
            if (MaxLength != undefined && valueAsArray.length > MaxLength) failValidation("MaxLength", MaxLength);
            if (MinItems != undefined && valueAsArray.length < MinItems) failValidation("MinItems", MinItems);
            if (MinLength != undefined && valueAsArray.length < MinLength) failValidation("MinLength", MinLength);
            if (MultipleOf != undefined && valueAsNumber % MultipleOf !== 0) failValidation("MultipleOf", MultipleOf);
            if (Pattern) {
                const pattern = typeof Pattern === "string" ? new RegExp(Pattern) : Pattern;
                if (typeof value !== "string" || value.match(pattern) === null) failValidation("Pattern", Pattern);
            }
            if (UniqueItems && valueAsArray.some((item, i, ar)=>ar.indexOf(item) !== i
            )) failValidation("UniqueItems", UniqueItems);
        }
    }
    /**
     * Serialize the given object based on its metadata defined in the mapper.
     *
     * @param mapper - The mapper which defines the metadata of the serializable object.
     * @param object - A valid Javascript object to be serialized.
     * @param objectName - Name of the serialized object.
     * @param options - additional options to deserialization.
     * @returns A valid serialized Javascript object.
     */ serialize(mapper, object, objectName, options = {
    }) {
        var _a, _b, _c;
        const updatedOptions = {
            rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : "",
            includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,
            xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : _serializerCommon.XML_CHARKEY
        };
        let payload = {
        };
        const mapperType = mapper.type.name;
        if (!objectName) objectName = mapper.serializedName;
        if (mapperType.match(/^Sequence$/i) !== null) payload = [];
        if (mapper.isConstant) object = mapper.defaultValue;
        // This table of allowed values should help explain
        // the mapper.required and mapper.nullable properties.
        // X means "neither undefined or null are allowed".
        //           || required
        //           || true      | false
        //  nullable || ==========================
        //      true || null      | undefined/null
        //     false || X         | undefined
        // undefined || X         | undefined/null
        const { required , nullable  } = mapper;
        if (required && nullable && object === undefined) throw new Error(`${objectName} cannot be undefined.`);
        if (required && !nullable && object == undefined) throw new Error(`${objectName} cannot be null or undefined.`);
        if (!required && nullable === false && object === null) throw new Error(`${objectName} cannot be null.`);
        if (object == undefined) payload = object;
        else {
            // Validate Constraints if any
            this.validateConstraints(mapper, object, objectName);
            if (mapperType.match(/^any$/i) !== null) payload = object;
            else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) payload = serializeBasicTypes(mapperType, objectName, object);
            else if (mapperType.match(/^Enum$/i) !== null) {
                const enumMapper = mapper;
                payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);
            } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) payload = serializeDateTypes(mapperType, object, objectName);
            else if (mapperType.match(/^ByteArray$/i) !== null) payload = serializeByteArrayType(objectName, object);
            else if (mapperType.match(/^Base64Url$/i) !== null) payload = serializeBase64UrlType(objectName, object);
            else if (mapperType.match(/^Sequence$/i) !== null) payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
            else if (mapperType.match(/^Dictionary$/i) !== null) payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
            else if (mapperType.match(/^Composite$/i) !== null) payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
        }
        return payload;
    }
    /**
     * Deserialize the given object based on its metadata defined in the mapper.
     *
     * @param mapper - The mapper which defines the metadata of the serializable object.
     * @param responseBody - A valid Javascript entity to be deserialized.
     * @param objectName - Name of the deserialized object.
     * @param options - Controls behavior of XML parser and builder.
     * @returns A valid deserialized Javascript object.
     */ deserialize(mapper, responseBody, objectName, options = {
    }) {
        var _a, _b, _c;
        const updatedOptions = {
            rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : "",
            includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,
            xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : _serializerCommon.XML_CHARKEY
        };
        if (responseBody == undefined) {
            if (this.isXML && mapper.type.name === "Sequence" && !mapper.xmlIsWrapped) // Edge case for empty XML non-wrapped lists. xml2js can't distinguish
            // between the list being empty versus being missing,
            // so let's do the more user-friendly thing and return an empty list.
            responseBody = [];
            // specifically check for undefined as default value can be a falsey value `0, "", false, null`
            if (mapper.defaultValue !== undefined) responseBody = mapper.defaultValue;
            return responseBody;
        }
        let payload;
        const mapperType = mapper.type.name;
        if (!objectName) objectName = mapper.serializedName;
        if (mapperType.match(/^Composite$/i) !== null) payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);
        else {
            if (this.isXML) {
                const xmlCharKey = updatedOptions.xmlCharKey;
                const castResponseBody = responseBody;
                /**
                 * If the mapper specifies this as a non-composite type value but the responseBody contains
                 * both header ("$" i.e., XML_ATTRKEY) and body ("#" i.e., XML_CHARKEY) properties,
                 * then just reduce the responseBody value to the body ("#" i.e., XML_CHARKEY) property.
                 */ if (castResponseBody[_serializerCommon.XML_ATTRKEY] != undefined && castResponseBody[xmlCharKey] != undefined) responseBody = castResponseBody[xmlCharKey];
            }
            if (mapperType.match(/^Number$/i) !== null) {
                payload = parseFloat(responseBody);
                if (isNaN(payload)) payload = responseBody;
            } else if (mapperType.match(/^Boolean$/i) !== null) {
                if (responseBody === "true") payload = true;
                else if (responseBody === "false") payload = false;
                else payload = responseBody;
            } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) payload = responseBody;
            else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) payload = new Date(responseBody);
            else if (mapperType.match(/^UnixTime$/i) !== null) payload = unixTimeToDate(responseBody);
            else if (mapperType.match(/^ByteArray$/i) !== null) payload = _base64.decodeString(responseBody);
            else if (mapperType.match(/^Base64Url$/i) !== null) payload = base64UrlToByteArray(responseBody);
            else if (mapperType.match(/^Sequence$/i) !== null) payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);
            else if (mapperType.match(/^Dictionary$/i) !== null) payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);
        }
        if (mapper.isConstant) payload = mapper.defaultValue;
        return payload;
    }
}
function trimEnd(str, ch) {
    let len = str.length;
    while(len - 1 >= 0 && str[len - 1] === ch)--len;
    return str.substr(0, len);
}
function bufferToBase64Url(buffer) {
    if (!buffer) return undefined;
    if (!(buffer instanceof Uint8Array)) throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);
    // Uint8Array to Base64.
    const str = _base64.encodeByteArray(buffer);
    // Base64 to Base64Url.
    return trimEnd(str, "=").replace(/\+/g, "-").replace(/\//g, "_");
}
function base64UrlToByteArray(str) {
    if (!str) return undefined;
    if (str && typeof str.valueOf() !== "string") throw new Error("Please provide an input of type string for converting to Uint8Array");
    // Base64Url to Base64.
    str = str.replace(/-/g, "+").replace(/_/g, "/");
    // Base64 to Uint8Array.
    return _base64.decodeString(str);
}
function splitSerializeName(prop) {
    const classes = [];
    let partialclass = "";
    if (prop) {
        const subwords = prop.split(".");
        for (const item of subwords)if (item.charAt(item.length - 1) === "\\") partialclass += item.substr(0, item.length - 1) + ".";
        else {
            partialclass += item;
            classes.push(partialclass);
            partialclass = "";
        }
    }
    return classes;
}
function dateToUnixTime(d) {
    if (!d) return undefined;
    if (typeof d.valueOf() === "string") d = new Date(d);
    return Math.floor(d.getTime() / 1000);
}
function unixTimeToDate(n) {
    if (!n) return undefined;
    return new Date(n * 1000);
}
function serializeBasicTypes(typeName, objectName, value) {
    if (value !== null && value !== undefined) {
        if (typeName.match(/^Number$/i) !== null) {
            if (typeof value !== "number") throw new Error(`${objectName} with value ${value} must be of type number.`);
        } else if (typeName.match(/^String$/i) !== null) {
            if (typeof value.valueOf() !== "string") throw new Error(`${objectName} with value "${value}" must be of type string.`);
        } else if (typeName.match(/^Uuid$/i) !== null) {
            if (!(typeof value.valueOf() === "string" && _utils.isValidUuid(value))) throw new Error(`${objectName} with value "${value}" must be of type string and a valid uuid.`);
        } else if (typeName.match(/^Boolean$/i) !== null) {
            if (typeof value !== "boolean") throw new Error(`${objectName} with value ${value} must be of type boolean.`);
        } else if (typeName.match(/^Stream$/i) !== null) {
            const objectType = typeof value;
            if (objectType !== "string" && objectType !== "function" && !(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value) && !((typeof Blob === "function" || typeof Blob === "object") && value instanceof Blob)) throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.`);
        }
    }
    return value;
}
function serializeEnumType(objectName, allowedValues, value) {
    if (!allowedValues) throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);
    const isPresent = allowedValues.some((item)=>{
        if (typeof item.valueOf() === "string") return item.toLowerCase() === value.toLowerCase();
        return item === value;
    });
    if (!isPresent) throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);
    return value;
}
function serializeByteArrayType(objectName, value) {
    let returnValue = "";
    if (value != undefined) {
        if (!(value instanceof Uint8Array)) throw new Error(`${objectName} must be of type Uint8Array.`);
        returnValue = _base64.encodeByteArray(value);
    }
    return returnValue;
}
function serializeBase64UrlType(objectName, value) {
    let returnValue = "";
    if (value != undefined) {
        if (!(value instanceof Uint8Array)) throw new Error(`${objectName} must be of type Uint8Array.`);
        returnValue = bufferToBase64Url(value) || "";
    }
    return returnValue;
}
function serializeDateTypes(typeName, value, objectName) {
    if (value != undefined) {
        if (typeName.match(/^Date$/i) !== null) {
            if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
            value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);
        } else if (typeName.match(/^DateTime$/i) !== null) {
            if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
            value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();
        } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {
            if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);
            value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();
        } else if (typeName.match(/^UnixTime$/i) !== null) {
            if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` + `for it to be serialized in UnixTime/Epoch format.`);
            value = dateToUnixTime(value);
        } else if (typeName.match(/^TimeSpan$/i) !== null) {
            if (!_utils.isDuration(value)) throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was "${value}".`);
        }
    }
    return value;
}
function serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {
    if (!Array.isArray(object)) throw new Error(`${objectName} must be of type Array.`);
    const elementType = mapper.type.element;
    if (!elementType || typeof elementType !== "object") throw new Error(`element" metadata for an Array must be defined in the ` + `mapper and it must of type "object" in ${objectName}.`);
    const tempArray = [];
    for(let i = 0; i < object.length; i++){
        const serializedValue = serializer.serialize(elementType, object[i], objectName, options);
        if (isXml && elementType.xmlNamespace) {
            const xmlnsKey = elementType.xmlNamespacePrefix ? `xmlns:${elementType.xmlNamespacePrefix}` : "xmlns";
            if (elementType.type.name === "Composite") {
                tempArray[i] = Object.assign({
                }, serializedValue);
                tempArray[i][_serializerCommon.XML_ATTRKEY] = {
                    [xmlnsKey]: elementType.xmlNamespace
                };
            } else {
                tempArray[i] = {
                };
                tempArray[i][options.xmlCharKey] = serializedValue;
                tempArray[i][_serializerCommon.XML_ATTRKEY] = {
                    [xmlnsKey]: elementType.xmlNamespace
                };
            }
        } else tempArray[i] = serializedValue;
    }
    return tempArray;
}
function serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {
    if (typeof object !== "object") throw new Error(`${objectName} must be of type object.`);
    const valueType = mapper.type.value;
    if (!valueType || typeof valueType !== "object") throw new Error(`"value" metadata for a Dictionary must be defined in the ` + `mapper and it must of type "object" in ${objectName}.`);
    const tempDictionary = {
    };
    for (const key of Object.keys(object)){
        const serializedValue = serializer.serialize(valueType, object[key], objectName, options);
        // If the element needs an XML namespace we need to add it within the $ property
        tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);
    }
    // Add the namespace to the root element if needed
    if (isXml && mapper.xmlNamespace) {
        const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
        const result = tempDictionary;
        result[_serializerCommon.XML_ATTRKEY] = {
            [xmlnsKey]: mapper.xmlNamespace
        };
        return result;
    }
    return tempDictionary;
}
/**
 * Resolves the additionalProperties property from a referenced mapper.
 * @param serializer - The serializer containing the entire set of mappers.
 * @param mapper - The composite mapper to resolve.
 * @param objectName - Name of the object being serialized.
 */ function resolveAdditionalProperties(serializer, mapper, objectName) {
    const additionalProperties = mapper.type.additionalProperties;
    if (!additionalProperties && mapper.type.className) {
        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);
        return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;
    }
    return additionalProperties;
}
/**
 * Finds the mapper referenced by `className`.
 * @param serializer - The serializer containing the entire set of mappers
 * @param mapper - The composite mapper to resolve
 * @param objectName - Name of the object being serialized
 */ function resolveReferencedMapper(serializer, mapper, objectName) {
    const className = mapper.type.className;
    if (!className) throw new Error(`Class name for model "${objectName}" is not provided in the mapper "${JSON.stringify(mapper, undefined, 2)}".`);
    return serializer.modelMappers[className];
}
/**
 * Resolves a composite mapper's modelProperties.
 * @param serializer - The serializer containing the entire set of mappers
 * @param mapper - The composite mapper to resolve
 */ function resolveModelProperties(serializer, mapper, objectName) {
    let modelProps = mapper.type.modelProperties;
    if (!modelProps) {
        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);
        if (!modelMapper) throw new Error(`mapper() cannot be null or undefined for model "${mapper.type.className}".`);
        modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;
        if (!modelProps) throw new Error(`modelProperties cannot be null or undefined in the ` + `mapper "${JSON.stringify(modelMapper)}" of type "${mapper.type.className}" for object "${objectName}".`);
    }
    return modelProps;
}
function serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {
    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) mapper = getPolymorphicMapper(serializer, mapper, object, "clientName");
    if (object != undefined) {
        const payload = {
        };
        const modelProps = resolveModelProperties(serializer, mapper, objectName);
        for (const key of Object.keys(modelProps)){
            const propertyMapper = modelProps[key];
            if (propertyMapper.readOnly) continue;
            let propName;
            let parentObject = payload;
            if (serializer.isXML) {
                if (propertyMapper.xmlIsWrapped) propName = propertyMapper.xmlName;
                else propName = propertyMapper.xmlElementName || propertyMapper.xmlName;
            } else {
                const paths = splitSerializeName(propertyMapper.serializedName);
                propName = paths.pop();
                for (const pathName of paths){
                    const childObject = parentObject[pathName];
                    if (childObject == undefined && (object[key] != undefined || propertyMapper.defaultValue !== undefined)) parentObject[pathName] = {
                    };
                    parentObject = parentObject[pathName];
                }
            }
            if (parentObject != undefined) {
                if (isXml && mapper.xmlNamespace) {
                    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
                    parentObject[_serializerCommon.XML_ATTRKEY] = Object.assign(Object.assign({
                    }, parentObject[_serializerCommon.XML_ATTRKEY]), {
                        [xmlnsKey]: mapper.xmlNamespace
                    });
                }
                const propertyObjectName = propertyMapper.serializedName !== "" ? objectName + "." + propertyMapper.serializedName : objectName;
                let toSerialize = object[key];
                const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
                if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && toSerialize == undefined) toSerialize = mapper.serializedName;
                const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);
                if (serializedValue !== undefined && propName != undefined) {
                    const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);
                    if (isXml && propertyMapper.xmlIsAttribute) {
                        // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.
                        // This keeps things simple while preventing name collision
                        // with names in user documents.
                        parentObject[_serializerCommon.XML_ATTRKEY] = parentObject[_serializerCommon.XML_ATTRKEY] || {
                        };
                        parentObject[_serializerCommon.XML_ATTRKEY][propName] = serializedValue;
                    } else if (isXml && propertyMapper.xmlIsWrapped) parentObject[propName] = {
                        [propertyMapper.xmlElementName]: value
                    };
                    else parentObject[propName] = value;
                }
            }
        }
        const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);
        if (additionalPropertiesMapper) {
            const propNames = Object.keys(modelProps);
            for(const clientPropName in object){
                const isAdditionalProperty = propNames.every((pn)=>pn !== clientPropName
                );
                if (isAdditionalProperty) payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '["' + clientPropName + '"]', options);
            }
        }
        return payload;
    }
    return object;
}
function getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {
    if (!isXml || !propertyMapper.xmlNamespace) return serializedValue;
    const xmlnsKey = propertyMapper.xmlNamespacePrefix ? `xmlns:${propertyMapper.xmlNamespacePrefix}` : "xmlns";
    const xmlNamespace = {
        [xmlnsKey]: propertyMapper.xmlNamespace
    };
    if ([
        "Composite"
    ].includes(propertyMapper.type.name)) {
        if (serializedValue[_serializerCommon.XML_ATTRKEY]) return serializedValue;
        else {
            const result = Object.assign({
            }, serializedValue);
            result[_serializerCommon.XML_ATTRKEY] = xmlNamespace;
            return result;
        }
    }
    const result = {
    };
    result[options.xmlCharKey] = serializedValue;
    result[_serializerCommon.XML_ATTRKEY] = xmlNamespace;
    return result;
}
function isSpecialXmlProperty(propertyName, options) {
    return [
        _serializerCommon.XML_ATTRKEY,
        options.xmlCharKey
    ].includes(propertyName);
}
function deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {
    var _a;
    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) mapper = getPolymorphicMapper(serializer, mapper, responseBody, "serializedName");
    const modelProps = resolveModelProperties(serializer, mapper, objectName);
    let instance = {
    };
    const handledPropertyNames = [];
    for (const key of Object.keys(modelProps)){
        const propertyMapper = modelProps[key];
        const paths = splitSerializeName(modelProps[key].serializedName);
        handledPropertyNames.push(paths[0]);
        const { serializedName , xmlName , xmlElementName  } = propertyMapper;
        let propertyObjectName = objectName;
        if (serializedName !== "" && serializedName !== undefined) propertyObjectName = objectName + "." + serializedName;
        const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;
        if (headerCollectionPrefix) {
            const dictionary = {
            };
            for (const headerKey of Object.keys(responseBody)){
                if (headerKey.startsWith(headerCollectionPrefix)) dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);
                handledPropertyNames.push(headerKey);
            }
            instance[key] = dictionary;
        } else if (serializer.isXML) {
            if (propertyMapper.xmlIsAttribute && responseBody[_serializerCommon.XML_ATTRKEY]) instance[key] = serializer.deserialize(propertyMapper, responseBody[_serializerCommon.XML_ATTRKEY][xmlName], propertyObjectName, options);
            else {
                const propertyName = xmlElementName || xmlName || serializedName;
                if (propertyMapper.xmlIsWrapped) {
                    /* a list of <xmlElementName> wrapped by <xmlName>
                      For the xml example below
                        <Cors>
                          <CorsRule>...</CorsRule>
                          <CorsRule>...</CorsRule>
                        </Cors>
                      the responseBody has
                        {
                          Cors: {
                            CorsRule: [{...}, {...}]
                          }
                        }
                      xmlName is "Cors" and xmlElementName is"CorsRule".
                    */ const wrapped = responseBody[xmlName];
                    const elementList = (_a = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _a !== void 0 ? _a : [];
                    instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);
                } else {
                    const property = responseBody[propertyName];
                    instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);
                }
            }
        } else {
            // deserialize the property if it is present in the provided responseBody instance
            let propertyInstance;
            let res = responseBody;
            // traversing the object step by step.
            for (const item of paths){
                if (!res) break;
                res = res[item];
            }
            propertyInstance = res;
            const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;
            // checking that the model property name (key)(ex: "fishtype") and the
            // clientName of the polymorphicDiscriminator {metadata} (ex: "fishtype")
            // instead of the serializedName of the polymorphicDiscriminator (ex: "fish.type")
            // is a better approach. The generator is not consistent with escaping '\.' in the
            // serializedName of the property (ex: "fish\.type") that is marked as polymorphic discriminator
            // and the serializedName of the metadata polymorphicDiscriminator (ex: "fish.type"). However,
            // the clientName transformation of the polymorphicDiscriminator (ex: "fishtype") and
            // the transformation of model property name (ex: "fishtype") is done consistently.
            // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.
            if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && propertyInstance == undefined) propertyInstance = mapper.serializedName;
            let serializedValue;
            // paging
            if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === "") {
                propertyInstance = responseBody[key];
                const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
                // Copy over any properties that have already been added into the instance, where they do
                // not exist on the newly de-serialized array
                for (const [k, v] of Object.entries(instance))if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) arrayInstance[k] = v;
                instance = arrayInstance;
            } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {
                serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
                instance[key] = serializedValue;
            }
        }
    }
    const additionalPropertiesMapper = mapper.type.additionalProperties;
    if (additionalPropertiesMapper) {
        const isAdditionalProperty = (responsePropName)=>{
            for(const clientPropName in modelProps){
                const paths = splitSerializeName(modelProps[clientPropName].serializedName);
                if (paths[0] === responsePropName) return false;
            }
            return true;
        };
        for(const responsePropName1 in responseBody)if (isAdditionalProperty(responsePropName1)) instance[responsePropName1] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName1], objectName + '["' + responsePropName1 + '"]', options);
    } else if (responseBody) {
        for (const key of Object.keys(responseBody))if (instance[key] === undefined && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key, options)) instance[key] = responseBody[key];
    }
    return instance;
}
function deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {
    const value = mapper.type.value;
    if (!value || typeof value !== "object") throw new Error(`"value" metadata for a Dictionary must be defined in the ` + `mapper and it must of type "object" in ${objectName}`);
    if (responseBody) {
        const tempDictionary = {
        };
        for (const key of Object.keys(responseBody))tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);
        return tempDictionary;
    }
    return responseBody;
}
function deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {
    const element = mapper.type.element;
    if (!element || typeof element !== "object") throw new Error(`element" metadata for an Array must be defined in the ` + `mapper and it must of type "object" in ${objectName}`);
    if (responseBody) {
        if (!Array.isArray(responseBody)) // xml2js will interpret a single element array as just the element, so force it to be an array
        responseBody = [
            responseBody
        ];
        const tempArray = [];
        for(let i = 0; i < responseBody.length; i++)tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);
        return tempArray;
    }
    return responseBody;
}
function getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {
    const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
    if (polymorphicDiscriminator) {
        const discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];
        if (discriminatorName != undefined) {
            const discriminatorValue = object[discriminatorName];
            if (discriminatorValue != undefined) {
                const typeName = mapper.type.uberParent || mapper.type.className;
                const indexDiscriminator = discriminatorValue === typeName ? discriminatorValue : typeName + "." + discriminatorValue;
                const polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];
                if (polymorphicMapper) mapper = polymorphicMapper;
            }
        }
    }
    return mapper;
}
function getPolymorphicDiscriminatorRecursively(serializer, mapper) {
    return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);
}
function getPolymorphicDiscriminatorSafely(serializer, typeName) {
    return typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator;
}
function serializeObject(toSerialize) {
    const castToSerialize = toSerialize;
    if (toSerialize == undefined) return undefined;
    if (toSerialize instanceof Uint8Array) {
        toSerialize = _base64.encodeByteArray(toSerialize);
        return toSerialize;
    } else if (toSerialize instanceof Date) return toSerialize.toISOString();
    else if (Array.isArray(toSerialize)) {
        const array = [];
        for(let i = 0; i < toSerialize.length; i++)array.push(serializeObject(toSerialize[i]));
        return array;
    } else if (typeof toSerialize === "object") {
        const dictionary = {
        };
        for(const property in toSerialize)dictionary[property] = serializeObject(castToSerialize[property]);
        return dictionary;
    }
    return toSerialize;
}
/**
 * Utility function to create a K:V from a list of strings
 */ function strEnum(o) {
    const result = {
    };
    for (const key of o)result[key] = key;
    return result;
}
const MapperType = strEnum([
    "Base64Url",
    "Boolean",
    "ByteArray",
    "Composite",
    "Date",
    "DateTime",
    "DateTimeRfc1123",
    "Dictionary",
    "Enum",
    "Number",
    "Object",
    "Sequence",
    "String",
    "Stream",
    "TimeSpan",
    "UnixTime", 
]);

},{"./util/base64":"hWkEy","./util/utils":"9PNR0","./util/serializer.common":"imsp0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hWkEy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Encodes a string in base64 format.
 * @param value - The string to encode
 */ parcelHelpers.export(exports, "encodeString", ()=>encodeString
);
/**
 * Encodes a byte array in base64 format.
 * @param value - The Uint8Aray to encode
 */ parcelHelpers.export(exports, "encodeByteArray", ()=>encodeByteArray
);
/**
 * Decodes a base64 string into a byte array.
 * @param value - The base64 string to decode
 */ parcelHelpers.export(exports, "decodeString", ()=>decodeString
);
function encodeString(value) {
    return btoa(value);
}
function encodeByteArray(value) {
    let str = "";
    for(let i = 0; i < value.length; i++)str += String.fromCharCode(value[i]);
    return btoa(str);
}
function decodeString(value) {
    const byteString = atob(value);
    const arr = new Uint8Array(byteString.length);
    for(let i = 0; i < byteString.length; i++)arr[i] = byteString.charCodeAt(i);
    return arr;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9PNR0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNode", ()=>isNode
);
/**
 * Checks if a parsed URL is HTTPS
 *
 * @param urlToCheck - The url to check
 * @returns True if the URL is HTTPS; false otherwise.
 */ parcelHelpers.export(exports, "urlIsHTTPS", ()=>urlIsHTTPS
);
/**
 * Encodes an URI.
 *
 * @param uri - The URI to be encoded.
 * @returns The encoded URI.
 */ parcelHelpers.export(exports, "encodeUri", ()=>encodeUri
);
/**
 * Returns a stripped version of the Http Response which only contains body,
 * headers and the status.
 *
 * @param response - The Http Response
 * @returns The stripped version of Http Response.
 */ parcelHelpers.export(exports, "stripResponse", ()=>stripResponse
);
/**
 * Returns a stripped version of the Http Request that does not contain the
 * Authorization header.
 *
 * @param request - The Http Request object
 * @returns The stripped version of Http Request.
 */ parcelHelpers.export(exports, "stripRequest", ()=>stripRequest
);
/**
 * Validates the given uuid as a string
 *
 * @param uuid - The uuid as a string that needs to be validated
 * @returns True if the uuid is valid; false otherwise.
 */ parcelHelpers.export(exports, "isValidUuid", ()=>isValidUuid
);
/**
 * Generated UUID
 *
 * @returns RFC4122 v4 UUID.
 */ parcelHelpers.export(exports, "generateUuid", ()=>generateUuid
);
/**
 * Executes an array of promises sequentially. Inspiration of this method is here:
 * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!
 *
 * @param promiseFactories - An array of promise factories(A function that return a promise)
 * @param kickstart - Input to the first promise that is used to kickstart the promise chain.
 * If not provided then the promise chain starts with undefined.
 * @returns A chain of resolved or rejected promises
 */ parcelHelpers.export(exports, "executePromisesSequentially", ()=>executePromisesSequentially
);
/**
 * Converts a Promise to a callback.
 * @param promise - The Promise to be converted to a callback
 * @returns A function that takes the callback `(cb: Function) => void`
 * @deprecated generated code should instead depend on responseToBody
 */ // eslint-disable-next-line @typescript-eslint/ban-types
parcelHelpers.export(exports, "promiseToCallback", ()=>promiseToCallback
);
/**
 * Converts a Promise to a service callback.
 * @param promise - The Promise of HttpOperationResponse to be converted to a service callback
 * @returns A function that takes the service callback (cb: ServiceCallback<T>): void
 */ parcelHelpers.export(exports, "promiseToServiceCallback", ()=>promiseToServiceCallback
);
parcelHelpers.export(exports, "prepareXMLRootList", ()=>prepareXMLRootList
);
/**
 * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor
 * @param targetCtor - The target object on which the properties need to be applied.
 * @param sourceCtors - An array of source objects from which the properties need to be taken.
 */ parcelHelpers.export(exports, "applyMixins", ()=>applyMixins
);
/**
 * Indicates whether the given string is in ISO 8601 format.
 * @param value - The value to be validated for ISO 8601 duration format.
 * @returns `true` if valid, `false` otherwise.
 */ parcelHelpers.export(exports, "isDuration", ()=>isDuration
);
/**
 * Replace all of the instances of searchValue in value with the provided replaceValue.
 * @param value - The value to search and replace in.
 * @param searchValue - The value to search for in the value argument.
 * @param replaceValue - The value to replace searchValue with in the value argument.
 * @returns The value where each instance of searchValue was replaced with replacedValue.
 */ parcelHelpers.export(exports, "replaceAll", ()=>replaceAll
);
/**
 * Determines whether the given entity is a basic/primitive type
 * (string, number, boolean, null, undefined).
 * @param value - Any entity
 * @returns true is it is primitive type, false otherwise.
 */ parcelHelpers.export(exports, "isPrimitiveType", ()=>isPrimitiveType
);
parcelHelpers.export(exports, "getEnvironmentValue", ()=>getEnvironmentValue
);
/**
 * @internal
 * @returns true when input is an object type that is not null, Array, RegExp, or Date.
 */ parcelHelpers.export(exports, "isObject", ()=>isObject
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _constants = require("./constants");
var _serializerCommon = require("./serializer.common");
var _uuid = require("uuid");
var process = require("process");
const validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
const isNode = typeof process !== "undefined" && !!process.version && !!process.versions && !!process.versions.node;
function urlIsHTTPS(urlToCheck) {
    return urlToCheck.protocol.toLowerCase() === _constants.Constants.HTTPS;
}
function encodeUri(uri) {
    return encodeURIComponent(uri).replace(/!/g, "%21").replace(/"/g, "%27").replace(/\(/g, "%28").replace(/\)/g, "%29").replace(/\*/g, "%2A");
}
function stripResponse(response) {
    const strippedResponse = {
    };
    strippedResponse.body = response.bodyAsText;
    strippedResponse.headers = response.headers;
    strippedResponse.status = response.status;
    return strippedResponse;
}
function stripRequest(request) {
    const strippedRequest = request.clone();
    if (strippedRequest.headers) strippedRequest.headers.remove("authorization");
    return strippedRequest;
}
function isValidUuid(uuid) {
    return validUuidRegex.test(uuid);
}
function generateUuid() {
    return _uuid.v4();
}
function executePromisesSequentially(promiseFactories, kickstart) {
    let result = Promise.resolve(kickstart);
    promiseFactories.forEach((promiseFactory)=>{
        result = result.then(promiseFactory);
    });
    return result;
}
function promiseToCallback(promise) {
    if (typeof promise.then !== "function") throw new Error("The provided input is not a Promise.");
    // eslint-disable-next-line @typescript-eslint/ban-types
    return (cb)=>{
        promise.then((data)=>{
            // eslint-disable-next-line promise/no-callback-in-promise
            return cb(undefined, data);
        }).catch((err)=>{
            // eslint-disable-next-line promise/no-callback-in-promise
            cb(err);
        });
    };
}
function promiseToServiceCallback(promise) {
    if (typeof promise.then !== "function") throw new Error("The provided input is not a Promise.");
    return (cb)=>{
        promise.then((data)=>{
            return process.nextTick(cb, undefined, data.parsedBody, data.request, data);
        }).catch((err)=>{
            process.nextTick(cb, err);
        });
    };
}
function prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {
    if (!Array.isArray(obj)) obj = [
        obj
    ];
    if (!xmlNamespaceKey || !xmlNamespace) return {
        [elementName]: obj
    };
    const result = {
        [elementName]: obj
    };
    result[_serializerCommon.XML_ATTRKEY] = {
        [xmlNamespaceKey]: xmlNamespace
    };
    return result;
}
function applyMixins(targetCtorParam, sourceCtors) {
    const castTargetCtorParam = targetCtorParam;
    sourceCtors.forEach((sourceCtor)=>{
        Object.getOwnPropertyNames(sourceCtor.prototype).forEach((name)=>{
            castTargetCtorParam.prototype[name] = sourceCtor.prototype[name];
        });
    });
}
const validateISODuration = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
function isDuration(value) {
    return validateISODuration.test(value);
}
function replaceAll(value, searchValue, replaceValue) {
    return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || "");
}
function isPrimitiveType(value) {
    return typeof value !== "object" && typeof value !== "function" || value === null;
}
function getEnvironmentValue(name) {
    if (process.env[name]) return process.env[name];
    else if (process.env[name.toLowerCase()]) return process.env[name.toLowerCase()];
    return undefined;
}
function isObject(input) {
    return typeof input === "object" && input !== null && !Array.isArray(input) && !(input instanceof RegExp) && !(input instanceof Date);
}

},{"./constants":"anVPh","./serializer.common":"imsp0","uuid":"j4KJi","process":"d5jf4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"anVPh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Constants", ()=>Constants
);
const Constants = {
    /**
     * The core-http version
     */ coreHttpVersion: "2.2.4",
    /**
     * Specifies HTTP.
     */ HTTP: "http:",
    /**
     * Specifies HTTPS.
     */ HTTPS: "https:",
    /**
     * Specifies HTTP Proxy.
     */ HTTP_PROXY: "HTTP_PROXY",
    /**
     * Specifies HTTPS Proxy.
     */ HTTPS_PROXY: "HTTPS_PROXY",
    /**
     * Specifies NO Proxy.
     */ NO_PROXY: "NO_PROXY",
    /**
     * Specifies ALL Proxy.
     */ ALL_PROXY: "ALL_PROXY",
    HttpConstants: {
        /**
         * Http Verbs
         */ HttpVerbs: {
            PUT: "PUT",
            GET: "GET",
            DELETE: "DELETE",
            POST: "POST",
            MERGE: "MERGE",
            HEAD: "HEAD",
            PATCH: "PATCH"
        },
        StatusCodes: {
            TooManyRequests: 429,
            ServiceUnavailable: 503
        }
    },
    /**
     * Defines constants for use with HTTP headers.
     */ HeaderConstants: {
        /**
         * The Authorization header.
         */ AUTHORIZATION: "authorization",
        AUTHORIZATION_SCHEME: "Bearer",
        /**
         * The Retry-After response-header field can be used with a 503 (Service
         * Unavailable) or 349 (Too Many Requests) responses to indicate how long
         * the service is expected to be unavailable to the requesting client.
         */ RETRY_AFTER: "Retry-After",
        /**
         * The UserAgent header.
         */ USER_AGENT: "User-Agent"
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"imsp0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "XML_ATTRKEY", ()=>XML_ATTRKEY
);
parcelHelpers.export(exports, "XML_CHARKEY", ()=>XML_CHARKEY
);
const XML_ATTRKEY = "$";
const XML_CHARKEY = "_";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j4KJi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v1", ()=>_v1JsDefault.default
);
parcelHelpers.export(exports, "v3", ()=>_v3JsDefault.default
);
parcelHelpers.export(exports, "v4", ()=>_v4JsDefault.default
);
parcelHelpers.export(exports, "v5", ()=>_v5JsDefault.default
);
parcelHelpers.export(exports, "NIL", ()=>_nilJsDefault.default
);
parcelHelpers.export(exports, "version", ()=>_versionJsDefault.default
);
parcelHelpers.export(exports, "validate", ()=>_validateJsDefault.default
);
parcelHelpers.export(exports, "stringify", ()=>_stringifyJsDefault.default
);
parcelHelpers.export(exports, "parse", ()=>_parseJsDefault.default
);
var _v1Js = require("./v1.js");
var _v1JsDefault = parcelHelpers.interopDefault(_v1Js);
var _v3Js = require("./v3.js");
var _v3JsDefault = parcelHelpers.interopDefault(_v3Js);
var _v4Js = require("./v4.js");
var _v4JsDefault = parcelHelpers.interopDefault(_v4Js);
var _v5Js = require("./v5.js");
var _v5JsDefault = parcelHelpers.interopDefault(_v5Js);
var _nilJs = require("./nil.js");
var _nilJsDefault = parcelHelpers.interopDefault(_nilJs);
var _versionJs = require("./version.js");
var _versionJsDefault = parcelHelpers.interopDefault(_versionJs);
var _validateJs = require("./validate.js");
var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
var _stringifyJs = require("./stringify.js");
var _stringifyJsDefault = parcelHelpers.interopDefault(_stringifyJs);
var _parseJs = require("./parse.js");
var _parseJsDefault = parcelHelpers.interopDefault(_parseJs);

},{"./v1.js":false,"./v3.js":false,"./v4.js":"8zJtu","./v5.js":false,"./nil.js":false,"./version.js":false,"./validate.js":"eHPgI","./stringify.js":"5Y9F1","./parse.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8zJtu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rngJs = require("./rng.js");
var _rngJsDefault = parcelHelpers.interopDefault(_rngJs);
var _stringifyJs = require("./stringify.js");
var _stringifyJsDefault = parcelHelpers.interopDefault(_stringifyJs);
function v4(options, buf, offset) {
    options = options || {
    };
    var rnds = options.random || (options.rng || _rngJsDefault.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128; // Copy bytes to buffer, if provided
    if (buf) {
        offset = offset || 0;
        for(var i = 0; i < 16; ++i)buf[offset + i] = rnds[i];
        return buf;
    }
    return _stringifyJsDefault.default(rnds);
}
exports.default = v4;

},{"./rng.js":"2psyE","./stringify.js":"5Y9F1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2psyE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
    // lazy load so that environments that need to polyfill have a chance to do so
    if (!getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
        // find the complete implementation of crypto (msCrypto) on IE11.
        getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
        if (!getRandomValues) throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
    return getRandomValues(rnds8);
}
exports.default = rng;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Y9F1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _validateJs = require("./validate.js");
var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ var byteToHex = [];
for(var i = 0; i < 256; ++i)byteToHex.push((i + 256).toString(16).substr(1));
function stringify(arr) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!_validateJsDefault.default(uuid)) throw TypeError('Stringified UUID is invalid');
    return uuid;
}
exports.default = stringify;

},{"./validate.js":"eHPgI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eHPgI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _regexJs = require("./regex.js");
var _regexJsDefault = parcelHelpers.interopDefault(_regexJs);
function validate(uuid) {
    return typeof uuid === 'string' && _regexJsDefault.default.test(uuid);
}
exports.default = validate;

},{"./regex.js":"bUa5g","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bUa5g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {
};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {
};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"3BG92":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
parcelHelpers.export(exports, "DefaultHttpClient", ()=>_xhrHttpClient.XhrHttpClient
);
var _xhrHttpClient = require("./xhrHttpClient");

},{"./xhrHttpClient":"77Otn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"77Otn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.
 */ parcelHelpers.export(exports, "XhrHttpClient", ()=>XhrHttpClient
);
// exported locally for testing
parcelHelpers.export(exports, "parseHeaders", ()=>parseHeaders
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _httpHeaders = require("./httpHeaders");
var _abortController = require("@azure/abort-controller");
var _restError = require("./restError");
class XhrHttpClient {
    sendRequest(request) {
        var _a;
        const xhr = new XMLHttpRequest();
        if (request.proxySettings) throw new Error("HTTP proxy is not supported in browser environment");
        const abortSignal = request.abortSignal;
        if (abortSignal) {
            if (abortSignal.aborted) return Promise.reject(new _abortController.AbortError("The operation was aborted."));
            const listener = ()=>{
                xhr.abort();
            };
            abortSignal.addEventListener("abort", listener);
            xhr.addEventListener("readystatechange", ()=>{
                if (xhr.readyState === XMLHttpRequest.DONE) abortSignal.removeEventListener("abort", listener);
            });
        }
        addProgressListener(xhr.upload, request.onUploadProgress);
        addProgressListener(xhr, request.onDownloadProgress);
        if (request.formData) {
            const formData = request.formData;
            const requestForm = new FormData();
            const appendFormValue = (key, value)=>{
                if (value && Object.prototype.hasOwnProperty.call(value, "value") && Object.prototype.hasOwnProperty.call(value, "options")) requestForm.append(key, value.value, value.options);
                else requestForm.append(key, value);
            };
            for (const formKey of Object.keys(formData)){
                const formValue = formData[formKey];
                if (Array.isArray(formValue)) for(let j = 0; j < formValue.length; j++)appendFormValue(formKey, formValue[j]);
                else appendFormValue(formKey, formValue);
            }
            request.body = requestForm;
            request.formData = undefined;
            const contentType = request.headers.get("Content-Type");
            if (contentType && contentType.indexOf("multipart/form-data") !== -1) // browser will automatically apply a suitable content-type header
            request.headers.remove("Content-Type");
        }
        xhr.open(request.method, request.url);
        xhr.timeout = request.timeout;
        xhr.withCredentials = request.withCredentials;
        for (const header of request.headers.headersArray())xhr.setRequestHeader(header.name, header.value);
        xhr.responseType = ((_a = request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.size) || request.streamResponseBody ? "blob" : "text";
        // tslint:disable-next-line:no-null-keyword
        xhr.send(request.body === undefined ? null : request.body);
        if (xhr.responseType === "blob") return new Promise((resolve, reject)=>{
            handleBlobResponse(xhr, request, resolve, reject);
            rejectOnTerminalEvent(request, xhr, reject);
        });
        else return new Promise(function(resolve, reject) {
            xhr.addEventListener("load", ()=>resolve({
                    request,
                    status: xhr.status,
                    headers: parseHeaders(xhr),
                    bodyAsText: xhr.responseText
                })
            );
            rejectOnTerminalEvent(request, xhr, reject);
        });
    }
}
function handleBlobResponse(xhr, request, res, rej) {
    xhr.addEventListener("readystatechange", ()=>{
        var _a1;
        // Resolve as soon as headers are loaded
        if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {
            if (request.streamResponseBody || ((_a1 = request.streamResponseStatusCodes) === null || _a1 === void 0 ? void 0 : _a1.has(xhr.status))) {
                const blobBody = new Promise((resolve, reject)=>{
                    xhr.addEventListener("load", ()=>{
                        resolve(xhr.response);
                    });
                    rejectOnTerminalEvent(request, xhr, reject);
                });
                res({
                    request,
                    status: xhr.status,
                    headers: parseHeaders(xhr),
                    blobBody
                });
            } else xhr.addEventListener("load", ()=>{
                // xhr.response is of Blob type if the request is sent with xhr.responseType === "blob"
                // but the status code is not one of the stream response status codes,
                // so treat it as text and convert from Blob to text
                if (xhr.response) {
                    // Blob.text() is not supported in IE so using FileReader instead
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        var _a;
                        const text = (_a = e.target) === null || _a === void 0 ? void 0 : _a.result;
                        res({
                            request,
                            status: xhr.status,
                            headers: parseHeaders(xhr),
                            bodyAsText: text
                        });
                    };
                    reader.onerror = function(_e) {
                        rej(reader.error);
                    };
                    reader.readAsText(xhr.response, "UTF-8");
                } else res({
                    request,
                    status: xhr.status,
                    headers: parseHeaders(xhr)
                });
            });
        }
    });
}
function addProgressListener(xhr, listener) {
    if (listener) xhr.addEventListener("progress", (rawEvent)=>listener({
            loadedBytes: rawEvent.loaded
        })
    );
}
function parseHeaders(xhr) {
    const responseHeaders = new _httpHeaders.HttpHeaders();
    const headerLines = xhr.getAllResponseHeaders().trim().split(/[\r\n]+/);
    for (const line of headerLines){
        const index = line.indexOf(":");
        const headerName = line.slice(0, index);
        const headerValue = line.slice(index + 2);
        responseHeaders.set(headerName, headerValue);
    }
    return responseHeaders;
}
function rejectOnTerminalEvent(request, xhr, reject) {
    xhr.addEventListener("error", ()=>reject(new _restError.RestError(`Failed to send request to ${request.url}`, _restError.RestError.REQUEST_SEND_ERROR, undefined, request))
    );
    const abortError = new _abortController.AbortError("The operation was aborted.");
    xhr.addEventListener("abort", ()=>reject(abortError)
    );
    xhr.addEventListener("timeout", ()=>reject(abortError)
    );
}

},{"./httpHeaders":"e4FzO","@azure/abort-controller":"6HB9r","./restError":"1TBBz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6HB9r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Changes to Aborter
// * Rename Aborter to AbortSignal
// * Remove withValue and getValue - async context should be solved differently/wholistically, not tied to cancellation
// * Remove withTimeout, it's moved to the controller
// * AbortSignal constructor no longer takes a parent. Cancellation graphs are created from the controller.
// Potential changes to align with DOM Spec
// * dispatchEvent on Signal
parcelHelpers.export(exports, "AbortController", ()=>_abortController.AbortController
);
parcelHelpers.export(exports, "AbortError", ()=>_abortController.AbortError
);
parcelHelpers.export(exports, "AbortSignal", ()=>_abortSignal.AbortSignal
);
var _abortController = require("./AbortController");
var _abortSignal = require("./AbortSignal");

},{"./AbortController":"fBDhi","./AbortSignal":"bM4Ui","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fBDhi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbortError", ()=>AbortError
);
parcelHelpers.export(exports, "AbortController", ()=>AbortController
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _tslib = require("tslib");
var _abortSignal = require("./AbortSignal");
/**
 * This error is thrown when an asynchronous operation has been aborted.
 * Check for this error by testing the `name` that the name property of the
 * error matches `"AbortError"`.
 *
 * @example
 * ```ts
 * const controller = new AbortController();
 * controller.abort();
 * try {
 *   doAsyncWork(controller.signal)
 * } catch (e) {
 *   if (e.name === 'AbortError') {
 *     // handle abort error here.
 *   }
 * }
 * ```
 */ var AbortError = function(_super) {
    _tslib.__extends(AbortError1, _super);
    function AbortError1(message) {
        var _this = _super.call(this, message) || this;
        _this.name = "AbortError";
        return _this;
    }
    return AbortError1;
}(Error);
/**
 * An AbortController provides an AbortSignal and the associated controls to signal
 * that an asynchronous operation should be aborted.
 *
 * @example
 * Abort an operation when another event fires
 * ```ts
 * const controller = new AbortController();
 * const signal = controller.signal;
 * doAsyncWork(signal);
 * button.addEventListener('click', () => controller.abort());
 * ```
 *
 * @example
 * Share aborter cross multiple operations in 30s
 * ```ts
 * // Upload the same data to 2 different data centers at the same time,
 * // abort another when any of them is finished
 * const controller = AbortController.withTimeout(30 * 1000);
 * doAsyncWork(controller.signal).then(controller.abort);
 * doAsyncWork(controller.signal).then(controller.abort);
 *```
 *
 * @example
 * Cascaded aborting
 * ```ts
 * // All operations can't take more than 30 seconds
 * const aborter = Aborter.timeout(30 * 1000);
 *
 * // Following 2 operations can't take more than 25 seconds
 * await doAsyncWork(aborter.withTimeout(25 * 1000));
 * await doAsyncWork(aborter.withTimeout(25 * 1000));
 * ```
 */ var AbortController = function() {
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    function AbortController1(parentSignals) {
        var _this = this;
        this._signal = new _abortSignal.AbortSignal();
        if (!parentSignals) return;
        // coerce parentSignals into an array
        if (!Array.isArray(parentSignals)) // eslint-disable-next-line prefer-rest-params
        parentSignals = arguments;
        for(var _i = 0, parentSignals_1 = parentSignals; _i < parentSignals_1.length; _i++){
            var parentSignal = parentSignals_1[_i];
            // if the parent signal has already had abort() called,
            // then call abort on this signal as well.
            if (parentSignal.aborted) this.abort();
            else // when the parent signal aborts, this signal should as well.
            parentSignal.addEventListener("abort", function() {
                _this.abort();
            });
        }
    }
    Object.defineProperty(AbortController1.prototype, "signal", {
        /**
         * The AbortSignal associated with this controller that will signal aborted
         * when the abort method is called on this controller.
         *
         * @readonly
         */ get: function() {
            return this._signal;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Signal that any operations passed this controller's associated abort signal
     * to cancel any remaining work and throw an `AbortError`.
     */ AbortController1.prototype.abort = function() {
        _abortSignal.abortSignal(this._signal);
    };
    /**
     * Creates a new AbortSignal instance that will abort after the provided ms.
     * @param ms - Elapsed time in milliseconds to trigger an abort.
     */ AbortController1.timeout = function(ms) {
        var signal = new _abortSignal.AbortSignal();
        var timer = setTimeout(_abortSignal.abortSignal, ms, signal);
        // Prevent the active Timer from keeping the Node.js event loop active.
        if (typeof timer.unref === "function") timer.unref();
        return signal;
    };
    return AbortController1;
}();

},{"tslib":"lRdW5","./AbortSignal":"bM4Ui","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lRdW5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends
);
parcelHelpers.export(exports, "__assign", ()=>__assign
);
parcelHelpers.export(exports, "__rest", ()=>__rest
);
parcelHelpers.export(exports, "__decorate", ()=>__decorate
);
parcelHelpers.export(exports, "__param", ()=>__param
);
parcelHelpers.export(exports, "__metadata", ()=>__metadata
);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter
);
parcelHelpers.export(exports, "__generator", ()=>__generator
);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding
);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar
);
parcelHelpers.export(exports, "__values", ()=>__values
);
parcelHelpers.export(exports, "__read", ()=>__read
);
/** @deprecated */ parcelHelpers.export(exports, "__spread", ()=>__spread
);
/** @deprecated */ parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays
);
parcelHelpers.export(exports, "__spreadArray", ()=>__spreadArray
);
parcelHelpers.export(exports, "__await", ()=>__await
);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator
);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator
);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues
);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject
);
parcelHelpers.export(exports, "__importStar", ()=>__importStar
);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault
);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet
);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet
);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d1, b1) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d1, b1);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {
    };
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
    return i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
}
function __asyncDelegator(o) {
    var i, p;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
    return i = {
    }, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v1) {
        Promise.resolve(v1).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {
    };
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bM4Ui":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbortSignal", ()=>AbortSignal
);
/**
 * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.
 * Will try to trigger abort event for all linked AbortSignal nodes.
 *
 * - If there is a timeout, the timer will be cancelled.
 * - If aborted is true, nothing will happen.
 *
 * @internal
 */ // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters
parcelHelpers.export(exports, "abortSignal", ()=>abortSignal
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var listenersMap = new WeakMap();
var abortedMap = new WeakMap();
/**
 * An aborter instance implements AbortSignal interface, can abort HTTP requests.
 *
 * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.
 * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation
 * cannot or will not ever be cancelled.
 *
 * @example
 * Abort without timeout
 * ```ts
 * await doAsyncWork(AbortSignal.none);
 * ```
 */ var AbortSignal = function() {
    function AbortSignal1() {
        /**
         * onabort event listener.
         */ this.onabort = null;
        listenersMap.set(this, []);
        abortedMap.set(this, false);
    }
    Object.defineProperty(AbortSignal1.prototype, "aborted", {
        /**
         * Status of whether aborted or not.
         *
         * @readonly
         */ get: function() {
            if (!abortedMap.has(this)) throw new TypeError("Expected `this` to be an instance of AbortSignal.");
            return abortedMap.get(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AbortSignal1, "none", {
        /**
         * Creates a new AbortSignal instance that will never be aborted.
         *
         * @readonly
         */ get: function() {
            return new AbortSignal1();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Added new "abort" event listener, only support "abort" event.
     *
     * @param _type - Only support "abort" event
     * @param listener - The listener to be added
     */ AbortSignal1.prototype.addEventListener = function(// tslint:disable-next-line:variable-name
    _type, listener) {
        if (!listenersMap.has(this)) throw new TypeError("Expected `this` to be an instance of AbortSignal.");
        var listeners = listenersMap.get(this);
        listeners.push(listener);
    };
    /**
     * Remove "abort" event listener, only support "abort" event.
     *
     * @param _type - Only support "abort" event
     * @param listener - The listener to be removed
     */ AbortSignal1.prototype.removeEventListener = function(// tslint:disable-next-line:variable-name
    _type, listener) {
        if (!listenersMap.has(this)) throw new TypeError("Expected `this` to be an instance of AbortSignal.");
        var listeners = listenersMap.get(this);
        var index = listeners.indexOf(listener);
        if (index > -1) listeners.splice(index, 1);
    };
    /**
     * Dispatches a synthetic event to the AbortSignal.
     */ AbortSignal1.prototype.dispatchEvent = function(_event) {
        throw new Error("This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.");
    };
    return AbortSignal1;
}();
function abortSignal(signal) {
    if (signal.aborted) return;
    if (signal.onabort) signal.onabort.call(signal);
    var listeners = listenersMap.get(signal);
    if (listeners) // Create a copy of listeners so mutations to the array
    // (e.g. via removeListener calls) don't affect the listeners
    // we invoke.
    listeners.slice().forEach(function(listener) {
        listener.call(signal, {
            type: "abort"
        });
    });
    abortedMap.set(signal, true);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1TBBz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * An error resulting from an HTTP request to a service endpoint.
 */ parcelHelpers.export(exports, "RestError", ()=>RestError
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _sanitizer = require("./util/sanitizer");
var _inspect = require("./util/inspect");
const errorSanitizer = new _sanitizer.Sanitizer();
class RestError extends Error {
    constructor(message, code, statusCode, request, response){
        super(message);
        this.name = "RestError";
        this.code = code;
        this.statusCode = statusCode;
        this.request = request;
        this.response = response;
        Object.setPrototypeOf(this, RestError.prototype);
    }
    /**
     * Logging method for util.inspect in Node
     */ [_inspect.custom]() {
        return `RestError: ${this.message} \n ${errorSanitizer.sanitize(this)}`;
    }
}
/**
 * A constant string to identify errors that may arise when making an HTTP request that indicates an issue with the transport layer (e.g. the hostname of the URL cannot be resolved via DNS.)
 */ RestError.REQUEST_SEND_ERROR = "REQUEST_SEND_ERROR";
/**
 * A constant string to identify errors that may arise from parsing an incoming HTTP response. Usually indicates a malformed HTTP body, such as an encoded JSON payload that is incomplete.
 */ RestError.PARSE_ERROR = "PARSE_ERROR";

},{"./util/sanitizer":"45DeD","./util/inspect":"8WznP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"45DeD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Sanitizer", ()=>Sanitizer
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _url = require("../url");
var _utils = require("./utils");
const RedactedString = "REDACTED";
const defaultAllowedHeaderNames = [
    "x-ms-client-request-id",
    "x-ms-return-client-request-id",
    "x-ms-useragent",
    "x-ms-correlation-request-id",
    "x-ms-request-id",
    "client-request-id",
    "ms-cv",
    "return-client-request-id",
    "traceparent",
    "Access-Control-Allow-Credentials",
    "Access-Control-Allow-Headers",
    "Access-Control-Allow-Methods",
    "Access-Control-Allow-Origin",
    "Access-Control-Expose-Headers",
    "Access-Control-Max-Age",
    "Access-Control-Request-Headers",
    "Access-Control-Request-Method",
    "Origin",
    "Accept",
    "Accept-Encoding",
    "Cache-Control",
    "Connection",
    "Content-Length",
    "Content-Type",
    "Date",
    "ETag",
    "Expires",
    "If-Match",
    "If-Modified-Since",
    "If-None-Match",
    "If-Unmodified-Since",
    "Last-Modified",
    "Pragma",
    "Request-Id",
    "Retry-After",
    "Server",
    "Transfer-Encoding",
    "User-Agent", 
];
const defaultAllowedQueryParameters = [
    "api-version"
];
class Sanitizer {
    constructor({ allowedHeaderNames =[] , allowedQueryParameters =[]  } = {
    }){
        allowedHeaderNames = Array.isArray(allowedHeaderNames) ? defaultAllowedHeaderNames.concat(allowedHeaderNames) : defaultAllowedHeaderNames;
        allowedQueryParameters = Array.isArray(allowedQueryParameters) ? defaultAllowedQueryParameters.concat(allowedQueryParameters) : defaultAllowedQueryParameters;
        this.allowedHeaderNames = new Set(allowedHeaderNames.map((n)=>n.toLowerCase()
        ));
        this.allowedQueryParameters = new Set(allowedQueryParameters.map((p)=>p.toLowerCase()
        ));
    }
    sanitize(obj) {
        const seen = new Set();
        return JSON.stringify(obj, (key, value)=>{
            // Ensure Errors include their interesting non-enumerable members
            if (value instanceof Error) return Object.assign(Object.assign({
            }, value), {
                name: value.name,
                message: value.message
            });
            if (key === "_headersMap") return this.sanitizeHeaders(value);
            else if (key === "url") return this.sanitizeUrl(value);
            else if (key === "query") return this.sanitizeQuery(value);
            else if (key === "body") // Don't log the request body
            return undefined;
            else if (key === "response") // Don't log response again
            return undefined;
            else if (key === "operationSpec") // When using sendOperationRequest, the request carries a massive
            // field with the autorest spec. No need to log it.
            return undefined;
            else if (Array.isArray(value) || _utils.isObject(value)) {
                if (seen.has(value)) return "[Circular]";
                seen.add(value);
            }
            return value;
        }, 2);
    }
    sanitizeHeaders(value) {
        return this.sanitizeObject(value, this.allowedHeaderNames, (v, k)=>v[k].value
        );
    }
    sanitizeQuery(value) {
        return this.sanitizeObject(value, this.allowedQueryParameters, (v, k)=>v[k]
        );
    }
    sanitizeObject(value, allowedKeys, accessor) {
        if (typeof value !== "object" || value === null) return value;
        const sanitized = {
        };
        for (const k of Object.keys(value))if (allowedKeys.has(k.toLowerCase())) sanitized[k] = accessor(value, k);
        else sanitized[k] = RedactedString;
        return sanitized;
    }
    sanitizeUrl(value) {
        if (typeof value !== "string" || value === null) return value;
        const urlBuilder = _url.URLBuilder.parse(value);
        const queryString = urlBuilder.getQuery();
        if (!queryString) return value;
        const query = _url.URLQuery.parse(queryString);
        for (const k of query.keys())if (!this.allowedQueryParameters.has(k.toLowerCase())) query.set(k, RedactedString);
        urlBuilder.setQuery(query.toString());
        return urlBuilder.toString();
    }
}

},{"../url":"5Foit","./utils":"9PNR0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Foit":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "URL", ()=>_url.URL
);
/**
 * A class that handles the query portion of a URLBuilder.
 */ parcelHelpers.export(exports, "URLQuery", ()=>URLQuery
);
/**
 * A class that handles creating, modifying, and parsing URLs.
 */ parcelHelpers.export(exports, "URLBuilder", ()=>URLBuilder
);
parcelHelpers.export(exports, "URLToken", ()=>URLToken
);
/**
 * Get whether or not the provided character (single character string) is an alphanumeric (letter or
 * digit) character.
 */ parcelHelpers.export(exports, "isAlphaNumericCharacter", ()=>isAlphaNumericCharacter
);
/**
 * A class that tokenizes URL strings.
 */ parcelHelpers.export(exports, "URLTokenizer", ()=>URLTokenizer
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _utils = require("./util/utils");
var _url = require("./util/url");
class URLQuery {
    constructor(){
        this._rawQuery = {
        };
    }
    /**
     * Get whether or not there any query parameters in this URLQuery.
     */ any() {
        return Object.keys(this._rawQuery).length > 0;
    }
    /**
     * Get the keys of the query string.
     */ keys() {
        return Object.keys(this._rawQuery);
    }
    /**
     * Set a query parameter with the provided name and value. If the parameterValue is undefined or
     * empty, then this will attempt to remove an existing query parameter with the provided
     * parameterName.
     */ set(parameterName, parameterValue) {
        const caseParameterValue = parameterValue;
        if (parameterName) {
            if (caseParameterValue !== undefined && caseParameterValue !== null) {
                const newValue = Array.isArray(caseParameterValue) ? caseParameterValue : caseParameterValue.toString();
                this._rawQuery[parameterName] = newValue;
            } else delete this._rawQuery[parameterName];
        }
    }
    /**
     * Get the value of the query parameter with the provided name. If no parameter exists with the
     * provided parameter name, then undefined will be returned.
     */ get(parameterName) {
        return parameterName ? this._rawQuery[parameterName] : undefined;
    }
    /**
     * Get the string representation of this query. The return value will not start with a "?".
     */ toString() {
        let result = "";
        for(const parameterName in this._rawQuery){
            if (result) result += "&";
            const parameterValue = this._rawQuery[parameterName];
            if (Array.isArray(parameterValue)) {
                const parameterStrings = [];
                for (const parameterValueElement of parameterValue)parameterStrings.push(`${parameterName}=${parameterValueElement}`);
                result += parameterStrings.join("&");
            } else result += `${parameterName}=${parameterValue}`;
        }
        return result;
    }
    /**
     * Parse a URLQuery from the provided text.
     */ static parse(text) {
        const result = new URLQuery();
        if (text) {
            if (text.startsWith("?")) text = text.substring(1);
            let currentState = "ParameterName";
            let parameterName = "";
            let parameterValue = "";
            for(let i = 0; i < text.length; ++i){
                const currentCharacter = text[i];
                switch(currentState){
                    case "ParameterName":
                        switch(currentCharacter){
                            case "=":
                                currentState = "ParameterValue";
                                break;
                            case "&":
                                parameterName = "";
                                parameterValue = "";
                                break;
                            default:
                                parameterName += currentCharacter;
                                break;
                        }
                        break;
                    case "ParameterValue":
                        switch(currentCharacter){
                            case "&":
                                result.set(parameterName, parameterValue);
                                parameterName = "";
                                parameterValue = "";
                                currentState = "ParameterName";
                                break;
                            default:
                                parameterValue += currentCharacter;
                                break;
                        }
                        break;
                    default:
                        throw new Error("Unrecognized URLQuery parse state: " + currentState);
                }
            }
            if (currentState === "ParameterValue") result.set(parameterName, parameterValue);
        }
        return result;
    }
}
class URLBuilder {
    /**
     * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL
     * (such as a host, port, path, or query), those parts will be added to this URL as well.
     */ setScheme(scheme) {
        if (!scheme) this._scheme = undefined;
        else this.set(scheme, "SCHEME");
    }
    /**
     * Get the scheme that has been set in this URL.
     */ getScheme() {
        return this._scheme;
    }
    /**
     * Set the host for this URL. If the provided host contains other parts of a URL (such as a
     * port, path, or query), those parts will be added to this URL as well.
     */ setHost(host) {
        if (!host) this._host = undefined;
        else this.set(host, "SCHEME_OR_HOST");
    }
    /**
     * Get the host that has been set in this URL.
     */ getHost() {
        return this._host;
    }
    /**
     * Set the port for this URL. If the provided port contains other parts of a URL (such as a
     * path or query), those parts will be added to this URL as well.
     */ setPort(port) {
        if (port === undefined || port === null || port === "") this._port = undefined;
        else this.set(port.toString(), "PORT");
    }
    /**
     * Get the port that has been set in this URL.
     */ getPort() {
        return this._port;
    }
    /**
     * Set the path for this URL. If the provided path contains a query, then it will be added to
     * this URL as well.
     */ setPath(path) {
        if (!path) this._path = undefined;
        else {
            const schemeIndex = path.indexOf("://");
            if (schemeIndex !== -1) {
                const schemeStart = path.lastIndexOf("/", schemeIndex);
                // Make sure to only grab the URL part of the path before setting the state back to SCHEME
                // this will handle cases such as "/a/b/c/https://microsoft.com" => "https://microsoft.com"
                this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), "SCHEME");
            } else this.set(path, "PATH");
        }
    }
    /**
     * Append the provided path to this URL's existing path. If the provided path contains a query,
     * then it will be added to this URL as well.
     */ appendPath(path) {
        if (path) {
            let currentPath = this.getPath();
            if (currentPath) {
                if (!currentPath.endsWith("/")) currentPath += "/";
                if (path.startsWith("/")) path = path.substring(1);
                path = currentPath + path;
            }
            this.set(path, "PATH");
        }
    }
    /**
     * Get the path that has been set in this URL.
     */ getPath() {
        return this._path;
    }
    /**
     * Set the query in this URL.
     */ setQuery(query) {
        if (!query) this._query = undefined;
        else this._query = URLQuery.parse(query);
    }
    /**
     * Set a query parameter with the provided name and value in this URL's query. If the provided
     * query parameter value is undefined or empty, then the query parameter will be removed if it
     * existed.
     */ setQueryParameter(queryParameterName, queryParameterValue) {
        if (queryParameterName) {
            if (!this._query) this._query = new URLQuery();
            this._query.set(queryParameterName, queryParameterValue);
        }
    }
    /**
     * Get the value of the query parameter with the provided query parameter name. If no query
     * parameter exists with the provided name, then undefined will be returned.
     */ getQueryParameterValue(queryParameterName) {
        return this._query ? this._query.get(queryParameterName) : undefined;
    }
    /**
     * Get the query in this URL.
     */ getQuery() {
        return this._query ? this._query.toString() : undefined;
    }
    /**
     * Set the parts of this URL by parsing the provided text using the provided startState.
     */ set(text, startState) {
        const tokenizer = new URLTokenizer(text, startState);
        while(tokenizer.next()){
            const token = tokenizer.current();
            let tokenPath;
            if (token) switch(token.type){
                case "SCHEME":
                    this._scheme = token.text || undefined;
                    break;
                case "HOST":
                    this._host = token.text || undefined;
                    break;
                case "PORT":
                    this._port = token.text || undefined;
                    break;
                case "PATH":
                    tokenPath = token.text || undefined;
                    if (!this._path || this._path === "/" || tokenPath !== "/") this._path = tokenPath;
                    break;
                case "QUERY":
                    this._query = URLQuery.parse(token.text);
                    break;
                default:
                    throw new Error(`Unrecognized URLTokenType: ${token.type}`);
            }
        }
    }
    /**
     * Serializes the URL as a string.
     * @returns the URL as a string.
     */ toString() {
        let result = "";
        if (this._scheme) result += `${this._scheme}://`;
        if (this._host) result += this._host;
        if (this._port) result += `:${this._port}`;
        if (this._path) {
            if (!this._path.startsWith("/")) result += "/";
            result += this._path;
        }
        if (this._query && this._query.any()) result += `?${this._query.toString()}`;
        return result;
    }
    /**
     * If the provided searchValue is found in this URLBuilder, then replace it with the provided
     * replaceValue.
     */ replaceAll(searchValue, replaceValue) {
        if (searchValue) {
            this.setScheme(_utils.replaceAll(this.getScheme(), searchValue, replaceValue));
            this.setHost(_utils.replaceAll(this.getHost(), searchValue, replaceValue));
            this.setPort(_utils.replaceAll(this.getPort(), searchValue, replaceValue));
            this.setPath(_utils.replaceAll(this.getPath(), searchValue, replaceValue));
            this.setQuery(_utils.replaceAll(this.getQuery(), searchValue, replaceValue));
        }
    }
    /**
     * Parses a given string URL into a new {@link URLBuilder}.
     */ static parse(text) {
        const result = new URLBuilder();
        result.set(text, "SCHEME_OR_HOST");
        return result;
    }
}
class URLToken {
    constructor(text, type){
        this.text = text;
        this.type = type;
    }
    static scheme(text) {
        return new URLToken(text, "SCHEME");
    }
    static host(text) {
        return new URLToken(text, "HOST");
    }
    static port(text) {
        return new URLToken(text, "PORT");
    }
    static path(text) {
        return new URLToken(text, "PATH");
    }
    static query(text) {
        return new URLToken(text, "QUERY");
    }
}
function isAlphaNumericCharacter(character) {
    const characterCode = character.charCodeAt(0);
    return 48 /* '0' */  <= characterCode && characterCode <= 57 || 65 /* 'A' */  <= characterCode && characterCode <= 90 || 97 /* 'a' */  <= characterCode && characterCode <= 122;
}
class URLTokenizer {
    constructor(_text, state){
        this._text = _text;
        this._textLength = _text ? _text.length : 0;
        this._currentState = state !== undefined && state !== null ? state : "SCHEME_OR_HOST";
        this._currentIndex = 0;
    }
    /**
     * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer
     * hasn't started or has finished tokenizing.
     */ current() {
        return this._currentToken;
    }
    /**
     * Advance to the next URLToken and return whether or not a URLToken was found.
     */ next() {
        if (!hasCurrentCharacter(this)) this._currentToken = undefined;
        else switch(this._currentState){
            case "SCHEME":
                nextScheme(this);
                break;
            case "SCHEME_OR_HOST":
                nextSchemeOrHost(this);
                break;
            case "HOST":
                nextHost(this);
                break;
            case "PORT":
                nextPort(this);
                break;
            case "PATH":
                nextPath(this);
                break;
            case "QUERY":
                nextQuery(this);
                break;
            default:
                throw new Error(`Unrecognized URLTokenizerState: ${this._currentState}`);
        }
        return !!this._currentToken;
    }
}
/**
 * Read the remaining characters from this Tokenizer's character stream.
 */ function readRemaining(tokenizer) {
    let result = "";
    if (tokenizer._currentIndex < tokenizer._textLength) {
        result = tokenizer._text.substring(tokenizer._currentIndex);
        tokenizer._currentIndex = tokenizer._textLength;
    }
    return result;
}
/**
 * Whether or not this URLTokenizer has a current character.
 */ function hasCurrentCharacter(tokenizer) {
    return tokenizer._currentIndex < tokenizer._textLength;
}
/**
 * Get the character in the text string at the current index.
 */ function getCurrentCharacter(tokenizer) {
    return tokenizer._text[tokenizer._currentIndex];
}
/**
 * Advance to the character in text that is "step" characters ahead. If no step value is provided,
 * then step will default to 1.
 */ function nextCharacter(tokenizer, step) {
    if (hasCurrentCharacter(tokenizer)) {
        if (!step) step = 1;
        tokenizer._currentIndex += step;
    }
}
/**
 * Starting with the current character, peek "charactersToPeek" number of characters ahead in this
 * Tokenizer's stream of characters.
 */ function peekCharacters(tokenizer, charactersToPeek) {
    let endIndex = tokenizer._currentIndex + charactersToPeek;
    if (tokenizer._textLength < endIndex) endIndex = tokenizer._textLength;
    return tokenizer._text.substring(tokenizer._currentIndex, endIndex);
}
/**
 * Read characters from this Tokenizer until the end of the stream or until the provided condition
 * is false when provided the current character.
 */ function readWhile(tokenizer, condition) {
    let result = "";
    while(hasCurrentCharacter(tokenizer)){
        const currentCharacter = getCurrentCharacter(tokenizer);
        if (!condition(currentCharacter)) break;
        else {
            result += currentCharacter;
            nextCharacter(tokenizer);
        }
    }
    return result;
}
/**
 * Read characters from this Tokenizer until a non-alphanumeric character or the end of the
 * character stream is reached.
 */ function readWhileLetterOrDigit(tokenizer) {
    return readWhile(tokenizer, (character)=>isAlphaNumericCharacter(character)
    );
}
/**
 * Read characters from this Tokenizer until one of the provided terminating characters is read or
 * the end of the character stream is reached.
 */ function readUntilCharacter(tokenizer, ...terminatingCharacters) {
    return readWhile(tokenizer, (character)=>terminatingCharacters.indexOf(character) === -1
    );
}
function nextScheme(tokenizer) {
    const scheme = readWhileLetterOrDigit(tokenizer);
    tokenizer._currentToken = URLToken.scheme(scheme);
    if (!hasCurrentCharacter(tokenizer)) tokenizer._currentState = "DONE";
    else tokenizer._currentState = "HOST";
}
function nextSchemeOrHost(tokenizer) {
    const schemeOrHost = readUntilCharacter(tokenizer, ":", "/", "?");
    if (!hasCurrentCharacter(tokenizer)) {
        tokenizer._currentToken = URLToken.host(schemeOrHost);
        tokenizer._currentState = "DONE";
    } else if (getCurrentCharacter(tokenizer) === ":") {
        if (peekCharacters(tokenizer, 3) === "://") {
            tokenizer._currentToken = URLToken.scheme(schemeOrHost);
            tokenizer._currentState = "HOST";
        } else {
            tokenizer._currentToken = URLToken.host(schemeOrHost);
            tokenizer._currentState = "PORT";
        }
    } else {
        tokenizer._currentToken = URLToken.host(schemeOrHost);
        if (getCurrentCharacter(tokenizer) === "/") tokenizer._currentState = "PATH";
        else tokenizer._currentState = "QUERY";
    }
}
function nextHost(tokenizer) {
    if (peekCharacters(tokenizer, 3) === "://") nextCharacter(tokenizer, 3);
    const host = readUntilCharacter(tokenizer, ":", "/", "?");
    tokenizer._currentToken = URLToken.host(host);
    if (!hasCurrentCharacter(tokenizer)) tokenizer._currentState = "DONE";
    else if (getCurrentCharacter(tokenizer) === ":") tokenizer._currentState = "PORT";
    else if (getCurrentCharacter(tokenizer) === "/") tokenizer._currentState = "PATH";
    else tokenizer._currentState = "QUERY";
}
function nextPort(tokenizer) {
    if (getCurrentCharacter(tokenizer) === ":") nextCharacter(tokenizer);
    const port = readUntilCharacter(tokenizer, "/", "?");
    tokenizer._currentToken = URLToken.port(port);
    if (!hasCurrentCharacter(tokenizer)) tokenizer._currentState = "DONE";
    else if (getCurrentCharacter(tokenizer) === "/") tokenizer._currentState = "PATH";
    else tokenizer._currentState = "QUERY";
}
function nextPath(tokenizer) {
    const path = readUntilCharacter(tokenizer, "?");
    tokenizer._currentToken = URLToken.path(path);
    if (!hasCurrentCharacter(tokenizer)) tokenizer._currentState = "DONE";
    else tokenizer._currentState = "QUERY";
}
function nextQuery(tokenizer) {
    if (getCurrentCharacter(tokenizer) === "?") nextCharacter(tokenizer);
    const query = readRemaining(tokenizer);
    tokenizer._currentToken = URLToken.query(query);
    tokenizer._currentState = "DONE";
}

},{"./util/utils":"9PNR0","./util/url":"iH45Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iH45Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "URL", ()=>url
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const url = URL;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8WznP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "custom", ()=>custom
);
const custom = {
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bsJP9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpPipelineLogLevel", ()=>HttpPipelineLogLevel
);
var HttpPipelineLogLevel;
(function(HttpPipelineLogLevel1) {
    /**
     * A log level that indicates that no logs will be logged.
     */ HttpPipelineLogLevel1[HttpPipelineLogLevel1["OFF"] = 0] = "OFF";
    /**
     * An error log.
     */ HttpPipelineLogLevel1[HttpPipelineLogLevel1["ERROR"] = 1] = "ERROR";
    /**
     * A warning log.
     */ HttpPipelineLogLevel1[HttpPipelineLogLevel1["WARNING"] = 2] = "WARNING";
    /**
     * An information log.
     */ HttpPipelineLogLevel1[HttpPipelineLogLevel1["INFO"] = 3] = "INFO";
})(HttpPipelineLogLevel || (HttpPipelineLogLevel = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"96hoF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Converts an OperationOptions to a RequestOptionsBase
 *
 * @param opts - OperationOptions object to convert to RequestOptionsBase
 */ parcelHelpers.export(exports, "operationOptionsToRequestOptionsBase", ()=>operationOptionsToRequestOptionsBase
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _tslib = require("tslib");
function operationOptionsToRequestOptionsBase(opts) {
    var _a;
    const { requestOptions , tracingOptions  } = opts, additionalOptions = _tslib.__rest(opts, [
        "requestOptions",
        "tracingOptions"
    ]);
    let result = additionalOptions;
    if (requestOptions) result = Object.assign(Object.assign({
    }, result), requestOptions);
    if (tracingOptions) {
        result.tracingContext = tracingOptions.tracingContext;
        // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.
        result.spanOptions = (_a = tracingOptions) === null || _a === void 0 ? void 0 : _a.spanOptions;
    }
    return result;
}

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3sFZ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * ServiceClient sends service requests and receives responses.
 */ parcelHelpers.export(exports, "ServiceClient", ()=>ServiceClient
);
parcelHelpers.export(exports, "serializeRequestBody", ()=>serializeRequestBody
);
/**
 * Creates an HTTP pipeline based on the given options.
 * @param pipelineOptions - Defines options that are used to configure policies in the HTTP pipeline for an SDK client.
 * @param authPolicyFactory - An optional authentication policy factory to use for signing requests.
 * @returns A set of options that can be passed to create a new {@link ServiceClient}.
 */ parcelHelpers.export(exports, "createPipelineFromOptions", ()=>createPipelineFromOptions
);
/**
 * Get the property parent for the property at the provided path when starting with the provided
 * parent object.
 */ parcelHelpers.export(exports, "getPropertyParent", ()=>getPropertyParent
);
parcelHelpers.export(exports, "getOperationArgumentValueFromParameterPath", ()=>getOperationArgumentValueFromParameterPath
);
/**
 * Parses an {@link HttpOperationResponse} into a normalized HTTP response object ({@link RestResponse}).
 * @param _response - Wrapper object for http response.
 * @param responseSpec - Mappers for how to parse the response properties.
 * @returns - A normalized response object.
 */ parcelHelpers.export(exports, "flattenResponse", ()=>flattenResponse
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _utils = require("./util/utils");
var _serializer = require("./serializer");
var _deserializationPolicy = require("./policies/deserializationPolicy");
var _keepAlivePolicy = require("./policies/keepAlivePolicy");
var _redirectPolicy = require("./policies/redirectPolicy");
var _exponentialRetryPolicy = require("./policies/exponentialRetryPolicy");
var _logPolicy = require("./policies/logPolicy");
var _operationParameter = require("./operationParameter");
var _operationSpec = require("./operationSpec");
var _webResource = require("./webResource");
var _requestPolicy = require("./policies/requestPolicy");
var _serializerCommon = require("./util/serializer.common");
var _coreAuth = require("@azure/core-auth");
var _userAgentPolicy = require("./policies/userAgentPolicy");
var _queryCollectionFormat = require("./queryCollectionFormat");
var _url = require("./url");
var _bearerTokenAuthenticationPolicy = require("./policies/bearerTokenAuthenticationPolicy");
var _disableResponseDecompressionPolicy = require("./policies/disableResponseDecompressionPolicy");
var _generateClientRequestIdPolicy = require("./policies/generateClientRequestIdPolicy");
var _httpClientCache = require("./httpClientCache");
var _log = require("./log");
var _ndJsonPolicy = require("./policies/ndJsonPolicy");
var _proxyPolicy = require("./policies/proxyPolicy");
var _rpRegistrationPolicy = require("./policies/rpRegistrationPolicy");
var _signingPolicy = require("./policies/signingPolicy");
var _xml = require("./util/xml");
var _systemErrorRetryPolicy = require("./policies/systemErrorRetryPolicy");
var _throttlingRetryPolicy = require("./policies/throttlingRetryPolicy");
var _tracingPolicy = require("./policies/tracingPolicy");
class ServiceClient {
    /**
     * The ServiceClient constructor
     * @param credentials - The credentials used for authentication with the service.
     * @param options - The service client options that govern the behavior of the client.
     */ constructor(credentials, /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */ options){
        if (!options) options = {
        };
        this._withCredentials = options.withCredentials || false;
        this._httpClient = options.httpClient || _httpClientCache.getCachedDefaultHttpClient();
        this._requestPolicyOptions = new _requestPolicy.RequestPolicyOptions(options.httpPipelineLogger);
        let requestPolicyFactories;
        if (Array.isArray(options.requestPolicyFactories)) {
            _log.logger.info("ServiceClient: using custom request policies");
            requestPolicyFactories = options.requestPolicyFactories;
        } else {
            let authPolicyFactory = undefined;
            if (_coreAuth.isTokenCredential(credentials)) {
                _log.logger.info("ServiceClient: creating bearer token authentication policy from provided credentials");
                // Create a wrapped RequestPolicyFactory here so that we can provide the
                // correct scope to the BearerTokenAuthenticationPolicy at the first time
                // one is requested.  This is needed because generated ServiceClient
                // implementations do not set baseUri until after ServiceClient's constructor
                // is finished, leaving baseUri empty at the time when it is needed to
                // build the correct scope name.
                const wrappedPolicyFactory = ()=>{
                    let bearerTokenPolicyFactory = undefined;
                    // eslint-disable-next-line @typescript-eslint/no-this-alias
                    const serviceClient = this;
                    const serviceClientOptions = options;
                    return {
                        create (nextPolicy, createOptions) {
                            const credentialScopes = getCredentialScopes(serviceClientOptions, serviceClient.baseUri);
                            if (!credentialScopes) throw new Error(`When using credential, the ServiceClient must contain a baseUri or a credentialScopes in ServiceClientOptions. Unable to create a bearerTokenAuthenticationPolicy`);
                            if (bearerTokenPolicyFactory === undefined || bearerTokenPolicyFactory === null) bearerTokenPolicyFactory = _bearerTokenAuthenticationPolicy.bearerTokenAuthenticationPolicy(credentials, credentialScopes);
                            return bearerTokenPolicyFactory.create(nextPolicy, createOptions);
                        }
                    };
                };
                authPolicyFactory = wrappedPolicyFactory();
            } else if (credentials && typeof credentials.signRequest === "function") {
                _log.logger.info("ServiceClient: creating signing policy from provided credentials");
                authPolicyFactory = _signingPolicy.signingPolicy(credentials);
            } else if (credentials !== undefined && credentials !== null) throw new Error("The credentials argument must implement the TokenCredential interface");
            _log.logger.info("ServiceClient: using default request policies");
            requestPolicyFactories = createDefaultRequestPolicyFactories(authPolicyFactory, options);
            if (options.requestPolicyFactories) {
                // options.requestPolicyFactories can also be a function that manipulates
                // the default requestPolicyFactories array
                const newRequestPolicyFactories = options.requestPolicyFactories(requestPolicyFactories);
                if (newRequestPolicyFactories) requestPolicyFactories = newRequestPolicyFactories;
            }
        }
        this._requestPolicyFactories = requestPolicyFactories;
    }
    /**
     * Send the provided httpRequest.
     */ sendRequest(options) {
        if (options === null || options === undefined || typeof options !== "object") throw new Error("options cannot be null or undefined and it must be of type object.");
        let httpRequest;
        try {
            if (_webResource.isWebResourceLike(options)) {
                options.validateRequestProperties();
                httpRequest = options;
            } else {
                httpRequest = new _webResource.WebResource();
                httpRequest = httpRequest.prepare(options);
            }
        } catch (error) {
            return Promise.reject(error);
        }
        let httpPipeline = this._httpClient;
        if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) for(let i = this._requestPolicyFactories.length - 1; i >= 0; --i)httpPipeline = this._requestPolicyFactories[i].create(httpPipeline, this._requestPolicyOptions);
        return httpPipeline.sendRequest(httpRequest);
    }
    /**
     * Send an HTTP request that is populated using the provided OperationSpec.
     * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.
     * @param operationSpec - The OperationSpec to use to populate the httpRequest.
     * @param callback - The callback to call when the response is received.
     */ async sendOperationRequest(operationArguments, operationSpec, callback) {
        var _a;
        if (typeof operationArguments.options === "function") {
            callback = operationArguments.options;
            operationArguments.options = undefined;
        }
        const serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;
        const httpRequest = new _webResource.WebResource();
        let result;
        try {
            const baseUri = operationSpec.baseUrl || this.baseUri;
            if (!baseUri) throw new Error("If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.");
            httpRequest.method = operationSpec.httpMethod;
            httpRequest.operationSpec = operationSpec;
            const requestUrl = _url.URLBuilder.parse(baseUri);
            if (operationSpec.path) requestUrl.appendPath(operationSpec.path);
            if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) for (const urlParameter of operationSpec.urlParameters){
                let urlParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, urlParameter, operationSpec.serializer);
                urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, _operationParameter.getPathStringFromParameter(urlParameter), serializerOptions);
                if (!urlParameter.skipEncoding) urlParameterValue = encodeURIComponent(urlParameterValue);
                requestUrl.replaceAll(`{${urlParameter.mapper.serializedName || _operationParameter.getPathStringFromParameter(urlParameter)}}`, urlParameterValue);
            }
            if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) for (const queryParameter of operationSpec.queryParameters){
                let queryParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, queryParameter, operationSpec.serializer);
                if (queryParameterValue !== undefined && queryParameterValue !== null) {
                    queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, _operationParameter.getPathStringFromParameter(queryParameter), serializerOptions);
                    if (queryParameter.collectionFormat !== undefined && queryParameter.collectionFormat !== null) {
                        if (queryParameter.collectionFormat === _queryCollectionFormat.QueryCollectionFormat.Multi) {
                            if (queryParameterValue.length === 0) continue;
                            else for(const index in queryParameterValue){
                                const item = queryParameterValue[index];
                                queryParameterValue[index] = item === undefined || item === null ? "" : item.toString();
                            }
                        } else if (queryParameter.collectionFormat === _queryCollectionFormat.QueryCollectionFormat.Ssv || queryParameter.collectionFormat === _queryCollectionFormat.QueryCollectionFormat.Tsv) queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);
                    }
                    if (!queryParameter.skipEncoding) {
                        if (Array.isArray(queryParameterValue)) {
                            for(const index in queryParameterValue)if (queryParameterValue[index] !== undefined && queryParameterValue[index] !== null) queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);
                        } else queryParameterValue = encodeURIComponent(queryParameterValue);
                    }
                    if (queryParameter.collectionFormat !== undefined && queryParameter.collectionFormat !== null && queryParameter.collectionFormat !== _queryCollectionFormat.QueryCollectionFormat.Multi && queryParameter.collectionFormat !== _queryCollectionFormat.QueryCollectionFormat.Ssv && queryParameter.collectionFormat !== _queryCollectionFormat.QueryCollectionFormat.Tsv) queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);
                    requestUrl.setQueryParameter(queryParameter.mapper.serializedName || _operationParameter.getPathStringFromParameter(queryParameter), queryParameterValue);
                }
            }
            httpRequest.url = requestUrl.toString();
            const contentType = operationSpec.contentType || this.requestContentType;
            if (contentType && operationSpec.requestBody) httpRequest.headers.set("Content-Type", contentType);
            if (operationSpec.headerParameters) for (const headerParameter of operationSpec.headerParameters){
                let headerValue = getOperationArgumentValueFromParameter(this, operationArguments, headerParameter, operationSpec.serializer);
                if (headerValue !== undefined && headerValue !== null) {
                    headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, _operationParameter.getPathStringFromParameter(headerParameter), serializerOptions);
                    const headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;
                    if (headerCollectionPrefix) for (const key of Object.keys(headerValue))httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);
                    else httpRequest.headers.set(headerParameter.mapper.serializedName || _operationParameter.getPathStringFromParameter(headerParameter), headerValue);
                }
            }
            const options = operationArguments.options;
            if (options) {
                if (options.customHeaders) for(const customHeaderName in options.customHeaders)httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);
                if (options.abortSignal) httpRequest.abortSignal = options.abortSignal;
                if (options.timeout) httpRequest.timeout = options.timeout;
                if (options.onUploadProgress) httpRequest.onUploadProgress = options.onUploadProgress;
                if (options.onDownloadProgress) httpRequest.onDownloadProgress = options.onDownloadProgress;
                if (options.spanOptions) // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.
                httpRequest.spanOptions = options.spanOptions;
                if (options.tracingContext) httpRequest.tracingContext = options.tracingContext;
                if (options.shouldDeserialize !== undefined && options.shouldDeserialize !== null) httpRequest.shouldDeserialize = options.shouldDeserialize;
            }
            httpRequest.withCredentials = this._withCredentials;
            serializeRequestBody(this, httpRequest, operationArguments, operationSpec);
            if (httpRequest.streamResponseStatusCodes === undefined) httpRequest.streamResponseStatusCodes = _operationSpec.getStreamResponseStatusCodes(operationSpec);
            let rawResponse;
            let sendRequestError;
            try {
                rawResponse = await this.sendRequest(httpRequest);
            } catch (error) {
                sendRequestError = error;
            }
            if (sendRequestError) {
                if (sendRequestError.response) sendRequestError.details = flattenResponse(sendRequestError.response, operationSpec.responses[sendRequestError.statusCode] || operationSpec.responses["default"]);
                result = Promise.reject(sendRequestError);
            } else result = Promise.resolve(flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]));
        } catch (error) {
            result = Promise.reject(error);
        }
        const cb = callback;
        if (cb) result.then((res)=>cb(null, res._response.parsedBody, res._response.request, res._response)
        ).catch((err)=>cb(err)
        );
        return result;
    }
}
function serializeRequestBody(serviceClient, httpRequest, operationArguments, operationSpec) {
    var _a, _b, _c, _d, _e, _f;
    const serializerOptions = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions) !== null && _b !== void 0 ? _b : {
    };
    const updatedOptions = {
        rootName: (_c = serializerOptions.rootName) !== null && _c !== void 0 ? _c : "",
        includeRoot: (_d = serializerOptions.includeRoot) !== null && _d !== void 0 ? _d : false,
        xmlCharKey: (_e = serializerOptions.xmlCharKey) !== null && _e !== void 0 ? _e : _serializerCommon.XML_CHARKEY
    };
    const xmlCharKey = serializerOptions.xmlCharKey;
    if (operationSpec.requestBody && operationSpec.requestBody.mapper) {
        httpRequest.body = getOperationArgumentValueFromParameter(serviceClient, operationArguments, operationSpec.requestBody, operationSpec.serializer);
        const bodyMapper = operationSpec.requestBody.mapper;
        const { required , xmlName , xmlElementName , serializedName , xmlNamespace , xmlNamespacePrefix  } = bodyMapper;
        const typeName = bodyMapper.type.name;
        try {
            if (httpRequest.body !== undefined && httpRequest.body !== null || required) {
                const requestBodyParameterPathString = _operationParameter.getPathStringFromParameter(operationSpec.requestBody);
                httpRequest.body = operationSpec.serializer.serialize(bodyMapper, httpRequest.body, requestBodyParameterPathString, updatedOptions);
                const isStream = typeName === _serializer.MapperType.Stream;
                if (operationSpec.isXML) {
                    const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : "xmlns";
                    const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, httpRequest.body, updatedOptions);
                    if (typeName === _serializer.MapperType.Sequence) httpRequest.body = _xml.stringifyXML(_utils.prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), {
                        rootName: xmlName || serializedName,
                        xmlCharKey
                    });
                    else if (!isStream) httpRequest.body = _xml.stringifyXML(value, {
                        rootName: xmlName || serializedName,
                        xmlCharKey
                    });
                } else if (typeName === _serializer.MapperType.String && (((_f = operationSpec.contentType) === null || _f === void 0 ? void 0 : _f.match("text/plain")) || operationSpec.mediaType === "text")) // the String serializer has validated that request body is a string
                // so just send the string.
                return;
                else if (!isStream) httpRequest.body = JSON.stringify(httpRequest.body);
            }
        } catch (error) {
            throw new Error(`Error "${error.message}" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, "  ")}.`);
        }
    } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {
        httpRequest.formData = {
        };
        for (const formDataParameter of operationSpec.formDataParameters){
            const formDataParameterValue = getOperationArgumentValueFromParameter(serviceClient, operationArguments, formDataParameter, operationSpec.serializer);
            if (formDataParameterValue !== undefined && formDataParameterValue !== null) {
                const formDataParameterPropertyName = formDataParameter.mapper.serializedName || _operationParameter.getPathStringFromParameter(formDataParameter);
                httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, _operationParameter.getPathStringFromParameter(formDataParameter), updatedOptions);
            }
        }
    }
}
/**
 * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself
 */ function getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {
    // Composite and Sequence schemas already got their root namespace set during serialization
    // We just need to add xmlns to the other schema types
    if (xmlNamespace && ![
        "Composite",
        "Sequence",
        "Dictionary"
    ].includes(typeName)) {
        const result = {
        };
        result[options.xmlCharKey] = serializedValue;
        result[_serializerCommon.XML_ATTRKEY] = {
            [xmlnsKey]: xmlNamespace
        };
        return result;
    }
    return serializedValue;
}
function getValueOrFunctionResult(value, defaultValueCreator) {
    let result;
    if (typeof value === "string") result = value;
    else {
        result = defaultValueCreator();
        if (typeof value === "function") result = value(result);
    }
    return result;
}
function createDefaultRequestPolicyFactories(authPolicyFactory, options) {
    const factories = [];
    if (options.generateClientRequestIdHeader) factories.push(_generateClientRequestIdPolicy.generateClientRequestIdPolicy(options.clientRequestIdHeaderName));
    if (authPolicyFactory) factories.push(authPolicyFactory);
    const userAgentHeaderName = getValueOrFunctionResult(options.userAgentHeaderName, _userAgentPolicy.getDefaultUserAgentHeaderName);
    const userAgentHeaderValue = getValueOrFunctionResult(options.userAgent, _userAgentPolicy.getDefaultUserAgentValue);
    if (userAgentHeaderName && userAgentHeaderValue) factories.push(_userAgentPolicy.userAgentPolicy({
        key: userAgentHeaderName,
        value: userAgentHeaderValue
    }));
    factories.push(_redirectPolicy.redirectPolicy());
    factories.push(_rpRegistrationPolicy.rpRegistrationPolicy(options.rpRegistrationRetryTimeout));
    if (!options.noRetryPolicy) {
        factories.push(_exponentialRetryPolicy.exponentialRetryPolicy());
        factories.push(_systemErrorRetryPolicy.systemErrorRetryPolicy());
        factories.push(_throttlingRetryPolicy.throttlingRetryPolicy());
    }
    factories.push(_deserializationPolicy.deserializationPolicy(options.deserializationContentTypes));
    if (_utils.isNode) factories.push(_proxyPolicy.proxyPolicy(options.proxySettings));
    factories.push(_logPolicy.logPolicy({
        logger: _log.logger.info
    }));
    return factories;
}
function createPipelineFromOptions(pipelineOptions, authPolicyFactory) {
    const requestPolicyFactories = [];
    if (pipelineOptions.sendStreamingJson) requestPolicyFactories.push(_ndJsonPolicy.ndJsonPolicy());
    let userAgentValue = undefined;
    if (pipelineOptions.userAgentOptions && pipelineOptions.userAgentOptions.userAgentPrefix) {
        const userAgentInfo = [];
        userAgentInfo.push(pipelineOptions.userAgentOptions.userAgentPrefix);
        // Add the default user agent value if it isn't already specified
        // by the userAgentPrefix option.
        const defaultUserAgentInfo = _userAgentPolicy.getDefaultUserAgentValue();
        if (userAgentInfo.indexOf(defaultUserAgentInfo) === -1) userAgentInfo.push(defaultUserAgentInfo);
        userAgentValue = userAgentInfo.join(" ");
    }
    const keepAliveOptions = Object.assign(Object.assign({
    }, _keepAlivePolicy.DefaultKeepAliveOptions), pipelineOptions.keepAliveOptions);
    const retryOptions = Object.assign(Object.assign({
    }, _exponentialRetryPolicy.DefaultRetryOptions), pipelineOptions.retryOptions);
    const redirectOptions = Object.assign(Object.assign({
    }, _redirectPolicy.DefaultRedirectOptions), pipelineOptions.redirectOptions);
    if (_utils.isNode) requestPolicyFactories.push(_proxyPolicy.proxyPolicy(pipelineOptions.proxyOptions));
    const deserializationOptions = Object.assign(Object.assign({
    }, _deserializationPolicy.DefaultDeserializationOptions), pipelineOptions.deserializationOptions);
    const loggingOptions = Object.assign({
    }, pipelineOptions.loggingOptions);
    requestPolicyFactories.push(_tracingPolicy.tracingPolicy({
        userAgent: userAgentValue
    }), _keepAlivePolicy.keepAlivePolicy(keepAliveOptions), _userAgentPolicy.userAgentPolicy({
        value: userAgentValue
    }), _generateClientRequestIdPolicy.generateClientRequestIdPolicy(), _deserializationPolicy.deserializationPolicy(deserializationOptions.expectedContentTypes), _throttlingRetryPolicy.throttlingRetryPolicy(), _systemErrorRetryPolicy.systemErrorRetryPolicy(), _exponentialRetryPolicy.exponentialRetryPolicy(retryOptions.maxRetries, retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs));
    if (redirectOptions.handleRedirects) requestPolicyFactories.push(_redirectPolicy.redirectPolicy(redirectOptions.maxRetries));
    if (authPolicyFactory) requestPolicyFactories.push(authPolicyFactory);
    requestPolicyFactories.push(_logPolicy.logPolicy(loggingOptions));
    if (_utils.isNode && pipelineOptions.decompressResponse === false) requestPolicyFactories.push(_disableResponseDecompressionPolicy.disableResponseDecompressionPolicy());
    return {
        httpClient: pipelineOptions.httpClient,
        requestPolicyFactories
    };
}
function getPropertyParent(parent, propertyPath) {
    if (parent && propertyPath) {
        const propertyPathLength = propertyPath.length;
        for(let i = 0; i < propertyPathLength - 1; ++i){
            const propertyName = propertyPath[i];
            if (!parent[propertyName]) parent[propertyName] = {
            };
            parent = parent[propertyName];
        }
    }
    return parent;
}
function getOperationArgumentValueFromParameter(serviceClient, operationArguments, parameter, serializer) {
    return getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameter.parameterPath, parameter.mapper, serializer);
}
function getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameterPath, parameterMapper, serializer) {
    var _a;
    let value;
    if (typeof parameterPath === "string") parameterPath = [
        parameterPath
    ];
    const serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;
    if (Array.isArray(parameterPath)) {
        if (parameterPath.length > 0) {
            if (parameterMapper.isConstant) value = parameterMapper.defaultValue;
            else {
                let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);
                if (!propertySearchResult.propertyFound) propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);
                let useDefaultValue = false;
                if (!propertySearchResult.propertyFound) useDefaultValue = parameterMapper.required || parameterPath[0] === "options" && parameterPath.length === 2;
                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;
            }
            // Serialize just for validation purposes.
            const parameterPathString = _operationParameter.getPathStringFromParameterPath(parameterPath, parameterMapper);
            serializer.serialize(parameterMapper, value, parameterPathString, serializerOptions);
        }
    } else {
        if (parameterMapper.required) value = {
        };
        for(const propertyName in parameterPath){
            const propertyMapper = parameterMapper.type.modelProperties[propertyName];
            const propertyPath = parameterPath[propertyName];
            const propertyValue = getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, propertyPath, propertyMapper, serializer);
            // Serialize just for validation purposes.
            const propertyPathString = _operationParameter.getPathStringFromParameterPath(propertyPath, propertyMapper);
            serializer.serialize(propertyMapper, propertyValue, propertyPathString, serializerOptions);
            if (propertyValue !== undefined && propertyValue !== null) {
                if (!value) value = {
                };
                value[propertyName] = propertyValue;
            }
        }
    }
    return value;
}
function getPropertyFromParameterPath(parent, parameterPath) {
    const result = {
        propertyFound: false
    };
    let i = 0;
    for(; i < parameterPath.length; ++i){
        const parameterPathPart = parameterPath[i];
        // Make sure to check inherited properties too, so don't use hasOwnProperty().
        if (parent !== undefined && parent !== null && parameterPathPart in parent) parent = parent[parameterPathPart];
        else break;
    }
    if (i === parameterPath.length) {
        result.propertyValue = parent;
        result.propertyFound = true;
    }
    return result;
}
function flattenResponse(_response, responseSpec) {
    const parsedHeaders = _response.parsedHeaders;
    const bodyMapper = responseSpec && responseSpec.bodyMapper;
    const addOperationResponse = (obj)=>{
        return Object.defineProperty(obj, "_response", {
            value: _response
        });
    };
    if (bodyMapper) {
        const typeName = bodyMapper.type.name;
        if (typeName === "Stream") return addOperationResponse(Object.assign(Object.assign({
        }, parsedHeaders), {
            blobBody: _response.blobBody,
            readableStreamBody: _response.readableStreamBody
        }));
        const modelProperties = typeName === "Composite" && bodyMapper.type.modelProperties || {
        };
        const isPageableResponse = Object.keys(modelProperties).some((k)=>modelProperties[k].serializedName === ""
        );
        if (typeName === "Sequence" || isPageableResponse) {
            const arrayResponse = [
                ..._response.parsedBody || []
            ];
            for (const key of Object.keys(modelProperties))if (modelProperties[key].serializedName) arrayResponse[key] = _response.parsedBody[key];
            if (parsedHeaders) for (const key1 of Object.keys(parsedHeaders))arrayResponse[key1] = parsedHeaders[key1];
            addOperationResponse(arrayResponse);
            return arrayResponse;
        }
        if (typeName === "Composite" || typeName === "Dictionary") return addOperationResponse(Object.assign(Object.assign({
        }, parsedHeaders), _response.parsedBody));
    }
    if (bodyMapper || _response.request.method === "HEAD" || _utils.isPrimitiveType(_response.parsedBody)) // primitive body types and HEAD booleans
    return addOperationResponse(Object.assign(Object.assign({
    }, parsedHeaders), {
        body: _response.parsedBody
    }));
    return addOperationResponse(Object.assign(Object.assign({
    }, parsedHeaders), _response.parsedBody));
}
function getCredentialScopes(options, baseUri) {
    if (options === null || options === void 0 ? void 0 : options.credentialScopes) {
        const scopes = options.credentialScopes;
        return Array.isArray(scopes) ? scopes.map((scope)=>new _url.URL(scope).toString()
        ) : new _url.URL(scopes).toString();
    }
    if (baseUri) return `${baseUri}/.default`;
    return undefined;
}

},{"./util/utils":"9PNR0","./serializer":"70Aao","./policies/deserializationPolicy":"bALn1","./policies/keepAlivePolicy":"ejlyC","./policies/redirectPolicy":"hYsWZ","./policies/exponentialRetryPolicy":"4gFjR","./policies/logPolicy":"a9Pvl","./operationParameter":"52Cf4","./operationSpec":"bBiD5","./webResource":"6Zs5C","./policies/requestPolicy":"kMiVw","./util/serializer.common":"imsp0","@azure/core-auth":"7ariO","./policies/userAgentPolicy":"hAlcn","./queryCollectionFormat":"f7tlP","./url":"5Foit","./policies/bearerTokenAuthenticationPolicy":"eCkAA","./policies/disableResponseDecompressionPolicy":"lWifw","./policies/generateClientRequestIdPolicy":"6eO6U","./httpClientCache":"79aVo","./log":"8d4bo","./policies/ndJsonPolicy":"cp8EQ","./policies/proxyPolicy":"5RWWg","./policies/rpRegistrationPolicy":"h2Y6R","./policies/signingPolicy":"aI9O3","./util/xml":"cNVGy","./policies/systemErrorRetryPolicy":"8ojdS","./policies/throttlingRetryPolicy":"83jUi","./policies/tracingPolicy":"8oKhd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bALn1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they
 * pass through the HTTP pipeline.
 */ parcelHelpers.export(exports, "deserializationPolicy", ()=>deserializationPolicy
);
parcelHelpers.export(exports, "defaultJsonContentTypes", ()=>defaultJsonContentTypes
);
parcelHelpers.export(exports, "defaultXmlContentTypes", ()=>defaultXmlContentTypes
);
parcelHelpers.export(exports, "DefaultDeserializationOptions", ()=>DefaultDeserializationOptions
);
/**
 * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the
 * HTTP pipeline.
 */ parcelHelpers.export(exports, "DeserializationPolicy", ()=>DeserializationPolicy
);
/**
 * Given a particular set of content types to parse as either JSON or XML, consumes the HTTP response to produce the result object defined by the request's {@link OperationSpec}.
 * @param jsonContentTypes - Response content types to parse the body as JSON.
 * @param xmlContentTypes  - Response content types to parse the body as XML.
 * @param response - HTTP Response from the pipeline.
 * @param options  - Options to the serializer, mostly for configuring the XML parser if needed.
 * @returns A parsed {@link HttpOperationResponse} object that can be returned by the {@link ServiceClient}.
 */ parcelHelpers.export(exports, "deserializeResponseBody", ()=>deserializeResponseBody
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _requestPolicy = require("./requestPolicy");
var _serializerCommon = require("../util/serializer.common");
var _serializer = require("../serializer");
var _restError = require("../restError");
var _xml = require("../util/xml");
function deserializationPolicy(deserializationContentTypes, parsingOptions) {
    return {
        create: (nextPolicy, options)=>{
            return new DeserializationPolicy(nextPolicy, options, deserializationContentTypes, parsingOptions);
        }
    };
}
const defaultJsonContentTypes = [
    "application/json",
    "text/json"
];
const defaultXmlContentTypes = [
    "application/xml",
    "application/atom+xml"
];
const DefaultDeserializationOptions = {
    expectedContentTypes: {
        json: defaultJsonContentTypes,
        xml: defaultXmlContentTypes
    }
};
class DeserializationPolicy extends _requestPolicy.BaseRequestPolicy {
    constructor(nextPolicy, requestPolicyOptions, deserializationContentTypes, parsingOptions = {
    }){
        var _a;
        super(nextPolicy, requestPolicyOptions);
        this.jsonContentTypes = deserializationContentTypes && deserializationContentTypes.json || defaultJsonContentTypes;
        this.xmlContentTypes = deserializationContentTypes && deserializationContentTypes.xml || defaultXmlContentTypes;
        this.xmlCharKey = (_a = parsingOptions.xmlCharKey) !== null && _a !== void 0 ? _a : _serializerCommon.XML_CHARKEY;
    }
    async sendRequest(request) {
        return this._nextPolicy.sendRequest(request).then((response)=>deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response, {
                xmlCharKey: this.xmlCharKey
            })
        );
    }
}
function getOperationResponse(parsedResponse) {
    let result;
    const request = parsedResponse.request;
    const operationSpec = request.operationSpec;
    if (operationSpec) {
        const operationResponseGetter = request.operationResponseGetter;
        if (!operationResponseGetter) result = operationSpec.responses[parsedResponse.status];
        else result = operationResponseGetter(operationSpec, parsedResponse);
    }
    return result;
}
function shouldDeserializeResponse(parsedResponse) {
    const shouldDeserialize = parsedResponse.request.shouldDeserialize;
    let result;
    if (shouldDeserialize === undefined) result = true;
    else if (typeof shouldDeserialize === "boolean") result = shouldDeserialize;
    else result = shouldDeserialize(parsedResponse);
    return result;
}
function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options = {
}) {
    var _a, _b, _c;
    const updatedOptions = {
        rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : "",
        includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,
        xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : _serializerCommon.XML_CHARKEY
    };
    return parse(jsonContentTypes, xmlContentTypes, response, updatedOptions).then((parsedResponse)=>{
        if (!shouldDeserializeResponse(parsedResponse)) return parsedResponse;
        const operationSpec = parsedResponse.request.operationSpec;
        if (!operationSpec || !operationSpec.responses) return parsedResponse;
        const responseSpec = getOperationResponse(parsedResponse);
        const { error , shouldReturnResponse  } = handleErrorResponse(parsedResponse, operationSpec, responseSpec);
        if (error) throw error;
        else if (shouldReturnResponse) return parsedResponse;
        // An operation response spec does exist for current status code, so
        // use it to deserialize the response.
        if (responseSpec) {
            if (responseSpec.bodyMapper) {
                let valueToDeserialize = parsedResponse.parsedBody;
                if (operationSpec.isXML && responseSpec.bodyMapper.type.name === _serializer.MapperType.Sequence) valueToDeserialize = typeof valueToDeserialize === "object" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];
                try {
                    parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, "operationRes.parsedBody", options);
                } catch (innerError) {
                    const restError = new _restError.RestError(`Error ${innerError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, undefined, parsedResponse.status, parsedResponse.request, parsedResponse);
                    throw restError;
                }
            } else if (operationSpec.httpMethod === "HEAD") // head methods never have a body, but we return a boolean to indicate presence/absence of the resource
            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;
            if (responseSpec.headersMapper) parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.rawHeaders(), "operationRes.parsedHeaders", options);
        }
        return parsedResponse;
    });
}
function isOperationSpecEmpty(operationSpec) {
    const expectedStatusCodes = Object.keys(operationSpec.responses);
    return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === "default";
}
function handleErrorResponse(parsedResponse, operationSpec, responseSpec) {
    var _a;
    const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;
    const isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;
    if (isExpectedStatusCode) {
        if (responseSpec) {
            if (!responseSpec.isError) return {
                error: null,
                shouldReturnResponse: false
            };
        } else return {
            error: null,
            shouldReturnResponse: false
        };
    }
    const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;
    const streaming = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status)) || parsedResponse.request.streamResponseBody;
    const initialErrorMessage = streaming ? `Unexpected status code: ${parsedResponse.status}` : parsedResponse.bodyAsText;
    const error = new _restError.RestError(initialErrorMessage, undefined, parsedResponse.status, parsedResponse.request, parsedResponse);
    // If the item failed but there's no error spec or default spec to deserialize the error,
    // we should fail so we just throw the parsed response
    if (!errorResponseSpec) throw error;
    const defaultBodyMapper = errorResponseSpec.bodyMapper;
    const defaultHeadersMapper = errorResponseSpec.headersMapper;
    try {
        // If error response has a body, try to deserialize it using default body mapper.
        // Then try to extract error code & message from it
        if (parsedResponse.parsedBody) {
            const parsedBody = parsedResponse.parsedBody;
            let parsedError;
            if (defaultBodyMapper) {
                let valueToDeserialize = parsedBody;
                if (operationSpec.isXML && defaultBodyMapper.type.name === _serializer.MapperType.Sequence) valueToDeserialize = typeof parsedBody === "object" ? parsedBody[defaultBodyMapper.xmlElementName] : [];
                parsedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, "error.response.parsedBody");
            }
            const internalError = parsedBody.error || parsedError || parsedBody;
            error.code = internalError.code;
            if (internalError.message) error.message = internalError.message;
            if (defaultBodyMapper) error.response.parsedBody = parsedError;
        }
        // If error response has headers, try to deserialize it using default header mapper
        if (parsedResponse.headers && defaultHeadersMapper) error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.rawHeaders(), "operationRes.parsedHeaders");
    } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody - "${parsedResponse.bodyAsText}" for the default response.`;
    }
    return {
        error,
        shouldReturnResponse: false
    };
}
function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts) {
    var _a;
    const errorHandler = (err)=>{
        const msg = `Error "${err}" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;
        const errCode = err.code || _restError.RestError.PARSE_ERROR;
        const e = new _restError.RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse);
        return Promise.reject(e);
    };
    const streaming = ((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) || operationResponse.request.streamResponseBody;
    if (!streaming && operationResponse.bodyAsText) {
        const text = operationResponse.bodyAsText;
        const contentType = operationResponse.headers.get("Content-Type") || "";
        const contentComponents = !contentType ? [] : contentType.split(";").map((component)=>component.toLowerCase()
        );
        if (contentComponents.length === 0 || contentComponents.some((component)=>jsonContentTypes.indexOf(component) !== -1
        )) return new Promise((resolve)=>{
            operationResponse.parsedBody = JSON.parse(text);
            resolve(operationResponse);
        }).catch(errorHandler);
        else if (contentComponents.some((component)=>xmlContentTypes.indexOf(component) !== -1
        )) return _xml.parseXML(text, opts).then((body)=>{
            operationResponse.parsedBody = body;
            return operationResponse;
        }).catch(errorHandler);
    }
    return Promise.resolve(operationResponse);
}

},{"./requestPolicy":"kMiVw","../util/serializer.common":"imsp0","../serializer":"70Aao","../restError":"1TBBz","../util/xml":"cNVGy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kMiVw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The base class from which all request policies derive.
 */ parcelHelpers.export(exports, "BaseRequestPolicy", ()=>BaseRequestPolicy
);
/**
 * Optional properties that can be used when creating a RequestPolicy.
 */ parcelHelpers.export(exports, "RequestPolicyOptions", ()=>RequestPolicyOptions
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _httpPipelineLogLevel = require("../httpPipelineLogLevel");
class BaseRequestPolicy {
    /**
     * The main method to implement that manipulates a request/response.
     */ constructor(/**
     * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.
     */ _nextPolicy, /**
     * The options that can be passed to a given request policy.
     */ _options){
        this._nextPolicy = _nextPolicy;
        this._options = _options;
    }
    /**
     * Get whether or not a log with the provided log level should be logged.
     * @param logLevel - The log level of the log that will be logged.
     * @returns Whether or not a log with the provided log level should be logged.
     */ shouldLog(logLevel) {
        return this._options.shouldLog(logLevel);
    }
    /**
     * Attempt to log the provided message to the provided logger. If no logger was provided or if
     * the log level does not meat the logger's threshold, then nothing will be logged.
     * @param logLevel - The log level of this log.
     * @param message - The message of this log.
     */ log(logLevel, message) {
        this._options.log(logLevel, message);
    }
}
class RequestPolicyOptions {
    constructor(_logger){
        this._logger = _logger;
    }
    /**
     * Get whether or not a log with the provided log level should be logged.
     * @param logLevel - The log level of the log that will be logged.
     * @returns Whether or not a log with the provided log level should be logged.
     */ shouldLog(logLevel) {
        return !!this._logger && logLevel !== _httpPipelineLogLevel.HttpPipelineLogLevel.OFF && logLevel <= this._logger.minimumLogLevel;
    }
    /**
     * Attempt to log the provided message to the provided logger. If no logger was provided or if
     * the log level does not meet the logger's threshold, then nothing will be logged.
     * @param logLevel - The log level of this log.
     * @param message - The message of this log.
     */ log(logLevel, message) {
        if (this._logger && this.shouldLog(logLevel)) this._logger.log(logLevel, message);
    }
}

},{"../httpPipelineLogLevel":"bsJP9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cNVGy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseXML", ()=>parseXML
);
parcelHelpers.export(exports, "stringifyXML", ()=>stringifyXML
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _serializerCommon = require("./serializer.common");
if (!self.document || !self.DOMParser || !self.Node || !self.XMLSerializer) throw new Error(`This library depends on the following DOM objects: ["document", "DOMParser", "Node", "XMLSerializer"] to parse XML, but some of these are undefined. You may provide a polyfill to make these globally available in order to support your environment. For more information, please refer to https://aka.ms/azsdk/js/web-workers. `);
const doc = document.implementation.createDocument(null, null, null);
const parser = new DOMParser();
function parseXML(str, opts = {
}) {
    var _a, _b, _c;
    try {
        const updatedOptions = {
            rootName: (_a = opts.rootName) !== null && _a !== void 0 ? _a : "",
            includeRoot: (_b = opts.includeRoot) !== null && _b !== void 0 ? _b : false,
            xmlCharKey: (_c = opts.xmlCharKey) !== null && _c !== void 0 ? _c : _serializerCommon.XML_CHARKEY
        };
        const dom = parser.parseFromString(str, "application/xml");
        throwIfError(dom);
        let obj;
        if (updatedOptions.includeRoot) obj = domToObject(dom, updatedOptions);
        else obj = domToObject(dom.childNodes[0], updatedOptions);
        return Promise.resolve(obj);
    } catch (err) {
        return Promise.reject(err);
    }
}
let errorNS;
function getErrorNamespace() {
    var _a;
    if (errorNS === undefined) try {
        errorNS = (_a = parser.parseFromString("INVALID", "text/xml").getElementsByTagName("parsererror")[0].namespaceURI) !== null && _a !== void 0 ? _a : "";
    } catch (ignored) {
        // Most browsers will return a document containing <parsererror>, but IE will throw.
        errorNS = "";
    }
    return errorNS;
}
function throwIfError(dom) {
    const parserErrors = dom.getElementsByTagName("parsererror");
    if (parserErrors.length > 0 && getErrorNamespace()) for(let i = 0; i < parserErrors.length; i++){
        if (parserErrors[i].namespaceURI === errorNS) throw new Error(parserErrors[i].innerHTML);
    }
}
function isElement(node) {
    return !!node.attributes;
}
/**
 * Get the Element-typed version of the provided Node if the provided node is an element with
 * attributes. If it isn't, then undefined is returned.
 */ function asElementWithAttributes(node) {
    return isElement(node) && node.hasAttributes() ? node : undefined;
}
function domToObject(node, options) {
    let result = {
    };
    const childNodeCount = node.childNodes.length;
    const firstChildNode = node.childNodes[0];
    const onlyChildTextValue = firstChildNode && childNodeCount === 1 && firstChildNode.nodeType === Node.TEXT_NODE && firstChildNode.nodeValue || undefined;
    const elementWithAttributes = asElementWithAttributes(node);
    if (elementWithAttributes) {
        result[_serializerCommon.XML_ATTRKEY] = {
        };
        for(let i = 0; i < elementWithAttributes.attributes.length; i++){
            const attr = elementWithAttributes.attributes[i];
            result[_serializerCommon.XML_ATTRKEY][attr.nodeName] = attr.nodeValue;
        }
        if (onlyChildTextValue) result[options.xmlCharKey] = onlyChildTextValue;
    } else if (childNodeCount === 0) result = "";
    else if (onlyChildTextValue) result = onlyChildTextValue;
    if (!onlyChildTextValue) for(let i = 0; i < childNodeCount; i++){
        const child = node.childNodes[i];
        // Ignore leading/trailing whitespace nodes
        if (child.nodeType !== Node.TEXT_NODE) {
            const childObject = domToObject(child, options);
            if (!result[child.nodeName]) result[child.nodeName] = childObject;
            else if (Array.isArray(result[child.nodeName])) result[child.nodeName].push(childObject);
            else result[child.nodeName] = [
                result[child.nodeName],
                childObject
            ];
        }
    }
    return result;
}
const serializer = new XMLSerializer();
function stringifyXML(content, opts = {
}) {
    var _a, _b, _c;
    const updatedOptions = {
        rootName: (_a = opts.rootName) !== null && _a !== void 0 ? _a : "root",
        includeRoot: (_b = opts.includeRoot) !== null && _b !== void 0 ? _b : false,
        xmlCharKey: (_c = opts.xmlCharKey) !== null && _c !== void 0 ? _c : _serializerCommon.XML_CHARKEY
    };
    const dom = buildNode(content, updatedOptions.rootName, updatedOptions)[0];
    return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + serializer.serializeToString(dom);
}
function buildAttributes(attrs) {
    const result = [];
    for (const key of Object.keys(attrs)){
        const attr = doc.createAttribute(key);
        attr.value = attrs[key].toString();
        result.push(attr);
    }
    return result;
}
function buildNode(obj, elementName, options) {
    if (obj === undefined || obj === null || typeof obj === "string" || typeof obj === "number" || typeof obj === "boolean") {
        const elem = doc.createElement(elementName);
        elem.textContent = obj === undefined || obj === null ? "" : obj.toString();
        return [
            elem
        ];
    } else if (Array.isArray(obj)) {
        const result = [];
        for (const arrayElem of obj)for (const child of buildNode(arrayElem, elementName, options))result.push(child);
        return result;
    } else if (typeof obj === "object") {
        const elem = doc.createElement(elementName);
        for (const key of Object.keys(obj)){
            if (key === _serializerCommon.XML_ATTRKEY) for (const attr of buildAttributes(obj[key]))elem.attributes.setNamedItem(attr);
            else if (key === options.xmlCharKey) elem.textContent = obj[key].toString();
            else for (const child of buildNode(obj[key], key, options))elem.appendChild(child);
        }
        return [
            elem
        ];
    } else throw new Error(`Illegal value passed to buildObject: ${obj}`);
}

},{"./serializer.common":"imsp0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ejlyC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DefaultKeepAliveOptions", ()=>DefaultKeepAliveOptions
);
/**
 * Creates a policy that controls whether HTTP connections are maintained on future requests.
 * @param keepAliveOptions - Keep alive options. By default, HTTP connections are maintained for future requests.
 * @returns An instance of the {@link KeepAlivePolicy}
 */ parcelHelpers.export(exports, "keepAlivePolicy", ()=>keepAlivePolicy
);
/**
 * KeepAlivePolicy is a policy used to control keep alive settings for every request.
 */ parcelHelpers.export(exports, "KeepAlivePolicy", ()=>KeepAlivePolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _requestPolicy = require("./requestPolicy");
const DefaultKeepAliveOptions = {
    enable: true
};
function keepAlivePolicy(keepAliveOptions) {
    return {
        create: (nextPolicy, options)=>{
            return new KeepAlivePolicy(nextPolicy, options, keepAliveOptions || DefaultKeepAliveOptions);
        }
    };
}
class KeepAlivePolicy extends _requestPolicy.BaseRequestPolicy {
    /**
     * Creates an instance of KeepAlivePolicy.
     *
     * @param nextPolicy -
     * @param options -
     * @param keepAliveOptions -
     */ constructor(nextPolicy, options, keepAliveOptions){
        super(nextPolicy, options);
        this.keepAliveOptions = keepAliveOptions;
    }
    /**
     * Sends out request.
     *
     * @param request -
     * @returns
     */ async sendRequest(request) {
        request.keepAlive = this.keepAliveOptions.enable;
        return this._nextPolicy.sendRequest(request);
    }
}

},{"./requestPolicy":"kMiVw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hYsWZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DefaultRedirectOptions", ()=>DefaultRedirectOptions
);
/**
 * Creates a redirect policy, which sends a repeats the request to a new destination if a response arrives with a "location" header, and a status code between 300 and 307.
 * @param maximumRetries - Maximum number of redirects to follow.
 * @returns An instance of the {@link RedirectPolicy}
 */ parcelHelpers.export(exports, "redirectPolicy", ()=>redirectPolicy
);
/**
 * Resends the request to a new destination if a response arrives with a "location" header, and a status code between 300 and 307.
 */ parcelHelpers.export(exports, "RedirectPolicy", ()=>RedirectPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _requestPolicy = require("./requestPolicy");
var _url = require("../url");
/**
 * Methods that are allowed to follow redirects 301 and 302
 */ const allowedRedirect = [
    "GET",
    "HEAD"
];
const DefaultRedirectOptions = {
    handleRedirects: true,
    maxRetries: 20
};
function redirectPolicy(maximumRetries = 20) {
    return {
        create: (nextPolicy, options)=>{
            return new RedirectPolicy(nextPolicy, options, maximumRetries);
        }
    };
}
class RedirectPolicy extends _requestPolicy.BaseRequestPolicy {
    constructor(nextPolicy, options, maxRetries = 20){
        super(nextPolicy, options);
        this.maxRetries = maxRetries;
    }
    sendRequest(request) {
        return this._nextPolicy.sendRequest(request).then((response)=>handleRedirect(this, response, 0)
        );
    }
}
function handleRedirect(policy, response, currentRetries) {
    const { request , status  } = response;
    const locationHeader = response.headers.get("location");
    if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === "POST" || status === 307) && (!policy.maxRetries || currentRetries < policy.maxRetries)) {
        const builder = _url.URLBuilder.parse(request.url);
        builder.setPath(locationHeader);
        request.url = builder.toString();
        // POST request with Status code 303 should be converted into a
        // redirected GET request if the redirect url is present in the location header
        if (status === 303) {
            request.method = "GET";
            delete request.body;
        }
        return policy._nextPolicy.sendRequest(request).then((res)=>handleRedirect(policy, res, currentRetries + 1)
        );
    }
    return Promise.resolve(response);
}

},{"./requestPolicy":"kMiVw","../url":"5Foit","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4gFjR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Policy that retries the request as many times as configured for as long as the max retry time interval specified, each retry waiting longer to begin than the last time.
 * @param retryCount - Maximum number of retries.
 * @param retryInterval - Base time between retries.
 * @param maxRetryInterval - Maximum time to wait between retries.
 */ parcelHelpers.export(exports, "exponentialRetryPolicy", ()=>exponentialRetryPolicy
);
parcelHelpers.export(exports, "RetryMode", ()=>RetryMode
);
parcelHelpers.export(exports, "DefaultRetryOptions", ()=>DefaultRetryOptions
);
/**
 * Instantiates a new "ExponentialRetryPolicyFilter" instance.
 */ parcelHelpers.export(exports, "ExponentialRetryPolicy", ()=>ExponentialRetryPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _requestPolicy = require("./requestPolicy");
var _exponentialBackoffStrategy = require("../util/exponentialBackoffStrategy");
var _constants = require("../util/constants");
var _restError = require("../restError");
var _delay = require("../util/delay");
var _log = require("../log");
function exponentialRetryPolicy(retryCount, retryInterval, maxRetryInterval) {
    return {
        create: (nextPolicy, options)=>{
            return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval);
        }
    };
}
var RetryMode;
(function(RetryMode1) {
    /**
     * Currently supported retry mode.
     * Each time a retry happens, it will take exponentially more time than the last time.
     */ RetryMode1[RetryMode1["Exponential"] = 0] = "Exponential";
})(RetryMode || (RetryMode = {
}));
const DefaultRetryOptions = {
    maxRetries: _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_COUNT,
    retryDelayInMs: _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_INTERVAL,
    maxRetryDelayInMs: _exponentialBackoffStrategy.DEFAULT_CLIENT_MAX_RETRY_INTERVAL
};
class ExponentialRetryPolicy extends _requestPolicy.BaseRequestPolicy {
    /**
     * @param nextPolicy - The next RequestPolicy in the pipeline chain.
     * @param options - The options for this RequestPolicy.
     * @param retryCount - The client retry count.
     * @param retryInterval - The client retry interval, in milliseconds.
     * @param minRetryInterval - The minimum retry interval, in milliseconds.
     * @param maxRetryInterval - The maximum retry interval, in milliseconds.
     */ constructor(nextPolicy, options, retryCount, retryInterval, maxRetryInterval){
        super(nextPolicy, options);
        this.retryCount = _exponentialBackoffStrategy.isNumber(retryCount) ? retryCount : _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_COUNT;
        this.retryInterval = _exponentialBackoffStrategy.isNumber(retryInterval) ? retryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_INTERVAL;
        this.maxRetryInterval = _exponentialBackoffStrategy.isNumber(maxRetryInterval) ? maxRetryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
    }
    sendRequest(request) {
        return this._nextPolicy.sendRequest(request.clone()).then((response)=>retry(this, request, response)
        ).catch((error)=>retry(this, request, error.response, undefined, error)
        );
    }
}
async function retry(policy, request, response, retryData, requestError) {
    function shouldPolicyRetry(responseParam) {
        const statusCode = responseParam === null || responseParam === void 0 ? void 0 : responseParam.status;
        if (statusCode === 503 && (response === null || response === void 0 ? void 0 : response.headers.get(_constants.Constants.HeaderConstants.RETRY_AFTER))) return false;
        if (statusCode === undefined || statusCode < 500 && statusCode !== 408 || statusCode === 501 || statusCode === 505) return false;
        return true;
    }
    retryData = _exponentialBackoffStrategy.updateRetryData({
        retryInterval: policy.retryInterval,
        minRetryInterval: 0,
        maxRetryInterval: policy.maxRetryInterval
    }, retryData, requestError);
    const isAborted = request.abortSignal && request.abortSignal.aborted;
    if (!isAborted && _exponentialBackoffStrategy.shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, response)) {
        _log.logger.info(`Retrying request in ${retryData.retryInterval}`);
        try {
            await _delay.delay(retryData.retryInterval);
            const res = await policy._nextPolicy.sendRequest(request.clone());
            return retry(policy, request, res, retryData);
        } catch (err) {
            return retry(policy, request, response, retryData, err);
        }
    } else if (isAborted || requestError || !response) {
        // If the operation failed in the end, return all errors instead of just the last one
        const err = retryData.error || new _restError.RestError("Failed to send the request.", _restError.RestError.REQUEST_SEND_ERROR, response && response.status, response && response.request, response);
        throw err;
    } else return response;
}

},{"./requestPolicy":"kMiVw","../util/exponentialBackoffStrategy":"1jp5o","../util/constants":"anVPh","../restError":"1TBBz","../util/delay":"kptxH","../log":"8d4bo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1jp5o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_CLIENT_RETRY_COUNT", ()=>DEFAULT_CLIENT_RETRY_COUNT
);
parcelHelpers.export(exports, "DEFAULT_CLIENT_RETRY_INTERVAL", ()=>DEFAULT_CLIENT_RETRY_INTERVAL
);
parcelHelpers.export(exports, "DEFAULT_CLIENT_MAX_RETRY_INTERVAL", ()=>DEFAULT_CLIENT_MAX_RETRY_INTERVAL
);
parcelHelpers.export(exports, "DEFAULT_CLIENT_MIN_RETRY_INTERVAL", ()=>DEFAULT_CLIENT_MIN_RETRY_INTERVAL
);
parcelHelpers.export(exports, "isNumber", ()=>isNumber
);
/**
 * @internal
 * Determines if the operation should be retried.
 *
 * @param retryLimit - Specifies the max number of retries.
 * @param predicate - Initial chekck on whether to retry based on given responses or errors
 * @param retryData -  The retry data.
 * @returns True if the operation qualifies for a retry; false otherwise.
 */ parcelHelpers.export(exports, "shouldRetry", ()=>shouldRetry
);
/**
 * @internal
 * Updates the retry data for the next attempt.
 *
 * @param retryOptions - specifies retry interval, and its lower bound and upper bound.
 * @param retryData -  The retry data.
 * @param err - The operation"s error, if any.
 */ parcelHelpers.export(exports, "updateRetryData", ()=>updateRetryData
);
const DEFAULT_CLIENT_RETRY_COUNT = 3;
const DEFAULT_CLIENT_RETRY_INTERVAL = 30000;
const DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 90000;
const DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 3000;
function isNumber(n) {
    return typeof n === "number";
}
function shouldRetry(retryLimit, predicate, retryData, response, error) {
    if (!predicate(response, error)) return false;
    return retryData.retryCount < retryLimit;
}
function updateRetryData(retryOptions, retryData = {
    retryCount: 0,
    retryInterval: 0
}, err) {
    if (err) {
        if (retryData.error) err.innerError = retryData.error;
        retryData.error = err;
    }
    // Adjust retry count
    retryData.retryCount++;
    // Adjust retry interval
    let incrementDelta = Math.pow(2, retryData.retryCount - 1) - 1;
    const boundedRandDelta = retryOptions.retryInterval * 0.8 + Math.floor(Math.random() * (retryOptions.retryInterval * 0.4));
    incrementDelta *= boundedRandDelta;
    retryData.retryInterval = Math.min(retryOptions.minRetryInterval + incrementDelta, retryOptions.maxRetryInterval);
    return retryData;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kptxH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A wrapper for setTimeout that resolves a promise after delayInMs milliseconds.
 * @param delayInMs - The number of milliseconds to be delayed.
 * @param value - The value to be resolved with after a timeout of t milliseconds.
 * @param options - The options for delay - currently abort options
 *   @param abortSignal - The abortSignal associated with containing operation.
 *   @param abortErrorMsg - The abort error message associated with containing operation.
 * @returns - Resolved promise
 */ parcelHelpers.export(exports, "delay", ()=>delay
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _abortController = require("@azure/abort-controller");
var _typeguards = require("./typeguards");
const StandardAbortMessage = "The operation was aborted.";
function delay(delayInMs, value, options) {
    return new Promise((resolve, reject)=>{
        let timer = undefined;
        let onAborted = undefined;
        const rejectOnAbort = ()=>{
            return reject(new _abortController.AbortError((options === null || options === void 0 ? void 0 : options.abortErrorMsg) ? options === null || options === void 0 ? void 0 : options.abortErrorMsg : StandardAbortMessage));
        };
        const removeListeners = ()=>{
            if ((options === null || options === void 0 ? void 0 : options.abortSignal) && onAborted) options.abortSignal.removeEventListener("abort", onAborted);
        };
        onAborted = ()=>{
            if (_typeguards.isDefined(timer)) clearTimeout(timer);
            removeListeners();
            return rejectOnAbort();
        };
        if ((options === null || options === void 0 ? void 0 : options.abortSignal) && options.abortSignal.aborted) return rejectOnAbort();
        timer = setTimeout(()=>{
            removeListeners();
            resolve(value);
        }, delayInMs);
        if (options === null || options === void 0 ? void 0 : options.abortSignal) options.abortSignal.addEventListener("abort", onAborted);
    });
}

},{"@azure/abort-controller":"6HB9r","./typeguards":"lM3HL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lM3HL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Helper TypeGuard that checks if the value is not null or undefined.
 * @param thing - Anything
 * @internal
 */ parcelHelpers.export(exports, "isDefined", ()=>isDefined
);
function isDefined(thing) {
    return typeof thing !== "undefined" && thing !== null;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8d4bo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logger", ()=>logger
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _logger = require("@azure/logger");
const logger = _logger.createClientLogger("core-http");

},{"@azure/logger":"7TN6Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7TN6Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AzureLogger", ()=>AzureLogger
);
/**
 * Immediately enables logging at the specified log level.
 * @param level - The log level to enable for logging.
 * Options from most verbose to least verbose are:
 * - verbose
 * - info
 * - warning
 * - error
 */ parcelHelpers.export(exports, "setLogLevel", ()=>setLogLevel
);
/**
 * Retrieves the currently specified log level.
 */ parcelHelpers.export(exports, "getLogLevel", ()=>getLogLevel
);
/**
 * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.
 * @param namespace - The name of the SDK package.
 * @hidden
 */ parcelHelpers.export(exports, "createClientLogger", ()=>createClientLogger
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _debug = require("./debug");
var _debugDefault = parcelHelpers.interopDefault(_debug);
var process = require("process");
const registeredLoggers = new Set();
const logLevelFromEnv = (typeof process !== "undefined" && process.env, undefined);
let azureLogLevel;
const AzureLogger = _debugDefault.default("azure");
AzureLogger.log = (...args)=>{
    _debugDefault.default.log(...args);
};
const AZURE_LOG_LEVELS = [
    "verbose",
    "info",
    "warning",
    "error"
];
if (logLevelFromEnv) {
    // avoid calling setLogLevel because we don't want a mis-set environment variable to crash
    if (isAzureLogLevel(logLevelFromEnv)) setLogLevel(logLevelFromEnv);
    else console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(", ")}.`);
}
function setLogLevel(level) {
    if (level && !isAzureLogLevel(level)) throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(",")}`);
    azureLogLevel = level;
    const enabledNamespaces = [];
    for (const logger of registeredLoggers)if (shouldEnable(logger)) enabledNamespaces.push(logger.namespace);
    _debugDefault.default.enable(enabledNamespaces.join(","));
}
function getLogLevel() {
    return azureLogLevel;
}
const levelMap = {
    verbose: 400,
    info: 300,
    warning: 200,
    error: 100
};
function createClientLogger(namespace) {
    const clientRootLogger = AzureLogger.extend(namespace);
    patchLogMethod(AzureLogger, clientRootLogger);
    return {
        error: createLogger(clientRootLogger, "error"),
        warning: createLogger(clientRootLogger, "warning"),
        info: createLogger(clientRootLogger, "info"),
        verbose: createLogger(clientRootLogger, "verbose")
    };
}
function patchLogMethod(parent, child) {
    child.log = (...args)=>{
        parent.log(...args);
    };
}
function createLogger(parent, level) {
    const logger = Object.assign(parent.extend(level), {
        level
    });
    patchLogMethod(parent, logger);
    if (shouldEnable(logger)) {
        const enabledNamespaces = _debugDefault.default.disable();
        _debugDefault.default.enable(enabledNamespaces + "," + logger.namespace);
    }
    registeredLoggers.add(logger);
    return logger;
}
function shouldEnable(logger) {
    if (azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]) return true;
    else return false;
}
function isAzureLogLevel(logLevel) {
    return AZURE_LOG_LEVELS.includes(logLevel);
}

},{"./debug":"gsNo3","process":"jhUEF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gsNo3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _log = require("./log");
var process = require("process");
const debugEnvVariable = (typeof process !== "undefined" && process.env, undefined);
let enabledString;
let enabledNamespaces = [];
let skippedNamespaces = [];
const debuggers = [];
if (debugEnvVariable) enable(debugEnvVariable);
const debugObj = Object.assign((namespace)=>{
    return createDebugger(namespace);
}, {
    enable,
    enabled,
    disable,
    log: _log.log
});
function enable(namespaces) {
    enabledString = namespaces;
    enabledNamespaces = [];
    skippedNamespaces = [];
    const wildcard = /\*/g;
    const namespaceList = namespaces.split(",").map((ns)=>ns.trim().replace(wildcard, ".*?")
    );
    for (const ns1 of namespaceList)if (ns1.startsWith("-")) skippedNamespaces.push(new RegExp(`^${ns1.substr(1)}$`));
    else enabledNamespaces.push(new RegExp(`^${ns1}$`));
    for (const instance of debuggers)instance.enabled = enabled(instance.namespace);
}
function enabled(namespace) {
    if (namespace.endsWith("*")) return true;
    for (const skipped of skippedNamespaces){
        if (skipped.test(namespace)) return false;
    }
    for (const enabledNamespace of enabledNamespaces){
        if (enabledNamespace.test(namespace)) return true;
    }
    return false;
}
function disable() {
    const result = enabledString || "";
    enable("");
    return result;
}
function createDebugger(namespace) {
    const newDebugger = Object.assign(debug, {
        enabled: enabled(namespace),
        destroy,
        log: debugObj.log,
        namespace,
        extend
    });
    function debug(...args) {
        if (!newDebugger.enabled) return;
        if (args.length > 0) args[0] = `${namespace} ${args[0]}`;
        newDebugger.log(...args);
    }
    debuggers.push(newDebugger);
    return newDebugger;
}
function destroy() {
    const index = debuggers.indexOf(this);
    if (index >= 0) {
        debuggers.splice(index, 1);
        return true;
    }
    return false;
}
function extend(namespace) {
    const newDebugger = createDebugger(`${this.namespace}:${namespace}`);
    newDebugger.log = this.log;
    return newDebugger;
}
exports.default = debugObj;

},{"./log":"HLvTT","process":"jhUEF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"HLvTT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
parcelHelpers.export(exports, "log", ()=>log
);
function log(...args) {
    if (args.length > 0) {
        const firstArg = String(args[0]);
        if (firstArg.includes(":error")) console.error(...args);
        else if (firstArg.includes(":warning")) console.warn(...args);
        else if (firstArg.includes(":info")) console.info(...args);
        else if (firstArg.includes(":verbose")) console.debug(...args);
        else console.debug(...args);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"a9Pvl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a policy that logs information about the outgoing request and the incoming responses.
 * @param loggingOptions - Logging options.
 * @returns An instance of the {@link LogPolicy}
 */ parcelHelpers.export(exports, "logPolicy", ()=>logPolicy
);
/**
 * A policy that logs information about the outgoing request and the incoming responses.
 */ parcelHelpers.export(exports, "LogPolicy", ()=>LogPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _requestPolicy = require("./requestPolicy");
var _sanitizer = require("../util/sanitizer");
var _log = require("../log");
function logPolicy(loggingOptions = {
}) {
    return {
        create: (nextPolicy, options)=>{
            return new LogPolicy(nextPolicy, options, loggingOptions);
        }
    };
}
class LogPolicy extends _requestPolicy.BaseRequestPolicy {
    constructor(nextPolicy, options, { logger =_log.logger.info , allowedHeaderNames =[] , allowedQueryParameters =[] ,  } = {
    }){
        super(nextPolicy, options);
        this.logger = logger;
        this.sanitizer = new _sanitizer.Sanitizer({
            allowedHeaderNames,
            allowedQueryParameters
        });
    }
    /**
     * Header names whose values will be logged when logging is enabled. Defaults to
     * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers
     * specified in this field will be added to that list.  Any other values will
     * be written to logs as "REDACTED".
     * @deprecated Pass these into the constructor instead.
     */ get allowedHeaderNames() {
        return this.sanitizer.allowedHeaderNames;
    }
    /**
     * Header names whose values will be logged when logging is enabled. Defaults to
     * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers
     * specified in this field will be added to that list.  Any other values will
     * be written to logs as "REDACTED".
     * @deprecated Pass these into the constructor instead.
     */ set allowedHeaderNames(allowedHeaderNames) {
        this.sanitizer.allowedHeaderNames = allowedHeaderNames;
    }
    /**
     * Query string names whose values will be logged when logging is enabled. By default no
     * query string values are logged.
     * @deprecated Pass these into the constructor instead.
     */ get allowedQueryParameters() {
        return this.sanitizer.allowedQueryParameters;
    }
    /**
     * Query string names whose values will be logged when logging is enabled. By default no
     * query string values are logged.
     * @deprecated Pass these into the constructor instead.
     */ set allowedQueryParameters(allowedQueryParameters) {
        this.sanitizer.allowedQueryParameters = allowedQueryParameters;
    }
    sendRequest(request) {
        if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);
        this.logRequest(request);
        return this._nextPolicy.sendRequest(request).then((response)=>this.logResponse(response)
        );
    }
    logRequest(request) {
        this.logger(`Request: ${this.sanitizer.sanitize(request)}`);
    }
    logResponse(response) {
        this.logger(`Response status code: ${response.status}`);
        this.logger(`Headers: ${this.sanitizer.sanitize(response.headers)}`);
        return response;
    }
}

},{"./requestPolicy":"kMiVw","../util/sanitizer":"45DeD","../log":"8d4bo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"52Cf4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Get the path to this parameter's value as a dotted string (a.b.c).
 * @param parameter - The parameter to get the path string for.
 * @returns The path to this parameter's value as a dotted string.
 */ parcelHelpers.export(exports, "getPathStringFromParameter", ()=>getPathStringFromParameter
);
parcelHelpers.export(exports, "getPathStringFromParameterPath", ()=>getPathStringFromParameterPath
);
function getPathStringFromParameter(parameter) {
    return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);
}
function getPathStringFromParameterPath(parameterPath, mapper) {
    let result;
    if (typeof parameterPath === "string") result = parameterPath;
    else if (Array.isArray(parameterPath)) result = parameterPath.join(".");
    else result = mapper.serializedName;
    return result;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bBiD5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Gets the list of status codes for streaming responses.
 * @internal
 */ parcelHelpers.export(exports, "getStreamResponseStatusCodes", ()=>getStreamResponseStatusCodes
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _serializer = require("./serializer");
function getStreamResponseStatusCodes(operationSpec) {
    const result = new Set();
    for(const statusCode in operationSpec.responses){
        const operationResponse = operationSpec.responses[statusCode];
        if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === _serializer.MapperType.Stream) result.add(Number(statusCode));
    }
    return result;
}

},{"./serializer":"70Aao","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ariO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
parcelHelpers.export(exports, "AzureKeyCredential", ()=>_azureKeyCredential.AzureKeyCredential
);
parcelHelpers.export(exports, "AzureNamedKeyCredential", ()=>_azureNamedKeyCredential.AzureNamedKeyCredential
);
parcelHelpers.export(exports, "isNamedKeyCredential", ()=>_azureNamedKeyCredential.isNamedKeyCredential
);
parcelHelpers.export(exports, "AzureSASCredential", ()=>_azureSASCredential.AzureSASCredential
);
parcelHelpers.export(exports, "isSASCredential", ()=>_azureSASCredential.isSASCredential
);
parcelHelpers.export(exports, "isTokenCredential", ()=>_tokenCredential.isTokenCredential
);
var _azureKeyCredential = require("./azureKeyCredential");
var _azureNamedKeyCredential = require("./azureNamedKeyCredential");
var _azureSASCredential = require("./azureSASCredential");
var _tokenCredential = require("./tokenCredential");

},{"./azureKeyCredential":false,"./azureNamedKeyCredential":false,"./azureSASCredential":false,"./tokenCredential":"4lOkJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4lOkJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Tests an object to determine whether it implements TokenCredential.
 *
 * @param credential - The assumed TokenCredential to be tested.
 */ parcelHelpers.export(exports, "isTokenCredential", ()=>isTokenCredential
);
function isTokenCredential(credential) {
    // Check for an object with a 'getToken' function and possibly with
    // a 'signRequest' function.  We do this check to make sure that
    // a ServiceClientCredentials implementor (like TokenClientCredentials
    // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if
    // it doesn't actually implement TokenCredential also.
    const castCredential = credential;
    return castCredential && typeof castCredential.getToken === "function" && (castCredential.signRequest === undefined || castCredential.getToken.length > 0);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hAlcn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDefaultUserAgentHeaderName", ()=>getDefaultUserAgentHeaderName
);
/**
 * The default approach to generate user agents.
 * Uses static information from this package, plus system information available from the runtime.
 */ parcelHelpers.export(exports, "getDefaultUserAgentValue", ()=>getDefaultUserAgentValue
);
/**
 * Returns a policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.
 * @param userAgentData - Telemetry information.
 * @returns A new {@link UserAgentPolicy}.
 */ parcelHelpers.export(exports, "userAgentPolicy", ()=>userAgentPolicy
);
/**
 * A policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.
 */ parcelHelpers.export(exports, "UserAgentPolicy", ()=>UserAgentPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _requestPolicy = require("./requestPolicy");
var _msRestUserAgentPolicy = require("./msRestUserAgentPolicy");
var _constants = require("../util/constants");
var _httpHeaders = require("../httpHeaders");
function getRuntimeInfo() {
    const msRestRuntime = {
        key: "core-http",
        value: _constants.Constants.coreHttpVersion
    };
    return [
        msRestRuntime
    ];
}
function getUserAgentString(telemetryInfo, keySeparator = " ", valueSeparator = "/") {
    return telemetryInfo.map((info)=>{
        const value = info.value ? `${valueSeparator}${info.value}` : "";
        return `${info.key}${value}`;
    }).join(keySeparator);
}
const getDefaultUserAgentHeaderName = _msRestUserAgentPolicy.getDefaultUserAgentKey;
function getDefaultUserAgentValue() {
    const runtimeInfo = getRuntimeInfo();
    const platformSpecificData = _msRestUserAgentPolicy.getPlatformSpecificData();
    const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));
    return userAgent;
}
function userAgentPolicy(userAgentData) {
    const key = !userAgentData || userAgentData.key === undefined || userAgentData.key === null ? _msRestUserAgentPolicy.getDefaultUserAgentKey() : userAgentData.key;
    const value = !userAgentData || userAgentData.value === undefined || userAgentData.value === null ? getDefaultUserAgentValue() : userAgentData.value;
    return {
        create: (nextPolicy, options)=>{
            return new UserAgentPolicy(nextPolicy, options, key, value);
        }
    };
}
class UserAgentPolicy extends _requestPolicy.BaseRequestPolicy {
    constructor(_nextPolicy, _options, headerKey, headerValue){
        super(_nextPolicy, _options);
        this._nextPolicy = _nextPolicy;
        this._options = _options;
        this.headerKey = headerKey;
        this.headerValue = headerValue;
    }
    sendRequest(request) {
        this.addUserAgentHeader(request);
        return this._nextPolicy.sendRequest(request);
    }
    /**
     * Adds the user agent header to the outgoing request.
     */ addUserAgentHeader(request) {
        if (!request.headers) request.headers = new _httpHeaders.HttpHeaders();
        if (!request.headers.get(this.headerKey) && this.headerValue) request.headers.set(this.headerKey, this.headerValue);
    }
}

},{"./requestPolicy":"kMiVw","./msRestUserAgentPolicy":"lPtwS","../util/constants":"anVPh","../httpHeaders":"e4FzO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lPtwS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
parcelHelpers.export(exports, "getDefaultUserAgentKey", ()=>getDefaultUserAgentKey
);
parcelHelpers.export(exports, "getPlatformSpecificData", ()=>getPlatformSpecificData
);
function getDefaultUserAgentKey() {
    return "x-ms-useragent";
}
function getPlatformSpecificData() {
    const navigator = self.navigator;
    const osInfo = {
        key: "OS",
        value: (navigator.oscpu || navigator.platform).replace(" ", "")
    };
    return [
        osInfo
    ];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f7tlP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "QueryCollectionFormat", ()=>QueryCollectionFormat
);
var QueryCollectionFormat;
(function(QueryCollectionFormat1) {
    /**
     * CSV: Each pair of segments joined by a single comma.
     */ QueryCollectionFormat1["Csv"] = ",";
    /**
     * SSV: Each pair of segments joined by a single space character.
     */ QueryCollectionFormat1["Ssv"] = " ";
    /**
     * TSV: Each pair of segments joined by a single tab character.
     */ QueryCollectionFormat1["Tsv"] = "\t";
    /**
     * Pipes: Each pair of segments joined by a single pipe character.
     */ QueryCollectionFormat1["Pipes"] = "|";
    /**
     * Denotes this is an array of values that should be passed to the server in multiple key/value pairs, e.g. `?queryParam=value1&queryParam=value2`
     */ QueryCollectionFormat1["Multi"] = "Multi";
})(QueryCollectionFormat || (QueryCollectionFormat = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eCkAA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_CYCLER_OPTIONS", ()=>DEFAULT_CYCLER_OPTIONS
);
// #endregion
/**
 * Creates a new factory for a RequestPolicy that applies a bearer token to
 * the requests' `Authorization` headers.
 *
 * @param credential - The TokenCredential implementation that can supply the bearer token.
 * @param scopes - The scopes for which the bearer token applies.
 */ parcelHelpers.export(exports, "bearerTokenAuthenticationPolicy", ()=>bearerTokenAuthenticationPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _requestPolicy = require("../policies/requestPolicy");
var _constants = require("../util/constants");
var _delay = require("../util/delay");
const DEFAULT_CYCLER_OPTIONS = {
    forcedRefreshWindowInMs: 1000,
    retryIntervalInMs: 3000,
    refreshWindowInMs: 120000
};
/**
 * Converts an an unreliable access token getter (which may resolve with null)
 * into an AccessTokenGetter by retrying the unreliable getter in a regular
 * interval.
 *
 * @param getAccessToken - a function that produces a promise of an access
 * token that may fail by returning null
 * @param retryIntervalInMs - the time (in milliseconds) to wait between retry
 * attempts
 * @param timeoutInMs - the timestamp after which the refresh attempt will fail,
 * throwing an exception
 * @returns - a promise that, if it resolves, will resolve with an access token
 */ async function beginRefresh(getAccessToken, retryIntervalInMs, timeoutInMs) {
    // This wrapper handles exceptions gracefully as long as we haven't exceeded
    // the timeout.
    async function tryGetAccessToken() {
        if (Date.now() < timeoutInMs) try {
            return await getAccessToken();
        } catch (_a) {
            return null;
        }
        else {
            const finalToken = await getAccessToken();
            // Timeout is up, so throw if it's still null
            if (finalToken === null) throw new Error("Failed to refresh access token.");
            return finalToken;
        }
    }
    let token = await tryGetAccessToken();
    while(token === null){
        await _delay.delay(retryIntervalInMs);
        token = await tryGetAccessToken();
    }
    return token;
}
/**
 * Creates a token cycler from a credential, scopes, and optional settings.
 *
 * A token cycler represents a way to reliably retrieve a valid access token
 * from a TokenCredential. It will handle initializing the token, refreshing it
 * when it nears expiration, and synchronizes refresh attempts to avoid
 * concurrency hazards.
 *
 * @param credential - the underlying TokenCredential that provides the access
 * token
 * @param scopes - the scopes to request authorization for
 * @param tokenCyclerOptions - optionally override default settings for the cycler
 *
 * @returns - a function that reliably produces a valid access token
 */ function createTokenCycler(credential, scopes, tokenCyclerOptions) {
    let refreshWorker = null;
    let token = null;
    const options = Object.assign(Object.assign({
    }, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);
    /**
     * This little holder defines several predicates that we use to construct
     * the rules of refreshing the token.
     */ const cycler = {
        /**
         * Produces true if a refresh job is currently in progress.
         */ get isRefreshing () {
            return refreshWorker !== null;
        },
        /**
         * Produces true if the cycler SHOULD refresh (we are within the refresh
         * window and not already refreshing)
         */ get shouldRefresh () {
            var _a;
            return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();
        },
        /**
         * Produces true if the cycler MUST refresh (null or nearly-expired
         * token).
         */ get mustRefresh () {
            return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();
        }
    };
    /**
     * Starts a refresh job or returns the existing job if one is already
     * running.
     */ function refresh(getTokenOptions) {
        var _a;
        if (!cycler.isRefreshing) {
            // We bind `scopes` here to avoid passing it around a lot
            const tryGetAccessToken = ()=>credential.getToken(scopes, getTokenOptions)
            ;
            // Take advantage of promise chaining to insert an assignment to `token`
            // before the refresh can be considered done.
            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, // If we don't have a token, then we should timeout immediately
            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then((_token)=>{
                refreshWorker = null;
                token = _token;
                return token;
            }).catch((reason)=>{
                // We also should reset the refresher if we enter a failed state.  All
                // existing awaiters will throw, but subsequent requests will start a
                // new retry chain.
                refreshWorker = null;
                token = null;
                throw reason;
            });
        }
        return refreshWorker;
    }
    return async (tokenOptions)=>{
        //
        // Simple rules:
        // - If we MUST refresh, then return the refresh task, blocking
        //   the pipeline until a token is available.
        // - If we SHOULD refresh, then run refresh but don't return it
        //   (we can still use the cached token).
        // - Return the token, since it's fine if we didn't return in
        //   step 1.
        //
        if (cycler.mustRefresh) return refresh(tokenOptions);
        if (cycler.shouldRefresh) refresh(tokenOptions);
        return token;
    };
}
function bearerTokenAuthenticationPolicy(credential, scopes) {
    // This simple function encapsulates the entire process of reliably retrieving the token
    const getToken = createTokenCycler(credential, scopes /* , options */ );
    class BearerTokenAuthenticationPolicy extends _requestPolicy.BaseRequestPolicy {
        constructor(nextPolicy, options){
            super(nextPolicy, options);
        }
        async sendRequest(webResource) {
            if (!webResource.url.toLowerCase().startsWith("https://")) throw new Error("Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.");
            const { token  } = await getToken({
                abortSignal: webResource.abortSignal,
                tracingOptions: {
                    tracingContext: webResource.tracingContext
                }
            });
            webResource.headers.set(_constants.Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);
            return this._nextPolicy.sendRequest(webResource);
        }
    }
    return {
        create: (nextPolicy, options)=>{
            return new BearerTokenAuthenticationPolicy(nextPolicy, options);
        }
    };
}

},{"../policies/requestPolicy":"kMiVw","../util/constants":"anVPh","../util/delay":"kptxH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lWifw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * {@link DisableResponseDecompressionPolicy} is not supported in browser and attempting
 * to use it will results in error being thrown.
 */ parcelHelpers.export(exports, "disableResponseDecompressionPolicy", ()=>disableResponseDecompressionPolicy
);
parcelHelpers.export(exports, "DisableResponseDecompressionPolicy", ()=>DisableResponseDecompressionPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/*
 * NOTE: When moving this file, please update "browser" section in package.json
 */ var _requestPolicy = require("./requestPolicy");
const DisbleResponseDecompressionNotSupportedInBrowser = new Error("DisableResponseDecompressionPolicy is not supported in browser environment");
function disableResponseDecompressionPolicy() {
    return {
        create: (_nextPolicy, _options)=>{
            throw DisbleResponseDecompressionNotSupportedInBrowser;
        }
    };
}
class DisableResponseDecompressionPolicy extends _requestPolicy.BaseRequestPolicy {
    constructor(nextPolicy, options){
        super(nextPolicy, options);
        throw DisbleResponseDecompressionNotSupportedInBrowser;
    }
    async sendRequest(_request) {
        throw DisbleResponseDecompressionNotSupportedInBrowser;
    }
}

},{"./requestPolicy":"kMiVw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6eO6U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a policy that assigns a unique request id to outgoing requests.
 * @param requestIdHeaderName - The name of the header to use when assigning the unique id to the request.
 */ parcelHelpers.export(exports, "generateClientRequestIdPolicy", ()=>generateClientRequestIdPolicy
);
parcelHelpers.export(exports, "GenerateClientRequestIdPolicy", ()=>GenerateClientRequestIdPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _requestPolicy = require("./requestPolicy");
function generateClientRequestIdPolicy(requestIdHeaderName = "x-ms-client-request-id") {
    return {
        create: (nextPolicy, options)=>{
            return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);
        }
    };
}
class GenerateClientRequestIdPolicy extends _requestPolicy.BaseRequestPolicy {
    constructor(nextPolicy, options, _requestIdHeaderName){
        super(nextPolicy, options);
        this._requestIdHeaderName = _requestIdHeaderName;
    }
    sendRequest(request) {
        if (!request.headers.contains(this._requestIdHeaderName)) request.headers.set(this._requestIdHeaderName, request.requestId);
        return this._nextPolicy.sendRequest(request);
    }
}

},{"./requestPolicy":"kMiVw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"79aVo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCachedDefaultHttpClient", ()=>getCachedDefaultHttpClient
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _defaultHttpClient = require("./defaultHttpClient");
let cachedHttpClient;
function getCachedDefaultHttpClient() {
    if (!cachedHttpClient) cachedHttpClient = new _defaultHttpClient.DefaultHttpClient();
    return cachedHttpClient;
}

},{"./defaultHttpClient":"3BG92","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cp8EQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ndJsonPolicy", ()=>ndJsonPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// BaseRequestPolicy has a protected constructor.
/* eslint-disable @typescript-eslint/no-useless-constructor */ var _requestPolicy = require("./requestPolicy");
function ndJsonPolicy() {
    return {
        create: (nextPolicy, options)=>{
            return new NdJsonPolicy(nextPolicy, options);
        }
    };
}
/**
 * NdJsonPolicy that formats a JSON array as newline-delimited JSON
 */ class NdJsonPolicy extends _requestPolicy.BaseRequestPolicy {
    /**
     * Creates an instance of KeepAlivePolicy.
     */ constructor(nextPolicy, options){
        super(nextPolicy, options);
    }
    /**
     * Sends a request.
     */ async sendRequest(request) {
        // There currently isn't a good way to bypass the serializer
        if (typeof request.body === "string" && request.body.startsWith("[")) {
            const body = JSON.parse(request.body);
            if (Array.isArray(body)) request.body = body.map((item)=>JSON.stringify(item) + "\n"
            ).join("");
        }
        return this._nextPolicy.sendRequest(request);
    }
}

},{"./requestPolicy":"kMiVw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5RWWg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDefaultProxySettings", ()=>getDefaultProxySettings
);
parcelHelpers.export(exports, "proxyPolicy", ()=>proxyPolicy
);
parcelHelpers.export(exports, "ProxyPolicy", ()=>ProxyPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _requestPolicy = require("./requestPolicy");
const proxyNotSupportedInBrowser = new Error("ProxyPolicy is not supported in browser environment");
function getDefaultProxySettings(_proxyUrl) {
    return undefined;
}
function proxyPolicy(_proxySettings) {
    return {
        create: (_nextPolicy, _options)=>{
            throw proxyNotSupportedInBrowser;
        }
    };
}
class ProxyPolicy extends _requestPolicy.BaseRequestPolicy {
    constructor(nextPolicy, options){
        super(nextPolicy, options);
        throw proxyNotSupportedInBrowser;
    }
    sendRequest(_request) {
        throw proxyNotSupportedInBrowser;
    }
}

},{"./requestPolicy":"kMiVw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h2Y6R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rpRegistrationPolicy", ()=>rpRegistrationPolicy
);
parcelHelpers.export(exports, "RPRegistrationPolicy", ()=>RPRegistrationPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _utils = require("../util/utils");
var _requestPolicy = require("./requestPolicy");
var _delay = require("../util/delay");
function rpRegistrationPolicy(retryTimeout = 30) {
    return {
        create: (nextPolicy, options)=>{
            return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);
        }
    };
}
class RPRegistrationPolicy extends _requestPolicy.BaseRequestPolicy {
    constructor(nextPolicy, options, _retryTimeout = 30){
        super(nextPolicy, options);
        this._retryTimeout = _retryTimeout;
    }
    sendRequest(request) {
        return this._nextPolicy.sendRequest(request.clone()).then((response)=>registerIfNeeded(this, request, response)
        );
    }
}
function registerIfNeeded(policy, request, response) {
    if (response.status === 409) {
        const rpName = checkRPNotRegisteredError(response.bodyAsText);
        if (rpName) {
            const urlPrefix = extractSubscriptionUrl(request.url);
            return registerRP(policy, urlPrefix, rpName, request)// Autoregistration of ${provider} failed for some reason. We will not return this error
            // instead will return the initial response with 409 status code back to the user.
            // do nothing here as we are returning the original response at the end of this method.
            .catch(()=>false
            ).then((registrationStatus)=>{
                if (registrationStatus) {
                    // Retry the original request. We have to change the x-ms-client-request-id
                    // otherwise Azure endpoint will return the initial 409 (cached) response.
                    request.headers.set("x-ms-client-request-id", _utils.generateUuid());
                    return policy._nextPolicy.sendRequest(request.clone());
                }
                return response;
            });
        }
    }
    return Promise.resolve(response);
}
/**
 * Reuses the headers of the original request and url (if specified).
 * @param originalRequest - The original request
 * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.
 * @returns A new request object with desired headers.
 */ function getRequestEssentials(originalRequest, reuseUrlToo = false) {
    const reqOptions = originalRequest.clone();
    if (reuseUrlToo) reqOptions.url = originalRequest.url;
    // We have to change the x-ms-client-request-id otherwise Azure endpoint
    // will return the initial 409 (cached) response.
    reqOptions.headers.set("x-ms-client-request-id", _utils.generateUuid());
    // Set content-type to application/json
    reqOptions.headers.set("Content-Type", "application/json; charset=utf-8");
    return reqOptions;
}
/**
 * Validates the error code and message associated with 409 response status code. If it matches to that of
 * RP not registered then it returns the name of the RP else returns undefined.
 * @param body - The response body received after making the original request.
 * @returns The name of the RP if condition is satisfied else undefined.
 */ function checkRPNotRegisteredError(body) {
    let result, responseBody;
    if (body) {
        try {
            responseBody = JSON.parse(body);
        } catch (err) {
        // do nothing;
        }
        if (responseBody && responseBody.error && responseBody.error.message && responseBody.error.code && responseBody.error.code === "MissingSubscriptionRegistration") {
            const matchRes = responseBody.error.message.match(/.*'(.*)'/i);
            if (matchRes) result = matchRes.pop();
        }
    }
    return result;
}
/**
 * Extracts the first part of the URL, just after subscription:
 * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/
 * @param url - The original request url
 * @returns The url prefix as explained above.
 */ function extractSubscriptionUrl(url) {
    let result;
    const matchRes = url.match(/.*\/subscriptions\/[a-f0-9-]+\//gi);
    if (matchRes && matchRes[0]) result = matchRes[0];
    else throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);
    return result;
}
/**
 * Registers the given provider.
 * @param policy - The RPRegistrationPolicy this function is being called against.
 * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/
 * @param provider - The provider name to be registered.
 * @param originalRequest - The original request sent by the user that returned a 409 response
 * with a message that the provider is not registered.
 */ async function registerRP(policy, urlPrefix, provider, originalRequest) {
    const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;
    const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;
    const reqOptions = getRequestEssentials(originalRequest);
    reqOptions.method = "POST";
    reqOptions.url = postUrl;
    const response = await policy._nextPolicy.sendRequest(reqOptions);
    if (response.status !== 200) throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);
    return getRegistrationStatus(policy, getUrl, originalRequest);
}
/**
 * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.
 * Polling will happen till the registrationState property of the response body is "Registered".
 * @param policy - The RPRegistrationPolicy this function is being called against.
 * @param url - The request url for polling
 * @param originalRequest - The original request sent by the user that returned a 409 response
 * with a message that the provider is not registered.
 * @returns True if RP Registration is successful.
 */ async function getRegistrationStatus(policy, url, originalRequest) {
    const reqOptions = getRequestEssentials(originalRequest);
    reqOptions.url = url;
    reqOptions.method = "GET";
    const res = await policy._nextPolicy.sendRequest(reqOptions);
    const obj = res.parsedBody;
    if (res.parsedBody && obj.registrationState && obj.registrationState === "Registered") return true;
    else {
        await _delay.delay(policy._retryTimeout * 1000);
        return getRegistrationStatus(policy, url, originalRequest);
    }
}

},{"../util/utils":"9PNR0","./requestPolicy":"kMiVw","../util/delay":"kptxH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aI9O3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.
 * @param authenticationProvider - The authentication provider.
 * @returns An instance of the {@link SigningPolicy}.
 */ parcelHelpers.export(exports, "signingPolicy", ()=>signingPolicy
);
/**
 * A policy that signs outgoing requests by calling to the provided `authenticationProvider`'s `signRequest` method.
 */ parcelHelpers.export(exports, "SigningPolicy", ()=>SigningPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _requestPolicy = require("./requestPolicy");
function signingPolicy(authenticationProvider) {
    return {
        create: (nextPolicy, options)=>{
            return new SigningPolicy(nextPolicy, options, authenticationProvider);
        }
    };
}
class SigningPolicy extends _requestPolicy.BaseRequestPolicy {
    constructor(nextPolicy, options, authenticationProvider){
        super(nextPolicy, options);
        this.authenticationProvider = authenticationProvider;
    }
    signRequest(request) {
        return this.authenticationProvider.signRequest(request);
    }
    sendRequest(request) {
        return this.signRequest(request).then((nextRequest)=>this._nextPolicy.sendRequest(nextRequest)
        );
    }
}

},{"./requestPolicy":"kMiVw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8ojdS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A policy that retries when there's a system error, identified by the codes "ETIMEDOUT", "ESOCKETTIMEDOUT", "ECONNREFUSED", "ECONNRESET" or "ENOENT".
 * @param retryCount - Maximum number of retries.
 * @param retryInterval - The client retry interval, in milliseconds.
 * @param minRetryInterval - The minimum retry interval, in milliseconds.
 * @param maxRetryInterval - The maximum retry interval, in milliseconds.
 * @returns An instance of the {@link SystemErrorRetryPolicy}
 */ parcelHelpers.export(exports, "systemErrorRetryPolicy", ()=>systemErrorRetryPolicy
);
/**
 * A policy that retries when there's a system error, identified by the codes "ETIMEDOUT", "ESOCKETTIMEDOUT", "ECONNREFUSED", "ECONNRESET" or "ENOENT".
 * @param retryCount - The client retry count.
 * @param retryInterval - The client retry interval, in milliseconds.
 * @param minRetryInterval - The minimum retry interval, in milliseconds.
 * @param maxRetryInterval - The maximum retry interval, in milliseconds.
 */ parcelHelpers.export(exports, "SystemErrorRetryPolicy", ()=>SystemErrorRetryPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _requestPolicy = require("./requestPolicy");
var _exponentialBackoffStrategy = require("../util/exponentialBackoffStrategy");
var _delay = require("../util/delay");
function systemErrorRetryPolicy(retryCount, retryInterval, minRetryInterval, maxRetryInterval) {
    return {
        create: (nextPolicy, options)=>{
            return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);
        }
    };
}
class SystemErrorRetryPolicy extends _requestPolicy.BaseRequestPolicy {
    constructor(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval){
        super(nextPolicy, options);
        this.retryCount = _exponentialBackoffStrategy.isNumber(retryCount) ? retryCount : _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_COUNT;
        this.retryInterval = _exponentialBackoffStrategy.isNumber(retryInterval) ? retryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_INTERVAL;
        this.minRetryInterval = _exponentialBackoffStrategy.isNumber(minRetryInterval) ? minRetryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_MIN_RETRY_INTERVAL;
        this.maxRetryInterval = _exponentialBackoffStrategy.isNumber(maxRetryInterval) ? maxRetryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
    }
    sendRequest(request) {
        return this._nextPolicy.sendRequest(request.clone()).catch((error)=>retry(this, request, error.response, error)
        );
    }
}
async function retry(policy, request, operationResponse, err, retryData) {
    retryData = _exponentialBackoffStrategy.updateRetryData(policy, retryData, err);
    function shouldPolicyRetry(_response, error) {
        if (error && error.code && (error.code === "ETIMEDOUT" || error.code === "ESOCKETTIMEDOUT" || error.code === "ECONNREFUSED" || error.code === "ECONNRESET" || error.code === "ENOENT")) return true;
        return false;
    }
    if (_exponentialBackoffStrategy.shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, operationResponse, err)) // If previous operation ended with an error and the policy allows a retry, do that
    try {
        await _delay.delay(retryData.retryInterval);
        return policy._nextPolicy.sendRequest(request.clone());
    } catch (nestedErr) {
        return retry(policy, request, operationResponse, nestedErr, retryData);
    }
    else {
        if (err) // If the operation failed in the end, return all errors instead of just the last one
        return Promise.reject(retryData.error);
        return operationResponse;
    }
}

},{"./requestPolicy":"kMiVw","../util/exponentialBackoffStrategy":"1jp5o","../util/delay":"kptxH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"83jUi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a policy that re-sends the request if the response indicates the request failed because of throttling reasons.
 * For example, if the response contains a `Retry-After` header, it will retry sending the request based on the value of that header.
 *
 * To learn more, please refer to
 * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,
 * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and
 * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors
 * @returns
 */ parcelHelpers.export(exports, "throttlingRetryPolicy", ()=>throttlingRetryPolicy
);
/**
 * Creates a policy that re-sends the request if the response indicates the request failed because of throttling reasons.
 * For example, if the response contains a `Retry-After` header, it will retry sending the request based on the value of that header.
 *
 * To learn more, please refer to
 * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,
 * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and
 * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors
 */ parcelHelpers.export(exports, "ThrottlingRetryPolicy", ()=>ThrottlingRetryPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _requestPolicy = require("./requestPolicy");
var _abortController = require("@azure/abort-controller");
var _constants = require("../util/constants");
var _throttlingRetryStrategy = require("../util/throttlingRetryStrategy");
var _delay = require("../util/delay");
const StatusCodes = _constants.Constants.HttpConstants.StatusCodes;
function throttlingRetryPolicy() {
    return {
        create: (nextPolicy, options)=>{
            return new ThrottlingRetryPolicy(nextPolicy, options);
        }
    };
}
const StandardAbortMessage = "The operation was aborted.";
class ThrottlingRetryPolicy extends _requestPolicy.BaseRequestPolicy {
    constructor(nextPolicy, options, _handleResponse){
        super(nextPolicy, options);
        this.numberOfRetries = 0;
        this._handleResponse = _handleResponse || this._defaultResponseHandler;
    }
    async sendRequest(httpRequest) {
        const response = await this._nextPolicy.sendRequest(httpRequest.clone());
        if (response.status !== StatusCodes.TooManyRequests && response.status !== StatusCodes.ServiceUnavailable) return response;
        else return this._handleResponse(httpRequest, response);
    }
    async _defaultResponseHandler(httpRequest, httpResponse) {
        var _a;
        const retryAfterHeader = httpResponse.headers.get(_constants.Constants.HeaderConstants.RETRY_AFTER);
        if (retryAfterHeader) {
            const delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);
            if (delayInMs) {
                this.numberOfRetries += 1;
                await _delay.delay(delayInMs, undefined, {
                    abortSignal: httpRequest.abortSignal,
                    abortErrorMsg: StandardAbortMessage
                });
                if ((_a = httpRequest.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) throw new _abortController.AbortError(StandardAbortMessage);
                if (this.numberOfRetries < _throttlingRetryStrategy.DEFAULT_CLIENT_MAX_RETRY_COUNT) return this.sendRequest(httpRequest);
                else return this._nextPolicy.sendRequest(httpRequest);
            }
        }
        return httpResponse;
    }
    static parseRetryAfterHeader(headerValue) {
        const retryAfterInSeconds = Number(headerValue);
        if (Number.isNaN(retryAfterInSeconds)) return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);
        else return retryAfterInSeconds * 1000;
    }
    static parseDateRetryAfterHeader(headerValue) {
        try {
            const now = Date.now();
            const date = Date.parse(headerValue);
            const diff = date - now;
            return Number.isNaN(diff) ? undefined : diff;
        } catch (error) {
            return undefined;
        }
    }
}

},{"./requestPolicy":"kMiVw","@azure/abort-controller":"6HB9r","../util/constants":"anVPh","../util/throttlingRetryStrategy":"cKUHE","../util/delay":"kptxH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cKUHE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_CLIENT_MAX_RETRY_COUNT", ()=>DEFAULT_CLIENT_MAX_RETRY_COUNT
);
const DEFAULT_CLIENT_MAX_RETRY_COUNT = 3;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8oKhd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Creates a policy that wraps outgoing requests with a tracing span.
 * @param tracingOptions - Tracing options.
 * @returns An instance of the {@link TracingPolicy} class.
 */ parcelHelpers.export(exports, "tracingPolicy", ()=>tracingPolicy
);
/**
 * A policy that wraps outgoing requests with a tracing span.
 */ parcelHelpers.export(exports, "TracingPolicy", ()=>TracingPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _requestPolicy = require("./requestPolicy");
var _coreTracing = require("@azure/core-tracing");
var _log = require("../log");
const createSpan = _coreTracing.createSpanFunction({
    packagePrefix: "",
    namespace: ""
});
function tracingPolicy(tracingOptions = {
}) {
    return {
        create (nextPolicy, options) {
            return new TracingPolicy(nextPolicy, options, tracingOptions);
        }
    };
}
class TracingPolicy extends _requestPolicy.BaseRequestPolicy {
    constructor(nextPolicy, options, tracingOptions){
        super(nextPolicy, options);
        this.userAgent = tracingOptions.userAgent;
    }
    async sendRequest(request) {
        if (!request.tracingContext) return this._nextPolicy.sendRequest(request);
        const span = this.tryCreateSpan(request);
        if (!span) return this._nextPolicy.sendRequest(request);
        try {
            const response = await this._nextPolicy.sendRequest(request);
            this.tryProcessResponse(span, response);
            return response;
        } catch (err) {
            this.tryProcessError(span, err);
            throw err;
        }
    }
    tryCreateSpan(request) {
        var _a;
        try {
            // Passing spanOptions as part of tracingOptions to maintain compatibility @azure/core-tracing@preview.13 and earlier.
            // We can pass this as a separate parameter once we upgrade to the latest core-tracing.
            const { span  } = createSpan(`HTTP ${request.method}`, {
                tracingOptions: {
                    spanOptions: Object.assign(Object.assign({
                    }, request.spanOptions), {
                        kind: _coreTracing.SpanKind.CLIENT
                    }),
                    tracingContext: request.tracingContext
                }
            });
            // If the span is not recording, don't do any more work.
            if (!span.isRecording()) {
                span.end();
                return undefined;
            }
            const namespaceFromContext = (_a = request.tracingContext) === null || _a === void 0 ? void 0 : _a.getValue(Symbol.for("az.namespace"));
            if (typeof namespaceFromContext === "string") span.setAttribute("az.namespace", namespaceFromContext);
            span.setAttributes({
                "http.method": request.method,
                "http.url": request.url,
                requestId: request.requestId
            });
            if (this.userAgent) span.setAttribute("http.user_agent", this.userAgent);
            // set headers
            const spanContext = span.spanContext();
            const traceParentHeader = _coreTracing.getTraceParentHeader(spanContext);
            if (traceParentHeader && _coreTracing.isSpanContextValid(spanContext)) {
                request.headers.set("traceparent", traceParentHeader);
                const traceState = spanContext.traceState && spanContext.traceState.serialize();
                // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent
                if (traceState) request.headers.set("tracestate", traceState);
            }
            return span;
        } catch (error) {
            _log.logger.warning(`Skipping creating a tracing span due to an error: ${error.message}`);
            return undefined;
        }
    }
    tryProcessError(span, err) {
        try {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: err.message
            });
            if (err.statusCode) span.setAttribute("http.status_code", err.statusCode);
            span.end();
        } catch (error) {
            _log.logger.warning(`Skipping tracing span processing due to an error: ${error.message}`);
        }
    }
    tryProcessResponse(span, response) {
        try {
            span.setAttribute("http.status_code", response.status);
            const serviceRequestId = response.headers.get("x-ms-request-id");
            if (serviceRequestId) span.setAttribute("serviceRequestId", serviceRequestId);
            span.setStatus({
                code: _coreTracing.SpanStatusCode.OK
            });
            span.end();
        } catch (error) {
            _log.logger.warning(`Skipping tracing span processing due to an error: ${error.message}`);
        }
    }
}

},{"./requestPolicy":"kMiVw","@azure/core-tracing":"7R1NC","../log":"8d4bo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7R1NC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Tracers and wrappers
parcelHelpers.export(exports, "createSpanFunction", ()=>_createSpan.createSpanFunction
);
// Shared interfaces
parcelHelpers.export(exports, "context", ()=>_interfaces.context
);
parcelHelpers.export(exports, "getSpan", ()=>_interfaces.getSpan
);
parcelHelpers.export(exports, "getSpanContext", ()=>_interfaces.getSpanContext
);
parcelHelpers.export(exports, "getTracer", ()=>_interfaces.getTracer
);
parcelHelpers.export(exports, "isSpanContextValid", ()=>_interfaces.isSpanContextValid
);
parcelHelpers.export(exports, "setSpan", ()=>_interfaces.setSpan
);
parcelHelpers.export(exports, "setSpanContext", ()=>_interfaces.setSpanContext
);
parcelHelpers.export(exports, "SpanKind", ()=>_interfaces.SpanKind
);
parcelHelpers.export(exports, "SpanStatusCode", ()=>_interfaces.SpanStatusCode
);
// Utilities
parcelHelpers.export(exports, "extractSpanContextFromTraceParentHeader", ()=>_traceParentHeader.extractSpanContextFromTraceParentHeader
);
parcelHelpers.export(exports, "getTraceParentHeader", ()=>_traceParentHeader.getTraceParentHeader
);
var _createSpan = require("./createSpan");
var _interfaces = require("./interfaces");
var _traceParentHeader = require("./utils/traceParentHeader");

},{"./createSpan":"lLt8m","./interfaces":"ic9Ok","./utils/traceParentHeader":"g7IQJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lLt8m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isTracingDisabled", ()=>isTracingDisabled
);
/**
 * Creates a function that can be used to create spans using the global tracer.
 *
 * Usage:
 *
 * ```typescript
 * // once
 * const createSpan = createSpanFunction({ packagePrefix: "Azure.Data.AppConfiguration", namespace: "Microsoft.AppConfiguration" });
 *
 * // in each operation
 * const span = createSpan("deleteConfigurationSetting", operationOptions);
 *    // code...
 * span.end();
 * ```
 *
 * @hidden
 * @param args - allows configuration of the prefix for each span as well as the az.namespace field.
 */ parcelHelpers.export(exports, "createSpanFunction", ()=>createSpanFunction
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _interfaces = require("./interfaces");
var _api = require("@opentelemetry/api");
var process = require("process");
function isTracingDisabled() {
    var _a;
    if (typeof process === "undefined") // not supported in browser for now without polyfills
    return false;
    const azureTracingDisabledValue = (_a = undefined, _a === void 0) ? void 0 : _a.toLowerCase();
    if (azureTracingDisabledValue === "false" || azureTracingDisabledValue === "0") return false;
    return Boolean(azureTracingDisabledValue);
}
function createSpanFunction(args) {
    return function(operationName, operationOptions) {
        const tracer = _interfaces.getTracer();
        const tracingOptions = (operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) || {
        };
        const spanOptions = Object.assign({
            kind: _interfaces.SpanKind.INTERNAL
        }, tracingOptions.spanOptions);
        const spanName = args.packagePrefix ? `${args.packagePrefix}.${operationName}` : operationName;
        let span;
        if (isTracingDisabled()) span = _api.trace.wrapSpanContext(_api.INVALID_SPAN_CONTEXT);
        else span = tracer.startSpan(spanName, spanOptions, tracingOptions.tracingContext);
        if (args.namespace) span.setAttribute("az.namespace", args.namespace);
        let newSpanOptions = tracingOptions.spanOptions || {
        };
        if (span.isRecording() && args.namespace) newSpanOptions = Object.assign(Object.assign({
        }, tracingOptions.spanOptions), {
            attributes: Object.assign(Object.assign({
            }, spanOptions.attributes), {
                "az.namespace": args.namespace
            })
        });
        const newTracingOptions = Object.assign(Object.assign({
        }, tracingOptions), {
            spanOptions: newSpanOptions,
            tracingContext: _interfaces.setSpan(tracingOptions.tracingContext || _interfaces.context.active(), span)
        });
        const newOperationOptions = Object.assign(Object.assign({
        }, operationOptions), {
            tracingOptions: newTracingOptions
        });
        return {
            span,
            updatedOptions: newOperationOptions
        };
    };
}

},{"./interfaces":"ic9Ok","@opentelemetry/api":"6AC4z","process":"d5jf4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ic9Ok":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SpanKind", ()=>SpanKind
);
/**
 * Return the span if one exists
 *
 * @param context - context to get span from
 */ parcelHelpers.export(exports, "getSpan", ()=>getSpan
);
/**
 * Set the span on a context
 *
 * @param context - context to use as parent
 * @param span - span to set active
 */ parcelHelpers.export(exports, "setSpan", ()=>setSpan
);
/**
 * Wrap span context in a NoopSpan and set as span in a new
 * context
 *
 * @param context - context to set active span on
 * @param spanContext - span context to be wrapped
 */ parcelHelpers.export(exports, "setSpanContext", ()=>setSpanContext
);
/**
 * Get the span context of the span if it exists.
 *
 * @param context - context to get values from
 */ parcelHelpers.export(exports, "getSpanContext", ()=>getSpanContext
);
/**
 * Returns true of the given {@link SpanContext} is valid.
 * A valid {@link SpanContext} is one which has a valid trace ID and span ID as per the spec.
 *
 * @param context - the {@link SpanContext} to validate.
 *
 * @returns true if the {@link SpanContext} is valid, false otherwise.
 */ parcelHelpers.export(exports, "isSpanContextValid", ()=>isSpanContextValid
);
parcelHelpers.export(exports, "getTracer", ()=>getTracer
);
parcelHelpers.export(exports, "context", ()=>context
);
parcelHelpers.export(exports, "SpanStatusCode", ()=>SpanStatusCode
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _api = require("@opentelemetry/api");
var SpanKind;
(function(SpanKind1) {
    /** Default value. Indicates that the span is used internally. */ SpanKind1[SpanKind1["INTERNAL"] = 0] = "INTERNAL";
    /**
     * Indicates that the span covers server-side handling of an RPC or other
     * remote request.
     */ SpanKind1[SpanKind1["SERVER"] = 1] = "SERVER";
    /**
     * Indicates that the span covers the client-side wrapper around an RPC or
     * other remote request.
     */ SpanKind1[SpanKind1["CLIENT"] = 2] = "CLIENT";
    /**
     * Indicates that the span describes producer sending a message to a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */ SpanKind1[SpanKind1["PRODUCER"] = 3] = "PRODUCER";
    /**
     * Indicates that the span describes consumer receiving a message from a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */ SpanKind1[SpanKind1["CONSUMER"] = 4] = "CONSUMER";
})(SpanKind || (SpanKind = {
}));
function getSpan(context1) {
    return _api.trace.getSpan(context1);
}
function setSpan(context2, span) {
    return _api.trace.setSpan(context2, span);
}
function setSpanContext(context3, spanContext) {
    return _api.trace.setSpanContext(context3, spanContext);
}
function getSpanContext(context4) {
    return _api.trace.getSpanContext(context4);
}
function isSpanContextValid(context5) {
    return _api.trace.isSpanContextValid(context5);
}
function getTracer(name, version) {
    return _api.trace.getTracer(name || "azure/core-tracing", version);
}
const context = _api.context;
var SpanStatusCode;
(function(SpanStatusCode1) {
    /**
     * The default status.
     */ SpanStatusCode1[SpanStatusCode1["UNSET"] = 0] = "UNSET";
    /**
     * The operation has been validated by an Application developer or
     * Operator to have completed successfully.
     */ SpanStatusCode1[SpanStatusCode1["OK"] = 1] = "OK";
    /**
     * The operation contains an error.
     */ SpanStatusCode1[SpanStatusCode1["ERROR"] = 2] = "ERROR";
})(SpanStatusCode || (SpanStatusCode = {
}));

},{"@opentelemetry/api":"6AC4z","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6AC4z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "baggageEntryMetadataFromString", ()=>_utils.baggageEntryMetadataFromString
);
parcelHelpers.export(exports, "createTraceState", ()=>_utils1.createTraceState
);
parcelHelpers.export(exports, "isSpanContextValid", ()=>_spancontextUtils.isSpanContextValid
);
parcelHelpers.export(exports, "isValidTraceId", ()=>_spancontextUtils.isValidTraceId
);
parcelHelpers.export(exports, "isValidSpanId", ()=>_spancontextUtils.isValidSpanId
);
parcelHelpers.export(exports, "INVALID_SPANID", ()=>_invalidSpanConstants.INVALID_SPANID
);
parcelHelpers.export(exports, "INVALID_TRACEID", ()=>_invalidSpanConstants.INVALID_TRACEID
);
parcelHelpers.export(exports, "INVALID_SPAN_CONTEXT", ()=>_invalidSpanConstants.INVALID_SPAN_CONTEXT
);
parcelHelpers.export(exports, "context", ()=>context
);
parcelHelpers.export(exports, "trace", ()=>trace
);
parcelHelpers.export(exports, "propagation", ()=>propagation
);
parcelHelpers.export(exports, "diag", ()=>diag
);
var _context = require("./api/context");
var _trace = require("./api/trace");
var _propagation = require("./api/propagation");
var _diag = require("./api/diag");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _types = require("./baggage/types");
parcelHelpers.exportAll(_types, exports);
var _utils = require("./baggage/utils");
var _exception = require("./common/Exception");
parcelHelpers.exportAll(_exception, exports);
var _time = require("./common/Time");
parcelHelpers.exportAll(_time, exports);
var _attributes = require("./common/Attributes");
parcelHelpers.exportAll(_attributes, exports);
var _diag1 = require("./diag");
parcelHelpers.exportAll(_diag1, exports);
var _textMapPropagator = require("./propagation/TextMapPropagator");
parcelHelpers.exportAll(_textMapPropagator, exports);
var _attributes1 = require("./trace/attributes");
parcelHelpers.exportAll(_attributes1, exports);
var _link = require("./trace/link");
parcelHelpers.exportAll(_link, exports);
var _proxyTracer = require("./trace/ProxyTracer");
parcelHelpers.exportAll(_proxyTracer, exports);
var _proxyTracerProvider = require("./trace/ProxyTracerProvider");
parcelHelpers.exportAll(_proxyTracerProvider, exports);
var _sampler = require("./trace/Sampler");
parcelHelpers.exportAll(_sampler, exports);
var _samplingResult = require("./trace/SamplingResult");
parcelHelpers.exportAll(_samplingResult, exports);
var _spanContext = require("./trace/span_context");
parcelHelpers.exportAll(_spanContext, exports);
var _spanKind = require("./trace/span_kind");
parcelHelpers.exportAll(_spanKind, exports);
var _span = require("./trace/span");
parcelHelpers.exportAll(_span, exports);
var _spanOptions = require("./trace/SpanOptions");
parcelHelpers.exportAll(_spanOptions, exports);
var _status = require("./trace/status");
parcelHelpers.exportAll(_status, exports);
var _traceFlags = require("./trace/trace_flags");
parcelHelpers.exportAll(_traceFlags, exports);
var _traceState = require("./trace/trace_state");
parcelHelpers.exportAll(_traceState, exports);
var _utils1 = require("./trace/internal/utils");
var _tracerProvider = require("./trace/tracer_provider");
parcelHelpers.exportAll(_tracerProvider, exports);
var _tracer = require("./trace/tracer");
parcelHelpers.exportAll(_tracer, exports);
var _tracerOptions = require("./trace/tracer_options");
parcelHelpers.exportAll(_tracerOptions, exports);
var _spancontextUtils = require("./trace/spancontext-utils");
var _invalidSpanConstants = require("./trace/invalid-span-constants");
var _context1 = require("./context/context");
parcelHelpers.exportAll(_context1, exports);
var _types1 = require("./context/types");
parcelHelpers.exportAll(_types1, exports);
var context = _context.ContextAPI.getInstance();
var trace = _trace.TraceAPI.getInstance();
var propagation = _propagation.PropagationAPI.getInstance();
var diag = _diag.DiagAPI.instance();
exports.default = {
    trace: trace,
    context: context,
    propagation: propagation,
    diag: diag
};

},{"./api/context":"1ZQ7h","./api/trace":"9U6uF","./api/propagation":"9PDZ8","./api/diag":"gZAmK","./baggage/types":"f2zck","./baggage/utils":"1FtTJ","./common/Exception":"2ca19","./common/Time":"ijv0S","./common/Attributes":"atRyv","./diag":"dfWAH","./propagation/TextMapPropagator":"fbpGl","./trace/attributes":"jS7z1","./trace/link":"8a8Ao","./trace/ProxyTracer":"4RJSP","./trace/ProxyTracerProvider":"5OsDv","./trace/Sampler":"kOtOq","./trace/SamplingResult":"9hHpb","./trace/span_context":"8kOz3","./trace/span_kind":"8JdQL","./trace/span":"6dsX7","./trace/SpanOptions":"aZc5i","./trace/status":"caBJ1","./trace/trace_flags":"58Fpe","./trace/trace_state":"7fKnu","./trace/internal/utils":"43yZb","./trace/tracer_provider":"dFDcb","./trace/tracer":"4f6Wy","./trace/tracer_options":"7BFAK","./trace/spancontext-utils":"g40FB","./trace/invalid-span-constants":"9v7Cm","./context/context":"8Hj8X","./context/types":"BMV1s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ZQ7h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ContextAPI", ()=>ContextAPI
);
var _noopContextManager = require("../context/NoopContextManager");
var _globalUtils = require("../internal/global-utils");
var _diag = require("./diag");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var __spreadArray = undefined && undefined.__spreadArray || function(to, from) {
    for(var i = 0, il = from.length, j = to.length; i < il; i++, j++)to[j] = from[i];
    return to;
};
var API_NAME = 'context';
var NOOP_CONTEXT_MANAGER = new _noopContextManager.NoopContextManager();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Context API
 */ var ContextAPI = function() {
    /** Empty private constructor prevents end users from constructing a new instance of the API */ function ContextAPI1() {
    }
    /** Get the singleton instance of the Context API */ ContextAPI1.getInstance = function() {
        if (!this._instance) this._instance = new ContextAPI1();
        return this._instance;
    };
    /**
     * Set the current context manager.
     *
     * @returns true if the context manager was successfully registered, else false
     */ ContextAPI1.prototype.setGlobalContextManager = function(contextManager) {
        return _globalUtils.registerGlobal(API_NAME, contextManager, _diag.DiagAPI.instance());
    };
    /**
     * Get the currently active context
     */ ContextAPI1.prototype.active = function() {
        return this._getContextManager().active();
    };
    /**
     * Execute a function with an active context
     *
     * @param context context to be active during function execution
     * @param fn function to execute in a context
     * @param thisArg optional receiver to be used for calling fn
     * @param args optional arguments forwarded to fn
     */ ContextAPI1.prototype.with = function(context, fn, thisArg) {
        var _a;
        var args = [];
        for(var _i = 3; _i < arguments.length; _i++)args[_i - 3] = arguments[_i];
        return (_a = this._getContextManager()).with.apply(_a, __spreadArray([
            context,
            fn,
            thisArg
        ], args));
    };
    /**
     * Bind a context to a target function or event emitter
     *
     * @param context context to bind to the event emitter or function. Defaults to the currently active context
     * @param target function or event emitter to bind
     */ ContextAPI1.prototype.bind = function(context, target) {
        return this._getContextManager().bind(context, target);
    };
    ContextAPI1.prototype._getContextManager = function() {
        return _globalUtils.getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;
    };
    /** Disable and remove the global context manager */ ContextAPI1.prototype.disable = function() {
        this._getContextManager().disable();
        _globalUtils.unregisterGlobal(API_NAME, _diag.DiagAPI.instance());
    };
    return ContextAPI1;
}();

},{"../context/NoopContextManager":"gHU7f","../internal/global-utils":"h4XAN","./diag":"gZAmK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gHU7f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NoopContextManager", ()=>NoopContextManager
);
var _context = require("./context");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var __spreadArray = undefined && undefined.__spreadArray || function(to, from) {
    for(var i = 0, il = from.length, j = to.length; i < il; i++, j++)to[j] = from[i];
    return to;
};
var NoopContextManager = function() {
    function NoopContextManager1() {
    }
    NoopContextManager1.prototype.active = function() {
        return _context.ROOT_CONTEXT;
    };
    NoopContextManager1.prototype.with = function(_context, fn, thisArg) {
        var args = [];
        for(var _i = 3; _i < arguments.length; _i++)args[_i - 3] = arguments[_i];
        return fn.call.apply(fn, __spreadArray([
            thisArg
        ], args));
    };
    NoopContextManager1.prototype.bind = function(_context, target) {
        return target;
    };
    NoopContextManager1.prototype.enable = function() {
        return this;
    };
    NoopContextManager1.prototype.disable = function() {
        return this;
    };
    return NoopContextManager1;
}();

},{"./context":"8Hj8X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Hj8X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Get a key to uniquely identify a context value */ parcelHelpers.export(exports, "createContextKey", ()=>createContextKey
);
parcelHelpers.export(exports, "ROOT_CONTEXT", ()=>ROOT_CONTEXT
);
function createContextKey(description) {
    // The specification states that for the same input, multiple calls should
    // return different keys. Due to the nature of the JS dependency management
    // system, this creates problems where multiple versions of some package
    // could hold different keys for the same property.
    //
    // Therefore, we use Symbol.for which returns the same key for the same input.
    return Symbol.for(description);
}
var BaseContext = function() {
    /**
     * Construct a new context which inherits values from an optional parent context.
     *
     * @param parentContext a context from which to inherit values
     */ function BaseContext1(parentContext) {
        // for minification
        var self = this;
        self._currentContext = parentContext ? new Map(parentContext) : new Map();
        self.getValue = function(key) {
            return self._currentContext.get(key);
        };
        self.setValue = function(key, value) {
            var context = new BaseContext1(self._currentContext);
            context._currentContext.set(key, value);
            return context;
        };
        self.deleteValue = function(key) {
            var context = new BaseContext1(self._currentContext);
            context._currentContext.delete(key);
            return context;
        };
    }
    return BaseContext1;
}();
var ROOT_CONTEXT = new BaseContext();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h4XAN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "registerGlobal", ()=>registerGlobal
);
parcelHelpers.export(exports, "getGlobal", ()=>getGlobal
);
parcelHelpers.export(exports, "unregisterGlobal", ()=>unregisterGlobal
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _platform = require("../platform");
var _version = require("../version");
var _semver = require("./semver");
var major = _version.VERSION.split('.')[0];
var GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for("opentelemetry.js.api." + major);
var _global = _platform._globalThis;
function registerGlobal(type, instance, diag, allowOverride) {
    var _a;
    if (allowOverride === void 0) allowOverride = false;
    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {
        version: _version.VERSION
    };
    if (!allowOverride && api[type]) {
        // already registered an API of this type
        var err = new Error("@opentelemetry/api: Attempted duplicate registration of API: " + type);
        diag.error(err.stack || err.message);
        return false;
    }
    if (api.version !== _version.VERSION) {
        // All registered APIs must be of the same version exactly
        var err = new Error('@opentelemetry/api: All API registration versions must match');
        diag.error(err.stack || err.message);
        return false;
    }
    api[type] = instance;
    diag.debug("@opentelemetry/api: Registered a global for " + type + " v" + _version.VERSION + ".");
    return true;
}
function getGlobal(type) {
    var _a, _b;
    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;
    if (!globalVersion || !_semver.isCompatible(globalVersion)) return;
    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];
}
function unregisterGlobal(type, diag) {
    diag.debug("@opentelemetry/api: Unregistering a global for " + type + " v" + _version.VERSION + ".");
    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];
    if (api) delete api[type];
}

},{"../platform":"dO2ZQ","../version":"k412A","./semver":"9IXna","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dO2ZQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _globalThis = require("./globalThis");
parcelHelpers.exportAll(_globalThis, exports);

},{"./globalThis":"dRquK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dRquK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_globalThis", ()=>_globalThis
);
var global = arguments[3];
var _globalThis = typeof globalThis === 'object' ? globalThis : typeof self === 'object' ? self : typeof window === 'object' ? window : typeof global === 'object' ? global : {
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k412A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VERSION", ()=>VERSION
);
var VERSION = '1.1.0';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9IXna":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a function to test an API version to see if it is compatible with the provided ownVersion.
 *
 * The returned function has the following semantics:
 * - Exact match is always compatible
 * - Major versions must match exactly
 *    - 1.x package cannot use global 2.x package
 *    - 2.x package cannot use global 1.x package
 * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API
 *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects
 *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3
 * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor
 * - Patch and build tag differences are not considered at this time
 *
 * @param ownVersion version which should be checked against
 */ parcelHelpers.export(exports, "_makeCompatibilityCheck", ()=>_makeCompatibilityCheck
);
parcelHelpers.export(exports, "isCompatible", ()=>isCompatible
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _version = require("../version");
var re = /^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;
function _makeCompatibilityCheck(ownVersion) {
    var acceptedVersions = new Set([
        ownVersion
    ]);
    var rejectedVersions = new Set();
    var myVersionMatch = ownVersion.match(re);
    if (!myVersionMatch) // we cannot guarantee compatibility so we always return noop
    return function() {
        return false;
    };
    var ownVersionParsed = {
        major: +myVersionMatch[1],
        minor: +myVersionMatch[2],
        patch: +myVersionMatch[3],
        prerelease: myVersionMatch[4]
    };
    // if ownVersion has a prerelease tag, versions must match exactly
    if (ownVersionParsed.prerelease != null) return function isExactmatch(globalVersion) {
        return globalVersion === ownVersion;
    };
    function _reject(v) {
        rejectedVersions.add(v);
        return false;
    }
    function _accept(v) {
        acceptedVersions.add(v);
        return true;
    }
    return function isCompatible(globalVersion) {
        if (acceptedVersions.has(globalVersion)) return true;
        if (rejectedVersions.has(globalVersion)) return false;
        var globalVersionMatch = globalVersion.match(re);
        if (!globalVersionMatch) // cannot parse other version
        // we cannot guarantee compatibility so we always noop
        return _reject(globalVersion);
        var globalVersionParsed = {
            major: +globalVersionMatch[1],
            minor: +globalVersionMatch[2],
            patch: +globalVersionMatch[3],
            prerelease: globalVersionMatch[4]
        };
        // if globalVersion has a prerelease tag, versions must match exactly
        if (globalVersionParsed.prerelease != null) return _reject(globalVersion);
        // major versions must match
        if (ownVersionParsed.major !== globalVersionParsed.major) return _reject(globalVersion);
        if (ownVersionParsed.major === 0) {
            if (ownVersionParsed.minor === globalVersionParsed.minor && ownVersionParsed.patch <= globalVersionParsed.patch) return _accept(globalVersion);
            return _reject(globalVersion);
        }
        if (ownVersionParsed.minor <= globalVersionParsed.minor) return _accept(globalVersion);
        return _reject(globalVersion);
    };
}
var isCompatible = _makeCompatibilityCheck(_version.VERSION);

},{"../version":"k412A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gZAmK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DiagAPI", ()=>DiagAPI
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _componentLogger = require("../diag/ComponentLogger");
var _logLevelLogger = require("../diag/internal/logLevelLogger");
var _types = require("../diag/types");
var _globalUtils = require("../internal/global-utils");
var API_NAME = 'diag';
/**
 * Singleton object which represents the entry point to the OpenTelemetry internal
 * diagnostic API
 */ var DiagAPI = function() {
    /**
     * Private internal constructor
     * @private
     */ function DiagAPI1() {
        function _logProxy(funcName) {
            return function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                var logger = _globalUtils.getGlobal('diag');
                // shortcut if logger not set
                if (!logger) return;
                return logger[funcName].apply(logger, args);
            };
        }
        // Using self local variable for minification purposes as 'this' cannot be minified
        var self = this;
        // DiagAPI specific functions
        self.setLogger = function(logger, logLevel) {
            var _a, _b;
            if (logLevel === void 0) logLevel = _types.DiagLogLevel.INFO;
            if (logger === self) {
                // There isn't much we can do here.
                // Logging to the console might break the user application.
                // Try to log to self. If a logger was previously registered it will receive the log.
                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');
                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);
                return false;
            }
            var oldLogger = _globalUtils.getGlobal('diag');
            var newLogger = _logLevelLogger.createLogLevelDiagLogger(logLevel, logger);
            // There already is an logger registered. We'll let it know before overwriting it.
            if (oldLogger) {
                var stack = (_b = new Error().stack) !== null && _b !== void 0 ? _b : '<failed to generate stacktrace>';
                oldLogger.warn("Current logger will be overwritten from " + stack);
                newLogger.warn("Current logger will overwrite one already registered from " + stack);
            }
            return _globalUtils.registerGlobal('diag', newLogger, self, true);
        };
        self.disable = function() {
            _globalUtils.unregisterGlobal(API_NAME, self);
        };
        self.createComponentLogger = function(options) {
            return new _componentLogger.DiagComponentLogger(options);
        };
        self.verbose = _logProxy('verbose');
        self.debug = _logProxy('debug');
        self.info = _logProxy('info');
        self.warn = _logProxy('warn');
        self.error = _logProxy('error');
    }
    /** Get the singleton instance of the DiagAPI API */ DiagAPI1.instance = function() {
        if (!this._instance) this._instance = new DiagAPI1();
        return this._instance;
    };
    return DiagAPI1;
}();

},{"../diag/ComponentLogger":"3nsjJ","../diag/internal/logLevelLogger":"d3Qu4","../diag/types":"f917i","../internal/global-utils":"h4XAN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3nsjJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DiagComponentLogger", ()=>DiagComponentLogger
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _globalUtils = require("../internal/global-utils");
/**
 * Component Logger which is meant to be used as part of any component which
 * will add automatically additional namespace in front of the log message.
 * It will then forward all message to global diag logger
 * @example
 * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });
 * cLogger.debug('test');
 * // @opentelemetry/instrumentation-http test
 */ var DiagComponentLogger = function() {
    function DiagComponentLogger1(props) {
        this._namespace = props.namespace || 'DiagComponentLogger';
    }
    DiagComponentLogger1.prototype.debug = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        return logProxy('debug', this._namespace, args);
    };
    DiagComponentLogger1.prototype.error = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        return logProxy('error', this._namespace, args);
    };
    DiagComponentLogger1.prototype.info = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        return logProxy('info', this._namespace, args);
    };
    DiagComponentLogger1.prototype.warn = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        return logProxy('warn', this._namespace, args);
    };
    DiagComponentLogger1.prototype.verbose = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        return logProxy('verbose', this._namespace, args);
    };
    return DiagComponentLogger1;
}();
function logProxy(funcName, namespace, args) {
    var logger = _globalUtils.getGlobal('diag');
    // shortcut if logger not set
    if (!logger) return;
    args.unshift(namespace);
    return logger[funcName].apply(logger, args);
}

},{"../internal/global-utils":"h4XAN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d3Qu4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLogLevelDiagLogger", ()=>createLogLevelDiagLogger
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _types = require("../types");
function createLogLevelDiagLogger(maxLevel, logger) {
    if (maxLevel < _types.DiagLogLevel.NONE) maxLevel = _types.DiagLogLevel.NONE;
    else if (maxLevel > _types.DiagLogLevel.ALL) maxLevel = _types.DiagLogLevel.ALL;
    // In case the logger is null or undefined
    logger = logger || {
    };
    function _filterFunc(funcName, theLevel) {
        var theFunc = logger[funcName];
        if (typeof theFunc === 'function' && maxLevel >= theLevel) return theFunc.bind(logger);
        return function() {
        };
    }
    return {
        error: _filterFunc('error', _types.DiagLogLevel.ERROR),
        warn: _filterFunc('warn', _types.DiagLogLevel.WARN),
        info: _filterFunc('info', _types.DiagLogLevel.INFO),
        debug: _filterFunc('debug', _types.DiagLogLevel.DEBUG),
        verbose: _filterFunc('verbose', _types.DiagLogLevel.VERBOSE)
    };
}

},{"../types":"f917i","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f917i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DiagLogLevel", ()=>DiagLogLevel
);
var DiagLogLevel;
(function(DiagLogLevel1) {
    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */ DiagLogLevel1[DiagLogLevel1["NONE"] = 0] = "NONE";
    /** Identifies an error scenario */ DiagLogLevel1[DiagLogLevel1["ERROR"] = 30] = "ERROR";
    /** Identifies a warning scenario */ DiagLogLevel1[DiagLogLevel1["WARN"] = 50] = "WARN";
    /** General informational log message */ DiagLogLevel1[DiagLogLevel1["INFO"] = 60] = "INFO";
    /** General debug log message */ DiagLogLevel1[DiagLogLevel1["DEBUG"] = 70] = "DEBUG";
    /**
     * Detailed trace level logging should only be used for development, should only be set
     * in a development environment.
     */ DiagLogLevel1[DiagLogLevel1["VERBOSE"] = 80] = "VERBOSE";
    /** Used to set the logging level to include all logging */ DiagLogLevel1[DiagLogLevel1["ALL"] = 9999] = "ALL";
})(DiagLogLevel || (DiagLogLevel = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9U6uF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TraceAPI", ()=>TraceAPI
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _globalUtils = require("../internal/global-utils");
var _proxyTracerProvider = require("../trace/ProxyTracerProvider");
var _spancontextUtils = require("../trace/spancontext-utils");
var _contextUtils = require("../trace/context-utils");
var _diag = require("./diag");
var API_NAME = 'trace';
/**
 * Singleton object which represents the entry point to the OpenTelemetry Tracing API
 */ var TraceAPI = function() {
    /** Empty private constructor prevents end users from constructing a new instance of the API */ function TraceAPI1() {
        this._proxyTracerProvider = new _proxyTracerProvider.ProxyTracerProvider();
        this.wrapSpanContext = _spancontextUtils.wrapSpanContext;
        this.isSpanContextValid = _spancontextUtils.isSpanContextValid;
        this.deleteSpan = _contextUtils.deleteSpan;
        this.getSpan = _contextUtils.getSpan;
        this.getSpanContext = _contextUtils.getSpanContext;
        this.setSpan = _contextUtils.setSpan;
        this.setSpanContext = _contextUtils.setSpanContext;
    }
    /** Get the singleton instance of the Trace API */ TraceAPI1.getInstance = function() {
        if (!this._instance) this._instance = new TraceAPI1();
        return this._instance;
    };
    /**
     * Set the current global tracer.
     *
     * @returns true if the tracer provider was successfully registered, else false
     */ TraceAPI1.prototype.setGlobalTracerProvider = function(provider) {
        var success = _globalUtils.registerGlobal(API_NAME, this._proxyTracerProvider, _diag.DiagAPI.instance());
        if (success) this._proxyTracerProvider.setDelegate(provider);
        return success;
    };
    /**
     * Returns the global tracer provider.
     */ TraceAPI1.prototype.getTracerProvider = function() {
        return _globalUtils.getGlobal(API_NAME) || this._proxyTracerProvider;
    };
    /**
     * Returns a tracer from the global tracer provider.
     */ TraceAPI1.prototype.getTracer = function(name, version) {
        return this.getTracerProvider().getTracer(name, version);
    };
    /** Remove the global tracer provider */ TraceAPI1.prototype.disable = function() {
        _globalUtils.unregisterGlobal(API_NAME, _diag.DiagAPI.instance());
        this._proxyTracerProvider = new _proxyTracerProvider.ProxyTracerProvider();
    };
    return TraceAPI1;
}();

},{"../internal/global-utils":"h4XAN","../trace/ProxyTracerProvider":"5OsDv","../trace/spancontext-utils":"g40FB","../trace/context-utils":"c8keb","./diag":"gZAmK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5OsDv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProxyTracerProvider", ()=>ProxyTracerProvider
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _proxyTracer = require("./ProxyTracer");
var _noopTracerProvider = require("./NoopTracerProvider");
var NOOP_TRACER_PROVIDER = new _noopTracerProvider.NoopTracerProvider();
/**
 * Tracer provider which provides {@link ProxyTracer}s.
 *
 * Before a delegate is set, tracers provided are NoOp.
 *   When a delegate is set, traces are provided from the delegate.
 *   When a delegate is set after tracers have already been provided,
 *   all tracers already provided will use the provided delegate implementation.
 */ var ProxyTracerProvider = function() {
    function ProxyTracerProvider1() {
    }
    /**
     * Get a {@link ProxyTracer}
     */ ProxyTracerProvider1.prototype.getTracer = function(name, version, options) {
        var _a;
        return (_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new _proxyTracer.ProxyTracer(this, name, version, options);
    };
    ProxyTracerProvider1.prototype.getDelegate = function() {
        var _a;
        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;
    };
    /**
     * Set the delegate tracer provider
     */ ProxyTracerProvider1.prototype.setDelegate = function(delegate) {
        this._delegate = delegate;
    };
    ProxyTracerProvider1.prototype.getDelegateTracer = function(name, version, options) {
        var _a;
        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);
    };
    return ProxyTracerProvider1;
}();

},{"./ProxyTracer":"4RJSP","./NoopTracerProvider":"j8CJP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4RJSP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProxyTracer", ()=>ProxyTracer
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _noopTracer = require("./NoopTracer");
var NOOP_TRACER = new _noopTracer.NoopTracer();
/**
 * Proxy tracer provided by the proxy tracer provider
 */ var ProxyTracer = function() {
    function ProxyTracer1(_provider, name, version, options) {
        this._provider = _provider;
        this.name = name;
        this.version = version;
        this.options = options;
    }
    ProxyTracer1.prototype.startSpan = function(name, options, context) {
        return this._getTracer().startSpan(name, options, context);
    };
    ProxyTracer1.prototype.startActiveSpan = function(_name, _options, _context, _fn) {
        var tracer = this._getTracer();
        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);
    };
    /**
     * Try to get a tracer from the proxy tracer provider.
     * If the proxy tracer provider has no delegate, return a noop tracer.
     */ ProxyTracer1.prototype._getTracer = function() {
        if (this._delegate) return this._delegate;
        var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);
        if (!tracer) return NOOP_TRACER;
        this._delegate = tracer;
        return this._delegate;
    };
    return ProxyTracer1;
}();

},{"./NoopTracer":"ciEOJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ciEOJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NoopTracer", ()=>NoopTracer
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _context = require("../api/context");
var _contextUtils = require("../trace/context-utils");
var _nonRecordingSpan = require("./NonRecordingSpan");
var _spancontextUtils = require("./spancontext-utils");
var context = _context.ContextAPI.getInstance();
/**
 * No-op implementations of {@link Tracer}.
 */ var NoopTracer = function() {
    function NoopTracer1() {
    }
    // startSpan starts a noop span.
    NoopTracer1.prototype.startSpan = function(name, options, context1) {
        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);
        if (root) return new _nonRecordingSpan.NonRecordingSpan();
        var parentFromContext = context1 && _contextUtils.getSpanContext(context1);
        if (isSpanContext(parentFromContext) && _spancontextUtils.isSpanContextValid(parentFromContext)) return new _nonRecordingSpan.NonRecordingSpan(parentFromContext);
        else return new _nonRecordingSpan.NonRecordingSpan();
    };
    NoopTracer1.prototype.startActiveSpan = function(name, arg2, arg3, arg4) {
        var opts;
        var ctx;
        var fn;
        if (arguments.length < 2) return;
        else if (arguments.length === 2) fn = arg2;
        else if (arguments.length === 3) {
            opts = arg2;
            fn = arg3;
        } else {
            opts = arg2;
            ctx = arg3;
            fn = arg4;
        }
        var parentContext = ctx !== null && ctx !== void 0 ? ctx : context.active();
        var span = this.startSpan(name, opts, parentContext);
        var contextWithSpanSet = _contextUtils.setSpan(parentContext, span);
        return context.with(contextWithSpanSet, fn, undefined, span);
    };
    return NoopTracer1;
}();
function isSpanContext(spanContext) {
    return typeof spanContext === 'object' && typeof spanContext['spanId'] === 'string' && typeof spanContext['traceId'] === 'string' && typeof spanContext['traceFlags'] === 'number';
}

},{"../api/context":"1ZQ7h","../trace/context-utils":"c8keb","./NonRecordingSpan":"80R4i","./spancontext-utils":"g40FB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c8keb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Return the span if one exists
 *
 * @param context context to get span from
 */ parcelHelpers.export(exports, "getSpan", ()=>getSpan
);
/**
 * Set the span on a context
 *
 * @param context context to use as parent
 * @param span span to set active
 */ parcelHelpers.export(exports, "setSpan", ()=>setSpan
);
/**
 * Remove current span stored in the context
 *
 * @param context context to delete span from
 */ parcelHelpers.export(exports, "deleteSpan", ()=>deleteSpan
);
/**
 * Wrap span context in a NoopSpan and set as span in a new
 * context
 *
 * @param context context to set active span on
 * @param spanContext span context to be wrapped
 */ parcelHelpers.export(exports, "setSpanContext", ()=>setSpanContext
);
/**
 * Get the span context of the span if it exists.
 *
 * @param context context to get values from
 */ parcelHelpers.export(exports, "getSpanContext", ()=>getSpanContext
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _context = require("../context/context");
var _nonRecordingSpan = require("./NonRecordingSpan");
/**
 * span key
 */ var SPAN_KEY = _context.createContextKey('OpenTelemetry Context Key SPAN');
function getSpan(context) {
    return context.getValue(SPAN_KEY) || undefined;
}
function setSpan(context, span) {
    return context.setValue(SPAN_KEY, span);
}
function deleteSpan(context) {
    return context.deleteValue(SPAN_KEY);
}
function setSpanContext(context, spanContext) {
    return setSpan(context, new _nonRecordingSpan.NonRecordingSpan(spanContext));
}
function getSpanContext(context) {
    var _a;
    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();
}

},{"../context/context":"8Hj8X","./NonRecordingSpan":"80R4i","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"80R4i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NonRecordingSpan", ()=>NonRecordingSpan
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _invalidSpanConstants = require("./invalid-span-constants");
/**
 * The NonRecordingSpan is the default {@link Span} that is used when no Span
 * implementation is available. All operations are no-op including context
 * propagation.
 */ var NonRecordingSpan = function() {
    function NonRecordingSpan1(_spanContext) {
        if (_spanContext === void 0) _spanContext = _invalidSpanConstants.INVALID_SPAN_CONTEXT;
        this._spanContext = _spanContext;
    }
    // Returns a SpanContext.
    NonRecordingSpan1.prototype.spanContext = function() {
        return this._spanContext;
    };
    // By default does nothing
    NonRecordingSpan1.prototype.setAttribute = function(_key, _value) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan1.prototype.setAttributes = function(_attributes) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan1.prototype.addEvent = function(_name, _attributes) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan1.prototype.setStatus = function(_status) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan1.prototype.updateName = function(_name) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan1.prototype.end = function(_endTime) {
    };
    // isRecording always returns false for NonRecordingSpan.
    NonRecordingSpan1.prototype.isRecording = function() {
        return false;
    };
    // By default does nothing
    NonRecordingSpan1.prototype.recordException = function(_exception, _time) {
    };
    return NonRecordingSpan1;
}();

},{"./invalid-span-constants":"9v7Cm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9v7Cm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "INVALID_SPANID", ()=>INVALID_SPANID
);
parcelHelpers.export(exports, "INVALID_TRACEID", ()=>INVALID_TRACEID
);
parcelHelpers.export(exports, "INVALID_SPAN_CONTEXT", ()=>INVALID_SPAN_CONTEXT
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _traceFlags = require("./trace_flags");
var INVALID_SPANID = '0000000000000000';
var INVALID_TRACEID = '00000000000000000000000000000000';
var INVALID_SPAN_CONTEXT = {
    traceId: INVALID_TRACEID,
    spanId: INVALID_SPANID,
    traceFlags: _traceFlags.TraceFlags.NONE
};

},{"./trace_flags":"58Fpe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"58Fpe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TraceFlags", ()=>TraceFlags
);
var TraceFlags;
(function(TraceFlags1) {
    /** Represents no flag set. */ TraceFlags1[TraceFlags1["NONE"] = 0] = "NONE";
    /** Bit to represent whether trace is sampled in trace flags. */ TraceFlags1[TraceFlags1["SAMPLED"] = 1] = "SAMPLED";
})(TraceFlags || (TraceFlags = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g40FB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isValidTraceId", ()=>isValidTraceId
);
parcelHelpers.export(exports, "isValidSpanId", ()=>isValidSpanId
);
/**
 * Returns true if this {@link SpanContext} is valid.
 * @return true if this {@link SpanContext} is valid.
 */ parcelHelpers.export(exports, "isSpanContextValid", ()=>isSpanContextValid
);
/**
 * Wrap the given {@link SpanContext} in a new non-recording {@link Span}
 *
 * @param spanContext span context to be wrapped
 * @returns a new non-recording {@link Span} with the provided context
 */ parcelHelpers.export(exports, "wrapSpanContext", ()=>wrapSpanContext
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _invalidSpanConstants = require("./invalid-span-constants");
var _nonRecordingSpan = require("./NonRecordingSpan");
var VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;
var VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;
function isValidTraceId(traceId) {
    return VALID_TRACEID_REGEX.test(traceId) && traceId !== _invalidSpanConstants.INVALID_TRACEID;
}
function isValidSpanId(spanId) {
    return VALID_SPANID_REGEX.test(spanId) && spanId !== _invalidSpanConstants.INVALID_SPANID;
}
function isSpanContextValid(spanContext) {
    return isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId);
}
function wrapSpanContext(spanContext) {
    return new _nonRecordingSpan.NonRecordingSpan(spanContext);
}

},{"./invalid-span-constants":"9v7Cm","./NonRecordingSpan":"80R4i","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j8CJP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NoopTracerProvider", ()=>NoopTracerProvider
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _noopTracer = require("./NoopTracer");
/**
 * An implementation of the {@link TracerProvider} which returns an impotent
 * Tracer for all calls to `getTracer`.
 *
 * All operations are no-op.
 */ var NoopTracerProvider = function() {
    function NoopTracerProvider1() {
    }
    NoopTracerProvider1.prototype.getTracer = function(_name, _version, _options) {
        return new _noopTracer.NoopTracer();
    };
    return NoopTracerProvider1;
}();

},{"./NoopTracer":"ciEOJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9PDZ8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PropagationAPI", ()=>PropagationAPI
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _globalUtils = require("../internal/global-utils");
var _noopTextMapPropagator = require("../propagation/NoopTextMapPropagator");
var _textMapPropagator = require("../propagation/TextMapPropagator");
var _contextHelpers = require("../baggage/context-helpers");
var _utils = require("../baggage/utils");
var _diag = require("./diag");
var API_NAME = 'propagation';
var NOOP_TEXT_MAP_PROPAGATOR = new _noopTextMapPropagator.NoopTextMapPropagator();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Propagation API
 */ var PropagationAPI = function() {
    /** Empty private constructor prevents end users from constructing a new instance of the API */ function PropagationAPI1() {
        this.createBaggage = _utils.createBaggage;
        this.getBaggage = _contextHelpers.getBaggage;
        this.setBaggage = _contextHelpers.setBaggage;
        this.deleteBaggage = _contextHelpers.deleteBaggage;
    }
    /** Get the singleton instance of the Propagator API */ PropagationAPI1.getInstance = function() {
        if (!this._instance) this._instance = new PropagationAPI1();
        return this._instance;
    };
    /**
     * Set the current propagator.
     *
     * @returns true if the propagator was successfully registered, else false
     */ PropagationAPI1.prototype.setGlobalPropagator = function(propagator) {
        return _globalUtils.registerGlobal(API_NAME, propagator, _diag.DiagAPI.instance());
    };
    /**
     * Inject context into a carrier to be propagated inter-process
     *
     * @param context Context carrying tracing data to inject
     * @param carrier carrier to inject context into
     * @param setter Function used to set values on the carrier
     */ PropagationAPI1.prototype.inject = function(context, carrier, setter) {
        if (setter === void 0) setter = _textMapPropagator.defaultTextMapSetter;
        return this._getGlobalPropagator().inject(context, carrier, setter);
    };
    /**
     * Extract context from a carrier
     *
     * @param context Context which the newly created context will inherit from
     * @param carrier Carrier to extract context from
     * @param getter Function used to extract keys from a carrier
     */ PropagationAPI1.prototype.extract = function(context, carrier, getter) {
        if (getter === void 0) getter = _textMapPropagator.defaultTextMapGetter;
        return this._getGlobalPropagator().extract(context, carrier, getter);
    };
    /**
     * Return a list of all fields which may be used by the propagator.
     */ PropagationAPI1.prototype.fields = function() {
        return this._getGlobalPropagator().fields();
    };
    /** Remove the global propagator */ PropagationAPI1.prototype.disable = function() {
        _globalUtils.unregisterGlobal(API_NAME, _diag.DiagAPI.instance());
    };
    PropagationAPI1.prototype._getGlobalPropagator = function() {
        return _globalUtils.getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;
    };
    return PropagationAPI1;
}();

},{"../internal/global-utils":"h4XAN","../propagation/NoopTextMapPropagator":"5aVXl","../propagation/TextMapPropagator":"fbpGl","../baggage/context-helpers":"lnCoA","../baggage/utils":"1FtTJ","./diag":"gZAmK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5aVXl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NoopTextMapPropagator", ()=>NoopTextMapPropagator
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * No-op implementations of {@link TextMapPropagator}.
 */ var NoopTextMapPropagator = function() {
    function NoopTextMapPropagator1() {
    }
    /** Noop inject function does nothing */ NoopTextMapPropagator1.prototype.inject = function(_context, _carrier) {
    };
    /** Noop extract function does nothing and returns the input context */ NoopTextMapPropagator1.prototype.extract = function(context, _carrier) {
        return context;
    };
    NoopTextMapPropagator1.prototype.fields = function() {
        return [];
    };
    return NoopTextMapPropagator1;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fbpGl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultTextMapGetter", ()=>defaultTextMapGetter
);
parcelHelpers.export(exports, "defaultTextMapSetter", ()=>defaultTextMapSetter
);
var defaultTextMapGetter = {
    get: function(carrier, key) {
        if (carrier == null) return undefined;
        return carrier[key];
    },
    keys: function(carrier) {
        if (carrier == null) return [];
        return Object.keys(carrier);
    }
};
var defaultTextMapSetter = {
    set: function(carrier, key, value) {
        if (carrier == null) return;
        carrier[key] = value;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lnCoA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Retrieve the current baggage from the given context
 *
 * @param {Context} Context that manage all context values
 * @returns {Baggage} Extracted baggage from the context
 */ parcelHelpers.export(exports, "getBaggage", ()=>getBaggage
);
/**
 * Store a baggage in the given context
 *
 * @param {Context} Context that manage all context values
 * @param {Baggage} baggage that will be set in the actual context
 */ parcelHelpers.export(exports, "setBaggage", ()=>setBaggage
);
/**
 * Delete the baggage stored in the given context
 *
 * @param {Context} Context that manage all context values
 */ parcelHelpers.export(exports, "deleteBaggage", ()=>deleteBaggage
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _context = require("../context/context");
/**
 * Baggage key
 */ var BAGGAGE_KEY = _context.createContextKey('OpenTelemetry Baggage Key');
function getBaggage(context) {
    return context.getValue(BAGGAGE_KEY) || undefined;
}
function setBaggage(context, baggage) {
    return context.setValue(BAGGAGE_KEY, baggage);
}
function deleteBaggage(context) {
    return context.deleteValue(BAGGAGE_KEY);
}

},{"../context/context":"8Hj8X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1FtTJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a new Baggage with optional entries
 *
 * @param entries An array of baggage entries the new baggage should contain
 */ parcelHelpers.export(exports, "createBaggage", ()=>createBaggage
);
/**
 * Create a serializable BaggageEntryMetadata object from a string.
 *
 * @param str string metadata. Format is currently not defined by the spec and has no special meaning.
 *
 */ parcelHelpers.export(exports, "baggageEntryMetadataFromString", ()=>baggageEntryMetadataFromString
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _diag = require("../api/diag");
var _baggageImpl = require("./internal/baggage-impl");
var _symbol = require("./internal/symbol");
var diag = _diag.DiagAPI.instance();
function createBaggage(entries) {
    if (entries === void 0) entries = {
    };
    return new _baggageImpl.BaggageImpl(new Map(Object.entries(entries)));
}
function baggageEntryMetadataFromString(str) {
    if (typeof str !== 'string') {
        diag.error("Cannot create baggage metadata from unknown type: " + typeof str);
        str = '';
    }
    return {
        __TYPE__: _symbol.baggageEntryMetadataSymbol,
        toString: function() {
            return str;
        }
    };
}

},{"../api/diag":"gZAmK","./internal/baggage-impl":"1JRmx","./internal/symbol":"bwKBN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1JRmx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaggageImpl", ()=>BaggageImpl
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var BaggageImpl = function() {
    function BaggageImpl1(entries) {
        this._entries = entries ? new Map(entries) : new Map();
    }
    BaggageImpl1.prototype.getEntry = function(key) {
        var entry = this._entries.get(key);
        if (!entry) return undefined;
        return Object.assign({
        }, entry);
    };
    BaggageImpl1.prototype.getAllEntries = function() {
        return Array.from(this._entries.entries()).map(function(_a) {
            var k = _a[0], v = _a[1];
            return [
                k,
                v
            ];
        });
    };
    BaggageImpl1.prototype.setEntry = function(key, entry) {
        var newBaggage = new BaggageImpl1(this._entries);
        newBaggage._entries.set(key, entry);
        return newBaggage;
    };
    BaggageImpl1.prototype.removeEntry = function(key) {
        var newBaggage = new BaggageImpl1(this._entries);
        newBaggage._entries.delete(key);
        return newBaggage;
    };
    BaggageImpl1.prototype.removeEntries = function() {
        var keys = [];
        for(var _i = 0; _i < arguments.length; _i++)keys[_i] = arguments[_i];
        var newBaggage = new BaggageImpl1(this._entries);
        for(var _a = 0, keys_1 = keys; _a < keys_1.length; _a++){
            var key = keys_1[_a];
            newBaggage._entries.delete(key);
        }
        return newBaggage;
    };
    BaggageImpl1.prototype.clear = function() {
        return new BaggageImpl1();
    };
    return BaggageImpl1;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bwKBN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "baggageEntryMetadataSymbol", ()=>baggageEntryMetadataSymbol
);
var baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f2zck":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ca19":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ijv0S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"atRyv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dfWAH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _consoleLogger = require("./consoleLogger");
parcelHelpers.exportAll(_consoleLogger, exports);
var _types = require("./types");
parcelHelpers.exportAll(_types, exports);

},{"./consoleLogger":"cqEiU","./types":"f917i","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cqEiU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DiagConsoleLogger", ()=>DiagConsoleLogger
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var consoleMap = [
    {
        n: 'error',
        c: 'error'
    },
    {
        n: 'warn',
        c: 'warn'
    },
    {
        n: 'info',
        c: 'info'
    },
    {
        n: 'debug',
        c: 'debug'
    },
    {
        n: 'verbose',
        c: 'trace'
    }, 
];
/**
 * A simple Immutable Console based diagnostic logger which will output any messages to the Console.
 * If you want to limit the amount of logging to a specific level or lower use the
 * {@link createLogLevelDiagLogger}
 */ var DiagConsoleLogger = function() {
    function DiagConsoleLogger1() {
        function _consoleFunc(funcName) {
            return function() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                if (console) {
                    // Some environments only expose the console when the F12 developer console is open
                    // eslint-disable-next-line no-console
                    var theFunc = console[funcName];
                    if (typeof theFunc !== 'function') // Not all environments support all functions
                    // eslint-disable-next-line no-console
                    theFunc = console.log;
                    // One last final check
                    if (typeof theFunc === 'function') return theFunc.apply(console, args);
                }
            };
        }
        for(var i = 0; i < consoleMap.length; i++)this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);
    }
    return DiagConsoleLogger1;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jS7z1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8a8Ao":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kOtOq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9hHpb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SamplingDecision", ()=>SamplingDecision
);
var SamplingDecision;
(function(SamplingDecision1) {
    /**
     * `Span.isRecording() === false`, span will not be recorded and all events
     * and attributes will be dropped.
     */ SamplingDecision1[SamplingDecision1["NOT_RECORD"] = 0] = "NOT_RECORD";
    /**
     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}
     * MUST NOT be set.
     */ SamplingDecision1[SamplingDecision1["RECORD"] = 1] = "RECORD";
    /**
     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}
     * MUST be set.
     */ SamplingDecision1[SamplingDecision1["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
})(SamplingDecision || (SamplingDecision = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8kOz3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8JdQL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SpanKind", ()=>SpanKind
);
var SpanKind;
(function(SpanKind1) {
    /** Default value. Indicates that the span is used internally. */ SpanKind1[SpanKind1["INTERNAL"] = 0] = "INTERNAL";
    /**
     * Indicates that the span covers server-side handling of an RPC or other
     * remote request.
     */ SpanKind1[SpanKind1["SERVER"] = 1] = "SERVER";
    /**
     * Indicates that the span covers the client-side wrapper around an RPC or
     * other remote request.
     */ SpanKind1[SpanKind1["CLIENT"] = 2] = "CLIENT";
    /**
     * Indicates that the span describes producer sending a message to a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */ SpanKind1[SpanKind1["PRODUCER"] = 3] = "PRODUCER";
    /**
     * Indicates that the span describes consumer receiving a message from a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */ SpanKind1[SpanKind1["CONSUMER"] = 4] = "CONSUMER";
})(SpanKind || (SpanKind = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6dsX7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aZc5i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"caBJ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SpanStatusCode", ()=>SpanStatusCode
);
var SpanStatusCode;
(function(SpanStatusCode1) {
    /**
     * The default status.
     */ SpanStatusCode1[SpanStatusCode1["UNSET"] = 0] = "UNSET";
    /**
     * The operation has been validated by an Application developer or
     * Operator to have completed successfully.
     */ SpanStatusCode1[SpanStatusCode1["OK"] = 1] = "OK";
    /**
     * The operation contains an error.
     */ SpanStatusCode1[SpanStatusCode1["ERROR"] = 2] = "ERROR";
})(SpanStatusCode || (SpanStatusCode = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7fKnu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"43yZb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createTraceState", ()=>createTraceState
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _tracestateImpl = require("./tracestate-impl");
function createTraceState(rawTraceState) {
    return new _tracestateImpl.TraceStateImpl(rawTraceState);
}

},{"./tracestate-impl":"c2Tax","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c2Tax":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TraceStateImpl", ()=>TraceStateImpl
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var _tracestateValidators = require("./tracestate-validators");
var MAX_TRACE_STATE_ITEMS = 32;
var MAX_TRACE_STATE_LEN = 512;
var LIST_MEMBERS_SEPARATOR = ',';
var LIST_MEMBER_KEY_VALUE_SPLITTER = '=';
/**
 * TraceState must be a class and not a simple object type because of the spec
 * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).
 *
 * Here is the list of allowed mutations:
 * - New key-value pair should be added into the beginning of the list
 * - The value of any key can be updated. Modified keys MUST be moved to the
 * beginning of the list.
 */ var TraceStateImpl = function() {
    function TraceStateImpl1(rawTraceState) {
        this._internalState = new Map();
        if (rawTraceState) this._parse(rawTraceState);
    }
    TraceStateImpl1.prototype.set = function(key, value) {
        // TODO: Benchmark the different approaches(map vs list) and
        // use the faster one.
        var traceState = this._clone();
        if (traceState._internalState.has(key)) traceState._internalState.delete(key);
        traceState._internalState.set(key, value);
        return traceState;
    };
    TraceStateImpl1.prototype.unset = function(key) {
        var traceState = this._clone();
        traceState._internalState.delete(key);
        return traceState;
    };
    TraceStateImpl1.prototype.get = function(key) {
        return this._internalState.get(key);
    };
    TraceStateImpl1.prototype.serialize = function() {
        var _this = this;
        return this._keys().reduce(function(agg, key) {
            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));
            return agg;
        }, []).join(LIST_MEMBERS_SEPARATOR);
    };
    TraceStateImpl1.prototype._parse = function(rawTraceState) {
        if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;
        this._internalState = rawTraceState.split(LIST_MEMBERS_SEPARATOR).reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning
        .reduce(function(agg, part) {
            var listMember = part.trim(); // Optional Whitespace (OWS) handling
            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);
            if (i !== -1) {
                var key = listMember.slice(0, i);
                var value = listMember.slice(i + 1, part.length);
                if (_tracestateValidators.validateKey(key) && _tracestateValidators.validateValue(value)) agg.set(key, value);
            }
            return agg;
        }, new Map());
        // Because of the reverse() requirement, trunc must be done after map is created
        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) this._internalState = new Map(Array.from(this._internalState.entries()).reverse() // Use reverse same as original tracestate parse chain
        .slice(0, MAX_TRACE_STATE_ITEMS));
    };
    TraceStateImpl1.prototype._keys = function() {
        return Array.from(this._internalState.keys()).reverse();
    };
    TraceStateImpl1.prototype._clone = function() {
        var traceState = new TraceStateImpl1();
        traceState._internalState = new Map(this._internalState);
        return traceState;
    };
    return TraceStateImpl1;
}();

},{"./tracestate-validators":"2Nd45","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Nd45":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Key is opaque string up to 256 characters printable. It MUST begin with a
 * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,
 * underscores _, dashes -, asterisks *, and forward slashes /.
 * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the
 * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.
 * see https://www.w3.org/TR/trace-context/#key
 */ parcelHelpers.export(exports, "validateKey", ()=>validateKey
);
/**
 * Value is opaque string up to 256 characters printable ASCII RFC0020
 * characters (i.e., the range 0x20 to 0x7E) except comma , and =.
 */ parcelHelpers.export(exports, "validateValue", ()=>validateValue
);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';
var VALID_KEY = "[a-z]" + VALID_KEY_CHAR_RANGE + "{0,255}";
var VALID_VENDOR_KEY = "[a-z0-9]" + VALID_KEY_CHAR_RANGE + "{0,240}@[a-z]" + VALID_KEY_CHAR_RANGE + "{0,13}";
var VALID_KEY_REGEX = new RegExp("^(?:" + VALID_KEY + "|" + VALID_VENDOR_KEY + ")$");
var VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;
var INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;
function validateKey(key) {
    return VALID_KEY_REGEX.test(key);
}
function validateValue(value) {
    return VALID_VALUE_BASE_REGEX.test(value) && !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dFDcb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4f6Wy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7BFAK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"BMV1s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g7IQJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Generates a `SpanContext` given a `traceparent` header value.
 * @param traceParent - Serialized span context data as a `traceparent` header value.
 * @returns The `SpanContext` generated from the `traceparent` value.
 */ parcelHelpers.export(exports, "extractSpanContextFromTraceParentHeader", ()=>extractSpanContextFromTraceParentHeader
);
/**
 * Generates a `traceparent` value given a span context.
 * @param spanContext - Contains context for a specific span.
 * @returns The `spanContext` represented as a `traceparent` value.
 */ parcelHelpers.export(exports, "getTraceParentHeader", ()=>getTraceParentHeader
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const VERSION = "00";
function extractSpanContextFromTraceParentHeader(traceParentHeader) {
    const parts = traceParentHeader.split("-");
    if (parts.length !== 4) return;
    const [version, traceId, spanId, traceOptions] = parts;
    if (version !== VERSION) return;
    const traceFlags = parseInt(traceOptions, 16);
    const spanContext = {
        spanId,
        traceId,
        traceFlags
    };
    return spanContext;
}
function getTraceParentHeader(spanContext) {
    const missingFields = [];
    if (!spanContext.traceId) missingFields.push("traceId");
    if (!spanContext.spanId) missingFields.push("spanId");
    if (missingFields.length) return;
    const flags = spanContext.traceFlags || 0 /* NONE */ ;
    const hexFlags = flags.toString(16);
    const traceFlags = hexFlags.length === 1 ? `0${hexFlags}` : hexFlags;
    // https://www.w3.org/TR/trace-context/#traceparent-header-field-values
    return `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-${traceFlags}`;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iewsm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This function is only here for compatibility. Use createSpanFunction in core-tracing.
 *
 * @deprecated This function is only here for compatibility. Use createSpanFunction in core-tracing.
 * @hidden

 * @param spanConfig - The name of the operation being performed.
 * @param tracingOptions - The options for the underlying http request.
 */ parcelHelpers.export(exports, "createSpanFunction", ()=>createSpanFunction
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// NOTE: we've moved this code into core-tracing but these functions
// were a part of the GA'd library and can't be removed until the next major
// release. They currently get called always, even if tracing is not enabled.
var _coreTracing = require("@azure/core-tracing");
function createSpanFunction(args) {
    return _coreTracing.createSpanFunction(args);
}

},{"@azure/core-tracing":"7R1NC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7woKG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TokenRefreshBufferMs", ()=>TokenRefreshBufferMs
);
/**
 * Provides an {@link AccessTokenCache} implementation which clears
 * the cached {@link AccessToken}'s after the expiresOnTimestamp has
 * passed.
 *
 * @deprecated No longer used in the bearer authorization policy.
 */ parcelHelpers.export(exports, "ExpiringAccessTokenCache", ()=>ExpiringAccessTokenCache
);
const TokenRefreshBufferMs = 120000; // 2 Minutes
class ExpiringAccessTokenCache {
    /**
     * Constructs an instance of {@link ExpiringAccessTokenCache} with
     * an optional expiration buffer time.
     */ constructor(tokenRefreshBufferMs = TokenRefreshBufferMs){
        this.cachedToken = undefined;
        this.tokenRefreshBufferMs = tokenRefreshBufferMs;
    }
    /**
     * Saves an access token into the internal in-memory cache.
     * @param accessToken - Access token or undefined to clear the cache.
     */ setCachedToken(accessToken) {
        this.cachedToken = accessToken;
    }
    /**
     * Returns the cached access token, or `undefined` if one is not cached or the cached one is expiring soon.
     */ getCachedToken() {
        if (this.cachedToken && Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp) this.cachedToken = undefined;
        return this.cachedToken;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fC0U3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.
 *
 * @deprecated No longer used in the bearer authorization policy.
 */ parcelHelpers.export(exports, "AccessTokenRefresher", ()=>AccessTokenRefresher
);
class AccessTokenRefresher {
    constructor(credential, scopes, requiredMillisecondsBeforeNewRefresh = 30000){
        this.credential = credential;
        this.scopes = scopes;
        this.requiredMillisecondsBeforeNewRefresh = requiredMillisecondsBeforeNewRefresh;
        this.lastCalled = 0;
    }
    /**
     * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying
     * that we are ready for a new refresh.
     */ isReady() {
        // We're only ready for a new refresh if the required milliseconds have passed.
        return !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh;
    }
    /**
     * Stores the time in which it is called,
     * then requests a new token,
     * then sets this.promise to undefined,
     * then returns the token.
     */ async getToken(options) {
        this.lastCalled = Date.now();
        const token = await this.credential.getToken(this.scopes, options);
        this.promise = undefined;
        return token || undefined;
    }
    /**
     * Requests a new token if we're not currently waiting for a new token.
     * Returns null if the required time between each call hasn't been reached.
     */ refresh(options) {
        if (!this.promise) this.promise = this.getToken(options);
        return this.promise;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5SR1p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A simple {@link ServiceClientCredential} that authenticates with a username and a password.
 */ parcelHelpers.export(exports, "BasicAuthenticationCredentials", ()=>BasicAuthenticationCredentials
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _base64 = require("../util/base64");
var _constants = require("../util/constants");
var _httpHeaders = require("../httpHeaders");
const HeaderConstants = _constants.Constants.HeaderConstants;
const DEFAULT_AUTHORIZATION_SCHEME = "Basic";
class BasicAuthenticationCredentials {
    /**
     * Creates a new BasicAuthenticationCredentials object.
     *
     * @param userName - User name.
     * @param password - Password.
     * @param authorizationScheme - The authorization scheme.
     */ constructor(userName, password, authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME){
        /**
         * Authorization scheme. Defaults to "Basic".
         * More information about authorization schemes is available here: https://developer.mozilla.org/docs/Web/HTTP/Authentication#authentication_schemes
         */ this.authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;
        if (userName === null || userName === undefined || typeof userName.valueOf() !== "string") throw new Error("userName cannot be null or undefined and must be of type string.");
        if (password === null || password === undefined || typeof password.valueOf() !== "string") throw new Error("password cannot be null or undefined and must be of type string.");
        this.userName = userName;
        this.password = password;
        this.authorizationScheme = authorizationScheme;
    }
    /**
     * Signs a request with the Authentication header.
     *
     * @param webResource - The WebResourceLike to be signed.
     * @returns The signed request object.
     */ signRequest(webResource) {
        const credentials = `${this.userName}:${this.password}`;
        const encodedCredentials = `${this.authorizationScheme} ${_base64.encodeString(credentials)}`;
        if (!webResource.headers) webResource.headers = new _httpHeaders.HttpHeaders();
        webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);
        return Promise.resolve(webResource);
    }
}

},{"../util/base64":"hWkEy","../util/constants":"anVPh","../httpHeaders":"e4FzO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"XUiaw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Authenticates to a service using an API key.
 */ parcelHelpers.export(exports, "ApiKeyCredentials", ()=>ApiKeyCredentials
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _httpHeaders = require("../httpHeaders");
class ApiKeyCredentials {
    /**
     * @param options - Specifies the options to be provided for auth. Either header or query needs to be provided.
     */ constructor(options){
        if (!options || options && !options.inHeader && !options.inQuery) throw new Error(`options cannot be null or undefined. Either "inHeader" or "inQuery" property of the options object needs to be provided.`);
        this.inHeader = options.inHeader;
        this.inQuery = options.inQuery;
    }
    /**
     * Signs a request with the values provided in the inHeader and inQuery parameter.
     *
     * @param webResource - The WebResourceLike to be signed.
     * @returns The signed request object.
     */ signRequest(webResource) {
        if (!webResource) return Promise.reject(new Error(`webResource cannot be null or undefined and must be of type "object".`));
        if (this.inHeader) {
            if (!webResource.headers) webResource.headers = new _httpHeaders.HttpHeaders();
            for(const headerName in this.inHeader)webResource.headers.set(headerName, this.inHeader[headerName]);
        }
        if (this.inQuery) {
            if (!webResource.url) return Promise.reject(new Error(`url cannot be null in the request object.`));
            if (webResource.url.indexOf("?") < 0) webResource.url += "?";
            for(const key in this.inQuery){
                if (!webResource.url.endsWith("?")) webResource.url += "&";
                webResource.url += `${key}=${this.inQuery[key]}`;
            }
        }
        return Promise.resolve(webResource);
    }
}

},{"../httpHeaders":"e4FzO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gq6Zy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A {@link TopicCredentials} object used for Azure Event Grid.
 */ parcelHelpers.export(exports, "TopicCredentials", ()=>TopicCredentials
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _apiKeyCredentials = require("./apiKeyCredentials");
class TopicCredentials extends _apiKeyCredentials.ApiKeyCredentials {
    /**
     * Creates a new EventGrid TopicCredentials object.
     *
     * @param topicKey - The EventGrid topic key
     */ constructor(topicKey){
        if (!topicKey || topicKey && typeof topicKey !== "string") throw new Error("topicKey cannot be null or undefined and must be of type string.");
        const options = {
            inHeader: {
                "aeg-sas-key": topicKey
            }
        };
        super(options);
    }
}

},{"./apiKeyCredentials":"XUiaw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5lLVn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you
 * to manipulate blob containers.
 */ parcelHelpers.export(exports, "BlobServiceClient", ()=>BlobServiceClient
);
var _tslib = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreHttp = require("@azure/core-http");
var _coreTracing = require("@azure/core-tracing");
var _operations = require("./generated/src/operations");
var _pipeline = require("./Pipeline");
var _containerClient = require("./ContainerClient");
var _utilsCommon = require("./utils/utils.common");
var _storageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");
var _anonymousCredential = require("./credentials/AnonymousCredential");
var _corePaging = require("@azure/core-paging");
var _tracing = require("./utils/tracing");
var _blobBatchClient = require("./BlobBatchClient");
var _storageClient = require("./StorageClient");
var _accountSASPermissions = require("./sas/AccountSASPermissions");
var _accountSASSignatureValues = require("./sas/AccountSASSignatureValues");
var _accountSASServices = require("./sas/AccountSASServices");
class BlobServiceClient extends _storageClient.StorageClient {
    constructor(url, credentialOrPipeline, // Legacy, no fix for eslint error without breaking. Disable it for this interface.
    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/ options){
        let pipeline;
        if (_pipeline.isPipelineLike(credentialOrPipeline)) pipeline = credentialOrPipeline;
        else if (_coreHttp.isNode && credentialOrPipeline instanceof _storageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipeline instanceof _anonymousCredential.AnonymousCredential || _coreHttp.isTokenCredential(credentialOrPipeline)) pipeline = _pipeline.newPipeline(credentialOrPipeline, options);
        else // The second parameter is undefined. Use anonymous credential
        pipeline = _pipeline.newPipeline(new _anonymousCredential.AnonymousCredential(), options);
        super(url, pipeline);
        this.serviceContext = new _operations.Service(this.storageClientContext);
    }
    /**
     *
     * Creates an instance of BlobServiceClient from connection string.
     *
     * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.
     *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]
     *                                  Account connection string example -
     *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
     *                                  SAS connection string example -
     *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
     * @param options - Optional. Options to configure the HTTP pipeline.
     */ static fromConnectionString(connectionString, // Legacy, no fix for eslint error without breaking. Disable it for this interface.
    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/ options) {
        options = options || {
        };
        const extractedCreds = _utilsCommon.extractConnectionStringParts(connectionString);
        if (extractedCreds.kind === "AccountConnString") {
            if (_coreHttp.isNode) {
                const sharedKeyCredential = new _storageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
                if (!options.proxyOptions) options.proxyOptions = _coreHttp.getDefaultProxySettings(extractedCreds.proxyUri);
                const pipeline = _pipeline.newPipeline(sharedKeyCredential, options);
                return new BlobServiceClient(extractedCreds.url, pipeline);
            } else throw new Error("Account connection string is only supported in Node.js environment");
        } else if (extractedCreds.kind === "SASConnString") {
            const pipeline = _pipeline.newPipeline(new _anonymousCredential.AnonymousCredential(), options);
            return new BlobServiceClient(extractedCreds.url + "?" + extractedCreds.accountSas, pipeline);
        } else throw new Error("Connection string must be either an Account connection string or a SAS connection string");
    }
    /**
     * Creates a {@link ContainerClient} object
     *
     * @param containerName - A container name
     * @returns A new ContainerClient object for the given container name.
     *
     * Example usage:
     *
     * ```js
     * const containerClient = blobServiceClient.getContainerClient("<container name>");
     * ```
     */ getContainerClient(containerName) {
        return new _containerClient.ContainerClient(_utilsCommon.appendToURLPath(this.url, encodeURIComponent(containerName)), this.pipeline);
    }
    /**
     * Create a Blob container.
     *
     * @param containerName - Name of the container to create.
     * @param options - Options to configure Container Create operation.
     * @returns Container creation response and the corresponding container client.
     */ async createContainer(containerName, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobServiceClient-createContainer", options);
        try {
            const containerClient = this.getContainerClient(containerName);
            const containerCreateResponse = await containerClient.create(updatedOptions);
            return {
                containerClient,
                containerCreateResponse
            };
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Deletes a Blob container.
     *
     * @param containerName - Name of the container to delete.
     * @param options - Options to configure Container Delete operation.
     * @returns Container deletion response.
     */ async deleteContainer(containerName, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobServiceClient-deleteContainer", options);
        try {
            const containerClient = this.getContainerClient(containerName);
            return await containerClient.delete(updatedOptions);
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Restore a previously deleted Blob container.
     * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.
     *
     * @param deletedContainerName - Name of the previously deleted container.
     * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.
     * @param options - Options to configure Container Restore operation.
     * @returns Container deletion response.
     */ async undeleteContainer(deletedContainerName, deletedContainerVersion, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobServiceClient-undeleteContainer", options);
        try {
            const containerClient = this.getContainerClient(options.destinationContainerName || deletedContainerName);
            // Hack to access a protected member.
            const containerContext = new _operations.Container(containerClient["storageClientContext"]);
            const containerUndeleteResponse = await containerContext.restore(Object.assign({
                deletedContainerName,
                deletedContainerVersion
            }, updatedOptions));
            return {
                containerClient,
                containerUndeleteResponse
            };
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Rename an existing Blob Container.
     *
     * @param sourceContainerName - The name of the source container.
     * @param destinationContainerName - The new name of the container.
     * @param options - Options to configure Container Rename operation.
     */ /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */ // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.
    async renameContainer(sourceContainerName, destinationContainerName, options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("BlobServiceClient-renameContainer", options);
        try {
            const containerClient = this.getContainerClient(destinationContainerName);
            // Hack to access a protected member.
            const containerContext = new _operations.Container(containerClient["storageClientContext"]);
            const containerRenameResponse = await containerContext.rename(sourceContainerName, Object.assign(Object.assign({
            }, updatedOptions), {
                sourceLeaseId: (_a = options.sourceCondition) === null || _a === void 0 ? void 0 : _a.leaseId
            }));
            return {
                containerClient,
                containerRenameResponse
            };
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Gets the properties of a storage account’s Blob service, including properties
     * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
     *
     * @param options - Options to the Service Get Properties operation.
     * @returns Response data for the Service Get Properties operation.
     */ async getProperties(options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobServiceClient-getProperties", options);
        try {
            return await this.serviceContext.getProperties(Object.assign({
                abortSignal: options.abortSignal
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Sets properties for a storage account’s Blob service endpoint, including properties
     * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties
     *
     * @param properties -
     * @param options - Options to the Service Set Properties operation.
     * @returns Response data for the Service Set Properties operation.
     */ async setProperties(properties, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobServiceClient-setProperties", options);
        try {
            return await this.serviceContext.setProperties(properties, Object.assign({
                abortSignal: options.abortSignal
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Retrieves statistics related to replication for the Blob service. It is only
     * available on the secondary location endpoint when read-access geo-redundant
     * replication is enabled for the storage account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats
     *
     * @param options - Options to the Service Get Statistics operation.
     * @returns Response data for the Service Get Statistics operation.
     */ async getStatistics(options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobServiceClient-getStatistics", options);
        try {
            return await this.serviceContext.getStatistics(Object.assign({
                abortSignal: options.abortSignal
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * The Get Account Information operation returns the sku name and account kind
     * for the specified account.
     * The Get Account Information operation is available on service versions beginning
     * with version 2018-03-28.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
     *
     * @param options - Options to the Service Get Account Info operation.
     * @returns Response data for the Service Get Account Info operation.
     */ async getAccountInfo(options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobServiceClient-getAccountInfo", options);
        try {
            return await this.serviceContext.getAccountInfo(Object.assign({
                abortSignal: options.abortSignal
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Returns a list of the containers under the specified account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2
     *
     * @param marker - A string value that identifies the portion of
     *                        the list of containers to be returned with the next listing operation. The
     *                        operation returns the continuationToken value within the response body if the
     *                        listing operation did not return all containers remaining to be listed
     *                        with the current page. The continuationToken value can be used as the value for
     *                        the marker parameter in a subsequent call to request the next page of list
     *                        items. The marker value is opaque to the client.
     * @param options - Options to the Service List Container Segment operation.
     * @returns Response data for the Service List Container Segment operation.
     */ async listContainersSegment(marker, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobServiceClient-listContainersSegment", options);
        try {
            return await this.serviceContext.listContainersSegment(Object.assign(Object.assign(Object.assign({
                abortSignal: options.abortSignal,
                marker
            }, options), {
                include: typeof options.include === "string" ? [
                    options.include
                ] : options.include
            }), _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * The Filter Blobs operation enables callers to list blobs across all containers whose tags
     * match a given search expression. Filter blobs searches across all containers within a
     * storage account but can be scoped within the expression to a single container.
     *
     * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                        The given expression must evaluate to true for a blob to be returned in the results.
     *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                        however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param marker - A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the continuationToken value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The continuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param options - Options to find blobs by tags.
     */ async findBlobsByTagsSegment(tagFilterSqlExpression, marker, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobServiceClient-findBlobsByTagsSegment", options);
        try {
            const response = await this.serviceContext.filterBlobs(Object.assign({
                abortSignal: options.abortSignal,
                where: tagFilterSqlExpression,
                marker,
                maxPageSize: options.maxPageSize
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
            const wrappedResponse = Object.assign(Object.assign({
            }, response), {
                _response: response._response,
                blobs: response.blobs.map((blob)=>{
                    var _a;
                    let tagValue = "";
                    if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) tagValue = blob.tags.blobTagSet[0].value;
                    return Object.assign(Object.assign({
                    }, blob), {
                        tags: _utilsCommon.toTags(blob.tags),
                        tagValue
                    });
                })
            });
            return wrappedResponse;
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.
     *
     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param marker - A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the continuationToken value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The continuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param options - Options to find blobs by tags.
     */ findBlobsByTagsSegments(tagFilterSqlExpression, marker, options = {
    }) {
        return _tslib.__asyncGenerator(this, arguments, function* findBlobsByTagsSegments_1() {
            let response;
            if (!!marker || marker === undefined) do {
                response = yield _tslib.__await(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));
                response.blobs = response.blobs || [];
                marker = response.continuationToken;
                yield yield _tslib.__await(response);
            }while (marker)
        });
    }
    /**
     * Returns an AsyncIterableIterator for blobs.
     *
     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param options - Options to findBlobsByTagsItems.
     */ findBlobsByTagsItems(tagFilterSqlExpression, options = {
    }) {
        return _tslib.__asyncGenerator(this, arguments, function* findBlobsByTagsItems_1() {
            var e_1, _a;
            let marker;
            try {
                for(var _b = _tslib.__asyncValues(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options)), _c; _c = yield _tslib.__await(_b.next()), !_c.done;){
                    const segment = _c.value;
                    yield _tslib.__await((yield* _tslib.__asyncDelegator(_tslib.__asyncValues(segment.blobs))));
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally{
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _tslib.__await(_a.call(_b));
                } finally{
                    if (e_1) throw e_1.error;
                }
            }
        });
    }
    /**
     * Returns an async iterable iterator to find all blobs with specified tag
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the blobs in pages.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
     *
     * Example using `for await` syntax:
     *
     * ```js
     * let i = 1;
     * for await (const blob of blobServiceClient.findBlobsByTags("tagkey='tagvalue'")) {
     *   console.log(`Blob ${i++}: ${container.name}`);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * const iter = blobServiceClient.findBlobsByTags("tagkey='tagvalue'");
     * let blobItem = await iter.next();
     * while (!blobItem.done) {
     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
     *   blobItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const response of blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 20 })) {
     *   if (response.blobs) {
     *     for (const blob of response.blobs) {
     *       console.log(`Blob ${i++}: ${blob.name}`);
     *     }
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 2 });
     * let response = (await iterator.next()).value;
     *
     * // Prints 2 blob names
     * if (response.blobs) {
     *   for (const blob of response.blobs) {
     *     console.log(`Blob ${i++}: ${blob.name}`);
     *   }
     * }
     *
     * // Gets next marker
     * let marker = response.continuationToken;
     * // Passing next marker as continuationToken
     * iterator = blobServiceClient
     *   .findBlobsByTags("tagkey='tagvalue'")
     *   .byPage({ continuationToken: marker, maxPageSize: 10 });
     * response = (await iterator.next()).value;
     *
     * // Prints blob names
     * if (response.blobs) {
     *   for (const blob of response.blobs) {
     *      console.log(`Blob ${i++}: ${blob.name}`);
     *   }
     * }
     * ```
     *
     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param options - Options to find blobs by tags.
     */ findBlobsByTags(tagFilterSqlExpression, options = {
    }) {
        // AsyncIterableIterator to iterate over blobs
        const listSegmentOptions = Object.assign({
        }, options);
        const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
        return {
            /**
             * The next method, part of the iteration protocol
             */ next () {
                return iter.next();
            },
            /**
             * The connection to the async iterator, part of the iteration protocol
             */ [Symbol.asyncIterator] () {
                return this;
            },
            /**
             * Return an AsyncIterableIterator that works a page at a time
             */ byPage: (settings = {
            })=>{
                return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({
                    maxPageSize: settings.maxPageSize
                }, listSegmentOptions));
            }
        };
    }
    /**
     * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses
     *
     * @param marker - A string value that identifies the portion of
     *                        the list of containers to be returned with the next listing operation. The
     *                        operation returns the continuationToken value within the response body if the
     *                        listing operation did not return all containers remaining to be listed
     *                        with the current page. The continuationToken value can be used as the value for
     *                        the marker parameter in a subsequent call to request the next page of list
     *                        items. The marker value is opaque to the client.
     * @param options - Options to list containers operation.
     */ listSegments(marker, options = {
    }) {
        return _tslib.__asyncGenerator(this, arguments, function* listSegments_1() {
            let listContainersSegmentResponse;
            if (!!marker || marker === undefined) do {
                listContainersSegmentResponse = yield _tslib.__await(this.listContainersSegment(marker, options));
                listContainersSegmentResponse.containerItems = listContainersSegmentResponse.containerItems || [];
                marker = listContainersSegmentResponse.continuationToken;
                yield yield _tslib.__await((yield _tslib.__await(listContainersSegmentResponse)));
            }while (marker)
        });
    }
    /**
     * Returns an AsyncIterableIterator for Container Items
     *
     * @param options - Options to list containers operation.
     */ listItems(options = {
    }) {
        return _tslib.__asyncGenerator(this, arguments, function* listItems_1() {
            var e_2, _a;
            let marker;
            try {
                for(var _b = _tslib.__asyncValues(this.listSegments(marker, options)), _c; _c = yield _tslib.__await(_b.next()), !_c.done;){
                    const segment = _c.value;
                    yield _tslib.__await((yield* _tslib.__asyncDelegator(_tslib.__asyncValues(segment.containerItems))));
                }
            } catch (e_2_1) {
                e_2 = {
                    error: e_2_1
                };
            } finally{
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _tslib.__await(_a.call(_b));
                } finally{
                    if (e_2) throw e_2.error;
                }
            }
        });
    }
    /**
     * Returns an async iterable iterator to list all the containers
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the containers in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * let i = 1;
     * for await (const container of blobServiceClient.listContainers()) {
     *   console.log(`Container ${i++}: ${container.name}`);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * const iter = blobServiceClient.listContainers();
     * let containerItem = await iter.next();
     * while (!containerItem.done) {
     *   console.log(`Container ${i++}: ${containerItem.value.name}`);
     *   containerItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {
     *   if (response.containerItems) {
     *     for (const container of response.containerItems) {
     *       console.log(`Container ${i++}: ${container.name}`);
     *     }
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });
     * let response = (await iterator.next()).value;
     *
     * // Prints 2 container names
     * if (response.containerItems) {
     *   for (const container of response.containerItems) {
     *     console.log(`Container ${i++}: ${container.name}`);
     *   }
     * }
     *
     * // Gets next marker
     * let marker = response.continuationToken;
     * // Passing next marker as continuationToken
     * iterator = blobServiceClient
     *   .listContainers()
     *   .byPage({ continuationToken: marker, maxPageSize: 10 });
     * response = (await iterator.next()).value;
     *
     * // Prints 10 container names
     * if (response.containerItems) {
     *   for (const container of response.containerItems) {
     *      console.log(`Container ${i++}: ${container.name}`);
     *   }
     * }
     * ```
     *
     * @param options - Options to list containers.
     * @returns An asyncIterableIterator that supports paging.
     */ listContainers(options = {
    }) {
        if (options.prefix === "") options.prefix = undefined;
        const include = [];
        if (options.includeDeleted) include.push("deleted");
        if (options.includeMetadata) include.push("metadata");
        if (options.includeSystem) include.push("system");
        // AsyncIterableIterator to iterate over containers
        const listSegmentOptions = Object.assign(Object.assign({
        }, options), include.length > 0 ? {
            include
        } : {
        });
        const iter = this.listItems(listSegmentOptions);
        return {
            /**
             * The next method, part of the iteration protocol
             */ next () {
                return iter.next();
            },
            /**
             * The connection to the async iterator, part of the iteration protocol
             */ [Symbol.asyncIterator] () {
                return this;
            },
            /**
             * Return an AsyncIterableIterator that works a page at a time
             */ byPage: (settings = {
            })=>{
                return this.listSegments(settings.continuationToken, Object.assign({
                    maxPageSize: settings.maxPageSize
                }, listSegmentOptions));
            }
        };
    }
    /**
     * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).
     *
     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
     * bearer token authentication.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key
     *
     * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time
     * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time
     */ async getUserDelegationKey(startsOn, expiresOn, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobServiceClient-getUserDelegationKey", options);
        try {
            const response = await this.serviceContext.getUserDelegationKey({
                startsOn: _utilsCommon.truncatedISO8061Date(startsOn, false),
                expiresOn: _utilsCommon.truncatedISO8061Date(expiresOn, false)
            }, Object.assign({
                abortSignal: options.abortSignal
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
            const userDelegationKey = {
                signedObjectId: response.signedObjectId,
                signedTenantId: response.signedTenantId,
                signedStartsOn: new Date(response.signedStartsOn),
                signedExpiresOn: new Date(response.signedExpiresOn),
                signedService: response.signedService,
                signedVersion: response.signedVersion,
                value: response.value
            };
            const res = Object.assign({
                _response: response._response,
                requestId: response.requestId,
                clientRequestId: response.clientRequestId,
                version: response.version,
                date: response.date,
                errorCode: response.errorCode
            }, userDelegationKey);
            return res;
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Creates a BlobBatchClient object to conduct batch operations.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
     *
     * @returns A new BlobBatchClient object for this service.
     */ getBlobBatchClient() {
        return new _blobBatchClient.BlobBatchClient(this.url, this.pipeline);
    }
    /**
     * Only available for BlobServiceClient constructed with a shared key credential.
     *
     * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties
     * and parameters passed in. The SAS is signed by the shared key credential of the client.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas
     *
     * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.
     * @param permissions - Specifies the list of permissions to be associated with the SAS.
     * @param resourceTypes - Specifies the resource types associated with the shared access signature.
     * @param options - Optional parameters.
     * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
     */ generateAccountSasUrl(expiresOn, permissions = _accountSASPermissions.AccountSASPermissions.parse("r"), resourceTypes = "sco", options = {
    }) {
        if (!(this.credential instanceof _storageSharedKeyCredential.StorageSharedKeyCredential)) throw RangeError("Can only generate the account SAS when the client is initialized with a shared key credential");
        if (expiresOn === undefined) {
            const now = new Date();
            expiresOn = new Date(now.getTime() + 3600000);
        }
        const sas = _accountSASSignatureValues.generateAccountSASQueryParameters(Object.assign({
            permissions,
            expiresOn,
            resourceTypes,
            services: _accountSASServices.AccountSASServices.parse("b").toString()
        }, options), this.credential).toString();
        return _utilsCommon.appendToURLQuery(this.url, sas);
    }
}

},{"tslib":"lRdW5","@azure/core-http":"iSINq","@azure/core-tracing":"7R1NC","./generated/src/operations":"j9faG","./Pipeline":"bsozg","./ContainerClient":"45MBz","./utils/utils.common":"2SR3M","./credentials/StorageSharedKeyCredential":"jUFIX","./credentials/AnonymousCredential":"f0sOe","@azure/core-paging":"6o5vI","./utils/tracing":"m0KjB","./BlobBatchClient":"iF02i","./StorageClient":"gO9Kx","./sas/AccountSASPermissions":"8tbmf","./sas/AccountSASSignatureValues":"d00sP","./sas/AccountSASServices":"7HHJy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j9faG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */ var _service = require("./service");
parcelHelpers.exportAll(_service, exports);
var _container = require("./container");
parcelHelpers.exportAll(_container, exports);
var _blob = require("./blob");
parcelHelpers.exportAll(_blob, exports);
var _pageBlob = require("./pageBlob");
parcelHelpers.exportAll(_pageBlob, exports);
var _appendBlob = require("./appendBlob");
parcelHelpers.exportAll(_appendBlob, exports);
var _blockBlob = require("./blockBlob");
parcelHelpers.exportAll(_blockBlob, exports);

},{"./service":"1ribJ","./container":"2faTT","./blob":"kt7P2","./pageBlob":"fsHo1","./appendBlob":"6Mh9Y","./blockBlob":"fsPW1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ribJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Class representing a Service. */ parcelHelpers.export(exports, "Service", ()=>Service
);
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */ var _coreHttp = require("@azure/core-http");
var _mappers = require("../models/mappers");
var _parameters = require("../models/parameters");
class Service {
    /**
     * Initialize a new instance of the class Service class.
     * @param client Reference to the service client
     */ constructor(client){
        this.client = client;
    }
    /**
     * Sets properties for a storage account's Blob service endpoint, including properties for Storage
     * Analytics and CORS (Cross-Origin Resource Sharing) rules
     * @param blobServiceProperties The StorageService properties.
     * @param options The options parameters.
     */ setProperties(blobServiceProperties, options) {
        const operationArguments = {
            blobServiceProperties,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, setPropertiesOperationSpec);
    }
    /**
     * gets the properties of a storage account's Blob service, including properties for Storage Analytics
     * and CORS (Cross-Origin Resource Sharing) rules.
     * @param options The options parameters.
     */ getProperties(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec);
    }
    /**
     * Retrieves statistics related to replication for the Blob service. It is only available on the
     * secondary location endpoint when read-access geo-redundant replication is enabled for the storage
     * account.
     * @param options The options parameters.
     */ getStatistics(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, getStatisticsOperationSpec);
    }
    /**
     * The List Containers Segment operation returns a list of the containers under the specified account
     * @param options The options parameters.
     */ listContainersSegment(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, listContainersSegmentOperationSpec);
    }
    /**
     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
     * bearer token authentication.
     * @param keyInfo Key information
     * @param options The options parameters.
     */ getUserDelegationKey(keyInfo, options) {
        const operationArguments = {
            keyInfo,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, getUserDelegationKeyOperationSpec);
    }
    /**
     * Returns the sku name and account kind
     * @param options The options parameters.
     */ getAccountInfo(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec);
    }
    /**
     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
     * @param contentLength The length of the request.
     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch
     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>
     * @param body Initial data
     * @param options The options parameters.
     */ submitBatch(contentLength, multipartContentType, body, options) {
        const operationArguments = {
            contentLength,
            multipartContentType,
            body,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, submitBatchOperationSpec);
    }
    /**
     * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a
     * given search expression.  Filter blobs searches across all containers within a storage account but
     * can be scoped within the expression to a single container.
     * @param options The options parameters.
     */ filterBlobs(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, filterBlobsOperationSpec);
    }
}
// Operation Specifications
const xmlSerializer = new _coreHttp.Serializer(_mappers, /* isXml */ true);
const setPropertiesOperationSpec = {
    path: "/",
    httpMethod: "PUT",
    responses: {
        202: {
            headersMapper: _mappers.ServiceSetPropertiesHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ServiceSetPropertiesExceptionHeaders
        }
    },
    requestBody: _parameters.blobServiceProperties,
    queryParameters: [
        _parameters.restype,
        _parameters.comp,
        _parameters.timeoutInSeconds
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.contentType,
        _parameters.accept,
        _parameters.version,
        _parameters.requestId
    ],
    isXML: true,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: xmlSerializer
};
const getPropertiesOperationSpec = {
    path: "/",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: _mappers.BlobServiceProperties,
            headersMapper: _mappers.ServiceGetPropertiesHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ServiceGetPropertiesExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.restype,
        _parameters.comp,
        _parameters.timeoutInSeconds
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const getStatisticsOperationSpec = {
    path: "/",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: _mappers.BlobServiceStatistics,
            headersMapper: _mappers.ServiceGetStatisticsHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ServiceGetStatisticsExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.restype,
        _parameters.timeoutInSeconds,
        _parameters.comp1
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const listContainersSegmentOperationSpec = {
    path: "/",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: _mappers.ListContainersSegmentResponse,
            headersMapper: _mappers.ServiceListContainersSegmentHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ServiceListContainersSegmentExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp2,
        _parameters.prefix,
        _parameters.marker,
        _parameters.maxPageSize,
        _parameters.include
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const getUserDelegationKeyOperationSpec = {
    path: "/",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: _mappers.UserDelegationKey,
            headersMapper: _mappers.ServiceGetUserDelegationKeyHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ServiceGetUserDelegationKeyExceptionHeaders
        }
    },
    requestBody: _parameters.keyInfo,
    queryParameters: [
        _parameters.restype,
        _parameters.timeoutInSeconds,
        _parameters.comp3
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.contentType,
        _parameters.accept,
        _parameters.version,
        _parameters.requestId
    ],
    isXML: true,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: xmlSerializer
};
const getAccountInfoOperationSpec = {
    path: "/",
    httpMethod: "GET",
    responses: {
        200: {
            headersMapper: _mappers.ServiceGetAccountInfoHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ServiceGetAccountInfoExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.comp,
        _parameters.restype1
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.accept1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const submitBatchOperationSpec = {
    path: "/",
    httpMethod: "POST",
    responses: {
        202: {
            bodyMapper: {
                type: {
                    name: "Stream"
                },
                serializedName: "parsedResponse"
            },
            headersMapper: _mappers.ServiceSubmitBatchHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ServiceSubmitBatchExceptionHeaders
        }
    },
    requestBody: _parameters.body,
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp4
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.contentType,
        _parameters.accept,
        _parameters.version,
        _parameters.requestId,
        _parameters.contentLength,
        _parameters.multipartContentType
    ],
    isXML: true,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: xmlSerializer
};
const filterBlobsOperationSpec = {
    path: "/",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: _mappers.FilterBlobSegment,
            headersMapper: _mappers.ServiceFilterBlobsHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ServiceFilterBlobsExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.marker,
        _parameters.maxPageSize,
        _parameters.comp5,
        _parameters.where
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1
    ],
    isXML: true,
    serializer: xmlSerializer
};

},{"@azure/core-http":"iSINq","../models/mappers":"2ZlYI","../models/parameters":"dORMS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ZlYI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BlobServiceProperties", ()=>BlobServiceProperties
);
parcelHelpers.export(exports, "Logging", ()=>Logging
);
parcelHelpers.export(exports, "RetentionPolicy", ()=>RetentionPolicy
);
parcelHelpers.export(exports, "Metrics", ()=>Metrics
);
parcelHelpers.export(exports, "CorsRule", ()=>CorsRule
);
parcelHelpers.export(exports, "StaticWebsite", ()=>StaticWebsite
);
parcelHelpers.export(exports, "StorageError", ()=>StorageError
);
parcelHelpers.export(exports, "BlobServiceStatistics", ()=>BlobServiceStatistics
);
parcelHelpers.export(exports, "GeoReplication", ()=>GeoReplication
);
parcelHelpers.export(exports, "ListContainersSegmentResponse", ()=>ListContainersSegmentResponse
);
parcelHelpers.export(exports, "ContainerItem", ()=>ContainerItem
);
parcelHelpers.export(exports, "ContainerProperties", ()=>ContainerProperties
);
parcelHelpers.export(exports, "KeyInfo", ()=>KeyInfo
);
parcelHelpers.export(exports, "UserDelegationKey", ()=>UserDelegationKey
);
parcelHelpers.export(exports, "FilterBlobSegment", ()=>FilterBlobSegment
);
parcelHelpers.export(exports, "FilterBlobItem", ()=>FilterBlobItem
);
parcelHelpers.export(exports, "BlobTags", ()=>BlobTags
);
parcelHelpers.export(exports, "BlobTag", ()=>BlobTag
);
parcelHelpers.export(exports, "SignedIdentifier", ()=>SignedIdentifier
);
parcelHelpers.export(exports, "AccessPolicy", ()=>AccessPolicy
);
parcelHelpers.export(exports, "ListBlobsFlatSegmentResponse", ()=>ListBlobsFlatSegmentResponse
);
parcelHelpers.export(exports, "BlobFlatListSegment", ()=>BlobFlatListSegment
);
parcelHelpers.export(exports, "BlobItemInternal", ()=>BlobItemInternal
);
parcelHelpers.export(exports, "BlobName", ()=>BlobName
);
parcelHelpers.export(exports, "BlobPropertiesInternal", ()=>BlobPropertiesInternal
);
parcelHelpers.export(exports, "ListBlobsHierarchySegmentResponse", ()=>ListBlobsHierarchySegmentResponse
);
parcelHelpers.export(exports, "BlobHierarchyListSegment", ()=>BlobHierarchyListSegment
);
parcelHelpers.export(exports, "BlobPrefix", ()=>BlobPrefix
);
parcelHelpers.export(exports, "BlockLookupList", ()=>BlockLookupList
);
parcelHelpers.export(exports, "BlockList", ()=>BlockList
);
parcelHelpers.export(exports, "Block", ()=>Block
);
parcelHelpers.export(exports, "PageList", ()=>PageList
);
parcelHelpers.export(exports, "PageRange", ()=>PageRange
);
parcelHelpers.export(exports, "ClearRange", ()=>ClearRange
);
parcelHelpers.export(exports, "QueryRequest", ()=>QueryRequest
);
parcelHelpers.export(exports, "QuerySerialization", ()=>QuerySerialization
);
parcelHelpers.export(exports, "QueryFormat", ()=>QueryFormat
);
parcelHelpers.export(exports, "DelimitedTextConfiguration", ()=>DelimitedTextConfiguration
);
parcelHelpers.export(exports, "JsonTextConfiguration", ()=>JsonTextConfiguration
);
parcelHelpers.export(exports, "ArrowConfiguration", ()=>ArrowConfiguration
);
parcelHelpers.export(exports, "ArrowField", ()=>ArrowField
);
parcelHelpers.export(exports, "ServiceSetPropertiesHeaders", ()=>ServiceSetPropertiesHeaders
);
parcelHelpers.export(exports, "ServiceSetPropertiesExceptionHeaders", ()=>ServiceSetPropertiesExceptionHeaders
);
parcelHelpers.export(exports, "ServiceGetPropertiesHeaders", ()=>ServiceGetPropertiesHeaders
);
parcelHelpers.export(exports, "ServiceGetPropertiesExceptionHeaders", ()=>ServiceGetPropertiesExceptionHeaders
);
parcelHelpers.export(exports, "ServiceGetStatisticsHeaders", ()=>ServiceGetStatisticsHeaders
);
parcelHelpers.export(exports, "ServiceGetStatisticsExceptionHeaders", ()=>ServiceGetStatisticsExceptionHeaders
);
parcelHelpers.export(exports, "ServiceListContainersSegmentHeaders", ()=>ServiceListContainersSegmentHeaders
);
parcelHelpers.export(exports, "ServiceListContainersSegmentExceptionHeaders", ()=>ServiceListContainersSegmentExceptionHeaders
);
parcelHelpers.export(exports, "ServiceGetUserDelegationKeyHeaders", ()=>ServiceGetUserDelegationKeyHeaders
);
parcelHelpers.export(exports, "ServiceGetUserDelegationKeyExceptionHeaders", ()=>ServiceGetUserDelegationKeyExceptionHeaders
);
parcelHelpers.export(exports, "ServiceGetAccountInfoHeaders", ()=>ServiceGetAccountInfoHeaders
);
parcelHelpers.export(exports, "ServiceGetAccountInfoExceptionHeaders", ()=>ServiceGetAccountInfoExceptionHeaders
);
parcelHelpers.export(exports, "ServiceSubmitBatchHeaders", ()=>ServiceSubmitBatchHeaders
);
parcelHelpers.export(exports, "ServiceSubmitBatchExceptionHeaders", ()=>ServiceSubmitBatchExceptionHeaders
);
parcelHelpers.export(exports, "ServiceFilterBlobsHeaders", ()=>ServiceFilterBlobsHeaders
);
parcelHelpers.export(exports, "ServiceFilterBlobsExceptionHeaders", ()=>ServiceFilterBlobsExceptionHeaders
);
parcelHelpers.export(exports, "ContainerCreateHeaders", ()=>ContainerCreateHeaders
);
parcelHelpers.export(exports, "ContainerCreateExceptionHeaders", ()=>ContainerCreateExceptionHeaders
);
parcelHelpers.export(exports, "ContainerGetPropertiesHeaders", ()=>ContainerGetPropertiesHeaders
);
parcelHelpers.export(exports, "ContainerGetPropertiesExceptionHeaders", ()=>ContainerGetPropertiesExceptionHeaders
);
parcelHelpers.export(exports, "ContainerDeleteHeaders", ()=>ContainerDeleteHeaders
);
parcelHelpers.export(exports, "ContainerDeleteExceptionHeaders", ()=>ContainerDeleteExceptionHeaders
);
parcelHelpers.export(exports, "ContainerSetMetadataHeaders", ()=>ContainerSetMetadataHeaders
);
parcelHelpers.export(exports, "ContainerSetMetadataExceptionHeaders", ()=>ContainerSetMetadataExceptionHeaders
);
parcelHelpers.export(exports, "ContainerGetAccessPolicyHeaders", ()=>ContainerGetAccessPolicyHeaders
);
parcelHelpers.export(exports, "ContainerGetAccessPolicyExceptionHeaders", ()=>ContainerGetAccessPolicyExceptionHeaders
);
parcelHelpers.export(exports, "ContainerSetAccessPolicyHeaders", ()=>ContainerSetAccessPolicyHeaders
);
parcelHelpers.export(exports, "ContainerSetAccessPolicyExceptionHeaders", ()=>ContainerSetAccessPolicyExceptionHeaders
);
parcelHelpers.export(exports, "ContainerRestoreHeaders", ()=>ContainerRestoreHeaders
);
parcelHelpers.export(exports, "ContainerRestoreExceptionHeaders", ()=>ContainerRestoreExceptionHeaders
);
parcelHelpers.export(exports, "ContainerRenameHeaders", ()=>ContainerRenameHeaders
);
parcelHelpers.export(exports, "ContainerRenameExceptionHeaders", ()=>ContainerRenameExceptionHeaders
);
parcelHelpers.export(exports, "ContainerSubmitBatchHeaders", ()=>ContainerSubmitBatchHeaders
);
parcelHelpers.export(exports, "ContainerSubmitBatchExceptionHeaders", ()=>ContainerSubmitBatchExceptionHeaders
);
parcelHelpers.export(exports, "ContainerFilterBlobsHeaders", ()=>ContainerFilterBlobsHeaders
);
parcelHelpers.export(exports, "ContainerFilterBlobsExceptionHeaders", ()=>ContainerFilterBlobsExceptionHeaders
);
parcelHelpers.export(exports, "ContainerAcquireLeaseHeaders", ()=>ContainerAcquireLeaseHeaders
);
parcelHelpers.export(exports, "ContainerAcquireLeaseExceptionHeaders", ()=>ContainerAcquireLeaseExceptionHeaders
);
parcelHelpers.export(exports, "ContainerReleaseLeaseHeaders", ()=>ContainerReleaseLeaseHeaders
);
parcelHelpers.export(exports, "ContainerReleaseLeaseExceptionHeaders", ()=>ContainerReleaseLeaseExceptionHeaders
);
parcelHelpers.export(exports, "ContainerRenewLeaseHeaders", ()=>ContainerRenewLeaseHeaders
);
parcelHelpers.export(exports, "ContainerRenewLeaseExceptionHeaders", ()=>ContainerRenewLeaseExceptionHeaders
);
parcelHelpers.export(exports, "ContainerBreakLeaseHeaders", ()=>ContainerBreakLeaseHeaders
);
parcelHelpers.export(exports, "ContainerBreakLeaseExceptionHeaders", ()=>ContainerBreakLeaseExceptionHeaders
);
parcelHelpers.export(exports, "ContainerChangeLeaseHeaders", ()=>ContainerChangeLeaseHeaders
);
parcelHelpers.export(exports, "ContainerChangeLeaseExceptionHeaders", ()=>ContainerChangeLeaseExceptionHeaders
);
parcelHelpers.export(exports, "ContainerListBlobFlatSegmentHeaders", ()=>ContainerListBlobFlatSegmentHeaders
);
parcelHelpers.export(exports, "ContainerListBlobFlatSegmentExceptionHeaders", ()=>ContainerListBlobFlatSegmentExceptionHeaders
);
parcelHelpers.export(exports, "ContainerListBlobHierarchySegmentHeaders", ()=>ContainerListBlobHierarchySegmentHeaders
);
parcelHelpers.export(exports, "ContainerListBlobHierarchySegmentExceptionHeaders", ()=>ContainerListBlobHierarchySegmentExceptionHeaders
);
parcelHelpers.export(exports, "ContainerGetAccountInfoHeaders", ()=>ContainerGetAccountInfoHeaders
);
parcelHelpers.export(exports, "ContainerGetAccountInfoExceptionHeaders", ()=>ContainerGetAccountInfoExceptionHeaders
);
parcelHelpers.export(exports, "BlobDownloadHeaders", ()=>BlobDownloadHeaders
);
parcelHelpers.export(exports, "BlobDownloadExceptionHeaders", ()=>BlobDownloadExceptionHeaders
);
parcelHelpers.export(exports, "BlobGetPropertiesHeaders", ()=>BlobGetPropertiesHeaders
);
parcelHelpers.export(exports, "BlobGetPropertiesExceptionHeaders", ()=>BlobGetPropertiesExceptionHeaders
);
parcelHelpers.export(exports, "BlobDeleteHeaders", ()=>BlobDeleteHeaders
);
parcelHelpers.export(exports, "BlobDeleteExceptionHeaders", ()=>BlobDeleteExceptionHeaders
);
parcelHelpers.export(exports, "BlobUndeleteHeaders", ()=>BlobUndeleteHeaders
);
parcelHelpers.export(exports, "BlobUndeleteExceptionHeaders", ()=>BlobUndeleteExceptionHeaders
);
parcelHelpers.export(exports, "BlobSetExpiryHeaders", ()=>BlobSetExpiryHeaders
);
parcelHelpers.export(exports, "BlobSetExpiryExceptionHeaders", ()=>BlobSetExpiryExceptionHeaders
);
parcelHelpers.export(exports, "BlobSetHttpHeadersHeaders", ()=>BlobSetHttpHeadersHeaders
);
parcelHelpers.export(exports, "BlobSetHttpHeadersExceptionHeaders", ()=>BlobSetHttpHeadersExceptionHeaders
);
parcelHelpers.export(exports, "BlobSetImmutabilityPolicyHeaders", ()=>BlobSetImmutabilityPolicyHeaders
);
parcelHelpers.export(exports, "BlobSetImmutabilityPolicyExceptionHeaders", ()=>BlobSetImmutabilityPolicyExceptionHeaders
);
parcelHelpers.export(exports, "BlobDeleteImmutabilityPolicyHeaders", ()=>BlobDeleteImmutabilityPolicyHeaders
);
parcelHelpers.export(exports, "BlobDeleteImmutabilityPolicyExceptionHeaders", ()=>BlobDeleteImmutabilityPolicyExceptionHeaders
);
parcelHelpers.export(exports, "BlobSetLegalHoldHeaders", ()=>BlobSetLegalHoldHeaders
);
parcelHelpers.export(exports, "BlobSetLegalHoldExceptionHeaders", ()=>BlobSetLegalHoldExceptionHeaders
);
parcelHelpers.export(exports, "BlobSetMetadataHeaders", ()=>BlobSetMetadataHeaders
);
parcelHelpers.export(exports, "BlobSetMetadataExceptionHeaders", ()=>BlobSetMetadataExceptionHeaders
);
parcelHelpers.export(exports, "BlobAcquireLeaseHeaders", ()=>BlobAcquireLeaseHeaders
);
parcelHelpers.export(exports, "BlobAcquireLeaseExceptionHeaders", ()=>BlobAcquireLeaseExceptionHeaders
);
parcelHelpers.export(exports, "BlobReleaseLeaseHeaders", ()=>BlobReleaseLeaseHeaders
);
parcelHelpers.export(exports, "BlobReleaseLeaseExceptionHeaders", ()=>BlobReleaseLeaseExceptionHeaders
);
parcelHelpers.export(exports, "BlobRenewLeaseHeaders", ()=>BlobRenewLeaseHeaders
);
parcelHelpers.export(exports, "BlobRenewLeaseExceptionHeaders", ()=>BlobRenewLeaseExceptionHeaders
);
parcelHelpers.export(exports, "BlobChangeLeaseHeaders", ()=>BlobChangeLeaseHeaders
);
parcelHelpers.export(exports, "BlobChangeLeaseExceptionHeaders", ()=>BlobChangeLeaseExceptionHeaders
);
parcelHelpers.export(exports, "BlobBreakLeaseHeaders", ()=>BlobBreakLeaseHeaders
);
parcelHelpers.export(exports, "BlobBreakLeaseExceptionHeaders", ()=>BlobBreakLeaseExceptionHeaders
);
parcelHelpers.export(exports, "BlobCreateSnapshotHeaders", ()=>BlobCreateSnapshotHeaders
);
parcelHelpers.export(exports, "BlobCreateSnapshotExceptionHeaders", ()=>BlobCreateSnapshotExceptionHeaders
);
parcelHelpers.export(exports, "BlobStartCopyFromURLHeaders", ()=>BlobStartCopyFromURLHeaders
);
parcelHelpers.export(exports, "BlobStartCopyFromURLExceptionHeaders", ()=>BlobStartCopyFromURLExceptionHeaders
);
parcelHelpers.export(exports, "BlobCopyFromURLHeaders", ()=>BlobCopyFromURLHeaders
);
parcelHelpers.export(exports, "BlobCopyFromURLExceptionHeaders", ()=>BlobCopyFromURLExceptionHeaders
);
parcelHelpers.export(exports, "BlobAbortCopyFromURLHeaders", ()=>BlobAbortCopyFromURLHeaders
);
parcelHelpers.export(exports, "BlobAbortCopyFromURLExceptionHeaders", ()=>BlobAbortCopyFromURLExceptionHeaders
);
parcelHelpers.export(exports, "BlobSetTierHeaders", ()=>BlobSetTierHeaders
);
parcelHelpers.export(exports, "BlobSetTierExceptionHeaders", ()=>BlobSetTierExceptionHeaders
);
parcelHelpers.export(exports, "BlobGetAccountInfoHeaders", ()=>BlobGetAccountInfoHeaders
);
parcelHelpers.export(exports, "BlobGetAccountInfoExceptionHeaders", ()=>BlobGetAccountInfoExceptionHeaders
);
parcelHelpers.export(exports, "BlobQueryHeaders", ()=>BlobQueryHeaders
);
parcelHelpers.export(exports, "BlobQueryExceptionHeaders", ()=>BlobQueryExceptionHeaders
);
parcelHelpers.export(exports, "BlobGetTagsHeaders", ()=>BlobGetTagsHeaders
);
parcelHelpers.export(exports, "BlobGetTagsExceptionHeaders", ()=>BlobGetTagsExceptionHeaders
);
parcelHelpers.export(exports, "BlobSetTagsHeaders", ()=>BlobSetTagsHeaders
);
parcelHelpers.export(exports, "BlobSetTagsExceptionHeaders", ()=>BlobSetTagsExceptionHeaders
);
parcelHelpers.export(exports, "PageBlobCreateHeaders", ()=>PageBlobCreateHeaders
);
parcelHelpers.export(exports, "PageBlobCreateExceptionHeaders", ()=>PageBlobCreateExceptionHeaders
);
parcelHelpers.export(exports, "PageBlobUploadPagesHeaders", ()=>PageBlobUploadPagesHeaders
);
parcelHelpers.export(exports, "PageBlobUploadPagesExceptionHeaders", ()=>PageBlobUploadPagesExceptionHeaders
);
parcelHelpers.export(exports, "PageBlobClearPagesHeaders", ()=>PageBlobClearPagesHeaders
);
parcelHelpers.export(exports, "PageBlobClearPagesExceptionHeaders", ()=>PageBlobClearPagesExceptionHeaders
);
parcelHelpers.export(exports, "PageBlobUploadPagesFromURLHeaders", ()=>PageBlobUploadPagesFromURLHeaders
);
parcelHelpers.export(exports, "PageBlobUploadPagesFromURLExceptionHeaders", ()=>PageBlobUploadPagesFromURLExceptionHeaders
);
parcelHelpers.export(exports, "PageBlobGetPageRangesHeaders", ()=>PageBlobGetPageRangesHeaders
);
parcelHelpers.export(exports, "PageBlobGetPageRangesExceptionHeaders", ()=>PageBlobGetPageRangesExceptionHeaders
);
parcelHelpers.export(exports, "PageBlobGetPageRangesDiffHeaders", ()=>PageBlobGetPageRangesDiffHeaders
);
parcelHelpers.export(exports, "PageBlobGetPageRangesDiffExceptionHeaders", ()=>PageBlobGetPageRangesDiffExceptionHeaders
);
parcelHelpers.export(exports, "PageBlobResizeHeaders", ()=>PageBlobResizeHeaders
);
parcelHelpers.export(exports, "PageBlobResizeExceptionHeaders", ()=>PageBlobResizeExceptionHeaders
);
parcelHelpers.export(exports, "PageBlobUpdateSequenceNumberHeaders", ()=>PageBlobUpdateSequenceNumberHeaders
);
parcelHelpers.export(exports, "PageBlobUpdateSequenceNumberExceptionHeaders", ()=>PageBlobUpdateSequenceNumberExceptionHeaders
);
parcelHelpers.export(exports, "PageBlobCopyIncrementalHeaders", ()=>PageBlobCopyIncrementalHeaders
);
parcelHelpers.export(exports, "PageBlobCopyIncrementalExceptionHeaders", ()=>PageBlobCopyIncrementalExceptionHeaders
);
parcelHelpers.export(exports, "AppendBlobCreateHeaders", ()=>AppendBlobCreateHeaders
);
parcelHelpers.export(exports, "AppendBlobCreateExceptionHeaders", ()=>AppendBlobCreateExceptionHeaders
);
parcelHelpers.export(exports, "AppendBlobAppendBlockHeaders", ()=>AppendBlobAppendBlockHeaders
);
parcelHelpers.export(exports, "AppendBlobAppendBlockExceptionHeaders", ()=>AppendBlobAppendBlockExceptionHeaders
);
parcelHelpers.export(exports, "AppendBlobAppendBlockFromUrlHeaders", ()=>AppendBlobAppendBlockFromUrlHeaders
);
parcelHelpers.export(exports, "AppendBlobAppendBlockFromUrlExceptionHeaders", ()=>AppendBlobAppendBlockFromUrlExceptionHeaders
);
parcelHelpers.export(exports, "AppendBlobSealHeaders", ()=>AppendBlobSealHeaders
);
parcelHelpers.export(exports, "AppendBlobSealExceptionHeaders", ()=>AppendBlobSealExceptionHeaders
);
parcelHelpers.export(exports, "BlockBlobUploadHeaders", ()=>BlockBlobUploadHeaders
);
parcelHelpers.export(exports, "BlockBlobUploadExceptionHeaders", ()=>BlockBlobUploadExceptionHeaders
);
parcelHelpers.export(exports, "BlockBlobPutBlobFromUrlHeaders", ()=>BlockBlobPutBlobFromUrlHeaders
);
parcelHelpers.export(exports, "BlockBlobPutBlobFromUrlExceptionHeaders", ()=>BlockBlobPutBlobFromUrlExceptionHeaders
);
parcelHelpers.export(exports, "BlockBlobStageBlockHeaders", ()=>BlockBlobStageBlockHeaders
);
parcelHelpers.export(exports, "BlockBlobStageBlockExceptionHeaders", ()=>BlockBlobStageBlockExceptionHeaders
);
parcelHelpers.export(exports, "BlockBlobStageBlockFromURLHeaders", ()=>BlockBlobStageBlockFromURLHeaders
);
parcelHelpers.export(exports, "BlockBlobStageBlockFromURLExceptionHeaders", ()=>BlockBlobStageBlockFromURLExceptionHeaders
);
parcelHelpers.export(exports, "BlockBlobCommitBlockListHeaders", ()=>BlockBlobCommitBlockListHeaders
);
parcelHelpers.export(exports, "BlockBlobCommitBlockListExceptionHeaders", ()=>BlockBlobCommitBlockListExceptionHeaders
);
parcelHelpers.export(exports, "BlockBlobGetBlockListHeaders", ()=>BlockBlobGetBlockListHeaders
);
parcelHelpers.export(exports, "BlockBlobGetBlockListExceptionHeaders", ()=>BlockBlobGetBlockListExceptionHeaders
);
const BlobServiceProperties = {
    serializedName: "BlobServiceProperties",
    xmlName: "StorageServiceProperties",
    type: {
        name: "Composite",
        className: "BlobServiceProperties",
        modelProperties: {
            blobAnalyticsLogging: {
                serializedName: "Logging",
                xmlName: "Logging",
                type: {
                    name: "Composite",
                    className: "Logging"
                }
            },
            hourMetrics: {
                serializedName: "HourMetrics",
                xmlName: "HourMetrics",
                type: {
                    name: "Composite",
                    className: "Metrics"
                }
            },
            minuteMetrics: {
                serializedName: "MinuteMetrics",
                xmlName: "MinuteMetrics",
                type: {
                    name: "Composite",
                    className: "Metrics"
                }
            },
            cors: {
                serializedName: "Cors",
                xmlName: "Cors",
                xmlIsWrapped: true,
                xmlElementName: "CorsRule",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CorsRule"
                        }
                    }
                }
            },
            defaultServiceVersion: {
                serializedName: "DefaultServiceVersion",
                xmlName: "DefaultServiceVersion",
                type: {
                    name: "String"
                }
            },
            deleteRetentionPolicy: {
                serializedName: "DeleteRetentionPolicy",
                xmlName: "DeleteRetentionPolicy",
                type: {
                    name: "Composite",
                    className: "RetentionPolicy"
                }
            },
            staticWebsite: {
                serializedName: "StaticWebsite",
                xmlName: "StaticWebsite",
                type: {
                    name: "Composite",
                    className: "StaticWebsite"
                }
            }
        }
    }
};
const Logging = {
    serializedName: "Logging",
    type: {
        name: "Composite",
        className: "Logging",
        modelProperties: {
            version: {
                serializedName: "Version",
                required: true,
                xmlName: "Version",
                type: {
                    name: "String"
                }
            },
            deleteProperty: {
                serializedName: "Delete",
                required: true,
                xmlName: "Delete",
                type: {
                    name: "Boolean"
                }
            },
            read: {
                serializedName: "Read",
                required: true,
                xmlName: "Read",
                type: {
                    name: "Boolean"
                }
            },
            write: {
                serializedName: "Write",
                required: true,
                xmlName: "Write",
                type: {
                    name: "Boolean"
                }
            },
            retentionPolicy: {
                serializedName: "RetentionPolicy",
                xmlName: "RetentionPolicy",
                type: {
                    name: "Composite",
                    className: "RetentionPolicy"
                }
            }
        }
    }
};
const RetentionPolicy = {
    serializedName: "RetentionPolicy",
    type: {
        name: "Composite",
        className: "RetentionPolicy",
        modelProperties: {
            enabled: {
                serializedName: "Enabled",
                required: true,
                xmlName: "Enabled",
                type: {
                    name: "Boolean"
                }
            },
            days: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "Days",
                xmlName: "Days",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Metrics = {
    serializedName: "Metrics",
    type: {
        name: "Composite",
        className: "Metrics",
        modelProperties: {
            version: {
                serializedName: "Version",
                xmlName: "Version",
                type: {
                    name: "String"
                }
            },
            enabled: {
                serializedName: "Enabled",
                required: true,
                xmlName: "Enabled",
                type: {
                    name: "Boolean"
                }
            },
            includeAPIs: {
                serializedName: "IncludeAPIs",
                xmlName: "IncludeAPIs",
                type: {
                    name: "Boolean"
                }
            },
            retentionPolicy: {
                serializedName: "RetentionPolicy",
                xmlName: "RetentionPolicy",
                type: {
                    name: "Composite",
                    className: "RetentionPolicy"
                }
            }
        }
    }
};
const CorsRule = {
    serializedName: "CorsRule",
    type: {
        name: "Composite",
        className: "CorsRule",
        modelProperties: {
            allowedOrigins: {
                serializedName: "AllowedOrigins",
                required: true,
                xmlName: "AllowedOrigins",
                type: {
                    name: "String"
                }
            },
            allowedMethods: {
                serializedName: "AllowedMethods",
                required: true,
                xmlName: "AllowedMethods",
                type: {
                    name: "String"
                }
            },
            allowedHeaders: {
                serializedName: "AllowedHeaders",
                required: true,
                xmlName: "AllowedHeaders",
                type: {
                    name: "String"
                }
            },
            exposedHeaders: {
                serializedName: "ExposedHeaders",
                required: true,
                xmlName: "ExposedHeaders",
                type: {
                    name: "String"
                }
            },
            maxAgeInSeconds: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "MaxAgeInSeconds",
                required: true,
                xmlName: "MaxAgeInSeconds",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const StaticWebsite = {
    serializedName: "StaticWebsite",
    type: {
        name: "Composite",
        className: "StaticWebsite",
        modelProperties: {
            enabled: {
                serializedName: "Enabled",
                required: true,
                xmlName: "Enabled",
                type: {
                    name: "Boolean"
                }
            },
            indexDocument: {
                serializedName: "IndexDocument",
                xmlName: "IndexDocument",
                type: {
                    name: "String"
                }
            },
            errorDocument404Path: {
                serializedName: "ErrorDocument404Path",
                xmlName: "ErrorDocument404Path",
                type: {
                    name: "String"
                }
            },
            defaultIndexDocumentPath: {
                serializedName: "DefaultIndexDocumentPath",
                xmlName: "DefaultIndexDocumentPath",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageError = {
    serializedName: "StorageError",
    type: {
        name: "Composite",
        className: "StorageError",
        modelProperties: {
            message: {
                serializedName: "Message",
                xmlName: "Message",
                type: {
                    name: "String"
                }
            },
            code: {
                serializedName: "Code",
                xmlName: "Code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobServiceStatistics = {
    serializedName: "BlobServiceStatistics",
    xmlName: "StorageServiceStats",
    type: {
        name: "Composite",
        className: "BlobServiceStatistics",
        modelProperties: {
            geoReplication: {
                serializedName: "GeoReplication",
                xmlName: "GeoReplication",
                type: {
                    name: "Composite",
                    className: "GeoReplication"
                }
            }
        }
    }
};
const GeoReplication = {
    serializedName: "GeoReplication",
    type: {
        name: "Composite",
        className: "GeoReplication",
        modelProperties: {
            status: {
                serializedName: "Status",
                required: true,
                xmlName: "Status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "live",
                        "bootstrap",
                        "unavailable"
                    ]
                }
            },
            lastSyncOn: {
                serializedName: "LastSyncTime",
                required: true,
                xmlName: "LastSyncTime",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const ListContainersSegmentResponse = {
    serializedName: "ListContainersSegmentResponse",
    xmlName: "EnumerationResults",
    type: {
        name: "Composite",
        className: "ListContainersSegmentResponse",
        modelProperties: {
            serviceEndpoint: {
                serializedName: "ServiceEndpoint",
                required: true,
                xmlName: "ServiceEndpoint",
                xmlIsAttribute: true,
                type: {
                    name: "String"
                }
            },
            prefix: {
                serializedName: "Prefix",
                xmlName: "Prefix",
                type: {
                    name: "String"
                }
            },
            marker: {
                serializedName: "Marker",
                xmlName: "Marker",
                type: {
                    name: "String"
                }
            },
            maxPageSize: {
                serializedName: "MaxResults",
                xmlName: "MaxResults",
                type: {
                    name: "Number"
                }
            },
            containerItems: {
                serializedName: "ContainerItems",
                required: true,
                xmlName: "Containers",
                xmlIsWrapped: true,
                xmlElementName: "Container",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContainerItem"
                        }
                    }
                }
            },
            continuationToken: {
                serializedName: "NextMarker",
                xmlName: "NextMarker",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerItem = {
    serializedName: "ContainerItem",
    xmlName: "Container",
    type: {
        name: "Composite",
        className: "ContainerItem",
        modelProperties: {
            name: {
                serializedName: "Name",
                required: true,
                xmlName: "Name",
                type: {
                    name: "String"
                }
            },
            deleted: {
                serializedName: "Deleted",
                xmlName: "Deleted",
                type: {
                    name: "Boolean"
                }
            },
            version: {
                serializedName: "Version",
                xmlName: "Version",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "Properties",
                xmlName: "Properties",
                type: {
                    name: "Composite",
                    className: "ContainerProperties"
                }
            },
            metadata: {
                serializedName: "Metadata",
                xmlName: "Metadata",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ContainerProperties = {
    serializedName: "ContainerProperties",
    type: {
        name: "Composite",
        className: "ContainerProperties",
        modelProperties: {
            lastModified: {
                serializedName: "Last-Modified",
                required: true,
                xmlName: "Last-Modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            etag: {
                serializedName: "Etag",
                required: true,
                xmlName: "Etag",
                type: {
                    name: "String"
                }
            },
            leaseStatus: {
                serializedName: "LeaseStatus",
                xmlName: "LeaseStatus",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "locked",
                        "unlocked"
                    ]
                }
            },
            leaseState: {
                serializedName: "LeaseState",
                xmlName: "LeaseState",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "available",
                        "leased",
                        "expired",
                        "breaking",
                        "broken"
                    ]
                }
            },
            leaseDuration: {
                serializedName: "LeaseDuration",
                xmlName: "LeaseDuration",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "infinite",
                        "fixed"
                    ]
                }
            },
            publicAccess: {
                serializedName: "PublicAccess",
                xmlName: "PublicAccess",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "container",
                        "blob"
                    ]
                }
            },
            hasImmutabilityPolicy: {
                serializedName: "HasImmutabilityPolicy",
                xmlName: "HasImmutabilityPolicy",
                type: {
                    name: "Boolean"
                }
            },
            hasLegalHold: {
                serializedName: "HasLegalHold",
                xmlName: "HasLegalHold",
                type: {
                    name: "Boolean"
                }
            },
            defaultEncryptionScope: {
                serializedName: "DefaultEncryptionScope",
                xmlName: "DefaultEncryptionScope",
                type: {
                    name: "String"
                }
            },
            preventEncryptionScopeOverride: {
                serializedName: "DenyEncryptionScopeOverride",
                xmlName: "DenyEncryptionScopeOverride",
                type: {
                    name: "Boolean"
                }
            },
            deletedOn: {
                serializedName: "DeletedTime",
                xmlName: "DeletedTime",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            remainingRetentionDays: {
                serializedName: "RemainingRetentionDays",
                xmlName: "RemainingRetentionDays",
                type: {
                    name: "Number"
                }
            },
            isImmutableStorageWithVersioningEnabled: {
                serializedName: "ImmutableStorageWithVersioningEnabled",
                xmlName: "ImmutableStorageWithVersioningEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const KeyInfo = {
    serializedName: "KeyInfo",
    type: {
        name: "Composite",
        className: "KeyInfo",
        modelProperties: {
            startsOn: {
                serializedName: "Start",
                required: true,
                xmlName: "Start",
                type: {
                    name: "String"
                }
            },
            expiresOn: {
                serializedName: "Expiry",
                required: true,
                xmlName: "Expiry",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UserDelegationKey = {
    serializedName: "UserDelegationKey",
    type: {
        name: "Composite",
        className: "UserDelegationKey",
        modelProperties: {
            signedObjectId: {
                serializedName: "SignedOid",
                required: true,
                xmlName: "SignedOid",
                type: {
                    name: "String"
                }
            },
            signedTenantId: {
                serializedName: "SignedTid",
                required: true,
                xmlName: "SignedTid",
                type: {
                    name: "String"
                }
            },
            signedStartsOn: {
                serializedName: "SignedStart",
                required: true,
                xmlName: "SignedStart",
                type: {
                    name: "String"
                }
            },
            signedExpiresOn: {
                serializedName: "SignedExpiry",
                required: true,
                xmlName: "SignedExpiry",
                type: {
                    name: "String"
                }
            },
            signedService: {
                serializedName: "SignedService",
                required: true,
                xmlName: "SignedService",
                type: {
                    name: "String"
                }
            },
            signedVersion: {
                serializedName: "SignedVersion",
                required: true,
                xmlName: "SignedVersion",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "Value",
                required: true,
                xmlName: "Value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FilterBlobSegment = {
    serializedName: "FilterBlobSegment",
    xmlName: "EnumerationResults",
    type: {
        name: "Composite",
        className: "FilterBlobSegment",
        modelProperties: {
            serviceEndpoint: {
                serializedName: "ServiceEndpoint",
                required: true,
                xmlName: "ServiceEndpoint",
                xmlIsAttribute: true,
                type: {
                    name: "String"
                }
            },
            where: {
                serializedName: "Where",
                required: true,
                xmlName: "Where",
                type: {
                    name: "String"
                }
            },
            blobs: {
                serializedName: "Blobs",
                required: true,
                xmlName: "Blobs",
                xmlIsWrapped: true,
                xmlElementName: "Blob",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FilterBlobItem"
                        }
                    }
                }
            },
            continuationToken: {
                serializedName: "NextMarker",
                xmlName: "NextMarker",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FilterBlobItem = {
    serializedName: "FilterBlobItem",
    xmlName: "Blob",
    type: {
        name: "Composite",
        className: "FilterBlobItem",
        modelProperties: {
            name: {
                serializedName: "Name",
                required: true,
                xmlName: "Name",
                type: {
                    name: "String"
                }
            },
            containerName: {
                serializedName: "ContainerName",
                required: true,
                xmlName: "ContainerName",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "Tags",
                xmlName: "Tags",
                type: {
                    name: "Composite",
                    className: "BlobTags"
                }
            }
        }
    }
};
const BlobTags = {
    serializedName: "BlobTags",
    xmlName: "Tags",
    type: {
        name: "Composite",
        className: "BlobTags",
        modelProperties: {
            blobTagSet: {
                serializedName: "BlobTagSet",
                required: true,
                xmlName: "TagSet",
                xmlIsWrapped: true,
                xmlElementName: "Tag",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BlobTag"
                        }
                    }
                }
            }
        }
    }
};
const BlobTag = {
    serializedName: "BlobTag",
    xmlName: "Tag",
    type: {
        name: "Composite",
        className: "BlobTag",
        modelProperties: {
            key: {
                serializedName: "Key",
                required: true,
                xmlName: "Key",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "Value",
                required: true,
                xmlName: "Value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SignedIdentifier = {
    serializedName: "SignedIdentifier",
    xmlName: "SignedIdentifier",
    type: {
        name: "Composite",
        className: "SignedIdentifier",
        modelProperties: {
            id: {
                serializedName: "Id",
                required: true,
                xmlName: "Id",
                type: {
                    name: "String"
                }
            },
            accessPolicy: {
                serializedName: "AccessPolicy",
                xmlName: "AccessPolicy",
                type: {
                    name: "Composite",
                    className: "AccessPolicy"
                }
            }
        }
    }
};
const AccessPolicy = {
    serializedName: "AccessPolicy",
    type: {
        name: "Composite",
        className: "AccessPolicy",
        modelProperties: {
            startsOn: {
                serializedName: "Start",
                xmlName: "Start",
                type: {
                    name: "String"
                }
            },
            expiresOn: {
                serializedName: "Expiry",
                xmlName: "Expiry",
                type: {
                    name: "String"
                }
            },
            permissions: {
                serializedName: "Permission",
                xmlName: "Permission",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ListBlobsFlatSegmentResponse = {
    serializedName: "ListBlobsFlatSegmentResponse",
    xmlName: "EnumerationResults",
    type: {
        name: "Composite",
        className: "ListBlobsFlatSegmentResponse",
        modelProperties: {
            serviceEndpoint: {
                serializedName: "ServiceEndpoint",
                required: true,
                xmlName: "ServiceEndpoint",
                xmlIsAttribute: true,
                type: {
                    name: "String"
                }
            },
            containerName: {
                serializedName: "ContainerName",
                required: true,
                xmlName: "ContainerName",
                xmlIsAttribute: true,
                type: {
                    name: "String"
                }
            },
            prefix: {
                serializedName: "Prefix",
                xmlName: "Prefix",
                type: {
                    name: "String"
                }
            },
            marker: {
                serializedName: "Marker",
                xmlName: "Marker",
                type: {
                    name: "String"
                }
            },
            maxPageSize: {
                serializedName: "MaxResults",
                xmlName: "MaxResults",
                type: {
                    name: "Number"
                }
            },
            segment: {
                serializedName: "Segment",
                xmlName: "Blobs",
                type: {
                    name: "Composite",
                    className: "BlobFlatListSegment"
                }
            },
            continuationToken: {
                serializedName: "NextMarker",
                xmlName: "NextMarker",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobFlatListSegment = {
    serializedName: "BlobFlatListSegment",
    xmlName: "Blobs",
    type: {
        name: "Composite",
        className: "BlobFlatListSegment",
        modelProperties: {
            blobItems: {
                serializedName: "BlobItems",
                required: true,
                xmlName: "BlobItems",
                xmlElementName: "Blob",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BlobItemInternal"
                        }
                    }
                }
            }
        }
    }
};
const BlobItemInternal = {
    serializedName: "BlobItemInternal",
    xmlName: "Blob",
    type: {
        name: "Composite",
        className: "BlobItemInternal",
        modelProperties: {
            name: {
                serializedName: "Name",
                xmlName: "Name",
                type: {
                    name: "Composite",
                    className: "BlobName"
                }
            },
            deleted: {
                serializedName: "Deleted",
                required: true,
                xmlName: "Deleted",
                type: {
                    name: "Boolean"
                }
            },
            snapshot: {
                serializedName: "Snapshot",
                required: true,
                xmlName: "Snapshot",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "VersionId",
                xmlName: "VersionId",
                type: {
                    name: "String"
                }
            },
            isCurrentVersion: {
                serializedName: "IsCurrentVersion",
                xmlName: "IsCurrentVersion",
                type: {
                    name: "Boolean"
                }
            },
            properties: {
                serializedName: "Properties",
                xmlName: "Properties",
                type: {
                    name: "Composite",
                    className: "BlobPropertiesInternal"
                }
            },
            metadata: {
                serializedName: "Metadata",
                xmlName: "Metadata",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            blobTags: {
                serializedName: "BlobTags",
                xmlName: "Tags",
                type: {
                    name: "Composite",
                    className: "BlobTags"
                }
            },
            objectReplicationMetadata: {
                serializedName: "ObjectReplicationMetadata",
                xmlName: "OrMetadata",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            hasVersionsOnly: {
                serializedName: "HasVersionsOnly",
                xmlName: "HasVersionsOnly",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const BlobName = {
    serializedName: "BlobName",
    type: {
        name: "Composite",
        className: "BlobName",
        modelProperties: {
            encoded: {
                serializedName: "Encoded",
                xmlName: "Encoded",
                xmlIsAttribute: true,
                type: {
                    name: "Boolean"
                }
            },
            content: {
                serializedName: "content",
                xmlName: "content",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobPropertiesInternal = {
    serializedName: "BlobPropertiesInternal",
    xmlName: "Properties",
    type: {
        name: "Composite",
        className: "BlobPropertiesInternal",
        modelProperties: {
            createdOn: {
                serializedName: "Creation-Time",
                xmlName: "Creation-Time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            lastModified: {
                serializedName: "Last-Modified",
                required: true,
                xmlName: "Last-Modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            etag: {
                serializedName: "Etag",
                required: true,
                xmlName: "Etag",
                type: {
                    name: "String"
                }
            },
            contentLength: {
                serializedName: "Content-Length",
                xmlName: "Content-Length",
                type: {
                    name: "Number"
                }
            },
            contentType: {
                serializedName: "Content-Type",
                xmlName: "Content-Type",
                type: {
                    name: "String"
                }
            },
            contentEncoding: {
                serializedName: "Content-Encoding",
                xmlName: "Content-Encoding",
                type: {
                    name: "String"
                }
            },
            contentLanguage: {
                serializedName: "Content-Language",
                xmlName: "Content-Language",
                type: {
                    name: "String"
                }
            },
            contentMD5: {
                serializedName: "Content-MD5",
                xmlName: "Content-MD5",
                type: {
                    name: "ByteArray"
                }
            },
            contentDisposition: {
                serializedName: "Content-Disposition",
                xmlName: "Content-Disposition",
                type: {
                    name: "String"
                }
            },
            cacheControl: {
                serializedName: "Cache-Control",
                xmlName: "Cache-Control",
                type: {
                    name: "String"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                xmlName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            blobType: {
                serializedName: "BlobType",
                xmlName: "BlobType",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "BlockBlob",
                        "PageBlob",
                        "AppendBlob"
                    ]
                }
            },
            leaseStatus: {
                serializedName: "LeaseStatus",
                xmlName: "LeaseStatus",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "locked",
                        "unlocked"
                    ]
                }
            },
            leaseState: {
                serializedName: "LeaseState",
                xmlName: "LeaseState",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "available",
                        "leased",
                        "expired",
                        "breaking",
                        "broken"
                    ]
                }
            },
            leaseDuration: {
                serializedName: "LeaseDuration",
                xmlName: "LeaseDuration",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "infinite",
                        "fixed"
                    ]
                }
            },
            copyId: {
                serializedName: "CopyId",
                xmlName: "CopyId",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                serializedName: "CopyStatus",
                xmlName: "CopyStatus",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "pending",
                        "success",
                        "aborted",
                        "failed"
                    ]
                }
            },
            copySource: {
                serializedName: "CopySource",
                xmlName: "CopySource",
                type: {
                    name: "String"
                }
            },
            copyProgress: {
                serializedName: "CopyProgress",
                xmlName: "CopyProgress",
                type: {
                    name: "String"
                }
            },
            copyCompletedOn: {
                serializedName: "CopyCompletionTime",
                xmlName: "CopyCompletionTime",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            copyStatusDescription: {
                serializedName: "CopyStatusDescription",
                xmlName: "CopyStatusDescription",
                type: {
                    name: "String"
                }
            },
            serverEncrypted: {
                serializedName: "ServerEncrypted",
                xmlName: "ServerEncrypted",
                type: {
                    name: "Boolean"
                }
            },
            incrementalCopy: {
                serializedName: "IncrementalCopy",
                xmlName: "IncrementalCopy",
                type: {
                    name: "Boolean"
                }
            },
            destinationSnapshot: {
                serializedName: "DestinationSnapshot",
                xmlName: "DestinationSnapshot",
                type: {
                    name: "String"
                }
            },
            deletedOn: {
                serializedName: "DeletedTime",
                xmlName: "DeletedTime",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            remainingRetentionDays: {
                serializedName: "RemainingRetentionDays",
                xmlName: "RemainingRetentionDays",
                type: {
                    name: "Number"
                }
            },
            accessTier: {
                serializedName: "AccessTier",
                xmlName: "AccessTier",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "P4",
                        "P6",
                        "P10",
                        "P15",
                        "P20",
                        "P30",
                        "P40",
                        "P50",
                        "P60",
                        "P70",
                        "P80",
                        "Hot",
                        "Cool",
                        "Archive"
                    ]
                }
            },
            accessTierInferred: {
                serializedName: "AccessTierInferred",
                xmlName: "AccessTierInferred",
                type: {
                    name: "Boolean"
                }
            },
            archiveStatus: {
                serializedName: "ArchiveStatus",
                xmlName: "ArchiveStatus",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "rehydrate-pending-to-hot",
                        "rehydrate-pending-to-cool"
                    ]
                }
            },
            customerProvidedKeySha256: {
                serializedName: "CustomerProvidedKeySha256",
                xmlName: "CustomerProvidedKeySha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "EncryptionScope",
                xmlName: "EncryptionScope",
                type: {
                    name: "String"
                }
            },
            accessTierChangedOn: {
                serializedName: "AccessTierChangeTime",
                xmlName: "AccessTierChangeTime",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            tagCount: {
                serializedName: "TagCount",
                xmlName: "TagCount",
                type: {
                    name: "Number"
                }
            },
            expiresOn: {
                serializedName: "Expiry-Time",
                xmlName: "Expiry-Time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isSealed: {
                serializedName: "Sealed",
                xmlName: "Sealed",
                type: {
                    name: "Boolean"
                }
            },
            rehydratePriority: {
                serializedName: "RehydratePriority",
                xmlName: "RehydratePriority",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "High",
                        "Standard"
                    ]
                }
            },
            lastAccessedOn: {
                serializedName: "LastAccessTime",
                xmlName: "LastAccessTime",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            immutabilityPolicyExpiresOn: {
                serializedName: "ImmutabilityPolicyUntilDate",
                xmlName: "ImmutabilityPolicyUntilDate",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            immutabilityPolicyMode: {
                serializedName: "ImmutabilityPolicyMode",
                xmlName: "ImmutabilityPolicyMode",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Mutable",
                        "Unlocked",
                        "Locked"
                    ]
                }
            },
            legalHold: {
                serializedName: "LegalHold",
                xmlName: "LegalHold",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ListBlobsHierarchySegmentResponse = {
    serializedName: "ListBlobsHierarchySegmentResponse",
    xmlName: "EnumerationResults",
    type: {
        name: "Composite",
        className: "ListBlobsHierarchySegmentResponse",
        modelProperties: {
            serviceEndpoint: {
                serializedName: "ServiceEndpoint",
                required: true,
                xmlName: "ServiceEndpoint",
                xmlIsAttribute: true,
                type: {
                    name: "String"
                }
            },
            containerName: {
                serializedName: "ContainerName",
                required: true,
                xmlName: "ContainerName",
                xmlIsAttribute: true,
                type: {
                    name: "String"
                }
            },
            prefix: {
                serializedName: "Prefix",
                xmlName: "Prefix",
                type: {
                    name: "String"
                }
            },
            marker: {
                serializedName: "Marker",
                xmlName: "Marker",
                type: {
                    name: "String"
                }
            },
            maxPageSize: {
                serializedName: "MaxResults",
                xmlName: "MaxResults",
                type: {
                    name: "Number"
                }
            },
            delimiter: {
                serializedName: "Delimiter",
                xmlName: "Delimiter",
                type: {
                    name: "String"
                }
            },
            segment: {
                serializedName: "Segment",
                xmlName: "Blobs",
                type: {
                    name: "Composite",
                    className: "BlobHierarchyListSegment"
                }
            },
            continuationToken: {
                serializedName: "NextMarker",
                xmlName: "NextMarker",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobHierarchyListSegment = {
    serializedName: "BlobHierarchyListSegment",
    xmlName: "Blobs",
    type: {
        name: "Composite",
        className: "BlobHierarchyListSegment",
        modelProperties: {
            blobPrefixes: {
                serializedName: "BlobPrefixes",
                xmlName: "BlobPrefixes",
                xmlElementName: "BlobPrefix",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BlobPrefix"
                        }
                    }
                }
            },
            blobItems: {
                serializedName: "BlobItems",
                required: true,
                xmlName: "BlobItems",
                xmlElementName: "Blob",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BlobItemInternal"
                        }
                    }
                }
            }
        }
    }
};
const BlobPrefix = {
    serializedName: "BlobPrefix",
    type: {
        name: "Composite",
        className: "BlobPrefix",
        modelProperties: {
            name: {
                serializedName: "Name",
                xmlName: "Name",
                type: {
                    name: "Composite",
                    className: "BlobName"
                }
            }
        }
    }
};
const BlockLookupList = {
    serializedName: "BlockLookupList",
    xmlName: "BlockList",
    type: {
        name: "Composite",
        className: "BlockLookupList",
        modelProperties: {
            committed: {
                serializedName: "Committed",
                xmlName: "Committed",
                xmlElementName: "Committed",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            uncommitted: {
                serializedName: "Uncommitted",
                xmlName: "Uncommitted",
                xmlElementName: "Uncommitted",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            latest: {
                serializedName: "Latest",
                xmlName: "Latest",
                xmlElementName: "Latest",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const BlockList = {
    serializedName: "BlockList",
    type: {
        name: "Composite",
        className: "BlockList",
        modelProperties: {
            committedBlocks: {
                serializedName: "CommittedBlocks",
                xmlName: "CommittedBlocks",
                xmlIsWrapped: true,
                xmlElementName: "Block",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Block"
                        }
                    }
                }
            },
            uncommittedBlocks: {
                serializedName: "UncommittedBlocks",
                xmlName: "UncommittedBlocks",
                xmlIsWrapped: true,
                xmlElementName: "Block",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Block"
                        }
                    }
                }
            }
        }
    }
};
const Block = {
    serializedName: "Block",
    type: {
        name: "Composite",
        className: "Block",
        modelProperties: {
            name: {
                serializedName: "Name",
                required: true,
                xmlName: "Name",
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "Size",
                required: true,
                xmlName: "Size",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const PageList = {
    serializedName: "PageList",
    type: {
        name: "Composite",
        className: "PageList",
        modelProperties: {
            pageRange: {
                serializedName: "PageRange",
                xmlName: "PageRange",
                xmlElementName: "PageRange",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PageRange"
                        }
                    }
                }
            },
            clearRange: {
                serializedName: "ClearRange",
                xmlName: "ClearRange",
                xmlElementName: "ClearRange",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ClearRange"
                        }
                    }
                }
            }
        }
    }
};
const PageRange = {
    serializedName: "PageRange",
    xmlName: "PageRange",
    type: {
        name: "Composite",
        className: "PageRange",
        modelProperties: {
            start: {
                serializedName: "Start",
                required: true,
                xmlName: "Start",
                type: {
                    name: "Number"
                }
            },
            end: {
                serializedName: "End",
                required: true,
                xmlName: "End",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ClearRange = {
    serializedName: "ClearRange",
    xmlName: "ClearRange",
    type: {
        name: "Composite",
        className: "ClearRange",
        modelProperties: {
            start: {
                serializedName: "Start",
                required: true,
                xmlName: "Start",
                type: {
                    name: "Number"
                }
            },
            end: {
                serializedName: "End",
                required: true,
                xmlName: "End",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const QueryRequest = {
    serializedName: "QueryRequest",
    xmlName: "QueryRequest",
    type: {
        name: "Composite",
        className: "QueryRequest",
        modelProperties: {
            queryType: {
                serializedName: "QueryType",
                required: true,
                xmlName: "QueryType",
                type: {
                    name: "String"
                }
            },
            expression: {
                serializedName: "Expression",
                required: true,
                xmlName: "Expression",
                type: {
                    name: "String"
                }
            },
            inputSerialization: {
                serializedName: "InputSerialization",
                xmlName: "InputSerialization",
                type: {
                    name: "Composite",
                    className: "QuerySerialization"
                }
            },
            outputSerialization: {
                serializedName: "OutputSerialization",
                xmlName: "OutputSerialization",
                type: {
                    name: "Composite",
                    className: "QuerySerialization"
                }
            }
        }
    }
};
const QuerySerialization = {
    serializedName: "QuerySerialization",
    type: {
        name: "Composite",
        className: "QuerySerialization",
        modelProperties: {
            format: {
                serializedName: "Format",
                xmlName: "Format",
                type: {
                    name: "Composite",
                    className: "QueryFormat"
                }
            }
        }
    }
};
const QueryFormat = {
    serializedName: "QueryFormat",
    type: {
        name: "Composite",
        className: "QueryFormat",
        modelProperties: {
            type: {
                serializedName: "Type",
                required: true,
                xmlName: "Type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "delimited",
                        "json",
                        "arrow",
                        "parquet"
                    ]
                }
            },
            delimitedTextConfiguration: {
                serializedName: "DelimitedTextConfiguration",
                xmlName: "DelimitedTextConfiguration",
                type: {
                    name: "Composite",
                    className: "DelimitedTextConfiguration"
                }
            },
            jsonTextConfiguration: {
                serializedName: "JsonTextConfiguration",
                xmlName: "JsonTextConfiguration",
                type: {
                    name: "Composite",
                    className: "JsonTextConfiguration"
                }
            },
            arrowConfiguration: {
                serializedName: "ArrowConfiguration",
                xmlName: "ArrowConfiguration",
                type: {
                    name: "Composite",
                    className: "ArrowConfiguration"
                }
            },
            parquetTextConfiguration: {
                serializedName: "ParquetTextConfiguration",
                xmlName: "ParquetTextConfiguration",
                type: {
                    name: "any"
                }
            }
        }
    }
};
const DelimitedTextConfiguration = {
    serializedName: "DelimitedTextConfiguration",
    xmlName: "DelimitedTextConfiguration",
    type: {
        name: "Composite",
        className: "DelimitedTextConfiguration",
        modelProperties: {
            columnSeparator: {
                serializedName: "ColumnSeparator",
                xmlName: "ColumnSeparator",
                type: {
                    name: "String"
                }
            },
            fieldQuote: {
                serializedName: "FieldQuote",
                xmlName: "FieldQuote",
                type: {
                    name: "String"
                }
            },
            recordSeparator: {
                serializedName: "RecordSeparator",
                xmlName: "RecordSeparator",
                type: {
                    name: "String"
                }
            },
            escapeChar: {
                serializedName: "EscapeChar",
                xmlName: "EscapeChar",
                type: {
                    name: "String"
                }
            },
            headersPresent: {
                serializedName: "HeadersPresent",
                xmlName: "HasHeaders",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const JsonTextConfiguration = {
    serializedName: "JsonTextConfiguration",
    xmlName: "JsonTextConfiguration",
    type: {
        name: "Composite",
        className: "JsonTextConfiguration",
        modelProperties: {
            recordSeparator: {
                serializedName: "RecordSeparator",
                xmlName: "RecordSeparator",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ArrowConfiguration = {
    serializedName: "ArrowConfiguration",
    xmlName: "ArrowConfiguration",
    type: {
        name: "Composite",
        className: "ArrowConfiguration",
        modelProperties: {
            schema: {
                serializedName: "Schema",
                required: true,
                xmlName: "Schema",
                xmlIsWrapped: true,
                xmlElementName: "Field",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ArrowField"
                        }
                    }
                }
            }
        }
    }
};
const ArrowField = {
    serializedName: "ArrowField",
    xmlName: "Field",
    type: {
        name: "Composite",
        className: "ArrowField",
        modelProperties: {
            type: {
                serializedName: "Type",
                required: true,
                xmlName: "Type",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "Name",
                xmlName: "Name",
                type: {
                    name: "String"
                }
            },
            precision: {
                serializedName: "Precision",
                xmlName: "Precision",
                type: {
                    name: "Number"
                }
            },
            scale: {
                serializedName: "Scale",
                xmlName: "Scale",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ServiceSetPropertiesHeaders = {
    serializedName: "Service_setPropertiesHeaders",
    type: {
        name: "Composite",
        className: "ServiceSetPropertiesHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceSetPropertiesExceptionHeaders = {
    serializedName: "Service_setPropertiesExceptionHeaders",
    type: {
        name: "Composite",
        className: "ServiceSetPropertiesExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceGetPropertiesHeaders = {
    serializedName: "Service_getPropertiesHeaders",
    type: {
        name: "Composite",
        className: "ServiceGetPropertiesHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceGetPropertiesExceptionHeaders = {
    serializedName: "Service_getPropertiesExceptionHeaders",
    type: {
        name: "Composite",
        className: "ServiceGetPropertiesExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceGetStatisticsHeaders = {
    serializedName: "Service_getStatisticsHeaders",
    type: {
        name: "Composite",
        className: "ServiceGetStatisticsHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceGetStatisticsExceptionHeaders = {
    serializedName: "Service_getStatisticsExceptionHeaders",
    type: {
        name: "Composite",
        className: "ServiceGetStatisticsExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceListContainersSegmentHeaders = {
    serializedName: "Service_listContainersSegmentHeaders",
    type: {
        name: "Composite",
        className: "ServiceListContainersSegmentHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceListContainersSegmentExceptionHeaders = {
    serializedName: "Service_listContainersSegmentExceptionHeaders",
    type: {
        name: "Composite",
        className: "ServiceListContainersSegmentExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceGetUserDelegationKeyHeaders = {
    serializedName: "Service_getUserDelegationKeyHeaders",
    type: {
        name: "Composite",
        className: "ServiceGetUserDelegationKeyHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceGetUserDelegationKeyExceptionHeaders = {
    serializedName: "Service_getUserDelegationKeyExceptionHeaders",
    type: {
        name: "Composite",
        className: "ServiceGetUserDelegationKeyExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceGetAccountInfoHeaders = {
    serializedName: "Service_getAccountInfoHeaders",
    type: {
        name: "Composite",
        className: "ServiceGetAccountInfoHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            skuName: {
                serializedName: "x-ms-sku-name",
                xmlName: "x-ms-sku-name",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS"
                    ]
                }
            },
            accountKind: {
                serializedName: "x-ms-account-kind",
                xmlName: "x-ms-account-kind",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Storage",
                        "BlobStorage",
                        "StorageV2",
                        "FileStorage",
                        "BlockBlobStorage"
                    ]
                }
            },
            isHierarchicalNamespaceEnabled: {
                serializedName: "x-ms-is-hns-enabled",
                xmlName: "x-ms-is-hns-enabled",
                type: {
                    name: "Boolean"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceGetAccountInfoExceptionHeaders = {
    serializedName: "Service_getAccountInfoExceptionHeaders",
    type: {
        name: "Composite",
        className: "ServiceGetAccountInfoExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceSubmitBatchHeaders = {
    serializedName: "Service_submitBatchHeaders",
    type: {
        name: "Composite",
        className: "ServiceSubmitBatchHeaders",
        modelProperties: {
            contentType: {
                serializedName: "content-type",
                xmlName: "content-type",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceSubmitBatchExceptionHeaders = {
    serializedName: "Service_submitBatchExceptionHeaders",
    type: {
        name: "Composite",
        className: "ServiceSubmitBatchExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceFilterBlobsHeaders = {
    serializedName: "Service_filterBlobsHeaders",
    type: {
        name: "Composite",
        className: "ServiceFilterBlobsHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceFilterBlobsExceptionHeaders = {
    serializedName: "Service_filterBlobsExceptionHeaders",
    type: {
        name: "Composite",
        className: "ServiceFilterBlobsExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerCreateHeaders = {
    serializedName: "Container_createHeaders",
    type: {
        name: "Composite",
        className: "ContainerCreateHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerCreateExceptionHeaders = {
    serializedName: "Container_createExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerCreateExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerGetPropertiesHeaders = {
    serializedName: "Container_getPropertiesHeaders",
    type: {
        name: "Composite",
        className: "ContainerGetPropertiesHeaders",
        modelProperties: {
            metadata: {
                serializedName: "x-ms-meta",
                xmlName: "x-ms-meta",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                },
                headerCollectionPrefix: "x-ms-meta-"
            },
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseDuration: {
                serializedName: "x-ms-lease-duration",
                xmlName: "x-ms-lease-duration",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "infinite",
                        "fixed"
                    ]
                }
            },
            leaseState: {
                serializedName: "x-ms-lease-state",
                xmlName: "x-ms-lease-state",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "available",
                        "leased",
                        "expired",
                        "breaking",
                        "broken"
                    ]
                }
            },
            leaseStatus: {
                serializedName: "x-ms-lease-status",
                xmlName: "x-ms-lease-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "locked",
                        "unlocked"
                    ]
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobPublicAccess: {
                serializedName: "x-ms-blob-public-access",
                xmlName: "x-ms-blob-public-access",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "container",
                        "blob"
                    ]
                }
            },
            hasImmutabilityPolicy: {
                serializedName: "x-ms-has-immutability-policy",
                xmlName: "x-ms-has-immutability-policy",
                type: {
                    name: "Boolean"
                }
            },
            hasLegalHold: {
                serializedName: "x-ms-has-legal-hold",
                xmlName: "x-ms-has-legal-hold",
                type: {
                    name: "Boolean"
                }
            },
            defaultEncryptionScope: {
                serializedName: "x-ms-default-encryption-scope",
                xmlName: "x-ms-default-encryption-scope",
                type: {
                    name: "String"
                }
            },
            denyEncryptionScopeOverride: {
                serializedName: "x-ms-deny-encryption-scope-override",
                xmlName: "x-ms-deny-encryption-scope-override",
                type: {
                    name: "Boolean"
                }
            },
            isImmutableStorageWithVersioningEnabled: {
                serializedName: "x-ms-immutable-storage-with-versioning-enabled",
                xmlName: "x-ms-immutable-storage-with-versioning-enabled",
                type: {
                    name: "Boolean"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerGetPropertiesExceptionHeaders = {
    serializedName: "Container_getPropertiesExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerGetPropertiesExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerDeleteHeaders = {
    serializedName: "Container_deleteHeaders",
    type: {
        name: "Composite",
        className: "ContainerDeleteHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerDeleteExceptionHeaders = {
    serializedName: "Container_deleteExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerDeleteExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerSetMetadataHeaders = {
    serializedName: "Container_setMetadataHeaders",
    type: {
        name: "Composite",
        className: "ContainerSetMetadataHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerSetMetadataExceptionHeaders = {
    serializedName: "Container_setMetadataExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerSetMetadataExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerGetAccessPolicyHeaders = {
    serializedName: "Container_getAccessPolicyHeaders",
    type: {
        name: "Composite",
        className: "ContainerGetAccessPolicyHeaders",
        modelProperties: {
            blobPublicAccess: {
                serializedName: "x-ms-blob-public-access",
                xmlName: "x-ms-blob-public-access",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "container",
                        "blob"
                    ]
                }
            },
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerGetAccessPolicyExceptionHeaders = {
    serializedName: "Container_getAccessPolicyExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerGetAccessPolicyExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerSetAccessPolicyHeaders = {
    serializedName: "Container_setAccessPolicyHeaders",
    type: {
        name: "Composite",
        className: "ContainerSetAccessPolicyHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerSetAccessPolicyExceptionHeaders = {
    serializedName: "Container_setAccessPolicyExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerSetAccessPolicyExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerRestoreHeaders = {
    serializedName: "Container_restoreHeaders",
    type: {
        name: "Composite",
        className: "ContainerRestoreHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerRestoreExceptionHeaders = {
    serializedName: "Container_restoreExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerRestoreExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerRenameHeaders = {
    serializedName: "Container_renameHeaders",
    type: {
        name: "Composite",
        className: "ContainerRenameHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerRenameExceptionHeaders = {
    serializedName: "Container_renameExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerRenameExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerSubmitBatchHeaders = {
    serializedName: "Container_submitBatchHeaders",
    type: {
        name: "Composite",
        className: "ContainerSubmitBatchHeaders",
        modelProperties: {
            contentType: {
                serializedName: "content-type",
                xmlName: "content-type",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerSubmitBatchExceptionHeaders = {
    serializedName: "Container_submitBatchExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerSubmitBatchExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerFilterBlobsHeaders = {
    serializedName: "Container_filterBlobsHeaders",
    type: {
        name: "Composite",
        className: "ContainerFilterBlobsHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const ContainerFilterBlobsExceptionHeaders = {
    serializedName: "Container_filterBlobsExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerFilterBlobsExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerAcquireLeaseHeaders = {
    serializedName: "Container_acquireLeaseHeaders",
    type: {
        name: "Composite",
        className: "ContainerAcquireLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseId: {
                serializedName: "x-ms-lease-id",
                xmlName: "x-ms-lease-id",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const ContainerAcquireLeaseExceptionHeaders = {
    serializedName: "Container_acquireLeaseExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerAcquireLeaseExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerReleaseLeaseHeaders = {
    serializedName: "Container_releaseLeaseHeaders",
    type: {
        name: "Composite",
        className: "ContainerReleaseLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const ContainerReleaseLeaseExceptionHeaders = {
    serializedName: "Container_releaseLeaseExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerReleaseLeaseExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerRenewLeaseHeaders = {
    serializedName: "Container_renewLeaseHeaders",
    type: {
        name: "Composite",
        className: "ContainerRenewLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseId: {
                serializedName: "x-ms-lease-id",
                xmlName: "x-ms-lease-id",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const ContainerRenewLeaseExceptionHeaders = {
    serializedName: "Container_renewLeaseExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerRenewLeaseExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerBreakLeaseHeaders = {
    serializedName: "Container_breakLeaseHeaders",
    type: {
        name: "Composite",
        className: "ContainerBreakLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseTime: {
                serializedName: "x-ms-lease-time",
                xmlName: "x-ms-lease-time",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const ContainerBreakLeaseExceptionHeaders = {
    serializedName: "Container_breakLeaseExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerBreakLeaseExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerChangeLeaseHeaders = {
    serializedName: "Container_changeLeaseHeaders",
    type: {
        name: "Composite",
        className: "ContainerChangeLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseId: {
                serializedName: "x-ms-lease-id",
                xmlName: "x-ms-lease-id",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const ContainerChangeLeaseExceptionHeaders = {
    serializedName: "Container_changeLeaseExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerChangeLeaseExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerListBlobFlatSegmentHeaders = {
    serializedName: "Container_listBlobFlatSegmentHeaders",
    type: {
        name: "Composite",
        className: "ContainerListBlobFlatSegmentHeaders",
        modelProperties: {
            contentType: {
                serializedName: "content-type",
                xmlName: "content-type",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerListBlobFlatSegmentExceptionHeaders = {
    serializedName: "Container_listBlobFlatSegmentExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerListBlobFlatSegmentExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerListBlobHierarchySegmentHeaders = {
    serializedName: "Container_listBlobHierarchySegmentHeaders",
    type: {
        name: "Composite",
        className: "ContainerListBlobHierarchySegmentHeaders",
        modelProperties: {
            contentType: {
                serializedName: "content-type",
                xmlName: "content-type",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerListBlobHierarchySegmentExceptionHeaders = {
    serializedName: "Container_listBlobHierarchySegmentExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerListBlobHierarchySegmentExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerGetAccountInfoHeaders = {
    serializedName: "Container_getAccountInfoHeaders",
    type: {
        name: "Composite",
        className: "ContainerGetAccountInfoHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            skuName: {
                serializedName: "x-ms-sku-name",
                xmlName: "x-ms-sku-name",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS"
                    ]
                }
            },
            accountKind: {
                serializedName: "x-ms-account-kind",
                xmlName: "x-ms-account-kind",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Storage",
                        "BlobStorage",
                        "StorageV2",
                        "FileStorage",
                        "BlockBlobStorage"
                    ]
                }
            }
        }
    }
};
const ContainerGetAccountInfoExceptionHeaders = {
    serializedName: "Container_getAccountInfoExceptionHeaders",
    type: {
        name: "Composite",
        className: "ContainerGetAccountInfoExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobDownloadHeaders = {
    serializedName: "Blob_downloadHeaders",
    type: {
        name: "Composite",
        className: "BlobDownloadHeaders",
        modelProperties: {
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            metadata: {
                serializedName: "x-ms-meta",
                xmlName: "x-ms-meta",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                },
                headerCollectionPrefix: "x-ms-meta-"
            },
            objectReplicationPolicyId: {
                serializedName: "x-ms-or-policy-id",
                xmlName: "x-ms-or-policy-id",
                type: {
                    name: "String"
                }
            },
            objectReplicationRules: {
                serializedName: "x-ms-or",
                xmlName: "x-ms-or",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                },
                headerCollectionPrefix: "x-ms-or-"
            },
            contentLength: {
                serializedName: "content-length",
                xmlName: "content-length",
                type: {
                    name: "Number"
                }
            },
            contentType: {
                serializedName: "content-type",
                xmlName: "content-type",
                type: {
                    name: "String"
                }
            },
            contentRange: {
                serializedName: "content-range",
                xmlName: "content-range",
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            contentEncoding: {
                serializedName: "content-encoding",
                xmlName: "content-encoding",
                type: {
                    name: "String"
                }
            },
            cacheControl: {
                serializedName: "cache-control",
                xmlName: "cache-control",
                type: {
                    name: "String"
                }
            },
            contentDisposition: {
                serializedName: "content-disposition",
                xmlName: "content-disposition",
                type: {
                    name: "String"
                }
            },
            contentLanguage: {
                serializedName: "content-language",
                xmlName: "content-language",
                type: {
                    name: "String"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                xmlName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            blobType: {
                serializedName: "x-ms-blob-type",
                xmlName: "x-ms-blob-type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "BlockBlob",
                        "PageBlob",
                        "AppendBlob"
                    ]
                }
            },
            copyCompletedOn: {
                serializedName: "x-ms-copy-completion-time",
                xmlName: "x-ms-copy-completion-time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            copyStatusDescription: {
                serializedName: "x-ms-copy-status-description",
                xmlName: "x-ms-copy-status-description",
                type: {
                    name: "String"
                }
            },
            copyId: {
                serializedName: "x-ms-copy-id",
                xmlName: "x-ms-copy-id",
                type: {
                    name: "String"
                }
            },
            copyProgress: {
                serializedName: "x-ms-copy-progress",
                xmlName: "x-ms-copy-progress",
                type: {
                    name: "String"
                }
            },
            copySource: {
                serializedName: "x-ms-copy-source",
                xmlName: "x-ms-copy-source",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                serializedName: "x-ms-copy-status",
                xmlName: "x-ms-copy-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "pending",
                        "success",
                        "aborted",
                        "failed"
                    ]
                }
            },
            leaseDuration: {
                serializedName: "x-ms-lease-duration",
                xmlName: "x-ms-lease-duration",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "infinite",
                        "fixed"
                    ]
                }
            },
            leaseState: {
                serializedName: "x-ms-lease-state",
                xmlName: "x-ms-lease-state",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "available",
                        "leased",
                        "expired",
                        "breaking",
                        "broken"
                    ]
                }
            },
            leaseStatus: {
                serializedName: "x-ms-lease-status",
                xmlName: "x-ms-lease-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "locked",
                        "unlocked"
                    ]
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                xmlName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            isCurrentVersion: {
                serializedName: "x-ms-is-current-version",
                xmlName: "x-ms-is-current-version",
                type: {
                    name: "Boolean"
                }
            },
            acceptRanges: {
                serializedName: "accept-ranges",
                xmlName: "accept-ranges",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobCommittedBlockCount: {
                serializedName: "x-ms-blob-committed-block-count",
                xmlName: "x-ms-blob-committed-block-count",
                type: {
                    name: "Number"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-server-encrypted",
                xmlName: "x-ms-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            blobContentMD5: {
                serializedName: "x-ms-blob-content-md5",
                xmlName: "x-ms-blob-content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            tagCount: {
                serializedName: "x-ms-tag-count",
                xmlName: "x-ms-tag-count",
                type: {
                    name: "Number"
                }
            },
            isSealed: {
                serializedName: "x-ms-blob-sealed",
                xmlName: "x-ms-blob-sealed",
                type: {
                    name: "Boolean"
                }
            },
            lastAccessed: {
                serializedName: "x-ms-last-access-time",
                xmlName: "x-ms-last-access-time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            immutabilityPolicyExpiresOn: {
                serializedName: "x-ms-immutability-policy-until-date",
                xmlName: "x-ms-immutability-policy-until-date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            immutabilityPolicyMode: {
                serializedName: "x-ms-immutability-policy-mode",
                xmlName: "x-ms-immutability-policy-mode",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Mutable",
                        "Unlocked",
                        "Locked"
                    ]
                }
            },
            legalHold: {
                serializedName: "x-ms-legal-hold",
                xmlName: "x-ms-legal-hold",
                type: {
                    name: "Boolean"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            },
            contentCrc64: {
                serializedName: "x-ms-content-crc64",
                xmlName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            }
        }
    }
};
const BlobDownloadExceptionHeaders = {
    serializedName: "Blob_downloadExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobDownloadExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobGetPropertiesHeaders = {
    serializedName: "Blob_getPropertiesHeaders",
    type: {
        name: "Composite",
        className: "BlobGetPropertiesHeaders",
        modelProperties: {
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            createdOn: {
                serializedName: "x-ms-creation-time",
                xmlName: "x-ms-creation-time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            metadata: {
                serializedName: "x-ms-meta",
                xmlName: "x-ms-meta",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                },
                headerCollectionPrefix: "x-ms-meta-"
            },
            objectReplicationPolicyId: {
                serializedName: "x-ms-or-policy-id",
                xmlName: "x-ms-or-policy-id",
                type: {
                    name: "String"
                }
            },
            objectReplicationRules: {
                serializedName: "x-ms-or",
                xmlName: "x-ms-or",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                },
                headerCollectionPrefix: "x-ms-or-"
            },
            blobType: {
                serializedName: "x-ms-blob-type",
                xmlName: "x-ms-blob-type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "BlockBlob",
                        "PageBlob",
                        "AppendBlob"
                    ]
                }
            },
            copyCompletedOn: {
                serializedName: "x-ms-copy-completion-time",
                xmlName: "x-ms-copy-completion-time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            copyStatusDescription: {
                serializedName: "x-ms-copy-status-description",
                xmlName: "x-ms-copy-status-description",
                type: {
                    name: "String"
                }
            },
            copyId: {
                serializedName: "x-ms-copy-id",
                xmlName: "x-ms-copy-id",
                type: {
                    name: "String"
                }
            },
            copyProgress: {
                serializedName: "x-ms-copy-progress",
                xmlName: "x-ms-copy-progress",
                type: {
                    name: "String"
                }
            },
            copySource: {
                serializedName: "x-ms-copy-source",
                xmlName: "x-ms-copy-source",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                serializedName: "x-ms-copy-status",
                xmlName: "x-ms-copy-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "pending",
                        "success",
                        "aborted",
                        "failed"
                    ]
                }
            },
            isIncrementalCopy: {
                serializedName: "x-ms-incremental-copy",
                xmlName: "x-ms-incremental-copy",
                type: {
                    name: "Boolean"
                }
            },
            destinationSnapshot: {
                serializedName: "x-ms-copy-destination-snapshot",
                xmlName: "x-ms-copy-destination-snapshot",
                type: {
                    name: "String"
                }
            },
            leaseDuration: {
                serializedName: "x-ms-lease-duration",
                xmlName: "x-ms-lease-duration",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "infinite",
                        "fixed"
                    ]
                }
            },
            leaseState: {
                serializedName: "x-ms-lease-state",
                xmlName: "x-ms-lease-state",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "available",
                        "leased",
                        "expired",
                        "breaking",
                        "broken"
                    ]
                }
            },
            leaseStatus: {
                serializedName: "x-ms-lease-status",
                xmlName: "x-ms-lease-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "locked",
                        "unlocked"
                    ]
                }
            },
            contentLength: {
                serializedName: "content-length",
                xmlName: "content-length",
                type: {
                    name: "Number"
                }
            },
            contentType: {
                serializedName: "content-type",
                xmlName: "content-type",
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            contentEncoding: {
                serializedName: "content-encoding",
                xmlName: "content-encoding",
                type: {
                    name: "String"
                }
            },
            contentDisposition: {
                serializedName: "content-disposition",
                xmlName: "content-disposition",
                type: {
                    name: "String"
                }
            },
            contentLanguage: {
                serializedName: "content-language",
                xmlName: "content-language",
                type: {
                    name: "String"
                }
            },
            cacheControl: {
                serializedName: "cache-control",
                xmlName: "cache-control",
                type: {
                    name: "String"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                xmlName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            acceptRanges: {
                serializedName: "accept-ranges",
                xmlName: "accept-ranges",
                type: {
                    name: "String"
                }
            },
            blobCommittedBlockCount: {
                serializedName: "x-ms-blob-committed-block-count",
                xmlName: "x-ms-blob-committed-block-count",
                type: {
                    name: "Number"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-server-encrypted",
                xmlName: "x-ms-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            accessTier: {
                serializedName: "x-ms-access-tier",
                xmlName: "x-ms-access-tier",
                type: {
                    name: "String"
                }
            },
            accessTierInferred: {
                serializedName: "x-ms-access-tier-inferred",
                xmlName: "x-ms-access-tier-inferred",
                type: {
                    name: "Boolean"
                }
            },
            archiveStatus: {
                serializedName: "x-ms-archive-status",
                xmlName: "x-ms-archive-status",
                type: {
                    name: "String"
                }
            },
            accessTierChangedOn: {
                serializedName: "x-ms-access-tier-change-time",
                xmlName: "x-ms-access-tier-change-time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                xmlName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            isCurrentVersion: {
                serializedName: "x-ms-is-current-version",
                xmlName: "x-ms-is-current-version",
                type: {
                    name: "Boolean"
                }
            },
            tagCount: {
                serializedName: "x-ms-tag-count",
                xmlName: "x-ms-tag-count",
                type: {
                    name: "Number"
                }
            },
            expiresOn: {
                serializedName: "x-ms-expiry-time",
                xmlName: "x-ms-expiry-time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isSealed: {
                serializedName: "x-ms-blob-sealed",
                xmlName: "x-ms-blob-sealed",
                type: {
                    name: "Boolean"
                }
            },
            rehydratePriority: {
                serializedName: "x-ms-rehydrate-priority",
                xmlName: "x-ms-rehydrate-priority",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "High",
                        "Standard"
                    ]
                }
            },
            lastAccessed: {
                serializedName: "x-ms-last-access-time",
                xmlName: "x-ms-last-access-time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            immutabilityPolicyExpiresOn: {
                serializedName: "x-ms-immutability-policy-until-date",
                xmlName: "x-ms-immutability-policy-until-date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            immutabilityPolicyMode: {
                serializedName: "x-ms-immutability-policy-mode",
                xmlName: "x-ms-immutability-policy-mode",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Mutable",
                        "Unlocked",
                        "Locked"
                    ]
                }
            },
            legalHold: {
                serializedName: "x-ms-legal-hold",
                xmlName: "x-ms-legal-hold",
                type: {
                    name: "Boolean"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobGetPropertiesExceptionHeaders = {
    serializedName: "Blob_getPropertiesExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobGetPropertiesExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobDeleteHeaders = {
    serializedName: "Blob_deleteHeaders",
    type: {
        name: "Composite",
        className: "BlobDeleteHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobDeleteExceptionHeaders = {
    serializedName: "Blob_deleteExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobDeleteExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobUndeleteHeaders = {
    serializedName: "Blob_undeleteHeaders",
    type: {
        name: "Composite",
        className: "BlobUndeleteHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobUndeleteExceptionHeaders = {
    serializedName: "Blob_undeleteExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobUndeleteExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobSetExpiryHeaders = {
    serializedName: "Blob_setExpiryHeaders",
    type: {
        name: "Composite",
        className: "BlobSetExpiryHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const BlobSetExpiryExceptionHeaders = {
    serializedName: "Blob_setExpiryExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobSetExpiryExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobSetHttpHeadersHeaders = {
    serializedName: "Blob_setHttpHeadersHeaders",
    type: {
        name: "Composite",
        className: "BlobSetHttpHeadersHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                xmlName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobSetHttpHeadersExceptionHeaders = {
    serializedName: "Blob_setHttpHeadersExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobSetHttpHeadersExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobSetImmutabilityPolicyHeaders = {
    serializedName: "Blob_setImmutabilityPolicyHeaders",
    type: {
        name: "Composite",
        className: "BlobSetImmutabilityPolicyHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            immutabilityPolicyExpiry: {
                serializedName: "x-ms-immutability-policy-until-date",
                xmlName: "x-ms-immutability-policy-until-date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            immutabilityPolicyMode: {
                serializedName: "x-ms-immutability-policy-mode",
                xmlName: "x-ms-immutability-policy-mode",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Mutable",
                        "Unlocked",
                        "Locked"
                    ]
                }
            }
        }
    }
};
const BlobSetImmutabilityPolicyExceptionHeaders = {
    serializedName: "Blob_setImmutabilityPolicyExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobSetImmutabilityPolicyExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobDeleteImmutabilityPolicyHeaders = {
    serializedName: "Blob_deleteImmutabilityPolicyHeaders",
    type: {
        name: "Composite",
        className: "BlobDeleteImmutabilityPolicyHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const BlobDeleteImmutabilityPolicyExceptionHeaders = {
    serializedName: "Blob_deleteImmutabilityPolicyExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobDeleteImmutabilityPolicyExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobSetLegalHoldHeaders = {
    serializedName: "Blob_setLegalHoldHeaders",
    type: {
        name: "Composite",
        className: "BlobSetLegalHoldHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            legalHold: {
                serializedName: "x-ms-legal-hold",
                xmlName: "x-ms-legal-hold",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const BlobSetLegalHoldExceptionHeaders = {
    serializedName: "Blob_setLegalHoldExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobSetLegalHoldExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobSetMetadataHeaders = {
    serializedName: "Blob_setMetadataHeaders",
    type: {
        name: "Composite",
        className: "BlobSetMetadataHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                xmlName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                xmlName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobSetMetadataExceptionHeaders = {
    serializedName: "Blob_setMetadataExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobSetMetadataExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobAcquireLeaseHeaders = {
    serializedName: "Blob_acquireLeaseHeaders",
    type: {
        name: "Composite",
        className: "BlobAcquireLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseId: {
                serializedName: "x-ms-lease-id",
                xmlName: "x-ms-lease-id",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const BlobAcquireLeaseExceptionHeaders = {
    serializedName: "Blob_acquireLeaseExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobAcquireLeaseExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobReleaseLeaseHeaders = {
    serializedName: "Blob_releaseLeaseHeaders",
    type: {
        name: "Composite",
        className: "BlobReleaseLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const BlobReleaseLeaseExceptionHeaders = {
    serializedName: "Blob_releaseLeaseExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobReleaseLeaseExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobRenewLeaseHeaders = {
    serializedName: "Blob_renewLeaseHeaders",
    type: {
        name: "Composite",
        className: "BlobRenewLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseId: {
                serializedName: "x-ms-lease-id",
                xmlName: "x-ms-lease-id",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const BlobRenewLeaseExceptionHeaders = {
    serializedName: "Blob_renewLeaseExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobRenewLeaseExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobChangeLeaseHeaders = {
    serializedName: "Blob_changeLeaseHeaders",
    type: {
        name: "Composite",
        className: "BlobChangeLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            leaseId: {
                serializedName: "x-ms-lease-id",
                xmlName: "x-ms-lease-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const BlobChangeLeaseExceptionHeaders = {
    serializedName: "Blob_changeLeaseExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobChangeLeaseExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobBreakLeaseHeaders = {
    serializedName: "Blob_breakLeaseHeaders",
    type: {
        name: "Composite",
        className: "BlobBreakLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseTime: {
                serializedName: "x-ms-lease-time",
                xmlName: "x-ms-lease-time",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const BlobBreakLeaseExceptionHeaders = {
    serializedName: "Blob_breakLeaseExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobBreakLeaseExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobCreateSnapshotHeaders = {
    serializedName: "Blob_createSnapshotHeaders",
    type: {
        name: "Composite",
        className: "BlobCreateSnapshotHeaders",
        modelProperties: {
            snapshot: {
                serializedName: "x-ms-snapshot",
                xmlName: "x-ms-snapshot",
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                xmlName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                xmlName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobCreateSnapshotExceptionHeaders = {
    serializedName: "Blob_createSnapshotExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobCreateSnapshotExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobStartCopyFromURLHeaders = {
    serializedName: "Blob_startCopyFromURLHeaders",
    type: {
        name: "Composite",
        className: "BlobStartCopyFromURLHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                xmlName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            copyId: {
                serializedName: "x-ms-copy-id",
                xmlName: "x-ms-copy-id",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                serializedName: "x-ms-copy-status",
                xmlName: "x-ms-copy-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "pending",
                        "success",
                        "aborted",
                        "failed"
                    ]
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobStartCopyFromURLExceptionHeaders = {
    serializedName: "Blob_startCopyFromURLExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobStartCopyFromURLExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobCopyFromURLHeaders = {
    serializedName: "Blob_copyFromURLHeaders",
    type: {
        name: "Composite",
        className: "BlobCopyFromURLHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                xmlName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            copyId: {
                serializedName: "x-ms-copy-id",
                xmlName: "x-ms-copy-id",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                defaultValue: "success",
                isConstant: true,
                serializedName: "x-ms-copy-status",
                type: {
                    name: "String"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                xmlName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobCopyFromURLExceptionHeaders = {
    serializedName: "Blob_copyFromURLExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobCopyFromURLExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobAbortCopyFromURLHeaders = {
    serializedName: "Blob_abortCopyFromURLHeaders",
    type: {
        name: "Composite",
        className: "BlobAbortCopyFromURLHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobAbortCopyFromURLExceptionHeaders = {
    serializedName: "Blob_abortCopyFromURLExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobAbortCopyFromURLExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobSetTierHeaders = {
    serializedName: "Blob_setTierHeaders",
    type: {
        name: "Composite",
        className: "BlobSetTierHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobSetTierExceptionHeaders = {
    serializedName: "Blob_setTierExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobSetTierExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobGetAccountInfoHeaders = {
    serializedName: "Blob_getAccountInfoHeaders",
    type: {
        name: "Composite",
        className: "BlobGetAccountInfoHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            skuName: {
                serializedName: "x-ms-sku-name",
                xmlName: "x-ms-sku-name",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS"
                    ]
                }
            },
            accountKind: {
                serializedName: "x-ms-account-kind",
                xmlName: "x-ms-account-kind",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Storage",
                        "BlobStorage",
                        "StorageV2",
                        "FileStorage",
                        "BlockBlobStorage"
                    ]
                }
            }
        }
    }
};
const BlobGetAccountInfoExceptionHeaders = {
    serializedName: "Blob_getAccountInfoExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobGetAccountInfoExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobQueryHeaders = {
    serializedName: "Blob_queryHeaders",
    type: {
        name: "Composite",
        className: "BlobQueryHeaders",
        modelProperties: {
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            metadata: {
                serializedName: "x-ms-meta",
                xmlName: "x-ms-meta",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            contentLength: {
                serializedName: "content-length",
                xmlName: "content-length",
                type: {
                    name: "Number"
                }
            },
            contentType: {
                serializedName: "content-type",
                xmlName: "content-type",
                type: {
                    name: "String"
                }
            },
            contentRange: {
                serializedName: "content-range",
                xmlName: "content-range",
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            contentEncoding: {
                serializedName: "content-encoding",
                xmlName: "content-encoding",
                type: {
                    name: "String"
                }
            },
            cacheControl: {
                serializedName: "cache-control",
                xmlName: "cache-control",
                type: {
                    name: "String"
                }
            },
            contentDisposition: {
                serializedName: "content-disposition",
                xmlName: "content-disposition",
                type: {
                    name: "String"
                }
            },
            contentLanguage: {
                serializedName: "content-language",
                xmlName: "content-language",
                type: {
                    name: "String"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                xmlName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            blobType: {
                serializedName: "x-ms-blob-type",
                xmlName: "x-ms-blob-type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "BlockBlob",
                        "PageBlob",
                        "AppendBlob"
                    ]
                }
            },
            copyCompletionTime: {
                serializedName: "x-ms-copy-completion-time",
                xmlName: "x-ms-copy-completion-time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            copyStatusDescription: {
                serializedName: "x-ms-copy-status-description",
                xmlName: "x-ms-copy-status-description",
                type: {
                    name: "String"
                }
            },
            copyId: {
                serializedName: "x-ms-copy-id",
                xmlName: "x-ms-copy-id",
                type: {
                    name: "String"
                }
            },
            copyProgress: {
                serializedName: "x-ms-copy-progress",
                xmlName: "x-ms-copy-progress",
                type: {
                    name: "String"
                }
            },
            copySource: {
                serializedName: "x-ms-copy-source",
                xmlName: "x-ms-copy-source",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                serializedName: "x-ms-copy-status",
                xmlName: "x-ms-copy-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "pending",
                        "success",
                        "aborted",
                        "failed"
                    ]
                }
            },
            leaseDuration: {
                serializedName: "x-ms-lease-duration",
                xmlName: "x-ms-lease-duration",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "infinite",
                        "fixed"
                    ]
                }
            },
            leaseState: {
                serializedName: "x-ms-lease-state",
                xmlName: "x-ms-lease-state",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "available",
                        "leased",
                        "expired",
                        "breaking",
                        "broken"
                    ]
                }
            },
            leaseStatus: {
                serializedName: "x-ms-lease-status",
                xmlName: "x-ms-lease-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "locked",
                        "unlocked"
                    ]
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            acceptRanges: {
                serializedName: "accept-ranges",
                xmlName: "accept-ranges",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobCommittedBlockCount: {
                serializedName: "x-ms-blob-committed-block-count",
                xmlName: "x-ms-blob-committed-block-count",
                type: {
                    name: "Number"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-server-encrypted",
                xmlName: "x-ms-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            blobContentMD5: {
                serializedName: "x-ms-blob-content-md5",
                xmlName: "x-ms-blob-content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            },
            contentCrc64: {
                serializedName: "x-ms-content-crc64",
                xmlName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            }
        }
    }
};
const BlobQueryExceptionHeaders = {
    serializedName: "Blob_queryExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobQueryExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobGetTagsHeaders = {
    serializedName: "Blob_getTagsHeaders",
    type: {
        name: "Composite",
        className: "BlobGetTagsHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobGetTagsExceptionHeaders = {
    serializedName: "Blob_getTagsExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobGetTagsExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobSetTagsHeaders = {
    serializedName: "Blob_setTagsHeaders",
    type: {
        name: "Composite",
        className: "BlobSetTagsHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlobSetTagsExceptionHeaders = {
    serializedName: "Blob_setTagsExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlobSetTagsExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobCreateHeaders = {
    serializedName: "PageBlob_createHeaders",
    type: {
        name: "Composite",
        className: "PageBlobCreateHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                xmlName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                xmlName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobCreateExceptionHeaders = {
    serializedName: "PageBlob_createExceptionHeaders",
    type: {
        name: "Composite",
        className: "PageBlobCreateExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobUploadPagesHeaders = {
    serializedName: "PageBlob_uploadPagesHeaders",
    type: {
        name: "Composite",
        className: "PageBlobUploadPagesHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                xmlName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                xmlName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                xmlName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobUploadPagesExceptionHeaders = {
    serializedName: "PageBlob_uploadPagesExceptionHeaders",
    type: {
        name: "Composite",
        className: "PageBlobUploadPagesExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobClearPagesHeaders = {
    serializedName: "PageBlob_clearPagesHeaders",
    type: {
        name: "Composite",
        className: "PageBlobClearPagesHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                xmlName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                xmlName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobClearPagesExceptionHeaders = {
    serializedName: "PageBlob_clearPagesExceptionHeaders",
    type: {
        name: "Composite",
        className: "PageBlobClearPagesExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobUploadPagesFromURLHeaders = {
    serializedName: "PageBlob_uploadPagesFromURLHeaders",
    type: {
        name: "Composite",
        className: "PageBlobUploadPagesFromURLHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                xmlName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                xmlName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                xmlName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobUploadPagesFromURLExceptionHeaders = {
    serializedName: "PageBlob_uploadPagesFromURLExceptionHeaders",
    type: {
        name: "Composite",
        className: "PageBlobUploadPagesFromURLExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobGetPageRangesHeaders = {
    serializedName: "PageBlob_getPageRangesHeaders",
    type: {
        name: "Composite",
        className: "PageBlobGetPageRangesHeaders",
        modelProperties: {
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            blobContentLength: {
                serializedName: "x-ms-blob-content-length",
                xmlName: "x-ms-blob-content-length",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobGetPageRangesExceptionHeaders = {
    serializedName: "PageBlob_getPageRangesExceptionHeaders",
    type: {
        name: "Composite",
        className: "PageBlobGetPageRangesExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobGetPageRangesDiffHeaders = {
    serializedName: "PageBlob_getPageRangesDiffHeaders",
    type: {
        name: "Composite",
        className: "PageBlobGetPageRangesDiffHeaders",
        modelProperties: {
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            blobContentLength: {
                serializedName: "x-ms-blob-content-length",
                xmlName: "x-ms-blob-content-length",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobGetPageRangesDiffExceptionHeaders = {
    serializedName: "PageBlob_getPageRangesDiffExceptionHeaders",
    type: {
        name: "Composite",
        className: "PageBlobGetPageRangesDiffExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobResizeHeaders = {
    serializedName: "PageBlob_resizeHeaders",
    type: {
        name: "Composite",
        className: "PageBlobResizeHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                xmlName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobResizeExceptionHeaders = {
    serializedName: "PageBlob_resizeExceptionHeaders",
    type: {
        name: "Composite",
        className: "PageBlobResizeExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobUpdateSequenceNumberHeaders = {
    serializedName: "PageBlob_updateSequenceNumberHeaders",
    type: {
        name: "Composite",
        className: "PageBlobUpdateSequenceNumberHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                xmlName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobUpdateSequenceNumberExceptionHeaders = {
    serializedName: "PageBlob_updateSequenceNumberExceptionHeaders",
    type: {
        name: "Composite",
        className: "PageBlobUpdateSequenceNumberExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobCopyIncrementalHeaders = {
    serializedName: "PageBlob_copyIncrementalHeaders",
    type: {
        name: "Composite",
        className: "PageBlobCopyIncrementalHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            copyId: {
                serializedName: "x-ms-copy-id",
                xmlName: "x-ms-copy-id",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                serializedName: "x-ms-copy-status",
                xmlName: "x-ms-copy-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "pending",
                        "success",
                        "aborted",
                        "failed"
                    ]
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PageBlobCopyIncrementalExceptionHeaders = {
    serializedName: "PageBlob_copyIncrementalExceptionHeaders",
    type: {
        name: "Composite",
        className: "PageBlobCopyIncrementalExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppendBlobCreateHeaders = {
    serializedName: "AppendBlob_createHeaders",
    type: {
        name: "Composite",
        className: "AppendBlobCreateHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                xmlName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                xmlName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppendBlobCreateExceptionHeaders = {
    serializedName: "AppendBlob_createExceptionHeaders",
    type: {
        name: "Composite",
        className: "AppendBlobCreateExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppendBlobAppendBlockHeaders = {
    serializedName: "AppendBlob_appendBlockHeaders",
    type: {
        name: "Composite",
        className: "AppendBlobAppendBlockHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                xmlName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobAppendOffset: {
                serializedName: "x-ms-blob-append-offset",
                xmlName: "x-ms-blob-append-offset",
                type: {
                    name: "String"
                }
            },
            blobCommittedBlockCount: {
                serializedName: "x-ms-blob-committed-block-count",
                xmlName: "x-ms-blob-committed-block-count",
                type: {
                    name: "Number"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                xmlName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppendBlobAppendBlockExceptionHeaders = {
    serializedName: "AppendBlob_appendBlockExceptionHeaders",
    type: {
        name: "Composite",
        className: "AppendBlobAppendBlockExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppendBlobAppendBlockFromUrlHeaders = {
    serializedName: "AppendBlob_appendBlockFromUrlHeaders",
    type: {
        name: "Composite",
        className: "AppendBlobAppendBlockFromUrlHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                xmlName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobAppendOffset: {
                serializedName: "x-ms-blob-append-offset",
                xmlName: "x-ms-blob-append-offset",
                type: {
                    name: "String"
                }
            },
            blobCommittedBlockCount: {
                serializedName: "x-ms-blob-committed-block-count",
                xmlName: "x-ms-blob-committed-block-count",
                type: {
                    name: "Number"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                xmlName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppendBlobAppendBlockFromUrlExceptionHeaders = {
    serializedName: "AppendBlob_appendBlockFromUrlExceptionHeaders",
    type: {
        name: "Composite",
        className: "AppendBlobAppendBlockFromUrlExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppendBlobSealHeaders = {
    serializedName: "AppendBlob_sealHeaders",
    type: {
        name: "Composite",
        className: "AppendBlobSealHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isSealed: {
                serializedName: "x-ms-blob-sealed",
                xmlName: "x-ms-blob-sealed",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const AppendBlobSealExceptionHeaders = {
    serializedName: "AppendBlob_sealExceptionHeaders",
    type: {
        name: "Composite",
        className: "AppendBlobSealExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlockBlobUploadHeaders = {
    serializedName: "BlockBlob_uploadHeaders",
    type: {
        name: "Composite",
        className: "BlockBlobUploadHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                xmlName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                xmlName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlockBlobUploadExceptionHeaders = {
    serializedName: "BlockBlob_uploadExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlockBlobUploadExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlockBlobPutBlobFromUrlHeaders = {
    serializedName: "BlockBlob_putBlobFromUrlHeaders",
    type: {
        name: "Composite",
        className: "BlockBlobPutBlobFromUrlHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                xmlName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                xmlName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlockBlobPutBlobFromUrlExceptionHeaders = {
    serializedName: "BlockBlob_putBlobFromUrlExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlockBlobPutBlobFromUrlExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlockBlobStageBlockHeaders = {
    serializedName: "BlockBlob_stageBlockHeaders",
    type: {
        name: "Composite",
        className: "BlockBlobStageBlockHeaders",
        modelProperties: {
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                xmlName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                xmlName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlockBlobStageBlockExceptionHeaders = {
    serializedName: "BlockBlob_stageBlockExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlockBlobStageBlockExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlockBlobStageBlockFromURLHeaders = {
    serializedName: "BlockBlob_stageBlockFromURLHeaders",
    type: {
        name: "Composite",
        className: "BlockBlobStageBlockFromURLHeaders",
        modelProperties: {
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                xmlName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                xmlName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlockBlobStageBlockFromURLExceptionHeaders = {
    serializedName: "BlockBlob_stageBlockFromURLExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlockBlobStageBlockFromURLExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlockBlobCommitBlockListHeaders = {
    serializedName: "BlockBlob_commitBlockListHeaders",
    type: {
        name: "Composite",
        className: "BlockBlobCommitBlockListHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                xmlName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                xmlName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                xmlName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                xmlName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                xmlName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                xmlName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlockBlobCommitBlockListExceptionHeaders = {
    serializedName: "BlockBlob_commitBlockListExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlockBlobCommitBlockListExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlockBlobGetBlockListHeaders = {
    serializedName: "BlockBlob_getBlockListHeaders",
    type: {
        name: "Composite",
        className: "BlockBlobGetBlockListHeaders",
        modelProperties: {
            lastModified: {
                serializedName: "last-modified",
                xmlName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            etag: {
                serializedName: "etag",
                xmlName: "etag",
                type: {
                    name: "String"
                }
            },
            contentType: {
                serializedName: "content-type",
                xmlName: "content-type",
                type: {
                    name: "String"
                }
            },
            blobContentLength: {
                serializedName: "x-ms-blob-content-length",
                xmlName: "x-ms-blob-content-length",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                xmlName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                xmlName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                xmlName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                xmlName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BlockBlobGetBlockListExceptionHeaders = {
    serializedName: "BlockBlob_getBlockListExceptionHeaders",
    type: {
        name: "Composite",
        className: "BlockBlobGetBlockListExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                xmlName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dORMS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contentType", ()=>contentType
);
parcelHelpers.export(exports, "blobServiceProperties", ()=>blobServiceProperties
);
parcelHelpers.export(exports, "accept", ()=>accept
);
parcelHelpers.export(exports, "url", ()=>url
);
parcelHelpers.export(exports, "restype", ()=>restype
);
parcelHelpers.export(exports, "comp", ()=>comp
);
parcelHelpers.export(exports, "timeoutInSeconds", ()=>timeoutInSeconds
);
parcelHelpers.export(exports, "version", ()=>version
);
parcelHelpers.export(exports, "requestId", ()=>requestId
);
parcelHelpers.export(exports, "accept1", ()=>accept1
);
parcelHelpers.export(exports, "comp1", ()=>comp1
);
parcelHelpers.export(exports, "comp2", ()=>comp2
);
parcelHelpers.export(exports, "prefix", ()=>prefix
);
parcelHelpers.export(exports, "marker", ()=>marker
);
parcelHelpers.export(exports, "maxPageSize", ()=>maxPageSize
);
parcelHelpers.export(exports, "include", ()=>include
);
parcelHelpers.export(exports, "keyInfo", ()=>keyInfo
);
parcelHelpers.export(exports, "comp3", ()=>comp3
);
parcelHelpers.export(exports, "restype1", ()=>restype1
);
parcelHelpers.export(exports, "body", ()=>body
);
parcelHelpers.export(exports, "comp4", ()=>comp4
);
parcelHelpers.export(exports, "contentLength", ()=>contentLength
);
parcelHelpers.export(exports, "multipartContentType", ()=>multipartContentType
);
parcelHelpers.export(exports, "comp5", ()=>comp5
);
parcelHelpers.export(exports, "where", ()=>where
);
parcelHelpers.export(exports, "restype2", ()=>restype2
);
parcelHelpers.export(exports, "metadata", ()=>metadata
);
parcelHelpers.export(exports, "access", ()=>access
);
parcelHelpers.export(exports, "defaultEncryptionScope", ()=>defaultEncryptionScope
);
parcelHelpers.export(exports, "preventEncryptionScopeOverride", ()=>preventEncryptionScopeOverride
);
parcelHelpers.export(exports, "leaseId", ()=>leaseId
);
parcelHelpers.export(exports, "ifModifiedSince", ()=>ifModifiedSince
);
parcelHelpers.export(exports, "ifUnmodifiedSince", ()=>ifUnmodifiedSince
);
parcelHelpers.export(exports, "comp6", ()=>comp6
);
parcelHelpers.export(exports, "comp7", ()=>comp7
);
parcelHelpers.export(exports, "containerAcl", ()=>containerAcl
);
parcelHelpers.export(exports, "comp8", ()=>comp8
);
parcelHelpers.export(exports, "deletedContainerName", ()=>deletedContainerName
);
parcelHelpers.export(exports, "deletedContainerVersion", ()=>deletedContainerVersion
);
parcelHelpers.export(exports, "comp9", ()=>comp9
);
parcelHelpers.export(exports, "sourceContainerName", ()=>sourceContainerName
);
parcelHelpers.export(exports, "sourceLeaseId", ()=>sourceLeaseId
);
parcelHelpers.export(exports, "comp10", ()=>comp10
);
parcelHelpers.export(exports, "action", ()=>action
);
parcelHelpers.export(exports, "duration", ()=>duration
);
parcelHelpers.export(exports, "proposedLeaseId", ()=>proposedLeaseId
);
parcelHelpers.export(exports, "action1", ()=>action1
);
parcelHelpers.export(exports, "leaseId1", ()=>leaseId1
);
parcelHelpers.export(exports, "action2", ()=>action2
);
parcelHelpers.export(exports, "action3", ()=>action3
);
parcelHelpers.export(exports, "breakPeriod", ()=>breakPeriod
);
parcelHelpers.export(exports, "action4", ()=>action4
);
parcelHelpers.export(exports, "proposedLeaseId1", ()=>proposedLeaseId1
);
parcelHelpers.export(exports, "include1", ()=>include1
);
parcelHelpers.export(exports, "delimiter", ()=>delimiter
);
parcelHelpers.export(exports, "snapshot", ()=>snapshot
);
parcelHelpers.export(exports, "versionId", ()=>versionId
);
parcelHelpers.export(exports, "range", ()=>range
);
parcelHelpers.export(exports, "rangeGetContentMD5", ()=>rangeGetContentMD5
);
parcelHelpers.export(exports, "rangeGetContentCRC64", ()=>rangeGetContentCRC64
);
parcelHelpers.export(exports, "encryptionKey", ()=>encryptionKey
);
parcelHelpers.export(exports, "encryptionKeySha256", ()=>encryptionKeySha256
);
parcelHelpers.export(exports, "encryptionAlgorithm", ()=>encryptionAlgorithm
);
parcelHelpers.export(exports, "ifMatch", ()=>ifMatch
);
parcelHelpers.export(exports, "ifNoneMatch", ()=>ifNoneMatch
);
parcelHelpers.export(exports, "ifTags", ()=>ifTags
);
parcelHelpers.export(exports, "deleteSnapshots", ()=>deleteSnapshots
);
parcelHelpers.export(exports, "blobDeleteType", ()=>blobDeleteType
);
parcelHelpers.export(exports, "comp11", ()=>comp11
);
parcelHelpers.export(exports, "expiryOptions", ()=>expiryOptions
);
parcelHelpers.export(exports, "expiresOn", ()=>expiresOn
);
parcelHelpers.export(exports, "blobCacheControl", ()=>blobCacheControl
);
parcelHelpers.export(exports, "blobContentType", ()=>blobContentType
);
parcelHelpers.export(exports, "blobContentMD5", ()=>blobContentMD5
);
parcelHelpers.export(exports, "blobContentEncoding", ()=>blobContentEncoding
);
parcelHelpers.export(exports, "blobContentLanguage", ()=>blobContentLanguage
);
parcelHelpers.export(exports, "blobContentDisposition", ()=>blobContentDisposition
);
parcelHelpers.export(exports, "comp12", ()=>comp12
);
parcelHelpers.export(exports, "immutabilityPolicyExpiry", ()=>immutabilityPolicyExpiry
);
parcelHelpers.export(exports, "immutabilityPolicyMode", ()=>immutabilityPolicyMode
);
parcelHelpers.export(exports, "comp13", ()=>comp13
);
parcelHelpers.export(exports, "legalHold", ()=>legalHold
);
parcelHelpers.export(exports, "encryptionScope", ()=>encryptionScope
);
parcelHelpers.export(exports, "comp14", ()=>comp14
);
parcelHelpers.export(exports, "tier", ()=>tier
);
parcelHelpers.export(exports, "rehydratePriority", ()=>rehydratePriority
);
parcelHelpers.export(exports, "sourceIfModifiedSince", ()=>sourceIfModifiedSince
);
parcelHelpers.export(exports, "sourceIfUnmodifiedSince", ()=>sourceIfUnmodifiedSince
);
parcelHelpers.export(exports, "sourceIfMatch", ()=>sourceIfMatch
);
parcelHelpers.export(exports, "sourceIfNoneMatch", ()=>sourceIfNoneMatch
);
parcelHelpers.export(exports, "sourceIfTags", ()=>sourceIfTags
);
parcelHelpers.export(exports, "copySource", ()=>copySource
);
parcelHelpers.export(exports, "blobTagsString", ()=>blobTagsString
);
parcelHelpers.export(exports, "sealBlob", ()=>sealBlob
);
parcelHelpers.export(exports, "legalHold1", ()=>legalHold1
);
parcelHelpers.export(exports, "xMsRequiresSync", ()=>xMsRequiresSync
);
parcelHelpers.export(exports, "sourceContentMD5", ()=>sourceContentMD5
);
parcelHelpers.export(exports, "copySourceAuthorization", ()=>copySourceAuthorization
);
parcelHelpers.export(exports, "comp15", ()=>comp15
);
parcelHelpers.export(exports, "copyActionAbortConstant", ()=>copyActionAbortConstant
);
parcelHelpers.export(exports, "copyId", ()=>copyId
);
parcelHelpers.export(exports, "comp16", ()=>comp16
);
parcelHelpers.export(exports, "tier1", ()=>tier1
);
parcelHelpers.export(exports, "queryRequest", ()=>queryRequest
);
parcelHelpers.export(exports, "comp17", ()=>comp17
);
parcelHelpers.export(exports, "comp18", ()=>comp18
);
parcelHelpers.export(exports, "tags", ()=>tags
);
parcelHelpers.export(exports, "transactionalContentMD5", ()=>transactionalContentMD5
);
parcelHelpers.export(exports, "transactionalContentCrc64", ()=>transactionalContentCrc64
);
parcelHelpers.export(exports, "blobType", ()=>blobType
);
parcelHelpers.export(exports, "blobContentLength", ()=>blobContentLength
);
parcelHelpers.export(exports, "blobSequenceNumber", ()=>blobSequenceNumber
);
parcelHelpers.export(exports, "contentType1", ()=>contentType1
);
parcelHelpers.export(exports, "body1", ()=>body1
);
parcelHelpers.export(exports, "accept2", ()=>accept2
);
parcelHelpers.export(exports, "comp19", ()=>comp19
);
parcelHelpers.export(exports, "pageWrite", ()=>pageWrite
);
parcelHelpers.export(exports, "ifSequenceNumberLessThanOrEqualTo", ()=>ifSequenceNumberLessThanOrEqualTo
);
parcelHelpers.export(exports, "ifSequenceNumberLessThan", ()=>ifSequenceNumberLessThan
);
parcelHelpers.export(exports, "ifSequenceNumberEqualTo", ()=>ifSequenceNumberEqualTo
);
parcelHelpers.export(exports, "pageWrite1", ()=>pageWrite1
);
parcelHelpers.export(exports, "sourceUrl", ()=>sourceUrl
);
parcelHelpers.export(exports, "sourceRange", ()=>sourceRange
);
parcelHelpers.export(exports, "sourceContentCrc64", ()=>sourceContentCrc64
);
parcelHelpers.export(exports, "range1", ()=>range1
);
parcelHelpers.export(exports, "comp20", ()=>comp20
);
parcelHelpers.export(exports, "prevsnapshot", ()=>prevsnapshot
);
parcelHelpers.export(exports, "prevSnapshotUrl", ()=>prevSnapshotUrl
);
parcelHelpers.export(exports, "sequenceNumberAction", ()=>sequenceNumberAction
);
parcelHelpers.export(exports, "comp21", ()=>comp21
);
parcelHelpers.export(exports, "blobType1", ()=>blobType1
);
parcelHelpers.export(exports, "comp22", ()=>comp22
);
parcelHelpers.export(exports, "maxSize", ()=>maxSize
);
parcelHelpers.export(exports, "appendPosition", ()=>appendPosition
);
parcelHelpers.export(exports, "sourceRange1", ()=>sourceRange1
);
parcelHelpers.export(exports, "comp23", ()=>comp23
);
parcelHelpers.export(exports, "blobType2", ()=>blobType2
);
parcelHelpers.export(exports, "copySourceBlobProperties", ()=>copySourceBlobProperties
);
parcelHelpers.export(exports, "comp24", ()=>comp24
);
parcelHelpers.export(exports, "blockId", ()=>blockId
);
parcelHelpers.export(exports, "blocks", ()=>blocks
);
parcelHelpers.export(exports, "comp25", ()=>comp25
);
parcelHelpers.export(exports, "listType", ()=>listType
);
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */ var _coreHttp = require("@azure/core-http");
var _mappers = require("../models/mappers");
const contentType = {
    parameterPath: [
        "options",
        "contentType"
    ],
    mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const blobServiceProperties = {
    parameterPath: "blobServiceProperties",
    mapper: _mappers.BlobServiceProperties
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const url = {
    parameterPath: "url",
    mapper: {
        serializedName: "url",
        required: true,
        xmlName: "url",
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const restype = {
    parameterPath: "restype",
    mapper: {
        defaultValue: "service",
        isConstant: true,
        serializedName: "restype",
        type: {
            name: "String"
        }
    }
};
const comp = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "properties",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const timeoutInSeconds = {
    parameterPath: [
        "options",
        "timeoutInSeconds"
    ],
    mapper: {
        constraints: {
            InclusiveMinimum: 0
        },
        serializedName: "timeout",
        xmlName: "timeout",
        type: {
            name: "Number"
        }
    }
};
const version = {
    parameterPath: "version",
    mapper: {
        defaultValue: "2021-04-10",
        isConstant: true,
        serializedName: "x-ms-version",
        type: {
            name: "String"
        }
    }
};
const requestId = {
    parameterPath: [
        "options",
        "requestId"
    ],
    mapper: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
            name: "String"
        }
    }
};
const accept1 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const comp1 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "stats",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const comp2 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "list",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const prefix = {
    parameterPath: [
        "options",
        "prefix"
    ],
    mapper: {
        serializedName: "prefix",
        xmlName: "prefix",
        type: {
            name: "String"
        }
    }
};
const marker = {
    parameterPath: [
        "options",
        "marker"
    ],
    mapper: {
        serializedName: "marker",
        xmlName: "marker",
        type: {
            name: "String"
        }
    }
};
const maxPageSize = {
    parameterPath: [
        "options",
        "maxPageSize"
    ],
    mapper: {
        constraints: {
            InclusiveMinimum: 1
        },
        serializedName: "maxresults",
        xmlName: "maxresults",
        type: {
            name: "Number"
        }
    }
};
const include = {
    parameterPath: [
        "options",
        "include"
    ],
    mapper: {
        serializedName: "include",
        xmlName: "include",
        xmlElementName: "ListContainersIncludeType",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Enum",
                    allowedValues: [
                        "metadata",
                        "deleted",
                        "system"
                    ]
                }
            }
        }
    },
    collectionFormat: _coreHttp.QueryCollectionFormat.Csv
};
const keyInfo = {
    parameterPath: "keyInfo",
    mapper: _mappers.KeyInfo
};
const comp3 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "userdelegationkey",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const restype1 = {
    parameterPath: "restype",
    mapper: {
        defaultValue: "account",
        isConstant: true,
        serializedName: "restype",
        type: {
            name: "String"
        }
    }
};
const body = {
    parameterPath: "body",
    mapper: {
        serializedName: "body",
        required: true,
        xmlName: "body",
        type: {
            name: "Stream"
        }
    }
};
const comp4 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "batch",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const contentLength = {
    parameterPath: "contentLength",
    mapper: {
        serializedName: "Content-Length",
        required: true,
        xmlName: "Content-Length",
        type: {
            name: "Number"
        }
    }
};
const multipartContentType = {
    parameterPath: "multipartContentType",
    mapper: {
        serializedName: "Content-Type",
        required: true,
        xmlName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const comp5 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "blobs",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const where = {
    parameterPath: [
        "options",
        "where"
    ],
    mapper: {
        serializedName: "where",
        xmlName: "where",
        type: {
            name: "String"
        }
    }
};
const restype2 = {
    parameterPath: "restype",
    mapper: {
        defaultValue: "container",
        isConstant: true,
        serializedName: "restype",
        type: {
            name: "String"
        }
    }
};
const metadata = {
    parameterPath: [
        "options",
        "metadata"
    ],
    mapper: {
        serializedName: "x-ms-meta",
        xmlName: "x-ms-meta",
        type: {
            name: "Dictionary",
            value: {
                type: {
                    name: "String"
                }
            }
        },
        headerCollectionPrefix: "x-ms-meta-"
    }
};
const access = {
    parameterPath: [
        "options",
        "access"
    ],
    mapper: {
        serializedName: "x-ms-blob-public-access",
        xmlName: "x-ms-blob-public-access",
        type: {
            name: "Enum",
            allowedValues: [
                "container",
                "blob"
            ]
        }
    }
};
const defaultEncryptionScope = {
    parameterPath: [
        "options",
        "containerEncryptionScope",
        "defaultEncryptionScope"
    ],
    mapper: {
        serializedName: "x-ms-default-encryption-scope",
        xmlName: "x-ms-default-encryption-scope",
        type: {
            name: "String"
        }
    }
};
const preventEncryptionScopeOverride = {
    parameterPath: [
        "options",
        "containerEncryptionScope",
        "preventEncryptionScopeOverride"
    ],
    mapper: {
        serializedName: "x-ms-deny-encryption-scope-override",
        xmlName: "x-ms-deny-encryption-scope-override",
        type: {
            name: "Boolean"
        }
    }
};
const leaseId = {
    parameterPath: [
        "options",
        "leaseAccessConditions",
        "leaseId"
    ],
    mapper: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
            name: "String"
        }
    }
};
const ifModifiedSince = {
    parameterPath: [
        "options",
        "modifiedAccessConditions",
        "ifModifiedSince"
    ],
    mapper: {
        serializedName: "If-Modified-Since",
        xmlName: "If-Modified-Since",
        type: {
            name: "DateTimeRfc1123"
        }
    }
};
const ifUnmodifiedSince = {
    parameterPath: [
        "options",
        "modifiedAccessConditions",
        "ifUnmodifiedSince"
    ],
    mapper: {
        serializedName: "If-Unmodified-Since",
        xmlName: "If-Unmodified-Since",
        type: {
            name: "DateTimeRfc1123"
        }
    }
};
const comp6 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "metadata",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const comp7 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "acl",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const containerAcl = {
    parameterPath: [
        "options",
        "containerAcl"
    ],
    mapper: {
        serializedName: "containerAcl",
        xmlName: "SignedIdentifiers",
        xmlIsWrapped: true,
        xmlElementName: "SignedIdentifier",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Composite",
                    className: "SignedIdentifier"
                }
            }
        }
    }
};
const comp8 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "undelete",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const deletedContainerName = {
    parameterPath: [
        "options",
        "deletedContainerName"
    ],
    mapper: {
        serializedName: "x-ms-deleted-container-name",
        xmlName: "x-ms-deleted-container-name",
        type: {
            name: "String"
        }
    }
};
const deletedContainerVersion = {
    parameterPath: [
        "options",
        "deletedContainerVersion"
    ],
    mapper: {
        serializedName: "x-ms-deleted-container-version",
        xmlName: "x-ms-deleted-container-version",
        type: {
            name: "String"
        }
    }
};
const comp9 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "rename",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const sourceContainerName = {
    parameterPath: "sourceContainerName",
    mapper: {
        serializedName: "x-ms-source-container-name",
        required: true,
        xmlName: "x-ms-source-container-name",
        type: {
            name: "String"
        }
    }
};
const sourceLeaseId = {
    parameterPath: [
        "options",
        "sourceLeaseId"
    ],
    mapper: {
        serializedName: "x-ms-source-lease-id",
        xmlName: "x-ms-source-lease-id",
        type: {
            name: "String"
        }
    }
};
const comp10 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "lease",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const action = {
    parameterPath: "action",
    mapper: {
        defaultValue: "acquire",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
            name: "String"
        }
    }
};
const duration = {
    parameterPath: [
        "options",
        "duration"
    ],
    mapper: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
            name: "Number"
        }
    }
};
const proposedLeaseId = {
    parameterPath: [
        "options",
        "proposedLeaseId"
    ],
    mapper: {
        serializedName: "x-ms-proposed-lease-id",
        xmlName: "x-ms-proposed-lease-id",
        type: {
            name: "String"
        }
    }
};
const action1 = {
    parameterPath: "action",
    mapper: {
        defaultValue: "release",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
            name: "String"
        }
    }
};
const leaseId1 = {
    parameterPath: "leaseId",
    mapper: {
        serializedName: "x-ms-lease-id",
        required: true,
        xmlName: "x-ms-lease-id",
        type: {
            name: "String"
        }
    }
};
const action2 = {
    parameterPath: "action",
    mapper: {
        defaultValue: "renew",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
            name: "String"
        }
    }
};
const action3 = {
    parameterPath: "action",
    mapper: {
        defaultValue: "break",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
            name: "String"
        }
    }
};
const breakPeriod = {
    parameterPath: [
        "options",
        "breakPeriod"
    ],
    mapper: {
        serializedName: "x-ms-lease-break-period",
        xmlName: "x-ms-lease-break-period",
        type: {
            name: "Number"
        }
    }
};
const action4 = {
    parameterPath: "action",
    mapper: {
        defaultValue: "change",
        isConstant: true,
        serializedName: "x-ms-lease-action",
        type: {
            name: "String"
        }
    }
};
const proposedLeaseId1 = {
    parameterPath: "proposedLeaseId",
    mapper: {
        serializedName: "x-ms-proposed-lease-id",
        required: true,
        xmlName: "x-ms-proposed-lease-id",
        type: {
            name: "String"
        }
    }
};
const include1 = {
    parameterPath: [
        "options",
        "include"
    ],
    mapper: {
        serializedName: "include",
        xmlName: "include",
        xmlElementName: "ListBlobsIncludeItem",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Enum",
                    allowedValues: [
                        "copy",
                        "deleted",
                        "metadata",
                        "snapshots",
                        "uncommittedblobs",
                        "versions",
                        "tags",
                        "immutabilitypolicy",
                        "legalhold",
                        "deletedwithversions"
                    ]
                }
            }
        }
    },
    collectionFormat: _coreHttp.QueryCollectionFormat.Csv
};
const delimiter = {
    parameterPath: "delimiter",
    mapper: {
        serializedName: "delimiter",
        required: true,
        xmlName: "delimiter",
        type: {
            name: "String"
        }
    }
};
const snapshot = {
    parameterPath: [
        "options",
        "snapshot"
    ],
    mapper: {
        serializedName: "snapshot",
        xmlName: "snapshot",
        type: {
            name: "String"
        }
    }
};
const versionId = {
    parameterPath: [
        "options",
        "versionId"
    ],
    mapper: {
        serializedName: "versionid",
        xmlName: "versionid",
        type: {
            name: "String"
        }
    }
};
const range = {
    parameterPath: [
        "options",
        "range"
    ],
    mapper: {
        serializedName: "x-ms-range",
        xmlName: "x-ms-range",
        type: {
            name: "String"
        }
    }
};
const rangeGetContentMD5 = {
    parameterPath: [
        "options",
        "rangeGetContentMD5"
    ],
    mapper: {
        serializedName: "x-ms-range-get-content-md5",
        xmlName: "x-ms-range-get-content-md5",
        type: {
            name: "Boolean"
        }
    }
};
const rangeGetContentCRC64 = {
    parameterPath: [
        "options",
        "rangeGetContentCRC64"
    ],
    mapper: {
        serializedName: "x-ms-range-get-content-crc64",
        xmlName: "x-ms-range-get-content-crc64",
        type: {
            name: "Boolean"
        }
    }
};
const encryptionKey = {
    parameterPath: [
        "options",
        "cpkInfo",
        "encryptionKey"
    ],
    mapper: {
        serializedName: "x-ms-encryption-key",
        xmlName: "x-ms-encryption-key",
        type: {
            name: "String"
        }
    }
};
const encryptionKeySha256 = {
    parameterPath: [
        "options",
        "cpkInfo",
        "encryptionKeySha256"
    ],
    mapper: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
            name: "String"
        }
    }
};
const encryptionAlgorithm = {
    parameterPath: [
        "options",
        "cpkInfo",
        "encryptionAlgorithm"
    ],
    mapper: {
        serializedName: "x-ms-encryption-algorithm",
        xmlName: "x-ms-encryption-algorithm",
        type: {
            name: "String"
        }
    }
};
const ifMatch = {
    parameterPath: [
        "options",
        "modifiedAccessConditions",
        "ifMatch"
    ],
    mapper: {
        serializedName: "If-Match",
        xmlName: "If-Match",
        type: {
            name: "String"
        }
    }
};
const ifNoneMatch = {
    parameterPath: [
        "options",
        "modifiedAccessConditions",
        "ifNoneMatch"
    ],
    mapper: {
        serializedName: "If-None-Match",
        xmlName: "If-None-Match",
        type: {
            name: "String"
        }
    }
};
const ifTags = {
    parameterPath: [
        "options",
        "modifiedAccessConditions",
        "ifTags"
    ],
    mapper: {
        serializedName: "x-ms-if-tags",
        xmlName: "x-ms-if-tags",
        type: {
            name: "String"
        }
    }
};
const deleteSnapshots = {
    parameterPath: [
        "options",
        "deleteSnapshots"
    ],
    mapper: {
        serializedName: "x-ms-delete-snapshots",
        xmlName: "x-ms-delete-snapshots",
        type: {
            name: "Enum",
            allowedValues: [
                "include",
                "only"
            ]
        }
    }
};
const blobDeleteType = {
    parameterPath: [
        "options",
        "blobDeleteType"
    ],
    mapper: {
        serializedName: "deletetype",
        xmlName: "deletetype",
        type: {
            name: "String"
        }
    }
};
const comp11 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "expiry",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const expiryOptions = {
    parameterPath: "expiryOptions",
    mapper: {
        serializedName: "x-ms-expiry-option",
        required: true,
        xmlName: "x-ms-expiry-option",
        type: {
            name: "String"
        }
    }
};
const expiresOn = {
    parameterPath: [
        "options",
        "expiresOn"
    ],
    mapper: {
        serializedName: "x-ms-expiry-time",
        xmlName: "x-ms-expiry-time",
        type: {
            name: "String"
        }
    }
};
const blobCacheControl = {
    parameterPath: [
        "options",
        "blobHttpHeaders",
        "blobCacheControl"
    ],
    mapper: {
        serializedName: "x-ms-blob-cache-control",
        xmlName: "x-ms-blob-cache-control",
        type: {
            name: "String"
        }
    }
};
const blobContentType = {
    parameterPath: [
        "options",
        "blobHttpHeaders",
        "blobContentType"
    ],
    mapper: {
        serializedName: "x-ms-blob-content-type",
        xmlName: "x-ms-blob-content-type",
        type: {
            name: "String"
        }
    }
};
const blobContentMD5 = {
    parameterPath: [
        "options",
        "blobHttpHeaders",
        "blobContentMD5"
    ],
    mapper: {
        serializedName: "x-ms-blob-content-md5",
        xmlName: "x-ms-blob-content-md5",
        type: {
            name: "ByteArray"
        }
    }
};
const blobContentEncoding = {
    parameterPath: [
        "options",
        "blobHttpHeaders",
        "blobContentEncoding"
    ],
    mapper: {
        serializedName: "x-ms-blob-content-encoding",
        xmlName: "x-ms-blob-content-encoding",
        type: {
            name: "String"
        }
    }
};
const blobContentLanguage = {
    parameterPath: [
        "options",
        "blobHttpHeaders",
        "blobContentLanguage"
    ],
    mapper: {
        serializedName: "x-ms-blob-content-language",
        xmlName: "x-ms-blob-content-language",
        type: {
            name: "String"
        }
    }
};
const blobContentDisposition = {
    parameterPath: [
        "options",
        "blobHttpHeaders",
        "blobContentDisposition"
    ],
    mapper: {
        serializedName: "x-ms-blob-content-disposition",
        xmlName: "x-ms-blob-content-disposition",
        type: {
            name: "String"
        }
    }
};
const comp12 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "immutabilityPolicies",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const immutabilityPolicyExpiry = {
    parameterPath: [
        "options",
        "immutabilityPolicyExpiry"
    ],
    mapper: {
        serializedName: "x-ms-immutability-policy-until-date",
        xmlName: "x-ms-immutability-policy-until-date",
        type: {
            name: "DateTimeRfc1123"
        }
    }
};
const immutabilityPolicyMode = {
    parameterPath: [
        "options",
        "immutabilityPolicyMode"
    ],
    mapper: {
        serializedName: "x-ms-immutability-policy-mode",
        xmlName: "x-ms-immutability-policy-mode",
        type: {
            name: "Enum",
            allowedValues: [
                "Mutable",
                "Unlocked",
                "Locked"
            ]
        }
    }
};
const comp13 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "legalhold",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const legalHold = {
    parameterPath: "legalHold",
    mapper: {
        serializedName: "x-ms-legal-hold",
        required: true,
        xmlName: "x-ms-legal-hold",
        type: {
            name: "Boolean"
        }
    }
};
const encryptionScope = {
    parameterPath: [
        "options",
        "encryptionScope"
    ],
    mapper: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
            name: "String"
        }
    }
};
const comp14 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "snapshot",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const tier = {
    parameterPath: [
        "options",
        "tier"
    ],
    mapper: {
        serializedName: "x-ms-access-tier",
        xmlName: "x-ms-access-tier",
        type: {
            name: "Enum",
            allowedValues: [
                "P4",
                "P6",
                "P10",
                "P15",
                "P20",
                "P30",
                "P40",
                "P50",
                "P60",
                "P70",
                "P80",
                "Hot",
                "Cool",
                "Archive"
            ]
        }
    }
};
const rehydratePriority = {
    parameterPath: [
        "options",
        "rehydratePriority"
    ],
    mapper: {
        serializedName: "x-ms-rehydrate-priority",
        xmlName: "x-ms-rehydrate-priority",
        type: {
            name: "Enum",
            allowedValues: [
                "High",
                "Standard"
            ]
        }
    }
};
const sourceIfModifiedSince = {
    parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfModifiedSince"
    ],
    mapper: {
        serializedName: "x-ms-source-if-modified-since",
        xmlName: "x-ms-source-if-modified-since",
        type: {
            name: "DateTimeRfc1123"
        }
    }
};
const sourceIfUnmodifiedSince = {
    parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfUnmodifiedSince"
    ],
    mapper: {
        serializedName: "x-ms-source-if-unmodified-since",
        xmlName: "x-ms-source-if-unmodified-since",
        type: {
            name: "DateTimeRfc1123"
        }
    }
};
const sourceIfMatch = {
    parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfMatch"
    ],
    mapper: {
        serializedName: "x-ms-source-if-match",
        xmlName: "x-ms-source-if-match",
        type: {
            name: "String"
        }
    }
};
const sourceIfNoneMatch = {
    parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfNoneMatch"
    ],
    mapper: {
        serializedName: "x-ms-source-if-none-match",
        xmlName: "x-ms-source-if-none-match",
        type: {
            name: "String"
        }
    }
};
const sourceIfTags = {
    parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfTags"
    ],
    mapper: {
        serializedName: "x-ms-source-if-tags",
        xmlName: "x-ms-source-if-tags",
        type: {
            name: "String"
        }
    }
};
const copySource = {
    parameterPath: "copySource",
    mapper: {
        serializedName: "x-ms-copy-source",
        required: true,
        xmlName: "x-ms-copy-source",
        type: {
            name: "String"
        }
    }
};
const blobTagsString = {
    parameterPath: [
        "options",
        "blobTagsString"
    ],
    mapper: {
        serializedName: "x-ms-tags",
        xmlName: "x-ms-tags",
        type: {
            name: "String"
        }
    }
};
const sealBlob = {
    parameterPath: [
        "options",
        "sealBlob"
    ],
    mapper: {
        serializedName: "x-ms-seal-blob",
        xmlName: "x-ms-seal-blob",
        type: {
            name: "Boolean"
        }
    }
};
const legalHold1 = {
    parameterPath: [
        "options",
        "legalHold"
    ],
    mapper: {
        serializedName: "x-ms-legal-hold",
        xmlName: "x-ms-legal-hold",
        type: {
            name: "Boolean"
        }
    }
};
const xMsRequiresSync = {
    parameterPath: "xMsRequiresSync",
    mapper: {
        defaultValue: "true",
        isConstant: true,
        serializedName: "x-ms-requires-sync",
        type: {
            name: "String"
        }
    }
};
const sourceContentMD5 = {
    parameterPath: [
        "options",
        "sourceContentMD5"
    ],
    mapper: {
        serializedName: "x-ms-source-content-md5",
        xmlName: "x-ms-source-content-md5",
        type: {
            name: "ByteArray"
        }
    }
};
const copySourceAuthorization = {
    parameterPath: [
        "options",
        "copySourceAuthorization"
    ],
    mapper: {
        serializedName: "x-ms-copy-source-authorization",
        xmlName: "x-ms-copy-source-authorization",
        type: {
            name: "String"
        }
    }
};
const comp15 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "copy",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const copyActionAbortConstant = {
    parameterPath: "copyActionAbortConstant",
    mapper: {
        defaultValue: "abort",
        isConstant: true,
        serializedName: "x-ms-copy-action",
        type: {
            name: "String"
        }
    }
};
const copyId = {
    parameterPath: "copyId",
    mapper: {
        serializedName: "copyid",
        required: true,
        xmlName: "copyid",
        type: {
            name: "String"
        }
    }
};
const comp16 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "tier",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const tier1 = {
    parameterPath: "tier",
    mapper: {
        serializedName: "x-ms-access-tier",
        required: true,
        xmlName: "x-ms-access-tier",
        type: {
            name: "Enum",
            allowedValues: [
                "P4",
                "P6",
                "P10",
                "P15",
                "P20",
                "P30",
                "P40",
                "P50",
                "P60",
                "P70",
                "P80",
                "Hot",
                "Cool",
                "Archive"
            ]
        }
    }
};
const queryRequest = {
    parameterPath: [
        "options",
        "queryRequest"
    ],
    mapper: _mappers.QueryRequest
};
const comp17 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "query",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const comp18 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "tags",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const tags = {
    parameterPath: [
        "options",
        "tags"
    ],
    mapper: _mappers.BlobTags
};
const transactionalContentMD5 = {
    parameterPath: [
        "options",
        "transactionalContentMD5"
    ],
    mapper: {
        serializedName: "Content-MD5",
        xmlName: "Content-MD5",
        type: {
            name: "ByteArray"
        }
    }
};
const transactionalContentCrc64 = {
    parameterPath: [
        "options",
        "transactionalContentCrc64"
    ],
    mapper: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
            name: "ByteArray"
        }
    }
};
const blobType = {
    parameterPath: "blobType",
    mapper: {
        defaultValue: "PageBlob",
        isConstant: true,
        serializedName: "x-ms-blob-type",
        type: {
            name: "String"
        }
    }
};
const blobContentLength = {
    parameterPath: "blobContentLength",
    mapper: {
        serializedName: "x-ms-blob-content-length",
        required: true,
        xmlName: "x-ms-blob-content-length",
        type: {
            name: "Number"
        }
    }
};
const blobSequenceNumber = {
    parameterPath: [
        "options",
        "blobSequenceNumber"
    ],
    mapper: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
            name: "Number"
        }
    }
};
const contentType1 = {
    parameterPath: [
        "options",
        "contentType"
    ],
    mapper: {
        defaultValue: "application/octet-stream",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const body1 = {
    parameterPath: "body",
    mapper: {
        serializedName: "body",
        required: true,
        xmlName: "body",
        type: {
            name: "Stream"
        }
    }
};
const accept2 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const comp19 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "page",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const pageWrite = {
    parameterPath: "pageWrite",
    mapper: {
        defaultValue: "update",
        isConstant: true,
        serializedName: "x-ms-page-write",
        type: {
            name: "String"
        }
    }
};
const ifSequenceNumberLessThanOrEqualTo = {
    parameterPath: [
        "options",
        "sequenceNumberAccessConditions",
        "ifSequenceNumberLessThanOrEqualTo"
    ],
    mapper: {
        serializedName: "x-ms-if-sequence-number-le",
        xmlName: "x-ms-if-sequence-number-le",
        type: {
            name: "Number"
        }
    }
};
const ifSequenceNumberLessThan = {
    parameterPath: [
        "options",
        "sequenceNumberAccessConditions",
        "ifSequenceNumberLessThan"
    ],
    mapper: {
        serializedName: "x-ms-if-sequence-number-lt",
        xmlName: "x-ms-if-sequence-number-lt",
        type: {
            name: "Number"
        }
    }
};
const ifSequenceNumberEqualTo = {
    parameterPath: [
        "options",
        "sequenceNumberAccessConditions",
        "ifSequenceNumberEqualTo"
    ],
    mapper: {
        serializedName: "x-ms-if-sequence-number-eq",
        xmlName: "x-ms-if-sequence-number-eq",
        type: {
            name: "Number"
        }
    }
};
const pageWrite1 = {
    parameterPath: "pageWrite",
    mapper: {
        defaultValue: "clear",
        isConstant: true,
        serializedName: "x-ms-page-write",
        type: {
            name: "String"
        }
    }
};
const sourceUrl = {
    parameterPath: "sourceUrl",
    mapper: {
        serializedName: "x-ms-copy-source",
        required: true,
        xmlName: "x-ms-copy-source",
        type: {
            name: "String"
        }
    }
};
const sourceRange = {
    parameterPath: "sourceRange",
    mapper: {
        serializedName: "x-ms-source-range",
        required: true,
        xmlName: "x-ms-source-range",
        type: {
            name: "String"
        }
    }
};
const sourceContentCrc64 = {
    parameterPath: [
        "options",
        "sourceContentCrc64"
    ],
    mapper: {
        serializedName: "x-ms-source-content-crc64",
        xmlName: "x-ms-source-content-crc64",
        type: {
            name: "ByteArray"
        }
    }
};
const range1 = {
    parameterPath: "range",
    mapper: {
        serializedName: "x-ms-range",
        required: true,
        xmlName: "x-ms-range",
        type: {
            name: "String"
        }
    }
};
const comp20 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "pagelist",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const prevsnapshot = {
    parameterPath: [
        "options",
        "prevsnapshot"
    ],
    mapper: {
        serializedName: "prevsnapshot",
        xmlName: "prevsnapshot",
        type: {
            name: "String"
        }
    }
};
const prevSnapshotUrl = {
    parameterPath: [
        "options",
        "prevSnapshotUrl"
    ],
    mapper: {
        serializedName: "x-ms-previous-snapshot-url",
        xmlName: "x-ms-previous-snapshot-url",
        type: {
            name: "String"
        }
    }
};
const sequenceNumberAction = {
    parameterPath: "sequenceNumberAction",
    mapper: {
        serializedName: "x-ms-sequence-number-action",
        required: true,
        xmlName: "x-ms-sequence-number-action",
        type: {
            name: "Enum",
            allowedValues: [
                "max",
                "update",
                "increment"
            ]
        }
    }
};
const comp21 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "incrementalcopy",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const blobType1 = {
    parameterPath: "blobType",
    mapper: {
        defaultValue: "AppendBlob",
        isConstant: true,
        serializedName: "x-ms-blob-type",
        type: {
            name: "String"
        }
    }
};
const comp22 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "appendblock",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const maxSize = {
    parameterPath: [
        "options",
        "appendPositionAccessConditions",
        "maxSize"
    ],
    mapper: {
        serializedName: "x-ms-blob-condition-maxsize",
        xmlName: "x-ms-blob-condition-maxsize",
        type: {
            name: "Number"
        }
    }
};
const appendPosition = {
    parameterPath: [
        "options",
        "appendPositionAccessConditions",
        "appendPosition"
    ],
    mapper: {
        serializedName: "x-ms-blob-condition-appendpos",
        xmlName: "x-ms-blob-condition-appendpos",
        type: {
            name: "Number"
        }
    }
};
const sourceRange1 = {
    parameterPath: [
        "options",
        "sourceRange"
    ],
    mapper: {
        serializedName: "x-ms-source-range",
        xmlName: "x-ms-source-range",
        type: {
            name: "String"
        }
    }
};
const comp23 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "seal",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const blobType2 = {
    parameterPath: "blobType",
    mapper: {
        defaultValue: "BlockBlob",
        isConstant: true,
        serializedName: "x-ms-blob-type",
        type: {
            name: "String"
        }
    }
};
const copySourceBlobProperties = {
    parameterPath: [
        "options",
        "copySourceBlobProperties"
    ],
    mapper: {
        serializedName: "x-ms-copy-source-blob-properties",
        xmlName: "x-ms-copy-source-blob-properties",
        type: {
            name: "Boolean"
        }
    }
};
const comp24 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "block",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const blockId = {
    parameterPath: "blockId",
    mapper: {
        serializedName: "blockid",
        required: true,
        xmlName: "blockid",
        type: {
            name: "String"
        }
    }
};
const blocks = {
    parameterPath: "blocks",
    mapper: _mappers.BlockLookupList
};
const comp25 = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "blocklist",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String"
        }
    }
};
const listType = {
    parameterPath: "listType",
    mapper: {
        defaultValue: "committed",
        serializedName: "blocklisttype",
        required: true,
        xmlName: "blocklisttype",
        type: {
            name: "Enum",
            allowedValues: [
                "committed",
                "uncommitted",
                "all"
            ]
        }
    }
};

},{"@azure/core-http":"iSINq","../models/mappers":"2ZlYI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2faTT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Class representing a Container. */ parcelHelpers.export(exports, "Container", ()=>Container
);
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */ var _coreHttp = require("@azure/core-http");
var _mappers = require("../models/mappers");
var _parameters = require("../models/parameters");
class Container {
    /**
     * Initialize a new instance of the class Container class.
     * @param client Reference to the service client
     */ constructor(client){
        this.client = client;
    }
    /**
     * creates a new container under the specified account. If the container with the same name already
     * exists, the operation fails
     * @param options The options parameters.
     */ create(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, createOperationSpec);
    }
    /**
     * returns all user-defined metadata and system properties for the specified container. The data
     * returned does not include the container's list of blobs
     * @param options The options parameters.
     */ getProperties(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec);
    }
    /**
     * operation marks the specified container for deletion. The container and any blobs contained within
     * it are later deleted during garbage collection
     * @param options The options parameters.
     */ delete(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, deleteOperationSpec);
    }
    /**
     * operation sets one or more user-defined name-value pairs for the specified container.
     * @param options The options parameters.
     */ setMetadata(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, setMetadataOperationSpec);
    }
    /**
     * gets the permissions for the specified container. The permissions indicate whether container data
     * may be accessed publicly.
     * @param options The options parameters.
     */ getAccessPolicy(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, getAccessPolicyOperationSpec);
    }
    /**
     * sets the permissions for the specified container. The permissions indicate whether blobs in a
     * container may be accessed publicly.
     * @param options The options parameters.
     */ setAccessPolicy(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, setAccessPolicyOperationSpec);
    }
    /**
     * Restores a previously-deleted container.
     * @param options The options parameters.
     */ restore(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, restoreOperationSpec);
    }
    /**
     * Renames an existing container.
     * @param sourceContainerName Required.  Specifies the name of the container to rename.
     * @param options The options parameters.
     */ rename(sourceContainerName, options) {
        const operationArguments = {
            sourceContainerName,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, renameOperationSpec);
    }
    /**
     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
     * @param contentLength The length of the request.
     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch
     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>
     * @param body Initial data
     * @param options The options parameters.
     */ submitBatch(contentLength, multipartContentType, body, options) {
        const operationArguments = {
            contentLength,
            multipartContentType,
            body,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, submitBatchOperationSpec);
    }
    /**
     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given
     * search expression.  Filter blobs searches within the given container.
     * @param options The options parameters.
     */ filterBlobs(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, filterBlobsOperationSpec);
    }
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
     * be 15 to 60 seconds, or can be infinite
     * @param options The options parameters.
     */ acquireLease(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, acquireLeaseOperationSpec);
    }
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
     * be 15 to 60 seconds, or can be infinite
     * @param leaseId Specifies the current lease ID on the resource.
     * @param options The options parameters.
     */ releaseLease(leaseId, options) {
        const operationArguments = {
            leaseId,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, releaseLeaseOperationSpec);
    }
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
     * be 15 to 60 seconds, or can be infinite
     * @param leaseId Specifies the current lease ID on the resource.
     * @param options The options parameters.
     */ renewLease(leaseId, options) {
        const operationArguments = {
            leaseId,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, renewLeaseOperationSpec);
    }
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
     * be 15 to 60 seconds, or can be infinite
     * @param options The options parameters.
     */ breakLease(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, breakLeaseOperationSpec);
    }
    /**
     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
     * be 15 to 60 seconds, or can be infinite
     * @param leaseId Specifies the current lease ID on the resource.
     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400
     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor
     *                        (String) for a list of valid GUID string formats.
     * @param options The options parameters.
     */ changeLease(leaseId, proposedLeaseId, options) {
        const operationArguments = {
            leaseId,
            proposedLeaseId,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, changeLeaseOperationSpec);
    }
    /**
     * [Update] The List Blobs operation returns a list of the blobs under the specified container
     * @param options The options parameters.
     */ listBlobFlatSegment(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, listBlobFlatSegmentOperationSpec);
    }
    /**
     * [Update] The List Blobs operation returns a list of the blobs under the specified container
     * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix
     *                  element in the response body that acts as a placeholder for all blobs whose names begin with the
     *                  same substring up to the appearance of the delimiter character. The delimiter may be a single
     *                  character or a string.
     * @param options The options parameters.
     */ listBlobHierarchySegment(delimiter, options) {
        const operationArguments = {
            delimiter,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, listBlobHierarchySegmentOperationSpec);
    }
    /**
     * Returns the sku name and account kind
     * @param options The options parameters.
     */ getAccountInfo(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec);
    }
}
// Operation Specifications
const xmlSerializer = new _coreHttp.Serializer(_mappers, /* isXml */ true);
const createOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.ContainerCreateHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerCreateExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.restype2
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.metadata,
        _parameters.access,
        _parameters.defaultEncryptionScope,
        _parameters.preventEncryptionScopeOverride
    ],
    isXML: true,
    serializer: xmlSerializer
};
const getPropertiesOperationSpec = {
    path: "/{containerName}",
    httpMethod: "GET",
    responses: {
        200: {
            headersMapper: _mappers.ContainerGetPropertiesHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerGetPropertiesExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.restype2
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId
    ],
    isXML: true,
    serializer: xmlSerializer
};
const deleteOperationSpec = {
    path: "/{containerName}",
    httpMethod: "DELETE",
    responses: {
        202: {
            headersMapper: _mappers.ContainerDeleteHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerDeleteExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.restype2
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince
    ],
    isXML: true,
    serializer: xmlSerializer
};
const setMetadataOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.ContainerSetMetadataHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerSetMetadataExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.restype2,
        _parameters.comp6
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.metadata,
        _parameters.leaseId,
        _parameters.ifModifiedSince
    ],
    isXML: true,
    serializer: xmlSerializer
};
const getAccessPolicyOperationSpec = {
    path: "/{containerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SignedIdentifier"
                        }
                    }
                },
                serializedName: "SignedIdentifiers",
                xmlName: "SignedIdentifiers",
                xmlIsWrapped: true,
                xmlElementName: "SignedIdentifier"
            },
            headersMapper: _mappers.ContainerGetAccessPolicyHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerGetAccessPolicyExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.restype2,
        _parameters.comp7
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId
    ],
    isXML: true,
    serializer: xmlSerializer
};
const setAccessPolicyOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.ContainerSetAccessPolicyHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerSetAccessPolicyExceptionHeaders
        }
    },
    requestBody: _parameters.containerAcl,
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.restype2,
        _parameters.comp7
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.contentType,
        _parameters.accept,
        _parameters.version,
        _parameters.requestId,
        _parameters.access,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince
    ],
    isXML: true,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: xmlSerializer
};
const restoreOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.ContainerRestoreHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerRestoreExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.restype2,
        _parameters.comp8
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.deletedContainerName,
        _parameters.deletedContainerVersion
    ],
    isXML: true,
    serializer: xmlSerializer
};
const renameOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.ContainerRenameHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerRenameExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.restype2,
        _parameters.comp9
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.sourceContainerName,
        _parameters.sourceLeaseId
    ],
    isXML: true,
    serializer: xmlSerializer
};
const submitBatchOperationSpec = {
    path: "/{containerName}",
    httpMethod: "POST",
    responses: {
        202: {
            bodyMapper: {
                type: {
                    name: "Stream"
                },
                serializedName: "parsedResponse"
            },
            headersMapper: _mappers.ContainerSubmitBatchHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerSubmitBatchExceptionHeaders
        }
    },
    requestBody: _parameters.body,
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp4,
        _parameters.restype2
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.contentType,
        _parameters.accept,
        _parameters.version,
        _parameters.requestId,
        _parameters.contentLength,
        _parameters.multipartContentType
    ],
    isXML: true,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: xmlSerializer
};
const filterBlobsOperationSpec = {
    path: "/{containerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: _mappers.FilterBlobSegment,
            headersMapper: _mappers.ContainerFilterBlobsHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerFilterBlobsExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.marker,
        _parameters.maxPageSize,
        _parameters.comp5,
        _parameters.where,
        _parameters.restype2
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const acquireLeaseOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.ContainerAcquireLeaseHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerAcquireLeaseExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.restype2,
        _parameters.comp10
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.action,
        _parameters.duration,
        _parameters.proposedLeaseId
    ],
    isXML: true,
    serializer: xmlSerializer
};
const releaseLeaseOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.ContainerReleaseLeaseHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerReleaseLeaseExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.restype2,
        _parameters.comp10
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.action1,
        _parameters.leaseId1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const renewLeaseOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.ContainerRenewLeaseHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerRenewLeaseExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.restype2,
        _parameters.comp10
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.leaseId1,
        _parameters.action2
    ],
    isXML: true,
    serializer: xmlSerializer
};
const breakLeaseOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
        202: {
            headersMapper: _mappers.ContainerBreakLeaseHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerBreakLeaseExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.restype2,
        _parameters.comp10
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.action3,
        _parameters.breakPeriod
    ],
    isXML: true,
    serializer: xmlSerializer
};
const changeLeaseOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.ContainerChangeLeaseHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerChangeLeaseExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.restype2,
        _parameters.comp10
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.leaseId1,
        _parameters.action4,
        _parameters.proposedLeaseId1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const listBlobFlatSegmentOperationSpec = {
    path: "/{containerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: _mappers.ListBlobsFlatSegmentResponse,
            headersMapper: _mappers.ContainerListBlobFlatSegmentHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerListBlobFlatSegmentExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp2,
        _parameters.prefix,
        _parameters.marker,
        _parameters.maxPageSize,
        _parameters.restype2,
        _parameters.include1
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const listBlobHierarchySegmentOperationSpec = {
    path: "/{containerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: _mappers.ListBlobsHierarchySegmentResponse,
            headersMapper: _mappers.ContainerListBlobHierarchySegmentHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerListBlobHierarchySegmentExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp2,
        _parameters.prefix,
        _parameters.marker,
        _parameters.maxPageSize,
        _parameters.restype2,
        _parameters.include1,
        _parameters.delimiter
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const getAccountInfoOperationSpec = {
    path: "/{containerName}",
    httpMethod: "GET",
    responses: {
        200: {
            headersMapper: _mappers.ContainerGetAccountInfoHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.ContainerGetAccountInfoExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.comp,
        _parameters.restype1
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.accept1
    ],
    isXML: true,
    serializer: xmlSerializer
};

},{"@azure/core-http":"iSINq","../models/mappers":"2ZlYI","../models/parameters":"dORMS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kt7P2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Class representing a Blob. */ parcelHelpers.export(exports, "Blob", ()=>Blob
);
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */ var _coreHttp = require("@azure/core-http");
var _mappers = require("../models/mappers");
var _parameters = require("../models/parameters");
class Blob {
    /**
     * Initialize a new instance of the class Blob class.
     * @param client Reference to the service client
     */ constructor(client){
        this.client = client;
    }
    /**
     * The Download operation reads or downloads a blob from the system, including its metadata and
     * properties. You can also call Download to read a snapshot.
     * @param options The options parameters.
     */ download(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, downloadOperationSpec);
    }
    /**
     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system
     * properties for the blob. It does not return the content of the blob.
     * @param options The options parameters.
     */ getProperties(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec);
    }
    /**
     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is
     * permanently removed from the storage account. If the storage account's soft delete feature is
     * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible
     * immediately. However, the blob service retains the blob or snapshot for the number of days specified
     * by the DeleteRetentionPolicy section of [Storage service properties]
     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is
     * permanently removed from the storage account. Note that you continue to be charged for the
     * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the
     * "include=deleted" query parameter to discover which blobs and snapshots have been soft deleted. You
     * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a
     * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404
     * (ResourceNotFound).
     * @param options The options parameters.
     */ delete(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, deleteOperationSpec);
    }
    /**
     * Undelete a blob that was previously soft deleted
     * @param options The options parameters.
     */ undelete(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, undeleteOperationSpec);
    }
    /**
     * Sets the time a blob will expire and be deleted.
     * @param expiryOptions Required. Indicates mode of the expiry time
     * @param options The options parameters.
     */ setExpiry(expiryOptions, options) {
        const operationArguments = {
            expiryOptions,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, setExpiryOperationSpec);
    }
    /**
     * The Set HTTP Headers operation sets system properties on the blob
     * @param options The options parameters.
     */ setHttpHeaders(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, setHttpHeadersOperationSpec);
    }
    /**
     * The Set Immutability Policy operation sets the immutability policy on the blob
     * @param options The options parameters.
     */ setImmutabilityPolicy(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, setImmutabilityPolicyOperationSpec);
    }
    /**
     * The Delete Immutability Policy operation deletes the immutability policy on the blob
     * @param options The options parameters.
     */ deleteImmutabilityPolicy(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, deleteImmutabilityPolicyOperationSpec);
    }
    /**
     * The Set Legal Hold operation sets a legal hold on the blob.
     * @param legalHold Specified if a legal hold should be set on the blob.
     * @param options The options parameters.
     */ setLegalHold(legalHold, options) {
        const operationArguments = {
            legalHold,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, setLegalHoldOperationSpec);
    }
    /**
     * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more
     * name-value pairs
     * @param options The options parameters.
     */ setMetadata(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, setMetadataOperationSpec);
    }
    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
     * operations
     * @param options The options parameters.
     */ acquireLease(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, acquireLeaseOperationSpec);
    }
    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
     * operations
     * @param leaseId Specifies the current lease ID on the resource.
     * @param options The options parameters.
     */ releaseLease(leaseId, options) {
        const operationArguments = {
            leaseId,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, releaseLeaseOperationSpec);
    }
    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
     * operations
     * @param leaseId Specifies the current lease ID on the resource.
     * @param options The options parameters.
     */ renewLease(leaseId, options) {
        const operationArguments = {
            leaseId,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, renewLeaseOperationSpec);
    }
    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
     * operations
     * @param leaseId Specifies the current lease ID on the resource.
     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400
     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor
     *                        (String) for a list of valid GUID string formats.
     * @param options The options parameters.
     */ changeLease(leaseId, proposedLeaseId, options) {
        const operationArguments = {
            leaseId,
            proposedLeaseId,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, changeLeaseOperationSpec);
    }
    /**
     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
     * operations
     * @param options The options parameters.
     */ breakLease(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, breakLeaseOperationSpec);
    }
    /**
     * The Create Snapshot operation creates a read-only snapshot of a blob
     * @param options The options parameters.
     */ createSnapshot(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, createSnapshotOperationSpec);
    }
    /**
     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
     *                   access signature.
     * @param options The options parameters.
     */ startCopyFromURL(copySource, options) {
        const operationArguments = {
            copySource,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, startCopyFromURLOperationSpec);
    }
    /**
     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return
     * a response until the copy is complete.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
     *                   access signature.
     * @param options The options parameters.
     */ copyFromURL(copySource, options) {
        const operationArguments = {
            copySource,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, copyFromURLOperationSpec);
    }
    /**
     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination
     * blob with zero length and full metadata.
     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob
     *               operation.
     * @param options The options parameters.
     */ abortCopyFromURL(copyId, options) {
        const operationArguments = {
            copyId,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, abortCopyFromURLOperationSpec);
    }
    /**
     * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium
     * storage account and on a block blob in a blob storage account (locally redundant storage only). A
     * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block
     * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's
     * ETag.
     * @param tier Indicates the tier to be set on the blob.
     * @param options The options parameters.
     */ setTier(tier, options) {
        const operationArguments = {
            tier,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, setTierOperationSpec);
    }
    /**
     * Returns the sku name and account kind
     * @param options The options parameters.
     */ getAccountInfo(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec);
    }
    /**
     * The Query operation enables users to select/project on blob data by providing simple query
     * expressions.
     * @param options The options parameters.
     */ query(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, queryOperationSpec);
    }
    /**
     * The Get Tags operation enables users to get the tags associated with a blob.
     * @param options The options parameters.
     */ getTags(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, getTagsOperationSpec);
    }
    /**
     * The Set Tags operation enables users to set tags on a blob.
     * @param options The options parameters.
     */ setTags(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, setTagsOperationSpec);
    }
}
// Operation Specifications
const xmlSerializer = new _coreHttp.Serializer(_mappers, /* isXml */ true);
const downloadOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Stream"
                },
                serializedName: "parsedResponse"
            },
            headersMapper: _mappers.BlobDownloadHeaders
        },
        206: {
            bodyMapper: {
                type: {
                    name: "Stream"
                },
                serializedName: "parsedResponse"
            },
            headersMapper: _mappers.BlobDownloadHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobDownloadExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.snapshot,
        _parameters.versionId
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.range,
        _parameters.rangeGetContentMD5,
        _parameters.rangeGetContentCRC64,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags
    ],
    isXML: true,
    serializer: xmlSerializer
};
const getPropertiesOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "HEAD",
    responses: {
        200: {
            headersMapper: _mappers.BlobGetPropertiesHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobGetPropertiesExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.snapshot,
        _parameters.versionId
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags
    ],
    isXML: true,
    serializer: xmlSerializer
};
const deleteOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "DELETE",
    responses: {
        202: {
            headersMapper: _mappers.BlobDeleteHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobDeleteExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.snapshot,
        _parameters.versionId,
        _parameters.blobDeleteType
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.deleteSnapshots
    ],
    isXML: true,
    serializer: xmlSerializer
};
const undeleteOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.BlobUndeleteHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobUndeleteExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp8
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const setExpiryOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.BlobSetExpiryHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobSetExpiryExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp11
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.expiryOptions,
        _parameters.expiresOn
    ],
    isXML: true,
    serializer: xmlSerializer
};
const setHttpHeadersOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.BlobSetHttpHeadersHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobSetHttpHeadersExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.comp,
        _parameters.timeoutInSeconds
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.blobCacheControl,
        _parameters.blobContentType,
        _parameters.blobContentMD5,
        _parameters.blobContentEncoding,
        _parameters.blobContentLanguage,
        _parameters.blobContentDisposition
    ],
    isXML: true,
    serializer: xmlSerializer
};
const setImmutabilityPolicyOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.BlobSetImmutabilityPolicyHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobSetImmutabilityPolicyExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp12
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.ifUnmodifiedSince,
        _parameters.immutabilityPolicyExpiry,
        _parameters.immutabilityPolicyMode
    ],
    isXML: true,
    serializer: xmlSerializer
};
const deleteImmutabilityPolicyOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: _mappers.BlobDeleteImmutabilityPolicyHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobDeleteImmutabilityPolicyExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp12
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const setLegalHoldOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.BlobSetLegalHoldHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobSetLegalHoldExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp13
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.legalHold
    ],
    isXML: true,
    serializer: xmlSerializer
};
const setMetadataOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.BlobSetMetadataHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobSetMetadataExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp6
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.metadata,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.encryptionScope
    ],
    isXML: true,
    serializer: xmlSerializer
};
const acquireLeaseOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.BlobAcquireLeaseHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobAcquireLeaseExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp10
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.action,
        _parameters.duration,
        _parameters.proposedLeaseId,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags
    ],
    isXML: true,
    serializer: xmlSerializer
};
const releaseLeaseOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.BlobReleaseLeaseHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobReleaseLeaseExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp10
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.action1,
        _parameters.leaseId1,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags
    ],
    isXML: true,
    serializer: xmlSerializer
};
const renewLeaseOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.BlobRenewLeaseHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobRenewLeaseExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp10
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.leaseId1,
        _parameters.action2,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags
    ],
    isXML: true,
    serializer: xmlSerializer
};
const changeLeaseOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.BlobChangeLeaseHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobChangeLeaseExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp10
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.leaseId1,
        _parameters.action4,
        _parameters.proposedLeaseId1,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags
    ],
    isXML: true,
    serializer: xmlSerializer
};
const breakLeaseOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        202: {
            headersMapper: _mappers.BlobBreakLeaseHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobBreakLeaseExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp10
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.action3,
        _parameters.breakPeriod,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags
    ],
    isXML: true,
    serializer: xmlSerializer
};
const createSnapshotOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.BlobCreateSnapshotHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobCreateSnapshotExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp14
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.metadata,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.encryptionScope
    ],
    isXML: true,
    serializer: xmlSerializer
};
const startCopyFromURLOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        202: {
            headersMapper: _mappers.BlobStartCopyFromURLHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobStartCopyFromURLExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.metadata,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.immutabilityPolicyExpiry,
        _parameters.immutabilityPolicyMode,
        _parameters.tier,
        _parameters.rehydratePriority,
        _parameters.sourceIfModifiedSince,
        _parameters.sourceIfUnmodifiedSince,
        _parameters.sourceIfMatch,
        _parameters.sourceIfNoneMatch,
        _parameters.sourceIfTags,
        _parameters.copySource,
        _parameters.blobTagsString,
        _parameters.sealBlob,
        _parameters.legalHold1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const copyFromURLOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        202: {
            headersMapper: _mappers.BlobCopyFromURLHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobCopyFromURLExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.metadata,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.immutabilityPolicyExpiry,
        _parameters.immutabilityPolicyMode,
        _parameters.encryptionScope,
        _parameters.tier,
        _parameters.sourceIfModifiedSince,
        _parameters.sourceIfUnmodifiedSince,
        _parameters.sourceIfMatch,
        _parameters.sourceIfNoneMatch,
        _parameters.copySource,
        _parameters.blobTagsString,
        _parameters.legalHold1,
        _parameters.xMsRequiresSync,
        _parameters.sourceContentMD5,
        _parameters.copySourceAuthorization
    ],
    isXML: true,
    serializer: xmlSerializer
};
const abortCopyFromURLOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        204: {
            headersMapper: _mappers.BlobAbortCopyFromURLHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobAbortCopyFromURLExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp15,
        _parameters.copyId
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId,
        _parameters.copyActionAbortConstant
    ],
    isXML: true,
    serializer: xmlSerializer
};
const setTierOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.BlobSetTierHeaders
        },
        202: {
            headersMapper: _mappers.BlobSetTierHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobSetTierExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.snapshot,
        _parameters.versionId,
        _parameters.comp16
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId,
        _parameters.ifTags,
        _parameters.rehydratePriority,
        _parameters.tier1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const getAccountInfoOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "GET",
    responses: {
        200: {
            headersMapper: _mappers.BlobGetAccountInfoHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobGetAccountInfoExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.comp,
        _parameters.restype1
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.accept1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const queryOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Stream"
                },
                serializedName: "parsedResponse"
            },
            headersMapper: _mappers.BlobQueryHeaders
        },
        206: {
            bodyMapper: {
                type: {
                    name: "Stream"
                },
                serializedName: "parsedResponse"
            },
            headersMapper: _mappers.BlobQueryHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobQueryExceptionHeaders
        }
    },
    requestBody: _parameters.queryRequest,
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.snapshot,
        _parameters.comp17
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.contentType,
        _parameters.accept,
        _parameters.version,
        _parameters.requestId,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags
    ],
    isXML: true,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: xmlSerializer
};
const getTagsOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: _mappers.BlobTags,
            headersMapper: _mappers.BlobGetTagsHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobGetTagsExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.snapshot,
        _parameters.versionId,
        _parameters.comp18
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId,
        _parameters.ifTags
    ],
    isXML: true,
    serializer: xmlSerializer
};
const setTagsOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        204: {
            headersMapper: _mappers.BlobSetTagsHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlobSetTagsExceptionHeaders
        }
    },
    requestBody: _parameters.tags,
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.versionId,
        _parameters.comp18
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.contentType,
        _parameters.accept,
        _parameters.version,
        _parameters.requestId,
        _parameters.leaseId,
        _parameters.ifTags,
        _parameters.transactionalContentMD5,
        _parameters.transactionalContentCrc64
    ],
    isXML: true,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: xmlSerializer
};

},{"@azure/core-http":"iSINq","../models/mappers":"2ZlYI","../models/parameters":"dORMS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fsHo1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Class representing a PageBlob. */ parcelHelpers.export(exports, "PageBlob", ()=>PageBlob
);
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */ var _coreHttp = require("@azure/core-http");
var _mappers = require("../models/mappers");
var _parameters = require("../models/parameters");
class PageBlob {
    /**
     * Initialize a new instance of the class PageBlob class.
     * @param client Reference to the service client
     */ constructor(client){
        this.client = client;
    }
    /**
     * The Create operation creates a new page blob.
     * @param contentLength The length of the request.
     * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The
     *                          page blob size must be aligned to a 512-byte boundary.
     * @param options The options parameters.
     */ create(contentLength, blobContentLength, options) {
        const operationArguments = {
            contentLength,
            blobContentLength,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, createOperationSpec);
    }
    /**
     * The Upload Pages operation writes a range of pages to a page blob
     * @param contentLength The length of the request.
     * @param body Initial data
     * @param options The options parameters.
     */ uploadPages(contentLength, body, options) {
        const operationArguments = {
            contentLength,
            body,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, uploadPagesOperationSpec);
    }
    /**
     * The Clear Pages operation clears a set of pages from a page blob
     * @param contentLength The length of the request.
     * @param options The options parameters.
     */ clearPages(contentLength, options) {
        const operationArguments = {
            contentLength,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, clearPagesOperationSpec);
    }
    /**
     * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a
     * URL
     * @param sourceUrl Specify a URL to the copy source.
     * @param sourceRange Bytes of source data in the specified range. The length of this range should
     *                    match the ContentLength header and x-ms-range/Range destination range header.
     * @param contentLength The length of the request.
     * @param range The range of bytes to which the source range would be written. The range should be 512
     *              aligned and range-end is required.
     * @param options The options parameters.
     */ uploadPagesFromURL(sourceUrl, sourceRange, contentLength, range, options) {
        const operationArguments = {
            sourceUrl,
            sourceRange,
            contentLength,
            range,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, uploadPagesFromURLOperationSpec);
    }
    /**
     * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a
     * page blob
     * @param options The options parameters.
     */ getPageRanges(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, getPageRangesOperationSpec);
    }
    /**
     * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were
     * changed between target blob and previous snapshot.
     * @param options The options parameters.
     */ getPageRangesDiff(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, getPageRangesDiffOperationSpec);
    }
    /**
     * Resize the Blob
     * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The
     *                          page blob size must be aligned to a 512-byte boundary.
     * @param options The options parameters.
     */ resize(blobContentLength, options) {
        const operationArguments = {
            blobContentLength,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, resizeOperationSpec);
    }
    /**
     * Update the sequence number of the blob
     * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.
     *                             This property applies to page blobs only. This property indicates how the service should modify the
     *                             blob's sequence number
     * @param options The options parameters.
     */ updateSequenceNumber(sequenceNumberAction, options) {
        const operationArguments = {
            sequenceNumberAction,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, updateSequenceNumberOperationSpec);
    }
    /**
     * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.
     * The snapshot is copied such that only the differential changes between the previously copied
     * snapshot are transferred to the destination. The copied snapshots are complete copies of the
     * original snapshot and can be read or copied from as usual. This API is supported since REST version
     * 2016-05-31.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
     *                   access signature.
     * @param options The options parameters.
     */ copyIncremental(copySource, options) {
        const operationArguments = {
            copySource,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, copyIncrementalOperationSpec);
    }
}
// Operation Specifications
const xmlSerializer = new _coreHttp.Serializer(_mappers, /* isXml */ true);
const serializer = new _coreHttp.Serializer(_mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.PageBlobCreateHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.PageBlobCreateExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.contentLength,
        _parameters.metadata,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.blobCacheControl,
        _parameters.blobContentType,
        _parameters.blobContentMD5,
        _parameters.blobContentEncoding,
        _parameters.blobContentLanguage,
        _parameters.blobContentDisposition,
        _parameters.immutabilityPolicyExpiry,
        _parameters.immutabilityPolicyMode,
        _parameters.encryptionScope,
        _parameters.tier,
        _parameters.blobTagsString,
        _parameters.legalHold1,
        _parameters.blobType,
        _parameters.blobContentLength,
        _parameters.blobSequenceNumber
    ],
    isXML: true,
    serializer: xmlSerializer
};
const uploadPagesOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.PageBlobUploadPagesHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.PageBlobUploadPagesExceptionHeaders
        }
    },
    requestBody: _parameters.body1,
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp19
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.contentLength,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.range,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.encryptionScope,
        _parameters.transactionalContentMD5,
        _parameters.transactionalContentCrc64,
        _parameters.contentType1,
        _parameters.accept2,
        _parameters.pageWrite,
        _parameters.ifSequenceNumberLessThanOrEqualTo,
        _parameters.ifSequenceNumberLessThan,
        _parameters.ifSequenceNumberEqualTo
    ],
    mediaType: "binary",
    serializer
};
const clearPagesOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.PageBlobClearPagesHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.PageBlobClearPagesExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp19
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.contentLength,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.range,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.encryptionScope,
        _parameters.ifSequenceNumberLessThanOrEqualTo,
        _parameters.ifSequenceNumberLessThan,
        _parameters.ifSequenceNumberEqualTo,
        _parameters.pageWrite1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const uploadPagesFromURLOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.PageBlobUploadPagesFromURLHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.PageBlobUploadPagesFromURLExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp19
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.contentLength,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.encryptionScope,
        _parameters.sourceIfModifiedSince,
        _parameters.sourceIfUnmodifiedSince,
        _parameters.sourceIfMatch,
        _parameters.sourceIfNoneMatch,
        _parameters.sourceContentMD5,
        _parameters.copySourceAuthorization,
        _parameters.pageWrite,
        _parameters.ifSequenceNumberLessThanOrEqualTo,
        _parameters.ifSequenceNumberLessThan,
        _parameters.ifSequenceNumberEqualTo,
        _parameters.sourceUrl,
        _parameters.sourceRange,
        _parameters.sourceContentCrc64,
        _parameters.range1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const getPageRangesOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: _mappers.PageList,
            headersMapper: _mappers.PageBlobGetPageRangesHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.PageBlobGetPageRangesExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.snapshot,
        _parameters.comp20
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.range,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags
    ],
    isXML: true,
    serializer: xmlSerializer
};
const getPageRangesDiffOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: _mappers.PageList,
            headersMapper: _mappers.PageBlobGetPageRangesDiffHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.PageBlobGetPageRangesDiffExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.snapshot,
        _parameters.comp20,
        _parameters.prevsnapshot
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.range,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.prevSnapshotUrl
    ],
    isXML: true,
    serializer: xmlSerializer
};
const resizeOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.PageBlobResizeHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.PageBlobResizeExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.comp,
        _parameters.timeoutInSeconds
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.encryptionScope,
        _parameters.blobContentLength
    ],
    isXML: true,
    serializer: xmlSerializer
};
const updateSequenceNumberOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.PageBlobUpdateSequenceNumberHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.PageBlobUpdateSequenceNumberExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.comp,
        _parameters.timeoutInSeconds
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.blobSequenceNumber,
        _parameters.sequenceNumberAction
    ],
    isXML: true,
    serializer: xmlSerializer
};
const copyIncrementalOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        202: {
            headersMapper: _mappers.PageBlobCopyIncrementalHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.PageBlobCopyIncrementalExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp21
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.copySource
    ],
    isXML: true,
    serializer: xmlSerializer
};

},{"@azure/core-http":"iSINq","../models/mappers":"2ZlYI","../models/parameters":"dORMS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Mh9Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Class representing a AppendBlob. */ parcelHelpers.export(exports, "AppendBlob", ()=>AppendBlob
);
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */ var _coreHttp = require("@azure/core-http");
var _mappers = require("../models/mappers");
var _parameters = require("../models/parameters");
class AppendBlob {
    /**
     * Initialize a new instance of the class AppendBlob class.
     * @param client Reference to the service client
     */ constructor(client){
        this.client = client;
    }
    /**
     * The Create Append Blob operation creates a new append blob.
     * @param contentLength The length of the request.
     * @param options The options parameters.
     */ create(contentLength, options) {
        const operationArguments = {
            contentLength,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, createOperationSpec);
    }
    /**
     * The Append Block operation commits a new block of data to the end of an existing append blob. The
     * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to
     * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.
     * @param contentLength The length of the request.
     * @param body Initial data
     * @param options The options parameters.
     */ appendBlock(contentLength, body, options) {
        const operationArguments = {
            contentLength,
            body,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, appendBlockOperationSpec);
    }
    /**
     * The Append Block operation commits a new block of data to the end of an existing append blob where
     * the contents are read from a source url. The Append Block operation is permitted only if the blob
     * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version
     * 2015-02-21 version or later.
     * @param sourceUrl Specify a URL to the copy source.
     * @param contentLength The length of the request.
     * @param options The options parameters.
     */ appendBlockFromUrl(sourceUrl, contentLength, options) {
        const operationArguments = {
            sourceUrl,
            contentLength,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, appendBlockFromUrlOperationSpec);
    }
    /**
     * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version
     * 2019-12-12 version or later.
     * @param options The options parameters.
     */ seal(options) {
        const operationArguments = {
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, sealOperationSpec);
    }
}
// Operation Specifications
const xmlSerializer = new _coreHttp.Serializer(_mappers, /* isXml */ true);
const serializer = new _coreHttp.Serializer(_mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.AppendBlobCreateHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.AppendBlobCreateExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.contentLength,
        _parameters.metadata,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.blobCacheControl,
        _parameters.blobContentType,
        _parameters.blobContentMD5,
        _parameters.blobContentEncoding,
        _parameters.blobContentLanguage,
        _parameters.blobContentDisposition,
        _parameters.immutabilityPolicyExpiry,
        _parameters.immutabilityPolicyMode,
        _parameters.encryptionScope,
        _parameters.blobTagsString,
        _parameters.legalHold1,
        _parameters.blobType1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const appendBlockOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.AppendBlobAppendBlockHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.AppendBlobAppendBlockExceptionHeaders
        }
    },
    requestBody: _parameters.body1,
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp22
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.contentLength,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.encryptionScope,
        _parameters.transactionalContentMD5,
        _parameters.transactionalContentCrc64,
        _parameters.contentType1,
        _parameters.accept2,
        _parameters.maxSize,
        _parameters.appendPosition
    ],
    mediaType: "binary",
    serializer
};
const appendBlockFromUrlOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.AppendBlobAppendBlockFromUrlHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.AppendBlobAppendBlockFromUrlExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp22
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.contentLength,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.encryptionScope,
        _parameters.sourceIfModifiedSince,
        _parameters.sourceIfUnmodifiedSince,
        _parameters.sourceIfMatch,
        _parameters.sourceIfNoneMatch,
        _parameters.sourceContentMD5,
        _parameters.copySourceAuthorization,
        _parameters.transactionalContentMD5,
        _parameters.sourceUrl,
        _parameters.sourceContentCrc64,
        _parameters.maxSize,
        _parameters.appendPosition,
        _parameters.sourceRange1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const sealOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        200: {
            headersMapper: _mappers.AppendBlobSealHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.AppendBlobSealExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp23
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.appendPosition
    ],
    isXML: true,
    serializer: xmlSerializer
};

},{"@azure/core-http":"iSINq","../models/mappers":"2ZlYI","../models/parameters":"dORMS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fsPW1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/** Class representing a BlockBlob. */ parcelHelpers.export(exports, "BlockBlob", ()=>BlockBlob
);
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */ var _coreHttp = require("@azure/core-http");
var _mappers = require("../models/mappers");
var _parameters = require("../models/parameters");
class BlockBlob {
    /**
     * Initialize a new instance of the class BlockBlob class.
     * @param client Reference to the service client
     */ constructor(client){
        this.client = client;
    }
    /**
     * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing
     * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put
     * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a
     * partial update of the content of a block blob, use the Put Block List operation.
     * @param contentLength The length of the request.
     * @param body Initial data
     * @param options The options parameters.
     */ upload(contentLength, body, options) {
        const operationArguments = {
            contentLength,
            body,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, uploadOperationSpec);
    }
    /**
     * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read
     * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are
     * not supported with Put Blob from URL; the content of an existing blob is overwritten with the
     * content of the new blob.  To perform partial updates to a block blob’s contents using a source URL,
     * use the Put Block from URL API in conjunction with Put Block List.
     * @param contentLength The length of the request.
     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
     *                   access signature.
     * @param options The options parameters.
     */ putBlobFromUrl(contentLength, copySource, options) {
        const operationArguments = {
            contentLength,
            copySource,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, putBlobFromUrlOperationSpec);
    }
    /**
     * The Stage Block operation creates a new block to be committed as part of a blob
     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string
     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified
     *                for the blockid parameter must be the same size for each block.
     * @param contentLength The length of the request.
     * @param body Initial data
     * @param options The options parameters.
     */ stageBlock(blockId, contentLength, body, options) {
        const operationArguments = {
            blockId,
            contentLength,
            body,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, stageBlockOperationSpec);
    }
    /**
     * The Stage Block operation creates a new block to be committed as part of a blob where the contents
     * are read from a URL.
     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string
     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified
     *                for the blockid parameter must be the same size for each block.
     * @param contentLength The length of the request.
     * @param sourceUrl Specify a URL to the copy source.
     * @param options The options parameters.
     */ stageBlockFromURL(blockId, contentLength, sourceUrl, options) {
        const operationArguments = {
            blockId,
            contentLength,
            sourceUrl,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, stageBlockFromURLOperationSpec);
    }
    /**
     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the
     * blob. In order to be written as part of a blob, a block must have been successfully written to the
     * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading
     * only those blocks that have changed, then committing the new and existing blocks together. You can
     * do this by specifying whether to commit a block from the committed block list or from the
     * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list
     * it may belong to.
     * @param blocks Blob Blocks.
     * @param options The options parameters.
     */ commitBlockList(blocks, options) {
        const operationArguments = {
            blocks,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, commitBlockListOperationSpec);
    }
    /**
     * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block
     * blob
     * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted
     *                 blocks, or both lists together.
     * @param options The options parameters.
     */ getBlockList(listType, options) {
        const operationArguments = {
            listType,
            options: _coreHttp.operationOptionsToRequestOptionsBase(options || {
            })
        };
        return this.client.sendOperationRequest(operationArguments, getBlockListOperationSpec);
    }
}
// Operation Specifications
const xmlSerializer = new _coreHttp.Serializer(_mappers, /* isXml */ true);
const serializer = new _coreHttp.Serializer(_mappers, /* isXml */ false);
const uploadOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.BlockBlobUploadHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlockBlobUploadExceptionHeaders
        }
    },
    requestBody: _parameters.body1,
    queryParameters: [
        _parameters.timeoutInSeconds
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.contentLength,
        _parameters.metadata,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.blobCacheControl,
        _parameters.blobContentType,
        _parameters.blobContentMD5,
        _parameters.blobContentEncoding,
        _parameters.blobContentLanguage,
        _parameters.blobContentDisposition,
        _parameters.immutabilityPolicyExpiry,
        _parameters.immutabilityPolicyMode,
        _parameters.encryptionScope,
        _parameters.tier,
        _parameters.blobTagsString,
        _parameters.legalHold1,
        _parameters.transactionalContentMD5,
        _parameters.contentType1,
        _parameters.accept2,
        _parameters.blobType2
    ],
    mediaType: "binary",
    serializer
};
const putBlobFromUrlOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.BlockBlobPutBlobFromUrlHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlockBlobPutBlobFromUrlExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.contentLength,
        _parameters.metadata,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.blobCacheControl,
        _parameters.blobContentType,
        _parameters.blobContentMD5,
        _parameters.blobContentEncoding,
        _parameters.blobContentLanguage,
        _parameters.blobContentDisposition,
        _parameters.encryptionScope,
        _parameters.tier,
        _parameters.sourceIfModifiedSince,
        _parameters.sourceIfUnmodifiedSince,
        _parameters.sourceIfMatch,
        _parameters.sourceIfNoneMatch,
        _parameters.sourceIfTags,
        _parameters.copySource,
        _parameters.blobTagsString,
        _parameters.sourceContentMD5,
        _parameters.copySourceAuthorization,
        _parameters.transactionalContentMD5,
        _parameters.blobType2,
        _parameters.copySourceBlobProperties
    ],
    isXML: true,
    serializer: xmlSerializer
};
const stageBlockOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.BlockBlobStageBlockHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlockBlobStageBlockExceptionHeaders
        }
    },
    requestBody: _parameters.body1,
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp24,
        _parameters.blockId
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.contentLength,
        _parameters.leaseId,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.encryptionScope,
        _parameters.transactionalContentMD5,
        _parameters.transactionalContentCrc64,
        _parameters.contentType1,
        _parameters.accept2
    ],
    mediaType: "binary",
    serializer
};
const stageBlockFromURLOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.BlockBlobStageBlockFromURLHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlockBlobStageBlockFromURLExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp24,
        _parameters.blockId
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.contentLength,
        _parameters.leaseId,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.encryptionScope,
        _parameters.sourceIfModifiedSince,
        _parameters.sourceIfUnmodifiedSince,
        _parameters.sourceIfMatch,
        _parameters.sourceIfNoneMatch,
        _parameters.sourceContentMD5,
        _parameters.copySourceAuthorization,
        _parameters.sourceUrl,
        _parameters.sourceContentCrc64,
        _parameters.sourceRange1
    ],
    isXML: true,
    serializer: xmlSerializer
};
const commitBlockListOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
        201: {
            headersMapper: _mappers.BlockBlobCommitBlockListHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlockBlobCommitBlockListExceptionHeaders
        }
    },
    requestBody: _parameters.blocks,
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.comp25
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.contentType,
        _parameters.accept,
        _parameters.version,
        _parameters.requestId,
        _parameters.metadata,
        _parameters.leaseId,
        _parameters.ifModifiedSince,
        _parameters.ifUnmodifiedSince,
        _parameters.encryptionKey,
        _parameters.encryptionKeySha256,
        _parameters.encryptionAlgorithm,
        _parameters.ifMatch,
        _parameters.ifNoneMatch,
        _parameters.ifTags,
        _parameters.blobCacheControl,
        _parameters.blobContentType,
        _parameters.blobContentMD5,
        _parameters.blobContentEncoding,
        _parameters.blobContentLanguage,
        _parameters.blobContentDisposition,
        _parameters.immutabilityPolicyExpiry,
        _parameters.immutabilityPolicyMode,
        _parameters.encryptionScope,
        _parameters.tier,
        _parameters.blobTagsString,
        _parameters.legalHold1,
        _parameters.transactionalContentMD5,
        _parameters.transactionalContentCrc64
    ],
    isXML: true,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: xmlSerializer
};
const getBlockListOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: _mappers.BlockList,
            headersMapper: _mappers.BlockBlobGetBlockListHeaders
        },
        default: {
            bodyMapper: _mappers.StorageError,
            headersMapper: _mappers.BlockBlobGetBlockListExceptionHeaders
        }
    },
    queryParameters: [
        _parameters.timeoutInSeconds,
        _parameters.snapshot,
        _parameters.comp25,
        _parameters.listType
    ],
    urlParameters: [
        _parameters.url
    ],
    headerParameters: [
        _parameters.version,
        _parameters.requestId,
        _parameters.accept1,
        _parameters.leaseId,
        _parameters.ifTags
    ],
    isXML: true,
    serializer: xmlSerializer
};

},{"@azure/core-http":"iSINq","../models/mappers":"2ZlYI","../models/parameters":"dORMS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bsozg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Export following interfaces and types for customers who want to implement their
// own RequestPolicy or HTTPClient
parcelHelpers.export(exports, "BaseRequestPolicy", ()=>_coreHttp.BaseRequestPolicy
);
parcelHelpers.export(exports, "StorageOAuthScopes", ()=>_constants.StorageOAuthScopes
);
parcelHelpers.export(exports, "deserializationPolicy", ()=>_coreHttp.deserializationPolicy
);
parcelHelpers.export(exports, "HttpHeaders", ()=>_coreHttp.HttpHeaders
);
parcelHelpers.export(exports, "WebResource", ()=>_coreHttp.WebResource
);
parcelHelpers.export(exports, "RequestPolicyOptions", ()=>_coreHttp.RequestPolicyOptions
);
/**
 * A helper to decide if a given argument satisfies the Pipeline contract
 * @param pipeline - An argument that may be a Pipeline
 * @returns true when the argument satisfies the Pipeline contract
 */ parcelHelpers.export(exports, "isPipelineLike", ()=>isPipelineLike
);
/**
 * A Pipeline class containing HTTP request policies.
 * You can create a default Pipeline by calling {@link newPipeline}.
 * Or you can create a Pipeline with your own policies by the constructor of Pipeline.
 *
 * Refer to {@link newPipeline} and provided policies before implementing your
 * customized Pipeline.
 */ parcelHelpers.export(exports, "Pipeline", ()=>Pipeline
);
/**
 * Creates a new Pipeline object with Credential provided.
 *
 * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
 * @param pipelineOptions - Optional. Options.
 * @returns A new Pipeline object.
 */ parcelHelpers.export(exports, "newPipeline", ()=>newPipeline
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreHttp = require("@azure/core-http");
var _log = require("./log");
var _storageBrowserPolicyFactory = require("./StorageBrowserPolicyFactory");
var _storageRetryPolicyFactory = require("./StorageRetryPolicyFactory");
var _anonymousCredential = require("./credentials/AnonymousCredential");
var _constants = require("./utils/constants");
var _telemetryPolicyFactory = require("./TelemetryPolicyFactory");
var _cache = require("./utils/cache");
var _utilsCommon = require("./utils/utils.common");
var _storageBearerTokenChallengeAuthenticationPolicy = require("./policies/StorageBearerTokenChallengeAuthenticationPolicy");
function isPipelineLike(pipeline) {
    if (!pipeline || typeof pipeline !== "object") return false;
    const castPipeline = pipeline;
    return Array.isArray(castPipeline.factories) && typeof castPipeline.options === "object" && typeof castPipeline.toServiceClientOptions === "function";
}
class Pipeline {
    /**
     * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.
     *
     * @param factories -
     * @param options -
     */ constructor(factories, options = {
    }){
        this.factories = factories;
        // when options.httpClient is not specified, passing in a DefaultHttpClient instance to
        // avoid each client creating its own http client.
        this.options = Object.assign(Object.assign({
        }, options), {
            httpClient: options.httpClient || _cache.getCachedDefaultHttpClient()
        });
    }
    /**
     * Transfer Pipeline object to ServiceClientOptions object which is required by
     * ServiceClient constructor.
     *
     * @returns The ServiceClientOptions object from this Pipeline.
     */ toServiceClientOptions() {
        return {
            httpClient: this.options.httpClient,
            requestPolicyFactories: this.factories
        };
    }
}
function newPipeline(credential, pipelineOptions = {
}) {
    var _a;
    if (credential === undefined) credential = new _anonymousCredential.AnonymousCredential();
    // Order is important. Closer to the API at the top & closer to the network at the bottom.
    // The credential's policy factory must appear close to the wire so it can sign any
    // changes made by other factories (like UniqueRequestIDPolicyFactory)
    const telemetryPolicy = new _telemetryPolicyFactory.TelemetryPolicyFactory(pipelineOptions.userAgentOptions);
    const factories = [
        _coreHttp.tracingPolicy({
            userAgent: telemetryPolicy.telemetryString
        }),
        _coreHttp.keepAlivePolicy(pipelineOptions.keepAliveOptions),
        telemetryPolicy,
        _coreHttp.generateClientRequestIdPolicy(),
        new _storageBrowserPolicyFactory.StorageBrowserPolicyFactory(),
        new _storageRetryPolicyFactory.StorageRetryPolicyFactory(pipelineOptions.retryOptions),
        // Default deserializationPolicy is provided by protocol layer
        // Use customized XML char key of "#" so we could deserialize metadata
        // with "_" key
        _coreHttp.deserializationPolicy(undefined, {
            xmlCharKey: "#"
        }),
        _coreHttp.logPolicy({
            logger: _log.logger.info,
            allowedHeaderNames: _constants.StorageBlobLoggingAllowedHeaderNames,
            allowedQueryParameters: _constants.StorageBlobLoggingAllowedQueryParameters
        }), 
    ];
    if (_coreHttp.isNode) {
        // policies only available in Node.js runtime, not in browsers
        factories.push(_coreHttp.proxyPolicy(pipelineOptions.proxyOptions));
        factories.push(_coreHttp.disableResponseDecompressionPolicy());
    }
    factories.push(_coreHttp.isTokenCredential(credential) ? _utilsCommon.attachCredential(_storageBearerTokenChallengeAuthenticationPolicy.storageBearerTokenChallengeAuthenticationPolicy(credential, (_a = pipelineOptions.audience) !== null && _a !== void 0 ? _a : _constants.StorageOAuthScopes), credential) : credential);
    return new Pipeline(factories, pipelineOptions);
}

},{"@azure/core-http":"iSINq","./log":"gc1Rl","./StorageBrowserPolicyFactory":"lNMbH","./StorageRetryPolicyFactory":"ealHa","./credentials/AnonymousCredential":"f0sOe","./utils/constants":"4gX5x","./TelemetryPolicyFactory":"iAbBd","./utils/cache":"5SpI4","./utils/utils.common":"2SR3M","./policies/StorageBearerTokenChallengeAuthenticationPolicy":"6pDQp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gc1Rl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logger", ()=>logger
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _logger = require("@azure/logger");
const logger = _logger.createClientLogger("storage-blob");

},{"@azure/logger":"7TN6Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lNMbH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StorageBrowserPolicy", ()=>_storageBrowserPolicy.StorageBrowserPolicy
);
/**
 * StorageBrowserPolicyFactory is a factory class helping generating StorageBrowserPolicy objects.
 */ parcelHelpers.export(exports, "StorageBrowserPolicyFactory", ()=>StorageBrowserPolicyFactory
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _storageBrowserPolicy = require("./policies/StorageBrowserPolicy");
class StorageBrowserPolicyFactory {
    /**
     * Creates a StorageBrowserPolicyFactory object.
     *
     * @param nextPolicy -
     * @param options -
     */ create(nextPolicy, options) {
        return new _storageBrowserPolicy.StorageBrowserPolicy(nextPolicy, options);
    }
}

},{"./policies/StorageBrowserPolicy":"9E0kg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9E0kg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:
 *
 * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.
 * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL
 * thus avoid the browser cache.
 *
 * 2. Remove cookie header for security
 *
 * 3. Remove content-length header to avoid browsers warning
 */ parcelHelpers.export(exports, "StorageBrowserPolicy", ()=>StorageBrowserPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreHttp = require("@azure/core-http");
var _constants = require("../utils/constants");
var _utilsCommon = require("../utils/utils.common");
class StorageBrowserPolicy extends _coreHttp.BaseRequestPolicy {
    /**
     * Creates an instance of StorageBrowserPolicy.
     * @param nextPolicy -
     * @param options -
     */ // The base class has a protected constructor. Adding a public one to enable constructing of this class.
    /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/ constructor(nextPolicy, options){
        super(nextPolicy, options);
    }
    /**
     * Sends out request.
     *
     * @param request -
     */ async sendRequest(request) {
        if (_coreHttp.isNode) return this._nextPolicy.sendRequest(request);
        if (request.method.toUpperCase() === "GET" || request.method.toUpperCase() === "HEAD") request.url = _utilsCommon.setURLParameter(request.url, _constants.URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());
        request.headers.remove(_constants.HeaderConstants.COOKIE);
        // According to XHR standards, content-length should be fully controlled by browsers
        request.headers.remove(_constants.HeaderConstants.CONTENT_LENGTH);
        return this._nextPolicy.sendRequest(request);
    }
}

},{"@azure/core-http":"iSINq","../utils/constants":"4gX5x","../utils/utils.common":"2SR3M","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4gX5x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SDK_VERSION", ()=>SDK_VERSION
);
parcelHelpers.export(exports, "SERVICE_VERSION", ()=>SERVICE_VERSION
);
parcelHelpers.export(exports, "BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES", ()=>BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES
);
parcelHelpers.export(exports, "BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES", ()=>BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES
);
parcelHelpers.export(exports, "BLOCK_BLOB_MAX_BLOCKS", ()=>BLOCK_BLOB_MAX_BLOCKS
);
parcelHelpers.export(exports, "DEFAULT_BLOCK_BUFFER_SIZE_BYTES", ()=>DEFAULT_BLOCK_BUFFER_SIZE_BYTES
);
parcelHelpers.export(exports, "DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES", ()=>DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES
);
parcelHelpers.export(exports, "DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS", ()=>DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS
);
parcelHelpers.export(exports, "StorageOAuthScopes", ()=>StorageOAuthScopes
);
parcelHelpers.export(exports, "URLConstants", ()=>URLConstants
);
parcelHelpers.export(exports, "HTTPURLConnection", ()=>HTTPURLConnection
);
parcelHelpers.export(exports, "HeaderConstants", ()=>HeaderConstants
);
parcelHelpers.export(exports, "ETagNone", ()=>ETagNone
);
parcelHelpers.export(exports, "ETagAny", ()=>ETagAny
);
parcelHelpers.export(exports, "SIZE_1_MB", ()=>SIZE_1_MB
);
parcelHelpers.export(exports, "BATCH_MAX_REQUEST", ()=>BATCH_MAX_REQUEST
);
parcelHelpers.export(exports, "BATCH_MAX_PAYLOAD_IN_BYTES", ()=>BATCH_MAX_PAYLOAD_IN_BYTES
);
parcelHelpers.export(exports, "HTTP_LINE_ENDING", ()=>HTTP_LINE_ENDING
);
parcelHelpers.export(exports, "HTTP_VERSION_1_1", ()=>HTTP_VERSION_1_1
);
parcelHelpers.export(exports, "EncryptionAlgorithmAES25", ()=>EncryptionAlgorithmAES25
);
parcelHelpers.export(exports, "DevelopmentConnectionString", ()=>DevelopmentConnectionString
);
parcelHelpers.export(exports, "StorageBlobLoggingAllowedHeaderNames", ()=>StorageBlobLoggingAllowedHeaderNames
);
parcelHelpers.export(exports, "StorageBlobLoggingAllowedQueryParameters", ()=>StorageBlobLoggingAllowedQueryParameters
);
parcelHelpers.export(exports, "BlobUsesCustomerSpecifiedEncryptionMsg", ()=>BlobUsesCustomerSpecifiedEncryptionMsg
);
const SDK_VERSION = "12.9.0";
const SERVICE_VERSION = "2021-04-10";
const BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = 268435456; // 256MB
const BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = 4194304000; // 4000MB
const BLOCK_BLOB_MAX_BLOCKS = 50000;
const DEFAULT_BLOCK_BUFFER_SIZE_BYTES = 8388608; // 8MB
const DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = 4194304; // 4MB
const DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = 5;
const StorageOAuthScopes = "https://storage.azure.com/.default";
const URLConstants = {
    Parameters: {
        FORCE_BROWSER_NO_CACHE: "_",
        SIGNATURE: "sig",
        SNAPSHOT: "snapshot",
        VERSIONID: "versionid",
        TIMEOUT: "timeout"
    }
};
const HTTPURLConnection = {
    HTTP_ACCEPTED: 202,
    HTTP_CONFLICT: 409,
    HTTP_NOT_FOUND: 404,
    HTTP_PRECON_FAILED: 412,
    HTTP_RANGE_NOT_SATISFIABLE: 416
};
const HeaderConstants = {
    AUTHORIZATION: "Authorization",
    AUTHORIZATION_SCHEME: "Bearer",
    CONTENT_ENCODING: "Content-Encoding",
    CONTENT_ID: "Content-ID",
    CONTENT_LANGUAGE: "Content-Language",
    CONTENT_LENGTH: "Content-Length",
    CONTENT_MD5: "Content-Md5",
    CONTENT_TRANSFER_ENCODING: "Content-Transfer-Encoding",
    CONTENT_TYPE: "Content-Type",
    COOKIE: "Cookie",
    DATE: "date",
    IF_MATCH: "if-match",
    IF_MODIFIED_SINCE: "if-modified-since",
    IF_NONE_MATCH: "if-none-match",
    IF_UNMODIFIED_SINCE: "if-unmodified-since",
    PREFIX_FOR_STORAGE: "x-ms-",
    RANGE: "Range",
    USER_AGENT: "User-Agent",
    X_MS_CLIENT_REQUEST_ID: "x-ms-client-request-id",
    X_MS_COPY_SOURCE: "x-ms-copy-source",
    X_MS_DATE: "x-ms-date",
    X_MS_ERROR_CODE: "x-ms-error-code",
    X_MS_VERSION: "x-ms-version"
};
const ETagNone = "";
const ETagAny = "*";
const SIZE_1_MB = 1048576;
const BATCH_MAX_REQUEST = 256;
const BATCH_MAX_PAYLOAD_IN_BYTES = 4 * SIZE_1_MB;
const HTTP_LINE_ENDING = "\r\n";
const HTTP_VERSION_1_1 = "HTTP/1.1";
const EncryptionAlgorithmAES25 = "AES256";
const DevelopmentConnectionString = `DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;`;
const StorageBlobLoggingAllowedHeaderNames = [
    "Access-Control-Allow-Origin",
    "Cache-Control",
    "Content-Length",
    "Content-Type",
    "Date",
    "Request-Id",
    "traceparent",
    "Transfer-Encoding",
    "User-Agent",
    "x-ms-client-request-id",
    "x-ms-date",
    "x-ms-error-code",
    "x-ms-request-id",
    "x-ms-return-client-request-id",
    "x-ms-version",
    "Accept-Ranges",
    "Content-Disposition",
    "Content-Encoding",
    "Content-Language",
    "Content-MD5",
    "Content-Range",
    "ETag",
    "Last-Modified",
    "Server",
    "Vary",
    "x-ms-content-crc64",
    "x-ms-copy-action",
    "x-ms-copy-completion-time",
    "x-ms-copy-id",
    "x-ms-copy-progress",
    "x-ms-copy-status",
    "x-ms-has-immutability-policy",
    "x-ms-has-legal-hold",
    "x-ms-lease-state",
    "x-ms-lease-status",
    "x-ms-range",
    "x-ms-request-server-encrypted",
    "x-ms-server-encrypted",
    "x-ms-snapshot",
    "x-ms-source-range",
    "If-Match",
    "If-Modified-Since",
    "If-None-Match",
    "If-Unmodified-Since",
    "x-ms-access-tier",
    "x-ms-access-tier-change-time",
    "x-ms-access-tier-inferred",
    "x-ms-account-kind",
    "x-ms-archive-status",
    "x-ms-blob-append-offset",
    "x-ms-blob-cache-control",
    "x-ms-blob-committed-block-count",
    "x-ms-blob-condition-appendpos",
    "x-ms-blob-condition-maxsize",
    "x-ms-blob-content-disposition",
    "x-ms-blob-content-encoding",
    "x-ms-blob-content-language",
    "x-ms-blob-content-length",
    "x-ms-blob-content-md5",
    "x-ms-blob-content-type",
    "x-ms-blob-public-access",
    "x-ms-blob-sequence-number",
    "x-ms-blob-type",
    "x-ms-copy-destination-snapshot",
    "x-ms-creation-time",
    "x-ms-default-encryption-scope",
    "x-ms-delete-snapshots",
    "x-ms-delete-type-permanent",
    "x-ms-deny-encryption-scope-override",
    "x-ms-encryption-algorithm",
    "x-ms-if-sequence-number-eq",
    "x-ms-if-sequence-number-le",
    "x-ms-if-sequence-number-lt",
    "x-ms-incremental-copy",
    "x-ms-lease-action",
    "x-ms-lease-break-period",
    "x-ms-lease-duration",
    "x-ms-lease-id",
    "x-ms-lease-time",
    "x-ms-page-write",
    "x-ms-proposed-lease-id",
    "x-ms-range-get-content-md5",
    "x-ms-rehydrate-priority",
    "x-ms-sequence-number-action",
    "x-ms-sku-name",
    "x-ms-source-content-md5",
    "x-ms-source-if-match",
    "x-ms-source-if-modified-since",
    "x-ms-source-if-none-match",
    "x-ms-source-if-unmodified-since",
    "x-ms-tag-count",
    "x-ms-encryption-key-sha256",
    "x-ms-if-tags",
    "x-ms-source-if-tags", 
];
const StorageBlobLoggingAllowedQueryParameters = [
    "comp",
    "maxresults",
    "rscc",
    "rscd",
    "rsce",
    "rscl",
    "rsct",
    "se",
    "si",
    "sip",
    "sp",
    "spr",
    "sr",
    "srt",
    "ss",
    "st",
    "sv",
    "include",
    "marker",
    "prefix",
    "copyid",
    "restype",
    "blockid",
    "blocklisttype",
    "delimiter",
    "prevsnapshot",
    "ske",
    "skoid",
    "sks",
    "skt",
    "sktid",
    "skv",
    "snapshot", 
];
const BlobUsesCustomerSpecifiedEncryptionMsg = "BlobUsesCustomerSpecifiedEncryption";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2SR3M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Reserved URL characters must be properly escaped for Storage services like Blob or File.
 *
 * ## URL encode and escape strategy for JS SDKs
 *
 * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.
 * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL
 * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.
 *
 * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.
 *
 * This is what legacy V2 SDK does, simple and works for most of the cases.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b:",
 *   SDK will encode it to "http://account.blob.core.windows.net/con/b%3A" and send to server. A blob named "b:" will be created.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b%3A",
 *   SDK will encode it to "http://account.blob.core.windows.net/con/b%253A" and send to server. A blob named "b%3A" will be created.
 *
 * But this strategy will make it not possible to create a blob with "?" in it's name. Because when customer URL string is
 * "http://account.blob.core.windows.net/con/blob?name", the "?name" will be treated as URL paramter instead of blob name.
 * If customer URL string is "http://account.blob.core.windows.net/con/blob%3Fname", a blob named "blob%3Fname" will be created.
 * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.
 * We cannot accept a SDK cannot create a blob name with "?". So we implement strategy two:
 *
 * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.
 *
 * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b:",
 *   SDK will escape ":" like "http://account.blob.core.windows.net/con/b%3A" and send to server. A blob named "b:" will be created.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b%3A",
 *   There is no special characters, so send "http://account.blob.core.windows.net/con/b%3A" to server. A blob named "b:" will be created.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b%253A",
 *   There is no special characters, so send "http://account.blob.core.windows.net/con/b%253A" to server. A blob named "b%3A" will be created.
 *
 * This strategy gives us flexibility to create with any special characters. But "%" will be treated as a special characters, if the URL string
 * is not encoded, there shouldn't a "%" in the URL string, otherwise the URL is not a valid URL.
 * If customer needs to create a blob with "%" in it's blob name, use "%25" instead of "%". Just like above 3rd sample.
 * And following URL strings are invalid:
 * - "http://account.blob.core.windows.net/con/b%"
 * - "http://account.blob.core.windows.net/con/b%2"
 * - "http://account.blob.core.windows.net/con/b%G"
 *
 * Another special character is "?", use "%2F" to represent a blob name with "?" in a URL string.
 *
 * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`
 *
 * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata
 *
 * @param url -
 */ parcelHelpers.export(exports, "escapeURLPath", ()=>escapeURLPath
);
parcelHelpers.export(exports, "getValueInConnString", ()=>getValueInConnString
);
/**
 * Extracts the parts of an Azure Storage account connection string.
 *
 * @param connectionString - Connection string.
 * @returns String key value pairs of the storage account's url and credentials.
 */ parcelHelpers.export(exports, "extractConnectionStringParts", ()=>extractConnectionStringParts
);
/**
 * Append a string to URL path. Will remove duplicated "/" in front of the string
 * when URL path ends with a "/".
 *
 * @param url - Source URL string
 * @param name - String to be appended to URL
 * @returns An updated URL string
 */ parcelHelpers.export(exports, "appendToURLPath", ()=>appendToURLPath
);
/**
 * Set URL parameter name and value. If name exists in URL parameters, old value
 * will be replaced by name key. If not provide value, the parameter will be deleted.
 *
 * @param url - Source URL string
 * @param name - Parameter name
 * @param value - Parameter value
 * @returns An updated URL string
 */ parcelHelpers.export(exports, "setURLParameter", ()=>setURLParameter
);
/**
 * Get URL parameter by name.
 *
 * @param url -
 * @param name -
 */ parcelHelpers.export(exports, "getURLParameter", ()=>getURLParameter
);
/**
 * Set URL host.
 *
 * @param url - Source URL string
 * @param host - New host string
 * @returns An updated URL string
 */ parcelHelpers.export(exports, "setURLHost", ()=>setURLHost
);
/**
 * Get URL path from an URL string.
 *
 * @param url - Source URL string
 */ parcelHelpers.export(exports, "getURLPath", ()=>getURLPath
);
/**
 * Get URL scheme from an URL string.
 *
 * @param url - Source URL string
 */ parcelHelpers.export(exports, "getURLScheme", ()=>getURLScheme
);
/**
 * Get URL path and query from an URL string.
 *
 * @param url - Source URL string
 */ parcelHelpers.export(exports, "getURLPathAndQuery", ()=>getURLPathAndQuery
);
/**
 * Get URL query key value pairs from an URL string.
 *
 * @param url -
 */ parcelHelpers.export(exports, "getURLQueries", ()=>getURLQueries
);
/**
 * Append a string to URL query.
 *
 * @param url - Source URL string.
 * @param queryParts - String to be appended to the URL query.
 * @returns An updated URL string.
 */ parcelHelpers.export(exports, "appendToURLQuery", ()=>appendToURLQuery
);
/**
 * Rounds a date off to seconds.
 *
 * @param date -
 * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;
 *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.
 * @returns Date string in ISO8061 format, with or without 7 milliseconds component
 */ parcelHelpers.export(exports, "truncatedISO8061Date", ()=>truncatedISO8061Date
);
/**
 * Base64 encode.
 *
 * @param content -
 */ parcelHelpers.export(exports, "base64encode", ()=>base64encode
);
/**
 * Base64 decode.
 *
 * @param encodedString -
 */ parcelHelpers.export(exports, "base64decode", ()=>base64decode
);
/**
 * Generate a 64 bytes base64 block ID string.
 *
 * @param blockIndex -
 */ parcelHelpers.export(exports, "generateBlockID", ()=>generateBlockID
);
/**
 * Delay specified time interval.
 *
 * @param timeInMs -
 * @param aborter -
 * @param abortError -
 */ parcelHelpers.export(exports, "delay", ()=>delay
);
/**
 * String.prototype.padStart()
 *
 * @param currentString -
 * @param targetLength -
 * @param padString -
 */ parcelHelpers.export(exports, "padStart", ()=>padStart
);
parcelHelpers.export(exports, "sanitizeURL", ()=>sanitizeURL
);
parcelHelpers.export(exports, "sanitizeHeaders", ()=>sanitizeHeaders
);
/**
 * If two strings are equal when compared case insensitive.
 *
 * @param str1 -
 * @param str2 -
 */ parcelHelpers.export(exports, "iEqual", ()=>iEqual
);
/**
 * Extracts account name from the url
 * @param url - url to extract the account name from
 * @returns with the account name
 */ parcelHelpers.export(exports, "getAccountNameFromUrl", ()=>getAccountNameFromUrl
);
parcelHelpers.export(exports, "isIpEndpointStyle", ()=>isIpEndpointStyle
);
/**
 * Convert Tags to encoded string.
 *
 * @param tags -
 */ parcelHelpers.export(exports, "toBlobTagsString", ()=>toBlobTagsString
);
/**
 * Convert Tags type to BlobTags.
 *
 * @param tags -
 */ parcelHelpers.export(exports, "toBlobTags", ()=>toBlobTags
);
/**
 * Covert BlobTags to Tags type.
 *
 * @param tags -
 */ parcelHelpers.export(exports, "toTags", ()=>toTags
);
/**
 * Convert BlobQueryTextConfiguration to QuerySerialization type.
 *
 * @param textConfiguration -
 */ parcelHelpers.export(exports, "toQuerySerialization", ()=>toQuerySerialization
);
parcelHelpers.export(exports, "parseObjectReplicationRecord", ()=>parseObjectReplicationRecord
);
/**
 * Attach a TokenCredential to an object.
 *
 * @param thing -
 * @param credential -
 */ parcelHelpers.export(exports, "attachCredential", ()=>attachCredential
);
parcelHelpers.export(exports, "httpAuthorizationToString", ()=>httpAuthorizationToString
);
parcelHelpers.export(exports, "BlobNameToString", ()=>BlobNameToString
);
parcelHelpers.export(exports, "ConvertInternalResponseOfListBlobFlat", ()=>ConvertInternalResponseOfListBlobFlat
);
parcelHelpers.export(exports, "ConvertInternalResponseOfListBlobHierarchy", ()=>ConvertInternalResponseOfListBlobHierarchy
);
parcelHelpers.export(exports, "ProcessBlobItems", ()=>ProcessBlobItems
);
parcelHelpers.export(exports, "ProcessBlobPrefixes", ()=>ProcessBlobPrefixes
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreHttp = require("@azure/core-http");
var _constants = require("./constants");
var Buffer = require("buffer").Buffer;
function escapeURLPath(url) {
    const urlParsed = _coreHttp.URLBuilder.parse(url);
    let path = urlParsed.getPath();
    path = path || "/";
    path = escape(path);
    urlParsed.setPath(path);
    return urlParsed.toString();
}
function getProxyUriFromDevConnString(connectionString) {
    // Development Connection String
    // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key
    let proxyUri = "";
    if (connectionString.search("DevelopmentStorageProxyUri=") !== -1) {
        // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri
        const matchCredentials = connectionString.split(";");
        for (const element of matchCredentials)if (element.trim().startsWith("DevelopmentStorageProxyUri=")) proxyUri = element.trim().match("DevelopmentStorageProxyUri=(.*)")[1];
    }
    return proxyUri;
}
function getValueInConnString(connectionString, argument) {
    const elements = connectionString.split(";");
    for (const element of elements){
        if (element.trim().startsWith(argument)) return element.trim().match(argument + "=(.*)")[1];
    }
    return "";
}
function extractConnectionStringParts(connectionString) {
    let proxyUri = "";
    if (connectionString.startsWith("UseDevelopmentStorage=true")) {
        // Development connection string
        proxyUri = getProxyUriFromDevConnString(connectionString);
        connectionString = _constants.DevelopmentConnectionString;
    }
    // Matching BlobEndpoint in the Account connection string
    let blobEndpoint = getValueInConnString(connectionString, "BlobEndpoint");
    // Slicing off '/' at the end if exists
    // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)
    blobEndpoint = blobEndpoint.endsWith("/") ? blobEndpoint.slice(0, -1) : blobEndpoint;
    if (connectionString.search("DefaultEndpointsProtocol=") !== -1 && connectionString.search("AccountKey=") !== -1) {
        // Account connection string
        let defaultEndpointsProtocol = "";
        let accountName = "";
        let accountKey = Buffer.from("accountKey", "base64");
        let endpointSuffix = "";
        // Get account name and key
        accountName = getValueInConnString(connectionString, "AccountName");
        accountKey = Buffer.from(getValueInConnString(connectionString, "AccountKey"), "base64");
        if (!blobEndpoint) {
            // BlobEndpoint is not present in the Account connection string
            // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`
            defaultEndpointsProtocol = getValueInConnString(connectionString, "DefaultEndpointsProtocol");
            const protocol = defaultEndpointsProtocol.toLowerCase();
            if (protocol !== "https" && protocol !== "http") throw new Error("Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'");
            endpointSuffix = getValueInConnString(connectionString, "EndpointSuffix");
            if (!endpointSuffix) throw new Error("Invalid EndpointSuffix in the provided Connection String");
            blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;
        }
        if (!accountName) throw new Error("Invalid AccountName in the provided Connection String");
        else if (accountKey.length === 0) throw new Error("Invalid AccountKey in the provided Connection String");
        return {
            kind: "AccountConnString",
            url: blobEndpoint,
            accountName,
            accountKey,
            proxyUri
        };
    } else {
        // SAS connection string
        const accountSas = getValueInConnString(connectionString, "SharedAccessSignature");
        const accountName = getAccountNameFromUrl(blobEndpoint);
        if (!blobEndpoint) throw new Error("Invalid BlobEndpoint in the provided SAS Connection String");
        else if (!accountSas) throw new Error("Invalid SharedAccessSignature in the provided SAS Connection String");
        return {
            kind: "SASConnString",
            url: blobEndpoint,
            accountName,
            accountSas
        };
    }
}
/**
 * Internal escape method implemented Strategy Two mentioned in escapeURL() description.
 *
 * @param text -
 */ function escape(text) {
    return encodeURIComponent(text).replace(/%2F/g, "/") // Don't escape for "/"
    .replace(/'/g, "%27") // Escape for "'"
    .replace(/\+/g, "%20").replace(/%25/g, "%"); // Revert encoded "%"
}
function appendToURLPath(url, name) {
    const urlParsed = _coreHttp.URLBuilder.parse(url);
    let path = urlParsed.getPath();
    path = path ? path.endsWith("/") ? `${path}${name}` : `${path}/${name}` : name;
    urlParsed.setPath(path);
    return urlParsed.toString();
}
function setURLParameter(url, name, value) {
    const urlParsed = _coreHttp.URLBuilder.parse(url);
    urlParsed.setQueryParameter(name, value);
    return urlParsed.toString();
}
function getURLParameter(url, name) {
    const urlParsed = _coreHttp.URLBuilder.parse(url);
    return urlParsed.getQueryParameterValue(name);
}
function setURLHost(url, host) {
    const urlParsed = _coreHttp.URLBuilder.parse(url);
    urlParsed.setHost(host);
    return urlParsed.toString();
}
function getURLPath(url) {
    const urlParsed = _coreHttp.URLBuilder.parse(url);
    return urlParsed.getPath();
}
function getURLScheme(url) {
    const urlParsed = _coreHttp.URLBuilder.parse(url);
    return urlParsed.getScheme();
}
function getURLPathAndQuery(url) {
    const urlParsed = _coreHttp.URLBuilder.parse(url);
    const pathString = urlParsed.getPath();
    if (!pathString) throw new RangeError("Invalid url without valid path.");
    let queryString = urlParsed.getQuery() || "";
    queryString = queryString.trim();
    if (queryString !== "") queryString = queryString.startsWith("?") ? queryString : `?${queryString}`; // Ensure query string start with '?'
    return `${pathString}${queryString}`;
}
function getURLQueries(url) {
    let queryString = _coreHttp.URLBuilder.parse(url).getQuery();
    if (!queryString) return {
    };
    queryString = queryString.trim();
    queryString = queryString.startsWith("?") ? queryString.substr(1) : queryString;
    let querySubStrings = queryString.split("&");
    querySubStrings = querySubStrings.filter((value)=>{
        const indexOfEqual = value.indexOf("=");
        const lastIndexOfEqual = value.lastIndexOf("=");
        return indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1;
    });
    const queries = {
    };
    for (const querySubString of querySubStrings){
        const splitResults = querySubString.split("=");
        const key = splitResults[0];
        const value = splitResults[1];
        queries[key] = value;
    }
    return queries;
}
function appendToURLQuery(url, queryParts) {
    const urlParsed = _coreHttp.URLBuilder.parse(url);
    let query = urlParsed.getQuery();
    if (query) query += "&" + queryParts;
    else query = queryParts;
    urlParsed.setQuery(query);
    return urlParsed.toString();
}
function truncatedISO8061Date(date, withMilliseconds = true) {
    // Date.toISOString() will return like "2018-10-29T06:34:36.139Z"
    const dateString = date.toISOString();
    return withMilliseconds ? dateString.substring(0, dateString.length - 1) + "0000" + "Z" : dateString.substring(0, dateString.length - 5) + "Z";
}
function base64encode(content) {
    return !_coreHttp.isNode ? btoa(content) : Buffer.from(content).toString("base64");
}
function base64decode(encodedString) {
    return !_coreHttp.isNode ? atob(encodedString) : Buffer.from(encodedString, "base64").toString();
}
function generateBlockID(blockIDPrefix, blockIndex) {
    // To generate a 64 bytes base64 string, source string should be 48
    const maxSourceStringLength = 48;
    // A blob can have a maximum of 100,000 uncommitted blocks at any given time
    const maxBlockIndexLength = 6;
    const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;
    if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);
    const res = blockIDPrefix + padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, "0");
    return base64encode(res);
}
async function delay(timeInMs, aborter, abortError) {
    return new Promise((resolve, reject)=>{
        /* eslint-disable-next-line prefer-const */ let timeout;
        const abortHandler = ()=>{
            if (timeout !== undefined) clearTimeout(timeout);
            reject(abortError);
        };
        const resolveHandler = ()=>{
            if (aborter !== undefined) aborter.removeEventListener("abort", abortHandler);
            resolve();
        };
        timeout = setTimeout(resolveHandler, timeInMs);
        if (aborter !== undefined) aborter.addEventListener("abort", abortHandler);
    });
}
function padStart(currentString, targetLength, padString = " ") {
    // @ts-expect-error: TS doesn't know this code needs to run downlevel sometimes
    if (String.prototype.padStart) return currentString.padStart(targetLength, padString);
    padString = padString || " ";
    if (currentString.length > targetLength) return currentString;
    else {
        targetLength = targetLength - currentString.length;
        if (targetLength > padString.length) padString += padString.repeat(targetLength / padString.length);
        return padString.slice(0, targetLength) + currentString;
    }
}
function sanitizeURL(url) {
    let safeURL = url;
    if (getURLParameter(safeURL, _constants.URLConstants.Parameters.SIGNATURE)) safeURL = setURLParameter(safeURL, _constants.URLConstants.Parameters.SIGNATURE, "*****");
    return safeURL;
}
function sanitizeHeaders(originalHeader) {
    const headers = new _coreHttp.HttpHeaders();
    for (const header of originalHeader.headersArray()){
        if (header.name.toLowerCase() === _constants.HeaderConstants.AUTHORIZATION.toLowerCase()) headers.set(header.name, "*****");
        else if (header.name.toLowerCase() === _constants.HeaderConstants.X_MS_COPY_SOURCE) headers.set(header.name, sanitizeURL(header.value));
        else headers.set(header.name, header.value);
    }
    return headers;
}
function iEqual(str1, str2) {
    return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();
}
function getAccountNameFromUrl(url) {
    const parsedUrl = _coreHttp.URLBuilder.parse(url);
    let accountName;
    try {
        if (parsedUrl.getHost().split(".")[1] === "blob") // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;
        accountName = parsedUrl.getHost().split(".")[0];
        else if (isIpEndpointStyle(parsedUrl)) // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/
        // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/
        // .getPath() -> /devstoreaccount1/
        accountName = parsedUrl.getPath().split("/")[1];
        else // Custom domain case: "https://customdomain.com/containername/blob".
        accountName = "";
        return accountName;
    } catch (error) {
        throw new Error("Unable to extract accountName with provided information.");
    }
}
function isIpEndpointStyle(parsedUrl) {
    if (parsedUrl.getHost() === undefined) return false;
    const host = parsedUrl.getHost() + (parsedUrl.getPort() === undefined ? "" : ":" + parsedUrl.getPort());
    // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.
    // Case 2: localhost(:port), use broad regex to match port part.
    // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.
    // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.
    return /^.*:.*:.*$|^localhost(:[0-9]+)?$|^(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])(\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])){3}(:[0-9]+)?$/.test(host);
}
function toBlobTagsString(tags) {
    if (tags === undefined) return undefined;
    const tagPairs = [];
    for(const key in tags)if (Object.prototype.hasOwnProperty.call(tags, key)) {
        const value = tags[key];
        tagPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);
    }
    return tagPairs.join("&");
}
function toBlobTags(tags) {
    if (tags === undefined) return undefined;
    const res = {
        blobTagSet: []
    };
    for(const key in tags)if (Object.prototype.hasOwnProperty.call(tags, key)) {
        const value = tags[key];
        res.blobTagSet.push({
            key,
            value
        });
    }
    return res;
}
function toTags(tags) {
    if (tags === undefined) return undefined;
    const res = {
    };
    for (const blobTag of tags.blobTagSet)res[blobTag.key] = blobTag.value;
    return res;
}
function toQuerySerialization(textConfiguration) {
    if (textConfiguration === undefined) return undefined;
    switch(textConfiguration.kind){
        case "csv":
            return {
                format: {
                    type: "delimited",
                    delimitedTextConfiguration: {
                        columnSeparator: textConfiguration.columnSeparator || ",",
                        fieldQuote: textConfiguration.fieldQuote || "",
                        recordSeparator: textConfiguration.recordSeparator,
                        escapeChar: textConfiguration.escapeCharacter || "",
                        headersPresent: textConfiguration.hasHeaders || false
                    }
                }
            };
        case "json":
            return {
                format: {
                    type: "json",
                    jsonTextConfiguration: {
                        recordSeparator: textConfiguration.recordSeparator
                    }
                }
            };
        case "arrow":
            return {
                format: {
                    type: "arrow",
                    arrowConfiguration: {
                        schema: textConfiguration.schema
                    }
                }
            };
        case "parquet":
            return {
                format: {
                    type: "parquet"
                }
            };
        default:
            throw Error("Invalid BlobQueryTextConfiguration.");
    }
}
function parseObjectReplicationRecord(objectReplicationRecord) {
    if (!objectReplicationRecord) return undefined;
    if ("policy-id" in objectReplicationRecord) // If the dictionary contains a key with policy id, we are not required to do any parsing since
    // the policy id should already be stored in the ObjectReplicationDestinationPolicyId.
    return undefined;
    const orProperties = [];
    for(const key in objectReplicationRecord){
        const ids = key.split("_");
        const policyPrefix = "or-";
        if (ids[0].startsWith(policyPrefix)) ids[0] = ids[0].substring(policyPrefix.length);
        const rule = {
            ruleId: ids[1],
            replicationStatus: objectReplicationRecord[key]
        };
        const policyIndex = orProperties.findIndex((policy)=>policy.policyId === ids[0]
        );
        if (policyIndex > -1) orProperties[policyIndex].rules.push(rule);
        else orProperties.push({
            policyId: ids[0],
            rules: [
                rule
            ]
        });
    }
    return orProperties;
}
function attachCredential(thing, credential) {
    thing.credential = credential;
    return thing;
}
function httpAuthorizationToString(httpAuthorization) {
    return httpAuthorization ? httpAuthorization.scheme + " " + httpAuthorization.value : undefined;
}
function BlobNameToString(name) {
    if (name.encoded) return decodeURIComponent(name.content);
    else return name.content;
}
function ConvertInternalResponseOfListBlobFlat(internalResponse) {
    return Object.assign(Object.assign({
    }, internalResponse), {
        segment: {
            blobItems: internalResponse.segment.blobItems.map((blobItemInteral)=>{
                const blobItem = Object.assign(Object.assign({
                }, blobItemInteral), {
                    name: BlobNameToString(blobItemInteral.name)
                });
                return blobItem;
            })
        }
    });
}
function ConvertInternalResponseOfListBlobHierarchy(internalResponse) {
    var _a;
    return Object.assign(Object.assign({
    }, internalResponse), {
        segment: {
            blobPrefixes: (_a = internalResponse.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map((blobPrefixInternal)=>{
                const blobPrefix = {
                    name: BlobNameToString(blobPrefixInternal.name)
                };
                return blobPrefix;
            }),
            blobItems: internalResponse.segment.blobItems.map((blobItemInteral)=>{
                const blobItem = Object.assign(Object.assign({
                }, blobItemInteral), {
                    name: BlobNameToString(blobItemInteral.name)
                });
                return blobItem;
            })
        }
    });
}
function decodeBase64String(value) {
    if (_coreHttp.isNode) return Buffer.from(value, "base64");
    else {
        const byteString = atob(value);
        const arr = new Uint8Array(byteString.length);
        for(let i = 0; i < byteString.length; i++)arr[i] = byteString.charCodeAt(i);
        return arr;
    }
}
function ParseBoolean(content) {
    if (content === undefined) return undefined;
    if (content === "true") return true;
    if (content === "false") return false;
    return undefined;
}
function ParseBlobName(blobNameInXML) {
    if (blobNameInXML["$"] !== undefined && blobNameInXML["#"] !== undefined) return {
        encoded: ParseBoolean(blobNameInXML["$"]["Encoded"]),
        content: blobNameInXML["#"]
    };
    else return {
        encoded: false,
        content: blobNameInXML
    };
}
function ParseBlobItem(blobInXML) {
    const blobPropertiesInXML = blobInXML["Properties"];
    const blobProperties = {
        createdOn: new Date(blobPropertiesInXML["Creation-Time"]),
        lastModified: new Date(blobPropertiesInXML["Last-Modified"]),
        etag: blobPropertiesInXML["Etag"],
        contentLength: blobPropertiesInXML["Content-Length"] === undefined ? undefined : parseFloat(blobPropertiesInXML["Content-Length"]),
        contentType: blobPropertiesInXML["Content-Type"],
        contentEncoding: blobPropertiesInXML["Content-Encoding"],
        contentLanguage: blobPropertiesInXML["Content-Language"],
        contentMD5: decodeBase64String(blobPropertiesInXML["Content-MD5"]),
        contentDisposition: blobPropertiesInXML["Content-Disposition"],
        cacheControl: blobPropertiesInXML["Cache-Control"],
        blobSequenceNumber: blobPropertiesInXML["x-ms-blob-sequence-number"] === undefined ? undefined : parseFloat(blobPropertiesInXML["x-ms-blob-sequence-number"]),
        blobType: blobPropertiesInXML["BlobType"],
        leaseStatus: blobPropertiesInXML["LeaseStatus"],
        leaseState: blobPropertiesInXML["LeaseState"],
        leaseDuration: blobPropertiesInXML["LeaseDuration"],
        copyId: blobPropertiesInXML["CopyId"],
        copyStatus: blobPropertiesInXML["CopyStatus"],
        copySource: blobPropertiesInXML["CopySource"],
        copyProgress: blobPropertiesInXML["CopyProgress"],
        copyCompletedOn: blobPropertiesInXML["CopyCompletionTime"] === undefined ? undefined : new Date(blobPropertiesInXML["CopyCompletionTime"]),
        copyStatusDescription: blobPropertiesInXML["CopyStatusDescription"],
        serverEncrypted: ParseBoolean(blobPropertiesInXML["ServerEncrypted"]),
        incrementalCopy: ParseBoolean(blobPropertiesInXML["IncrementalCopy"]),
        destinationSnapshot: blobPropertiesInXML["DestinationSnapshot"],
        deletedOn: blobPropertiesInXML["DeletedTime"] === undefined ? undefined : new Date(blobPropertiesInXML["DeletedTime"]),
        remainingRetentionDays: blobPropertiesInXML["RemainingRetentionDays"] === undefined ? undefined : parseFloat(blobPropertiesInXML["RemainingRetentionDays"]),
        accessTier: blobPropertiesInXML["AccessTier"],
        accessTierInferred: ParseBoolean(blobPropertiesInXML["AccessTierInferred"]),
        archiveStatus: blobPropertiesInXML["ArchiveStatus"],
        customerProvidedKeySha256: blobPropertiesInXML["CustomerProvidedKeySha256"],
        encryptionScope: blobPropertiesInXML["EncryptionScope"],
        accessTierChangedOn: blobPropertiesInXML["AccessTierChangeTime"] === undefined ? undefined : new Date(blobPropertiesInXML["AccessTierChangeTime"]),
        tagCount: blobPropertiesInXML["TagCount"] === undefined ? undefined : parseFloat(blobPropertiesInXML["TagCount"]),
        expiresOn: blobPropertiesInXML["Expiry-Time"] === undefined ? undefined : new Date(blobPropertiesInXML["Expiry-Time"]),
        isSealed: ParseBoolean(blobPropertiesInXML["Sealed"]),
        rehydratePriority: blobPropertiesInXML["RehydratePriority"],
        lastAccessedOn: blobPropertiesInXML["LastAccessTime"] === undefined ? undefined : new Date(blobPropertiesInXML["LastAccessTime"]),
        immutabilityPolicyExpiresOn: blobPropertiesInXML["ImmutabilityPolicyUntilDate"] === undefined ? undefined : new Date(blobPropertiesInXML["ImmutabilityPolicyUntilDate"]),
        immutabilityPolicyMode: blobPropertiesInXML["ImmutabilityPolicyMode"],
        legalHold: ParseBoolean(blobPropertiesInXML["LegalHold"])
    };
    return {
        name: ParseBlobName(blobInXML["Name"]),
        deleted: ParseBoolean(blobInXML["Deleted"]),
        snapshot: blobInXML["Snapshot"],
        versionId: blobInXML["VersionId"],
        isCurrentVersion: ParseBoolean(blobInXML["IsCurrentVersion"]),
        properties: blobProperties,
        metadata: blobInXML["Metadata"],
        blobTags: ParseBlobTags(blobInXML["Tags"]),
        objectReplicationMetadata: blobInXML["OrMetadata"],
        hasVersionsOnly: ParseBoolean(blobInXML["HasVersionsOnly"])
    };
}
function ParseBlobPrefix(blobPrefixInXML) {
    return {
        name: ParseBlobName(blobPrefixInXML["Name"])
    };
}
function ParseBlobTag(blobTagInXML) {
    return {
        key: blobTagInXML["Key"],
        value: blobTagInXML["Value"]
    };
}
function ParseBlobTags(blobTagsInXML) {
    if (blobTagsInXML === undefined || blobTagsInXML["TagSet"] === undefined || blobTagsInXML["TagSet"]["Tag"] === undefined) return undefined;
    const blobTagSet = [];
    if (blobTagsInXML["TagSet"]["Tag"] instanceof Array) blobTagsInXML["TagSet"]["Tag"].forEach((blobTagInXML)=>{
        blobTagSet.push(ParseBlobTag(blobTagInXML));
    });
    else blobTagSet.push(ParseBlobTag(blobTagsInXML["TagSet"]["Tag"]));
    return {
        blobTagSet: blobTagSet
    };
}
function ProcessBlobItems(blobArrayInXML) {
    const blobItems = [];
    if (blobArrayInXML instanceof Array) blobArrayInXML.forEach((blobInXML)=>{
        blobItems.push(ParseBlobItem(blobInXML));
    });
    else blobItems.push(ParseBlobItem(blobArrayInXML));
    return blobItems;
}
function ProcessBlobPrefixes(blobPrefixesInXML) {
    const blobPrefixes = [];
    if (blobPrefixesInXML instanceof Array) blobPrefixesInXML.forEach((blobPrefixInXML)=>{
        blobPrefixes.push(ParseBlobPrefix(blobPrefixInXML));
    });
    else blobPrefixes.push(ParseBlobPrefix(blobPrefixesInXML));
    return blobPrefixes;
}

},{"@azure/core-http":"iSINq","./constants":"4gX5x","buffer":"fCgem","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
const base64 = require('base64-js');
const ieee754 = require('ieee754');
const customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 2147483647;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return utf8Slice(this, start, end);
        case 'ascii':
            return asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return latin1Slice(this, start, end);
        case 'base64':
            return base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = '';
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 2147483647) byteOffset = 2147483647;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 255 // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i1;
    if (dir) {
        let foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    let loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = '';
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = '';
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 127);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = '';
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = '';
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength1 && (mul *= 256))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    let val = this[offset + --byteLength2];
    let mul = 1;
    while(byteLength2 > 0 && (mul *= 256))val += this[offset + --byteLength2] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 65536 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength3, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength3 && (mul *= 256))val += this[offset + i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength4, noAssert) {
    offset = offset >>> 0;
    byteLength4 = byteLength4 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength4, this.length);
    let i = byteLength4;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 256))val += this[offset + --i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength4);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 65536 + (last << 24) // Overflow
    ;
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength5, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength5 = byteLength5 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength5) - 1;
        checkInt(this, value, offset, byteLength5, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 255;
    while(++i < byteLength5 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength5;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength6, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength6 = byteLength6 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength6) - 1;
        checkInt(this, value, offset, byteLength6, maxBytes, 0);
    }
    let i = byteLength6 - 1;
    let mul = 1;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength6;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(4294967295));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(4294967295));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(4294967295));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(4294967295));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength7, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength7 - 1);
        checkInt(this, value, offset, byteLength7, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 255;
    while(++i < byteLength7 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength7;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength8, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength8 - 1);
        checkInt(this, value, offset, byteLength8, limit - 1, -limit);
    }
    let i = byteLength8 - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength8;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
    if (value < 0) value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0) value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {
};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, 'message', {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, 'code', {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E('ERR_BUFFER_OUT_OF_BOUNDS', function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return 'Attempt to access memory outside buffer bounds';
}, RangeError);
E('ERR_INVALID_ARG_TYPE', function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E('ERR_OUT_OF_RANGE', function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === 'bigint') {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += 'n';
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = '';
    let i = val.length;
    const start = val[0] === '-' ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength9) {
    validateNumber(offset, 'offset');
    if (buf[offset] === undefined || buf[offset + byteLength9] === undefined) boundsError(offset, buf.length - (byteLength9 + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength10) {
    if (value > max || value < min) {
        const n = typeof min === 'bigint' ? 'n' : '';
        let range;
        if (byteLength10 > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength10 + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength10 + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength10 + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE('value', range, value);
    }
    checkBounds(buf, offset, byteLength10);
}
function validateNumber(value, name) {
    if (typeof value !== 'number') throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 55295 && codePoint < 57344) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 56319) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 56320) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 255);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = '0123456789abcdef';
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error('BigInt not supported');
}

},{"base64-js":"eIiSV","ieee754":"cO95r"}],"eIiSV":[function(require,module,exports) {
'use strict';
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len1 = b64.length;
    if (len1 % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len1;
    var placeHoldersLen = validLen === len1 ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i1;
    for(i1 = 0; i1 < len2; i1 += 4){
        tmp = revLookup[b64.charCodeAt(i1)] << 18 | revLookup[b64.charCodeAt(i1 + 1)] << 12 | revLookup[b64.charCodeAt(i1 + 2)] << 6 | revLookup[b64.charCodeAt(i1 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i1)] << 2 | revLookup[b64.charCodeAt(i1 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i1)] << 10 | revLookup[b64.charCodeAt(i1 + 1)] << 4 | revLookup[b64.charCodeAt(i1 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i2 = start; i2 < end; i2 += 3){
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len3 = uint8.length;
    var extraBytes = len3 % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i3 = 0, len2 = len3 - extraBytes; i3 < len2; i3 += maxChunkLength)parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len2 ? len2 : i3 + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len3 - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len3 - 2] << 8) + uint8[len3 - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + '=');
    }
    return parts.join('');
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"ealHa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StorageRetryPolicyType", ()=>_storageRetryPolicy.StorageRetryPolicyType
);
parcelHelpers.export(exports, "StorageRetryPolicy", ()=>_storageRetryPolicy.StorageRetryPolicy
);
/**
 * StorageRetryPolicyFactory is a factory class helping generating {@link StorageRetryPolicy} objects.
 */ parcelHelpers.export(exports, "StorageRetryPolicyFactory", ()=>StorageRetryPolicyFactory
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _storageRetryPolicy = require("./policies/StorageRetryPolicy");
class StorageRetryPolicyFactory {
    /**
     * Creates an instance of StorageRetryPolicyFactory.
     * @param retryOptions -
     */ constructor(retryOptions){
        this.retryOptions = retryOptions;
    }
    /**
     * Creates a StorageRetryPolicy object.
     *
     * @param nextPolicy -
     * @param options -
     */ create(nextPolicy, options) {
        return new _storageRetryPolicy.StorageRetryPolicy(nextPolicy, options, this.retryOptions);
    }
}

},{"./policies/StorageRetryPolicy":"4j5T8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4j5T8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A factory method used to generated a RetryPolicy factory.
 *
 * @param retryOptions -
 */ parcelHelpers.export(exports, "NewRetryPolicyFactory", ()=>NewRetryPolicyFactory
);
parcelHelpers.export(exports, "StorageRetryPolicyType", ()=>StorageRetryPolicyType
);
/**
 * Retry policy with exponential retry and linear retry implemented.
 */ parcelHelpers.export(exports, "StorageRetryPolicy", ()=>StorageRetryPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _abortController = require("@azure/abort-controller");
var _coreHttp = require("@azure/core-http");
var _constants = require("../utils/constants");
var _utilsCommon = require("../utils/utils.common");
var _log = require("../log");
function NewRetryPolicyFactory(retryOptions) {
    return {
        create: (nextPolicy, options)=>{
            return new StorageRetryPolicy(nextPolicy, options, retryOptions);
        }
    };
}
var StorageRetryPolicyType;
(function(StorageRetryPolicyType1) {
    /**
     * Exponential retry. Retry time delay grows exponentially.
     */ StorageRetryPolicyType1[StorageRetryPolicyType1["EXPONENTIAL"] = 0] = "EXPONENTIAL";
    /**
     * Linear retry. Retry time delay grows linearly.
     */ StorageRetryPolicyType1[StorageRetryPolicyType1["FIXED"] = 1] = "FIXED";
})(StorageRetryPolicyType || (StorageRetryPolicyType = {
}));
// Default values of StorageRetryOptions
const DEFAULT_RETRY_OPTIONS = {
    maxRetryDelayInMs: 120000,
    maxTries: 4,
    retryDelayInMs: 4000,
    retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,
    secondaryHost: "",
    tryTimeoutInMs: undefined
};
const RETRY_ABORT_ERROR = new _abortController.AbortError("The operation was aborted.");
class StorageRetryPolicy extends _coreHttp.BaseRequestPolicy {
    /**
     * Creates an instance of RetryPolicy.
     *
     * @param nextPolicy -
     * @param options -
     * @param retryOptions -
     */ constructor(nextPolicy, options, retryOptions = DEFAULT_RETRY_OPTIONS){
        super(nextPolicy, options);
        // Initialize retry options
        this.retryOptions = {
            retryPolicyType: retryOptions.retryPolicyType ? retryOptions.retryPolicyType : DEFAULT_RETRY_OPTIONS.retryPolicyType,
            maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1 ? Math.floor(retryOptions.maxTries) : DEFAULT_RETRY_OPTIONS.maxTries,
            tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0 ? retryOptions.tryTimeoutInMs : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,
            retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0 ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs) : DEFAULT_RETRY_OPTIONS.retryDelayInMs,
            maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0 ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,
            secondaryHost: retryOptions.secondaryHost ? retryOptions.secondaryHost : DEFAULT_RETRY_OPTIONS.secondaryHost
        };
    }
    /**
     * Sends request.
     *
     * @param request -
     */ async sendRequest(request) {
        return this.attemptSendRequest(request, false, 1);
    }
    /**
     * Decide and perform next retry. Won't mutate request parameter.
     *
     * @param request -
     * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then
     *                                   the resource was not found. This may be due to replication delay. So, in this
     *                                   case, we'll never try the secondary again for this operation.
     * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes
     *                                   the attempt will be performed by this method call.
     */ async attemptSendRequest(request, secondaryHas404, attempt) {
        const newRequest = request.clone();
        const isPrimaryRetry = secondaryHas404 || !this.retryOptions.secondaryHost || !(request.method === "GET" || request.method === "HEAD" || request.method === "OPTIONS") || attempt % 2 === 1;
        if (!isPrimaryRetry) newRequest.url = _utilsCommon.setURLHost(newRequest.url, this.retryOptions.secondaryHost);
        // Set the server-side timeout query parameter "timeout=[seconds]"
        if (this.retryOptions.tryTimeoutInMs) newRequest.url = _utilsCommon.setURLParameter(newRequest.url, _constants.URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());
        let response;
        try {
            _log.logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? "Primary" : "Secondary"}`);
            response = await this._nextPolicy.sendRequest(newRequest);
            if (!this.shouldRetry(isPrimaryRetry, attempt, response)) return response;
            secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;
        } catch (err) {
            _log.logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);
            if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) throw err;
        }
        await this.delay(isPrimaryRetry, attempt, request.abortSignal);
        return this.attemptSendRequest(request, secondaryHas404, ++attempt);
    }
    /**
     * Decide whether to retry according to last HTTP response and retry counters.
     *
     * @param isPrimaryRetry -
     * @param attempt -
     * @param response -
     * @param err -
     */ shouldRetry(isPrimaryRetry, attempt, response, err) {
        if (attempt >= this.retryOptions.maxTries) {
            _log.logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions.maxTries}, no further try.`);
            return false;
        }
        // Handle network failures, you may need to customize the list when you implement
        // your own http client
        const retriableErrors = [
            "ETIMEDOUT",
            "ESOCKETTIMEDOUT",
            "ECONNREFUSED",
            "ECONNRESET",
            "ENOENT",
            "ENOTFOUND",
            "TIMEOUT",
            "EPIPE",
            "REQUEST_SEND_ERROR"
        ];
        if (err) {
            for (const retriableError of retriableErrors)if (err.name.toUpperCase().includes(retriableError) || err.message.toUpperCase().includes(retriableError) || err.code && err.code.toString().toUpperCase() === retriableError) {
                _log.logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);
                return true;
            }
        }
        // If attempt was against the secondary & it returned a StatusNotFound (404), then
        // the resource was not found. This may be due to replication delay. So, in this
        // case, we'll never try the secondary again for this operation.
        if (response || err) {
            const statusCode = response ? response.status : err ? err.statusCode : 0;
            if (!isPrimaryRetry && statusCode === 404) {
                _log.logger.info(`RetryPolicy: Secondary access with 404, will retry.`);
                return true;
            }
            // Server internal error or server timeout
            if (statusCode === 503 || statusCode === 500) {
                _log.logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);
                return true;
            }
        }
        if ((err === null || err === void 0 ? void 0 : err.code) === "PARSE_ERROR" && (err === null || err === void 0 ? void 0 : err.message.startsWith(`Error "Error: Unclosed root tag`))) {
            _log.logger.info("RetryPolicy: Incomplete XML response likely due to service timeout, will retry.");
            return true;
        }
        return false;
    }
    /**
     * Delay a calculated time between retries.
     *
     * @param isPrimaryRetry -
     * @param attempt -
     * @param abortSignal -
     */ async delay(isPrimaryRetry, attempt, abortSignal) {
        let delayTimeInMs = 0;
        if (isPrimaryRetry) switch(this.retryOptions.retryPolicyType){
            case StorageRetryPolicyType.EXPONENTIAL:
                delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);
                break;
            case StorageRetryPolicyType.FIXED:
                delayTimeInMs = this.retryOptions.retryDelayInMs;
                break;
        }
        else delayTimeInMs = Math.random() * 1000;
        _log.logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);
        return _utilsCommon.delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);
    }
}

},{"@azure/abort-controller":"6HB9r","@azure/core-http":"iSINq","../utils/constants":"4gX5x","../utils/utils.common":"2SR3M","../log":"gc1Rl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f0sOe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * AnonymousCredential provides a credentialPolicyCreator member used to create
 * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with
 * HTTP(S) requests that read public resources or for use with Shared Access
 * Signatures (SAS).
 */ parcelHelpers.export(exports, "AnonymousCredential", ()=>AnonymousCredential
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _anonymousCredentialPolicy = require("../policies/AnonymousCredentialPolicy");
var _credential = require("./Credential");
class AnonymousCredential extends _credential.Credential {
    /**
     * Creates an {@link AnonymousCredentialPolicy} object.
     *
     * @param nextPolicy -
     * @param options -
     */ create(nextPolicy, options) {
        return new _anonymousCredentialPolicy.AnonymousCredentialPolicy(nextPolicy, options);
    }
}

},{"../policies/AnonymousCredentialPolicy":"kNMa0","./Credential":"1Ib4y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kNMa0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources
 * or for use with Shared Access Signatures (SAS).
 */ parcelHelpers.export(exports, "AnonymousCredentialPolicy", ()=>AnonymousCredentialPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _credentialPolicy = require("./CredentialPolicy");
class AnonymousCredentialPolicy extends _credentialPolicy.CredentialPolicy {
    /**
     * Creates an instance of AnonymousCredentialPolicy.
     * @param nextPolicy -
     * @param options -
     */ // The base class has a protected constructor. Adding a public one to enable constructing of this class.
    /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/ constructor(nextPolicy, options){
        super(nextPolicy, options);
    }
}

},{"./CredentialPolicy":"eiIAi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eiIAi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Credential policy used to sign HTTP(S) requests before sending. This is an
 * abstract class.
 */ parcelHelpers.export(exports, "CredentialPolicy", ()=>CredentialPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreHttp = require("@azure/core-http");
class CredentialPolicy extends _coreHttp.BaseRequestPolicy {
    /**
     * Sends out request.
     *
     * @param request -
     */ sendRequest(request) {
        return this._nextPolicy.sendRequest(this.signRequest(request));
    }
    /**
     * Child classes must implement this method with request signing. This method
     * will be executed in {@link sendRequest}.
     *
     * @param request -
     */ signRequest(request) {
        // Child classes must override this method with request signing. This method
        // will be executed in sendRequest().
        return request;
    }
}

},{"@azure/core-http":"iSINq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Ib4y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Credential is an abstract class for Azure Storage HTTP requests signing. This
 * class will host an credentialPolicyCreator factory which generates CredentialPolicy.
 */ parcelHelpers.export(exports, "Credential", ()=>Credential
);
class Credential {
    /**
     * Creates a RequestPolicy object.
     *
     * @param _nextPolicy -
     * @param _options -
     */ create(_nextPolicy, _options) {
        throw new Error("Method should be implemented in children classes.");
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iAbBd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * TelemetryPolicyFactory is a factory class helping generating {@link TelemetryPolicy} objects.
 */ parcelHelpers.export(exports, "TelemetryPolicyFactory", ()=>TelemetryPolicyFactory
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreHttp = require("@azure/core-http");
var _os = require("os");
var _telemetryPolicy = require("./policies/TelemetryPolicy");
var _constants = require("./utils/constants");
var process = require("process");
class TelemetryPolicyFactory {
    /**
     * Creates an instance of TelemetryPolicyFactory.
     * @param telemetry -
     */ constructor(telemetry){
        const userAgentInfo = [];
        if (_coreHttp.isNode) {
            if (telemetry) {
                const telemetryString = telemetry.userAgentPrefix || "";
                if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) userAgentInfo.push(telemetryString);
            }
            // e.g. azsdk-js-storageblob/10.0.0
            const libInfo = `azsdk-js-storageblob/${_constants.SDK_VERSION}`;
            if (userAgentInfo.indexOf(libInfo) === -1) userAgentInfo.push(libInfo);
            // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)
            const runtimeInfo = `(NODE-VERSION ${process.version}; ${_os.type()} ${_os.release()})`;
            if (userAgentInfo.indexOf(runtimeInfo) === -1) userAgentInfo.push(runtimeInfo);
        }
        this.telemetryString = userAgentInfo.join(" ");
    }
    /**
     * Creates a TelemetryPolicy object.
     *
     * @param nextPolicy -
     * @param options -
     */ create(nextPolicy, options) {
        return new _telemetryPolicy.TelemetryPolicy(nextPolicy, options, this.telemetryString);
    }
}

},{"@azure/core-http":"iSINq","os":"jhUEF","./policies/TelemetryPolicy":"dMxaB","./utils/constants":"4gX5x","process":"jhUEF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dMxaB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * TelemetryPolicy is a policy used to tag user-agent header for every requests.
 */ parcelHelpers.export(exports, "TelemetryPolicy", ()=>TelemetryPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreHttp = require("@azure/core-http");
var _constants = require("../utils/constants");
class TelemetryPolicy extends _coreHttp.BaseRequestPolicy {
    /**
     * Creates an instance of TelemetryPolicy.
     * @param nextPolicy -
     * @param options -
     * @param telemetry -
     */ constructor(nextPolicy, options, telemetry){
        super(nextPolicy, options);
        this.telemetry = telemetry;
    }
    /**
     * Sends out request.
     *
     * @param request -
     */ async sendRequest(request) {
        if (_coreHttp.isNode) {
            if (!request.headers) request.headers = new _coreHttp.HttpHeaders();
            if (!request.headers.get(_constants.HeaderConstants.USER_AGENT)) request.headers.set(_constants.HeaderConstants.USER_AGENT, this.telemetry);
        }
        return this._nextPolicy.sendRequest(request);
    }
}

},{"@azure/core-http":"iSINq","../utils/constants":"4gX5x","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5SpI4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCachedDefaultHttpClient", ()=>getCachedDefaultHttpClient
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreHttp = require("@azure/core-http");
const _defaultHttpClient = new _coreHttp.DefaultHttpClient();
function getCachedDefaultHttpClient() {
    return _defaultHttpClient;
}

},{"@azure/core-http":"iSINq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6pDQp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// #endregion
/**
 * Creates a new factory for a RequestPolicy that applies a bearer token to
 * the requests' `Authorization` headers.
 *
 * @param credential - The TokenCredential implementation that can supply the bearer token.
 * @param scopes - The scopes for which the bearer token applies.
 */ parcelHelpers.export(exports, "storageBearerTokenChallengeAuthenticationPolicy", ()=>storageBearerTokenChallengeAuthenticationPolicy
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreHttp = require("@azure/core-http");
/**
 * A set of constants used internally when processing requests.
 */ const Constants = {
    DefaultScope: "/.default",
    /**
     * Defines constants for use with HTTP headers.
     */ HeaderConstants: {
        /**
         * The Authorization header.
         */ AUTHORIZATION: "authorization"
    }
};
// Default options for the cycler if none are provided
const DEFAULT_CYCLER_OPTIONS = {
    forcedRefreshWindowInMs: 1000,
    retryIntervalInMs: 3000,
    refreshWindowInMs: 120000
};
/**
 * Converts an an unreliable access token getter (which may resolve with null)
 * into an AccessTokenGetter by retrying the unreliable getter in a regular
 * interval.
 *
 * @param getAccessToken - a function that produces a promise of an access
 * token that may fail by returning null
 * @param retryIntervalInMs - the time (in milliseconds) to wait between retry
 * attempts
 * @param timeoutInMs - the timestamp after which the refresh attempt will fail,
 * throwing an exception
 * @returns - a promise that, if it resolves, will resolve with an access token
 */ async function beginRefresh(getAccessToken, retryIntervalInMs, timeoutInMs) {
    // This wrapper handles exceptions gracefully as long as we haven't exceeded
    // the timeout.
    async function tryGetAccessToken() {
        if (Date.now() < timeoutInMs) try {
            return await getAccessToken();
        } catch (_a) {
            return null;
        }
        else {
            const finalToken = await getAccessToken();
            // Timeout is up, so throw if it's still null
            if (finalToken === null) throw new Error("Failed to refresh access token.");
            return finalToken;
        }
    }
    let token = await tryGetAccessToken();
    while(token === null){
        await _coreHttp.delay(retryIntervalInMs);
        token = await tryGetAccessToken();
    }
    return token;
}
/**
 * Creates a token cycler from a credential, scopes, and optional settings.
 *
 * A token cycler represents a way to reliably retrieve a valid access token
 * from a TokenCredential. It will handle initializing the token, refreshing it
 * when it nears expiration, and synchronizes refresh attempts to avoid
 * concurrency hazards.
 *
 * @param credential - the underlying TokenCredential that provides the access
 * token
 * @param scopes - the scopes to request authorization for
 * @param tokenCyclerOptions - optionally override default settings for the cycler
 *
 * @returns - a function that reliably produces a valid access token
 */ function createTokenCycler(credential, scopes, tokenCyclerOptions) {
    let refreshWorker = null;
    let token = null;
    const options = Object.assign(Object.assign({
    }, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);
    /**
     * This little holder defines several predicates that we use to construct
     * the rules of refreshing the token.
     */ const cycler = {
        /**
         * Produces true if a refresh job is currently in progress.
         */ get isRefreshing () {
            return refreshWorker !== null;
        },
        /**
         * Produces true if the cycler SHOULD refresh (we are within the refresh
         * window and not already refreshing)
         */ get shouldRefresh () {
            var _a;
            return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();
        },
        /**
         * Produces true if the cycler MUST refresh (null or nearly-expired
         * token).
         */ get mustRefresh () {
            return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();
        }
    };
    /**
     * Starts a refresh job or returns the existing job if one is already
     * running.
     */ function refresh(getTokenOptions) {
        var _a;
        if (!cycler.isRefreshing) {
            // We bind `scopes` here to avoid passing it around a lot
            const tryGetAccessToken = ()=>credential.getToken(scopes, getTokenOptions)
            ;
            // Take advantage of promise chaining to insert an assignment to `token`
            // before the refresh can be considered done.
            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, // If we don't have a token, then we should timeout immediately
            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then((_token)=>{
                refreshWorker = null;
                token = _token;
                return token;
            }).catch((reason)=>{
                // We also should reset the refresher if we enter a failed state.  All
                // existing awaiters will throw, but subsequent requests will start a
                // new retry chain.
                refreshWorker = null;
                token = null;
                throw reason;
            });
        }
        return refreshWorker;
    }
    return async (tokenOptions)=>{
        //
        // Simple rules:
        // - If we MUST refresh, then return the refresh task, blocking
        //   the pipeline until a token is available.
        // - If we SHOULD refresh, then run refresh but don't return it
        //   (we can still use the cached token).
        // - Return the token, since it's fine if we didn't return in
        //   step 1.
        //
        if (cycler.mustRefresh) return refresh(tokenOptions);
        if (cycler.shouldRefresh) refresh(tokenOptions);
        return token;
    };
}
/**
 * We will retrieve the challenge only if the response status code was 401,
 * and if the response contained the header "WWW-Authenticate" with a non-empty value.
 */ function getChallenge(response) {
    const challenge = response.headers.get("WWW-Authenticate");
    if (response.status === 401 && challenge) return challenge;
    return;
}
/**
 * Converts: `Bearer a="b" c="d"`.
 * Into: `[ { a: 'b', c: 'd' }]`.
 *
 * @internal
 */ function parseChallenge(challenge) {
    const bearerChallenge = challenge.slice(7);
    const challengeParts = `${bearerChallenge.trim()} `.split(" ").filter((x)=>x
    );
    const keyValuePairs = challengeParts.map((keyValue)=>(([key, value])=>({
                [key]: value
            })
        )(keyValue.trim().split("="))
    );
    // Key-value pairs to plain object:
    return keyValuePairs.reduce((a, b)=>Object.assign(Object.assign({
        }, a), b)
    , {
    });
}
function storageBearerTokenChallengeAuthenticationPolicy(credential, scopes) {
    // This simple function encapsulates the entire process of reliably retrieving the token
    let getToken = createTokenCycler(credential, scopes);
    class StorageBearerTokenChallengeAuthenticationPolicy extends _coreHttp.BaseRequestPolicy {
        constructor(nextPolicy, options){
            super(nextPolicy, options);
        }
        async sendRequest(webResource) {
            if (!webResource.url.toLowerCase().startsWith("https://")) throw new Error("Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.");
            const getTokenInternal = getToken;
            const token = (await getTokenInternal({
                abortSignal: webResource.abortSignal,
                tracingOptions: {
                    tracingContext: webResource.tracingContext
                }
            })).token;
            webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);
            const response = await this._nextPolicy.sendRequest(webResource);
            if ((response === null || response === void 0 ? void 0 : response.status) === 401) {
                const challenge = getChallenge(response);
                if (challenge) {
                    const challengeInfo = parseChallenge(challenge);
                    const challengeScopes = challengeInfo.resource_id + Constants.DefaultScope;
                    const parsedAuthUri = _coreHttp.URLBuilder.parse(challengeInfo.authorization_uri);
                    const pathSegments = parsedAuthUri.getPath().split("/");
                    const tenantId = pathSegments[1];
                    const getTokenForChallenge = createTokenCycler(credential, challengeScopes);
                    const tokenForChallenge = (await getTokenForChallenge({
                        abortSignal: webResource.abortSignal,
                        tracingOptions: {
                            tracingContext: webResource.tracingContext
                        },
                        tenantId: tenantId
                    })).token;
                    getToken = getTokenForChallenge;
                    webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${tokenForChallenge}`);
                    return this._nextPolicy.sendRequest(webResource);
                }
            }
            return response;
        }
    }
    return {
        create: (nextPolicy, options)=>{
            return new StorageBearerTokenChallengeAuthenticationPolicy(nextPolicy, options);
        }
    };
}

},{"@azure/core-http":"iSINq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"45MBz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A ContainerClient represents a URL to the Azure Storage container allowing you to manipulate its blobs.
 */ parcelHelpers.export(exports, "ContainerClient", ()=>ContainerClient
);
var _tslib = require("tslib");
var _coreHttp = require("@azure/core-http");
var _coreTracing = require("@azure/core-tracing");
var _anonymousCredential = require("./credentials/AnonymousCredential");
var _storageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");
var _operations = require("./generated/src/operations");
var _pipeline = require("./Pipeline");
var _storageClient = require("./StorageClient");
var _tracing = require("./utils/tracing");
var _utilsCommon = require("./utils/utils.common");
var _blobSASSignatureValues = require("./sas/BlobSASSignatureValues");
var _blobLeaseClient = require("./BlobLeaseClient");
var _clients = require("./Clients");
var _blobBatchClient = require("./BlobBatchClient");
class ContainerClient extends _storageClient.StorageClient {
    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, // Legacy, no fix for eslint error without breaking. Disable it for this interface.
    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/ options){
        let pipeline;
        let url;
        options = options || {
        };
        if (_pipeline.isPipelineLike(credentialOrPipelineOrContainerName)) {
            // (url: string, pipeline: Pipeline)
            url = urlOrConnectionString;
            pipeline = credentialOrPipelineOrContainerName;
        } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _storageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _anonymousCredential.AnonymousCredential || _coreHttp.isTokenCredential(credentialOrPipelineOrContainerName)) {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            url = urlOrConnectionString;
            pipeline = _pipeline.newPipeline(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            // The second parameter is undefined. Use anonymous credential.
            url = urlOrConnectionString;
            pipeline = _pipeline.newPipeline(new _anonymousCredential.AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string") {
            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
            const containerName = credentialOrPipelineOrContainerName;
            const extractedCreds = _utilsCommon.extractConnectionStringParts(urlOrConnectionString);
            if (extractedCreds.kind === "AccountConnString") {
                if (_coreHttp.isNode) {
                    const sharedKeyCredential = new _storageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
                    url = _utilsCommon.appendToURLPath(extractedCreds.url, encodeURIComponent(containerName));
                    if (!options.proxyOptions) options.proxyOptions = _coreHttp.getDefaultProxySettings(extractedCreds.proxyUri);
                    pipeline = _pipeline.newPipeline(sharedKeyCredential, options);
                } else throw new Error("Account connection string is only supported in Node.js environment");
            } else if (extractedCreds.kind === "SASConnString") {
                url = _utilsCommon.appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)) + "?" + extractedCreds.accountSas;
                pipeline = _pipeline.newPipeline(new _anonymousCredential.AnonymousCredential(), options);
            } else throw new Error("Connection string must be either an Account connection string or a SAS connection string");
        } else throw new Error("Expecting non-empty strings for containerName parameter");
        super(url, pipeline);
        this._containerName = this.getContainerNameFromUrl();
        this.containerContext = new _operations.Container(this.storageClientContext);
    }
    /**
     * The name of the container.
     */ get containerName() {
        return this._containerName;
    }
    /**
     * Creates a new container under the specified account. If the container with
     * the same name already exists, the operation fails.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
     *
     * @param options - Options to Container Create operation.
     *
     *
     * Example usage:
     *
     * ```js
     * const containerClient = blobServiceClient.getContainerClient("<container name>");
     * const createContainerResponse = await containerClient.create();
     * console.log("Container was created successfully", createContainerResponse.requestId);
     * ```
     */ async create(options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("ContainerClient-create", options);
        try {
            // Spread operator in destructuring assignments,
            // this will filter out unwanted properties from the response object into result object
            return await this.containerContext.create(Object.assign(Object.assign({
            }, options), _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Creates a new container under the specified account. If the container with
     * the same name already exists, it is not changed.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
     *
     * @param options -
     */ async createIfNotExists(options = {
    }) {
        var _a, _b;
        const { span , updatedOptions  } = _tracing.createSpan("ContainerClient-createIfNotExists", options);
        try {
            const res = await this.create(updatedOptions);
            return Object.assign(Object.assign({
                succeeded: true
            }, res), {
                _response: res._response
            });
        } catch (e) {
            if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "ContainerAlreadyExists") {
                span.setStatus({
                    code: _coreTracing.SpanStatusCode.ERROR,
                    message: "Expected exception when creating a container only if it does not already exist."
                });
                return Object.assign(Object.assign({
                    succeeded: false
                }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                    _response: e.response
                });
            }
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Returns true if the Azure container resource represented by this client exists; false otherwise.
     *
     * NOTE: use this function with care since an existing container might be deleted by other clients or
     * applications. Vice versa new containers with the same name might be added by other clients or
     * applications after this function completes.
     *
     * @param options -
     */ async exists(options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("ContainerClient-exists", options);
        try {
            await this.getProperties({
                abortSignal: options.abortSignal,
                tracingOptions: updatedOptions.tracingOptions
            });
            return true;
        } catch (e) {
            if (e.statusCode === 404) {
                span.setStatus({
                    code: _coreTracing.SpanStatusCode.ERROR,
                    message: "Expected exception when checking container existence"
                });
                return false;
            }
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Creates a {@link BlobClient}
     *
     * @param blobName - A blob name
     * @returns A new BlobClient object for the given blob name.
     */ getBlobClient(blobName) {
        return new _clients.BlobClient(_utilsCommon.appendToURLPath(this.url, encodeURIComponent(blobName)), this.pipeline);
    }
    /**
     * Creates an {@link AppendBlobClient}
     *
     * @param blobName - An append blob name
     */ getAppendBlobClient(blobName) {
        return new _clients.AppendBlobClient(_utilsCommon.appendToURLPath(this.url, encodeURIComponent(blobName)), this.pipeline);
    }
    /**
     * Creates a {@link BlockBlobClient}
     *
     * @param blobName - A block blob name
     *
     *
     * Example usage:
     *
     * ```js
     * const content = "Hello world!";
     *
     * const blockBlobClient = containerClient.getBlockBlobClient("<blob name>");
     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
     * ```
     */ getBlockBlobClient(blobName) {
        return new _clients.BlockBlobClient(_utilsCommon.appendToURLPath(this.url, encodeURIComponent(blobName)), this.pipeline);
    }
    /**
     * Creates a {@link PageBlobClient}
     *
     * @param blobName - A page blob name
     */ getPageBlobClient(blobName) {
        return new _clients.PageBlobClient(_utilsCommon.appendToURLPath(this.url, encodeURIComponent(blobName)), this.pipeline);
    }
    /**
     * Returns all user-defined metadata and system properties for the specified
     * container. The data returned does not include the container's list of blobs.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties
     *
     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
     * they originally contained uppercase characters. This differs from the metadata keys returned by
     * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which
     * will retain their original casing.
     *
     * @param options - Options to Container Get Properties operation.
     */ async getProperties(options = {
    }) {
        if (!options.conditions) options.conditions = {
        };
        const { span , updatedOptions  } = _tracing.createSpan("ContainerClient-getProperties", options);
        try {
            return await this.containerContext.getProperties(Object.assign(Object.assign({
                abortSignal: options.abortSignal
            }, options.conditions), _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Marks the specified container for deletion. The container and any blobs
     * contained within it are later deleted during garbage collection.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
     *
     * @param options - Options to Container Delete operation.
     */ async delete(options = {
    }) {
        if (!options.conditions) options.conditions = {
        };
        const { span , updatedOptions  } = _tracing.createSpan("ContainerClient-delete", options);
        try {
            return await this.containerContext.delete(Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: options.conditions
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Marks the specified container for deletion if it exists. The container and any blobs
     * contained within it are later deleted during garbage collection.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
     *
     * @param options - Options to Container Delete operation.
     */ async deleteIfExists(options = {
    }) {
        var _a, _b;
        const { span , updatedOptions  } = _tracing.createSpan("ContainerClient-deleteIfExists", options);
        try {
            const res = await this.delete(updatedOptions);
            return Object.assign(Object.assign({
                succeeded: true
            }, res), {
                _response: res._response
            });
        } catch (e) {
            if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "ContainerNotFound") {
                span.setStatus({
                    code: _coreTracing.SpanStatusCode.ERROR,
                    message: "Expected exception when deleting a container only if it exists."
                });
                return Object.assign(Object.assign({
                    succeeded: false
                }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                    _response: e.response
                });
            }
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Sets one or more user-defined name-value pairs for the specified container.
     *
     * If no option provided, or no metadata defined in the parameter, the container
     * metadata will be removed.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata
     *
     * @param metadata - Replace existing metadata with this value.
     *                            If no value provided the existing metadata will be removed.
     * @param options - Options to Container Set Metadata operation.
     */ async setMetadata(metadata, options = {
    }) {
        if (!options.conditions) options.conditions = {
        };
        if (options.conditions.ifUnmodifiedSince) throw new RangeError("the IfUnmodifiedSince must have their default values because they are ignored by the blob service");
        const { span , updatedOptions  } = _tracing.createSpan("ContainerClient-setMetadata", options);
        try {
            return await this.containerContext.setMetadata(Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                metadata,
                modifiedAccessConditions: options.conditions
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Gets the permissions for the specified container. The permissions indicate
     * whether container data may be accessed publicly.
     *
     * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.
     * For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will get "2018-12-31T03:44:23.882Z".
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl
     *
     * @param options - Options to Container Get Access Policy operation.
     */ async getAccessPolicy(options = {
    }) {
        if (!options.conditions) options.conditions = {
        };
        const { span , updatedOptions  } = _tracing.createSpan("ContainerClient-getAccessPolicy", options);
        try {
            const response = await this.containerContext.getAccessPolicy(Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
            const res = {
                _response: response._response,
                blobPublicAccess: response.blobPublicAccess,
                date: response.date,
                etag: response.etag,
                errorCode: response.errorCode,
                lastModified: response.lastModified,
                requestId: response.requestId,
                clientRequestId: response.clientRequestId,
                signedIdentifiers: [],
                version: response.version
            };
            for (const identifier of response){
                let accessPolicy = undefined;
                if (identifier.accessPolicy) {
                    accessPolicy = {
                        permissions: identifier.accessPolicy.permissions
                    };
                    if (identifier.accessPolicy.expiresOn) accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);
                    if (identifier.accessPolicy.startsOn) accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);
                }
                res.signedIdentifiers.push({
                    accessPolicy,
                    id: identifier.id
                });
            }
            return res;
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Sets the permissions for the specified container. The permissions indicate
     * whether blobs in a container may be accessed publicly.
     *
     * When you set permissions for a container, the existing permissions are replaced.
     * If no access or containerAcl provided, the existing container ACL will be
     * removed.
     *
     * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.
     * During this interval, a shared access signature that is associated with the stored access policy will
     * fail with status code 403 (Forbidden), until the access policy becomes active.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl
     *
     * @param access - The level of public access to data in the container.
     * @param containerAcl - Array of elements each having a unique Id and details of the access policy.
     * @param options - Options to Container Set Access Policy operation.
     */ async setAccessPolicy(access, containerAcl, options = {
    }) {
        options.conditions = options.conditions || {
        };
        const { span , updatedOptions  } = _tracing.createSpan("ContainerClient-setAccessPolicy", options);
        try {
            const acl = [];
            for (const identifier of containerAcl || [])acl.push({
                accessPolicy: {
                    expiresOn: identifier.accessPolicy.expiresOn ? _utilsCommon.truncatedISO8061Date(identifier.accessPolicy.expiresOn) : "",
                    permissions: identifier.accessPolicy.permissions,
                    startsOn: identifier.accessPolicy.startsOn ? _utilsCommon.truncatedISO8061Date(identifier.accessPolicy.startsOn) : ""
                },
                id: identifier.id
            });
            return await this.containerContext.setAccessPolicy(Object.assign({
                abortSignal: options.abortSignal,
                access,
                containerAcl: acl,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: options.conditions
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Get a {@link BlobLeaseClient} that manages leases on the container.
     *
     * @param proposeLeaseId - Initial proposed lease Id.
     * @returns A new BlobLeaseClient object for managing leases on the container.
     */ getBlobLeaseClient(proposeLeaseId) {
        return new _blobLeaseClient.BlobLeaseClient(this, proposeLeaseId);
    }
    /**
     * Creates a new block blob, or updates the content of an existing block blob.
     *
     * Updating an existing block blob overwrites any existing metadata on the blob.
     * Partial updates are not supported; the content of the existing blob is
     * overwritten with the new content. To perform a partial update of a block blob's,
     * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.
     *
     * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},
     * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better
     * performance with concurrency uploading.
     *
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param blobName - Name of the block blob to create or update.
     * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function
     *                               which returns a new Readable stream whose offset is from data source beginning.
     * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
     *                               string including non non-Base64/Hex-encoded characters.
     * @param options - Options to configure the Block Blob Upload operation.
     * @returns Block Blob upload response data and the corresponding BlockBlobClient instance.
     */ async uploadBlockBlob(blobName, body, contentLength, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("ContainerClient-uploadBlockBlob", options);
        try {
            const blockBlobClient = this.getBlockBlobClient(blobName);
            const response = await blockBlobClient.upload(body, contentLength, updatedOptions);
            return {
                blockBlobClient,
                response
            };
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Marks the specified blob or snapshot for deletion. The blob is later deleted
     * during garbage collection. Note that in order to delete a blob, you must delete
     * all of its snapshots. You can delete both at the same time with the Delete
     * Blob operation.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
     *
     * @param blobName -
     * @param options - Options to Blob Delete operation.
     * @returns Block blob deletion response data.
     */ async deleteBlob(blobName, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("ContainerClient-deleteBlob", options);
        try {
            let blobClient = this.getBlobClient(blobName);
            if (options.versionId) blobClient = blobClient.withVersion(options.versionId);
            return await blobClient.delete(updatedOptions);
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * listBlobFlatSegment returns a single segment of blobs starting from the
     * specified Marker. Use an empty Marker to start enumeration from the beginning.
     * After getting a segment, process it, and then call listBlobsFlatSegment again
     * (passing the the previously-returned Marker) to get the next segment.
     * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs
     *
     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
     * @param options - Options to Container List Blob Flat Segment operation.
     */ async listBlobFlatSegment(marker, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("ContainerClient-listBlobFlatSegment", options);
        try {
            const response = await this.containerContext.listBlobFlatSegment(Object.assign(Object.assign({
                marker
            }, options), _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
            response.segment.blobItems = [];
            if (response.segment["Blob"] !== undefined) response.segment.blobItems = _utilsCommon.ProcessBlobItems(response.segment["Blob"]);
            const wrappedResponse = Object.assign(Object.assign({
            }, response), {
                _response: Object.assign(Object.assign({
                }, response._response), {
                    parsedBody: _utilsCommon.ConvertInternalResponseOfListBlobFlat(response._response.parsedBody)
                }),
                segment: Object.assign(Object.assign({
                }, response.segment), {
                    blobItems: response.segment.blobItems.map((blobItemInteral)=>{
                        const blobItem = Object.assign(Object.assign({
                        }, blobItemInteral), {
                            name: _utilsCommon.BlobNameToString(blobItemInteral.name),
                            tags: _utilsCommon.toTags(blobItemInteral.blobTags),
                            objectReplicationSourceProperties: _utilsCommon.parseObjectReplicationRecord(blobItemInteral.objectReplicationMetadata)
                        });
                        return blobItem;
                    })
                })
            });
            return wrappedResponse;
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * listBlobHierarchySegment returns a single segment of blobs starting from
     * the specified Marker. Use an empty Marker to start enumeration from the
     * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment
     * again (passing the the previously-returned Marker) to get the next segment.
     * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs
     *
     * @param delimiter - The character or string used to define the virtual hierarchy
     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
     * @param options - Options to Container List Blob Hierarchy Segment operation.
     */ async listBlobHierarchySegment(delimiter, marker, options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("ContainerClient-listBlobHierarchySegment", options);
        try {
            const response = await this.containerContext.listBlobHierarchySegment(delimiter, Object.assign(Object.assign({
                marker
            }, options), _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
            response.segment.blobItems = [];
            if (response.segment["Blob"] !== undefined) response.segment.blobItems = _utilsCommon.ProcessBlobItems(response.segment["Blob"]);
            response.segment.blobPrefixes = [];
            if (response.segment["BlobPrefix"] !== undefined) response.segment.blobPrefixes = _utilsCommon.ProcessBlobPrefixes(response.segment["BlobPrefix"]);
            const wrappedResponse = Object.assign(Object.assign({
            }, response), {
                _response: Object.assign(Object.assign({
                }, response._response), {
                    parsedBody: _utilsCommon.ConvertInternalResponseOfListBlobHierarchy(response._response.parsedBody)
                }),
                segment: Object.assign(Object.assign({
                }, response.segment), {
                    blobItems: response.segment.blobItems.map((blobItemInteral)=>{
                        const blobItem = Object.assign(Object.assign({
                        }, blobItemInteral), {
                            name: _utilsCommon.BlobNameToString(blobItemInteral.name),
                            tags: _utilsCommon.toTags(blobItemInteral.blobTags),
                            objectReplicationSourceProperties: _utilsCommon.parseObjectReplicationRecord(blobItemInteral.objectReplicationMetadata)
                        });
                        return blobItem;
                    }),
                    blobPrefixes: (_a = response.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map((blobPrefixInternal)=>{
                        const blobPrefix = {
                            name: _utilsCommon.BlobNameToString(blobPrefixInternal.name)
                        };
                        return blobPrefix;
                    })
                })
            });
            return wrappedResponse;
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse
     *
     * @param marker - A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the ContinuationToken value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The ContinuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param options - Options to list blobs operation.
     */ listSegments(marker, options = {
    }) {
        return _tslib.__asyncGenerator(this, arguments, function* listSegments_1() {
            let listBlobsFlatSegmentResponse;
            if (!!marker || marker === undefined) do {
                listBlobsFlatSegmentResponse = yield _tslib.__await(this.listBlobFlatSegment(marker, options));
                marker = listBlobsFlatSegmentResponse.continuationToken;
                yield yield _tslib.__await((yield _tslib.__await(listBlobsFlatSegmentResponse)));
            }while (marker)
        });
    }
    /**
     * Returns an AsyncIterableIterator of {@link BlobItem} objects
     *
     * @param options - Options to list blobs operation.
     */ listItems(options = {
    }) {
        return _tslib.__asyncGenerator(this, arguments, function* listItems_1() {
            var e_1, _a;
            let marker;
            try {
                for(var _b = _tslib.__asyncValues(this.listSegments(marker, options)), _c; _c = yield _tslib.__await(_b.next()), !_c.done;){
                    const listBlobsFlatSegmentResponse = _c.value;
                    yield _tslib.__await((yield* _tslib.__asyncDelegator(_tslib.__asyncValues(listBlobsFlatSegmentResponse.segment.blobItems))));
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally{
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _tslib.__await(_a.call(_b));
                } finally{
                    if (e_1) throw e_1.error;
                }
            }
        });
    }
    /**
     * Returns an async iterable iterator to list all the blobs
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the blobs in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * // Get the containerClient before you run these snippets,
     * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>");`
     * let i = 1;
     * for await (const blob of containerClient.listBlobsFlat()) {
     *   console.log(`Blob ${i++}: ${blob.name}`);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * let iter = containerClient.listBlobsFlat();
     * let blobItem = await iter.next();
     * while (!blobItem.done) {
     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
     *   blobItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {
     *   for (const blob of response.segment.blobItems) {
     *     console.log(`Blob ${i++}: ${blob.name}`);
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });
     * let response = (await iterator.next()).value;
     *
     * // Prints 2 blob names
     * for (const blob of response.segment.blobItems) {
     *   console.log(`Blob ${i++}: ${blob.name}`);
     * }
     *
     * // Gets next marker
     * let marker = response.continuationToken;
     *
     * // Passing next marker as continuationToken
     *
     * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });
     * response = (await iterator.next()).value;
     *
     * // Prints 10 blob names
     * for (const blob of response.segment.blobItems) {
     *   console.log(`Blob ${i++}: ${blob.name}`);
     * }
     * ```
     *
     * @param options - Options to list blobs.
     * @returns An asyncIterableIterator that supports paging.
     */ listBlobsFlat(options = {
    }) {
        const include = [];
        if (options.includeCopy) include.push("copy");
        if (options.includeDeleted) include.push("deleted");
        if (options.includeMetadata) include.push("metadata");
        if (options.includeSnapshots) include.push("snapshots");
        if (options.includeVersions) include.push("versions");
        if (options.includeUncommitedBlobs) include.push("uncommittedblobs");
        if (options.includeTags) include.push("tags");
        if (options.includeDeletedWithVersions) include.push("deletedwithversions");
        if (options.includeImmutabilityPolicy) include.push("immutabilitypolicy");
        if (options.includeLegalHold) include.push("legalhold");
        if (options.prefix === "") options.prefix = undefined;
        const updatedOptions = Object.assign(Object.assign({
        }, options), include.length > 0 ? {
            include: include
        } : {
        });
        // AsyncIterableIterator to iterate over blobs
        const iter = this.listItems(updatedOptions);
        return {
            /**
             * The next method, part of the iteration protocol
             */ next () {
                return iter.next();
            },
            /**
             * The connection to the async iterator, part of the iteration protocol
             */ [Symbol.asyncIterator] () {
                return this;
            },
            /**
             * Return an AsyncIterableIterator that works a page at a time
             */ byPage: (settings = {
            })=>{
                return this.listSegments(settings.continuationToken, Object.assign({
                    maxPageSize: settings.maxPageSize
                }, updatedOptions));
            }
        };
    }
    /**
     * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse
     *
     * @param delimiter - The character or string used to define the virtual hierarchy
     * @param marker - A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the ContinuationToken value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The ContinuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param options - Options to list blobs operation.
     */ listHierarchySegments(delimiter, marker, options = {
    }) {
        return _tslib.__asyncGenerator(this, arguments, function* listHierarchySegments_1() {
            let listBlobsHierarchySegmentResponse;
            if (!!marker || marker === undefined) do {
                listBlobsHierarchySegmentResponse = yield _tslib.__await(this.listBlobHierarchySegment(delimiter, marker, options));
                marker = listBlobsHierarchySegmentResponse.continuationToken;
                yield yield _tslib.__await((yield _tslib.__await(listBlobsHierarchySegmentResponse)));
            }while (marker)
        });
    }
    /**
     * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.
     *
     * @param delimiter - The character or string used to define the virtual hierarchy
     * @param options - Options to list blobs operation.
     */ listItemsByHierarchy(delimiter, options = {
    }) {
        return _tslib.__asyncGenerator(this, arguments, function* listItemsByHierarchy_1() {
            var e_2, _a;
            let marker;
            try {
                for(var _b = _tslib.__asyncValues(this.listHierarchySegments(delimiter, marker, options)), _c; _c = yield _tslib.__await(_b.next()), !_c.done;){
                    const listBlobsHierarchySegmentResponse = _c.value;
                    const segment = listBlobsHierarchySegmentResponse.segment;
                    if (segment.blobPrefixes) for (const prefix of segment.blobPrefixes)yield yield _tslib.__await(Object.assign({
                        kind: "prefix"
                    }, prefix));
                    for (const blob of segment.blobItems)yield yield _tslib.__await(Object.assign({
                        kind: "blob"
                    }, blob));
                }
            } catch (e_2_1) {
                e_2 = {
                    error: e_2_1
                };
            } finally{
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _tslib.__await(_a.call(_b));
                } finally{
                    if (e_2) throw e_2.error;
                }
            }
        });
    }
    /**
     * Returns an async iterable iterator to list all the blobs by hierarchy.
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * for await (const item of containerClient.listBlobsByHierarchy("/")) {
     *   if (item.kind === "prefix") {
     *     console.log(`\tBlobPrefix: ${item.name}`);
     *   } else {
     *     console.log(`\tBlobItem: name - ${item.name}`);
     *   }
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let iter = containerClient.listBlobsByHierarchy("/", { prefix: "prefix1/" });
     * let entity = await iter.next();
     * while (!entity.done) {
     *   let item = entity.value;
     *   if (item.kind === "prefix") {
     *     console.log(`\tBlobPrefix: ${item.name}`);
     *   } else {
     *     console.log(`\tBlobItem: name - ${item.name}`);
     *   }
     *   entity = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * console.log("Listing blobs by hierarchy by page");
     * for await (const response of containerClient.listBlobsByHierarchy("/").byPage()) {
     *   const segment = response.segment;
     *   if (segment.blobPrefixes) {
     *     for (const prefix of segment.blobPrefixes) {
     *       console.log(`\tBlobPrefix: ${prefix.name}`);
     *     }
     *   }
     *   for (const blob of response.segment.blobItems) {
     *     console.log(`\tBlobItem: name - ${blob.name}`);
     *   }
     * }
     * ```
     *
     * Example using paging with a max page size:
     *
     * ```js
     * console.log("Listing blobs by hierarchy by page, specifying a prefix and a max page size");
     *
     * let i = 1;
     * for await (const response of containerClient
     *   .listBlobsByHierarchy("/", { prefix: "prefix2/sub1/" })
     *   .byPage({ maxPageSize: 2 })) {
     *   console.log(`Page ${i++}`);
     *   const segment = response.segment;
     *
     *   if (segment.blobPrefixes) {
     *     for (const prefix of segment.blobPrefixes) {
     *       console.log(`\tBlobPrefix: ${prefix.name}`);
     *     }
     *   }
     *
     *   for (const blob of response.segment.blobItems) {
     *     console.log(`\tBlobItem: name - ${blob.name}`);
     *   }
     * }
     * ```
     *
     * @param delimiter - The character or string used to define the virtual hierarchy
     * @param options - Options to list blobs operation.
     */ listBlobsByHierarchy(delimiter, options = {
    }) {
        if (delimiter === "") throw new RangeError("delimiter should contain one or more characters");
        const include = [];
        if (options.includeCopy) include.push("copy");
        if (options.includeDeleted) include.push("deleted");
        if (options.includeMetadata) include.push("metadata");
        if (options.includeSnapshots) include.push("snapshots");
        if (options.includeVersions) include.push("versions");
        if (options.includeUncommitedBlobs) include.push("uncommittedblobs");
        if (options.includeTags) include.push("tags");
        if (options.includeDeletedWithVersions) include.push("deletedwithversions");
        if (options.includeImmutabilityPolicy) include.push("immutabilitypolicy");
        if (options.includeLegalHold) include.push("legalhold");
        if (options.prefix === "") options.prefix = undefined;
        const updatedOptions = Object.assign(Object.assign({
        }, options), include.length > 0 ? {
            include: include
        } : {
        });
        // AsyncIterableIterator to iterate over blob prefixes and blobs
        const iter = this.listItemsByHierarchy(delimiter, updatedOptions);
        return {
            /**
             * The next method, part of the iteration protocol
             */ async next () {
                return iter.next();
            },
            /**
             * The connection to the async iterator, part of the iteration protocol
             */ [Symbol.asyncIterator] () {
                return this;
            },
            /**
             * Return an AsyncIterableIterator that works a page at a time
             */ byPage: (settings = {
            })=>{
                return this.listHierarchySegments(delimiter, settings.continuationToken, Object.assign({
                    maxPageSize: settings.maxPageSize
                }, updatedOptions));
            }
        };
    }
    /**
     * The Filter Blobs operation enables callers to list blobs in the container whose tags
     * match a given search expression.
     *
     * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                        The given expression must evaluate to true for a blob to be returned in the results.
     *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                        however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param marker - A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the continuationToken value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The continuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param options - Options to find blobs by tags.
     */ async findBlobsByTagsSegment(tagFilterSqlExpression, marker, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("ContainerClient-findBlobsByTagsSegment", options);
        try {
            const response = await this.containerContext.filterBlobs(Object.assign({
                abortSignal: options.abortSignal,
                where: tagFilterSqlExpression,
                marker,
                maxPageSize: options.maxPageSize
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
            const wrappedResponse = Object.assign(Object.assign({
            }, response), {
                _response: response._response,
                blobs: response.blobs.map((blob)=>{
                    var _a;
                    let tagValue = "";
                    if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) tagValue = blob.tags.blobTagSet[0].value;
                    return Object.assign(Object.assign({
                    }, blob), {
                        tags: _utilsCommon.toTags(blob.tags),
                        tagValue
                    });
                })
            });
            return wrappedResponse;
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Returns an AsyncIterableIterator for ContainerFindBlobsByTagsSegmentResponse.
     *
     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param marker - A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the continuationToken value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The continuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param options - Options to find blobs by tags.
     */ findBlobsByTagsSegments(tagFilterSqlExpression, marker, options = {
    }) {
        return _tslib.__asyncGenerator(this, arguments, function* findBlobsByTagsSegments_1() {
            let response;
            if (!!marker || marker === undefined) do {
                response = yield _tslib.__await(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));
                response.blobs = response.blobs || [];
                marker = response.continuationToken;
                yield yield _tslib.__await(response);
            }while (marker)
        });
    }
    /**
     * Returns an AsyncIterableIterator for blobs.
     *
     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param options - Options to findBlobsByTagsItems.
     */ findBlobsByTagsItems(tagFilterSqlExpression, options = {
    }) {
        return _tslib.__asyncGenerator(this, arguments, function* findBlobsByTagsItems_1() {
            var e_3, _a;
            let marker;
            try {
                for(var _b = _tslib.__asyncValues(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options)), _c; _c = yield _tslib.__await(_b.next()), !_c.done;){
                    const segment = _c.value;
                    yield _tslib.__await((yield* _tslib.__asyncDelegator(_tslib.__asyncValues(segment.blobs))));
                }
            } catch (e_3_1) {
                e_3 = {
                    error: e_3_1
                };
            } finally{
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _tslib.__await(_a.call(_b));
                } finally{
                    if (e_3) throw e_3.error;
                }
            }
        });
    }
    /**
     * Returns an async iterable iterator to find all blobs with specified tag
     * under the specified container.
     *
     * .byPage() returns an async iterable iterator to list the blobs in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * let i = 1;
     * for await (const blob of containerClient.findBlobsByTags("tagkey='tagvalue'")) {
     *   console.log(`Blob ${i++}: ${blob.name}`);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * const iter = containerClient.findBlobsByTags("tagkey='tagvalue'");
     * let blobItem = await iter.next();
     * while (!blobItem.done) {
     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
     *   blobItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const response of containerClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 20 })) {
     *   if (response.blobs) {
     *     for (const blob of response.blobs) {
     *       console.log(`Blob ${i++}: ${blob.name}`);
     *     }
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = containerClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 2 });
     * let response = (await iterator.next()).value;
     *
     * // Prints 2 blob names
     * if (response.blobs) {
     *   for (const blob of response.blobs) {
     *     console.log(`Blob ${i++}: ${blob.name}`);
     *   }
     * }
     *
     * // Gets next marker
     * let marker = response.continuationToken;
     * // Passing next marker as continuationToken
     * iterator = containerClient
     *   .findBlobsByTags("tagkey='tagvalue'")
     *   .byPage({ continuationToken: marker, maxPageSize: 10 });
     * response = (await iterator.next()).value;
     *
     * // Prints blob names
     * if (response.blobs) {
     *   for (const blob of response.blobs) {
     *      console.log(`Blob ${i++}: ${blob.name}`);
     *   }
     * }
     * ```
     *
     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param options - Options to find blobs by tags.
     */ findBlobsByTags(tagFilterSqlExpression, options = {
    }) {
        // AsyncIterableIterator to iterate over blobs
        const listSegmentOptions = Object.assign({
        }, options);
        const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
        return {
            /**
             * The next method, part of the iteration protocol
             */ next () {
                return iter.next();
            },
            /**
             * The connection to the async iterator, part of the iteration protocol
             */ [Symbol.asyncIterator] () {
                return this;
            },
            /**
             * Return an AsyncIterableIterator that works a page at a time
             */ byPage: (settings = {
            })=>{
                return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({
                    maxPageSize: settings.maxPageSize
                }, listSegmentOptions));
            }
        };
    }
    getContainerNameFromUrl() {
        let containerName;
        try {
            //  URL may look like the following
            // "https://myaccount.blob.core.windows.net/mycontainer?sasString";
            // "https://myaccount.blob.core.windows.net/mycontainer";
            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername`
            // http://localhost:10001/devstoreaccount1/containername
            const parsedUrl = _coreHttp.URLBuilder.parse(this.url);
            if (parsedUrl.getHost().split(".")[1] === "blob") // "https://myaccount.blob.core.windows.net/containername".
            // "https://customdomain.com/containername".
            // .getPath() -> /containername
            containerName = parsedUrl.getPath().split("/")[1];
            else if (_utilsCommon.isIpEndpointStyle(parsedUrl)) // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername
            // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername
            // .getPath() -> /devstoreaccount1/containername
            containerName = parsedUrl.getPath().split("/")[2];
            else // "https://customdomain.com/containername".
            // .getPath() -> /containername
            containerName = parsedUrl.getPath().split("/")[1];
            // decode the encoded containerName - to get all the special characters that might be present in it
            containerName = decodeURIComponent(containerName);
            if (!containerName) throw new Error("Provided containerName is invalid.");
            return containerName;
        } catch (error) {
            throw new Error("Unable to extract containerName with provided information.");
        }
    }
    /**
     * Only available for ContainerClient constructed with a shared key credential.
     *
     * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties
     * and parameters passed in. The SAS is signed by the shared key credential of the client.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
     *
     * @param options - Optional parameters.
     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
     */ generateSasUrl(options) {
        return new Promise((resolve)=>{
            if (!(this.credential instanceof _storageSharedKeyCredential.StorageSharedKeyCredential)) throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
            const sas = _blobSASSignatureValues.generateBlobSASQueryParameters(Object.assign({
                containerName: this._containerName
            }, options), this.credential).toString();
            resolve(_utilsCommon.appendToURLQuery(this.url, sas));
        });
    }
    /**
     * Creates a BlobBatchClient object to conduct batch operations.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
     *
     * @returns A new BlobBatchClient object for this container.
     */ getBlobBatchClient() {
        return new _blobBatchClient.BlobBatchClient(this.url, this.pipeline);
    }
}

},{"tslib":"lRdW5","@azure/core-http":"iSINq","@azure/core-tracing":"7R1NC","./credentials/AnonymousCredential":"f0sOe","./credentials/StorageSharedKeyCredential":"jUFIX","./generated/src/operations":"j9faG","./Pipeline":"bsozg","./StorageClient":"gO9Kx","./utils/tracing":"m0KjB","./utils/utils.common":"2SR3M","./sas/BlobSASSignatureValues":"SWffY","./BlobLeaseClient":"hZ8uc","./Clients":"kUV1b","./BlobBatchClient":"iF02i","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jUFIX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
parcelHelpers.export(exports, "StorageSharedKeyCredential", ()=>StorageSharedKeyCredential
);
class StorageSharedKeyCredential {
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gO9Kx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}
 * and etc.
 */ parcelHelpers.export(exports, "StorageClient", ()=>StorageClient
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _storageClientContext = require("./generated/src/storageClientContext");
var _utilsCommon = require("./utils/utils.common");
var _anonymousCredential = require("./credentials/AnonymousCredential");
var _storageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");
var _coreHttp = require("@azure/core-http");
class StorageClient {
    /**
     * Creates an instance of StorageClient.
     * @param url - url to resource
     * @param pipeline - request policy pipeline.
     */ constructor(url, pipeline){
        // URL should be encoded and only once, protocol layer shouldn't encode URL again
        this.url = _utilsCommon.escapeURLPath(url);
        this.accountName = _utilsCommon.getAccountNameFromUrl(url);
        this.pipeline = pipeline;
        this.storageClientContext = new _storageClientContext.StorageClientContext(this.url, pipeline.toServiceClientOptions());
        this.isHttps = _utilsCommon.iEqual(_utilsCommon.getURLScheme(this.url) || "", "https");
        this.credential = new _anonymousCredential.AnonymousCredential();
        for (const factory of this.pipeline.factories){
            if (_coreHttp.isNode && factory instanceof _storageSharedKeyCredential.StorageSharedKeyCredential || factory instanceof _anonymousCredential.AnonymousCredential) this.credential = factory;
            else if (_coreHttp.isTokenCredential(factory.credential)) // Only works if the factory has been attached a "credential" property.
            // We do that in newPipeline() when using TokenCredential.
            this.credential = factory.credential;
        }
        // Override protocol layer's default content-type
        const storageClientContext = this.storageClientContext;
        storageClientContext.requestContentType = undefined;
    }
}

},{"./generated/src/storageClientContext":"a1Au7","./utils/utils.common":"2SR3M","./credentials/AnonymousCredential":"f0sOe","./credentials/StorageSharedKeyCredential":"jUFIX","@azure/core-http":"iSINq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a1Au7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StorageClientContext", ()=>StorageClientContext
);
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */ var _coreHttp = require("@azure/core-http");
const packageName = "azure-storage-blob";
const packageVersion = "12.9.0";
class StorageClientContext extends _coreHttp.ServiceClient {
    /**
     * Initializes a new instance of the StorageClientContext class.
     * @param url The URL of the service account, container, or blob that is the target of the desired
     *            operation.
     * @param options The parameter options
     */ constructor(url, options){
        if (url === undefined) throw new Error("'url' cannot be null");
        // Initializing default values for options
        if (!options) options = {
        };
        if (!options.userAgent) {
            const defaultUserAgent = _coreHttp.getDefaultUserAgentValue();
            options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;
        }
        super(undefined, options);
        this.requestContentType = "application/json; charset=utf-8";
        this.baseUri = options.endpoint || "{url}";
        // Parameter assignments
        this.url = url;
        // Assigning values to Constant parameters
        this.version = options.version || "2021-04-10";
    }
}

},{"@azure/core-http":"iSINq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"m0KjB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSpan", ()=>createSpan
);
/**
 * @internal
 *
 * Adapt the tracing options from OperationOptions to what they need to be for
 * RequestOptionsBase (when we update to later OpenTelemetry versions this is now
 * two separate fields, not just one).
 */ parcelHelpers.export(exports, "convertTracingToRequestOptionsBase", ()=>convertTracingToRequestOptionsBase
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreTracing = require("@azure/core-tracing");
const createSpan = _coreTracing.createSpanFunction({
    packagePrefix: "Azure.Storage.Blob",
    namespace: "Microsoft.Storage"
});
function convertTracingToRequestOptionsBase(options) {
    var _a, _b;
    return {
        // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.
        spanOptions: (_a = options === null || options === void 0 ? void 0 : options.tracingOptions) === null || _a === void 0 ? void 0 : _a.spanOptions,
        tracingContext: (_b = options === null || options === void 0 ? void 0 : options.tracingOptions) === null || _b === void 0 ? void 0 : _b.tracingContext
    };
}

},{"@azure/core-tracing":"7R1NC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"SWffY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateBlobSASQueryParameters", ()=>generateBlobSASQueryParameters
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _blobSASPermissions = require("./BlobSASPermissions");
var _containerSASPermissions = require("./ContainerSASPermissions");
var _storageSharedKeyCredential = require("../credentials/StorageSharedKeyCredential");
var _userDelegationKeyCredential = require("../credentials/UserDelegationKeyCredential");
var _sasIPRange = require("./SasIPRange");
var _sasqueryParameters = require("./SASQueryParameters");
var _constants = require("../utils/constants");
var _utilsCommon = require("../utils/utils.common");
function generateBlobSASQueryParameters(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {
    const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : _constants.SERVICE_VERSION;
    const sharedKeyCredential = sharedKeyCredentialOrUserDelegationKey instanceof _storageSharedKeyCredential.StorageSharedKeyCredential ? sharedKeyCredentialOrUserDelegationKey : undefined;
    let userDelegationKeyCredential;
    if (sharedKeyCredential === undefined && accountName !== undefined) userDelegationKeyCredential = new _userDelegationKeyCredential.UserDelegationKeyCredential(accountName, sharedKeyCredentialOrUserDelegationKey);
    if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) throw TypeError("Invalid sharedKeyCredential, userDelegationKey or accountName.");
    // Version 2020-12-06 adds support for encryptionscope in SAS.
    if (version >= "2020-12-06") {
        if (sharedKeyCredential !== undefined) return generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential);
        else return generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential);
    }
    // Version 2019-12-12 adds support for the blob tags permission.
    // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.
    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string
    if (version >= "2018-11-09") {
        if (sharedKeyCredential !== undefined) return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);
        else {
            // Version 2020-02-10 delegation SAS signature construction includes preauthorizedAgentObjectId, agentObjectId, correlationId.
            if (version >= "2020-02-10") return generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential);
            else return generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential);
        }
    }
    if (version >= "2015-04-05") {
        if (sharedKeyCredential !== undefined) return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);
        else throw new RangeError("'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.");
    }
    throw new RangeError("'version' must be >= '2015-04-05'.");
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn and identifier.
 *
 * WARNING: When identifier is not provided, permissions and expiresOn are required.
 * You MUST assign value to identifier or expiresOn & permissions manually if you initial with
 * this constructor.
 *
 * @param blobSASSignatureValues -
 * @param sharedKeyCredential -
 */ function generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential) {
    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
    if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
    let resource = "c";
    if (blobSASSignatureValues.blobName) resource = "b";
    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.
    let verifiedPermissions;
    if (blobSASSignatureValues.permissions) {
        if (blobSASSignatureValues.blobName) verifiedPermissions = _blobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        else verifiedPermissions = _containerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
    // Signature is generated on the un-url-encoded values.
    const stringToSign = [
        verifiedPermissions ? verifiedPermissions : "",
        blobSASSignatureValues.startsOn ? _utilsCommon.truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
        blobSASSignatureValues.expiresOn ? _utilsCommon.truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
        blobSASSignatureValues.identifier,
        blobSASSignatureValues.ipRange ? _sasIPRange.ipRangeToString(blobSASSignatureValues.ipRange) : "",
        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
        blobSASSignatureValues.version,
        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "",
        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "",
        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "",
        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "",
        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : "", 
    ].join("\n");
    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
    return new _sasqueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn and identifier.
 *
 * WARNING: When identifier is not provided, permissions and expiresOn are required.
 * You MUST assign value to identifier or expiresOn & permissions manually if you initial with
 * this constructor.
 *
 * @param blobSASSignatureValues -
 * @param sharedKeyCredential -
 */ function generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential) {
    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
    if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
    let resource = "c";
    let timestamp = blobSASSignatureValues.snapshotTime;
    if (blobSASSignatureValues.blobName) {
        resource = "b";
        if (blobSASSignatureValues.snapshotTime) resource = "bs";
        else if (blobSASSignatureValues.versionId) {
            resource = "bv";
            timestamp = blobSASSignatureValues.versionId;
        }
    }
    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.
    let verifiedPermissions;
    if (blobSASSignatureValues.permissions) {
        if (blobSASSignatureValues.blobName) verifiedPermissions = _blobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        else verifiedPermissions = _containerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
    // Signature is generated on the un-url-encoded values.
    const stringToSign = [
        verifiedPermissions ? verifiedPermissions : "",
        blobSASSignatureValues.startsOn ? _utilsCommon.truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
        blobSASSignatureValues.expiresOn ? _utilsCommon.truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
        blobSASSignatureValues.identifier,
        blobSASSignatureValues.ipRange ? _sasIPRange.ipRangeToString(blobSASSignatureValues.ipRange) : "",
        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
        blobSASSignatureValues.version,
        resource,
        timestamp,
        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "",
        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "",
        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "",
        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "",
        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : "", 
    ].join("\n");
    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
    return new _sasqueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn and identifier.
 *
 * WARNING: When identifier is not provided, permissions and expiresOn are required.
 * You MUST assign value to identifier or expiresOn & permissions manually if you initial with
 * this constructor.
 *
 * @param blobSASSignatureValues -
 * @param sharedKeyCredential -
 */ function generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential) {
    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
    if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
    let resource = "c";
    let timestamp = blobSASSignatureValues.snapshotTime;
    if (blobSASSignatureValues.blobName) {
        resource = "b";
        if (blobSASSignatureValues.snapshotTime) resource = "bs";
        else if (blobSASSignatureValues.versionId) {
            resource = "bv";
            timestamp = blobSASSignatureValues.versionId;
        }
    }
    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.
    let verifiedPermissions;
    if (blobSASSignatureValues.permissions) {
        if (blobSASSignatureValues.blobName) verifiedPermissions = _blobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        else verifiedPermissions = _containerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
    // Signature is generated on the un-url-encoded values.
    const stringToSign = [
        verifiedPermissions ? verifiedPermissions : "",
        blobSASSignatureValues.startsOn ? _utilsCommon.truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
        blobSASSignatureValues.expiresOn ? _utilsCommon.truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
        blobSASSignatureValues.identifier,
        blobSASSignatureValues.ipRange ? _sasIPRange.ipRangeToString(blobSASSignatureValues.ipRange) : "",
        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
        blobSASSignatureValues.version,
        resource,
        timestamp,
        blobSASSignatureValues.encryptionScope,
        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "",
        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "",
        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "",
        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "",
        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : "", 
    ].join("\n");
    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
    return new _sasqueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, undefined, undefined, undefined, blobSASSignatureValues.encryptionScope);
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn.
 *
 * WARNING: identifier will be ignored, permissions and expiresOn are required.
 *
 * @param blobSASSignatureValues -
 * @param userDelegationKeyCredential -
 */ function generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential) {
    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
    // Stored access policies are not supported for a user delegation SAS.
    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
    let resource = "c";
    let timestamp = blobSASSignatureValues.snapshotTime;
    if (blobSASSignatureValues.blobName) {
        resource = "b";
        if (blobSASSignatureValues.snapshotTime) resource = "bs";
        else if (blobSASSignatureValues.versionId) {
            resource = "bv";
            timestamp = blobSASSignatureValues.versionId;
        }
    }
    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.
    let verifiedPermissions;
    if (blobSASSignatureValues.permissions) {
        if (blobSASSignatureValues.blobName) verifiedPermissions = _blobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        else verifiedPermissions = _containerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
    // Signature is generated on the un-url-encoded values.
    const stringToSign = [
        verifiedPermissions ? verifiedPermissions : "",
        blobSASSignatureValues.startsOn ? _utilsCommon.truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
        blobSASSignatureValues.expiresOn ? _utilsCommon.truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
        userDelegationKeyCredential.userDelegationKey.signedObjectId,
        userDelegationKeyCredential.userDelegationKey.signedTenantId,
        userDelegationKeyCredential.userDelegationKey.signedStartsOn ? _utilsCommon.truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "",
        userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? _utilsCommon.truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "",
        userDelegationKeyCredential.userDelegationKey.signedService,
        userDelegationKeyCredential.userDelegationKey.signedVersion,
        blobSASSignatureValues.ipRange ? _sasIPRange.ipRangeToString(blobSASSignatureValues.ipRange) : "",
        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
        blobSASSignatureValues.version,
        resource,
        timestamp,
        blobSASSignatureValues.cacheControl,
        blobSASSignatureValues.contentDisposition,
        blobSASSignatureValues.contentEncoding,
        blobSASSignatureValues.contentLanguage,
        blobSASSignatureValues.contentType, 
    ].join("\n");
    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
    return new _sasqueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey);
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2020-02-10.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn.
 *
 * WARNING: identifier will be ignored, permissions and expiresOn are required.
 *
 * @param blobSASSignatureValues -
 * @param userDelegationKeyCredential -
 */ function generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential) {
    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
    // Stored access policies are not supported for a user delegation SAS.
    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
    let resource = "c";
    let timestamp = blobSASSignatureValues.snapshotTime;
    if (blobSASSignatureValues.blobName) {
        resource = "b";
        if (blobSASSignatureValues.snapshotTime) resource = "bs";
        else if (blobSASSignatureValues.versionId) {
            resource = "bv";
            timestamp = blobSASSignatureValues.versionId;
        }
    }
    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.
    let verifiedPermissions;
    if (blobSASSignatureValues.permissions) {
        if (blobSASSignatureValues.blobName) verifiedPermissions = _blobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        else verifiedPermissions = _containerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
    // Signature is generated on the un-url-encoded values.
    const stringToSign = [
        verifiedPermissions ? verifiedPermissions : "",
        blobSASSignatureValues.startsOn ? _utilsCommon.truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
        blobSASSignatureValues.expiresOn ? _utilsCommon.truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
        userDelegationKeyCredential.userDelegationKey.signedObjectId,
        userDelegationKeyCredential.userDelegationKey.signedTenantId,
        userDelegationKeyCredential.userDelegationKey.signedStartsOn ? _utilsCommon.truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "",
        userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? _utilsCommon.truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "",
        userDelegationKeyCredential.userDelegationKey.signedService,
        userDelegationKeyCredential.userDelegationKey.signedVersion,
        blobSASSignatureValues.preauthorizedAgentObjectId,
        undefined,
        blobSASSignatureValues.correlationId,
        blobSASSignatureValues.ipRange ? _sasIPRange.ipRangeToString(blobSASSignatureValues.ipRange) : "",
        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
        blobSASSignatureValues.version,
        resource,
        timestamp,
        blobSASSignatureValues.cacheControl,
        blobSASSignatureValues.contentDisposition,
        blobSASSignatureValues.contentEncoding,
        blobSASSignatureValues.contentLanguage,
        blobSASSignatureValues.contentType, 
    ].join("\n");
    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
    return new _sasqueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId);
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn.
 *
 * WARNING: identifier will be ignored, permissions and expiresOn are required.
 *
 * @param blobSASSignatureValues -
 * @param userDelegationKeyCredential -
 */ function generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential) {
    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
    // Stored access policies are not supported for a user delegation SAS.
    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
    let resource = "c";
    let timestamp = blobSASSignatureValues.snapshotTime;
    if (blobSASSignatureValues.blobName) {
        resource = "b";
        if (blobSASSignatureValues.snapshotTime) resource = "bs";
        else if (blobSASSignatureValues.versionId) {
            resource = "bv";
            timestamp = blobSASSignatureValues.versionId;
        }
    }
    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.
    let verifiedPermissions;
    if (blobSASSignatureValues.permissions) {
        if (blobSASSignatureValues.blobName) verifiedPermissions = _blobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
        else verifiedPermissions = _containerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
    // Signature is generated on the un-url-encoded values.
    const stringToSign = [
        verifiedPermissions ? verifiedPermissions : "",
        blobSASSignatureValues.startsOn ? _utilsCommon.truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
        blobSASSignatureValues.expiresOn ? _utilsCommon.truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
        userDelegationKeyCredential.userDelegationKey.signedObjectId,
        userDelegationKeyCredential.userDelegationKey.signedTenantId,
        userDelegationKeyCredential.userDelegationKey.signedStartsOn ? _utilsCommon.truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "",
        userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? _utilsCommon.truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "",
        userDelegationKeyCredential.userDelegationKey.signedService,
        userDelegationKeyCredential.userDelegationKey.signedVersion,
        blobSASSignatureValues.preauthorizedAgentObjectId,
        undefined,
        blobSASSignatureValues.correlationId,
        blobSASSignatureValues.ipRange ? _sasIPRange.ipRangeToString(blobSASSignatureValues.ipRange) : "",
        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
        blobSASSignatureValues.version,
        resource,
        timestamp,
        blobSASSignatureValues.encryptionScope,
        blobSASSignatureValues.cacheControl,
        blobSASSignatureValues.contentDisposition,
        blobSASSignatureValues.contentEncoding,
        blobSASSignatureValues.contentLanguage,
        blobSASSignatureValues.contentType, 
    ].join("\n");
    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
    return new _sasqueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId, blobSASSignatureValues.encryptionScope);
}
function getCanonicalName(accountName, containerName, blobName) {
    // Container: "/blob/account/containerName"
    // Blob:      "/blob/account/containerName/blobName"
    const elements = [
        `/blob/${accountName}/${containerName}`
    ];
    if (blobName) elements.push(`/${blobName}`);
    return elements.join("");
}
function SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues) {
    const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : _constants.SERVICE_VERSION;
    if (blobSASSignatureValues.snapshotTime && version < "2018-11-09") throw RangeError("'version' must be >= '2018-11-09' when providing 'snapshotTime'.");
    if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.snapshotTime) throw RangeError("Must provide 'blobName' when providing 'snapshotTime'.");
    if (blobSASSignatureValues.versionId && version < "2019-10-10") throw RangeError("'version' must be >= '2019-10-10' when providing 'versionId'.");
    if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.versionId) throw RangeError("Must provide 'blobName' when providing 'versionId'.");
    if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.setImmutabilityPolicy && version < "2020-08-04") throw RangeError("'version' must be >= '2020-08-04' when provided 'i' permission.");
    if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.deleteVersion && version < "2019-10-10") throw RangeError("'version' must be >= '2019-10-10' when providing 'x' permission.");
    if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.permanentDelete && version < "2019-10-10") throw RangeError("'version' must be >= '2019-10-10' when providing 'y' permission.");
    if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.tag && version < "2019-12-12") throw RangeError("'version' must be >= '2019-12-12' when providing 't' permission.");
    if (version < "2020-02-10" && blobSASSignatureValues.permissions && (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)) throw RangeError("'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.");
    if (version < "2021-04-10" && blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.filterByTags) throw RangeError("'version' must be >= '2021-04-10' when providing the 'f' permission.");
    if (version < "2020-02-10" && (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)) throw RangeError("'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.");
    if (blobSASSignatureValues.encryptionScope && version < "2020-12-06") throw RangeError("'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.");
    blobSASSignatureValues.version = version;
    return blobSASSignatureValues;
}

},{"./BlobSASPermissions":"fEJiX","./ContainerSASPermissions":"dxYpk","../credentials/StorageSharedKeyCredential":"jUFIX","../credentials/UserDelegationKeyCredential":"h8KFP","./SasIPRange":"aH3sX","./SASQueryParameters":"gMQnk","../utils/constants":"4gX5x","../utils/utils.common":"2SR3M","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fEJiX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting
 * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all
 * the values are set, this should be serialized with toString and set as the permissions field on a
 * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but
 * the order of the permissions is particular and this class guarantees correctness.
 */ parcelHelpers.export(exports, "BlobSASPermissions", ()=>BlobSASPermissions
);
class BlobSASPermissions {
    constructor(){
        /**
         * Specifies Read access granted.
         */ this.read = false;
        /**
         * Specifies Add access granted.
         */ this.add = false;
        /**
         * Specifies Create access granted.
         */ this.create = false;
        /**
         * Specifies Write access granted.
         */ this.write = false;
        /**
         * Specifies Delete access granted.
         */ this.delete = false;
        /**
         * Specifies Delete version access granted.
         */ this.deleteVersion = false;
        /**
         * Specfies Tag access granted.
         */ this.tag = false;
        /**
         * Specifies Move access granted.
         */ this.move = false;
        /**
         * Specifies Execute access granted.
         */ this.execute = false;
        /**
         * Specifies SetImmutabilityPolicy access granted.
         */ this.setImmutabilityPolicy = false;
        /**
         * Specifies that Permanent Delete is permitted.
         */ this.permanentDelete = false;
    }
    /**
     * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an
     * Error if it encounters a character that does not correspond to a valid permission.
     *
     * @param permissions -
     */ static parse(permissions) {
        const blobSASPermissions = new BlobSASPermissions();
        for (const char of permissions)switch(char){
            case "r":
                blobSASPermissions.read = true;
                break;
            case "a":
                blobSASPermissions.add = true;
                break;
            case "c":
                blobSASPermissions.create = true;
                break;
            case "w":
                blobSASPermissions.write = true;
                break;
            case "d":
                blobSASPermissions.delete = true;
                break;
            case "x":
                blobSASPermissions.deleteVersion = true;
                break;
            case "t":
                blobSASPermissions.tag = true;
                break;
            case "m":
                blobSASPermissions.move = true;
                break;
            case "e":
                blobSASPermissions.execute = true;
                break;
            case "i":
                blobSASPermissions.setImmutabilityPolicy = true;
                break;
            case "y":
                blobSASPermissions.permanentDelete = true;
                break;
            default:
                throw new RangeError(`Invalid permission: ${char}`);
        }
        return blobSASPermissions;
    }
    /**
     * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it
     * and boolean values for them.
     *
     * @param permissionLike -
     */ static from(permissionLike) {
        const blobSASPermissions = new BlobSASPermissions();
        if (permissionLike.read) blobSASPermissions.read = true;
        if (permissionLike.add) blobSASPermissions.add = true;
        if (permissionLike.create) blobSASPermissions.create = true;
        if (permissionLike.write) blobSASPermissions.write = true;
        if (permissionLike.delete) blobSASPermissions.delete = true;
        if (permissionLike.deleteVersion) blobSASPermissions.deleteVersion = true;
        if (permissionLike.tag) blobSASPermissions.tag = true;
        if (permissionLike.move) blobSASPermissions.move = true;
        if (permissionLike.execute) blobSASPermissions.execute = true;
        if (permissionLike.setImmutabilityPolicy) blobSASPermissions.setImmutabilityPolicy = true;
        if (permissionLike.permanentDelete) blobSASPermissions.permanentDelete = true;
        return blobSASPermissions;
    }
    /**
     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
     * order accepted by the service.
     *
     * @returns A string which represents the BlobSASPermissions
     */ toString() {
        const permissions = [];
        if (this.read) permissions.push("r");
        if (this.add) permissions.push("a");
        if (this.create) permissions.push("c");
        if (this.write) permissions.push("w");
        if (this.delete) permissions.push("d");
        if (this.deleteVersion) permissions.push("x");
        if (this.tag) permissions.push("t");
        if (this.move) permissions.push("m");
        if (this.execute) permissions.push("e");
        if (this.setImmutabilityPolicy) permissions.push("i");
        if (this.permanentDelete) permissions.push("y");
        return permissions.join("");
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dxYpk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.
 * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.
 * Once all the values are set, this should be serialized with toString and set as the permissions field on a
 * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but
 * the order of the permissions is particular and this class guarantees correctness.
 */ parcelHelpers.export(exports, "ContainerSASPermissions", ()=>ContainerSASPermissions
);
class ContainerSASPermissions {
    constructor(){
        /**
         * Specifies Read access granted.
         */ this.read = false;
        /**
         * Specifies Add access granted.
         */ this.add = false;
        /**
         * Specifies Create access granted.
         */ this.create = false;
        /**
         * Specifies Write access granted.
         */ this.write = false;
        /**
         * Specifies Delete access granted.
         */ this.delete = false;
        /**
         * Specifies Delete version access granted.
         */ this.deleteVersion = false;
        /**
         * Specifies List access granted.
         */ this.list = false;
        /**
         * Specfies Tag access granted.
         */ this.tag = false;
        /**
         * Specifies Move access granted.
         */ this.move = false;
        /**
         * Specifies Execute access granted.
         */ this.execute = false;
        /**
         * Specifies SetImmutabilityPolicy access granted.
         */ this.setImmutabilityPolicy = false;
        /**
         * Specifies that Permanent Delete is permitted.
         */ this.permanentDelete = false;
        /**
         * Specifies that Filter Blobs by Tags is permitted.
         */ this.filterByTags = false;
    }
    /**
     * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an
     * Error if it encounters a character that does not correspond to a valid permission.
     *
     * @param permissions -
     */ static parse(permissions) {
        const containerSASPermissions = new ContainerSASPermissions();
        for (const char of permissions)switch(char){
            case "r":
                containerSASPermissions.read = true;
                break;
            case "a":
                containerSASPermissions.add = true;
                break;
            case "c":
                containerSASPermissions.create = true;
                break;
            case "w":
                containerSASPermissions.write = true;
                break;
            case "d":
                containerSASPermissions.delete = true;
                break;
            case "l":
                containerSASPermissions.list = true;
                break;
            case "t":
                containerSASPermissions.tag = true;
                break;
            case "x":
                containerSASPermissions.deleteVersion = true;
                break;
            case "m":
                containerSASPermissions.move = true;
                break;
            case "e":
                containerSASPermissions.execute = true;
                break;
            case "i":
                containerSASPermissions.setImmutabilityPolicy = true;
                break;
            case "y":
                containerSASPermissions.permanentDelete = true;
                break;
            case "f":
                containerSASPermissions.filterByTags = true;
                break;
            default:
                throw new RangeError(`Invalid permission ${char}`);
        }
        return containerSASPermissions;
    }
    /**
     * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it
     * and boolean values for them.
     *
     * @param permissionLike -
     */ static from(permissionLike) {
        const containerSASPermissions = new ContainerSASPermissions();
        if (permissionLike.read) containerSASPermissions.read = true;
        if (permissionLike.add) containerSASPermissions.add = true;
        if (permissionLike.create) containerSASPermissions.create = true;
        if (permissionLike.write) containerSASPermissions.write = true;
        if (permissionLike.delete) containerSASPermissions.delete = true;
        if (permissionLike.list) containerSASPermissions.list = true;
        if (permissionLike.deleteVersion) containerSASPermissions.deleteVersion = true;
        if (permissionLike.tag) containerSASPermissions.tag = true;
        if (permissionLike.move) containerSASPermissions.move = true;
        if (permissionLike.execute) containerSASPermissions.execute = true;
        if (permissionLike.setImmutabilityPolicy) containerSASPermissions.setImmutabilityPolicy = true;
        if (permissionLike.permanentDelete) containerSASPermissions.permanentDelete = true;
        if (permissionLike.filterByTags) containerSASPermissions.filterByTags = true;
        return containerSASPermissions;
    }
    /**
     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
     * order accepted by the service.
     *
     * The order of the characters should be as specified here to ensure correctness.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
     *
     */ toString() {
        const permissions = [];
        if (this.read) permissions.push("r");
        if (this.add) permissions.push("a");
        if (this.create) permissions.push("c");
        if (this.write) permissions.push("w");
        if (this.delete) permissions.push("d");
        if (this.deleteVersion) permissions.push("x");
        if (this.list) permissions.push("l");
        if (this.tag) permissions.push("t");
        if (this.move) permissions.push("m");
        if (this.execute) permissions.push("e");
        if (this.setImmutabilityPolicy) permissions.push("i");
        if (this.permanentDelete) permissions.push("y");
        if (this.filterByTags) permissions.push("f");
        return permissions.join("");
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h8KFP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
parcelHelpers.export(exports, "UserDelegationKeyCredential", ()=>UserDelegationKeyCredential
);
class UserDelegationKeyCredential {
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aH3sX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Generate SasIPRange format string. For example:
 *
 * "8.8.8.8" or "1.1.1.1-255.255.255.255"
 *
 * @param ipRange -
 */ parcelHelpers.export(exports, "ipRangeToString", ()=>ipRangeToString
);
function ipRangeToString(ipRange) {
    return ipRange.end ? `${ipRange.start}-${ipRange.end}` : ipRange.start;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gMQnk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SASProtocol", ()=>SASProtocol
);
/**
 * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly
 * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link BlobSASSignatureValues}
 * types. Once generated, it can be encoded into a {@link String} and appended to a URL directly (though caution should
 * be taken here in case there are existing query parameters, which might affect the appropriate means of appending
 * these query parameters).
 *
 * NOTE: Instances of this class are immutable.
 */ parcelHelpers.export(exports, "SASQueryParameters", ()=>SASQueryParameters
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _sasIPRange = require("./SasIPRange");
var _utilsCommon = require("../utils/utils.common");
var SASProtocol;
(function(SASProtocol1) {
    /**
     * Protocol that allows HTTPS only
     */ SASProtocol1["Https"] = "https";
    /**
     * Protocol that allows both HTTPS and HTTP
     */ SASProtocol1["HttpsAndHttp"] = "https,http";
})(SASProtocol || (SASProtocol = {
}));
class SASQueryParameters {
    constructor(version, signature, permissionsOrOptions, services, resourceTypes, protocol, startsOn, expiresOn, ipRange, identifier, resource, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, userDelegationKey, preauthorizedAgentObjectId, correlationId, encryptionScope){
        this.version = version;
        this.signature = signature;
        if (permissionsOrOptions !== undefined && typeof permissionsOrOptions !== "string") {
            // SASQueryParametersOptions
            this.permissions = permissionsOrOptions.permissions;
            this.services = permissionsOrOptions.services;
            this.resourceTypes = permissionsOrOptions.resourceTypes;
            this.protocol = permissionsOrOptions.protocol;
            this.startsOn = permissionsOrOptions.startsOn;
            this.expiresOn = permissionsOrOptions.expiresOn;
            this.ipRangeInner = permissionsOrOptions.ipRange;
            this.identifier = permissionsOrOptions.identifier;
            this.encryptionScope = permissionsOrOptions.encryptionScope;
            this.resource = permissionsOrOptions.resource;
            this.cacheControl = permissionsOrOptions.cacheControl;
            this.contentDisposition = permissionsOrOptions.contentDisposition;
            this.contentEncoding = permissionsOrOptions.contentEncoding;
            this.contentLanguage = permissionsOrOptions.contentLanguage;
            this.contentType = permissionsOrOptions.contentType;
            if (permissionsOrOptions.userDelegationKey) {
                this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;
                this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;
                this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;
                this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;
                this.signedService = permissionsOrOptions.userDelegationKey.signedService;
                this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;
                this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;
                this.correlationId = permissionsOrOptions.correlationId;
            }
        } else {
            this.services = services;
            this.resourceTypes = resourceTypes;
            this.expiresOn = expiresOn;
            this.permissions = permissionsOrOptions;
            this.protocol = protocol;
            this.startsOn = startsOn;
            this.ipRangeInner = ipRange;
            this.encryptionScope = encryptionScope;
            this.identifier = identifier;
            this.resource = resource;
            this.cacheControl = cacheControl;
            this.contentDisposition = contentDisposition;
            this.contentEncoding = contentEncoding;
            this.contentLanguage = contentLanguage;
            this.contentType = contentType;
            if (userDelegationKey) {
                this.signedOid = userDelegationKey.signedObjectId;
                this.signedTenantId = userDelegationKey.signedTenantId;
                this.signedStartsOn = userDelegationKey.signedStartsOn;
                this.signedExpiresOn = userDelegationKey.signedExpiresOn;
                this.signedService = userDelegationKey.signedService;
                this.signedVersion = userDelegationKey.signedVersion;
                this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;
                this.correlationId = correlationId;
            }
        }
    }
    /**
     * Optional. IP range allowed for this SAS.
     *
     * @readonly
     */ get ipRange() {
        if (this.ipRangeInner) return {
            end: this.ipRangeInner.end,
            start: this.ipRangeInner.start
        };
        return undefined;
    }
    /**
     * Encodes all SAS query parameters into a string that can be appended to a URL.
     *
     */ toString() {
        const params = [
            "sv",
            "ss",
            "srt",
            "spr",
            "st",
            "se",
            "sip",
            "si",
            "ses",
            "skoid",
            "sktid",
            "skt",
            "ske",
            "sks",
            "skv",
            "sr",
            "sp",
            "sig",
            "rscc",
            "rscd",
            "rsce",
            "rscl",
            "rsct",
            "saoid",
            "scid", 
        ];
        const queries = [];
        for (const param of params)switch(param){
            case "sv":
                this.tryAppendQueryParameter(queries, param, this.version);
                break;
            case "ss":
                this.tryAppendQueryParameter(queries, param, this.services);
                break;
            case "srt":
                this.tryAppendQueryParameter(queries, param, this.resourceTypes);
                break;
            case "spr":
                this.tryAppendQueryParameter(queries, param, this.protocol);
                break;
            case "st":
                this.tryAppendQueryParameter(queries, param, this.startsOn ? _utilsCommon.truncatedISO8061Date(this.startsOn, false) : undefined);
                break;
            case "se":
                this.tryAppendQueryParameter(queries, param, this.expiresOn ? _utilsCommon.truncatedISO8061Date(this.expiresOn, false) : undefined);
                break;
            case "sip":
                this.tryAppendQueryParameter(queries, param, this.ipRange ? _sasIPRange.ipRangeToString(this.ipRange) : undefined);
                break;
            case "si":
                this.tryAppendQueryParameter(queries, param, this.identifier);
                break;
            case "ses":
                this.tryAppendQueryParameter(queries, param, this.encryptionScope);
                break;
            case "skoid":
                this.tryAppendQueryParameter(queries, param, this.signedOid);
                break;
            case "sktid":
                this.tryAppendQueryParameter(queries, param, this.signedTenantId);
                break;
            case "skt":
                this.tryAppendQueryParameter(queries, param, this.signedStartsOn ? _utilsCommon.truncatedISO8061Date(this.signedStartsOn, false) : undefined);
                break;
            case "ske":
                this.tryAppendQueryParameter(queries, param, this.signedExpiresOn ? _utilsCommon.truncatedISO8061Date(this.signedExpiresOn, false) : undefined);
                break;
            case "sks":
                this.tryAppendQueryParameter(queries, param, this.signedService);
                break;
            case "skv":
                this.tryAppendQueryParameter(queries, param, this.signedVersion);
                break;
            case "sr":
                this.tryAppendQueryParameter(queries, param, this.resource);
                break;
            case "sp":
                this.tryAppendQueryParameter(queries, param, this.permissions);
                break;
            case "sig":
                this.tryAppendQueryParameter(queries, param, this.signature);
                break;
            case "rscc":
                this.tryAppendQueryParameter(queries, param, this.cacheControl);
                break;
            case "rscd":
                this.tryAppendQueryParameter(queries, param, this.contentDisposition);
                break;
            case "rsce":
                this.tryAppendQueryParameter(queries, param, this.contentEncoding);
                break;
            case "rscl":
                this.tryAppendQueryParameter(queries, param, this.contentLanguage);
                break;
            case "rsct":
                this.tryAppendQueryParameter(queries, param, this.contentType);
                break;
            case "saoid":
                this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);
                break;
            case "scid":
                this.tryAppendQueryParameter(queries, param, this.correlationId);
                break;
        }
        return queries.join("&");
    }
    /**
     * A private helper method used to filter and append query key/value pairs into an array.
     *
     * @param queries -
     * @param key -
     * @param value -
     */ tryAppendQueryParameter(queries, key, value) {
        if (!value) return;
        key = encodeURIComponent(key);
        value = encodeURIComponent(value);
        if (key.length > 0 && value.length > 0) queries.push(`${key}=${value}`);
    }
}

},{"./SasIPRange":"aH3sX","../utils/utils.common":"2SR3M","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hZ8uc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.
 */ parcelHelpers.export(exports, "BlobLeaseClient", ()=>BlobLeaseClient
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreHttp = require("@azure/core-http");
var _index = require("./generated/src/index");
var _coreTracing = require("@azure/core-tracing");
var _operations = require("./generated/src/operations");
var _constants = require("./utils/constants");
var _tracing = require("./utils/tracing");
class BlobLeaseClient {
    /**
     * Creates an instance of BlobLeaseClient.
     * @param client - The client to make the lease operation requests.
     * @param leaseId - Initial proposed lease id.
     */ constructor(client, leaseId){
        const clientContext = new _index.StorageClientContext(client.url, client.pipeline.toServiceClientOptions());
        this._url = client.url;
        if (client.name === undefined) {
            this._isContainer = true;
            this._containerOrBlobOperation = new _operations.Container(clientContext);
        } else {
            this._isContainer = false;
            this._containerOrBlobOperation = new _operations.Blob(clientContext);
        }
        if (!leaseId) leaseId = _coreHttp.generateUuid();
        this._leaseId = leaseId;
    }
    /**
     * Gets the lease Id.
     *
     * @readonly
     */ get leaseId() {
        return this._leaseId;
    }
    /**
     * Gets the url.
     *
     * @readonly
     */ get url() {
        return this._url;
    }
    /**
     * Establishes and manages a lock on a container for delete operations, or on a blob
     * for write and delete operations.
     * The lock duration can be 15 to 60 seconds, or can be infinite.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param duration - Must be between 15 to 60 seconds, or infinite (-1)
     * @param options - option to configure lease management operations.
     * @returns Response data for acquire lease operation.
     */ async acquireLease(duration, options = {
    }) {
        var _a, _b, _c, _d, _e, _f;
        const { span , updatedOptions  } = _tracing.createSpan("BlobLeaseClient-acquireLease", options);
        if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
        try {
            return await this._containerOrBlobOperation.acquireLease(Object.assign({
                abortSignal: options.abortSignal,
                duration,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
                }),
                proposedLeaseId: this._leaseId
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * To change the ID of the lease.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param proposedLeaseId - the proposed new lease Id.
     * @param options - option to configure lease management operations.
     * @returns Response data for change lease operation.
     */ async changeLease(proposedLeaseId, options = {
    }) {
        var _a, _b, _c, _d, _e, _f;
        const { span , updatedOptions  } = _tracing.createSpan("BlobLeaseClient-changeLease", options);
        if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
        try {
            const response = await this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, Object.assign({
                abortSignal: options.abortSignal,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
            this._leaseId = proposedLeaseId;
            return response;
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * To free the lease if it is no longer needed so that another client may
     * immediately acquire a lease against the container or the blob.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param options - option to configure lease management operations.
     * @returns Response data for release lease operation.
     */ async releaseLease(options = {
    }) {
        var _a, _b, _c, _d, _e, _f;
        const { span , updatedOptions  } = _tracing.createSpan("BlobLeaseClient-releaseLease", options);
        if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
        try {
            return await this._containerOrBlobOperation.releaseLease(this._leaseId, Object.assign({
                abortSignal: options.abortSignal,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * To renew the lease.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param options - Optional option to configure lease management operations.
     * @returns Response data for renew lease operation.
     */ async renewLease(options = {
    }) {
        var _a, _b, _c, _d, _e, _f;
        const { span , updatedOptions  } = _tracing.createSpan("BlobLeaseClient-renewLease", options);
        if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
        try {
            return await this._containerOrBlobOperation.renewLease(this._leaseId, Object.assign({
                abortSignal: options.abortSignal,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * To end the lease but ensure that another client cannot acquire a new lease
     * until the current lease period has expired.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param breakPeriod - Break period
     * @param options - Optional options to configure lease management operations.
     * @returns Response data for break lease operation.
     */ async breakLease(breakPeriod, options = {
    }) {
        var _a, _b, _c, _d, _e, _f;
        const { span , updatedOptions  } = _tracing.createSpan("BlobLeaseClient-breakLease", options);
        if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
        try {
            const operationOptions = Object.assign({
                abortSignal: options.abortSignal,
                breakPeriod,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions));
            return await this._containerOrBlobOperation.breakLease(operationOptions);
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
}

},{"@azure/core-http":"iSINq","./generated/src/index":"gfC4L","@azure/core-tracing":"7R1NC","./generated/src/operations":"j9faG","./utils/constants":"4gX5x","./utils/tracing":"m0KjB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gfC4L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StorageClient", ()=>_storageClient.StorageClient
);
parcelHelpers.export(exports, "StorageClientContext", ()=>_storageClientContext.StorageClientContext
);
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */ var _models = require("./models");
parcelHelpers.exportAll(_models, exports);
var _storageClient = require("./storageClient");
var _storageClientContext = require("./storageClientContext");

},{"./models":"kQpNC","./storageClient":false,"./storageClientContext":"a1Au7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kQpNC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kUV1b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,
 * append blob, or page blob.
 */ parcelHelpers.export(exports, "BlobClient", ()=>BlobClient
);
/**
 * AppendBlobClient defines a set of operations applicable to append blobs.
 */ parcelHelpers.export(exports, "AppendBlobClient", ()=>AppendBlobClient
);
/**
 * BlockBlobClient defines a set of operations applicable to block blobs.
 */ parcelHelpers.export(exports, "BlockBlobClient", ()=>BlockBlobClient
);
/**
 * PageBlobClient defines a set of operations applicable to page blobs.
 */ parcelHelpers.export(exports, "PageBlobClient", ()=>PageBlobClient
);
var _coreHttp = require("@azure/core-http");
var _coreTracing = require("@azure/core-tracing");
var _blobDownloadResponse = require("./BlobDownloadResponse");
var _blobQueryResponse = require("./BlobQueryResponse");
var _anonymousCredential = require("./credentials/AnonymousCredential");
var _storageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");
var _operations = require("./generated/src/operations");
var _models = require("./models");
var _pageBlobRangeResponse = require("./PageBlobRangeResponse");
var _pipeline = require("./Pipeline");
var _blobStartCopyFromUrlPoller = require("./pollers/BlobStartCopyFromUrlPoller");
var _range = require("./Range");
var _storageClient = require("./StorageClient");
var _batch = require("./utils/Batch");
var _src = require("../../storage-common/src");
var _constants = require("./utils/constants");
var _tracing = require("./utils/tracing");
var _utilsCommon = require("./utils/utils.common");
var _utilsNode = require("./utils/utils.node");
var _blobSASSignatureValues = require("./sas/BlobSASSignatureValues");
var _blobLeaseClient = require("./BlobLeaseClient");
var Buffer = require("buffer").Buffer;
class BlobClient extends _storageClient.StorageClient {
    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.
    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/ options){
        options = options || {
        };
        let pipeline;
        let url;
        if (_pipeline.isPipelineLike(credentialOrPipelineOrContainerName)) {
            // (url: string, pipeline: Pipeline)
            url = urlOrConnectionString;
            pipeline = credentialOrPipelineOrContainerName;
        } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _storageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _anonymousCredential.AnonymousCredential || _coreHttp.isTokenCredential(credentialOrPipelineOrContainerName)) {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            url = urlOrConnectionString;
            options = blobNameOrOptions;
            pipeline = _pipeline.newPipeline(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            // The second parameter is undefined. Use anonymous credential.
            url = urlOrConnectionString;
            pipeline = _pipeline.newPipeline(new _anonymousCredential.AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
            const containerName = credentialOrPipelineOrContainerName;
            const blobName = blobNameOrOptions;
            const extractedCreds = _utilsCommon.extractConnectionStringParts(urlOrConnectionString);
            if (extractedCreds.kind === "AccountConnString") {
                if (_coreHttp.isNode) {
                    const sharedKeyCredential = new _storageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
                    url = _utilsCommon.appendToURLPath(_utilsCommon.appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
                    if (!options.proxyOptions) options.proxyOptions = _coreHttp.getDefaultProxySettings(extractedCreds.proxyUri);
                    pipeline = _pipeline.newPipeline(sharedKeyCredential, options);
                } else throw new Error("Account connection string is only supported in Node.js environment");
            } else if (extractedCreds.kind === "SASConnString") {
                url = _utilsCommon.appendToURLPath(_utilsCommon.appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
                pipeline = _pipeline.newPipeline(new _anonymousCredential.AnonymousCredential(), options);
            } else throw new Error("Connection string must be either an Account connection string or a SAS connection string");
        } else throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        super(url, pipeline);
        ({ blobName: this._name , containerName: this._containerName  } = this.getBlobAndContainerNamesFromUrl());
        this.blobContext = new _operations.Blob(this.storageClientContext);
        this._snapshot = _utilsCommon.getURLParameter(this.url, _constants.URLConstants.Parameters.SNAPSHOT);
        this._versionId = _utilsCommon.getURLParameter(this.url, _constants.URLConstants.Parameters.VERSIONID);
    }
    /**
     * The name of the blob.
     */ get name() {
        return this._name;
    }
    /**
     * The name of the storage container the blob is associated with.
     */ get containerName() {
        return this._containerName;
    }
    /**
     * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.
     * Provide "" will remove the snapshot and return a Client to the base blob.
     *
     * @param snapshot - The snapshot timestamp.
     * @returns A new BlobClient object identical to the source but with the specified snapshot timestamp
     */ withSnapshot(snapshot) {
        return new BlobClient(_utilsCommon.setURLParameter(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
    }
    /**
     * Creates a new BlobClient object pointing to a version of this blob.
     * Provide "" will remove the versionId and return a Client to the base blob.
     *
     * @param versionId - The versionId.
     * @returns A new BlobClient object pointing to the version of this blob.
     */ withVersion(versionId) {
        return new BlobClient(_utilsCommon.setURLParameter(this.url, _constants.URLConstants.Parameters.VERSIONID, versionId.length === 0 ? undefined : versionId), this.pipeline);
    }
    /**
     * Creates a AppendBlobClient object.
     *
     */ getAppendBlobClient() {
        return new AppendBlobClient(this.url, this.pipeline);
    }
    /**
     * Creates a BlockBlobClient object.
     *
     */ getBlockBlobClient() {
        return new BlockBlobClient(this.url, this.pipeline);
    }
    /**
     * Creates a PageBlobClient object.
     *
     */ getPageBlobClient() {
        return new PageBlobClient(this.url, this.pipeline);
    }
    /**
     * Reads or downloads a blob from the system, including its metadata and properties.
     * You can also call Get Blob to read a snapshot.
     *
     * * In Node.js, data returns in a Readable stream readableStreamBody
     * * In browsers, data returns in a promise blobBody
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob
     *
     * @param offset - From which position of the blob to download, greater than or equal to 0
     * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined
     * @param options - Optional options to Blob Download operation.
     *
     *
     * Example usage (Node.js):
     *
     * ```js
     * // Download and convert a blob to a string
     * const downloadBlockBlobResponse = await blobClient.download();
     * const downloaded = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);
     * console.log("Downloaded blob content:", downloaded.toString());
     *
     * async function streamToBuffer(readableStream) {
     * return new Promise((resolve, reject) => {
     * const chunks = [];
     * readableStream.on("data", (data) => {
     * chunks.push(data instanceof Buffer ? data : Buffer.from(data));
     * });
     * readableStream.on("end", () => {
     * resolve(Buffer.concat(chunks));
     * });
     * readableStream.on("error", reject);
     * });
     * }
     * ```
     *
     * Example usage (browser):
     *
     * ```js
     * // Download and convert a blob to a string
     * const downloadBlockBlobResponse = await blobClient.download();
     * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);
     * console.log(
     *   "Downloaded blob content",
     *   downloaded
     * );
     *
     * async function blobToString(blob: Blob): Promise<string> {
     *   const fileReader = new FileReader();
     *   return new Promise<string>((resolve, reject) => {
     *     fileReader.onloadend = (ev: any) => {
     *       resolve(ev.target!.result);
     *     };
     *     fileReader.onerror = reject;
     *     fileReader.readAsText(blob);
     *   });
     * }
     * ```
     */ async download(offset = 0, count, options = {
    }) {
        var _a1;
        options.conditions = options.conditions || {
        };
        options.conditions = options.conditions || {
        };
        _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-download", options);
        try {
            const res = await this.blobContext.download(Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a1 = options.conditions) === null || _a1 === void 0 ? void 0 : _a1.tagConditions
                }),
                requestOptions: {
                    onDownloadProgress: _coreHttp.isNode ? undefined : options.onProgress
                },
                range: offset === 0 && !count ? undefined : _range.rangeToString({
                    offset,
                    count
                }),
                rangeGetContentMD5: options.rangeGetContentMD5,
                rangeGetContentCRC64: options.rangeGetContentCrc64,
                snapshot: options.snapshot,
                cpkInfo: options.customerProvidedKey
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
            const wrappedRes = Object.assign(Object.assign({
            }, res), {
                _response: res._response,
                objectReplicationDestinationPolicyId: res.objectReplicationPolicyId,
                objectReplicationSourceProperties: _utilsCommon.parseObjectReplicationRecord(res.objectReplicationRules)
            });
            // Return browser response immediately
            if (!_coreHttp.isNode) return wrappedRes;
            // We support retrying when download stream unexpected ends in Node.js runtime
            // Following code shouldn't be bundled into browser build, however some
            // bundlers may try to bundle following code and "FileReadResponse.ts".
            // In this case, "FileDownloadResponse.browser.ts" will be used as a shim of "FileDownloadResponse.ts"
            // The config is in package.json "browser" field
            if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) // TODO: Default value or make it a required parameter?
            options.maxRetryRequests = _constants.DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;
            if (res.contentLength === undefined) throw new RangeError(`File download response doesn't contain valid content length header`);
            if (!res.etag) throw new RangeError(`File download response doesn't contain valid etag header`);
            return new _blobDownloadResponse.BlobDownloadResponse(wrappedRes, async (start)=>{
                var _a;
                const updatedDownloadOptions = {
                    leaseAccessConditions: options.conditions,
                    modifiedAccessConditions: {
                        ifMatch: options.conditions.ifMatch || res.etag,
                        ifModifiedSince: options.conditions.ifModifiedSince,
                        ifNoneMatch: options.conditions.ifNoneMatch,
                        ifUnmodifiedSince: options.conditions.ifUnmodifiedSince,
                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                    },
                    range: _range.rangeToString({
                        count: offset + res.contentLength - start,
                        offset: start
                    }),
                    rangeGetContentMD5: options.rangeGetContentMD5,
                    rangeGetContentCRC64: options.rangeGetContentCrc64,
                    snapshot: options.snapshot,
                    cpkInfo: options.customerProvidedKey
                };
                // Debug purpose only
                // console.log(
                //   `Read from internal stream, range: ${
                //     updatedOptions.range
                //   }, options: ${JSON.stringify(updatedOptions)}`
                // );
                return (await this.blobContext.download(Object.assign({
                    abortSignal: options.abortSignal
                }, updatedDownloadOptions))).readableStreamBody;
            }, offset, res.contentLength, {
                maxRetryRequests: options.maxRetryRequests,
                onProgress: options.onProgress
            });
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Returns true if the Azure blob resource represented by this client exists; false otherwise.
     *
     * NOTE: use this function with care since an existing blob might be deleted by other clients or
     * applications. Vice versa new blobs might be added by other clients or applications after this
     * function completes.
     *
     * @param options - options to Exists operation.
     */ async exists(options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-exists", options);
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            await this.getProperties({
                abortSignal: options.abortSignal,
                customerProvidedKey: options.customerProvidedKey,
                conditions: options.conditions,
                tracingOptions: updatedOptions.tracingOptions
            });
            return true;
        } catch (e) {
            if (e.statusCode === 404) // Expected exception when checking blob existence
            return false;
            else if (e.statusCode === 409 && e.details.errorCode === _constants.BlobUsesCustomerSpecifiedEncryptionMsg) // Expected exception when checking blob existence
            return true;
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Returns all user-defined metadata, standard HTTP properties, and system properties
     * for the blob. It does not return the content of the blob.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties
     *
     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
     * they originally contained uppercase characters. This differs from the metadata keys returned by
     * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which
     * will retain their original casing.
     *
     * @param options - Optional options to Get Properties operation.
     */ async getProperties(options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-getProperties", options);
        try {
            options.conditions = options.conditions || {
            };
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            const res = await this.blobContext.getProperties(Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                cpkInfo: options.customerProvidedKey
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
            return Object.assign(Object.assign({
            }, res), {
                _response: res._response,
                objectReplicationDestinationPolicyId: res.objectReplicationPolicyId,
                objectReplicationSourceProperties: _utilsCommon.parseObjectReplicationRecord(res.objectReplicationRules)
            });
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Marks the specified blob or snapshot for deletion. The blob is later deleted
     * during garbage collection. Note that in order to delete a blob, you must delete
     * all of its snapshots. You can delete both at the same time with the Delete
     * Blob operation.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
     *
     * @param options - Optional options to Blob Delete operation.
     */ async delete(options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-delete", options);
        options.conditions = options.conditions || {
        };
        try {
            return await this.blobContext.delete(Object.assign({
                abortSignal: options.abortSignal,
                deleteSnapshots: options.deleteSnapshots,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted
     * during garbage collection. Note that in order to delete a blob, you must delete
     * all of its snapshots. You can delete both at the same time with the Delete
     * Blob operation.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
     *
     * @param options - Optional options to Blob Delete operation.
     */ async deleteIfExists(options = {
    }) {
        var _a, _b;
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-deleteIfExists", options);
        try {
            const res = await this.delete(updatedOptions);
            return Object.assign(Object.assign({
                succeeded: true
            }, res), {
                _response: res._response
            });
        } catch (e) {
            if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobNotFound") {
                span.setStatus({
                    code: _coreTracing.SpanStatusCode.ERROR,
                    message: "Expected exception when deleting a blob or snapshot only if it exists."
                });
                return Object.assign(Object.assign({
                    succeeded: false
                }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                    _response: e.response
                });
            }
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Restores the contents and metadata of soft deleted blob and any associated
     * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29
     * or later.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob
     *
     * @param options - Optional options to Blob Undelete operation.
     */ async undelete(options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-undelete", options);
        try {
            return await this.blobContext.undelete(Object.assign({
                abortSignal: options.abortSignal
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Sets system properties on the blob.
     *
     * If no value provided, or no value provided for the specified blob HTTP headers,
     * these blob HTTP headers without a value will be cleared.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
     *
     * @param blobHTTPHeaders - If no value provided, or no value provided for
     *                                                   the specified blob HTTP headers, these blob HTTP
     *                                                   headers without a value will be cleared.
     *                                                   A common header to set is `blobContentType`
     *                                                   enabling the browser to provide functionality
     *                                                   based on file type.
     * @param options - Optional options to Blob Set HTTP Headers operation.
     */ async setHTTPHeaders(blobHTTPHeaders, options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-setHTTPHeaders", options);
        options.conditions = options.conditions || {
        };
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            return await this.blobContext.setHttpHeaders(Object.assign({
                abortSignal: options.abortSignal,
                blobHttpHeaders: blobHTTPHeaders,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Sets user-defined metadata for the specified blob as one or more name-value pairs.
     *
     * If no option provided, or no metadata defined in the parameter, the blob
     * metadata will be removed.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata
     *
     * @param metadata - Replace existing metadata with this value.
     *                               If no value provided the existing metadata will be removed.
     * @param options - Optional options to Set Metadata operation.
     */ async setMetadata(metadata, options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-setMetadata", options);
        options.conditions = options.conditions || {
        };
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            return await this.blobContext.setMetadata(Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                metadata,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                cpkInfo: options.customerProvidedKey,
                encryptionScope: options.encryptionScope
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Sets tags on the underlying blob.
     * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.
     * Valid tag key and value characters include lower and upper case letters, digits (0-9),
     * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').
     *
     * @param tags -
     * @param options -
     */ async setTags(tags, options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-setTags", options);
        try {
            return await this.blobContext.setTags(Object.assign(Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)), {
                tags: _utilsCommon.toBlobTags(tags)
            }));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Gets the tags associated with the underlying blob.
     *
     * @param options -
     */ async getTags(options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-getTags", options);
        try {
            const response = await this.blobContext.getTags(Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
            const wrappedResponse = Object.assign(Object.assign({
            }, response), {
                _response: response._response,
                tags: _utilsCommon.toTags({
                    blobTagSet: response.blobTagSet
                }) || {
                }
            });
            return wrappedResponse;
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Get a {@link BlobLeaseClient} that manages leases on the blob.
     *
     * @param proposeLeaseId - Initial proposed lease Id.
     * @returns A new BlobLeaseClient object for managing leases on the blob.
     */ getBlobLeaseClient(proposeLeaseId) {
        return new _blobLeaseClient.BlobLeaseClient(this, proposeLeaseId);
    }
    /**
     * Creates a read-only snapshot of a blob.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob
     *
     * @param options - Optional options to the Blob Create Snapshot operation.
     */ async createSnapshot(options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-createSnapshot", options);
        options.conditions = options.conditions || {
        };
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            return await this.blobContext.createSnapshot(Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                metadata: options.metadata,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                cpkInfo: options.customerProvidedKey,
                encryptionScope: options.encryptionScope
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Asynchronously copies a blob to a destination within the storage account.
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the copy is completed.
     * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * In version 2012-02-12 and later, the source for a Copy Blob operation can be
     * a committed blob in any Azure storage account.
     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
     * an Azure file in any Azure storage account.
     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
     * operation to copy from another storage account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
     *
     * Example using automatic polling:
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url');
     * const result = await copyPoller.pollUntilDone();
     * ```
     *
     * Example using manual polling:
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url');
     * while (!poller.isDone()) {
     *    await poller.poll();
     * }
     * const result = copyPoller.getResult();
     * ```
     *
     * Example using progress updates:
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url', {
     *   onProgress(state) {
     *     console.log(`Progress: ${state.copyProgress}`);
     *   }
     * });
     * const result = await copyPoller.pollUntilDone();
     * ```
     *
     * Example using a changing polling interval (default 15 seconds):
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url', {
     *   intervalInMs: 1000 // poll blob every 1 second for copy progress
     * });
     * const result = await copyPoller.pollUntilDone();
     * ```
     *
     * Example using copy cancellation:
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url');
     * // cancel operation after starting it.
     * try {
     *   await copyPoller.cancelOperation();
     *   // calls to get the result now throw PollerCancelledError
     *   await copyPoller.getResult();
     * } catch (err) {
     *   if (err.name === 'PollerCancelledError') {
     *     console.log('The copy was cancelled.');
     *   }
     * }
     * ```
     *
     * @param copySource - url to the source Azure Blob/File.
     * @param options - Optional options to the Blob Start Copy From URL operation.
     */ async beginCopyFromURL(copySource, options = {
    }) {
        const client = {
            abortCopyFromURL: (...args)=>this.abortCopyFromURL(...args)
            ,
            getProperties: (...args)=>this.getProperties(...args)
            ,
            startCopyFromURL: (...args)=>this.startCopyFromURL(...args)
        };
        const poller = new _blobStartCopyFromUrlPoller.BlobBeginCopyFromUrlPoller({
            blobClient: client,
            copySource,
            intervalInMs: options.intervalInMs,
            onProgress: options.onProgress,
            resumeFrom: options.resumeFrom,
            startCopyFromURLOptions: options
        });
        // Trigger the startCopyFromURL call by calling poll.
        // Any errors from this method should be surfaced to the user.
        await poller.poll();
        return poller;
    }
    /**
     * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero
     * length and full metadata. Version 2012-02-12 and newer.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob
     *
     * @param copyId - Id of the Copy From URL operation.
     * @param options - Optional options to the Blob Abort Copy From URL operation.
     */ async abortCopyFromURL(copyId, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-abortCopyFromURL", options);
        try {
            return await this.blobContext.abortCopyFromURL(copyId, Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not
     * return a response until the copy is complete.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url
     *
     * @param copySource - The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication
     * @param options -
     */ async syncCopyFromURL(copySource, options = {
    }) {
        var _a, _b, _c;
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-syncCopyFromURL", options);
        options.conditions = options.conditions || {
        };
        options.sourceConditions = options.sourceConditions || {
        };
        try {
            return await this.blobContext.copyFromURL(copySource, Object.assign({
                abortSignal: options.abortSignal,
                metadata: options.metadata,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                sourceModifiedAccessConditions: {
                    sourceIfMatch: options.sourceConditions.ifMatch,
                    sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                    sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                    sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
                },
                sourceContentMD5: options.sourceContentMD5,
                copySourceAuthorization: _utilsCommon.httpAuthorizationToString(options.sourceAuthorization),
                blobTagsString: _utilsCommon.toBlobTagsString(options.tags),
                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                legalHold: options.legalHold,
                encryptionScope: options.encryptionScope
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Sets the tier on a blob. The operation is allowed on a page blob in a premium
     * storage account and on a block blob in a blob storage account (locally redundant
     * storage only). A premium page blob's tier determines the allowed size, IOPS,
     * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive
     * storage type. This operation does not update the blob's ETag.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier
     *
     * @param tier - The tier to be set on the blob. Valid values are Hot, Cool, or Archive.
     * @param options - Optional options to the Blob Set Tier operation.
     */ async setAccessTier(tier, options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-setAccessTier", options);
        try {
            return await this.blobContext.setTier(_models.toAccessTier(tier), Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                rehydratePriority: options.rehydratePriority
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    async downloadToBuffer(param1, param2, param3, param4 = {
    }) {
        let buffer;
        let offset = 0;
        let count = 0;
        let options = param4;
        if (param1 instanceof Buffer) {
            buffer = param1;
            offset = param2 || 0;
            count = typeof param3 === "number" ? param3 : 0;
        } else {
            offset = typeof param1 === "number" ? param1 : 0;
            count = typeof param2 === "number" ? param2 : 0;
            options = param3 || {
            };
        }
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-downloadToBuffer", options);
        try {
            if (!options.blockSize) options.blockSize = 0;
            if (options.blockSize < 0) throw new RangeError("blockSize option must be >= 0");
            if (options.blockSize === 0) options.blockSize = _constants.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
            if (offset < 0) throw new RangeError("offset option must be >= 0");
            if (count && count <= 0) throw new RangeError("count option must be greater than 0");
            if (!options.conditions) options.conditions = {
            };
            // Customer doesn't specify length, get it
            if (!count) {
                const response = await this.getProperties(Object.assign(Object.assign({
                }, options), {
                    tracingOptions: Object.assign(Object.assign({
                    }, options.tracingOptions), _tracing.convertTracingToRequestOptionsBase(updatedOptions))
                }));
                count = response.contentLength - offset;
                if (count < 0) throw new RangeError(`offset ${offset} shouldn't be larger than blob size ${response.contentLength}`);
            }
            // Allocate the buffer of size = count if the buffer is not provided
            if (!buffer) try {
                buffer = Buffer.alloc(count);
            } catch (error) {
                throw new Error(`Unable to allocate the buffer of size: ${count}(in bytes). Please try passing your own buffer to the "downloadToBuffer" method or try using other methods like "download" or "downloadToFile".\t ${error.message}`);
            }
            if (buffer.length < count) throw new RangeError(`The buffer's size should be equal to or larger than the request count of bytes: ${count}`);
            let transferProgress = 0;
            const batch = new _batch.Batch(options.concurrency);
            for(let off = offset; off < offset + count; off = off + options.blockSize)batch.addOperation(async ()=>{
                // Exclusive chunk end position
                let chunkEnd = offset + count;
                if (off + options.blockSize < chunkEnd) chunkEnd = off + options.blockSize;
                const response = await this.download(off, chunkEnd - off, {
                    abortSignal: options.abortSignal,
                    conditions: options.conditions,
                    maxRetryRequests: options.maxRetryRequestsPerBlock,
                    customerProvidedKey: options.customerProvidedKey,
                    tracingOptions: Object.assign(Object.assign({
                    }, options.tracingOptions), _tracing.convertTracingToRequestOptionsBase(updatedOptions))
                });
                const stream = response.readableStreamBody;
                await _utilsNode.streamToBuffer(stream, buffer, off - offset, chunkEnd - offset);
                // Update progress after block is downloaded, in case of block trying
                // Could provide finer grained progress updating inside HTTP requests,
                // only if convenience layer download try is enabled
                transferProgress += chunkEnd - off;
                if (options.onProgress) options.onProgress({
                    loadedBytes: transferProgress
                });
            });
            await batch.do();
            return buffer;
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Downloads an Azure Blob to a local file.
     * Fails if the the given file path already exits.
     * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.
     *
     * @param filePath -
     * @param offset - From which position of the block blob to download.
     * @param count - How much data to be downloaded. Will download to the end when passing undefined.
     * @param options - Options to Blob download options.
     * @returns The response data for blob download operation,
     *                                                 but with readableStreamBody set to undefined since its
     *                                                 content is already read and written into a local file
     *                                                 at the specified path.
     */ async downloadToFile(filePath, offset = 0, count, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-downloadToFile", options);
        try {
            const response = await this.download(offset, count, Object.assign(Object.assign({
            }, options), {
                tracingOptions: Object.assign(Object.assign({
                }, options.tracingOptions), _tracing.convertTracingToRequestOptionsBase(updatedOptions))
            }));
            if (response.readableStreamBody) await _utilsNode.readStreamToLocalFile(response.readableStreamBody, filePath);
            // The stream is no longer accessible so setting it to undefined.
            response.blobDownloadStream = undefined;
            return response;
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    getBlobAndContainerNamesFromUrl() {
        let containerName;
        let blobName;
        try {
            //  URL may look like the following
            // "https://myaccount.blob.core.windows.net/mycontainer/blob?sasString";
            // "https://myaccount.blob.core.windows.net/mycontainer/blob";
            // "https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt?sasString";
            // "https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt";
            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername/blob`
            // http://localhost:10001/devstoreaccount1/containername/blob
            const parsedUrl = _coreHttp.URLBuilder.parse(this.url);
            if (parsedUrl.getHost().split(".")[1] === "blob") {
                // "https://myaccount.blob.core.windows.net/containername/blob".
                // .getPath() -> /containername/blob
                const pathComponents = parsedUrl.getPath().match("/([^/]*)(/(.*))?");
                containerName = pathComponents[1];
                blobName = pathComponents[3];
            } else if (_utilsCommon.isIpEndpointStyle(parsedUrl)) {
                // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername/blob
                // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername/blob
                // .getPath() -> /devstoreaccount1/containername/blob
                const pathComponents = parsedUrl.getPath().match("/([^/]*)/([^/]*)(/(.*))?");
                containerName = pathComponents[2];
                blobName = pathComponents[4];
            } else {
                // "https://customdomain.com/containername/blob".
                // .getPath() -> /containername/blob
                const pathComponents = parsedUrl.getPath().match("/([^/]*)(/(.*))?");
                containerName = pathComponents[1];
                blobName = pathComponents[3];
            }
            // decode the encoded blobName, containerName - to get all the special characters that might be present in them
            containerName = decodeURIComponent(containerName);
            blobName = decodeURIComponent(blobName);
            // Azure Storage Server will replace "\" with "/" in the blob names
            //   doing the same in the SDK side so that the user doesn't have to replace "\" instances in the blobName
            blobName = blobName.replace(/\\/g, "/");
            if (!containerName) throw new Error("Provided containerName is invalid.");
            return {
                blobName,
                containerName
            };
        } catch (error) {
            throw new Error("Unable to extract blobName and containerName with provided information.");
        }
    }
    /**
     * Asynchronously copies a blob to a destination within the storage account.
     * In version 2012-02-12 and later, the source for a Copy Blob operation can be
     * a committed blob in any Azure storage account.
     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
     * an Azure file in any Azure storage account.
     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
     * operation to copy from another storage account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
     *
     * @param copySource - url to the source Azure Blob/File.
     * @param options - Optional options to the Blob Start Copy From URL operation.
     */ async startCopyFromURL(copySource, options = {
    }) {
        var _a, _b, _c;
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-startCopyFromURL", options);
        options.conditions = options.conditions || {
        };
        options.sourceConditions = options.sourceConditions || {
        };
        try {
            return await this.blobContext.startCopyFromURL(copySource, Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                metadata: options.metadata,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                sourceModifiedAccessConditions: {
                    sourceIfMatch: options.sourceConditions.ifMatch,
                    sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                    sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                    sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,
                    sourceIfTags: options.sourceConditions.tagConditions
                },
                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                legalHold: options.legalHold,
                rehydratePriority: options.rehydratePriority,
                tier: _models.toAccessTier(options.tier),
                blobTagsString: _utilsCommon.toBlobTagsString(options.tags),
                sealBlob: options.sealBlob
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Only available for BlobClient constructed with a shared key credential.
     *
     * Generates a Blob Service Shared Access Signature (SAS) URI based on the client properties
     * and parameters passed in. The SAS is signed by the shared key credential of the client.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
     *
     * @param options - Optional parameters.
     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
     */ generateSasUrl(options) {
        return new Promise((resolve)=>{
            if (!(this.credential instanceof _storageSharedKeyCredential.StorageSharedKeyCredential)) throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
            const sas = _blobSASSignatureValues.generateBlobSASQueryParameters(Object.assign({
                containerName: this._containerName,
                blobName: this._name,
                snapshotTime: this._snapshot,
                versionId: this._versionId
            }, options), this.credential).toString();
            resolve(_utilsCommon.appendToURLQuery(this.url, sas));
        });
    }
    /**
     * Delete the immutablility policy on the blob.
     *
     * @param options - Optional options to delete immutability policy on the blob.
     */ async deleteImmutabilityPolicy(options) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-deleteImmutabilityPolicy", options);
        try {
            return await this.blobContext.deleteImmutabilityPolicy(Object.assign({
                abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Set immutablility policy on the blob.
     *
     * @param options - Optional options to set immutability policy on the blob.
     */ async setImmutabilityPolicy(immutabilityPolicy, options) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-setImmutabilityPolicy", options);
        try {
            return await this.blobContext.setImmutabilityPolicy(Object.assign({
                abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,
                immutabilityPolicyExpiry: immutabilityPolicy.expiriesOn,
                immutabilityPolicyMode: immutabilityPolicy.policyMode,
                modifiedAccessConditions: options === null || options === void 0 ? void 0 : options.modifiedAccessCondition
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Set legal hold on the blob.
     *
     * @param options - Optional options to set legal hold on the blob.
     */ async setLegalHold(legalHoldEnabled, options) {
        const { span , updatedOptions  } = _tracing.createSpan("BlobClient-setLegalHold", options);
        try {
            return await this.blobContext.setLegalHold(legalHoldEnabled, Object.assign({
                abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
}
class AppendBlobClient extends BlobClient {
    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.
    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/ options){
        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);
        let pipeline;
        let url;
        options = options || {
        };
        if (_pipeline.isPipelineLike(credentialOrPipelineOrContainerName)) {
            // (url: string, pipeline: Pipeline)
            url = urlOrConnectionString;
            pipeline = credentialOrPipelineOrContainerName;
        } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _storageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _anonymousCredential.AnonymousCredential || _coreHttp.isTokenCredential(credentialOrPipelineOrContainerName)) {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)      url = urlOrConnectionString;
            url = urlOrConnectionString;
            options = blobNameOrOptions;
            pipeline = _pipeline.newPipeline(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            url = urlOrConnectionString;
            // The second parameter is undefined. Use anonymous credential.
            pipeline = _pipeline.newPipeline(new _anonymousCredential.AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
            const containerName = credentialOrPipelineOrContainerName;
            const blobName = blobNameOrOptions;
            const extractedCreds = _utilsCommon.extractConnectionStringParts(urlOrConnectionString);
            if (extractedCreds.kind === "AccountConnString") {
                if (_coreHttp.isNode) {
                    const sharedKeyCredential = new _storageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
                    url = _utilsCommon.appendToURLPath(_utilsCommon.appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
                    if (!options.proxyOptions) options.proxyOptions = _coreHttp.getDefaultProxySettings(extractedCreds.proxyUri);
                    pipeline = _pipeline.newPipeline(sharedKeyCredential, options);
                } else throw new Error("Account connection string is only supported in Node.js environment");
            } else if (extractedCreds.kind === "SASConnString") {
                url = _utilsCommon.appendToURLPath(_utilsCommon.appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
                pipeline = _pipeline.newPipeline(new _anonymousCredential.AnonymousCredential(), options);
            } else throw new Error("Connection string must be either an Account connection string or a SAS connection string");
        } else throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        super(url, pipeline);
        this.appendBlobContext = new _operations.AppendBlob(this.storageClientContext);
    }
    /**
     * Creates a new AppendBlobClient object identical to the source but with the
     * specified snapshot timestamp.
     * Provide "" will remove the snapshot and return a Client to the base blob.
     *
     * @param snapshot - The snapshot timestamp.
     * @returns A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.
     */ withSnapshot(snapshot) {
        return new AppendBlobClient(_utilsCommon.setURLParameter(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
    }
    /**
     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param options - Options to the Append Block Create operation.
     *
     *
     * Example usage:
     *
     * ```js
     * const appendBlobClient = containerClient.getAppendBlobClient("<blob name>");
     * await appendBlobClient.create();
     * ```
     */ async create(options = {
    }) {
        var _a, _b, _c;
        const { span , updatedOptions  } = _tracing.createSpan("AppendBlobClient-create", options);
        options.conditions = options.conditions || {
        };
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            return await this.appendBlobContext.create(0, Object.assign({
                abortSignal: options.abortSignal,
                blobHttpHeaders: options.blobHTTPHeaders,
                leaseAccessConditions: options.conditions,
                metadata: options.metadata,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                cpkInfo: options.customerProvidedKey,
                encryptionScope: options.encryptionScope,
                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                legalHold: options.legalHold,
                blobTagsString: _utilsCommon.toBlobTagsString(options.tags)
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
     * If the blob with the same name already exists, the content of the existing blob will remain unchanged.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param options -
     */ async createIfNotExists(options = {
    }) {
        var _a, _b;
        const { span , updatedOptions  } = _tracing.createSpan("AppendBlobClient-createIfNotExists", options);
        const conditions = {
            ifNoneMatch: _constants.ETagAny
        };
        try {
            const res = await this.create(Object.assign(Object.assign({
            }, updatedOptions), {
                conditions
            }));
            return Object.assign(Object.assign({
                succeeded: true
            }, res), {
                _response: res._response
            });
        } catch (e) {
            if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobAlreadyExists") {
                span.setStatus({
                    code: _coreTracing.SpanStatusCode.ERROR,
                    message: "Expected exception when creating a blob only if it does not already exist."
                });
                return Object.assign(Object.assign({
                    succeeded: false
                }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                    _response: e.response
                });
            }
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Seals the append blob, making it read only.
     *
     * @param options -
     */ async seal(options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("AppendBlobClient-seal", options);
        options.conditions = options.conditions || {
        };
        try {
            return await this.appendBlobContext.seal(Object.assign({
                abortSignal: options.abortSignal,
                appendPositionAccessConditions: options.conditions,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Commits a new block of data to the end of the existing append blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/append-block
     *
     * @param body - Data to be appended.
     * @param contentLength - Length of the body in bytes.
     * @param options - Options to the Append Block operation.
     *
     *
     * Example usage:
     *
     * ```js
     * const content = "Hello World!";
     *
     * // Create a new append blob and append data to the blob.
     * const newAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
     * await newAppendBlobClient.create();
     * await newAppendBlobClient.appendBlock(content, content.length);
     *
     * // Append data to an existing append blob.
     * const existingAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
     * await existingAppendBlobClient.appendBlock(content, content.length);
     * ```
     */ async appendBlock(body, contentLength, options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("AppendBlobClient-appendBlock", options);
        options.conditions = options.conditions || {
        };
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            return await this.appendBlobContext.appendBlock(contentLength, body, Object.assign({
                abortSignal: options.abortSignal,
                appendPositionAccessConditions: options.conditions,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                requestOptions: {
                    onUploadProgress: options.onProgress
                },
                transactionalContentMD5: options.transactionalContentMD5,
                transactionalContentCrc64: options.transactionalContentCrc64,
                cpkInfo: options.customerProvidedKey,
                encryptionScope: options.encryptionScope
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * The Append Block operation commits a new block of data to the end of an existing append blob
     * where the contents are read from a source url.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url
     *
     * @param sourceURL -
     *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can
     *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
     *                 must either be public or must be authenticated via a shared access signature. If the source blob is
     *                 public, no authentication is required to perform the operation.
     * @param sourceOffset - Offset in source to be appended
     * @param count - Number of bytes to be appended as a block
     * @param options -
     */ async appendBlockFromURL(sourceURL, sourceOffset, count, options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("AppendBlobClient-appendBlockFromURL", options);
        options.conditions = options.conditions || {
        };
        options.sourceConditions = options.sourceConditions || {
        };
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            return await this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, Object.assign({
                abortSignal: options.abortSignal,
                sourceRange: _range.rangeToString({
                    offset: sourceOffset,
                    count
                }),
                sourceContentMD5: options.sourceContentMD5,
                sourceContentCrc64: options.sourceContentCrc64,
                leaseAccessConditions: options.conditions,
                appendPositionAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                sourceModifiedAccessConditions: {
                    sourceIfMatch: options.sourceConditions.ifMatch,
                    sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                    sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                    sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
                },
                copySourceAuthorization: _utilsCommon.httpAuthorizationToString(options.sourceAuthorization),
                cpkInfo: options.customerProvidedKey,
                encryptionScope: options.encryptionScope
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
}
class BlockBlobClient extends BlobClient {
    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.
    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/ options){
        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);
        let pipeline;
        let url;
        options = options || {
        };
        if (_pipeline.isPipelineLike(credentialOrPipelineOrContainerName)) {
            // (url: string, pipeline: Pipeline)
            url = urlOrConnectionString;
            pipeline = credentialOrPipelineOrContainerName;
        } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _storageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _anonymousCredential.AnonymousCredential || _coreHttp.isTokenCredential(credentialOrPipelineOrContainerName)) {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            url = urlOrConnectionString;
            options = blobNameOrOptions;
            pipeline = _pipeline.newPipeline(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            // The second parameter is undefined. Use anonymous credential.
            url = urlOrConnectionString;
            pipeline = _pipeline.newPipeline(new _anonymousCredential.AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
            const containerName = credentialOrPipelineOrContainerName;
            const blobName = blobNameOrOptions;
            const extractedCreds = _utilsCommon.extractConnectionStringParts(urlOrConnectionString);
            if (extractedCreds.kind === "AccountConnString") {
                if (_coreHttp.isNode) {
                    const sharedKeyCredential = new _storageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
                    url = _utilsCommon.appendToURLPath(_utilsCommon.appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
                    if (!options.proxyOptions) options.proxyOptions = _coreHttp.getDefaultProxySettings(extractedCreds.proxyUri);
                    pipeline = _pipeline.newPipeline(sharedKeyCredential, options);
                } else throw new Error("Account connection string is only supported in Node.js environment");
            } else if (extractedCreds.kind === "SASConnString") {
                url = _utilsCommon.appendToURLPath(_utilsCommon.appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
                pipeline = _pipeline.newPipeline(new _anonymousCredential.AnonymousCredential(), options);
            } else throw new Error("Connection string must be either an Account connection string or a SAS connection string");
        } else throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        super(url, pipeline);
        this.blockBlobContext = new _operations.BlockBlob(this.storageClientContext);
        this._blobContext = new _operations.Blob(this.storageClientContext);
    }
    /**
     * Creates a new BlockBlobClient object identical to the source but with the
     * specified snapshot timestamp.
     * Provide "" will remove the snapshot and return a URL to the base blob.
     *
     * @param snapshot - The snapshot timestamp.
     * @returns A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.
     */ withSnapshot(snapshot) {
        return new BlockBlobClient(_utilsCommon.setURLParameter(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
    }
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Quick query for a JSON or CSV formatted blob.
     *
     * Example usage (Node.js):
     *
     * ```js
     * // Query and convert a blob to a string
     * const queryBlockBlobResponse = await blockBlobClient.query("select * from BlobStorage");
     * const downloaded = (await streamToBuffer(queryBlockBlobResponse.readableStreamBody)).toString();
     * console.log("Query blob content:", downloaded);
     *
     * async function streamToBuffer(readableStream) {
     *   return new Promise((resolve, reject) => {
     *     const chunks = [];
     *     readableStream.on("data", (data) => {
     *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));
     *     });
     *     readableStream.on("end", () => {
     *       resolve(Buffer.concat(chunks));
     *     });
     *     readableStream.on("error", reject);
     *   });
     * }
     * ```
     *
     * @param query -
     * @param options -
     */ async query(query, options = {
    }) {
        var _a;
        _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        const { span , updatedOptions  } = _tracing.createSpan("BlockBlobClient-query", options);
        try {
            if (!_coreHttp.isNode) throw new Error("This operation currently is only supported in Node.js.");
            const response = await this._blobContext.query(Object.assign({
                abortSignal: options.abortSignal,
                queryRequest: {
                    queryType: "SQL",
                    expression: query,
                    inputSerialization: _utilsCommon.toQuerySerialization(options.inputTextConfiguration),
                    outputSerialization: _utilsCommon.toQuerySerialization(options.outputTextConfiguration)
                },
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
            return new _blobQueryResponse.BlobQueryResponse(response, {
                abortSignal: options.abortSignal,
                onProgress: options.onProgress,
                onError: options.onError
            });
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Creates a new block blob, or updates the content of an existing block blob.
     * Updating an existing block blob overwrites any existing metadata on the blob.
     * Partial updates are not supported; the content of the existing blob is
     * overwritten with the new content. To perform a partial update of a block blob's,
     * use {@link stageBlock} and {@link commitBlockList}.
     *
     * This is a non-parallel uploading method, please use {@link uploadFile},
     * {@link uploadStream} or {@link uploadBrowserData} for better performance
     * with concurrency uploading.
     *
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function
     *                               which returns a new Readable stream whose offset is from data source beginning.
     * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
     *                               string including non non-Base64/Hex-encoded characters.
     * @param options - Options to the Block Blob Upload operation.
     * @returns Response data for the Block Blob Upload operation.
     *
     * Example usage:
     *
     * ```js
     * const content = "Hello world!";
     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
     * ```
     */ async upload(body, contentLength, options = {
    }) {
        var _a, _b, _c;
        options.conditions = options.conditions || {
        };
        const { span , updatedOptions  } = _tracing.createSpan("BlockBlobClient-upload", options);
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            return await this.blockBlobContext.upload(contentLength, body, Object.assign({
                abortSignal: options.abortSignal,
                blobHttpHeaders: options.blobHTTPHeaders,
                leaseAccessConditions: options.conditions,
                metadata: options.metadata,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                requestOptions: {
                    onUploadProgress: options.onProgress
                },
                cpkInfo: options.customerProvidedKey,
                encryptionScope: options.encryptionScope,
                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                legalHold: options.legalHold,
                tier: _models.toAccessTier(options.tier),
                blobTagsString: _utilsCommon.toBlobTagsString(options.tags)
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Creates a new Block Blob where the contents of the blob are read from a given URL.
     * This API is supported beginning with the 2020-04-08 version. Partial updates
     * are not supported with Put Blob from URL; the content of an existing blob is overwritten with
     * the content of the new blob.  To perform partial updates to a block blob’s contents using a
     * source URL, use {@link stageBlockFromURL} and {@link commitBlockList}.
     *
     * @param sourceURL - Specifies the URL of the blob. The value
     *                           may be a URL of up to 2 KB in length that specifies a blob.
     *                           The value should be URL-encoded as it would appear
     *                           in a request URI. The source blob must either be public
     *                           or must be authenticated via a shared access signature.
     *                           If the source blob is public, no authentication is required
     *                           to perform the operation. Here are some examples of source object URLs:
     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
     * @param options - Optional parameters.
     */ async syncUploadFromURL(sourceURL, options = {
    }) {
        var _a, _b, _c, _d, _e;
        options.conditions = options.conditions || {
        };
        const { span , updatedOptions  } = _tracing.createSpan("BlockBlobClient-syncUploadFromURL", options);
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            return await this.blockBlobContext.putBlobFromUrl(0, sourceURL, Object.assign(Object.assign(Object.assign({
            }, options), {
                blobHttpHeaders: options.blobHTTPHeaders,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: options.conditions.tagConditions
                }),
                sourceModifiedAccessConditions: {
                    sourceIfMatch: (_a = options.sourceConditions) === null || _a === void 0 ? void 0 : _a.ifMatch,
                    sourceIfModifiedSince: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifModifiedSince,
                    sourceIfNoneMatch: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch,
                    sourceIfUnmodifiedSince: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifUnmodifiedSince,
                    sourceIfTags: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.tagConditions
                },
                cpkInfo: options.customerProvidedKey,
                copySourceAuthorization: _utilsCommon.httpAuthorizationToString(options.sourceAuthorization),
                tier: _models.toAccessTier(options.tier),
                blobTagsString: _utilsCommon.toBlobTagsString(options.tags)
            }), _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Uploads the specified block to the block blob's "staging area" to be later
     * committed by a call to commitBlockList.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-block
     *
     * @param blockId - A 64-byte value that is base64-encoded
     * @param body - Data to upload to the staging area.
     * @param contentLength - Number of bytes to upload.
     * @param options - Options to the Block Blob Stage Block operation.
     * @returns Response data for the Block Blob Stage Block operation.
     */ async stageBlock(blockId, body, contentLength, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlockBlobClient-stageBlock", options);
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            return await this.blockBlobContext.stageBlock(blockId, contentLength, body, Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                requestOptions: {
                    onUploadProgress: options.onProgress
                },
                transactionalContentMD5: options.transactionalContentMD5,
                transactionalContentCrc64: options.transactionalContentCrc64,
                cpkInfo: options.customerProvidedKey,
                encryptionScope: options.encryptionScope
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * The Stage Block From URL operation creates a new block to be committed as part
     * of a blob where the contents are read from a URL.
     * This API is available starting in version 2018-03-28.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url
     *
     * @param blockId - A 64-byte value that is base64-encoded
     * @param sourceURL - Specifies the URL of the blob. The value
     *                           may be a URL of up to 2 KB in length that specifies a blob.
     *                           The value should be URL-encoded as it would appear
     *                           in a request URI. The source blob must either be public
     *                           or must be authenticated via a shared access signature.
     *                           If the source blob is public, no authentication is required
     *                           to perform the operation. Here are some examples of source object URLs:
     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
     * @param offset - From which position of the blob to download, greater than or equal to 0
     * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined
     * @param options - Options to the Block Blob Stage Block From URL operation.
     * @returns Response data for the Block Blob Stage Block From URL operation.
     */ async stageBlockFromURL(blockId, sourceURL, offset = 0, count, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlockBlobClient-stageBlockFromURL", options);
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            return await this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                sourceContentMD5: options.sourceContentMD5,
                sourceContentCrc64: options.sourceContentCrc64,
                sourceRange: offset === 0 && !count ? undefined : _range.rangeToString({
                    offset,
                    count
                }),
                cpkInfo: options.customerProvidedKey,
                encryptionScope: options.encryptionScope,
                copySourceAuthorization: _utilsCommon.httpAuthorizationToString(options.sourceAuthorization)
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Writes a blob by specifying the list of block IDs that make up the blob.
     * In order to be written as part of a blob, a block must have been successfully written
     * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to
     * update a blob by uploading only those blocks that have changed, then committing the new and existing
     * blocks together. Any blocks not specified in the block list and permanently deleted.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list
     *
     * @param blocks -  Array of 64-byte value that is base64-encoded
     * @param options - Options to the Block Blob Commit Block List operation.
     * @returns Response data for the Block Blob Commit Block List operation.
     */ async commitBlockList(blocks, options = {
    }) {
        var _a, _b, _c;
        options.conditions = options.conditions || {
        };
        const { span , updatedOptions  } = _tracing.createSpan("BlockBlobClient-commitBlockList", options);
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            return await this.blockBlobContext.commitBlockList({
                latest: blocks
            }, Object.assign({
                abortSignal: options.abortSignal,
                blobHttpHeaders: options.blobHTTPHeaders,
                leaseAccessConditions: options.conditions,
                metadata: options.metadata,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                cpkInfo: options.customerProvidedKey,
                encryptionScope: options.encryptionScope,
                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                legalHold: options.legalHold,
                tier: _models.toAccessTier(options.tier),
                blobTagsString: _utilsCommon.toBlobTagsString(options.tags)
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Returns the list of blocks that have been uploaded as part of a block blob
     * using the specified block list filter.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list
     *
     * @param listType - Specifies whether to return the list of committed blocks,
     *                                        the list of uncommitted blocks, or both lists together.
     * @param options - Options to the Block Blob Get Block List operation.
     * @returns Response data for the Block Blob Get Block List operation.
     */ async getBlockList(listType, options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("BlockBlobClient-getBlockList", options);
        try {
            const res = await this.blockBlobContext.getBlockList(listType, Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
            if (!res.committedBlocks) res.committedBlocks = [];
            if (!res.uncommittedBlocks) res.uncommittedBlocks = [];
            return res;
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    // High level functions
    /**
     * Uploads a Buffer(Node.js)/Blob(browsers)/ArrayBuffer/ArrayBufferView object to a BlockBlob.
     *
     * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is
     * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.
     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
     * to commit the block list.
     *
     * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is
     * `blobContentType`, enabling the browser to provide
     * functionality based on file type.
     *
     * @param data - Buffer(Node.js), Blob, ArrayBuffer or ArrayBufferView
     * @param options -
     */ async uploadData(data, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlockBlobClient-uploadData", options);
        try {
            if (_coreHttp.isNode) {
                let buffer;
                if (data instanceof Buffer) buffer = data;
                else if (data instanceof ArrayBuffer) buffer = Buffer.from(data);
                else buffer = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
                return this.uploadSeekableInternal((offset, size)=>buffer.slice(offset, offset + size)
                , buffer.byteLength, updatedOptions);
            } else {
                const browserBlob = new Blob([
                    data
                ]);
                return this.uploadSeekableInternal((offset, size)=>browserBlob.slice(offset, offset + size)
                , browserBlob.size, updatedOptions);
            }
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * ONLY AVAILABLE IN BROWSERS.
     *
     * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.
     *
     * When buffer length lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.
     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call
     * {@link commitBlockList} to commit the block list.
     *
     * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is
     * `blobContentType`, enabling the browser to provide
     * functionality based on file type.
     *
     * @deprecated Use {@link uploadData} instead.
     *
     * @param browserData - Blob, File, ArrayBuffer or ArrayBufferView
     * @param options - Options to upload browser data.
     * @returns Response data for the Blob Upload operation.
     */ async uploadBrowserData(browserData, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlockBlobClient-uploadBrowserData", options);
        try {
            const browserBlob = new Blob([
                browserData
            ]);
            return await this.uploadSeekableInternal((offset, size)=>browserBlob.slice(offset, offset + size)
            , browserBlob.size, updatedOptions);
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     *
     * Uploads data to block blob. Requires a bodyFactory as the data source,
     * which need to return a {@link HttpRequestBody} object with the offset and size provided.
     *
     * When data length is no more than the specified {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is
     * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.
     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
     * to commit the block list.
     *
     * @param bodyFactory -
     * @param size - size of the data to upload.
     * @param options - Options to Upload to Block Blob operation.
     * @returns Response data for the Blob Upload operation.
     */ async uploadSeekableInternal(bodyFactory, size, options = {
    }) {
        if (!options.blockSize) options.blockSize = 0;
        if (options.blockSize < 0 || options.blockSize > _constants.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) throw new RangeError(`blockSize option must be >= 0 and <= ${_constants.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES}`);
        if (options.maxSingleShotSize !== 0 && !options.maxSingleShotSize) options.maxSingleShotSize = _constants.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;
        if (options.maxSingleShotSize < 0 || options.maxSingleShotSize > _constants.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES) throw new RangeError(`maxSingleShotSize option must be >= 0 and <= ${_constants.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}`);
        if (options.blockSize === 0) {
            if (size > _constants.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * _constants.BLOCK_BLOB_MAX_BLOCKS) throw new RangeError(`${size} is too larger to upload to a block blob.`);
            if (size > options.maxSingleShotSize) {
                options.blockSize = Math.ceil(size / _constants.BLOCK_BLOB_MAX_BLOCKS);
                if (options.blockSize < _constants.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) options.blockSize = _constants.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
            }
        }
        if (!options.blobHTTPHeaders) options.blobHTTPHeaders = {
        };
        if (!options.conditions) options.conditions = {
        };
        const { span , updatedOptions  } = _tracing.createSpan("BlockBlobClient-uploadSeekableInternal", options);
        try {
            if (size <= options.maxSingleShotSize) return await this.upload(bodyFactory(0, size), size, updatedOptions);
            const numBlocks = Math.floor((size - 1) / options.blockSize) + 1;
            if (numBlocks > _constants.BLOCK_BLOB_MAX_BLOCKS) throw new RangeError(`The buffer's size is too big or the BlockSize is too small;` + `the number of blocks must be <= ${_constants.BLOCK_BLOB_MAX_BLOCKS}`);
            const blockList = [];
            const blockIDPrefix = _coreHttp.generateUuid();
            let transferProgress = 0;
            const batch = new _batch.Batch(options.concurrency);
            for(let i = 0; i < numBlocks; i++)batch.addOperation(async ()=>{
                const blockID = _utilsCommon.generateBlockID(blockIDPrefix, i);
                const start = options.blockSize * i;
                const end = i === numBlocks - 1 ? size : start + options.blockSize;
                const contentLength = end - start;
                blockList.push(blockID);
                await this.stageBlock(blockID, bodyFactory(start, contentLength), contentLength, {
                    abortSignal: options.abortSignal,
                    conditions: options.conditions,
                    encryptionScope: options.encryptionScope,
                    tracingOptions: updatedOptions.tracingOptions
                });
                // Update progress after block is successfully uploaded to server, in case of block trying
                // TODO: Hook with convenience layer progress event in finer level
                transferProgress += contentLength;
                if (options.onProgress) options.onProgress({
                    loadedBytes: transferProgress
                });
            });
            await batch.do();
            return this.commitBlockList(blockList, updatedOptions);
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Uploads a local file in blocks to a block blob.
     *
     * When file size lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.
     * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList
     * to commit the block list.
     *
     * @param filePath - Full path of local file
     * @param options - Options to Upload to Block Blob operation.
     * @returns Response data for the Blob Upload operation.
     */ async uploadFile(filePath, options = {
    }) {
        const { span , updatedOptions  } = _tracing.createSpan("BlockBlobClient-uploadFile", options);
        try {
            const size = (await _utilsNode.fsStat(filePath)).size;
            return await this.uploadSeekableInternal((offset, count)=>{
                return ()=>_utilsNode.fsCreateReadStream(filePath, {
                        autoClose: true,
                        end: count ? offset + count - 1 : Infinity,
                        start: offset
                    })
                ;
            }, size, Object.assign(Object.assign({
            }, options), {
                tracingOptions: Object.assign(Object.assign({
                }, options.tracingOptions), _tracing.convertTracingToRequestOptionsBase(updatedOptions))
            }));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Uploads a Node.js Readable stream into block blob.
     *
     * PERFORMANCE IMPROVEMENT TIPS:
     * * Input stream highWaterMark is better to set a same value with bufferSize
     *    parameter, which will avoid Buffer.concat() operations.
     *
     * @param stream - Node.js Readable stream
     * @param bufferSize - Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB
     * @param maxConcurrency -  Max concurrency indicates the max number of buffers that can be allocated,
     *                                 positive correlation with max uploading concurrency. Default value is 5
     * @param options - Options to Upload Stream to Block Blob operation.
     * @returns Response data for the Blob Upload operation.
     */ async uploadStream(stream, bufferSize = _constants.DEFAULT_BLOCK_BUFFER_SIZE_BYTES, maxConcurrency = 5, options = {
    }) {
        if (!options.blobHTTPHeaders) options.blobHTTPHeaders = {
        };
        if (!options.conditions) options.conditions = {
        };
        const { span , updatedOptions  } = _tracing.createSpan("BlockBlobClient-uploadStream", options);
        try {
            let blockNum = 0;
            const blockIDPrefix = _coreHttp.generateUuid();
            let transferProgress = 0;
            const blockList = [];
            const scheduler = new _src.BufferScheduler(stream, bufferSize, maxConcurrency, async (body, length)=>{
                const blockID = _utilsCommon.generateBlockID(blockIDPrefix, blockNum);
                blockList.push(blockID);
                blockNum++;
                await this.stageBlock(blockID, body, length, {
                    conditions: options.conditions,
                    encryptionScope: options.encryptionScope,
                    tracingOptions: updatedOptions.tracingOptions
                });
                // Update progress after block is successfully uploaded to server, in case of block trying
                transferProgress += length;
                if (options.onProgress) options.onProgress({
                    loadedBytes: transferProgress
                });
            }, // concurrency should set a smaller value than maxConcurrency, which is helpful to
            // reduce the possibility when a outgoing handler waits for stream data, in
            // this situation, outgoing handlers are blocked.
            // Outgoing queue shouldn't be empty.
            Math.ceil(maxConcurrency / 4 * 3));
            await scheduler.do();
            return await this.commitBlockList(blockList, Object.assign(Object.assign({
            }, options), {
                tracingOptions: Object.assign(Object.assign({
                }, options.tracingOptions), _tracing.convertTracingToRequestOptionsBase(updatedOptions))
            }));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
}
class PageBlobClient extends BlobClient {
    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.
    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/ options){
        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);
        let pipeline;
        let url;
        options = options || {
        };
        if (_pipeline.isPipelineLike(credentialOrPipelineOrContainerName)) {
            // (url: string, pipeline: Pipeline)
            url = urlOrConnectionString;
            pipeline = credentialOrPipelineOrContainerName;
        } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _storageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _anonymousCredential.AnonymousCredential || _coreHttp.isTokenCredential(credentialOrPipelineOrContainerName)) {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            url = urlOrConnectionString;
            options = blobNameOrOptions;
            pipeline = _pipeline.newPipeline(credentialOrPipelineOrContainerName, options);
        } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            // The second parameter is undefined. Use anonymous credential.
            url = urlOrConnectionString;
            pipeline = _pipeline.newPipeline(new _anonymousCredential.AnonymousCredential(), options);
        } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
            const containerName = credentialOrPipelineOrContainerName;
            const blobName = blobNameOrOptions;
            const extractedCreds = _utilsCommon.extractConnectionStringParts(urlOrConnectionString);
            if (extractedCreds.kind === "AccountConnString") {
                if (_coreHttp.isNode) {
                    const sharedKeyCredential = new _storageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
                    url = _utilsCommon.appendToURLPath(_utilsCommon.appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
                    if (!options.proxyOptions) options.proxyOptions = _coreHttp.getDefaultProxySettings(extractedCreds.proxyUri);
                    pipeline = _pipeline.newPipeline(sharedKeyCredential, options);
                } else throw new Error("Account connection string is only supported in Node.js environment");
            } else if (extractedCreds.kind === "SASConnString") {
                url = _utilsCommon.appendToURLPath(_utilsCommon.appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
                pipeline = _pipeline.newPipeline(new _anonymousCredential.AnonymousCredential(), options);
            } else throw new Error("Connection string must be either an Account connection string or a SAS connection string");
        } else throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        super(url, pipeline);
        this.pageBlobContext = new _operations.PageBlob(this.storageClientContext);
    }
    /**
     * Creates a new PageBlobClient object identical to the source but with the
     * specified snapshot timestamp.
     * Provide "" will remove the snapshot and return a Client to the base blob.
     *
     * @param snapshot - The snapshot timestamp.
     * @returns A new PageBlobClient object identical to the source but with the specified snapshot timestamp.
     */ withSnapshot(snapshot) {
        return new PageBlobClient(_utilsCommon.setURLParameter(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
    }
    /**
     * Creates a page blob of the specified length. Call uploadPages to upload data
     * data to a page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param size - size of the page blob.
     * @param options - Options to the Page Blob Create operation.
     * @returns Response data for the Page Blob Create operation.
     */ async create(size, options = {
    }) {
        var _a, _b, _c;
        options.conditions = options.conditions || {
        };
        const { span , updatedOptions  } = _tracing.createSpan("PageBlobClient-create", options);
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            return await this.pageBlobContext.create(0, size, Object.assign({
                abortSignal: options.abortSignal,
                blobHttpHeaders: options.blobHTTPHeaders,
                blobSequenceNumber: options.blobSequenceNumber,
                leaseAccessConditions: options.conditions,
                metadata: options.metadata,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                cpkInfo: options.customerProvidedKey,
                encryptionScope: options.encryptionScope,
                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,
                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,
                legalHold: options.legalHold,
                tier: _models.toAccessTier(options.tier),
                blobTagsString: _utilsCommon.toBlobTagsString(options.tags)
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Creates a page blob of the specified length. Call uploadPages to upload data
     * data to a page blob. If the blob with the same name already exists, the content
     * of the existing blob will remain unchanged.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param size - size of the page blob.
     * @param options -
     */ async createIfNotExists(size, options = {
    }) {
        var _a, _b;
        const { span , updatedOptions  } = _tracing.createSpan("PageBlobClient-createIfNotExists", options);
        try {
            const conditions = {
                ifNoneMatch: _constants.ETagAny
            };
            const res = await this.create(size, Object.assign(Object.assign({
            }, options), {
                conditions,
                tracingOptions: updatedOptions.tracingOptions
            }));
            return Object.assign(Object.assign({
                succeeded: true
            }, res), {
                _response: res._response
            });
        } catch (e) {
            if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobAlreadyExists") {
                span.setStatus({
                    code: _coreTracing.SpanStatusCode.ERROR,
                    message: "Expected exception when creating a blob only if it does not already exist."
                });
                return Object.assign(Object.assign({
                    succeeded: false
                }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                    _response: e.response
                });
            }
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-page
     *
     * @param body - Data to upload
     * @param offset - Offset of destination page blob
     * @param count - Content length of the body, also number of bytes to be uploaded
     * @param options - Options to the Page Blob Upload Pages operation.
     * @returns Response data for the Page Blob Upload Pages operation.
     */ async uploadPages(body, offset, count, options = {
    }) {
        var _a;
        options.conditions = options.conditions || {
        };
        const { span , updatedOptions  } = _tracing.createSpan("PageBlobClient-uploadPages", options);
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            return await this.pageBlobContext.uploadPages(count, body, Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                requestOptions: {
                    onUploadProgress: options.onProgress
                },
                range: _range.rangeToString({
                    offset,
                    count
                }),
                sequenceNumberAccessConditions: options.conditions,
                transactionalContentMD5: options.transactionalContentMD5,
                transactionalContentCrc64: options.transactionalContentCrc64,
                cpkInfo: options.customerProvidedKey,
                encryptionScope: options.encryptionScope
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * The Upload Pages operation writes a range of pages to a page blob where the
     * contents are read from a URL.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url
     *
     * @param sourceURL - Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication
     * @param sourceOffset - The source offset to copy from. Pass 0 to copy from the beginning of source page blob
     * @param destOffset - Offset of destination page blob
     * @param count - Number of bytes to be uploaded from source page blob
     * @param options -
     */ async uploadPagesFromURL(sourceURL, sourceOffset, destOffset, count, options = {
    }) {
        var _a;
        options.conditions = options.conditions || {
        };
        options.sourceConditions = options.sourceConditions || {
        };
        const { span , updatedOptions  } = _tracing.createSpan("PageBlobClient-uploadPagesFromURL", options);
        try {
            _models.ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
            return await this.pageBlobContext.uploadPagesFromURL(sourceURL, _range.rangeToString({
                offset: sourceOffset,
                count
            }), 0, _range.rangeToString({
                offset: destOffset,
                count
            }), Object.assign({
                abortSignal: options.abortSignal,
                sourceContentMD5: options.sourceContentMD5,
                sourceContentCrc64: options.sourceContentCrc64,
                leaseAccessConditions: options.conditions,
                sequenceNumberAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                sourceModifiedAccessConditions: {
                    sourceIfMatch: options.sourceConditions.ifMatch,
                    sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                    sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                    sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
                },
                cpkInfo: options.customerProvidedKey,
                encryptionScope: options.encryptionScope,
                copySourceAuthorization: _utilsCommon.httpAuthorizationToString(options.sourceAuthorization)
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Frees the specified pages from the page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-page
     *
     * @param offset - Starting byte position of the pages to clear.
     * @param count - Number of bytes to clear.
     * @param options - Options to the Page Blob Clear Pages operation.
     * @returns Response data for the Page Blob Clear Pages operation.
     */ async clearPages(offset = 0, count, options = {
    }) {
        var _a;
        options.conditions = options.conditions || {
        };
        const { span , updatedOptions  } = _tracing.createSpan("PageBlobClient-clearPages", options);
        try {
            return await this.pageBlobContext.clearPages(0, Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                range: _range.rangeToString({
                    offset,
                    count
                }),
                sequenceNumberAccessConditions: options.conditions,
                cpkInfo: options.customerProvidedKey,
                encryptionScope: options.encryptionScope
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Returns the list of valid page ranges for a page blob or snapshot of a page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     * @param offset - Starting byte position of the page ranges.
     * @param count - Number of bytes to get.
     * @param options - Options to the Page Blob Get Ranges operation.
     * @returns Response data for the Page Blob Get Ranges operation.
     */ async getPageRanges(offset = 0, count, options = {
    }) {
        var _a;
        options.conditions = options.conditions || {
        };
        const { span , updatedOptions  } = _tracing.createSpan("PageBlobClient-getPageRanges", options);
        try {
            return await this.pageBlobContext.getPageRanges(Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                range: _range.rangeToString({
                    offset,
                    count
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions))).then(_pageBlobRangeResponse.rangeResponseFromModel);
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Gets the collection of page ranges that differ between a specified snapshot and this page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     * @param offset - Starting byte position of the page blob
     * @param count - Number of bytes to get ranges diff.
     * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.
     * @param options - Options to the Page Blob Get Page Ranges Diff operation.
     * @returns Response data for the Page Blob Get Page Range Diff operation.
     */ async getPageRangesDiff(offset, count, prevSnapshot, options = {
    }) {
        var _a;
        options.conditions = options.conditions || {
        };
        const { span , updatedOptions  } = _tracing.createSpan("PageBlobClient-getPageRangesDiff", options);
        try {
            return await this.pageBlobContext.getPageRangesDiff(Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                prevsnapshot: prevSnapshot,
                range: _range.rangeToString({
                    offset,
                    count
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions))).then(_pageBlobRangeResponse.rangeResponseFromModel);
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     * @param offset - Starting byte position of the page blob
     * @param count - Number of bytes to get ranges diff.
     * @param prevSnapshotUrl - URL of snapshot to retrieve the difference.
     * @param options - Options to the Page Blob Get Page Ranges Diff operation.
     * @returns Response data for the Page Blob Get Page Range Diff operation.
     */ async getPageRangesDiffForManagedDisks(offset, count, prevSnapshotUrl, options = {
    }) {
        var _a;
        options.conditions = options.conditions || {
        };
        const { span , updatedOptions  } = _tracing.createSpan("PageBlobClient-GetPageRangesDiffForManagedDisks", options);
        try {
            return await this.pageBlobContext.getPageRangesDiff(Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                prevSnapshotUrl,
                range: _range.rangeToString({
                    offset,
                    count
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions))).then(_pageBlobRangeResponse.rangeResponseFromModel);
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Resizes the page blob to the specified size (which must be a multiple of 512).
     * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties
     *
     * @param size - Target size
     * @param options - Options to the Page Blob Resize operation.
     * @returns Response data for the Page Blob Resize operation.
     */ async resize(size, options = {
    }) {
        var _a;
        options.conditions = options.conditions || {
        };
        const { span , updatedOptions  } = _tracing.createSpan("PageBlobClient-resize", options);
        try {
            return await this.pageBlobContext.resize(size, Object.assign({
                abortSignal: options.abortSignal,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                }),
                encryptionScope: options.encryptionScope
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Sets a page blob's sequence number.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
     *
     * @param sequenceNumberAction - Indicates how the service should modify the blob's sequence number.
     * @param sequenceNumber - Required if sequenceNumberAction is max or update
     * @param options - Options to the Page Blob Update Sequence Number operation.
     * @returns Response data for the Page Blob Update Sequence Number operation.
     */ async updateSequenceNumber(sequenceNumberAction, sequenceNumber, options = {
    }) {
        var _a;
        options.conditions = options.conditions || {
        };
        const { span , updatedOptions  } = _tracing.createSpan("PageBlobClient-updateSequenceNumber", options);
        try {
            return await this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, Object.assign({
                abortSignal: options.abortSignal,
                blobSequenceNumber: sequenceNumber,
                leaseAccessConditions: options.conditions,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    /**
     * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.
     * The snapshot is copied such that only the differential changes between the previously
     * copied snapshot are transferred to the destination.
     * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.
     * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob
     * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots
     *
     * @param copySource - Specifies the name of the source page blob snapshot. For example,
     *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
     * @param options - Options to the Page Blob Copy Incremental operation.
     * @returns Response data for the Page Blob Copy Incremental operation.
     */ async startCopyIncremental(copySource, options = {
    }) {
        var _a;
        const { span , updatedOptions  } = _tracing.createSpan("PageBlobClient-startCopyIncremental", options);
        try {
            return await this.pageBlobContext.copyIncremental(copySource, Object.assign({
                abortSignal: options.abortSignal,
                modifiedAccessConditions: Object.assign(Object.assign({
                }, options.conditions), {
                    ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                })
            }, _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
}

},{"@azure/core-http":"iSINq","@azure/core-tracing":"7R1NC","./BlobDownloadResponse":"2JWvO","./BlobQueryResponse":"4nEoT","./credentials/AnonymousCredential":"f0sOe","./credentials/StorageSharedKeyCredential":"jUFIX","./generated/src/operations":"j9faG","./models":"179yc","./PageBlobRangeResponse":"eVYB7","./Pipeline":"bsozg","./pollers/BlobStartCopyFromUrlPoller":"9CFs1","./Range":"6C9e2","./StorageClient":"gO9Kx","./utils/Batch":"l9Xq9","../../storage-common/src":"h0c80","./utils/constants":"4gX5x","./utils/tracing":"m0KjB","./utils/utils.common":"2SR3M","./utils/utils.node":"8nPkP","./sas/BlobSASSignatureValues":"SWffY","./BlobLeaseClient":"hZ8uc","buffer":"fCgem","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2JWvO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BlobDownloadResponse", ()=>BlobDownloadResponse
);
const BlobDownloadResponse = 1;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4nEoT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * ONLY AVAILABLE IN BROWSER RUNTIME.
 *
 * BlobQueryResponse implements BlobDownloadResponseModel interface, and in browser runtime it will
 * parse avor data returned by blob query.
 */ parcelHelpers.export(exports, "BlobQueryResponse", ()=>BlobQueryResponse
);
class BlobQueryResponse {
    /**
     * Creates an instance of BlobQueryResponse.
     *
     * @param originalResponse -
     * @param options -
     */ constructor(originalResponse, _options = {
    }){
        this.originalResponse = originalResponse;
    }
    /**
     * Indicates that the service supports
     * requests for partial file content.
     *
     * @readonly
     */ get acceptRanges() {
        return this.originalResponse.acceptRanges;
    }
    /**
     * Returns if it was previously specified
     * for the file.
     *
     * @readonly
     */ get cacheControl() {
        return this.originalResponse.cacheControl;
    }
    /**
     * Returns the value that was specified
     * for the 'x-ms-content-disposition' header and specifies how to process the
     * response.
     *
     * @readonly
     */ get contentDisposition() {
        return this.originalResponse.contentDisposition;
    }
    /**
     * Returns the value that was specified
     * for the Content-Encoding request header.
     *
     * @readonly
     */ get contentEncoding() {
        return this.originalResponse.contentEncoding;
    }
    /**
     * Returns the value that was specified
     * for the Content-Language request header.
     *
     * @readonly
     */ get contentLanguage() {
        return this.originalResponse.contentLanguage;
    }
    /**
     * The current sequence number for a
     * page blob. This header is not returned for block blobs or append blobs.
     *
     * @readonly
     */ get blobSequenceNumber() {
        return this.originalResponse.blobSequenceNumber;
    }
    /**
     * The blob's type. Possible values include:
     * 'BlockBlob', 'PageBlob', 'AppendBlob'.
     *
     * @readonly
     */ get blobType() {
        return this.originalResponse.blobType;
    }
    /**
     * The number of bytes present in the
     * response body.
     *
     * @readonly
     */ get contentLength() {
        return this.originalResponse.contentLength;
    }
    /**
     * If the file has an MD5 hash and the
     * request is to read the full file, this response header is returned so that
     * the client can check for message content integrity. If the request is to
     * read a specified range and the 'x-ms-range-get-content-md5' is set to
     * true, then the request returns an MD5 hash for the range, as long as the
     * range size is less than or equal to 4 MB. If neither of these sets of
     * conditions is true, then no value is returned for the 'Content-MD5'
     * header.
     *
     * @readonly
     */ get contentMD5() {
        return this.originalResponse.contentMD5;
    }
    /**
     * Indicates the range of bytes returned if
     * the client requested a subset of the file by setting the Range request
     * header.
     *
     * @readonly
     */ get contentRange() {
        return this.originalResponse.contentRange;
    }
    /**
     * The content type specified for the file.
     * The default content type is 'application/octet-stream'
     *
     * @readonly
     */ get contentType() {
        return this.originalResponse.contentType;
    }
    /**
     * Conclusion time of the last attempted
     * Copy File operation where this file was the destination file. This value
     * can specify the time of a completed, aborted, or failed copy attempt.
     *
     * @readonly
     */ get copyCompletedOn() {
        return undefined;
    }
    /**
     * String identifier for the last attempted Copy
     * File operation where this file was the destination file.
     *
     * @readonly
     */ get copyId() {
        return this.originalResponse.copyId;
    }
    /**
     * Contains the number of bytes copied and
     * the total bytes in the source in the last attempted Copy File operation
     * where this file was the destination file. Can show between 0 and
     * Content-Length bytes copied.
     *
     * @readonly
     */ get copyProgress() {
        return this.originalResponse.copyProgress;
    }
    /**
     * URL up to 2KB in length that specifies the
     * source file used in the last attempted Copy File operation where this file
     * was the destination file.
     *
     * @readonly
     */ get copySource() {
        return this.originalResponse.copySource;
    }
    /**
     * State of the copy operation
     * identified by 'x-ms-copy-id'. Possible values include: 'pending',
     * 'success', 'aborted', 'failed'
     *
     * @readonly
     */ get copyStatus() {
        return this.originalResponse.copyStatus;
    }
    /**
     * Only appears when
     * x-ms-copy-status is failed or pending. Describes cause of fatal or
     * non-fatal copy operation failure.
     *
     * @readonly
     */ get copyStatusDescription() {
        return this.originalResponse.copyStatusDescription;
    }
    /**
     * When a blob is leased,
     * specifies whether the lease is of infinite or fixed duration. Possible
     * values include: 'infinite', 'fixed'.
     *
     * @readonly
     */ get leaseDuration() {
        return this.originalResponse.leaseDuration;
    }
    /**
     * Lease state of the blob. Possible
     * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.
     *
     * @readonly
     */ get leaseState() {
        return this.originalResponse.leaseState;
    }
    /**
     * The current lease status of the
     * blob. Possible values include: 'locked', 'unlocked'.
     *
     * @readonly
     */ get leaseStatus() {
        return this.originalResponse.leaseStatus;
    }
    /**
     * A UTC date/time value generated by the service that
     * indicates the time at which the response was initiated.
     *
     * @readonly
     */ get date() {
        return this.originalResponse.date;
    }
    /**
     * The number of committed blocks
     * present in the blob. This header is returned only for append blobs.
     *
     * @readonly
     */ get blobCommittedBlockCount() {
        return this.originalResponse.blobCommittedBlockCount;
    }
    /**
     * The ETag contains a value that you can use to
     * perform operations conditionally, in quotes.
     *
     * @readonly
     */ get etag() {
        return this.originalResponse.etag;
    }
    /**
     * The error code.
     *
     * @readonly
     */ get errorCode() {
        return this.originalResponse.errorCode;
    }
    /**
     * The value of this header is set to
     * true if the file data and application metadata are completely encrypted
     * using the specified algorithm. Otherwise, the value is set to false (when
     * the file is unencrypted, or if only parts of the file/application metadata
     * are encrypted).
     *
     * @readonly
     */ get isServerEncrypted() {
        return this.originalResponse.isServerEncrypted;
    }
    /**
     * If the blob has a MD5 hash, and if
     * request contains range header (Range or x-ms-range), this response header
     * is returned with the value of the whole blob's MD5 value. This value may
     * or may not be equal to the value returned in Content-MD5 header, with the
     * latter calculated from the requested range.
     *
     * @readonly
     */ get blobContentMD5() {
        return this.originalResponse.blobContentMD5;
    }
    /**
     * Returns the date and time the file was last
     * modified. Any operation that modifies the file or its properties updates
     * the last modified time.
     *
     * @readonly
     */ get lastModified() {
        return this.originalResponse.lastModified;
    }
    /**
     * A name-value pair
     * to associate with a file storage object.
     *
     * @readonly
     */ get metadata() {
        return this.originalResponse.metadata;
    }
    /**
     * This header uniquely identifies the request
     * that was made and can be used for troubleshooting the request.
     *
     * @readonly
     */ get requestId() {
        return this.originalResponse.requestId;
    }
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     *
     * @readonly
     */ get clientRequestId() {
        return this.originalResponse.clientRequestId;
    }
    /**
     * Indicates the version of the File service used
     * to execute the request.
     *
     * @readonly
     */ get version() {
        return this.originalResponse.version;
    }
    /**
     * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned
     * when the blob was encrypted with a customer-provided key.
     *
     * @readonly
     */ get encryptionKeySha256() {
        return this.originalResponse.encryptionKeySha256;
    }
    /**
     * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to
     * true, then the request returns a crc64 for the range, as long as the range size is less than
     * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is
     * specified in the same request, it will fail with 400(Bad Request)
     */ get contentCrc64() {
        return this.originalResponse.contentCrc64;
    }
    /**
     * The response body as a browser Blob.
     * Always undefined in node.js.
     *
     * @readonly
     */ get blobBody() {
        throw Error(`Quick query in browser is not supported yet.`);
    }
    /**
     * The response body as a node.js Readable stream.
     * Always undefined in the browser.
     *
     * @readonly
     */ get readableStreamBody() {
        return undefined;
    }
    /**
     * The HTTP response.
     */ get _response() {
        return this.originalResponse._response;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"179yc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BlockBlobTier", ()=>BlockBlobTier
);
parcelHelpers.export(exports, "PremiumPageBlobTier", ()=>PremiumPageBlobTier
);
parcelHelpers.export(exports, "toAccessTier", ()=>toAccessTier
);
parcelHelpers.export(exports, "ensureCpkIfSpecified", ()=>ensureCpkIfSpecified
);
parcelHelpers.export(exports, "StorageBlobAudience", ()=>StorageBlobAudience
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _constants = require("./utils/constants");
var BlockBlobTier;
(function(BlockBlobTier1) {
    /**
     * Optimized for storing data that is accessed frequently.
     */ BlockBlobTier1["Hot"] = "Hot";
    /**
     * Optimized for storing data that is infrequently accessed and stored for at least 30 days.
     */ BlockBlobTier1["Cool"] = "Cool";
    /**
     * Optimized for storing data that is rarely accessed and stored for at least 180 days
     * with flexible latency requirements (on the order of hours).
     */ BlockBlobTier1["Archive"] = "Archive";
})(BlockBlobTier || (BlockBlobTier = {
}));
var PremiumPageBlobTier;
(function(PremiumPageBlobTier1) {
    /**
     * P4 Tier.
     */ PremiumPageBlobTier1["P4"] = "P4";
    /**
     * P6 Tier.
     */ PremiumPageBlobTier1["P6"] = "P6";
    /**
     * P10 Tier.
     */ PremiumPageBlobTier1["P10"] = "P10";
    /**
     * P15 Tier.
     */ PremiumPageBlobTier1["P15"] = "P15";
    /**
     * P20 Tier.
     */ PremiumPageBlobTier1["P20"] = "P20";
    /**
     * P30 Tier.
     */ PremiumPageBlobTier1["P30"] = "P30";
    /**
     * P40 Tier.
     */ PremiumPageBlobTier1["P40"] = "P40";
    /**
     * P50 Tier.
     */ PremiumPageBlobTier1["P50"] = "P50";
    /**
     * P60 Tier.
     */ PremiumPageBlobTier1["P60"] = "P60";
    /**
     * P70 Tier.
     */ PremiumPageBlobTier1["P70"] = "P70";
    /**
     * P80 Tier.
     */ PremiumPageBlobTier1["P80"] = "P80";
})(PremiumPageBlobTier || (PremiumPageBlobTier = {
}));
function toAccessTier(tier) {
    if (tier === undefined) return undefined;
    return tier; // No more check if string is a valid AccessTier, and left this to underlay logic to decide(service).
}
function ensureCpkIfSpecified(cpk, isHttps) {
    if (cpk && !isHttps) throw new RangeError("Customer-provided encryption key must be used over HTTPS.");
    if (cpk && !cpk.encryptionAlgorithm) cpk.encryptionAlgorithm = _constants.EncryptionAlgorithmAES25;
}
var StorageBlobAudience;
(function(StorageBlobAudience1) {
    /**
     * The OAuth scope to use to retrieve an AAD token for Azure Storage.
     */ StorageBlobAudience1["StorageOAuthScopes"] = "https://storage.azure.com/.default";
    /**
     * The OAuth scope to use to retrieve an AAD token for Azure Disk.
     */ StorageBlobAudience1["DiskComputeOAuthScopes"] = "https://disk.compute.azure.com/.default";
})(StorageBlobAudience || (StorageBlobAudience = {
}));

},{"./utils/constants":"4gX5x","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eVYB7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Function that converts PageRange and ClearRange to a common Range object.
 * PageRange and ClearRange have start and end while Range offset and count
 * this function normalizes to Range.
 * @param response - Model PageBlob Range response
 */ parcelHelpers.export(exports, "rangeResponseFromModel", ()=>rangeResponseFromModel
);
function rangeResponseFromModel(response) {
    const pageRange = (response._response.parsedBody.pageRange || []).map((x)=>({
            offset: x.start,
            count: x.end - x.start
        })
    );
    const clearRange = (response._response.parsedBody.clearRange || []).map((x)=>({
            offset: x.start,
            count: x.end - x.start
        })
    );
    return Object.assign(Object.assign({
    }, response), {
        pageRange,
        clearRange,
        _response: Object.assign(Object.assign({
        }, response._response), {
            parsedBody: {
                pageRange,
                clearRange
            }
        })
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9CFs1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This is the poller returned by {@link BlobClient.beginCopyFromURL}.
 * This can not be instantiated directly outside of this package.
 *
 * @hidden
 */ parcelHelpers.export(exports, "BlobBeginCopyFromUrlPoller", ()=>BlobBeginCopyFromUrlPoller
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreHttp = require("@azure/core-http");
var _coreLro = require("@azure/core-lro");
class BlobBeginCopyFromUrlPoller extends _coreLro.Poller {
    constructor(options){
        const { blobClient , copySource , intervalInMs =15000 , onProgress , resumeFrom , startCopyFromURLOptions ,  } = options;
        let state;
        if (resumeFrom) state = JSON.parse(resumeFrom).state;
        const operation = makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({
        }, state), {
            blobClient,
            copySource,
            startCopyFromURLOptions
        }));
        super(operation);
        if (typeof onProgress === "function") this.onProgress(onProgress);
        this.intervalInMs = intervalInMs;
    }
    delay() {
        return _coreHttp.delay(this.intervalInMs);
    }
}
/**
 * Note: Intentionally using function expression over arrow function expression
 * so that the function can be invoked with a different context.
 * This affects what `this` refers to.
 * @hidden
 */ const cancel = async function cancel(options = {
}) {
    const state = this.state;
    const { copyId  } = state;
    if (state.isCompleted) return makeBlobBeginCopyFromURLPollOperation(state);
    if (!copyId) {
        state.isCancelled = true;
        return makeBlobBeginCopyFromURLPollOperation(state);
    }
    // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call
    await state.blobClient.abortCopyFromURL(copyId, {
        abortSignal: options.abortSignal
    });
    state.isCancelled = true;
    return makeBlobBeginCopyFromURLPollOperation(state);
};
/**
 * Note: Intentionally using function expression over arrow function expression
 * so that the function can be invoked with a different context.
 * This affects what `this` refers to.
 * @hidden
 */ const update = async function update(options = {
}) {
    const state = this.state;
    const { blobClient , copySource , startCopyFromURLOptions  } = state;
    if (!state.isStarted) {
        state.isStarted = true;
        const result = await blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);
        // copyId is needed to abort
        state.copyId = result.copyId;
        if (result.copyStatus === "success") {
            state.result = result;
            state.isCompleted = true;
        }
    } else if (!state.isCompleted) try {
        const result = await state.blobClient.getProperties({
            abortSignal: options.abortSignal
        });
        const { copyStatus , copyProgress  } = result;
        const prevCopyProgress = state.copyProgress;
        if (copyProgress) state.copyProgress = copyProgress;
        if (copyStatus === "pending" && copyProgress !== prevCopyProgress && typeof options.fireProgress === "function") // trigger in setTimeout, or swallow error?
        options.fireProgress(state);
        else if (copyStatus === "success") {
            state.result = result;
            state.isCompleted = true;
        } else if (copyStatus === "failed") {
            state.error = new Error(`Blob copy failed with reason: "${result.copyStatusDescription || "unknown"}"`);
            state.isCompleted = true;
        }
    } catch (err) {
        state.error = err;
        state.isCompleted = true;
    }
    return makeBlobBeginCopyFromURLPollOperation(state);
};
/**
 * Note: Intentionally using function expression over arrow function expression
 * so that the function can be invoked with a different context.
 * This affects what `this` refers to.
 * @hidden
 */ const toString = function toString() {
    return JSON.stringify({
        state: this.state
    }, (key, value)=>{
        // remove blobClient from serialized state since a client can't be hydrated from this info.
        if (key === "blobClient") return undefined;
        return value;
    });
};
/**
 * Creates a poll operation given the provided state.
 * @hidden
 */ function makeBlobBeginCopyFromURLPollOperation(state) {
    return {
        state: Object.assign({
        }, state),
        cancel,
        toString,
        update
    };
}

},{"@azure/core-http":"iSINq","@azure/core-lro":"e6HBT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e6HBT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _pollOperation = require("./pollOperation");
parcelHelpers.exportAll(_pollOperation, exports);
var _poller = require("./poller");
parcelHelpers.exportAll(_poller, exports);
var _lroEngine = require("./lroEngine");
parcelHelpers.exportAll(_lroEngine, exports);

},{"./pollOperation":"1vu7P","./poller":"9jVUT","./lroEngine":"koj2f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1vu7P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9jVUT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * When a poller is manually stopped through the `stopPolling` method,
 * the poller will be rejected with an instance of the PollerStoppedError.
 */ parcelHelpers.export(exports, "PollerStoppedError", ()=>PollerStoppedError
);
/**
 * When a poller is cancelled through the `cancelOperation` method,
 * the poller will be rejected with an instance of the PollerCancelledError.
 */ parcelHelpers.export(exports, "PollerCancelledError", ()=>PollerCancelledError
);
/**
 * A class that represents the definition of a program that polls through consecutive requests
 * until it reaches a state of completion.
 *
 * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.
 * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.
 * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.
 *
 * ```ts
 * const poller = new MyPoller();
 *
 * // Polling just once:
 * await poller.poll();
 *
 * // We can try to cancel the request here, by calling:
 * //
 * //     await poller.cancelOperation();
 * //
 *
 * // Getting the final result:
 * const result = await poller.pollUntilDone();
 * ```
 *
 * The Poller is defined by two types, a type representing the state of the poller, which
 * must include a basic set of properties from `PollOperationState<TResult>`,
 * and a return type defined by `TResult`, which can be anything.
 *
 * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having
 * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.
 *
 * ```ts
 * class Client {
 *   public async makePoller: PollerLike<MyOperationState, MyResult> {
 *     const poller = new MyPoller({});
 *     // It might be preferred to return the poller after the first request is made,
 *     // so that some information can be obtained right away.
 *     await poller.poll();
 *     return poller;
 *   }
 * }
 *
 * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();
 * ```
 *
 * A poller can be created through its constructor, then it can be polled until it's completed.
 * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.
 * At any point in time, the intermediate forms of the result type can be requested without delay.
 * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.
 *
 * ```ts
 * const poller = myClient.makePoller();
 * const state: MyOperationState = poller.getOperationState();
 *
 * // The intermediate result can be obtained at any time.
 * const result: MyResult | undefined = poller.getResult();
 *
 * // The final result can only be obtained after the poller finishes.
 * const result: MyResult = await poller.pollUntilDone();
 * ```
 *
 */ // eslint-disable-next-line no-use-before-define
parcelHelpers.export(exports, "Poller", ()=>Poller
);
class PollerStoppedError extends Error {
    constructor(message){
        super(message);
        this.name = "PollerStoppedError";
        Object.setPrototypeOf(this, PollerStoppedError.prototype);
    }
}
class PollerCancelledError extends Error {
    constructor(message){
        super(message);
        this.name = "PollerCancelledError";
        Object.setPrototypeOf(this, PollerCancelledError.prototype);
    }
}
class Poller {
    /**
     * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.
     *
     * When writing an implementation of a Poller, this implementation needs to deal with the initialization
     * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's
     * operation has already been defined, at least its basic properties. The code below shows how to approach
     * the definition of the constructor of a new custom poller.
     *
     * ```ts
     * export class MyPoller extends Poller<MyOperationState, string> {
     *   constructor({
     *     // Anything you might need outside of the basics
     *   }) {
     *     let state: MyOperationState = {
     *       privateProperty: private,
     *       publicProperty: public,
     *     };
     *
     *     const operation = {
     *       state,
     *       update,
     *       cancel,
     *       toString
     *     }
     *
     *     // Sending the operation to the parent's constructor.
     *     super(operation);
     *
     *     // You can assign more local properties here.
     *   }
     * }
     * ```
     *
     * Inside of this constructor, a new promise is created. This will be used to
     * tell the user when the poller finishes (see `pollUntilDone()`). The promise's
     * resolve and reject methods are also used internally to control when to resolve
     * or reject anyone waiting for the poller to finish.
     *
     * The constructor of a custom implementation of a poller is where any serialized version of
     * a previous poller's operation should be deserialized into the operation sent to the
     * base constructor. For example:
     *
     * ```ts
     * export class MyPoller extends Poller<MyOperationState, string> {
     *   constructor(
     *     baseOperation: string | undefined
     *   ) {
     *     let state: MyOperationState = {};
     *     if (baseOperation) {
     *       state = {
     *         ...JSON.parse(baseOperation).state,
     *         ...state
     *       };
     *     }
     *     const operation = {
     *       state,
     *       // ...
     *     }
     *     super(operation);
     *   }
     * }
     * ```
     *
     * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.
     */ constructor(operation){
        this.stopped = true;
        this.pollProgressCallbacks = [];
        this.operation = operation;
        this.promise = new Promise((resolve, reject)=>{
            this.resolve = resolve;
            this.reject = reject;
        });
        // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.
        // The above warning would get thrown if `poller.poll` is called, it returns an error,
        // and pullUntilDone did not have a .catch or await try/catch on it's return value.
        this.promise.catch(()=>{
        /* intentionally blank */ });
    }
    /**
     * Starts a loop that will break only if the poller is done
     * or if the poller is stopped.
     */ async startPolling() {
        if (this.stopped) this.stopped = false;
        while(!this.isStopped() && !this.isDone()){
            await this.poll();
            await this.delay();
        }
    }
    /**
     * pollOnce does one polling, by calling to the update method of the underlying
     * poll operation to make any relevant change effective.
     *
     * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
     *
     * @param options - Optional properties passed to the operation's update method.
     */ async pollOnce(options = {
    }) {
        try {
            if (!this.isDone()) {
                this.operation = await this.operation.update({
                    abortSignal: options.abortSignal,
                    fireProgress: this.fireProgress.bind(this)
                });
                if (this.isDone() && this.resolve) // If the poller has finished polling, this means we now have a result.
                // However, it can be the case that TResult is instantiated to void, so
                // we are not expecting a result anyway. To assert that we might not
                // have a result eventually after finishing polling, we cast the result
                // to TResult.
                this.resolve(this.operation.state.result);
            }
        } catch (e) {
            this.operation.state.error = e;
            if (this.reject) this.reject(e);
            throw e;
        }
    }
    /**
     * fireProgress calls the functions passed in via onProgress the method of the poller.
     *
     * It loops over all of the callbacks received from onProgress, and executes them, sending them
     * the current operation state.
     *
     * @param state - The current operation state.
     */ fireProgress(state) {
        for (const callback of this.pollProgressCallbacks)callback(state);
    }
    /**
     * Invokes the underlying operation's cancel method, and rejects the
     * pollUntilDone promise.
     */ async cancelOnce(options = {
    }) {
        this.operation = await this.operation.cancel(options);
        if (this.reject) this.reject(new PollerCancelledError("Poller cancelled"));
    }
    /**
     * Returns a promise that will resolve once a single polling request finishes.
     * It does this by calling the update method of the Poller's operation.
     *
     * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
     *
     * @param options - Optional properties passed to the operation's update method.
     */ poll(options = {
    }) {
        if (!this.pollOncePromise) {
            this.pollOncePromise = this.pollOnce(options);
            const clearPollOncePromise = ()=>{
                this.pollOncePromise = undefined;
            };
            this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);
        }
        return this.pollOncePromise;
    }
    /**
     * Returns a promise that will resolve once the underlying operation is completed.
     */ async pollUntilDone() {
        if (this.stopped) this.startPolling().catch(this.reject);
        return this.promise;
    }
    /**
     * Invokes the provided callback after each polling is completed,
     * sending the current state of the poller's operation.
     *
     * It returns a method that can be used to stop receiving updates on the given callback function.
     */ onProgress(callback) {
        this.pollProgressCallbacks.push(callback);
        return ()=>{
            this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c)=>c !== callback
            );
        };
    }
    /**
     * Returns true if the poller has finished polling.
     */ isDone() {
        const state = this.operation.state;
        return Boolean(state.isCompleted || state.isCancelled || state.error);
    }
    /**
     * Stops the poller from continuing to poll.
     */ stopPolling() {
        if (!this.stopped) {
            this.stopped = true;
            if (this.reject) this.reject(new PollerStoppedError("This poller is already stopped"));
        }
    }
    /**
     * Returns true if the poller is stopped.
     */ isStopped() {
        return this.stopped;
    }
    /**
     * Attempts to cancel the underlying operation.
     *
     * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
     *
     * If it's called again before it finishes, it will throw an error.
     *
     * @param options - Optional properties passed to the operation's update method.
     */ cancelOperation(options = {
    }) {
        if (!this.stopped) this.stopped = true;
        if (!this.cancelPromise) this.cancelPromise = this.cancelOnce(options);
        else if (options.abortSignal) throw new Error("A cancel request is currently pending");
        return this.cancelPromise;
    }
    /**
     * Returns the state of the operation.
     *
     * Even though TState will be the same type inside any of the methods of any extension of the Poller class,
     * implementations of the pollers can customize what's shared with the public by writing their own
     * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller
     * and a public type representing a safe to share subset of the properties of the internal state.
     * Their definition of getOperationState can then return their public type.
     *
     * Example:
     *
     * ```ts
     * // Let's say we have our poller's operation state defined as:
     * interface MyOperationState extends PollOperationState<ResultType> {
     *   privateProperty?: string;
     *   publicProperty?: string;
     * }
     *
     * // To allow us to have a true separation of public and private state, we have to define another interface:
     * interface PublicState extends PollOperationState<ResultType> {
     *   publicProperty?: string;
     * }
     *
     * // Then, we define our Poller as follows:
     * export class MyPoller extends Poller<MyOperationState, ResultType> {
     *   // ... More content is needed here ...
     *
     *   public getOperationState(): PublicState {
     *     const state: PublicState = this.operation.state;
     *     return {
     *       // Properties from PollOperationState<TResult>
     *       isStarted: state.isStarted,
     *       isCompleted: state.isCompleted,
     *       isCancelled: state.isCancelled,
     *       error: state.error,
     *       result: state.result,
     *
     *       // The only other property needed by PublicState.
     *       publicProperty: state.publicProperty
     *     }
     *   }
     * }
     * ```
     *
     * You can see this in the tests of this repository, go to the file:
     * `../test/utils/testPoller.ts`
     * and look for the getOperationState implementation.
     */ getOperationState() {
        return this.operation.state;
    }
    /**
     * Returns the result value of the operation,
     * regardless of the state of the poller.
     * It can return undefined or an incomplete form of the final TResult value
     * depending on the implementation.
     */ getResult() {
        const state = this.operation.state;
        return state.result;
    }
    /**
     * Returns a serialized version of the poller's operation
     * by invoking the operation's toString method.
     */ toString() {
        return this.operation.toString();
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"koj2f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
parcelHelpers.export(exports, "LroEngine", ()=>_lroEngine.LroEngine
);
var _lroEngine = require("./lroEngine");

},{"./lroEngine":"4NdHH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4NdHH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The LRO Engine, a class that performs polling.
 */ parcelHelpers.export(exports, "LroEngine", ()=>LroEngine
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _operation = require("./operation");
var _poller = require("../poller");
function deserializeState(serializedState) {
    try {
        return JSON.parse(serializedState).state;
    } catch (e) {
        throw new Error(`LroEngine: Unable to deserialize state: ${serializedState}`);
    }
}
class LroEngine extends _poller.Poller {
    constructor(lro, options){
        const { intervalInMs =2000 , resumeFrom  } = options || {
        };
        const state = resumeFrom ? deserializeState(resumeFrom) : {
        };
        const operation = new _operation.GenericPollOperation(state, lro, options === null || options === void 0 ? void 0 : options.lroResourceLocationConfig, options === null || options === void 0 ? void 0 : options.processResult, options === null || options === void 0 ? void 0 : options.updateState, options === null || options === void 0 ? void 0 : options.isDone);
        super(operation);
        this.config = {
            intervalInMs: intervalInMs
        };
        operation.setPollerConfig(this.config);
    }
    /**
     * The method used by the poller to wait before attempting to update its operation.
     */ delay() {
        return new Promise((resolve)=>setTimeout(()=>resolve()
            , this.config.intervalInMs)
        );
    }
}

},{"./operation":"5GqV2","../poller":"9jVUT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5GqV2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GenericPollOperation", ()=>GenericPollOperation
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _stateMachine = require("./stateMachine");
var _requestUtils = require("./requestUtils");
var _logger = require("./logger");
class GenericPollOperation {
    constructor(state, lro, lroResourceLocationConfig, processResult, updateState, isDone){
        this.state = state;
        this.lro = lro;
        this.lroResourceLocationConfig = lroResourceLocationConfig;
        this.processResult = processResult;
        this.updateState = updateState;
        this.isDone = isDone;
    }
    setPollerConfig(pollerConfig) {
        this.pollerConfig = pollerConfig;
    }
    /**
     * General update function for LROPoller, the general process is as follows
     * 1. Check initial operation result to determine the strategy to use
     *  - Strategies: Location, Azure-AsyncOperation, Original Uri
     * 2. Check if the operation result has a terminal state
     *  - Terminal state will be determined by each strategy
     *  2.1 If it is terminal state Check if a final GET request is required, if so
     *      send final GET request and return result from operation. If no final GET
     *      is required, just return the result from operation.
     *      - Determining what to call for final request is responsibility of each strategy
     *  2.2 If it is not terminal state, call the polling operation and go to step 1
     *      - Determining what to call for polling is responsibility of each strategy
     *      - Strategies will always use the latest URI for polling if provided otherwise
     *        the last known one
     */ async update(options) {
        var _a, _b, _c;
        const state = this.state;
        let lastResponse = undefined;
        if (!state.isStarted) {
            const initializeState = _stateMachine.createInitializeState(state, this.lro.requestPath, this.lro.requestMethod);
            lastResponse = await this.lro.sendInitialRequest();
            initializeState(lastResponse);
        }
        if (!state.isCompleted) {
            if (!this.poll || !this.getLroStatusFromResponse) {
                if (!state.config) throw new Error("Bad state: LRO mode is undefined. Please check if the serialized state is well-formed.");
                const isDone = this.isDone;
                this.getLroStatusFromResponse = isDone ? (response)=>Object.assign(Object.assign({
                    }, response), {
                        done: isDone(response.flatResponse, this.state)
                    })
                 : _stateMachine.createGetLroStatusFromResponse(this.lro, state.config, this.lroResourceLocationConfig);
                this.poll = _stateMachine.createPoll(this.lro);
            }
            if (!state.pollingURL) throw new Error("Bad state: polling URL is undefined. Please check if the serialized state is well-formed.");
            const currentState = await this.poll(state.pollingURL, this.pollerConfig, this.getLroStatusFromResponse);
            _logger.logger.verbose(`LRO: polling response: ${JSON.stringify(currentState.rawResponse)}`);
            if (currentState.done) {
                state.result = this.processResult ? this.processResult(currentState.flatResponse, state) : currentState.flatResponse;
                state.isCompleted = true;
            } else {
                this.poll = (_a = currentState.next) !== null && _a !== void 0 ? _a : this.poll;
                state.pollingURL = _requestUtils.getPollingUrl(currentState.rawResponse, state.pollingURL);
            }
            lastResponse = currentState;
        }
        _logger.logger.verbose(`LRO: current state: ${JSON.stringify(state)}`);
        if (lastResponse) (_b = this.updateState) === null || _b === void 0 || _b.call(this, state, lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.rawResponse);
        else _logger.logger.error(`LRO: no response was received`);
        (_c = options === null || options === void 0 ? void 0 : options.fireProgress) === null || _c === void 0 || _c.call(options, state);
        return this;
    }
    async cancel() {
        this.state.isCancelled = true;
        return this;
    }
    /**
     * Serializes the Poller operation.
     */ toString() {
        return JSON.stringify({
            state: this.state
        });
    }
}

},{"./stateMachine":"8cOOR","./requestUtils":"kSi4c","./logger":"A60U1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8cOOR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * creates a stepping function that maps an LRO state to another.
 */ parcelHelpers.export(exports, "createGetLroStatusFromResponse", ()=>createGetLroStatusFromResponse
);
/**
 * Creates a polling operation.
 */ parcelHelpers.export(exports, "createPoll", ()=>createPoll
);
/**
 * Creates a callback to be used to initialize the polling operation state.
 * @param state - of the polling operation
 * @param operationSpec - of the LRO
 * @param callback - callback to be called when the operation is done
 * @returns callback that initializes the state of the polling operation
 */ parcelHelpers.export(exports, "createInitializeState", ()=>createInitializeState
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _requestUtils = require("./requestUtils");
var _bodyPolling = require("./bodyPolling");
var _logger = require("./logger");
var _locationPolling = require("./locationPolling");
var _passthrough = require("./passthrough");
function createGetLroStatusFromResponse(lroPrimitives, config, lroResourceLocationConfig) {
    switch(config.mode){
        case "Location":
            return _locationPolling.processLocationPollingOperationResult(lroPrimitives, config.resourceLocation, lroResourceLocationConfig);
        case "Body":
            return _bodyPolling.processBodyPollingOperationResult;
        default:
            return _passthrough.processPassthroughOperationResult;
    }
}
function createPoll(lroPrimitives) {
    return async (path, pollerConfig, getLroStatusFromResponse)=>{
        const response = await lroPrimitives.sendPollRequest(path);
        const retryAfter = response.rawResponse.headers["retry-after"];
        if (retryAfter !== undefined) {
            // Retry-After header value is either in HTTP date format, or in seconds
            const retryAfterInSeconds = parseInt(retryAfter);
            pollerConfig.intervalInMs = isNaN(retryAfterInSeconds) ? calculatePollingIntervalFromDate(new Date(retryAfter), pollerConfig.intervalInMs) : retryAfterInSeconds * 1000;
        }
        return getLroStatusFromResponse(response);
    };
}
function calculatePollingIntervalFromDate(retryAfterDate, defaultIntervalInMs) {
    const timeNow = Math.floor(new Date().getTime());
    const retryAfterTime = retryAfterDate.getTime();
    if (timeNow < retryAfterTime) return retryAfterTime - timeNow;
    return defaultIntervalInMs;
}
function createInitializeState(state, requestPath, requestMethod) {
    return (response)=>{
        if (_requestUtils.isUnexpectedInitialResponse(response.rawResponse)) return true;
        state.initialRawResponse = response.rawResponse;
        state.isStarted = true;
        state.pollingURL = _requestUtils.getPollingUrl(state.initialRawResponse, requestPath);
        state.config = _requestUtils.inferLroMode(requestPath, requestMethod, state.initialRawResponse);
        /** short circuit polling if body polling is done in the initial request */ if (state.config.mode === undefined || state.config.mode === "Body" && _bodyPolling.isBodyPollingDone(state.initialRawResponse)) {
            state.result = response.flatResponse;
            state.isCompleted = true;
        }
        _logger.logger.verbose(`LRO: initial state: ${JSON.stringify(state)}`);
        return Boolean(state.isCompleted);
    };
}

},{"./requestUtils":"kSi4c","./bodyPolling":"lj6u3","./logger":"A60U1","./locationPolling":"ifSMT","./passthrough":"NVFgy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kSi4c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Detects where the continuation token is and returns it. Notice that azure-asyncoperation
 * must be checked first before the other location headers because there are scenarios
 * where both azure-asyncoperation and location could be present in the same response but
 * azure-asyncoperation should be the one to use for polling.
 */ parcelHelpers.export(exports, "getPollingUrl", ()=>getPollingUrl
);
parcelHelpers.export(exports, "inferLroMode", ()=>inferLroMode
);
parcelHelpers.export(exports, "isUnexpectedInitialResponse", ()=>isUnexpectedInitialResponse
);
parcelHelpers.export(exports, "isUnexpectedPollingResponse", ()=>isUnexpectedPollingResponse
);
function getPollingUrl(rawResponse, defaultPath) {
    var _a, _b, _c;
    return (_c = (_b = (_a = getAzureAsyncOperation(rawResponse)) !== null && _a !== void 0 ? _a : getOperationLocation(rawResponse)) !== null && _b !== void 0 ? _b : getLocation(rawResponse)) !== null && _c !== void 0 ? _c : defaultPath;
}
function getLocation(rawResponse) {
    return rawResponse.headers["location"];
}
function getOperationLocation(rawResponse) {
    return rawResponse.headers["operation-location"];
}
function getAzureAsyncOperation(rawResponse) {
    return rawResponse.headers["azure-asyncoperation"];
}
function findResourceLocation(requestMethod, rawResponse, requestPath) {
    switch(requestMethod){
        case "PUT":
            return requestPath;
        case "POST":
        case "PATCH":
            return getLocation(rawResponse);
        default:
            return undefined;
    }
}
function inferLroMode(requestPath, requestMethod, rawResponse) {
    if (getAzureAsyncOperation(rawResponse) !== undefined || getOperationLocation(rawResponse) !== undefined) return {
        mode: "Location",
        resourceLocation: findResourceLocation(requestMethod, rawResponse, requestPath)
    };
    else if (getLocation(rawResponse) !== undefined) return {
        mode: "Location"
    };
    else if ([
        "PUT",
        "PATCH"
    ].includes(requestMethod)) return {
        mode: "Body"
    };
    return {
    };
}
class SimpleRestError extends Error {
    constructor(message, statusCode){
        super(message);
        this.name = "RestError";
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, SimpleRestError.prototype);
    }
}
function isUnexpectedInitialResponse(rawResponse) {
    const code = rawResponse.statusCode;
    if (![
        203,
        204,
        202,
        201,
        200,
        500
    ].includes(code)) throw new SimpleRestError(`Received unexpected HTTP status code ${code} in the initial response. This may indicate a server issue.`, code);
    return false;
}
function isUnexpectedPollingResponse(rawResponse) {
    const code = rawResponse.statusCode;
    if (![
        202,
        201,
        200,
        500
    ].includes(code)) throw new SimpleRestError(`Received unexpected HTTP status code ${code} while polling. This may indicate a server issue.`, code);
    return false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lj6u3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBodyPollingDone", ()=>isBodyPollingDone
);
/**
 * Creates a polling strategy based on BodyPolling which uses the provisioning state
 * from the result to determine the current operation state
 */ parcelHelpers.export(exports, "processBodyPollingOperationResult", ()=>processBodyPollingOperationResult
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _models = require("./models");
var _requestUtils = require("./requestUtils");
function getProvisioningState(rawResponse) {
    var _a, _b;
    const { properties , provisioningState  } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {
    };
    const state = (_b = properties === null || properties === void 0 ? void 0 : properties.provisioningState) !== null && _b !== void 0 ? _b : provisioningState;
    return typeof state === "string" ? state.toLowerCase() : "succeeded";
}
function isBodyPollingDone(rawResponse) {
    const state = getProvisioningState(rawResponse);
    if (_requestUtils.isUnexpectedPollingResponse(rawResponse) || _models.failureStates.includes(state)) throw new Error(`The long running operation has failed. The provisioning state: ${state}.`);
    return _models.successStates.includes(state);
}
function processBodyPollingOperationResult(response) {
    return Object.assign(Object.assign({
    }, response), {
        done: isBodyPollingDone(response.rawResponse)
    });
}

},{"./models":"fHWUA","./requestUtils":"kSi4c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fHWUA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "successStates", ()=>successStates
);
parcelHelpers.export(exports, "failureStates", ()=>failureStates
);
parcelHelpers.export(exports, "terminalStates", ()=>terminalStates
);
const successStates = [
    "succeeded"
];
const failureStates = [
    "failed",
    "canceled",
    "cancelled"
];
const terminalStates = successStates.concat(failureStates);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"A60U1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logger", ()=>logger
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _logger = require("@azure/logger");
const logger = _logger.createClientLogger("core-lro");

},{"@azure/logger":"7TN6Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ifSMT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "processLocationPollingOperationResult", ()=>processLocationPollingOperationResult
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _models = require("./models");
var _requestUtils = require("./requestUtils");
function isPollingDone(rawResponse) {
    var _a;
    if (_requestUtils.isUnexpectedPollingResponse(rawResponse) || rawResponse.statusCode === 202) return false;
    const { status  } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {
    };
    const state = typeof status === "string" ? status.toLowerCase() : "succeeded";
    if (_requestUtils.isUnexpectedPollingResponse(rawResponse) || _models.failureStates.includes(state)) throw new Error(`The long running operation has failed. The provisioning state: ${state}.`);
    return _models.successStates.includes(state);
}
/**
 * Sends a request to the URI of the provisioned resource if needed.
 */ async function sendFinalRequest(lro, resourceLocation, lroResourceLocationConfig) {
    switch(lroResourceLocationConfig){
        case "original-uri":
            return lro.sendPollRequest(lro.requestPath);
        case "azure-async-operation":
            return undefined;
        case "location":
        default:
            return lro.sendPollRequest(resourceLocation !== null && resourceLocation !== void 0 ? resourceLocation : lro.requestPath);
    }
}
function processLocationPollingOperationResult(lro, resourceLocation, lroResourceLocationConfig) {
    return (response)=>{
        if (isPollingDone(response.rawResponse)) {
            if (resourceLocation === undefined) return Object.assign(Object.assign({
            }, response), {
                done: true
            });
            else return Object.assign(Object.assign({
            }, response), {
                done: false,
                next: async ()=>{
                    const finalResponse = await sendFinalRequest(lro, resourceLocation, lroResourceLocationConfig);
                    return Object.assign(Object.assign({
                    }, finalResponse !== null && finalResponse !== void 0 ? finalResponse : response), {
                        done: true
                    });
                }
            });
        }
        return Object.assign(Object.assign({
        }, response), {
            done: false
        });
    };
}

},{"./models":"fHWUA","./requestUtils":"kSi4c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"NVFgy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
parcelHelpers.export(exports, "processPassthroughOperationResult", ()=>processPassthroughOperationResult
);
function processPassthroughOperationResult(response) {
    return Object.assign(Object.assign({
    }, response), {
        done: true
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6C9e2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Generate a range string. For example:
 *
 * "bytes=255-" or "bytes=0-511"
 *
 * @param iRange -
 */ parcelHelpers.export(exports, "rangeToString", ()=>rangeToString
);
function rangeToString(iRange) {
    if (iRange.offset < 0) throw new RangeError(`Range.offset cannot be smaller than 0.`);
    if (iRange.count && iRange.count <= 0) throw new RangeError(`Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.`);
    return iRange.count ? `bytes=${iRange.offset}-${iRange.offset + iRange.count - 1}` : `bytes=${iRange.offset}-`;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l9Xq9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Batch provides basic parallel execution with concurrency limits.
 * Will stop execute left operations when one of the executed operation throws an error.
 * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.
 */ parcelHelpers.export(exports, "Batch", ()=>Batch
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// In browser, during webpack or browserify bundling, this module will be replaced by 'events'
// https://github.com/Gozala/events
var _events = require("events");
/**
 * States for Batch.
 */ var BatchStates;
(function(BatchStates1) {
    BatchStates1[BatchStates1["Good"] = 0] = "Good";
    BatchStates1[BatchStates1["Error"] = 1] = "Error";
})(BatchStates || (BatchStates = {
}));
class Batch {
    /**
     * Creates an instance of Batch.
     * @param concurrency -
     */ constructor(concurrency = 5){
        /**
         * Number of active operations under execution.
         */ this.actives = 0;
        /**
         * Number of completed operations under execution.
         */ this.completed = 0;
        /**
         * Offset of next operation to be executed.
         */ this.offset = 0;
        /**
         * Operation array to be executed.
         */ this.operations = [];
        /**
         * States of Batch. When an error happens, state will turn into error.
         * Batch will stop execute left operations.
         */ this.state = BatchStates.Good;
        if (concurrency < 1) throw new RangeError("concurrency must be larger than 0");
        this.concurrency = concurrency;
        this.emitter = new _events.EventEmitter();
    }
    /**
     * Add a operation into queue.
     *
     * @param operation -
     */ addOperation(operation) {
        this.operations.push(async ()=>{
            try {
                this.actives++;
                await operation();
                this.actives--;
                this.completed++;
                this.parallelExecute();
            } catch (error) {
                this.emitter.emit("error", error);
            }
        });
    }
    /**
     * Start execute operations in the queue.
     *
     */ async do() {
        if (this.operations.length === 0) return Promise.resolve();
        this.parallelExecute();
        return new Promise((resolve, reject)=>{
            this.emitter.on("finish", resolve);
            this.emitter.on("error", (error)=>{
                this.state = BatchStates.Error;
                reject(error);
            });
        });
    }
    /**
     * Get next operation to be executed. Return null when reaching ends.
     *
     */ nextOperation() {
        if (this.offset < this.operations.length) return this.operations[this.offset++];
        return null;
    }
    /**
     * Start execute operations. One one the most important difference between
     * this method with do() is that do() wraps as an sync method.
     *
     */ parallelExecute() {
        if (this.state === BatchStates.Error) return;
        if (this.completed >= this.operations.length) {
            this.emitter.emit("finish");
            return;
        }
        while(this.actives < this.concurrency){
            const operation = this.nextOperation();
            if (operation) operation();
            else return;
        }
    }
}

},{"events":"1VQLm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1VQLm":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== 'function') throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === 'function') emitter.removeListener('error', errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== 'error') addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === 'function') // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"h0c80":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _bufferSchedulerBrowser = require("./BufferScheduler.browser");
parcelHelpers.exportAll(_bufferSchedulerBrowser, exports);

},{"./BufferScheduler.browser":"hSlhb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hSlhb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// This file is used as a shim of "BufferScheduler" for some browser bundlers
// when trying to bundle "BufferScheduler"
// "BufferScheduler" class is only available in Node.js runtime
parcelHelpers.export(exports, "BufferScheduler", ()=>BufferScheduler
);
class BufferScheduler {
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8nPkP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Convert a Browser Blob object into ArrayBuffer.
 *
 * @param blob -
 */ parcelHelpers.export(exports, "blobToArrayBuffer", ()=>blobToArrayBuffer
);
/**
 * Convert a Browser Blob object into string.
 *
 * @param blob -
 */ parcelHelpers.export(exports, "blobToString", ()=>blobToString
);
parcelHelpers.export(exports, "streamToBuffer", ()=>streamToBuffer
);
parcelHelpers.export(exports, "streamToBuffer2", ()=>streamToBuffer2
);
parcelHelpers.export(exports, "readStreamToLocalFile", ()=>readStreamToLocalFile
);
parcelHelpers.export(exports, "fsStat", ()=>fsStat
);
parcelHelpers.export(exports, "fsCreateReadStream", ()=>fsCreateReadStream
);
async function blobToArrayBuffer(blob) {
    const fileReader = new FileReader();
    return new Promise((resolve, reject)=>{
        fileReader.onloadend = (ev)=>{
            resolve(ev.target.result);
        };
        fileReader.onerror = reject;
        fileReader.readAsArrayBuffer(blob);
    });
}
async function blobToString(blob) {
    const fileReader = new FileReader();
    return new Promise((resolve, reject)=>{
        fileReader.onloadend = (ev)=>{
            resolve(ev.target.result);
        };
        fileReader.onerror = reject;
        fileReader.readAsText(blob);
    });
}
function streamToBuffer() {
/* empty */ }
function streamToBuffer2() {
/* empty */ }
function readStreamToLocalFile() {
/* empty */ }
const fsStat = function stat() {
/* empty */ };
const fsCreateReadStream = function createReadStream() {
/* empty */ };

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iF02i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
 */ parcelHelpers.export(exports, "BlobBatchClient", ()=>BlobBatchClient
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _batchResponseParser = require("./BatchResponseParser");
var _batchUtils = require("./BatchUtils");
var _blobBatch = require("./BlobBatch");
var _coreTracing = require("@azure/core-tracing");
var _tracing = require("./utils/tracing");
var _operations = require("./generated/src/operations");
var _anonymousCredential = require("./credentials/AnonymousCredential");
var _storageClientContext = require("./generated/src/storageClientContext");
var _pipeline = require("./Pipeline");
var _utilsCommon = require("./utils/utils.common");
class BlobBatchClient {
    constructor(url, credentialOrPipeline, // Legacy, no fix for eslint error without breaking. Disable it for this interface.
    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/ options){
        let pipeline;
        if (_pipeline.isPipelineLike(credentialOrPipeline)) pipeline = credentialOrPipeline;
        else if (!credentialOrPipeline) // no credential provided
        pipeline = _pipeline.newPipeline(new _anonymousCredential.AnonymousCredential(), options);
        else pipeline = _pipeline.newPipeline(credentialOrPipeline, options);
        const storageClientContext = new _storageClientContext.StorageClientContext(url, pipeline.toServiceClientOptions());
        const path = _utilsCommon.getURLPath(url);
        if (path && path !== "/") // Container scoped.
        this.serviceOrContainerContext = new _operations.Container(storageClientContext);
        else this.serviceOrContainerContext = new _operations.Service(storageClientContext);
    }
    /**
     * Creates a {@link BlobBatch}.
     * A BlobBatch represents an aggregated set of operations on blobs.
     */ createBatch() {
        return new _blobBatch.BlobBatch();
    }
    async deleteBlobs(urlsOrBlobClients, credentialOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.
    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/ options) {
        const batch = new _blobBatch.BlobBatch();
        for (const urlOrBlobClient of urlsOrBlobClients)if (typeof urlOrBlobClient === "string") await batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);
        else await batch.deleteBlob(urlOrBlobClient, credentialOrOptions);
        return this.submitBatch(batch);
    }
    async setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.
    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/ options) {
        const batch = new _blobBatch.BlobBatch();
        for (const urlOrBlobClient of urlsOrBlobClients)if (typeof urlOrBlobClient === "string") await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);
        else await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);
        return this.submitBatch(batch);
    }
    /**
     * Submit batch request which consists of multiple subrequests.
     *
     * Get `blobBatchClient` and other details before running the snippets.
     * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`
     *
     * Example usage:
     *
     * ```js
     * let batchRequest = new BlobBatch();
     * await batchRequest.deleteBlob(urlInString0, credential0);
     * await batchRequest.deleteBlob(urlInString1, credential1, {
     *  deleteSnapshots: "include"
     * });
     * const batchResp = await blobBatchClient.submitBatch(batchRequest);
     * console.log(batchResp.subResponsesSucceededCount);
     * ```
     *
     * Example using a lease:
     *
     * ```js
     * let batchRequest = new BlobBatch();
     * await batchRequest.setBlobAccessTier(blockBlobClient0, "Cool");
     * await batchRequest.setBlobAccessTier(blockBlobClient1, "Cool", {
     *  conditions: { leaseId: leaseId }
     * });
     * const batchResp = await blobBatchClient.submitBatch(batchRequest);
     * console.log(batchResp.subResponsesSucceededCount);
     * ```
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
     *
     * @param batchRequest - A set of Delete or SetTier operations.
     * @param options -
     */ async submitBatch(batchRequest, options = {
    }) {
        if (!batchRequest || batchRequest.getSubRequests().size === 0) throw new RangeError("Batch request should contain one or more sub requests.");
        const { span , updatedOptions  } = _tracing.createSpan("BlobBatchClient-submitBatch", options);
        try {
            const batchRequestBody = batchRequest.getHttpRequestBody();
            // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.
            const rawBatchResponse = await this.serviceOrContainerContext.submitBatch(_batchUtils.utf8ByteLength(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign(Object.assign({
            }, options), _tracing.convertTracingToRequestOptionsBase(updatedOptions)));
            // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).
            const batchResponseParser = new _batchResponseParser.BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());
            const responseSummary = await batchResponseParser.parseBatchResponse();
            const res = {
                _response: rawBatchResponse._response,
                contentType: rawBatchResponse.contentType,
                errorCode: rawBatchResponse.errorCode,
                requestId: rawBatchResponse.requestId,
                clientRequestId: rawBatchResponse.clientRequestId,
                version: rawBatchResponse.version,
                subResponses: responseSummary.subResponses,
                subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,
                subResponsesFailedCount: responseSummary.subResponsesFailedCount
            };
            return res;
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
}

},{"./BatchResponseParser":"2RaIN","./BatchUtils":"39BTR","./BlobBatch":"Lat0V","@azure/core-tracing":"7R1NC","./utils/tracing":"m0KjB","./generated/src/operations":"j9faG","./credentials/AnonymousCredential":"f0sOe","./generated/src/storageClientContext":"a1Au7","./Pipeline":"bsozg","./utils/utils.common":"2SR3M","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2RaIN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Util class for parsing batch response.
 */ parcelHelpers.export(exports, "BatchResponseParser", ()=>BatchResponseParser
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreHttp = require("@azure/core-http");
var _constants = require("./utils/constants");
var _batchUtils = require("./BatchUtils");
var _log = require("./log");
const HTTP_HEADER_DELIMITER = ": ";
const SPACE_DELIMITER = " ";
const NOT_FOUND = -1;
class BatchResponseParser {
    constructor(batchResponse, subRequests){
        if (!batchResponse || !batchResponse.contentType) // In special case(reported), server may return invalid content-type which could not be parsed.
        throw new RangeError("batchResponse is malformed or doesn't contain valid content-type.");
        if (!subRequests || subRequests.size === 0) // This should be prevent during coding.
        throw new RangeError("Invalid state: subRequests is not provided or size is 0.");
        this.batchResponse = batchResponse;
        this.subRequests = subRequests;
        this.responseBatchBoundary = this.batchResponse.contentType.split("=")[1];
        this.perResponsePrefix = `--${this.responseBatchBoundary}${_constants.HTTP_LINE_ENDING}`;
        this.batchResponseEnding = `--${this.responseBatchBoundary}--`;
    }
    // For example of response, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#response
    async parseBatchResponse() {
        // When logic reach here, suppose batch request has already succeeded with 202, so we can further parse
        // sub request's response.
        if (this.batchResponse._response.status !== _constants.HTTPURLConnection.HTTP_ACCEPTED) throw new Error(`Invalid state: batch request failed with status: '${this.batchResponse._response.status}'.`);
        const responseBodyAsText = await _batchUtils.getBodyAsText(this.batchResponse);
        const subResponses = responseBodyAsText.split(this.batchResponseEnding)[0] // string after ending is useless
        .split(this.perResponsePrefix).slice(1); // string before first response boundary is useless
        const subResponseCount = subResponses.length;
        // Defensive coding in case of potential error parsing.
        // Note: subResponseCount == 1 is special case where sub request is invalid.
        // We try to prevent such cases through early validation, e.g. validate sub request count >= 1.
        // While in unexpected sub request invalid case, we allow sub response to be parsed and return to user.
        if (subResponseCount !== this.subRequests.size && subResponseCount !== 1) throw new Error("Invalid state: sub responses' count is not equal to sub requests' count.");
        const deserializedSubResponses = new Array(subResponseCount);
        let subResponsesSucceededCount = 0;
        let subResponsesFailedCount = 0;
        // Parse sub subResponses.
        for(let index = 0; index < subResponseCount; index++){
            const subResponse = subResponses[index];
            const deserializedSubResponse = {
            };
            deserializedSubResponse.headers = new _coreHttp.HttpHeaders();
            const responseLines = subResponse.split(`${_constants.HTTP_LINE_ENDING}`);
            let subRespHeaderStartFound = false;
            let subRespHeaderEndFound = false;
            let subRespFailed = false;
            let contentId = NOT_FOUND;
            for (const responseLine of responseLines){
                if (!subRespHeaderStartFound) {
                    // Convention line to indicate content ID
                    if (responseLine.startsWith(_constants.HeaderConstants.CONTENT_ID)) contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);
                    // Http version line with status code indicates the start of sub request's response.
                    // Example: HTTP/1.1 202 Accepted
                    if (responseLine.startsWith(_constants.HTTP_VERSION_1_1)) {
                        subRespHeaderStartFound = true;
                        const tokens = responseLine.split(SPACE_DELIMITER);
                        deserializedSubResponse.status = parseInt(tokens[1]);
                        deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);
                    }
                    continue; // Skip convention headers not specifically for sub request i.e. Content-Type: application/http and Content-ID: *
                }
                if (responseLine.trim() === "") {
                    // Sub response's header start line already found, and the first empty line indicates header end line found.
                    if (!subRespHeaderEndFound) subRespHeaderEndFound = true;
                    continue; // Skip empty line
                }
                // Note: when code reach here, it indicates subRespHeaderStartFound == true
                if (!subRespHeaderEndFound) {
                    if (responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1) // Defensive coding to prevent from missing valuable lines.
                    throw new Error(`Invalid state: find non-empty line '${responseLine}' without HTTP header delimiter '${HTTP_HEADER_DELIMITER}'.`);
                    // Parse headers of sub response.
                    const tokens = responseLine.split(HTTP_HEADER_DELIMITER);
                    deserializedSubResponse.headers.set(tokens[0], tokens[1]);
                    if (tokens[0] === _constants.HeaderConstants.X_MS_ERROR_CODE) {
                        deserializedSubResponse.errorCode = tokens[1];
                        subRespFailed = true;
                    }
                } else {
                    // Assemble body of sub response.
                    if (!deserializedSubResponse.bodyAsText) deserializedSubResponse.bodyAsText = "";
                    deserializedSubResponse.bodyAsText += responseLine;
                }
            } // Inner for end
            // The response will contain the Content-ID header for each corresponding subrequest response to use for tracking.
            // The Content-IDs are set to a valid index in the subrequests we sent. In the status code 202 path, we could expect it
            // to be 1-1 mapping from the [0, subRequests.size) to the Content-IDs returned. If not, we simply don't return that
            // unexpected subResponse in the parsed reponse and we can always look it up in the raw response for debugging purpose.
            if (contentId !== NOT_FOUND && Number.isInteger(contentId) && contentId >= 0 && contentId < this.subRequests.size && deserializedSubResponses[contentId] === undefined) {
                deserializedSubResponse._request = this.subRequests.get(contentId);
                deserializedSubResponses[contentId] = deserializedSubResponse;
            } else _log.logger.error(`subResponses[${index}] is dropped as the Content-ID is not found or invalid, Content-ID: ${contentId}`);
            if (subRespFailed) subResponsesFailedCount++;
            else subResponsesSucceededCount++;
        }
        return {
            subResponses: deserializedSubResponses,
            subResponsesSucceededCount: subResponsesSucceededCount,
            subResponsesFailedCount: subResponsesFailedCount
        };
    }
}

},{"@azure/core-http":"iSINq","./utils/constants":"4gX5x","./BatchUtils":"39BTR","./log":"gc1Rl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"39BTR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getBodyAsText", ()=>getBodyAsText
);
parcelHelpers.export(exports, "utf8ByteLength", ()=>utf8ByteLength
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _utilsBrowser = require("./utils/utils.browser");
async function getBodyAsText(batchResponse) {
    const blob = await batchResponse.blobBody;
    return _utilsBrowser.blobToString(blob);
}
function utf8ByteLength(str) {
    return new Blob([
        str
    ]).size;
}

},{"./utils/utils.browser":"8nPkP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Lat0V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A BlobBatch represents an aggregated set of operations on blobs.
 * Currently, only `delete` and `setAccessTier` are supported.
 */ parcelHelpers.export(exports, "BlobBatch", ()=>BlobBatch
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreHttp = require("@azure/core-http");
var _coreTracing = require("@azure/core-tracing");
var _anonymousCredential = require("./credentials/AnonymousCredential");
var _clients = require("./Clients");
var _mutex = require("./utils/Mutex");
var _pipeline = require("./Pipeline");
var _utilsCommon = require("./utils/utils.common");
var _constants = require("./utils/constants");
var _storageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");
var _tracing = require("./utils/tracing");
class BlobBatch {
    constructor(){
        this.batch = "batch";
        this.batchRequest = new InnerBatchRequest();
    }
    /**
     * Get the value of Content-Type for a batch request.
     * The value must be multipart/mixed with a batch boundary.
     * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252
     */ getMultiPartContentType() {
        return this.batchRequest.getMultipartContentType();
    }
    /**
     * Get assembled HTTP request body for sub requests.
     */ getHttpRequestBody() {
        return this.batchRequest.getHttpRequestBody();
    }
    /**
     * Get sub requests that are added into the batch request.
     */ getSubRequests() {
        return this.batchRequest.getSubRequests();
    }
    async addSubRequestInternal(subRequest, assembleSubRequestFunc) {
        await _mutex.Mutex.lock(this.batch);
        try {
            this.batchRequest.preAddSubRequest(subRequest);
            await assembleSubRequestFunc();
            this.batchRequest.postAddSubRequest(subRequest);
        } finally{
            await _mutex.Mutex.unlock(this.batch);
        }
    }
    setBatchType(batchType) {
        if (!this.batchType) this.batchType = batchType;
        if (this.batchType !== batchType) throw new RangeError(`BlobBatch only supports one operation type per batch and it already is being used for ${this.batchType} operations.`);
    }
    async deleteBlob(urlOrBlobClient, credentialOrOptions, options) {
        let url;
        let credential;
        if (typeof urlOrBlobClient === "string" && (_coreHttp.isNode && credentialOrOptions instanceof _storageSharedKeyCredential.StorageSharedKeyCredential || credentialOrOptions instanceof _anonymousCredential.AnonymousCredential || _coreHttp.isTokenCredential(credentialOrOptions))) {
            // First overload
            url = urlOrBlobClient;
            credential = credentialOrOptions;
        } else if (urlOrBlobClient instanceof _clients.BlobClient) {
            // Second overload
            url = urlOrBlobClient.url;
            credential = urlOrBlobClient.credential;
            options = credentialOrOptions;
        } else throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
        if (!options) options = {
        };
        const { span , updatedOptions  } = _tracing.createSpan("BatchDeleteRequest-addSubRequest", options);
        try {
            this.setBatchType("delete");
            await this.addSubRequestInternal({
                url: url,
                credential: credential
            }, async ()=>{
                await new _clients.BlobClient(url, this.batchRequest.createPipeline(credential)).delete(updatedOptions);
            });
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
    async setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options) {
        let url;
        let credential;
        let tier;
        if (typeof urlOrBlobClient === "string" && (_coreHttp.isNode && credentialOrTier instanceof _storageSharedKeyCredential.StorageSharedKeyCredential || credentialOrTier instanceof _anonymousCredential.AnonymousCredential || _coreHttp.isTokenCredential(credentialOrTier))) {
            // First overload
            url = urlOrBlobClient;
            credential = credentialOrTier;
            tier = tierOrOptions;
        } else if (urlOrBlobClient instanceof _clients.BlobClient) {
            // Second overload
            url = urlOrBlobClient.url;
            credential = urlOrBlobClient.credential;
            tier = credentialOrTier;
            options = tierOrOptions;
        } else throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
        if (!options) options = {
        };
        const { span , updatedOptions  } = _tracing.createSpan("BatchSetTierRequest-addSubRequest", options);
        try {
            this.setBatchType("setAccessTier");
            await this.addSubRequestInternal({
                url: url,
                credential: credential
            }, async ()=>{
                await new _clients.BlobClient(url, this.batchRequest.createPipeline(credential)).setAccessTier(tier, updatedOptions);
            });
        } catch (e) {
            span.setStatus({
                code: _coreTracing.SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        } finally{
            span.end();
        }
    }
}
/**
 * Inner batch request class which is responsible for assembling and serializing sub requests.
 * See https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#request-body for how requests are assembled.
 */ class InnerBatchRequest {
    constructor(){
        this.operationCount = 0;
        this.body = "";
        const tempGuid = _coreHttp.generateUuid();
        // batch_{batchid}
        this.boundary = `batch_${tempGuid}`;
        // --batch_{batchid}
        // Content-Type: application/http
        // Content-Transfer-Encoding: binary
        this.subRequestPrefix = `--${this.boundary}${_constants.HTTP_LINE_ENDING}${_constants.HeaderConstants.CONTENT_TYPE}: application/http${_constants.HTTP_LINE_ENDING}${_constants.HeaderConstants.CONTENT_TRANSFER_ENCODING}: binary`;
        // multipart/mixed; boundary=batch_{batchid}
        this.multipartContentType = `multipart/mixed; boundary=${this.boundary}`;
        // --batch_{batchid}--
        this.batchRequestEnding = `--${this.boundary}--`;
        this.subRequests = new Map();
    }
    /**
     * Create pipeline to assemble sub requests. The idea here is to use existing
     * credential and serialization/deserialization components, with additional policies to
     * filter unnecessary headers, assemble sub requests into request's body
     * and intercept request from going to wire.
     * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
     */ createPipeline(credential) {
        const isAnonymousCreds = credential instanceof _anonymousCredential.AnonymousCredential;
        const policyFactoryLength = 3 + (isAnonymousCreds ? 0 : 1); // [deserializationPolicy, BatchHeaderFilterPolicyFactory, (Optional)Credential, BatchRequestAssemblePolicyFactory]
        const factories = new Array(policyFactoryLength);
        factories[0] = _coreHttp.deserializationPolicy(); // Default deserializationPolicy is provided by protocol layer
        factories[1] = new BatchHeaderFilterPolicyFactory(); // Use batch header filter policy to exclude unnecessary headers
        if (!isAnonymousCreds) factories[2] = _coreHttp.isTokenCredential(credential) ? _utilsCommon.attachCredential(_coreHttp.bearerTokenAuthenticationPolicy(credential, _constants.StorageOAuthScopes), credential) : credential;
        factories[policyFactoryLength - 1] = new BatchRequestAssemblePolicyFactory(this); // Use batch assemble policy to assemble request and intercept request from going to wire
        return new _pipeline.Pipeline(factories, {
        });
    }
    appendSubRequestToBody(request) {
        // Start to assemble sub request
        this.body += [
            this.subRequestPrefix,
            `${_constants.HeaderConstants.CONTENT_ID}: ${this.operationCount}`,
            "",
            `${request.method.toString()} ${_utilsCommon.getURLPathAndQuery(request.url)} ${_constants.HTTP_VERSION_1_1}${_constants.HTTP_LINE_ENDING}`
        ].join(_constants.HTTP_LINE_ENDING);
        for (const header of request.headers.headersArray())this.body += `${header.name}: ${header.value}${_constants.HTTP_LINE_ENDING}`;
        this.body += _constants.HTTP_LINE_ENDING; // sub request's headers need be ending with an empty line
    // No body to assemble for current batch request support
    // End to assemble sub request
    }
    preAddSubRequest(subRequest) {
        if (this.operationCount >= _constants.BATCH_MAX_REQUEST) throw new RangeError(`Cannot exceed ${_constants.BATCH_MAX_REQUEST} sub requests in a single batch`);
        // Fast fail if url for sub request is invalid
        const path = _utilsCommon.getURLPath(subRequest.url);
        if (!path || path === "") throw new RangeError(`Invalid url for sub request: '${subRequest.url}'`);
    }
    postAddSubRequest(subRequest) {
        this.subRequests.set(this.operationCount, subRequest);
        this.operationCount++;
    }
    // Return the http request body with assembling the ending line to the sub request body.
    getHttpRequestBody() {
        return `${this.body}${this.batchRequestEnding}${_constants.HTTP_LINE_ENDING}`;
    }
    getMultipartContentType() {
        return this.multipartContentType;
    }
    getSubRequests() {
        return this.subRequests;
    }
}
class BatchRequestAssemblePolicy extends _coreHttp.BaseRequestPolicy {
    constructor(batchRequest, nextPolicy, options){
        super(nextPolicy, options);
        this.dummyResponse = {
            request: new _coreHttp.WebResource(),
            status: 200,
            headers: new _coreHttp.HttpHeaders()
        };
        this.batchRequest = batchRequest;
    }
    async sendRequest(request) {
        await this.batchRequest.appendSubRequestToBody(request);
        return this.dummyResponse; // Intercept request from going to wire
    }
}
class BatchRequestAssemblePolicyFactory {
    constructor(batchRequest){
        this.batchRequest = batchRequest;
    }
    create(nextPolicy, options) {
        return new BatchRequestAssemblePolicy(this.batchRequest, nextPolicy, options);
    }
}
class BatchHeaderFilterPolicy extends _coreHttp.BaseRequestPolicy {
    // The base class has a protected constructor. Adding a public one to enable constructing of this class.
    /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/ constructor(nextPolicy, options){
        super(nextPolicy, options);
    }
    async sendRequest(request) {
        let xMsHeaderName = "";
        for (const header of request.headers.headersArray())if (_utilsCommon.iEqual(header.name, _constants.HeaderConstants.X_MS_VERSION)) xMsHeaderName = header.name;
        if (xMsHeaderName !== "") request.headers.remove(xMsHeaderName); // The subrequests should not have the x-ms-version header.
        return this._nextPolicy.sendRequest(request);
    }
}
class BatchHeaderFilterPolicyFactory {
    create(nextPolicy, options) {
        return new BatchHeaderFilterPolicy(nextPolicy, options);
    }
}

},{"@azure/core-http":"iSINq","@azure/core-tracing":"7R1NC","./credentials/AnonymousCredential":"f0sOe","./Clients":"kUV1b","./utils/Mutex":"2uuRL","./Pipeline":"bsozg","./utils/utils.common":"2SR3M","./utils/constants":"4gX5x","./credentials/StorageSharedKeyCredential":"jUFIX","./utils/tracing":"m0KjB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2uuRL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * An async mutex lock.
 */ parcelHelpers.export(exports, "Mutex", ()=>Mutex
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var MutexLockStatus;
(function(MutexLockStatus1) {
    MutexLockStatus1[MutexLockStatus1["LOCKED"] = 0] = "LOCKED";
    MutexLockStatus1[MutexLockStatus1["UNLOCKED"] = 1] = "UNLOCKED";
})(MutexLockStatus || (MutexLockStatus = {
}));
class Mutex {
    /**
     * Lock for a specific key. If the lock has been acquired by another customer, then
     * will wait until getting the lock.
     *
     * @param key - lock key
     */ static async lock(key) {
        return new Promise((resolve)=>{
            if (this.keys[key] === undefined || this.keys[key] === MutexLockStatus.UNLOCKED) {
                this.keys[key] = MutexLockStatus.LOCKED;
                resolve();
            } else this.onUnlockEvent(key, ()=>{
                this.keys[key] = MutexLockStatus.LOCKED;
                resolve();
            });
        });
    }
    /**
     * Unlock a key.
     *
     * @param key -
     */ static async unlock(key) {
        return new Promise((resolve)=>{
            if (this.keys[key] === MutexLockStatus.LOCKED) this.emitUnlockEvent(key);
            delete this.keys[key];
            resolve();
        });
    }
    static onUnlockEvent(key, handler) {
        if (this.listeners[key] === undefined) this.listeners[key] = [
            handler
        ];
        else this.listeners[key].push(handler);
    }
    static emitUnlockEvent(key) {
        if (this.listeners[key] !== undefined && this.listeners[key].length > 0) {
            const handler = this.listeners[key].shift();
            setImmediate(()=>{
                handler.call(this);
            });
        }
    }
}
Mutex.keys = {
};
Mutex.listeners = {
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6o5vI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _coreAsynciteratorPolyfill = require("@azure/core-asynciterator-polyfill");
var _models = require("./models");
parcelHelpers.exportAll(_models, exports);
var _getPagedAsyncIterator = require("./getPagedAsyncIterator");
parcelHelpers.exportAll(_getPagedAsyncIterator, exports);

},{"@azure/core-asynciterator-polyfill":"7M3bg","./models":"i8Tpa","./getPagedAsyncIterator":"6ap5f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i8Tpa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6ap5f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * returns an async iterator that iterates over results. It also has a `byPage`
 * method that returns pages of items at once.
 *
 * @param pagedResult - an object that specifies how to get pages.
 * @returns a paged async iterator that iterates over results.
 */ parcelHelpers.export(exports, "getPagedAsyncIterator", ()=>getPagedAsyncIterator
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _tslib = require("tslib");
function getPagedAsyncIterator(pagedResult) {
    var _a;
    const iter = getItemAsyncIterator(pagedResult);
    return {
        next () {
            return iter.next();
        },
        [Symbol.asyncIterator] () {
            return this;
        },
        byPage: (_a = pagedResult === null || pagedResult === void 0 ? void 0 : pagedResult.byPage) !== null && _a !== void 0 ? _a : (settings)=>{
            return getPageAsyncIterator(pagedResult, settings === null || settings === void 0 ? void 0 : settings.maxPageSize);
        }
    };
}
function getItemAsyncIterator(pagedResult, maxPageSize) {
    return _tslib.__asyncGenerator(this, arguments, function* getItemAsyncIterator_1() {
        var e_1, _a;
        const pages = getPageAsyncIterator(pagedResult, maxPageSize);
        const firstVal = yield _tslib.__await(pages.next());
        // if the result does not have an array shape, i.e. TPage = TElement, then we return it as is
        if (!Array.isArray(firstVal.value)) {
            yield yield _tslib.__await(firstVal.value);
            // `pages` is of type `AsyncIterableIterator<TPage>` but TPage = TElement in this case
            yield _tslib.__await((yield* _tslib.__asyncDelegator(_tslib.__asyncValues(pages))));
        } else {
            yield _tslib.__await((yield* _tslib.__asyncDelegator(_tslib.__asyncValues(firstVal.value))));
            try {
                for(var pages_1 = _tslib.__asyncValues(pages), pages_1_1; pages_1_1 = yield _tslib.__await(pages_1.next()), !pages_1_1.done;){
                    const page = pages_1_1.value;
                    // pages is of type `AsyncIterableIterator<TPage>` so `page` is of type `TPage`. In this branch,
                    // it must be the case that `TPage = TElement[]`
                    yield _tslib.__await((yield* _tslib.__asyncDelegator(_tslib.__asyncValues(page))));
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally{
                try {
                    if (pages_1_1 && !pages_1_1.done && (_a = pages_1.return)) yield _tslib.__await(_a.call(pages_1));
                } finally{
                    if (e_1) throw e_1.error;
                }
            }
        }
    });
}
function getPageAsyncIterator(pagedResult, maxPageSize) {
    return _tslib.__asyncGenerator(this, arguments, function* getPageAsyncIterator_1() {
        let response = yield _tslib.__await(pagedResult.getPage(pagedResult.firstPageLink, maxPageSize));
        yield yield _tslib.__await(response.page);
        while(response.nextPageLink){
            response = yield _tslib.__await(pagedResult.getPage(response.nextPageLink, maxPageSize));
            yield yield _tslib.__await(response.page);
        }
    });
}

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8tbmf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value
 * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the
 * values are set, this should be serialized with toString and set as the permissions field on an
 * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but
 * the order of the permissions is particular and this class guarantees correctness.
 */ parcelHelpers.export(exports, "AccountSASPermissions", ()=>AccountSASPermissions
);
class AccountSASPermissions {
    constructor(){
        /**
         * Permission to read resources and list queues and tables granted.
         */ this.read = false;
        /**
         * Permission to write resources granted.
         */ this.write = false;
        /**
         * Permission to create blobs and files granted.
         */ this.delete = false;
        /**
         * Permission to delete versions granted.
         */ this.deleteVersion = false;
        /**
         * Permission to list blob containers, blobs, shares, directories, and files granted.
         */ this.list = false;
        /**
         * Permission to add messages, table entities, and append to blobs granted.
         */ this.add = false;
        /**
         * Permission to create blobs and files granted.
         */ this.create = false;
        /**
         * Permissions to update messages and table entities granted.
         */ this.update = false;
        /**
         * Permission to get and delete messages granted.
         */ this.process = false;
        /**
         * Specfies Tag access granted.
         */ this.tag = false;
        /**
         * Permission to filter blobs.
         */ this.filter = false;
        /**
         * Permission to set immutability policy.
         */ this.setImmutabilityPolicy = false;
        /**
         * Specifies that Permanent Delete is permitted.
         */ this.permanentDelete = false;
    }
    /**
     * Parse initializes the AccountSASPermissions fields from a string.
     *
     * @param permissions -
     */ static parse(permissions) {
        const accountSASPermissions = new AccountSASPermissions();
        for (const c of permissions)switch(c){
            case "r":
                accountSASPermissions.read = true;
                break;
            case "w":
                accountSASPermissions.write = true;
                break;
            case "d":
                accountSASPermissions.delete = true;
                break;
            case "x":
                accountSASPermissions.deleteVersion = true;
                break;
            case "l":
                accountSASPermissions.list = true;
                break;
            case "a":
                accountSASPermissions.add = true;
                break;
            case "c":
                accountSASPermissions.create = true;
                break;
            case "u":
                accountSASPermissions.update = true;
                break;
            case "p":
                accountSASPermissions.process = true;
                break;
            case "t":
                accountSASPermissions.tag = true;
                break;
            case "f":
                accountSASPermissions.filter = true;
                break;
            case "i":
                accountSASPermissions.setImmutabilityPolicy = true;
                break;
            case "y":
                accountSASPermissions.permanentDelete = true;
                break;
            default:
                throw new RangeError(`Invalid permission character: ${c}`);
        }
        return accountSASPermissions;
    }
    /**
     * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it
     * and boolean values for them.
     *
     * @param permissionLike -
     */ static from(permissionLike) {
        const accountSASPermissions = new AccountSASPermissions();
        if (permissionLike.read) accountSASPermissions.read = true;
        if (permissionLike.write) accountSASPermissions.write = true;
        if (permissionLike.delete) accountSASPermissions.delete = true;
        if (permissionLike.deleteVersion) accountSASPermissions.deleteVersion = true;
        if (permissionLike.filter) accountSASPermissions.filter = true;
        if (permissionLike.tag) accountSASPermissions.tag = true;
        if (permissionLike.list) accountSASPermissions.list = true;
        if (permissionLike.add) accountSASPermissions.add = true;
        if (permissionLike.create) accountSASPermissions.create = true;
        if (permissionLike.update) accountSASPermissions.update = true;
        if (permissionLike.process) accountSASPermissions.process = true;
        if (permissionLike.setImmutabilityPolicy) accountSASPermissions.setImmutabilityPolicy = true;
        if (permissionLike.permanentDelete) accountSASPermissions.permanentDelete = true;
        return accountSASPermissions;
    }
    /**
     * Produces the SAS permissions string for an Azure Storage account.
     * Call this method to set AccountSASSignatureValues Permissions field.
     *
     * Using this method will guarantee the resource types are in
     * an order accepted by the service.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
     *
     */ toString() {
        // The order of the characters should be as specified here to ensure correctness:
        // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
        // Use a string array instead of string concatenating += operator for performance
        const permissions = [];
        if (this.read) permissions.push("r");
        if (this.write) permissions.push("w");
        if (this.delete) permissions.push("d");
        if (this.deleteVersion) permissions.push("x");
        if (this.filter) permissions.push("f");
        if (this.tag) permissions.push("t");
        if (this.list) permissions.push("l");
        if (this.add) permissions.push("a");
        if (this.create) permissions.push("c");
        if (this.update) permissions.push("u");
        if (this.process) permissions.push("p");
        if (this.setImmutabilityPolicy) permissions.push("i");
        if (this.permanentDelete) permissions.push("y");
        return permissions.join("");
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d00sP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual
 * REST request.
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
 *
 * @param accountSASSignatureValues -
 * @param sharedKeyCredential -
 */ parcelHelpers.export(exports, "generateAccountSASQueryParameters", ()=>generateAccountSASQueryParameters
);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _accountSASPermissions = require("./AccountSASPermissions");
var _accountSASResourceTypes = require("./AccountSASResourceTypes");
var _accountSASServices = require("./AccountSASServices");
var _sasIPRange = require("./SasIPRange");
var _sasqueryParameters = require("./SASQueryParameters");
var _constants = require("../utils/constants");
var _utilsCommon = require("../utils/utils.common");
function generateAccountSASQueryParameters(accountSASSignatureValues, sharedKeyCredential) {
    const version = accountSASSignatureValues.version ? accountSASSignatureValues.version : _constants.SERVICE_VERSION;
    if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.setImmutabilityPolicy && version < "2020-08-04") throw RangeError("'version' must be >= '2020-08-04' when provided 'i' permission.");
    if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.deleteVersion && version < "2019-10-10") throw RangeError("'version' must be >= '2019-10-10' when provided 'x' permission.");
    if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.permanentDelete && version < "2019-10-10") throw RangeError("'version' must be >= '2019-10-10' when provided 'y' permission.");
    if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.tag && version < "2019-12-12") throw RangeError("'version' must be >= '2019-12-12' when provided 't' permission.");
    if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.filter && version < "2019-12-12") throw RangeError("'version' must be >= '2019-12-12' when provided 'f' permission.");
    if (accountSASSignatureValues.encryptionScope && version < "2020-12-06") throw RangeError("'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.");
    const parsedPermissions = _accountSASPermissions.AccountSASPermissions.parse(accountSASSignatureValues.permissions.toString());
    const parsedServices = _accountSASServices.AccountSASServices.parse(accountSASSignatureValues.services).toString();
    const parsedResourceTypes = _accountSASResourceTypes.AccountSASResourceTypes.parse(accountSASSignatureValues.resourceTypes).toString();
    let stringToSign;
    if (version >= "2020-12-06") stringToSign = [
        sharedKeyCredential.accountName,
        parsedPermissions,
        parsedServices,
        parsedResourceTypes,
        accountSASSignatureValues.startsOn ? _utilsCommon.truncatedISO8061Date(accountSASSignatureValues.startsOn, false) : "",
        _utilsCommon.truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),
        accountSASSignatureValues.ipRange ? _sasIPRange.ipRangeToString(accountSASSignatureValues.ipRange) : "",
        accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "",
        version,
        accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : "",
        ""
    ].join("\n");
    else stringToSign = [
        sharedKeyCredential.accountName,
        parsedPermissions,
        parsedServices,
        parsedResourceTypes,
        accountSASSignatureValues.startsOn ? _utilsCommon.truncatedISO8061Date(accountSASSignatureValues.startsOn, false) : "",
        _utilsCommon.truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),
        accountSASSignatureValues.ipRange ? _sasIPRange.ipRangeToString(accountSASSignatureValues.ipRange) : "",
        accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "",
        version,
        ""
    ].join("\n");
    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
    return new _sasqueryParameters.SASQueryParameters(version, signature, parsedPermissions.toString(), parsedServices, parsedResourceTypes, accountSASSignatureValues.protocol, accountSASSignatureValues.startsOn, accountSASSignatureValues.expiresOn, accountSASSignatureValues.ipRange, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, accountSASSignatureValues.encryptionScope);
}

},{"./AccountSASPermissions":"8tbmf","./AccountSASResourceTypes":"fQgaZ","./AccountSASServices":"7HHJy","./SasIPRange":"aH3sX","./SASQueryParameters":"gMQnk","../utils/constants":"4gX5x","../utils/utils.common":"2SR3M","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fQgaZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value
 * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the
 * values are set, this should be serialized with toString and set as the resources field on an
 * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but
 * the order of the resources is particular and this class guarantees correctness.
 */ parcelHelpers.export(exports, "AccountSASResourceTypes", ()=>AccountSASResourceTypes
);
class AccountSASResourceTypes {
    constructor(){
        /**
         * Permission to access service level APIs granted.
         */ this.service = false;
        /**
         * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.
         */ this.container = false;
        /**
         * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.
         */ this.object = false;
    }
    /**
     * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an
     * Error if it encounters a character that does not correspond to a valid resource type.
     *
     * @param resourceTypes -
     */ static parse(resourceTypes) {
        const accountSASResourceTypes = new AccountSASResourceTypes();
        for (const c of resourceTypes)switch(c){
            case "s":
                accountSASResourceTypes.service = true;
                break;
            case "c":
                accountSASResourceTypes.container = true;
                break;
            case "o":
                accountSASResourceTypes.object = true;
                break;
            default:
                throw new RangeError(`Invalid resource type: ${c}`);
        }
        return accountSASResourceTypes;
    }
    /**
     * Converts the given resource types to a string.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
     *
     */ toString() {
        const resourceTypes = [];
        if (this.service) resourceTypes.push("s");
        if (this.container) resourceTypes.push("c");
        if (this.object) resourceTypes.push("o");
        return resourceTypes.join("");
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7HHJy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value
 * to true means that any SAS which uses these permissions will grant access to that service. Once all the
 * values are set, this should be serialized with toString and set as the services field on an
 * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but
 * the order of the services is particular and this class guarantees correctness.
 */ parcelHelpers.export(exports, "AccountSASServices", ()=>AccountSASServices
);
class AccountSASServices {
    constructor(){
        /**
         * Permission to access blob resources granted.
         */ this.blob = false;
        /**
         * Permission to access file resources granted.
         */ this.file = false;
        /**
         * Permission to access queue resources granted.
         */ this.queue = false;
        /**
         * Permission to access table resources granted.
         */ this.table = false;
    }
    /**
     * Creates an {@link AccountSASServices} from the specified services string. This method will throw an
     * Error if it encounters a character that does not correspond to a valid service.
     *
     * @param services -
     */ static parse(services) {
        const accountSASServices = new AccountSASServices();
        for (const c of services)switch(c){
            case "b":
                accountSASServices.blob = true;
                break;
            case "f":
                accountSASServices.file = true;
                break;
            case "q":
                accountSASServices.queue = true;
                break;
            case "t":
                accountSASServices.table = true;
                break;
            default:
                throw new RangeError(`Invalid service character: ${c}`);
        }
        return accountSASServices;
    }
    /**
     * Converts the given services to a string.
     *
     */ toString() {
        const services = [];
        if (this.blob) services.push("b");
        if (this.table) services.push("t");
        if (this.queue) services.push("q");
        if (this.file) services.push("f");
        return services.join("");
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2yAzo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cORgJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"549Gl":[function(require,module,exports) {
module.exports = JSON.parse("{\"63\":{\"adult\":false,\"backdrop_path\":\"/4gZmz8CiV2iXLQUc5sfCdrnxl87.jpg\",\"created_by\":[{\"id\":117794,\"credit_id\":\"525334d719c2957940032eb7\",\"name\":\"Chris Morris\",\"gender\":2,\"profile_path\":\"/uwaXrxAgqDUF7qr43vOnwA6Aztl.jpg\"}],\"episode_run_time\":[25,30,168],\"first_air_date\":\"1997-01-29\",\"genres\":[{\"id\":35,\"name\":\"Comedy\"}],\"homepage\":\"\",\"id\":63,\"in_production\":false,\"languages\":[\"en\"],\"last_air_date\":\"1997-03-05\",\"last_episode_to_air\":{\"air_date\":\"1997-03-05\",\"episode_number\":6,\"id\":2201,\"name\":\"Decline\",\"overview\":\"Religion falls under the spotlight in this episode, which features Terry Waite discussing how Britain has been poisoned by the gospel.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/o8REpbY8pQcSBJak0miLMkIMy4d.jpg\",\"vote_average\":0,\"vote_count\":0},\"name\":\"Brass Eye\",\"next_episode_to_air\":null,\"networks\":[{\"name\":\"Channel 4\",\"id\":26,\"logo_path\":\"/hbifXPpM55B1fL5wPo7t72vzN78.png\",\"origin_country\":\"GB\"}],\"number_of_episodes\":6,\"number_of_seasons\":1,\"origin_country\":[\"GB\"],\"original_language\":\"en\",\"original_name\":\"Brass Eye\",\"overview\":\"Brass Eye is a UK television series of satirical news magazines. A series of six episodes aired on Channel 4 in 1997, and a further episode in 2001.\\n\\nThe series was created by Chris Morris, and written by Morris, David Quantick, Peter Baynham, Jane Bussmann, Arthur Mathews and Graham Linehan. The series was directed by Michael Cumming. It was a sequel to Morris's earlier spoof news programmes On the Hour and The Day Today. It satirised media portrayal of social ills, in particular sensationalism and creation of moral panics. The series starred Morris's The Day Today colleague Doon MacKichan and Gina McKee, Mark Heap, Simon Pegg, Julia Davis and Kevin Eldon.\",\"popularity\":5.929,\"poster_path\":\"/1aC9QRe4yiZUw0qyrJfra1I30sc.jpg\",\"production_companies\":[{\"id\":13157,\"logo_path\":\"/jr4fJUF5avpcT3V0HwrIZ4t8uMn.png\",\"name\":\"Talkback\",\"origin_country\":\"GB\"}],\"production_countries\":[],\"seasons\":[{\"air_date\":\"2001-07-26\",\"episode_count\":2,\"id\":147,\"name\":\"Specials\",\"overview\":\"\",\"poster_path\":\"/uCIy8Cyt8Almbf2nr9EKKKQP1DY.jpg\",\"season_number\":0},{\"air_date\":\"1997-01-28\",\"episode_count\":6,\"id\":146,\"name\":\"Season 1\",\"overview\":\"\",\"poster_path\":\"/s3b5OJ2eztGWTkvyX8aAtijOKgm.jpg\",\"season_number\":1}],\"spoken_languages\":[{\"english_name\":\"English\",\"iso_639_1\":\"en\",\"name\":\"English\"}],\"status\":\"Ended\",\"tagline\":\"\",\"type\":\"Scripted\",\"vote_average\":7.7,\"vote_count\":57,\"keywords\":{\"results\":[{\"name\":\"dark comedy\",\"id\":10123},{\"name\":\"surreal\",\"id\":3307},{\"name\":\"satire\",\"id\":8201},{\"name\":\"political humor\",\"id\":199622},{\"name\":\"british society\",\"id\":222075}]},\"season/0\":{\"_id\":\"525334d519c2957940032d97\",\"air_date\":\"2001-07-26\",\"episodes\":[{\"air_date\":\"2001-07-26\",\"episode_number\":1,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"525334d519c2957940032e25\",\"order\":0,\"adult\":false,\"gender\":2,\"id\":11108,\"known_for_department\":\"Acting\",\"name\":\"Simon Pegg\",\"original_name\":\"Simon Pegg\",\"popularity\":11.104,\"profile_path\":\"/nOWKXxgADG98RjKyfQ7oSDfns6J.jpg\"},{\"character\":\"\",\"credit_id\":\"5756a1259251416e3900254b\",\"order\":6,\"adult\":false,\"gender\":1,\"id\":1836,\"known_for_department\":\"Acting\",\"name\":\"Julia Davis\",\"original_name\":\"Julia Davis\",\"popularity\":4.029,\"profile_path\":\"/wsUNCSKoNQTgSdlr9FIeIR6hRAd.jpg\"},{\"character\":\"\",\"credit_id\":\"5756a15a9251416e2d00259a\",\"order\":8,\"adult\":false,\"gender\":2,\"id\":110001,\"known_for_department\":\"Acting\",\"name\":\"Phil Collins\",\"original_name\":\"Phil Collins\",\"popularity\":2.657,\"profile_path\":\"/zbIUgUJ4j2AOUerDoeOTWCvx9P2.jpg\"},{\"character\":\"\",\"credit_id\":\"5756a16cc3a3680cc70027c6\",\"order\":9,\"adult\":false,\"gender\":0,\"id\":1220503,\"known_for_department\":\"Acting\",\"name\":\"Gary Lineker\",\"original_name\":\"Gary Lineker\",\"popularity\":0.675,\"profile_path\":\"/mfHN34kbcqbkN8zYyfjE5fk5dpX.jpg\"}],\"id\":2203,\"name\":\"Paedogeddon!\",\"overview\":\"In this episode, celebrities were this time duped into endorsing an anti-paedophile charity by denouncing a program in which paedophiles could view children through a webcam and, wearing special gloves allowing them to molest any part of the child they so wished by simply touching their monitor.\",\"production_code\":\"\",\"season_number\":0,\"still_path\":\"/whG3TZ7tOi5zZbeyspxtB25mpmh.jpg\",\"vote_average\":10,\"vote_count\":1},{\"air_date\":\"\",\"episode_number\":2,\"crew\":[],\"guest_stars\":[],\"id\":2204,\"name\":\"Torque TV - Pilot Episode\",\"overview\":\"\",\"production_code\":\"\",\"season_number\":0,\"still_path\":null,\"vote_average\":0,\"vote_count\":0}],\"name\":\"Specials\",\"overview\":\"\",\"poster_path\":\"/uCIy8Cyt8Almbf2nr9EKKKQP1DY.jpg\",\"season_number\":0},\"season/1\":{\"_id\":\"525334d519c2957940032d84\",\"air_date\":\"1997-01-28\",\"episodes\":[{\"air_date\":\"1997-01-29\",\"episode_number\":1,\"crew\":[{\"job\":\"Director\",\"department\":\"Directing\",\"credit_id\":\"5c4c41790e0a264965d3487f\",\"adult\":false,\"gender\":0,\"id\":1622867,\"known_for_department\":\"Directing\",\"name\":\"Michael Cumming\",\"original_name\":\"Michael Cumming\",\"popularity\":0.98,\"profile_path\":\"/eK0frF3vjp3Ej4hbjpwu5QtSEg.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5756a09dc3a3682c5d000291\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":1243686,\"known_for_department\":\"Acting\",\"name\":\"Albert Welling\",\"original_name\":\"Albert Welling\",\"popularity\":1.976,\"profile_path\":\"/eB6mRbUBmgBza8lwceFkrI0ThBE.jpg\"}],\"id\":2196,\"name\":\"Animals\",\"overview\":\"The show is split into two halves. The first half delves into the world of animal fetishes, with helpful contributions from Paul Daniels and Carla Lane. The second half focuses on the elephant, who has trapped her trunk up her anus.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/6SY4BLSb0md3JvSRfULOFbjbxqQ.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1997-02-05\",\"episode_number\":2,\"crew\":[{\"job\":\"Director\",\"department\":\"Directing\",\"credit_id\":\"5c4c41790e0a264965d3487f\",\"adult\":false,\"gender\":0,\"id\":1622867,\"known_for_department\":\"Directing\",\"name\":\"Michael Cumming\",\"original_name\":\"Michael Cumming\",\"popularity\":0.98,\"profile_path\":\"/eK0frF3vjp3Ej4hbjpwu5QtSEg.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5756a0dcc3a3680cca0028df\",\"order\":4,\"adult\":false,\"gender\":1,\"id\":42641,\"known_for_department\":\"Acting\",\"name\":\"Claire Skinner\",\"original_name\":\"Claire Skinner\",\"popularity\":6.369,\"profile_path\":\"/odJEMUo4utv11ylHLmrOgbhUQHZ.jpg\"}],\"id\":2198,\"name\":\"Drugs\",\"overview\":\"The voices of Bernard Manning, Noel Edmonds and David Amess MP attempt to save British schoolchildren from the horror drugs coming from Eastern Europe, Clarky Caps, Yellow Bentines and the made-up Cake.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/xMhlLkOxSauQEHmFsELW4r4sa59.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1997-02-12\",\"episode_number\":3,\"crew\":[{\"job\":\"Director\",\"department\":\"Directing\",\"credit_id\":\"5c4c41790e0a264965d3487f\",\"adult\":false,\"gender\":0,\"id\":1622867,\"known_for_department\":\"Directing\",\"name\":\"Michael Cumming\",\"original_name\":\"Michael Cumming\",\"popularity\":0.98,\"profile_path\":\"/eK0frF3vjp3Ej4hbjpwu5QtSEg.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5756a09dc3a3682c5d000291\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":1243686,\"known_for_department\":\"Acting\",\"name\":\"Albert Welling\",\"original_name\":\"Albert Welling\",\"popularity\":1.976,\"profile_path\":\"/eB6mRbUBmgBza8lwceFkrI0ThBE.jpg\"},{\"character\":\"\",\"credit_id\":\"5756a0dcc3a3680cca0028df\",\"order\":4,\"adult\":false,\"gender\":1,\"id\":42641,\"known_for_department\":\"Acting\",\"name\":\"Claire Skinner\",\"original_name\":\"Claire Skinner\",\"popularity\":6.369,\"profile_path\":\"/odJEMUo4utv11ylHLmrOgbhUQHZ.jpg\"},{\"character\":\"\",\"credit_id\":\"5756a1409251416e2800257a\",\"order\":7,\"adult\":false,\"gender\":2,\"id\":151344,\"known_for_department\":\"Acting\",\"name\":\"Hugh Dennis\",\"original_name\":\"Hugh Dennis\",\"popularity\":4.701,\"profile_path\":\"/7JH7OE7Ln4Wx74BaOYo8yaZ6Rwh.jpg\"},{\"character\":\"\",\"credit_id\":\"5756a1889251416e2d0025a7\",\"order\":10,\"adult\":false,\"gender\":2,\"id\":29859,\"known_for_department\":\"Acting\",\"name\":\"Richard Briers\",\"original_name\":\"Richard Briers\",\"popularity\":6.232,\"profile_path\":\"/gNsEDp8K7dRYVxYeHNgelOiOO97.jpg\"}],\"id\":2197,\"name\":\"Science\",\"overview\":\"Tomorrow's World meets Watchdog meets Wired. Science gets the Brass Eye treatment. A number of celebs again espouse their scripted knowledge of 'mad' experiments and covered up and untold stories of electricity falling from pylons and frogs being grown with rabbit's feet.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/suEitGp0oiF38abLgfoX6Cgru3D.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1997-02-19\",\"episode_number\":4,\"crew\":[{\"job\":\"Director\",\"department\":\"Directing\",\"credit_id\":\"5c4c41790e0a264965d3487f\",\"adult\":false,\"gender\":0,\"id\":1622867,\"known_for_department\":\"Directing\",\"name\":\"Michael Cumming\",\"original_name\":\"Michael Cumming\",\"popularity\":0.98,\"profile_path\":\"/eK0frF3vjp3Ej4hbjpwu5QtSEg.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5756a09dc3a3682c5d000291\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":1243686,\"known_for_department\":\"Acting\",\"name\":\"Albert Welling\",\"original_name\":\"Albert Welling\",\"popularity\":1.976,\"profile_path\":\"/eB6mRbUBmgBza8lwceFkrI0ThBE.jpg\"},{\"character\":\"\",\"credit_id\":\"5756a0bdc3a36859ed0009cc\",\"order\":3,\"adult\":false,\"gender\":1,\"id\":18022,\"known_for_department\":\"Acting\",\"name\":\"Gina McKee\",\"original_name\":\"Gina McKee\",\"popularity\":5.264,\"profile_path\":\"/rHL7GGeFZ2x9PbFL2P3hVkLfvAS.jpg\"},{\"character\":\"\",\"credit_id\":\"5756a106c3a36859ed0009e9\",\"order\":5,\"adult\":false,\"gender\":2,\"id\":1250,\"known_for_department\":\"Acting\",\"name\":\"Alexander Armstrong\",\"original_name\":\"Alexander Armstrong\",\"popularity\":3.059,\"profile_path\":\"/e0kvGIfrjah4UmbUdKKobTgcxEd.jpg\"}],\"id\":2200,\"name\":\"Sex\",\"overview\":\"Chris Morris casts a satirical eye over the subject of sex and its relationship to society. Helpful contributors include Peter Stringfellow and David Sullivan.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/unJAYW1IhsUd0Xzo4rIpwDzC95q.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1997-01-26\",\"episode_number\":5,\"crew\":[{\"job\":\"Director\",\"department\":\"Directing\",\"credit_id\":\"5c4c41790e0a264965d3487f\",\"adult\":false,\"gender\":0,\"id\":1622867,\"known_for_department\":\"Directing\",\"name\":\"Michael Cumming\",\"original_name\":\"Michael Cumming\",\"popularity\":0.98,\"profile_path\":\"/eK0frF3vjp3Ej4hbjpwu5QtSEg.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5756a0bdc3a36859ed0009cc\",\"order\":3,\"adult\":false,\"gender\":1,\"id\":18022,\"known_for_department\":\"Acting\",\"name\":\"Gina McKee\",\"original_name\":\"Gina McKee\",\"popularity\":5.264,\"profile_path\":\"/rHL7GGeFZ2x9PbFL2P3hVkLfvAS.jpg\"}],\"id\":2199,\"name\":\"Crime\",\"overview\":\"Chris Morris turns his laser eye on to crime. Highlights include revelations of how elephants are being used to disperse rioters, and Vanessa Feltz's message to murderers.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/oLcI6eFu8nKy5TlKCEkV9nfkYBF.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1997-03-05\",\"episode_number\":6,\"crew\":[{\"job\":\"Director\",\"department\":\"Directing\",\"credit_id\":\"5c4c41790e0a264965d3487f\",\"adult\":false,\"gender\":0,\"id\":1622867,\"known_for_department\":\"Directing\",\"name\":\"Michael Cumming\",\"original_name\":\"Michael Cumming\",\"popularity\":0.98,\"profile_path\":\"/eK0frF3vjp3Ej4hbjpwu5QtSEg.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5756a0bdc3a36859ed0009cc\",\"order\":3,\"adult\":false,\"gender\":1,\"id\":18022,\"known_for_department\":\"Acting\",\"name\":\"Gina McKee\",\"original_name\":\"Gina McKee\",\"popularity\":5.264,\"profile_path\":\"/rHL7GGeFZ2x9PbFL2P3hVkLfvAS.jpg\"},{\"character\":\"\",\"credit_id\":\"5756a0dcc3a3680cca0028df\",\"order\":4,\"adult\":false,\"gender\":1,\"id\":42641,\"known_for_department\":\"Acting\",\"name\":\"Claire Skinner\",\"original_name\":\"Claire Skinner\",\"popularity\":6.369,\"profile_path\":\"/odJEMUo4utv11ylHLmrOgbhUQHZ.jpg\"}],\"id\":2201,\"name\":\"Decline\",\"overview\":\"Religion falls under the spotlight in this episode, which features Terry Waite discussing how Britain has been poisoned by the gospel.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/o8REpbY8pQcSBJak0miLMkIMy4d.jpg\",\"vote_average\":0,\"vote_count\":0}],\"name\":\"Season 1\",\"overview\":\"\",\"poster_path\":\"/s3b5OJ2eztGWTkvyX8aAtijOKgm.jpg\",\"season_number\":1}},\"809\":{\"adult\":false,\"backdrop_path\":null,\"created_by\":[],\"episode_run_time\":[30],\"first_air_date\":\"2004-02-15\",\"genres\":[{\"id\":35,\"name\":\"Comedy\"}],\"homepage\":\"\",\"id\":809,\"in_production\":false,\"languages\":[\"en\"],\"last_air_date\":\"2004-03-21\",\"last_episode_to_air\":{\"air_date\":\"2004-03-21\",\"episode_number\":6,\"id\":43604,\"name\":\"Episode 6\",\"overview\":\"\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},\"name\":\"Catterick\",\"next_episode_to_air\":null,\"networks\":[{\"name\":\"BBC Three\",\"id\":3,\"logo_path\":\"/qh5IQT9j5yNuxzVLC4v9DA5mPQO.png\",\"origin_country\":\"GB\"}],\"number_of_episodes\":6,\"number_of_seasons\":1,\"origin_country\":[\"GB\"],\"original_language\":\"en\",\"original_name\":\"Catterick\",\"overview\":\"Catterick, aka Vic and Bob in Catterick, is a surreal 2004 BBC situation comedy in 6 episodes, written by and starring Vic Reeves and Bob Mortimer, with Reece Shearsmith, Matt Lucas, Morwenna Banks, Tim Healy, Mark Benton and Charlie Higson. The series was originally broadcast on BBC Three and later rerun on BBC2. Reeves has said that the BBC do not want another series of Catterick, though he may produce a spin-off centring on the DI Fowler character.\\n\\nCatterick is arguably Vic and Bob's darkest and most bizarre programme to date, balancing their typically odd, idiosyncratic comedy with some genuinely dark scenes. It plays like a darkly comic road movie, albeit full of Vic and Bob's bizarre, often inscrutable and frequently silly humour. Catterick is probably Vic and Bob's most uncompromising show since their notorious and frequently baffling 1999 sketch series Bang Bang, It's Reeves and Mortimer, from which most of the characters are taken. It is in some ways stylistically similar to their short film The Weekenders first broadcast in 1992 on British television as part of Channel 4's \\\"Bunch of Five\\\" series.\\n\\nThe series is named after Catterick in North Yorkshire, Britain's largest army base. It is about 10 miles away from Darlington where Vic Reeves grew up. It is also about 20 miles away from Middlesbrough where Bob Mortimer grew up.\",\"popularity\":1.544,\"poster_path\":\"/aGROLA6R31gjwnMQQhOYcSR1dSx.jpg\",\"production_companies\":[],\"production_countries\":[],\"seasons\":[{\"air_date\":\"2004-02-15\",\"episode_count\":6,\"id\":2400,\"name\":\"Season 1\",\"overview\":\"\",\"poster_path\":null,\"season_number\":1}],\"spoken_languages\":[{\"english_name\":\"English\",\"iso_639_1\":\"en\",\"name\":\"English\"}],\"status\":\"Ended\",\"tagline\":\"\",\"type\":\"Scripted\",\"vote_average\":7.7,\"vote_count\":3,\"keywords\":{\"results\":[{\"name\":\"brother\",\"id\":5301},{\"name\":\"dark comedy\",\"id\":10123},{\"name\":\"surreal\",\"id\":3307},{\"name\":\"sitcom\",\"id\":193171}]},\"season/1\":{\"_id\":\"525407af19c29579402d193e\",\"air_date\":\"2004-02-15\",\"episodes\":[{\"air_date\":\"2004-02-15\",\"episode_number\":1,\"crew\":[{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"525407b019c29579402d1970\",\"adult\":false,\"gender\":2,\"id\":168578,\"known_for_department\":\"Directing\",\"name\":\"Matt Lipsey\",\"original_name\":\"Matt Lipsey\",\"popularity\":0.616,\"profile_path\":null}],\"guest_stars\":[],\"id\":43600,\"name\":\"Episode 1\",\"overview\":\"Chris and Carl head to Catterick to search for Carl's long-lost son and unwittingly stumble on an armed robbery. Carl has booked a room at the Mermade Hotel run by the unpleasant Mr Oates. What is the secret that he keeps locked away in the hotel safe?\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2004-02-22\",\"episode_number\":2,\"crew\":[{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"525407b019c29579402d1970\",\"adult\":false,\"gender\":2,\"id\":168578,\"known_for_department\":\"Directing\",\"name\":\"Matt Lipsey\",\"original_name\":\"Matt Lipsey\",\"popularity\":0.616,\"profile_path\":null}],\"guest_stars\":[],\"id\":43601,\"name\":\"Episode 2\",\"overview\":\"Chris and Carl arrive at the Mermade Hotel and are amazed by the luxury of their room. Meanwhile, the shooting at Neil's Wheels is being investigated by the police and Tony starts his search for the brothers.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2004-02-29\",\"episode_number\":3,\"crew\":[{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"525407b019c29579402d1970\",\"adult\":false,\"gender\":2,\"id\":168578,\"known_for_department\":\"Directing\",\"name\":\"Matt Lipsey\",\"original_name\":\"Matt Lipsey\",\"popularity\":0.616,\"profile_path\":null}],\"guest_stars\":[],\"id\":43602,\"name\":\"Episode 3\",\"overview\":\"The brothers enlist the help of Mark as they continue their search to find Carl's long lost son. Mark reveals the truth about what really happened at last year's flotilla and why Mr Oates treats him so badly.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2004-03-07\",\"episode_number\":4,\"crew\":[],\"guest_stars\":[],\"id\":43599,\"name\":\"Episode 4\",\"overview\":\"Things start to get complicated at the Mermade Hotel. Tony attacks Chris and Carl who escape with Mark, the hotel till and safe are emptied to the fury of Mr Oates, and the police return to the hotel.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2004-03-14\",\"episode_number\":5,\"crew\":[{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"525407b019c29579402d1970\",\"adult\":false,\"gender\":2,\"id\":168578,\"known_for_department\":\"Directing\",\"name\":\"Matt Lipsey\",\"original_name\":\"Matt Lipsey\",\"popularity\":0.616,\"profile_path\":null}],\"guest_stars\":[{\"character\":\"Peter\",\"credit_id\":\"571e2c61c3a36836f8002bd9\",\"order\":1,\"adult\":false,\"gender\":2,\"id\":34546,\"known_for_department\":\"Acting\",\"name\":\"Mark Gatiss\",\"original_name\":\"Mark Gatiss\",\"popularity\":8.062,\"profile_path\":\"/rdinP6RQwKBab7BawJDBzF1I7Qz.jpg\"}],\"id\":43603,\"name\":\"Episode 5\",\"overview\":\"Carl, Chris and Mark have finally reached the garden centre near Catterick in their search for Carl's son. They are joined by Tony and DI Fowler. Tony has the upper hand as he has a gun!\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2004-03-21\",\"episode_number\":6,\"crew\":[{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"525407b019c29579402d1970\",\"adult\":false,\"gender\":2,\"id\":168578,\"known_for_department\":\"Directing\",\"name\":\"Matt Lipsey\",\"original_name\":\"Matt Lipsey\",\"popularity\":0.616,\"profile_path\":null},{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5538a96f925141275e0009a6\",\"adult\":false,\"gender\":2,\"id\":181815,\"known_for_department\":\"Acting\",\"name\":\"Vic Reeves\",\"original_name\":\"Vic Reeves\",\"popularity\":1.364,\"profile_path\":\"/p8LNVsre1srCbvJaIIL40GYgj3D.jpg\"}],\"guest_stars\":[],\"id\":43604,\"name\":\"Episode 6\",\"overview\":\"\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0}],\"name\":\"Season 1\",\"overview\":\"\",\"poster_path\":null,\"season_number\":1}},\"1073\":{\"adult\":false,\"backdrop_path\":\"/nn7ZciePhK6Q6qWhmFXzdsboBHt.jpg\",\"created_by\":[{\"id\":4581,\"credit_id\":\"5254152219c295794036fe4d\",\"name\":\"Steve Coogan\",\"gender\":2,\"profile_path\":\"/tT7OXc2qA6hlREHXdwGLp0XihzA.jpg\"},{\"id\":6732,\"credit_id\":\"5254152219c295794036fe47\",\"name\":\"Peter Baynham\",\"gender\":2,\"profile_path\":\"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"},{\"id\":88926,\"credit_id\":\"5254152219c295794036fe41\",\"name\":\"Armando Iannucci\",\"gender\":2,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"}],\"episode_run_time\":[30],\"first_air_date\":\"1997-11-03\",\"genres\":[{\"id\":35,\"name\":\"Comedy\"}],\"homepage\":\"http://www.bbc.co.uk/programmes/b00hxqcx\",\"id\":1073,\"in_production\":false,\"languages\":[\"en\"],\"last_air_date\":\"2002-12-16\",\"last_episode_to_air\":{\"air_date\":\"2002-12-16\",\"episode_number\":6,\"id\":55848,\"name\":\"Alan Wide Shut\",\"overview\":\"Alan's house is finally ready and Sonja is angling to cohabit. Meanwhile, Alan's book Bouncing Back has been unsuccessful, and is to be pulped and Lynne is to be baptised. All is going well, but Alan can't stop the flashbacks of the painful days when he ate 4 medium sized Toblerones and drove to Dundee in bare feet.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":\"/erZCSbAo60ngcblFbzsJAbWJfuf.jpg\",\"vote_average\":0,\"vote_count\":0},\"name\":\"I'm Alan Partridge\",\"next_episode_to_air\":null,\"networks\":[{\"name\":\"BBC Two\",\"id\":332,\"logo_path\":\"/6kl5tMuct7u3ej5myL4c9QQVSW1.png\",\"origin_country\":\"GB\"}],\"number_of_episodes\":12,\"number_of_seasons\":2,\"origin_country\":[\"GB\"],\"original_language\":\"en\",\"original_name\":\"I'm Alan Partridge\",\"overview\":\"I'm Alan Partridge is a BBC situation comedy starring Steve Coogan, of which two series of six episodes each were produced — the first in 1997 and the second in 2002. The series followed the titular Alan Partridge, a failed television presenter whose previous exploits had featured in the chat-show parody Knowing Me, Knowing You with Alan Partridge, and who is now presenting a programme on local radio in Norwich.\\n\\nBoth series were written by Peter Baynham, Coogan and Armando Iannucci; supporting Coogan were Felicity Montagu as his faithful, mouse-like personal assistant, Lynn Benfield; Simon Greenall as Geordie Travel Tavern handyman/BP garage attendant Michael; and Phil Cornwell as disc jockey Dave Clifton.\\n\\nIt has been well received by both critics and fans, and was nominated for three BAFTAs, two British Comedy Award, and a Royal Television Society award.\",\"popularity\":10.958,\"poster_path\":\"/dal43UDeYGNZ14vDAHbE7U0mgrv.jpg\",\"production_companies\":[{\"id\":13157,\"logo_path\":\"/jr4fJUF5avpcT3V0HwrIZ4t8uMn.png\",\"name\":\"Talkback\",\"origin_country\":\"GB\"}],\"production_countries\":[],\"seasons\":[{\"air_date\":\"1999-03-12\",\"episode_count\":12,\"id\":3033,\"name\":\"Specials\",\"overview\":\"\",\"poster_path\":null,\"season_number\":0},{\"air_date\":\"1997-11-03\",\"episode_count\":6,\"id\":3031,\"name\":\"Season 1\",\"overview\":\"\",\"poster_path\":\"/ouwnU2WSveF6qX22GAovP1IAWxm.jpg\",\"season_number\":1},{\"air_date\":\"2002-11-11\",\"episode_count\":6,\"id\":3032,\"name\":\"Season 2\",\"overview\":\"\",\"poster_path\":\"/znOKhcsRhBeW4qX2mGZvpf2TFWQ.jpg\",\"season_number\":2}],\"spoken_languages\":[{\"english_name\":\"English\",\"iso_639_1\":\"en\",\"name\":\"English\"}],\"status\":\"Ended\",\"tagline\":\"\",\"type\":\"Scripted\",\"vote_average\":7.3,\"vote_count\":101,\"keywords\":{\"results\":[{\"name\":\"radio\",\"id\":2135},{\"name\":\"satire\",\"id\":8201},{\"name\":\"sitcom\",\"id\":193171}]},\"season/1\":{\"_id\":\"5254151c19c295794036f872\",\"air_date\":\"1997-11-03\",\"episodes\":[{\"air_date\":\"1997-11-03\",\"episode_number\":1,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f910\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"},{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f8fa\",\"adult\":false,\"gender\":2,\"id\":6732,\"known_for_department\":\"Writing\",\"name\":\"Peter Baynham\",\"original_name\":\"Peter Baynham\",\"popularity\":0.75,\"profile_path\":\"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"5254151c19c295794036f928\",\"adult\":false,\"gender\":2,\"id\":78176,\"known_for_department\":\"Directing\",\"name\":\"Dominic Brigstocke\",\"original_name\":\"Dominic Brigstocke\",\"popularity\":0.732,\"profile_path\":\"/15PVtHTavIAvAibjNdYc8g6kcwR.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5254151d19c295794036fa67\",\"order\":0,\"adult\":false,\"gender\":2,\"id\":75056,\"known_for_department\":\"Acting\",\"name\":\"Philip Fox\",\"original_name\":\"Philip Fox\",\"popularity\":0.84,\"profile_path\":null}],\"id\":55843,\"name\":\"A Room with an Alan\",\"overview\":\"After the end of his chat show and the divorce from his wife Carol, Alan is now living in Linton Travel Tavern and presenting the early morning slot on Radio Norwich.\\n\\nAfter viewing a 5 bedroom house with his P.A., Lynne, Alan has a meeting with the BBC Chief Commissioner, Tony Hayers, who he needs to impress if he is to be given a second series.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/ndaTXSJ5nNtWmc0LoccBiDeMucO.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1997-11-10\",\"episode_number\":2,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f910\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"},{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f8fa\",\"adult\":false,\"gender\":2,\"id\":6732,\"known_for_department\":\"Writing\",\"name\":\"Peter Baynham\",\"original_name\":\"Peter Baynham\",\"popularity\":0.75,\"profile_path\":\"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"5254151c19c295794036f928\",\"adult\":false,\"gender\":2,\"id\":78176,\"known_for_department\":\"Directing\",\"name\":\"Dominic Brigstocke\",\"original_name\":\"Dominic Brigstocke\",\"popularity\":0.732,\"profile_path\":\"/15PVtHTavIAvAibjNdYc8g6kcwR.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5254151d19c295794036f9b4\",\"order\":0,\"adult\":false,\"gender\":1,\"id\":137471,\"known_for_department\":\"Acting\",\"name\":\"Julia Deakin\",\"original_name\":\"Julia Deakin\",\"popularity\":3.433,\"profile_path\":\"/zVNNlFMPeqptJg3UWtIFsTTNi7G.jpg\"},{\"character\":\"Bill\",\"credit_id\":\"5e0b8e8d595a560011155383\",\"order\":20,\"adult\":false,\"gender\":2,\"id\":166019,\"known_for_department\":\"Acting\",\"name\":\"Bill Thomas\",\"original_name\":\"Bill Thomas\",\"popularity\":1.348,\"profile_path\":\"/63IssO5Y4mi3xRtZbFdYyrm2ID5.jpg\"}],\"id\":55840,\"name\":\"Alan Attraction\",\"overview\":\"It's Valentine's day and love is in the air. Alan is distributing chocolate oranges to every female under 50 while dealing with the fact that he cannot afford to keep his Rover 800 without sacking all the staff at Peartree Productions.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/9PGKx7pknpEBtkyXROuTO0zQOv4.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1997-11-17\",\"episode_number\":3,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f910\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"},{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f8fa\",\"adult\":false,\"gender\":2,\"id\":6732,\"known_for_department\":\"Writing\",\"name\":\"Peter Baynham\",\"original_name\":\"Peter Baynham\",\"popularity\":0.75,\"profile_path\":\"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"5254151c19c295794036f928\",\"adult\":false,\"gender\":2,\"id\":78176,\"known_for_department\":\"Directing\",\"name\":\"Dominic Brigstocke\",\"original_name\":\"Dominic Brigstocke\",\"popularity\":0.732,\"profile_path\":\"/15PVtHTavIAvAibjNdYc8g6kcwR.jpg\"}],\"guest_stars\":[{\"character\":\"Peter Baxendale Thomas\",\"credit_id\":\"5254151c19c295794036f94d\",\"order\":0,\"adult\":false,\"gender\":2,\"id\":117794,\"known_for_department\":\"Acting\",\"name\":\"Chris Morris\",\"original_name\":\"Chris Morris\",\"popularity\":1.057,\"profile_path\":\"/uwaXrxAgqDUF7qr43vOnwA6Aztl.jpg\"},{\"character\":\"Jenny\",\"credit_id\":\"5254151c19c295794036f963\",\"order\":1,\"adult\":false,\"gender\":1,\"id\":128741,\"known_for_department\":\"Acting\",\"name\":\"Doon Mackichan\",\"original_name\":\"Doon Mackichan\",\"popularity\":3.365,\"profile_path\":\"/dsqIBnMEGwRqruKEcpE8Be4JPSq.jpg\"},{\"character\":\"Steve Bennett\",\"credit_id\":\"5254151c19c295794036f979\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":11108,\"known_for_department\":\"Acting\",\"name\":\"Simon Pegg\",\"original_name\":\"Simon Pegg\",\"popularity\":11.104,\"profile_path\":\"/nOWKXxgADG98RjKyfQ7oSDfns6J.jpg\"},{\"character\":\"Hugh Morris\",\"credit_id\":\"5ad81bfb9251413cca00a331\",\"order\":19,\"adult\":false,\"gender\":2,\"id\":6732,\"known_for_department\":\"Writing\",\"name\":\"Peter Baynham\",\"original_name\":\"Peter Baynham\",\"popularity\":0.75,\"profile_path\":\"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"}],\"id\":55839,\"name\":\"Watership Alan\",\"overview\":\"Just as he is ready to be the presenter of a boating holiday promotional video, Alan manages to insult Norfolk's farmers on his radio show.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/l11quKP9eYk8wKXPALfdbgEY4MU.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1997-11-24\",\"episode_number\":4,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f910\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"},{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f8fa\",\"adult\":false,\"gender\":2,\"id\":6732,\"known_for_department\":\"Writing\",\"name\":\"Peter Baynham\",\"original_name\":\"Peter Baynham\",\"popularity\":0.75,\"profile_path\":\"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"5254151c19c295794036f928\",\"adult\":false,\"gender\":2,\"id\":78176,\"known_for_department\":\"Directing\",\"name\":\"Dominic Brigstocke\",\"original_name\":\"Dominic Brigstocke\",\"popularity\":0.732,\"profile_path\":\"/15PVtHTavIAvAibjNdYc8g6kcwR.jpg\"}],\"guest_stars\":[],\"id\":55841,\"name\":\"Basic Alan\",\"overview\":\"Since Alan is the only weekend guest at the hotel, the manager of the Linton Travel Tavern decides to close it for renovation.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/hKnRMXTAHiJEhgGf3sjkE4ACp5E.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1997-12-01\",\"episode_number\":5,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f910\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"},{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f8fa\",\"adult\":false,\"gender\":2,\"id\":6732,\"known_for_department\":\"Writing\",\"name\":\"Peter Baynham\",\"original_name\":\"Peter Baynham\",\"popularity\":0.75,\"profile_path\":\"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"5254151c19c295794036f928\",\"adult\":false,\"gender\":2,\"id\":78176,\"known_for_department\":\"Directing\",\"name\":\"Dominic Brigstocke\",\"original_name\":\"Dominic Brigstocke\",\"popularity\":0.732,\"profile_path\":\"/15PVtHTavIAvAibjNdYc8g6kcwR.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5254151d19c295794036fa14\",\"order\":0,\"adult\":false,\"gender\":0,\"id\":1213132,\"known_for_department\":\"Writing\",\"name\":\"Arthur Mathews\",\"original_name\":\"Arthur Mathews\",\"popularity\":0.6,\"profile_path\":null},{\"character\":\"Aidan Walsh\",\"credit_id\":\"5254151d19c295794036fa2a\",\"order\":1,\"adult\":false,\"gender\":2,\"id\":98107,\"known_for_department\":\"Writing\",\"name\":\"Graham Linehan\",\"original_name\":\"Graham Linehan\",\"popularity\":3.119,\"profile_path\":\"/1N8cWaH2m0vQOdx7a99k63NoIwP.jpg\"}],\"id\":55842,\"name\":\"To Kill a Mocking Alan\",\"overview\":\"Alan creates a Sunday afternoon version of his radio show, inviting some executives from Irish TV over to witness the production at the travel tavern.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/mHfvm8IJNEqTLNep67040K3uAy3.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1997-12-08\",\"episode_number\":6,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f910\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"},{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f8fa\",\"adult\":false,\"gender\":2,\"id\":6732,\"known_for_department\":\"Writing\",\"name\":\"Peter Baynham\",\"original_name\":\"Peter Baynham\",\"popularity\":0.75,\"profile_path\":\"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"5254151c19c295794036f928\",\"adult\":false,\"gender\":2,\"id\":78176,\"known_for_department\":\"Directing\",\"name\":\"Dominic Brigstocke\",\"original_name\":\"Dominic Brigstocke\",\"popularity\":0.732,\"profile_path\":\"/15PVtHTavIAvAibjNdYc8g6kcwR.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5254151c19c295794036f8e2\",\"order\":0,\"adult\":false,\"gender\":2,\"id\":39185,\"known_for_department\":\"Acting\",\"name\":\"Kevin Eldon\",\"original_name\":\"Kevin Eldon\",\"popularity\":3.09,\"profile_path\":\"/5Ws7v11Y6N4bLPSed4HffjCajaX.jpg\"}],\"id\":55838,\"name\":\"Towering Alan\",\"overview\":\"New developments at the BBC give Alan hope that he may be able to return to TV.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/5vxVXrioye3O3dxzVYNkU8dMVeE.jpg\",\"vote_average\":0,\"vote_count\":0}],\"name\":\"Season 1\",\"overview\":\"\",\"poster_path\":\"/ouwnU2WSveF6qX22GAovP1IAWxm.jpg\",\"season_number\":1},\"season/2\":{\"_id\":\"5254151c19c295794036f891\",\"air_date\":\"2002-11-11\",\"episodes\":[{\"air_date\":\"2002-11-11\",\"episode_number\":1,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f910\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"},{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f8fa\",\"adult\":false,\"gender\":2,\"id\":6732,\"known_for_department\":\"Writing\",\"name\":\"Peter Baynham\",\"original_name\":\"Peter Baynham\",\"popularity\":0.75,\"profile_path\":\"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"5254152019c295794036fae8\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5254151f19c295794036faa4\",\"order\":0,\"adult\":false,\"gender\":2,\"id\":133037,\"known_for_department\":\"Acting\",\"name\":\"Andrew Burt\",\"original_name\":\"Andrew Burt\",\"popularity\":1.312,\"profile_path\":\"/dZCPE6atPSZrCmFhs9fxUozIntf.jpg\"},{\"character\":\"\",\"credit_id\":\"5254152019c295794036fac2\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":1222072,\"known_for_department\":\"Acting\",\"name\":\"Simon Ludders\",\"original_name\":\"Simon Ludders\",\"popularity\":1.316,\"profile_path\":\"/izbYsueYkFonY4qwG034UcppAJW.jpg\"}],\"id\":55844,\"name\":\"The Talented Mr. Alan\",\"overview\":\"Alan's back and life is on the up: he's got the third best slot on Radio Norwich, a girlfriend and a Lexus. While at the garage, Alan meets one of his old teachers, who is persuaded to let him give a talk at the school about how he has 'bounced back'.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":\"/dYzgiQSaGWChahAoE8qXDwTfNfq.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2002-11-18\",\"episode_number\":2,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f910\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"},{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f8fa\",\"adult\":false,\"gender\":2,\"id\":6732,\"known_for_department\":\"Writing\",\"name\":\"Peter Baynham\",\"original_name\":\"Peter Baynham\",\"popularity\":0.75,\"profile_path\":\"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"5254152019c295794036fae8\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5254152019c295794036fac2\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":1222072,\"known_for_department\":\"Acting\",\"name\":\"Simon Ludders\",\"original_name\":\"Simon Ludders\",\"popularity\":1.316,\"profile_path\":\"/izbYsueYkFonY4qwG034UcppAJW.jpg\"}],\"id\":55845,\"name\":\"The Colour of Alan\",\"overview\":\"Alan is asked to present a sales conference for Dante's fireplaces of Reading, while Michael stays at the unfinished house after someone steals his front door.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":\"/tIBBIaQvoaTJm303CgzTWxZh5hH.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2002-11-25\",\"episode_number\":3,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f910\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"},{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f8fa\",\"adult\":false,\"gender\":2,\"id\":6732,\"known_for_department\":\"Writing\",\"name\":\"Peter Baynham\",\"original_name\":\"Peter Baynham\",\"popularity\":0.75,\"profile_path\":\"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"5254152019c295794036fae8\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5254152019c295794036fb8f\",\"order\":0,\"adult\":false,\"gender\":1,\"id\":3930,\"known_for_department\":\"Acting\",\"name\":\"Phoebe Nicholls\",\"original_name\":\"Phoebe Nicholls\",\"popularity\":2.855,\"profile_path\":\"/d8kT2SmUGPwYJBVapftuX2EQHRr.jpg\"},{\"character\":\"\",\"credit_id\":\"5254152019c295794036fba5\",\"order\":1,\"adult\":false,\"gender\":2,\"id\":21345,\"known_for_department\":\"Acting\",\"name\":\"Stephen Mangan\",\"original_name\":\"Stephen Mangan\",\"popularity\":2.374,\"profile_path\":\"/aBHXXvJcvyUIP3Fr0ZJDAPfvO9r.jpg\"}],\"id\":55847,\"name\":\"Brave Alan\",\"overview\":\"Alan makes a new friend at the BP garage called Dan. They both drink Director's bitter, use Lynx deodorant and both drive Lexi (the plural of Lexus). Dan asks Alan to present a prize at the Norfolk Bravery Awards, where Sonja is hopeful of the opportunity to try out some of her practical jokes.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":\"/yWc6AdaC5urtCv1SrSa6R4zzch7.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2002-12-02\",\"episode_number\":4,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f910\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"},{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f8fa\",\"adult\":false,\"gender\":2,\"id\":6732,\"known_for_department\":\"Writing\",\"name\":\"Peter Baynham\",\"original_name\":\"Peter Baynham\",\"popularity\":0.75,\"profile_path\":\"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"5254152019c295794036fae8\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5254152019c295794036fc4d\",\"order\":0,\"adult\":false,\"gender\":2,\"id\":11115,\"known_for_department\":\"Acting\",\"name\":\"Peter Serafinowicz\",\"original_name\":\"Peter Serafinowicz\",\"popularity\":11.99,\"profile_path\":\"/atXOX0UQzIZkcnpNj1cluBdHwAE.jpg\"}],\"id\":55849,\"name\":\"Never Say Alan Again\",\"overview\":\"Alan plans a Bond-athon for the bank holiday weekend with Michael, but they are jeopardised when he discovers that Michael has befreinded a man called Tex, who likes American things. Meanwhile, Lynn makes a visit to her mother's grave on the first anniversary of her death.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":\"/zPUqbSvcgMYdySVdoonjpAHPRmg.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2002-12-09\",\"episode_number\":5,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f910\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"},{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f8fa\",\"adult\":false,\"gender\":2,\"id\":6732,\"known_for_department\":\"Writing\",\"name\":\"Peter Baynham\",\"original_name\":\"Peter Baynham\",\"popularity\":0.75,\"profile_path\":\"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"5254152019c295794036fae8\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5254152019c295794036fb38\",\"order\":0,\"adult\":false,\"gender\":1,\"id\":1221739,\"known_for_department\":\"Acting\",\"name\":\"Jo Enright\",\"original_name\":\"Jo Enright\",\"popularity\":0.62,\"profile_path\":\"/sJ6nPrSb1MTvTBtz85e3SrF6Ugv.jpg\"},{\"character\":\"\",\"credit_id\":\"5254152019c295794036fb54\",\"order\":1,\"adult\":false,\"gender\":2,\"id\":75071,\"known_for_department\":\"Acting\",\"name\":\"Daniel Cerqueira\",\"original_name\":\"Daniel Cerqueira\",\"popularity\":1.48,\"profile_path\":\"/aqkcXKHRFr4w1f0SfeAe0UTnacE.jpg\"}],\"id\":55846,\"name\":\"I Know What Alan Did Last Summer\",\"overview\":\"Alan has a visit from the Inland Revenue and is worried about the submission of a receipt for a Christmas gift from Bill Oddie. Meanwhile, he tries to convince Sonja that he is indeed friends with Bono.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":\"/h6IZLAl3j10uW6b2j1hlNTElWX5.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2002-12-16\",\"episode_number\":6,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f910\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"},{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"5254151c19c295794036f8fa\",\"adult\":false,\"gender\":2,\"id\":6732,\"known_for_department\":\"Writing\",\"name\":\"Peter Baynham\",\"original_name\":\"Peter Baynham\",\"popularity\":0.75,\"profile_path\":\"/9PPjG6v2E3fnBxHyd2stvaeDldF.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"5254152019c295794036fae8\",\"adult\":false,\"gender\":2,\"id\":88926,\"known_for_department\":\"Acting\",\"name\":\"Armando Iannucci\",\"original_name\":\"Armando Iannucci\",\"popularity\":4.652,\"profile_path\":\"/uyDppm3bNkT7Q8Zsirz9Puu3ssX.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"5254152019c295794036fbe0\",\"order\":0,\"adult\":false,\"gender\":1,\"id\":1836,\"known_for_department\":\"Acting\",\"name\":\"Julia Davis\",\"original_name\":\"Julia Davis\",\"popularity\":4.029,\"profile_path\":\"/wsUNCSKoNQTgSdlr9FIeIR6hRAd.jpg\"},{\"character\":\"\",\"credit_id\":\"5254152019c295794036fbf6\",\"order\":1,\"adult\":false,\"gender\":1,\"id\":155530,\"known_for_department\":\"Acting\",\"name\":\"Rebecca Front\",\"original_name\":\"Rebecca Front\",\"popularity\":6.016,\"profile_path\":\"/t0HDaqyqbHAu9xGDVvtwzLmad2e.jpg\"},{\"character\":\"\",\"credit_id\":\"5254152019c295794036fac2\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":1222072,\"known_for_department\":\"Acting\",\"name\":\"Simon Ludders\",\"original_name\":\"Simon Ludders\",\"popularity\":1.316,\"profile_path\":\"/izbYsueYkFonY4qwG034UcppAJW.jpg\"},{\"character\":\"\",\"credit_id\":\"5254152019c295794036fc0c\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":47632,\"known_for_department\":\"Acting\",\"name\":\"Rob Brydon\",\"original_name\":\"Rob Brydon\",\"popularity\":5.888,\"profile_path\":\"/xoKLZVwzaUgTUEvPX4vymXpC1fU.jpg\"}],\"id\":55848,\"name\":\"Alan Wide Shut\",\"overview\":\"Alan's house is finally ready and Sonja is angling to cohabit. Meanwhile, Alan's book Bouncing Back has been unsuccessful, and is to be pulped and Lynne is to be baptised. All is going well, but Alan can't stop the flashbacks of the painful days when he ate 4 medium sized Toblerones and drove to Dundee in bare feet.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":\"/erZCSbAo60ngcblFbzsJAbWJfuf.jpg\",\"vote_average\":0,\"vote_count\":0}],\"name\":\"Season 2\",\"overview\":\"\",\"poster_path\":\"/znOKhcsRhBeW4qX2mGZvpf2TFWQ.jpg\",\"season_number\":2}},\"2491\":{\"adult\":false,\"backdrop_path\":null,\"created_by\":[{\"id\":7318,\"credit_id\":\"5f4a7972cfe48f0035b1ff6a\",\"name\":\"Peter Kay\",\"gender\":2,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"}],\"episode_run_time\":[30],\"first_air_date\":\"2004-11-12\",\"genres\":[{\"id\":35,\"name\":\"Comedy\"}],\"homepage\":\"http://www.channel4.com/programmes/max-and-paddys-road-to-nowhere\",\"id\":2491,\"in_production\":false,\"languages\":[\"en\"],\"last_air_date\":\"2004-12-17\",\"last_episode_to_air\":{\"air_date\":\"2004-12-17\",\"episode_number\":6,\"id\":189541,\"name\":\"\",\"overview\":\"A speed camera is the catalyst for a string of bad luck.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/2wut6iKXDzcCsINepGLsaVwqn6c.jpg\",\"vote_average\":0,\"vote_count\":0},\"name\":\"Max and Paddy's Road to Nowhere\",\"next_episode_to_air\":null,\"networks\":[{\"name\":\"Channel 4\",\"id\":26,\"logo_path\":\"/hbifXPpM55B1fL5wPo7t72vzN78.png\",\"origin_country\":\"GB\"}],\"number_of_episodes\":6,\"number_of_seasons\":1,\"origin_country\":[\"GB\"],\"original_language\":\"en\",\"original_name\":\"Max and Paddy's Road to Nowhere\",\"overview\":\"Max And Paddy's Road To Nowhere is the much-loved sequel to Peter Kay's critically-acclaimed comedy series, \\\"Phoenix Nights\\\". Written by and starring Peter Kay and Patrick McGuinness, this six-part comedy/drama series is the story of clueless Phoenix Club bouncers Max (Kay) and Paddy (McGuinness), as they escape clubland in their prized motor-home and take to the open highway.\",\"popularity\":3.766,\"poster_path\":\"/lenZvwj3gCXl4GDZlxTzWi5L4f1.jpg\",\"production_companies\":[{\"id\":57680,\"logo_path\":null,\"name\":\"Phil McIntyre Television\",\"origin_country\":\"\"},{\"id\":52368,\"logo_path\":null,\"name\":\"Goodnight Vienna Productions\",\"origin_country\":\"\"},{\"id\":5778,\"logo_path\":\"/2loyoQweDxvotH3AknfL2zhsthg.png\",\"name\":\"Channel 4 Television\",\"origin_country\":\"GB\"}],\"production_countries\":[],\"seasons\":[{\"air_date\":null,\"episode_count\":8,\"id\":7916,\"name\":\"Specials\",\"overview\":\"\",\"poster_path\":\"/8xKKjzr4aAe0w4Dzrbc3hvfwyEv.jpg\",\"season_number\":0},{\"air_date\":\"2004-11-12\",\"episode_count\":6,\"id\":7915,\"name\":\"Series 1\",\"overview\":\"\",\"poster_path\":\"/88wrL9BZXDRNmSWsGrnEg06NFGD.jpg\",\"season_number\":1}],\"spoken_languages\":[{\"english_name\":\"English\",\"iso_639_1\":\"en\",\"name\":\"English\"}],\"status\":\"Ended\",\"tagline\":\"\",\"type\":\"Scripted\",\"vote_average\":7.9,\"vote_count\":20,\"keywords\":{\"results\":[{\"name\":\"england\",\"id\":392},{\"name\":\"recreational vehicle\",\"id\":163795},{\"name\":\"sitcom\",\"id\":193171}]},\"season/1\":{\"_id\":\"52573aba19c29531db02be94\",\"air_date\":\"2004-11-12\",\"episodes\":[{\"air_date\":\"2004-11-12\",\"episode_number\":1,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52573abb19c29531db02beca\",\"adult\":false,\"gender\":2,\"id\":7318,\"known_for_department\":\"Acting\",\"name\":\"Peter Kay\",\"original_name\":\"Peter Kay\",\"popularity\":2.627,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"52573abb19c29531db02bede\",\"adult\":false,\"gender\":2,\"id\":7318,\"known_for_department\":\"Acting\",\"name\":\"Peter Kay\",\"original_name\":\"Peter Kay\",\"popularity\":2.627,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"}],\"guest_stars\":[{\"character\":\"Gypsy Joe\",\"credit_id\":\"5f4a7ddcd399e60032cb0ba6\",\"order\":1,\"adult\":false,\"gender\":2,\"id\":112827,\"known_for_department\":\"Acting\",\"name\":\"Brendan O'Carroll\",\"original_name\":\"Brendan O'Carroll\",\"popularity\":2.994,\"profile_path\":\"/akNqwQuSon0Oy9Z81zMXarXaQGh.jpg\"}],\"id\":189535,\"name\":\"Episode 1\",\"overview\":\"Living in such a confined space proves more difficult than they first thought and, without any suitable home entertainment, they end up sampling the local nightlife where Max's new dance moves are a hit with the infamous Belgrano sisters.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/2wut6iKXDzcCsINepGLsaVwqn6c.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2004-11-19\",\"episode_number\":2,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52573abb19c29531db02beca\",\"adult\":false,\"gender\":2,\"id\":7318,\"known_for_department\":\"Acting\",\"name\":\"Peter Kay\",\"original_name\":\"Peter Kay\",\"popularity\":2.627,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"52573abb19c29531db02bede\",\"adult\":false,\"gender\":2,\"id\":7318,\"known_for_department\":\"Acting\",\"name\":\"Peter Kay\",\"original_name\":\"Peter Kay\",\"popularity\":2.627,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"}],\"guest_stars\":[{\"character\":\"Mick Bustin\",\"credit_id\":\"5f4a7e2a90dde00037adbdd8\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":1092868,\"known_for_department\":\"Acting\",\"name\":\"Noddy Holder\",\"original_name\":\"Noddy Holder\",\"popularity\":3.492,\"profile_path\":\"/rs5bRDPXkYxQffUIDeoibWXRbWw.jpg\"},{\"character\":\"Billy 'The Butcher' Shannon\",\"credit_id\":\"5f4a7e7cce6c4c0036a110c7\",\"order\":4,\"adult\":false,\"gender\":2,\"id\":1231667,\"known_for_department\":\"Acting\",\"name\":\"Craig Cheetham\",\"original_name\":\"Craig Cheetham\",\"popularity\":0.6,\"profile_path\":\"/kvLoDPkCDTA3drPehw0bva4HJTS.jpg\"},{\"character\":\"Tina\",\"credit_id\":\"5f4a7f0ea1a9ba00355a8a40\",\"order\":5,\"adult\":false,\"gender\":1,\"id\":1753731,\"known_for_department\":\"Acting\",\"name\":\"Lisa Hammond\",\"original_name\":\"Lisa Hammond\",\"popularity\":3.23,\"profile_path\":null},{\"character\":\"Brian Potter\",\"credit_id\":\"5fca9703e1ad790040f73d0e\",\"order\":9,\"adult\":false,\"gender\":2,\"id\":7318,\"known_for_department\":\"Acting\",\"name\":\"Peter Kay\",\"original_name\":\"Peter Kay\",\"popularity\":2.627,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"}],\"id\":189536,\"name\":\"Episode 2\",\"overview\":\"Paddy is soon disenchanted after dabbling in the world of adult films and, on the road, disaster strikes when the motor home breaks down. This leads to a night spent sleeping rough in the woods with Max engaging in a few revealing campfire confessions.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/2wut6iKXDzcCsINepGLsaVwqn6c.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2004-11-26\",\"episode_number\":3,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52573abb19c29531db02beca\",\"adult\":false,\"gender\":2,\"id\":7318,\"known_for_department\":\"Acting\",\"name\":\"Peter Kay\",\"original_name\":\"Peter Kay\",\"popularity\":2.627,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"52573abb19c29531db02bede\",\"adult\":false,\"gender\":2,\"id\":7318,\"known_for_department\":\"Acting\",\"name\":\"Peter Kay\",\"original_name\":\"Peter Kay\",\"popularity\":2.627,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"}],\"guest_stars\":[{\"character\":\"Tina\",\"credit_id\":\"5f4a7f0ea1a9ba00355a8a40\",\"order\":5,\"adult\":false,\"gender\":1,\"id\":1753731,\"known_for_department\":\"Acting\",\"name\":\"Lisa Hammond\",\"original_name\":\"Lisa Hammond\",\"popularity\":3.23,\"profile_path\":null},{\"character\":\"The Wolfster\",\"credit_id\":\"5f4a8050ce6c4c0034a1e55f\",\"order\":8,\"adult\":false,\"gender\":2,\"id\":118619,\"known_for_department\":\"Acting\",\"name\":\"Tony Mooney\",\"original_name\":\"Tony Mooney\",\"popularity\":1.242,\"profile_path\":null}],\"id\":189537,\"name\":\"Episode 3\",\"overview\":\"Max bumps into one of his old school friends, only to find out a dark secret that turns his life upside-down.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/2wut6iKXDzcCsINepGLsaVwqn6c.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2004-12-03\",\"episode_number\":4,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52573abb19c29531db02beca\",\"adult\":false,\"gender\":2,\"id\":7318,\"known_for_department\":\"Acting\",\"name\":\"Peter Kay\",\"original_name\":\"Peter Kay\",\"popularity\":2.627,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"52573abb19c29531db02bede\",\"adult\":false,\"gender\":2,\"id\":7318,\"known_for_department\":\"Acting\",\"name\":\"Peter Kay\",\"original_name\":\"Peter Kay\",\"popularity\":2.627,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"}],\"guest_stars\":[{\"character\":\"Tina\",\"credit_id\":\"5f4a7f0ea1a9ba00355a8a40\",\"order\":5,\"adult\":false,\"gender\":1,\"id\":1753731,\"known_for_department\":\"Acting\",\"name\":\"Lisa Hammond\",\"original_name\":\"Lisa Hammond\",\"popularity\":3.23,\"profile_path\":null},{\"character\":\"Raymond the Bastard\",\"credit_id\":\"5f4a7f46858678003815b3b0\",\"order\":5,\"adult\":false,\"gender\":2,\"id\":1862015,\"known_for_department\":\"Acting\",\"name\":\"Everal Walsh\",\"original_name\":\"Everal Walsh\",\"popularity\":0.6,\"profile_path\":\"/iAAGn6ZDsEykjPpKqK6iMBDHU7c.jpg\"},{\"character\":\"The Wolfster\",\"credit_id\":\"5f4a8050ce6c4c0034a1e55f\",\"order\":8,\"adult\":false,\"gender\":2,\"id\":118619,\"known_for_department\":\"Acting\",\"name\":\"Tony Mooney\",\"original_name\":\"Tony Mooney\",\"popularity\":1.242,\"profile_path\":null},{\"character\":\"Brian Potter\",\"credit_id\":\"5fca9703e1ad790040f73d0e\",\"order\":9,\"adult\":false,\"gender\":2,\"id\":7318,\"known_for_department\":\"Acting\",\"name\":\"Peter Kay\",\"original_name\":\"Peter Kay\",\"popularity\":2.627,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"}],\"id\":189539,\"name\":\"Episode 4\",\"overview\":\"Max and Paddy are in prison and, to make matters worse, they have an unwelcome visitor.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/2wut6iKXDzcCsINepGLsaVwqn6c.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2004-12-10\",\"episode_number\":5,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52573abb19c29531db02beca\",\"adult\":false,\"gender\":2,\"id\":7318,\"known_for_department\":\"Acting\",\"name\":\"Peter Kay\",\"original_name\":\"Peter Kay\",\"popularity\":2.627,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"52573abb19c29531db02bede\",\"adult\":false,\"gender\":2,\"id\":7318,\"known_for_department\":\"Acting\",\"name\":\"Peter Kay\",\"original_name\":\"Peter Kay\",\"popularity\":2.627,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"}],\"guest_stars\":[{\"character\":\"Old Farmer\",\"credit_id\":\"5f4a7ff0cca7de003557e209\",\"order\":6,\"adult\":false,\"gender\":0,\"id\":1317170,\"known_for_department\":\"Acting\",\"name\":\"Graham Walker\",\"original_name\":\"Graham Walker\",\"popularity\":0.6,\"profile_path\":null}],\"id\":189540,\"name\":\"Episode 5\",\"overview\":\"Down on their luck, Max and Paddy quite literally hit on some good fortune.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/2wut6iKXDzcCsINepGLsaVwqn6c.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2004-12-17\",\"episode_number\":6,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52573abb19c29531db02beca\",\"adult\":false,\"gender\":2,\"id\":7318,\"known_for_department\":\"Acting\",\"name\":\"Peter Kay\",\"original_name\":\"Peter Kay\",\"popularity\":2.627,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"},{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"52573abb19c29531db02bede\",\"adult\":false,\"gender\":2,\"id\":7318,\"known_for_department\":\"Acting\",\"name\":\"Peter Kay\",\"original_name\":\"Peter Kay\",\"popularity\":2.627,\"profile_path\":\"/1WWc41N02Efxk2zRJM0KKUGjhuS.jpg\"}],\"guest_stars\":[{\"character\":\"Billy 'The Butcher' Shannon\",\"credit_id\":\"5f4a7e7cce6c4c0036a110c7\",\"order\":4,\"adult\":false,\"gender\":2,\"id\":1231667,\"known_for_department\":\"Acting\",\"name\":\"Craig Cheetham\",\"original_name\":\"Craig Cheetham\",\"popularity\":0.6,\"profile_path\":\"/kvLoDPkCDTA3drPehw0bva4HJTS.jpg\"}],\"id\":189541,\"name\":\"Episode 6\",\"overview\":\"A speed camera is the catalyst for a string of bad luck.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/2wut6iKXDzcCsINepGLsaVwqn6c.jpg\",\"vote_average\":0,\"vote_count\":0}],\"name\":\"Series 1\",\"overview\":\"\",\"poster_path\":\"/88wrL9BZXDRNmSWsGrnEg06NFGD.jpg\",\"season_number\":1}},\"3111\":{\"adult\":false,\"backdrop_path\":\"/a4w0GlRK2oWoZo3gcXrU0OHiXGk.jpg\",\"created_by\":[{\"id\":82804,\"credit_id\":\"52574c5819c29531db0b8bd4\",\"name\":\"Dominic Anciano\",\"gender\":2,\"profile_path\":null},{\"id\":82805,\"credit_id\":\"52574c5819c29531db0b8bce\",\"name\":\"Ray Burdis\",\"gender\":2,\"profile_path\":\"/mp3q2lsXkHH0AoZOnoippbV8CJv.jpg\"}],\"episode_run_time\":[30],\"first_air_date\":\"1997-12-29\",\"genres\":[{\"id\":35,\"name\":\"Comedy\"}],\"homepage\":\"\",\"id\":3111,\"in_production\":false,\"languages\":[\"en\"],\"last_air_date\":\"2000-08-31\",\"last_episode_to_air\":{\"air_date\":\"2000-08-31\",\"episode_number\":6,\"id\":234186,\"name\":\"Operation Snowdrop\",\"overview\":\"A race-relations officer gives the whiter-than-white squad some tips on how to conduct themselves.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},\"name\":\"Operation Good Guys\",\"next_episode_to_air\":null,\"networks\":[{\"name\":\"BBC Two\",\"id\":332,\"logo_path\":\"/6kl5tMuct7u3ej5myL4c9QQVSW1.png\",\"origin_country\":\"GB\"}],\"number_of_episodes\":19,\"number_of_seasons\":3,\"origin_country\":[\"GB\"],\"original_language\":\"en\",\"original_name\":\"Operation Good Guys\",\"overview\":\"Operation Good Guys is a British mockumentary, a fly-on-the-wall documentary series about an elite police unit's bid to snare one of Britain's most powerful crime lords.Blurring the line between fact and fiction, it witnesses, on camera, the total breakdown, professionally and personally, of the Operation Good Guys team. Throughout the operation, The 'Good Guys' have an unfortunate habit of embroiling into their calamitous world some of the country's best-known celebrities, from actors and footballers, to TV presenters and even the odd ex-convict.\",\"popularity\":3.226,\"poster_path\":\"/sit87tWGoKqpWjuagovkdDWQpw.jpg\",\"production_companies\":[],\"production_countries\":[],\"seasons\":[{\"air_date\":\"1997-01-01\",\"episode_count\":2,\"id\":9846,\"name\":\"Specials\",\"overview\":\"Pilot Season\",\"poster_path\":null,\"season_number\":0},{\"air_date\":\"1997-12-29\",\"episode_count\":7,\"id\":9844,\"name\":\"Season 1\",\"overview\":\"\",\"poster_path\":\"/ebWUMGQAZNMCfCYXjGumDnWvIpo.jpg\",\"season_number\":1},{\"air_date\":\"1999-07-05\",\"episode_count\":6,\"id\":9843,\"name\":\"Season 2\",\"overview\":\"\",\"poster_path\":null,\"season_number\":2},{\"air_date\":\"2000-07-07\",\"episode_count\":6,\"id\":9845,\"name\":\"Season 3\",\"overview\":\"\",\"poster_path\":null,\"season_number\":3}],\"spoken_languages\":[{\"english_name\":\"English\",\"iso_639_1\":\"en\",\"name\":\"English\"}],\"status\":\"Ended\",\"tagline\":\"\",\"type\":\"Scripted\",\"vote_average\":6.7,\"vote_count\":3,\"keywords\":{\"results\":[{\"name\":\"mockumentary\",\"id\":11800},{\"name\":\"workplace comedy\",\"id\":210605}]},\"season/1\":{\"_id\":\"52574c5419c29531db0b87b6\",\"air_date\":\"1997-12-29\",\"episodes\":[{\"air_date\":\"1997-12-29\",\"episode_number\":1,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"52574c5519c29531db0b8943\",\"order\":0,\"adult\":false,\"gender\":0,\"id\":1231577,\"known_for_department\":\"Acting\",\"name\":\"David Seaman\",\"original_name\":\"David Seaman\",\"popularity\":1.01,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b881b\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":86045,\"known_for_department\":\"Acting\",\"name\":\"Gary Beadle\",\"original_name\":\"Gary Beadle\",\"popularity\":4.067,\"profile_path\":\"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b8843\",\"order\":3,\"adult\":false,\"gender\":2,\"id\":82804,\"known_for_department\":\"Production\",\"name\":\"Dominic Anciano\",\"original_name\":\"Dominic Anciano\",\"popularity\":1.099,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b885d\",\"order\":4,\"adult\":false,\"gender\":2,\"id\":218375,\"known_for_department\":\"Acting\",\"name\":\"Mark Burdis\",\"original_name\":\"Mark Burdis\",\"popularity\":0.866,\"profile_path\":null}],\"id\":234141,\"name\":\"The Informant\",\"overview\":\"Operation Good Guys has been set up catch notorious villain Smiler McCarthy. Led by DI Beach the group of officers assigned to Operation Good Guys are the most inept bunch of coppers imaginable. When a possible informant on Smiler McCarthy's next move comes forward the men are forced to sit though a session with a punk hair dresser to get the time and place of Smiler's next job. They are told that shoot has been organised and the man involved is a major player.\\n\\nThinking this could be Smiler McCarthy the Good Guys lie in wait for him to arrive the venue they have been given by the informant. A car arrives and the Good Guys descend on its occupants who turn out to include footballer David Seaman (the major player) who has turned up for a photo shoot. Beach soon finds himself facing a lawsuit from Seaman's solicitors. De Sade meanwhile discovers that the so-called informant is in fact a one Lennie McCarthy, Smiler's cousin. The incident leaves Seaman unable to play in the World Cup and En\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1998-01-03\",\"episode_number\":2,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"52574c5519c29531db0b89c3\",\"order\":1,\"adult\":false,\"gender\":2,\"id\":47652,\"known_for_department\":\"Acting\",\"name\":\"Martin Kemp\",\"original_name\":\"Martin Kemp\",\"popularity\":3.556,\"profile_path\":\"/cex68RbEL5FW6VbcL1e52shUF1p.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b881b\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":86045,\"known_for_department\":\"Acting\",\"name\":\"Gary Beadle\",\"original_name\":\"Gary Beadle\",\"popularity\":4.067,\"profile_path\":\"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b8843\",\"order\":3,\"adult\":false,\"gender\":2,\"id\":82804,\"known_for_department\":\"Production\",\"name\":\"Dominic Anciano\",\"original_name\":\"Dominic Anciano\",\"popularity\":1.099,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b885d\",\"order\":4,\"adult\":false,\"gender\":2,\"id\":218375,\"known_for_department\":\"Acting\",\"name\":\"Mark Burdis\",\"original_name\":\"Mark Burdis\",\"popularity\":0.866,\"profile_path\":null}],\"id\":234154,\"name\":\"Radio Silence\",\"overview\":\"Beach decides to set up a drugs exchange with two men believed to be connected with Smiler McCarthy. Despite Bones protests, Beach assigns Mark Kemp (the commissioners' nephew) to be the bait and hand over the money. Roy Leyton grudgingly gives Beach the £2000 needed for the exchange despite the fact that funds are low. Mark waits with the money whilst being watched by Bones and Strings who are stationed in the flat of an old lady who rather likes Strings guitar playing (though Bones finds it a pain). Ash meanwhile is lying behind a wall and de Sade and his gang are squashed in a saloon car with the film crew.\\n\\nThe two guys arrive and Mark gives them the money despite the fact that Bones told him to ask to see the merchandise before paying up. They now have no drugs and have lost £2000. Bones is furious and demands that he meet the men on the second attempt. Beach agrees but insists that Mark accompany. Bones demands another two grand off Leyton who agrees to meet him with the money at\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1998-01-10\",\"episode_number\":3,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"52574c5519c29531db0b8a00\",\"order\":1,\"adult\":false,\"gender\":2,\"id\":12830,\"known_for_department\":\"Acting\",\"name\":\"Lou Hirsch\",\"original_name\":\"Lou Hirsch\",\"popularity\":1.096,\"profile_path\":\"/dxRykRWGwgODBcpzNKVMBJVnFk9.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b881b\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":86045,\"known_for_department\":\"Acting\",\"name\":\"Gary Beadle\",\"original_name\":\"Gary Beadle\",\"popularity\":4.067,\"profile_path\":\"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b8843\",\"order\":3,\"adult\":false,\"gender\":2,\"id\":82804,\"known_for_department\":\"Production\",\"name\":\"Dominic Anciano\",\"original_name\":\"Dominic Anciano\",\"popularity\":1.099,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b885d\",\"order\":4,\"adult\":false,\"gender\":2,\"id\":218375,\"known_for_department\":\"Acting\",\"name\":\"Mark Burdis\",\"original_name\":\"Mark Burdis\",\"popularity\":0.866,\"profile_path\":null}],\"id\":234160,\"name\":\"Frisk 'em\",\"overview\":\"Beach has decided to enlist the help of US cop Lou \\\"\\\"Frisk 'em\\\"\\\" Ferrino in their latest attempt to nab Smiler McCarthy. When Ferrino arrives he is quick to mock The Good Guys efforts and much to Beach's anger proceeds to take over. He sets up an exchange with Smiler McCarthy of $500,000 for £2,000,000 of counterfeit money. He has placed the money in a bag, which is rigged with aluminium dye, which will explode over Smiler as soon as he opens the bag thereby marking him and pinning this job on him (thus creating grounds for an arrest).\\n\\nThe plan backfires when Mark Kemp decides he wants to see half a million dollars as he'll never get the chance again. He opens the bag and covers all the Good Guys (apart from Beach who is in his office telling Ferrino that they are the best in the force). They are forced to use new tactics. They send Gary Barwick rigged with a camera into a pub to meet one of Smiler's men to find out when McCarthy will be taking the fake money. Instead Gary gets drunk and\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1998-01-17\",\"episode_number\":4,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"52574c5519c29531db0b8980\",\"order\":0,\"adult\":false,\"gender\":1,\"id\":1220307,\"known_for_department\":\"Acting\",\"name\":\"Gillian Taylforth\",\"original_name\":\"Gillian Taylforth\",\"popularity\":3.485,\"profile_path\":\"/9EiDDpgg8Voe8oe7UP4QUCRFC5r.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b881b\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":86045,\"known_for_department\":\"Acting\",\"name\":\"Gary Beadle\",\"original_name\":\"Gary Beadle\",\"popularity\":4.067,\"profile_path\":\"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b8843\",\"order\":3,\"adult\":false,\"gender\":2,\"id\":82804,\"known_for_department\":\"Production\",\"name\":\"Dominic Anciano\",\"original_name\":\"Dominic Anciano\",\"popularity\":1.099,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b885d\",\"order\":4,\"adult\":false,\"gender\":2,\"id\":218375,\"known_for_department\":\"Acting\",\"name\":\"Mark Burdis\",\"original_name\":\"Mark Burdis\",\"popularity\":0.866,\"profile_path\":null}],\"id\":234147,\"name\":\"Holiday\",\"overview\":\"After the problems of the last couple of weeks and everything that has happened, Beach decides to give the Good Guys the day off to recoup. De Sade and the ART decide to give Mark Kemp some training in armed policing. Kim Finch goes out on the pull with her friends and ends up getting arrested. Bones spends most of the day waiting to see a doctor about what turns out to be a double hernia. Gary goes home to deal with his domestic problems with his wife only to get thrown out and find she's killed his fish. Strings goes home to relax and play his guitar and ends up having the police round to charge him with disturbing the peace. Beach and Ash meanwhile decide to have a day out on the town together to take their mind off work and all the stress of Operation Good Guys. Of all the Good Guys de Sade is the most reluctant to let the film crew come home with him. When they later turn up un-announced they find de Sade, Mark and a couple of girls involved in some kinky sex games.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1998-01-24\",\"episode_number\":5,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"52574c5519c29531db0b8a3d\",\"order\":1,\"adult\":false,\"gender\":0,\"id\":1220501,\"known_for_department\":\"Acting\",\"name\":\"Matthew Wright\",\"original_name\":\"Matthew Wright\",\"popularity\":0.6,\"profile_path\":\"/o3bUrkScuFNrvzppNEyyW6whFRw.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b881b\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":86045,\"known_for_department\":\"Acting\",\"name\":\"Gary Beadle\",\"original_name\":\"Gary Beadle\",\"popularity\":4.067,\"profile_path\":\"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5519c29531db0b8a57\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":1220566,\"known_for_department\":\"Acting\",\"name\":\"Frankie Fraser\",\"original_name\":\"Frankie Fraser\",\"popularity\":0.6,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b8843\",\"order\":3,\"adult\":false,\"gender\":2,\"id\":82804,\"known_for_department\":\"Production\",\"name\":\"Dominic Anciano\",\"original_name\":\"Dominic Anciano\",\"popularity\":1.099,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b885d\",\"order\":4,\"adult\":false,\"gender\":2,\"id\":218375,\"known_for_department\":\"Acting\",\"name\":\"Mark Burdis\",\"original_name\":\"Mark Burdis\",\"popularity\":0.866,\"profile_path\":null}],\"id\":234165,\"name\":\"Safe as Houses\",\"overview\":\"Funding for Operation Good Guys hits an all time low. Things are so desperate that the electricity has been cut off at the office. Meanwhile a key witness on Smiler McCarthy has decided to come forward and expose McCarthy on national TV in exchange for police protection. The witness is none other than Mad Frankie Frazer. The Good Guys take him to a safe house or to be more accurate, Kim Finch's house, as they can't get a proper safe house. However his arrival is not much of a secret when the Good Guys put on a welcome party for him. Then later Mark brings his family round to meet Frankie despite the fact no one must know he's there.\\n\\nBack at the office meanwhile Ash is trying in vain to get the electricity going with a portable generator in time for the broadcast. Kim is getting more irritated by the Good Guys constant presence in her house especially because Strings keeps putting his feet on her sofa and Bones keeps blocking up the toilet. This also angers Frankie when Bones offers him\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1998-01-31\",\"episode_number\":6,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"52574c5619c29531db0b8a94\",\"order\":1,\"adult\":false,\"gender\":2,\"id\":133499,\"known_for_department\":\"Acting\",\"name\":\"Christopher Biggins\",\"original_name\":\"Christopher Biggins\",\"popularity\":2.151,\"profile_path\":\"/vXSB66jWLWjy3DXoHTa9zeg7sLb.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b881b\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":86045,\"known_for_department\":\"Acting\",\"name\":\"Gary Beadle\",\"original_name\":\"Gary Beadle\",\"popularity\":4.067,\"profile_path\":\"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b8843\",\"order\":3,\"adult\":false,\"gender\":2,\"id\":82804,\"known_for_department\":\"Production\",\"name\":\"Dominic Anciano\",\"original_name\":\"Dominic Anciano\",\"popularity\":1.099,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b885d\",\"order\":4,\"adult\":false,\"gender\":2,\"id\":218375,\"known_for_department\":\"Acting\",\"name\":\"Mark Burdis\",\"original_name\":\"Mark Burdis\",\"popularity\":0.866,\"profile_path\":null}],\"id\":234172,\"name\":\"Open Day\",\"overview\":\"In an attempt to persuade the Commissioner to give Operation Good Guys more funding Beach organises an Open Day at the office and enlists Christopher Biggins to help them. Biggins puts together a musical performance by Roy Leyton and Kim Finch (although Strings tries to interfere). Strings meanwhile organises a display of de Sade's Armed Response team by staging a fake hold up where he takes Gary and Kim hostage and de Sade and his team step in to save the day. Ash sets up a Smiler McCarthy shire where you throw balls at little cut outs of Smiler McCarthy. Beach and Ash them make cakes for the Open Day and Beach gives a Keith Floyd-like demonstration on how to make a prefect Fairy Cake.\\n\\nEverything seems to be going well until Mark decides to do a display of dog handling with his uncle's (the commissioner's) dog Sherlock. He enlists Bones to help him. Whilst Mark is all for keeping the display simple Bones wants it to be spectacular. They decide to try leaping through a flaming hoop. Un\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1998-02-07\",\"episode_number\":7,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b8801\",\"order\":1,\"adult\":false,\"gender\":0,\"id\":1215796,\"known_for_department\":\"Production\",\"name\":\"Geoffrey Perkins\",\"original_name\":\"Geoffrey Perkins\",\"popularity\":0.6,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b881b\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":86045,\"known_for_department\":\"Acting\",\"name\":\"Gary Beadle\",\"original_name\":\"Gary Beadle\",\"popularity\":4.067,\"profile_path\":\"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b8843\",\"order\":3,\"adult\":false,\"gender\":2,\"id\":82804,\"known_for_department\":\"Production\",\"name\":\"Dominic Anciano\",\"original_name\":\"Dominic Anciano\",\"popularity\":1.099,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b885d\",\"order\":4,\"adult\":false,\"gender\":2,\"id\":218375,\"known_for_department\":\"Acting\",\"name\":\"Mark Burdis\",\"original_name\":\"Mark Burdis\",\"popularity\":0.866,\"profile_path\":null}],\"id\":234181,\"name\":\"Sylvia La Plage\",\"overview\":\"The funds have gone, the Commissioner has refused to give them further funding. Operation Good Guys has been cancelled. Beach is devastated and at first refuses to accept it. Meanwhile the answer of the dwindling funds is answered when a postcard arrives from Spain. It's from Roy Leyton. He's taken all the funds from Operation Good Guys and done a runner. All the Good Guys are furious. Also Gary is still having problems with his wife whom he has promised Kim he will leave.\\n\\nBeach gives the Good Guys their final debriefing and invites them all out for a drink later. He tells them he has taught them all to be honest with one another and tonight he intends to be fully honest with them. At the Pub that night the Good Guys wait for Beach to arrive when Ash announces the entertainment for the evening, Sylvia la Plage. Out steps a large blonde lady who turns out to be none other than Beach himself - Beach is a cross dresser and he has decided to come clean and be honest about it. He and Ray do\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0}],\"name\":\"Season 1\",\"overview\":\"\",\"poster_path\":\"/ebWUMGQAZNMCfCYXjGumDnWvIpo.jpg\",\"season_number\":1},\"season/2\":{\"_id\":\"52574c5419c29531db0b87ab\",\"air_date\":\"1999-07-05\",\"episodes\":[{\"air_date\":\"1999-07-05\",\"episode_number\":1,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b87e7\",\"order\":0,\"adult\":false,\"gender\":2,\"id\":50121,\"known_for_department\":\"Acting\",\"name\":\"Alan Yentob\",\"original_name\":\"Alan Yentob\",\"popularity\":1.251,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b8801\",\"order\":1,\"adult\":false,\"gender\":0,\"id\":1215796,\"known_for_department\":\"Production\",\"name\":\"Geoffrey Perkins\",\"original_name\":\"Geoffrey Perkins\",\"popularity\":0.6,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b881b\",\"order\":2,\"adult\":false,\"gender\":2,\"id\":86045,\"known_for_department\":\"Acting\",\"name\":\"Gary Beadle\",\"original_name\":\"Gary Beadle\",\"popularity\":4.067,\"profile_path\":\"/A3XN1eiQ05fCbb4XP71thQgj0Ng.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b8843\",\"order\":3,\"adult\":false,\"gender\":2,\"id\":82804,\"known_for_department\":\"Production\",\"name\":\"Dominic Anciano\",\"original_name\":\"Dominic Anciano\",\"popularity\":1.099,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b885d\",\"order\":4,\"adult\":false,\"gender\":2,\"id\":218375,\"known_for_department\":\"Acting\",\"name\":\"Mark Burdis\",\"original_name\":\"Mark Burdis\",\"popularity\":0.866,\"profile_path\":null}],\"id\":234107,\"name\":\"Back to School\",\"overview\":\"Following the cancellation of Operation Good Guys, the Commissioner has decided to send Beach and his team back to Hendon for re-training before the Good Guys set off for their new assignment, Operation Zorro.\\n\\nBeach meanwhile after pleading with the BBC bosses has persuaded them to commission a new series of the documentary. He promises them that Operation Zorro will be spectacular. The Good Guys, now back in uniform arrive at Hendon and meet their Staff Sgt (or Staff as he's known). Staff is a tough man and picks on Beach mercilessly and insists on calling him Bitch. Mark meanwhile is appointed as Staff's assistant but only after Staff finds out that Mark is the commissioner's nephew.\\n\\nThe Good Guys all have sessions with a therapist and go through rigorous training and Mark loves being able to boss them all about. They split into two teams for a teamwork exercise and Beach and Strings are the captains. Ash is a little surprised when Beach chooses de Sade and Bill Zeebub from the ART a\",\"production_code\":\"\",\"season_number\":2,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1999-07-12\",\"episode_number\":2,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b8888\",\"order\":0,\"adult\":false,\"gender\":2,\"id\":9012,\"known_for_department\":\"Acting\",\"name\":\"Jonny Lee Miller\",\"original_name\":\"Jonny Lee Miller\",\"popularity\":7.444,\"profile_path\":\"/otCQdDtnrMvZ5tPC62zLx0SaXeR.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b88a2\",\"order\":1,\"adult\":false,\"gender\":2,\"id\":9642,\"known_for_department\":\"Acting\",\"name\":\"Jude Law\",\"original_name\":\"Jude Law\",\"popularity\":20.712,\"profile_path\":\"/pj75cHQ3oLSFPJ0IyB6Bkg6ytHu.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b8843\",\"order\":3,\"adult\":false,\"gender\":2,\"id\":82804,\"known_for_department\":\"Production\",\"name\":\"Dominic Anciano\",\"original_name\":\"Dominic Anciano\",\"popularity\":1.099,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b885d\",\"order\":4,\"adult\":false,\"gender\":2,\"id\":218375,\"known_for_department\":\"Acting\",\"name\":\"Mark Burdis\",\"original_name\":\"Mark Burdis\",\"popularity\":0.866,\"profile_path\":null}],\"id\":234118,\"name\":\"Stardust\",\"overview\":\"Hollywood comes to Hendon in the form of Jude Law and Jonny Lee Miller. Whilst Jude observes Ash and Beach, Jonny is sent out with de Sade and the ART to do observation at the commissioner's house, which is being renovated. However they don't' know they're being filmed so de Sade and Bill set about stripping the house of anything they think they can flog, including all the plumbing which causes a flood and destroys the upper floors.\\n\\nBeach meanwhile tries to demonstrate the art of trailing criminals by trying to trail Jude and Ash. He fails dismally. He then takes Jude home to meet his mother. Bones meanwhile after eating some of his homemade butter goes out vigilante crime fighting with Mark on the underground. Their patrol is cut short when Bones has a severe case of gut rot from his butter and after failing to find a toilet is forced to go to the loo in his rucksack. Later on the streets a thugs runs past them and whips Bones bag. Bones and Mark give chase and arrest him. Bones then\",\"production_code\":\"\",\"season_number\":2,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1999-07-19\",\"episode_number\":3,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b88d9\",\"order\":0,\"adult\":false,\"gender\":2,\"id\":65303,\"known_for_department\":\"Acting\",\"name\":\"Mark Wingett\",\"original_name\":\"Mark Wingett\",\"popularity\":0.6,\"profile_path\":\"/uT3QCwMDSXw6FJdTBTpBNJnDFZS.jpg\"},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b8843\",\"order\":3,\"adult\":false,\"gender\":2,\"id\":82804,\"known_for_department\":\"Production\",\"name\":\"Dominic Anciano\",\"original_name\":\"Dominic Anciano\",\"popularity\":1.099,\"profile_path\":null},{\"character\":\"\",\"credit_id\":\"52574c5419c29531db0b885d\",\"order\":4,\"adult\":false,\"gender\":2,\"id\":218375,\"known_for_department\":\"Acting\",\"name\":\"Mark Burdis\",\"original_name\":\"Mark Burdis\",\"popularity\":0.866,\"profile_path\":null}],\"id\":234126,\"name\":\"Forensics\",\"overview\":\"The Good Guys begin the next stage of their training, forensics. They are sent to the scene of a sweet shop robbery to look for fingerprints and evidence. Beach and Ray however spend the whole investigation gorging themselves on the sweets and chocolates talking about things like the colour of aniseed balls and the best type of chocolate bar. The investigation is ruined when it turns out that Beach is not wearing gloves and all the prints they have found are his. Plus the robber was wearing gloves anyway.\\n\\nHowever they do find a blood and hair sample near a broken window. They decide to go to the hospital and knick anyone who has recently been admitted with a cut head. They end up bringing in some quite badly injured people for questioning and Beach is soon convinced they have the man. Not only has he a cut head but he also has a quarter of a pound of cola cubes on him. The lady from the shop however says it's not the right man though Beach is convinced still and believes the forensics\",\"production_code\":\"\",\"season_number\":2,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1999-07-26\",\"episode_number\":4,\"crew\":[],\"guest_stars\":[],\"id\":234136,\"name\":\"I Will Survive\",\"overview\":\"The Good Guys are sent on a survival course at Camp Alpha run by a man called Big Jim. They make their way there along a canal in boats and end up facing their first unofficial test. A bunch of kids on the towpath insulting them. Bones gets rid of them by throwing eggs at them but this later backfires when the Dad of one of the boys bombards Beach and Ray's boat and sinks them. The Good Guys eventually reach Camp Alpha and meet Mad Jim who seems to have a rather unhealthy interest in Hitler.\\n\\nGary feels threatened by Mad Jim and his hatred of black people. Beach tries to calm Gary down but Gary won't be budged. Beach goes to see Mad Jim to ask about his politics. However Mad Jim decides to introduce Ray to his pigs. When Ray emerges from the barn he looks somewhat roughed up. The next morning Mad Jim flattens the Good Guys tents with a tank and then sets up the days exercise. They have to imagine they are tracking down a mean, godless, evil person with no soul. That part will be played\",\"production_code\":\"\",\"season_number\":2,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1999-08-02\",\"episode_number\":5,\"crew\":[],\"guest_stars\":[],\"id\":234137,\"name\":\"Viva Espana\",\"overview\":\"Operation Zorro has at last arrived. The Good Guys are making final preparations for the trip to Spain where the Operation will take place. Problems immediately arise when they find their luggage is over weight thanks to Beach's trunk, Strings' guitar and the Commissioner's golf clubs, which Mark Kemp (his nephew) is taking to his villa for him. There are further problems when Beach looks at Ray's nine-year-old passport and notices that the photo shows a younger Ray with more hair than he has now and insists Ray wears a wig to get through Passport control.\\n\\nAt the airport later Mark leaves his uncle's clubs unattended and they get blown up. Ray and de Sade end up dropping Beach's trunk on his foot. In desperate need of some pain killers Beach ends up taking de Sade's special forces pain killers only to learn they are very powerful and have weird side effects. He turns over control to Ray just before he starts hallucinating. After a rather disturbed journey thanks to a manic Beach the Go\",\"production_code\":\"\",\"season_number\":2,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1999-08-09\",\"episode_number\":6,\"crew\":[],\"guest_stars\":[],\"id\":234139,\"name\":\"Operation Zorro\",\"overview\":\"The Good Guys have settled into their rooms at last and are now preparing for Operation Zorro, the reason they have come out here. However the Good Guys despite Beach's insistence that they are not on holiday seem to be spending too much time enjoying themselves.\\n\\nAs always things do not go off without a hitch. First Beach ends up lying in the sun too long and severely burns himself, which makes him very grumpy as well as sore. The Operation is put on hold whilst his skin calms down a bit. Meanwhile Bones and Mark decide to try and join in with Spanish culture by indulging in a touch of naturism which results in their being arrested for indecent exposure. They are released on bail for the Operation, which finally takes place. However the promised dramatic Operation turns out to be a simple handover of an envelope. Hugo Blick is really worried about what his bosses at the BBC will say. Beach comes up with a solution, they will shoot a reconstruction, which he will write and direct and th\",\"production_code\":\"\",\"season_number\":2,\"still_path\":null,\"vote_average\":0,\"vote_count\":0}],\"name\":\"Season 2\",\"overview\":\"\",\"poster_path\":null,\"season_number\":2},\"season/3\":{\"_id\":\"52574c5419c29531db0b87c4\",\"air_date\":\"2000-07-07\",\"episodes\":[{\"air_date\":\"2000-07-07\",\"episode_number\":1,\"crew\":[],\"guest_stars\":[],\"id\":234200,\"name\":\"That's Entertainment\",\"overview\":\"Drug busts are an everyday adventure for a police unit, but how often do they get a chance to do a christmas extravaganza?  D.I Beach wants elves, snow and Val Doonican;  He gets Denise Van Outen, cocaine and a dwarf with attitude.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2000-08-03\",\"episode_number\":2,\"crew\":[],\"guest_stars\":[],\"id\":234198,\"name\":\"Castaway\",\"overview\":\"The BBC see desert island TV as a sure-fire ratings winner.  Soon a starving Beach is looking at \\\"\\\"fleshy\\\"\\\" Bones in a new light, while a resourceful Donna Air is giving Ash some survival tips.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2000-08-10\",\"episode_number\":3,\"crew\":[],\"guest_stars\":[],\"id\":234196,\"name\":\"Raging Pig\",\"overview\":\"Leopard skin shorts, big hair-do's, large trouser proturbance...  The good guys enter the fight game, while Bones has his wedding tackle adjusted.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2000-08-17\",\"episode_number\":4,\"crew\":[],\"guest_stars\":[],\"id\":234189,\"name\":\"The Leader\",\"overview\":\"\\\"\\\"I am a policeman 24 hours a day, I am also the chosen one who wears the horns of Hurn.\\\"\\\"  A strange cult has Beach by the short and curlies - and plans to cut them off!\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2000-08-24\",\"episode_number\":5,\"crew\":[],\"guest_stars\":[],\"id\":234193,\"name\":\"Jubilee\",\"overview\":\"Security is needed when the code-named 'Jubilee Family' visit.  For a change, the crap doesn't hit the fan, just the walls, windows, doors....\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2000-08-31\",\"episode_number\":6,\"crew\":[],\"guest_stars\":[],\"id\":234186,\"name\":\"Operation Snowdrop\",\"overview\":\"A race-relations officer gives the whiter-than-white squad some tips on how to conduct themselves.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":0,\"vote_count\":0}],\"name\":\"Season 3\",\"overview\":\"\",\"poster_path\":null,\"season_number\":3}},\"3641\":{\"adult\":false,\"backdrop_path\":\"/3vsQurBLHdthkTIMTEE3a5ebHyI.jpg\",\"created_by\":[{\"id\":1221040,\"credit_id\":\"525753bc19c29531db11ab40\",\"name\":\"Bryan Elsley\",\"gender\":2,\"profile_path\":null}],\"episode_run_time\":[35,60],\"first_air_date\":\"1998-11-10\",\"genres\":[{\"id\":35,\"name\":\"Comedy\"}],\"homepage\":\"\",\"id\":3641,\"in_production\":false,\"languages\":[\"en\"],\"last_air_date\":\"1998-12-15\",\"last_episode_to_air\":{\"air_date\":\"1998-12-15\",\"episode_number\":6,\"id\":257233,\"name\":\"Shifting the Units\",\"overview\":\"Promoting a rock band is not always easy as the band soon finds out when they realize that they have to perform on a childrens' TV show. To make matters worse, Jocks Wa Hey seems to be growing apart due to rising tensions between the band members.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},\"name\":\"The Young Person's Guide to Becoming a Rock Star\",\"next_episode_to_air\":null,\"networks\":[{\"name\":\"Channel 4\",\"id\":26,\"logo_path\":\"/hbifXPpM55B1fL5wPo7t72vzN78.png\",\"origin_country\":\"GB\"}],\"number_of_episodes\":8,\"number_of_seasons\":1,\"origin_country\":[\"GB\"],\"original_language\":\"en\",\"original_name\":\"The Young Person's Guide to Becoming a Rock Star\",\"overview\":\"The Young Person's Guide to Becoming a Rock Star is a British comedy series, which aired on Channel 4 in 1998. It was a six-part satirical take on the music industry, written by Skins creator Bryan Elsley. The plot centered around a young Glaswegian band - Jocks Wa Hey - as they struggle to find success.\\n\\nThe series won the 'Best Drama Serial' award at the 1999 RTS Television Awards and, that same year, writer Bryan Esley was nominated in the RTS 'Best Writer' category for the series.\\n\\nIt was remade as My Guide to Becoming a Rock Star, a short-lived American/Canadian series that starred Oliver Hudson and was made for the now defunct The WB Television Network.\",\"popularity\":2.206,\"poster_path\":\"/a9Xq0kiB9mvDPv76U19DJTj47M6.jpg\",\"production_companies\":[{\"id\":57767,\"logo_path\":null,\"name\":\"Company Television\",\"origin_country\":\"\"},{\"id\":57769,\"logo_path\":null,\"name\":\"Bronco Films\",\"origin_country\":\"\"}],\"production_countries\":[],\"seasons\":[{\"air_date\":\"1998-11-10\",\"episode_count\":8,\"id\":10961,\"name\":\"Season 1\",\"overview\":\"\",\"poster_path\":null,\"season_number\":1}],\"spoken_languages\":[{\"english_name\":\"English\",\"iso_639_1\":\"en\",\"name\":\"English\"}],\"status\":\"Ended\",\"tagline\":\"\",\"type\":\"Scripted\",\"vote_average\":5.9,\"vote_count\":4,\"keywords\":{\"results\":[{\"name\":\"rock band\",\"id\":18001}]},\"season/1\":{\"_id\":\"525753bb19c29531db11aa13\",\"air_date\":\"1998-11-10\",\"episodes\":[{\"air_date\":\"1998-11-10\",\"episode_number\":1,\"crew\":[{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"525753bb19c29531db11aa40\",\"adult\":false,\"gender\":1,\"id\":123798,\"known_for_department\":\"Directing\",\"name\":\"Sheree Folkson\",\"original_name\":\"Sheree Folkson\",\"popularity\":1.583,\"profile_path\":null}],\"guest_stars\":[],\"id\":257227,\"name\":\"Lifestyles of the Rich and Famous\",\"overview\":\"The satirical comedy/drama about a rock band from Glasgow begins and we're introduced to Jez and his bandmates known as Jocks Wa Hey. Jez's meeting Fiona, a DSS officer/musician, along with the band's first gig leads to something unexpected.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1998-11-17\",\"episode_number\":2,\"crew\":[{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"525753bb19c29531db11aa40\",\"adult\":false,\"gender\":1,\"id\":123798,\"known_for_department\":\"Directing\",\"name\":\"Sheree Folkson\",\"original_name\":\"Sheree Folkson\",\"popularity\":1.583,\"profile_path\":null}],\"guest_stars\":[],\"id\":257228,\"name\":\"Creating the Buzz\",\"overview\":\"After a wild night together, involving the band's gig and nude guitar playing, Jez decides to ask Fiona to join Jocks Wa Hey.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1998-11-24\",\"episode_number\":3,\"crew\":[{\"department\":\"Directing\",\"job\":\"Director\",\"credit_id\":\"525753bb19c29531db11aa40\",\"adult\":false,\"gender\":1,\"id\":123798,\"known_for_department\":\"Directing\",\"name\":\"Sheree Folkson\",\"original_name\":\"Sheree Folkson\",\"popularity\":1.583,\"profile_path\":null}],\"guest_stars\":[],\"id\":257230,\"name\":\"The A&R Men Cometh\",\"overview\":\"Three months have passed, the band has been gigging non-stop without a sniff from a record company. Fiona and Jez confront Art who agrees to put on an industry showcase at Glasgow Barrowlands. All they have to do now is sell 500 tickets in six days, prepare for the A & R onslaught and sign a deal ... with Slick Sloan from Massive Mix Records.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1998-12-01\",\"episode_number\":4,\"crew\":[],\"guest_stars\":[],\"id\":257231,\"name\":\"Sign on the Line\",\"overview\":\"In London, the band readies to make a deal with Slick Sloan. A deal which could turn them into London's next big thing.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1998-12-08\",\"episode_number\":5,\"crew\":[],\"guest_stars\":[],\"id\":257232,\"name\":\"Making Tracks\",\"overview\":\"Musician Fish guest stars as Derek Trout, a rock star whose house is being used to record Jocks Wa Hey's first big album.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"1998-12-15\",\"episode_number\":6,\"crew\":[],\"guest_stars\":[],\"id\":257233,\"name\":\"Shifting the Units\",\"overview\":\"Promoting a rock band is not always easy as the band soon finds out when they realize that they have to perform on a childrens' TV show. To make matters worse, Jocks Wa Hey seems to be growing apart due to rising tensions between the band members.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"\",\"episode_number\":7,\"crew\":[],\"guest_stars\":[],\"id\":257226,\"name\":\"Delete this\",\"overview\":\"\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"\",\"episode_number\":8,\"crew\":[],\"guest_stars\":[],\"id\":257234,\"name\":\"Episode 8\",\"overview\":\"\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":0,\"vote_count\":0}],\"name\":\"Season 1\",\"overview\":\"\",\"poster_path\":null,\"season_number\":1}},\"7755\":{\"adult\":false,\"backdrop_path\":\"/kxPXRc39ToaoZ6mq7SDpgwXWKtO.jpg\",\"created_by\":[{\"id\":209578,\"credit_id\":\"5e271b8aed2ac2001539e2dd\",\"name\":\"Laura Haddock\",\"gender\":1,\"profile_path\":\"/6kRUvA7N3pMzznG9PdiqCOvxhGQ.jpg\"},{\"id\":1234239,\"credit_id\":\"5e271b564ca676001a3f3640\",\"name\":\"Dan Clark\",\"gender\":0,\"profile_path\":null},{\"id\":1240146,\"credit_id\":\"5e271b701685da0011df2034\",\"name\":\"David Armand\",\"gender\":2,\"profile_path\":\"/zzQHbhg7AyX3X2XZq7rxFi5aPh0.jpg\"}],\"episode_run_time\":[30],\"first_air_date\":\"2007-09-27\",\"genres\":[{\"id\":35,\"name\":\"Comedy\"}],\"homepage\":\"http://www.bbc.co.uk/programmes/b00d1nmh\",\"id\":7755,\"in_production\":false,\"languages\":[\"en\"],\"last_air_date\":\"2010-12-13\",\"last_episode_to_air\":{\"air_date\":\"2010-12-13\",\"episode_number\":7,\"id\":390544,\"name\":\"Don the Musical\",\"overview\":\"After seeing the attention Eddie gets in his theatre club's production of Rain Man, Don decides to join up. The club puts on a tremendous production of Top Gun: The Musical. Meanwhile, Brian is still waiting to get a response from Sam about his proposal and is so desperate he even asks Don for advice.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":8,\"vote_count\":1},\"name\":\"How Not to Live Your Life\",\"next_episode_to_air\":null,\"networks\":[{\"name\":\"BBC Three\",\"id\":3,\"logo_path\":\"/qh5IQT9j5yNuxzVLC4v9DA5mPQO.png\",\"origin_country\":\"GB\"}],\"number_of_episodes\":19,\"number_of_seasons\":3,\"origin_country\":[\"GB\"],\"original_language\":\"en\",\"original_name\":\"How Not to Live Your Life\",\"overview\":\"Don is a single twentysomething who constantly fails to guide his way through life. His overactive mind doesn't help things as it plays out scenes of what he shouldn't say or do. When he moves into his recently deceased grandmother's house, he meets Eddie: his Gran's carer who doesn't want to leave. To help pay his rent, he decides to get a roommate in the shape of his teenage sweetheart...\",\"popularity\":4.246,\"poster_path\":\"/tXhU3uuQxidODJEAPuXCnO6G118.jpg\",\"production_companies\":[],\"production_countries\":[],\"seasons\":[{\"air_date\":\"2009-07-22\",\"episode_count\":6,\"id\":17908,\"name\":\"Specials\",\"overview\":\"\",\"poster_path\":null,\"season_number\":0},{\"air_date\":\"2008-08-12\",\"episode_count\":6,\"id\":17906,\"name\":\"Season 1\",\"overview\":\"\",\"poster_path\":\"/p1bc0pPaD526t5ghidTNHmmiZYA.jpg\",\"season_number\":1},{\"air_date\":\"2009-09-14\",\"episode_count\":6,\"id\":17905,\"name\":\"Season 2\",\"overview\":\"\",\"poster_path\":\"/oI9ZM9HbxjPvUfLiRiCwDfNZWtk.jpg\",\"season_number\":2},{\"air_date\":\"2010-11-08\",\"episode_count\":7,\"id\":17907,\"name\":\"Season 3\",\"overview\":\"\",\"poster_path\":\"/r8qkxHxxkiTqlTh3hw8qfowWlBe.jpg\",\"season_number\":3}],\"spoken_languages\":[{\"english_name\":\"English\",\"iso_639_1\":\"en\",\"name\":\"English\"}],\"status\":\"Ended\",\"tagline\":\"\",\"type\":\"Scripted\",\"vote_average\":7.5,\"vote_count\":34,\"keywords\":{\"results\":[{\"name\":\"single\",\"id\":9457},{\"name\":\"sitcom\",\"id\":193171},{\"name\":\"pessimist\",\"id\":206093}]},\"season/1\":{\"_id\":\"52578e00760ee36aaa6a6bcd\",\"air_date\":\"2008-08-12\",\"episodes\":[{\"air_date\":\"2008-08-12\",\"episode_number\":1,\"crew\":[],\"guest_stars\":[],\"id\":390538,\"name\":\"Home Sweet Home\",\"overview\":\"Don's recently deceased grandmother has left him a house in her will. However, it comes with a huge backpayment and a strange man who won't leave. To help ease the load, Don decides to bring in a lodger.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":8,\"vote_count\":1},{\"air_date\":\"2008-08-19\",\"episode_number\":2,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52578e02760ee36aaa6a6cab\",\"adult\":false,\"gender\":2,\"id\":1239407,\"known_for_department\":\"Writing\",\"name\":\"Drew Pearce\",\"original_name\":\"Drew Pearce\",\"popularity\":0.805,\"profile_path\":\"/yEOWkrpGXdtFWAYOY2dywSKHPKm.jpg\"}],\"guest_stars\":[],\"id\":390539,\"name\":\"The Field Trip\",\"overview\":\"In an attempt to prove to Abby that he's a good person, Don accompanies her on a field trip with the kids from her school. However, his plan goes horribly wrong...\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":8,\"vote_count\":1},{\"air_date\":\"2008-08-26\",\"episode_number\":3,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52578e02760ee36aaa6a6cab\",\"adult\":false,\"gender\":2,\"id\":1239407,\"known_for_department\":\"Writing\",\"name\":\"Drew Pearce\",\"original_name\":\"Drew Pearce\",\"popularity\":0.805,\"profile_path\":\"/yEOWkrpGXdtFWAYOY2dywSKHPKm.jpg\"}],\"guest_stars\":[],\"id\":390540,\"name\":\"Fake Wake\",\"overview\":\"Don discovers he's got to put on a wake for his dead grandmother, the only problem is he's already cremated her.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2008-09-02\",\"episode_number\":4,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52578e02760ee36aaa6a6cab\",\"adult\":false,\"gender\":2,\"id\":1239407,\"known_for_department\":\"Writing\",\"name\":\"Drew Pearce\",\"original_name\":\"Drew Pearce\",\"popularity\":0.805,\"profile_path\":\"/yEOWkrpGXdtFWAYOY2dywSKHPKm.jpg\"}],\"guest_stars\":[{\"character\":\"Chugger\",\"credit_id\":\"52578e02760ee36aaa6a6ceb\",\"order\":0,\"adult\":false,\"gender\":2,\"id\":1239564,\"known_for_department\":\"Acting\",\"name\":\"Arnab Chanda\",\"original_name\":\"Arnab Chanda\",\"popularity\":0.6,\"profile_path\":\"/kDFaoVQAHoHKiTDyAey4TjjVQqm.jpg\"},{\"character\":\"Charity Worker\",\"credit_id\":\"5ea8cd1a514c4a00218c1cfa\",\"order\":10,\"adult\":false,\"gender\":0,\"id\":1663574,\"known_for_department\":\"Acting\",\"name\":\"Scarlett Rose Patterson\",\"original_name\":\"Scarlett Rose Patterson\",\"popularity\":0.6,\"profile_path\":\"/63fUb1PFrkJZw3kbyVnPZhGOAn9.jpg\"}],\"id\":390541,\"name\":\"The Young Ones\",\"overview\":\"While working as a charity street collector, Don meets an attractive girl who is nine years younger. He starts to hang out with her and her friends, but soon finds he isn't as young as he once was.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":8,\"vote_count\":1},{\"air_date\":\"2008-09-09\",\"episode_number\":5,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52578e02760ee36aaa6a6cab\",\"adult\":false,\"gender\":2,\"id\":1239407,\"known_for_department\":\"Writing\",\"name\":\"Drew Pearce\",\"original_name\":\"Drew Pearce\",\"popularity\":0.805,\"profile_path\":\"/yEOWkrpGXdtFWAYOY2dywSKHPKm.jpg\"}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"57279ec4c3a3682dee001000\",\"order\":7,\"adult\":false,\"gender\":2,\"id\":17353,\"known_for_department\":\"Acting\",\"name\":\"Matthew Marsh\",\"original_name\":\"Matthew Marsh\",\"popularity\":1.552,\"profile_path\":\"/9NfvGnHBZI4CwyPIOgv8qPMIaAv.jpg\"}],\"id\":390542,\"name\":\"Like Father, Like Don\",\"overview\":\"Don gets a new job working for Karl's dad, Glen. While there, the feud between the two increases and Don finds the father figure he never had.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":8,\"vote_count\":1},{\"air_date\":\"2008-09-16\",\"episode_number\":6,\"crew\":[],\"guest_stars\":[],\"id\":390543,\"name\":\"The Break Up\",\"overview\":\"Things don’t go as planned when Don goes out on the pull with Eddie. Don finds out that Abby is single again when he returns home and he ends up upsetting the girl he met whilst out.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":8,\"vote_count\":1}],\"name\":\"Season 1\",\"overview\":\"\",\"poster_path\":\"/p1bc0pPaD526t5ghidTNHmmiZYA.jpg\",\"season_number\":1},\"season/2\":{\"_id\":\"52578e00760ee36aaa6a6bc2\",\"air_date\":\"2009-09-14\",\"episodes\":[{\"air_date\":\"2009-09-14\",\"episode_number\":1,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"52578e01760ee36aaa6a6bfe\",\"order\":0,\"adult\":false,\"gender\":2,\"id\":1240907,\"known_for_department\":\"Acting\",\"name\":\"Limahl\",\"original_name\":\"Limahl\",\"popularity\":1.45,\"profile_path\":\"/cpLhwMxyI6rX5L0P5bdQKhPuE0r.jpg\"}],\"id\":390532,\"name\":\"Don's New Flatmate\",\"overview\":\"With Abby having been gone for about six months, Don and Eddie both want different women to move into the spare room.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":null,\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2009-09-22\",\"episode_number\":2,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"57279f229251417744006ccd\",\"order\":9,\"adult\":false,\"gender\":1,\"id\":183148,\"known_for_department\":\"Acting\",\"name\":\"Rachel Fielding\",\"original_name\":\"Rachel Fielding\",\"popularity\":0.84,\"profile_path\":null}],\"id\":390533,\"name\":\"Don Dates a Cougar\",\"overview\":\"Don starts dating an older woman but can't handle the grown up world she lives in. Sam has befriended a male friend from university who Don catches rifling through her underwear drawer.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":null,\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2009-09-29\",\"episode_number\":3,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"52578e01760ee36aaa6a6c3a\",\"order\":0,\"adult\":false,\"gender\":2,\"id\":98104,\"known_for_department\":\"Acting\",\"name\":\"Julian Barratt\",\"original_name\":\"Julian Barratt\",\"popularity\":3.982,\"profile_path\":\"/ltwOEsHkes9oCgy9Dl95q8nMyUT.jpg\"}],\"id\":390534,\"name\":\"Don the Singer\",\"overview\":\"Sam is dating cool singer-songwriter Jackson, reawakening Don's hitherto unspoken ambition to be a musician.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":null,\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2009-10-06\",\"episode_number\":4,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"57279ee19251416dfb001c14\",\"order\":8,\"adult\":false,\"gender\":2,\"id\":1013048,\"known_for_department\":\"Acting\",\"name\":\"Theo Barklem-Biggs\",\"original_name\":\"Theo Barklem-Biggs\",\"popularity\":3.175,\"profile_path\":\"/r1xIDN0ca9NRngD7m560yuZg2Sp.jpg\"}],\"id\":390535,\"name\":\"Don Goes Gay\",\"overview\":\"Don's lodger, Sam, invites her brother, Jamie, over for the weekend. Dan starts to wonder if he is gay.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":null,\"vote_average\":8,\"vote_count\":1},{\"air_date\":\"2009-10-13\",\"episode_number\":5,\"crew\":[],\"guest_stars\":[],\"id\":390536,\"name\":\"Don Gets Healthy\",\"overview\":\"Don joins a gym to prove to Sam and Eddie that he's fit and healthy, but he fails to get beyond the running machine without passing out. He soon gives up on the gym and decides to go for a colonic irrigation, instead, where he ends up agreeing to go on a date with the therapist.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":null,\"vote_average\":8,\"vote_count\":1},{\"air_date\":\"2009-10-20\",\"episode_number\":6,\"crew\":[],\"guest_stars\":[],\"id\":390537,\"name\":\"Don and the Wedding\",\"overview\":\"Don is asked to be the best man at his old school friend's wedding. But finding someone to pretend to be his wife for the day is far from his only challenge.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":null,\"vote_average\":9,\"vote_count\":1}],\"name\":\"Season 2\",\"overview\":\"\",\"poster_path\":\"/oI9ZM9HbxjPvUfLiRiCwDfNZWtk.jpg\",\"season_number\":2},\"season/3\":{\"_id\":\"52578e00760ee36aaa6a6bd8\",\"air_date\":\"2010-11-08\",\"episodes\":[{\"air_date\":\"2010-11-08\",\"episode_number\":1,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52578e02760ee36aaa6a6d65\",\"adult\":false,\"gender\":0,\"id\":1234239,\"known_for_department\":\"Acting\",\"name\":\"Dan Clark\",\"original_name\":\"Dan Clark\",\"popularity\":0.6,\"profile_path\":null}],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"57279e8f9251416dfb001bfe\",\"order\":6,\"adult\":false,\"gender\":1,\"id\":62961,\"known_for_department\":\"Acting\",\"name\":\"Sarah Hadland\",\"original_name\":\"Sarah Hadland\",\"popularity\":1.65,\"profile_path\":\"/aVEhNxCplkThxE2flILB3YOoVPp.jpg\"}],\"id\":390548,\"name\":\"Don's New Job\",\"overview\":\"Don has blown his chances with flatmate Sam and to make matters worse she has a new boyfriend. With no career, Don comes up with an elaborate story about a new job to try to impress her. Things finally appear to be going his way when a chance encounter with high-flying executive Marcus leads to a promotion. Of course being Don, it's not long before it all goes wrong.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":8,\"vote_count\":1},{\"air_date\":\"2010-11-08\",\"episode_number\":2,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52578e02760ee36aaa6a6d65\",\"adult\":false,\"gender\":0,\"id\":1234239,\"known_for_department\":\"Acting\",\"name\":\"Dan Clark\",\"original_name\":\"Dan Clark\",\"popularity\":0.6,\"profile_path\":null}],\"guest_stars\":[],\"id\":390549,\"name\":\"Don's Angry Girlfriend\",\"overview\":\"Things are looking up for Don as he has begun to date a sweet girl called Jenny. However, her behaviour starts to ring alarm bells as her moods swing from adorable to violent in an instant, turning Don into a battered and bruised mess. To make matters worse nobody believes him. The tension comes to a head during the local pub quiz. Don and Jenny join Sam and Brian's team. They are determined to beat arch rival Derek. Jenny hates losing. Is this a chance for Don to show everyone her violent side?\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2010-11-15\",\"episode_number\":3,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52578e02760ee36aaa6a6d65\",\"adult\":false,\"gender\":0,\"id\":1234239,\"known_for_department\":\"Acting\",\"name\":\"Dan Clark\",\"original_name\":\"Dan Clark\",\"popularity\":0.6,\"profile_path\":null}],\"guest_stars\":[],\"id\":390546,\"name\":\"Don's Posh Weekend\",\"overview\":\"Don and his boss Jason socialise together for the first time in the form of a double date with two posh girls they met at work. Don learns never to judge a book by its cover, as his date Felicity is far from prudish. Everything seems to be going well until Felicity invites them to her parents' country house for the weekend. It's a world away from Don's life and he struggles to fit in. He also has some over-protective parents to contend with.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":9,\"vote_count\":1},{\"air_date\":\"2010-11-22\",\"episode_number\":4,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52578e02760ee36aaa6a6d65\",\"adult\":false,\"gender\":0,\"id\":1234239,\"known_for_department\":\"Acting\",\"name\":\"Dan Clark\",\"original_name\":\"Dan Clark\",\"popularity\":0.6,\"profile_path\":null}],\"guest_stars\":[],\"id\":390547,\"name\":\"Don Meets His Maker\",\"overview\":\"Don finds himself having a bad start to the week when he notices that his hair is thinning, He ends up booking an appointment with a specialist to discuss having a hair transplant. Things get worse for Don when he notices that he isn't the centre of attention after he is completely ignored he storms out. After Eddie discovers Don's letter about the transplant he ends up assuming the worst. Eddie, Sam, Brian and Mrs Treacher attempt to support Don when they think that he doesn't have long left to live and Don ends up making the most of the situation.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2010-11-29\",\"episode_number\":5,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52578e02760ee36aaa6a6d65\",\"adult\":false,\"gender\":0,\"id\":1234239,\"known_for_department\":\"Acting\",\"name\":\"Dan Clark\",\"original_name\":\"Dan Clark\",\"popularity\":0.6,\"profile_path\":null}],\"guest_stars\":[],\"id\":390545,\"name\":\"Don Dates a Homeless\",\"overview\":\"Don ends up surprising himself after he takes pity on pretty homeless woman called Susan. Sam ends up suggesting that he ask her out. When Sam returns home with Brian, she discovers Susan sitting on the sofa in their living room whilst Don runs her a bath. The following day Don doesn't want Susan to leave but after he offends her on a day out he tries to make it up to her by getting to know her friends better.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":8,\"vote_count\":1},{\"air_date\":\"2010-12-06\",\"episode_number\":6,\"crew\":[{\"department\":\"Writing\",\"job\":\"Writer\",\"credit_id\":\"52578e02760ee36aaa6a6d65\",\"adult\":false,\"gender\":0,\"id\":1234239,\"known_for_department\":\"Acting\",\"name\":\"Dan Clark\",\"original_name\":\"Dan Clark\",\"popularity\":0.6,\"profile_path\":null}],\"guest_stars\":[],\"id\":390550,\"name\":\"Don Does Therapy\",\"overview\":\"Don learns that Brian is going to ask Sam to marry him and realises that he still has feelings for Sam. Eddie suggests that Don sees a therapist where he ends up taking the therapist into his confidence and confessing his feelings for Sam, as well as some slightly shocking habits. Sam decides to throw a fancy dress party to celebrate Brian's birthday. Don feels unnerved when he learns that his therapist has come along in fancy dress. Don tries to find him at the party to stop him from revealing any of his secrets.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":8,\"vote_count\":1},{\"air_date\":\"2010-12-13\",\"episode_number\":7,\"crew\":[],\"guest_stars\":[{\"character\":\"\",\"credit_id\":\"57279e3cc3a3685871003c8a\",\"order\":4,\"adult\":false,\"gender\":2,\"id\":1461144,\"known_for_department\":\"Acting\",\"name\":\"Greg McHugh\",\"original_name\":\"Greg McHugh\",\"popularity\":1.741,\"profile_path\":\"/rv1jJGjt6YV3QlqlzsJgdzwPmat.jpg\"}],\"id\":390544,\"name\":\"Don the Musical\",\"overview\":\"After seeing the attention Eddie gets in his theatre club's production of Rain Man, Don decides to join up. The club puts on a tremendous production of Top Gun: The Musical. Meanwhile, Brian is still waiting to get a response from Sam about his proposal and is so desperate he even asks Don for advice.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":8,\"vote_count\":1}],\"name\":\"Season 3\",\"overview\":\"\",\"poster_path\":\"/r8qkxHxxkiTqlTh3hw8qfowWlBe.jpg\",\"season_number\":3}},\"34440\":{\"adult\":false,\"backdrop_path\":\"/bTsOxyYcypnKl6eGCw5Czm2WGKx.jpg\",\"created_by\":[],\"episode_run_time\":[30],\"first_air_date\":\"2010-11-01\",\"genres\":[{\"id\":35,\"name\":\"Comedy\"}],\"homepage\":\"https://www.sky.com/watch/channel/sky-one/the-trip-to\",\"id\":34440,\"in_production\":true,\"languages\":[\"en\"],\"last_air_date\":\"2020-03-31\",\"last_episode_to_air\":{\"air_date\":\"2020-03-31\",\"episode_number\":6,\"id\":2183353,\"name\":\"The Mani to Ithaca\",\"overview\":\"Rob and Steve's island-hopping tour is cut short in King Nestor's home of Pilos as Steve receives some bad news. It makes for an emotional journey home.\",\"production_code\":\"\",\"season_number\":4,\"still_path\":\"/nDsucJiNZSvovFUAhRXqaVp7dxe.jpg\",\"vote_average\":0,\"vote_count\":0},\"name\":\"The Trip\",\"next_episode_to_air\":null,\"networks\":[{\"name\":\"Sky One\",\"id\":214,\"logo_path\":\"/dVBHOr0nYCx9GSNesTVb1TT52Xj.png\",\"origin_country\":\"GB\"},{\"name\":\"BBC Two\",\"id\":332,\"logo_path\":\"/6kl5tMuct7u3ej5myL4c9QQVSW1.png\",\"origin_country\":\"GB\"},{\"name\":\"Sky Atlantic\",\"id\":1063,\"logo_path\":\"/6es7UmBjk2HTSZKq3NbtAxYEGCx.png\",\"origin_country\":\"GB\"}],\"number_of_episodes\":24,\"number_of_seasons\":4,\"origin_country\":[\"GB\"],\"original_language\":\"en\",\"original_name\":\"The Trip\",\"overview\":\"Steve agrees to review six restaurants and takes Rob with him.\",\"popularity\":7.666,\"poster_path\":\"/tjyH4hjgYAKT5TDEAtgSj7uQ2X0.jpg\",\"production_companies\":[],\"production_countries\":[{\"iso_3166_1\":\"GB\",\"name\":\"United Kingdom\"}],\"seasons\":[{\"air_date\":null,\"episode_count\":21,\"id\":45217,\"name\":\"Specials\",\"overview\":\"\",\"poster_path\":null,\"season_number\":0},{\"air_date\":\"2010-11-01\",\"episode_count\":6,\"id\":45216,\"name\":\"The Trip\",\"overview\":\"Steve and Rob review restaurants in the north of England.\",\"poster_path\":\"/3fqfKF6mOQg3MRZgrGub3oi9Vql.jpg\",\"season_number\":1},{\"air_date\":\"2014-04-04\",\"episode_count\":6,\"id\":61694,\"name\":\"The Trip to Italy\",\"overview\":\"Steve and Rob review six restaurants on a road trip around Italy.\",\"poster_path\":\"/mVCjKfe2Jor8EoBQnGdVfhxQYyR.jpg\",\"season_number\":2},{\"air_date\":\"2017-04-06\",\"episode_count\":6,\"id\":87171,\"name\":\"The Trip to Spain\",\"overview\":\"Steve and Rob take a once-in-a-lifetime coast-to-coast trip down the length of Spain in search of culture, cuisine and the perfect Mick Jagger impersonation.\",\"poster_path\":\"/7VVKaeSHIHLf5yhOHZUEGPJuIaM.jpg\",\"season_number\":3},{\"air_date\":\"2020-03-03\",\"episode_count\":6,\"id\":143741,\"name\":\"The Trip to Greece\",\"overview\":\"Steve Coogan and Rob Brydon return as their fictional alter-egos in the fourth instalment of director Michael Winterbottom's perfectly seasoned comedy road trips.\",\"poster_path\":\"/104loUpdRaKBUCcADxW4EjQ8Rkb.jpg\",\"season_number\":4}],\"spoken_languages\":[{\"english_name\":\"English\",\"iso_639_1\":\"en\",\"name\":\"English\"}],\"status\":\"Returning Series\",\"tagline\":\"Eat, drink and try not to kill each other.\",\"type\":\"Scripted\",\"vote_average\":7.6,\"vote_count\":45,\"keywords\":{\"results\":[{\"name\":\"restaurant\",\"id\":1946},{\"name\":\"travel\",\"id\":9935},{\"name\":\"sitcom\",\"id\":193171}]},\"season/1\":{\"_id\":\"5258d89a760ee346617198cc\",\"air_date\":\"2010-11-01\",\"episodes\":[{\"air_date\":\"2010-11-01\",\"episode_number\":1,\"crew\":[{\"job\":\"Director\",\"department\":\"Directing\",\"credit_id\":\"5258d89a760ee346617198f3\",\"adult\":false,\"gender\":2,\"id\":172,\"known_for_department\":\"Directing\",\"name\":\"Michael Winterbottom\",\"original_name\":\"Michael Winterbottom\",\"popularity\":2.764,\"profile_path\":\"/r4cpuukDMG3xLS8tEaTV7X2IxnO.jpg\"}],\"guest_stars\":[],\"id\":786967,\"name\":\"The Inn at Whitewell\",\"overview\":\"Steve is commissioned to review half a dozen restaurants and plans a trip around the north of England with his food loving American girlfriend. But when his girlfriend decides to leave him and return to the States, Steve reluctantly calls Rob, the only person he can think of who will be available.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2010-11-08\",\"episode_number\":2,\"crew\":[{\"job\":\"Director\",\"department\":\"Directing\",\"credit_id\":\"5258d89a760ee346617198f3\",\"adult\":false,\"gender\":2,\"id\":172,\"known_for_department\":\"Directing\",\"name\":\"Michael Winterbottom\",\"original_name\":\"Michael Winterbottom\",\"popularity\":2.764,\"profile_path\":\"/r4cpuukDMG3xLS8tEaTV7X2IxnO.jpg\"}],\"guest_stars\":[{\"character\":\"Ben Stiller\",\"credit_id\":\"5829bd22c3a368623f013e3a\",\"order\":1,\"adult\":false,\"gender\":2,\"id\":7399,\"known_for_department\":\"Acting\",\"name\":\"Ben Stiller\",\"original_name\":\"Ben Stiller\",\"popularity\":13.897,\"profile_path\":\"/scgpxhI05JpdNXXfmpK6z0rPOWN.jpg\"}],\"id\":786966,\"name\":\"L'Enclume\",\"overview\":\"Steve and Rob enjoy a taster menu at L'Enclume in Cartmel.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2010-11-15\",\"episode_number\":3,\"crew\":[{\"job\":\"Director\",\"department\":\"Directing\",\"credit_id\":\"5258d89a760ee346617198f3\",\"adult\":false,\"gender\":2,\"id\":172,\"known_for_department\":\"Directing\",\"name\":\"Michael Winterbottom\",\"original_name\":\"Michael Winterbottom\",\"popularity\":2.764,\"profile_path\":\"/r4cpuukDMG3xLS8tEaTV7X2IxnO.jpg\"}],\"guest_stars\":[],\"id\":786965,\"name\":\"Holbeck Ghyll\",\"overview\":\"Steve and Rob stay at Coleridge's old home, Greta Hall, in Keswick. They visit Dove Cottage and lunch at Holbeck Ghyll.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2010-11-22\",\"episode_number\":4,\"crew\":[{\"job\":\"Director\",\"department\":\"Directing\",\"credit_id\":\"5258d89a760ee346617198f3\",\"adult\":false,\"gender\":2,\"id\":172,\"known_for_department\":\"Directing\",\"name\":\"Michael Winterbottom\",\"original_name\":\"Michael Winterbottom\",\"popularity\":2.764,\"profile_path\":\"/r4cpuukDMG3xLS8tEaTV7X2IxnO.jpg\"}],\"guest_stars\":[],\"id\":786964,\"name\":\"Hipping Hall\",\"overview\":\"Steve and Rob visit Hipping Hall near Kirkby Lonsdale as they continue their culinary tour of the north of England, reviewing restaurants for a Sunday newspaper.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2010-11-29\",\"episode_number\":5,\"crew\":[{\"job\":\"Director\",\"department\":\"Directing\",\"credit_id\":\"5258d89a760ee346617198f3\",\"adult\":false,\"gender\":2,\"id\":172,\"known_for_department\":\"Directing\",\"name\":\"Michael Winterbottom\",\"original_name\":\"Michael Winterbottom\",\"popularity\":2.764,\"profile_path\":\"/r4cpuukDMG3xLS8tEaTV7X2IxnO.jpg\"}],\"guest_stars\":[],\"id\":786969,\"name\":\"The Yorke Arms\",\"overview\":\"Steve and Rob visit the world-famous Malham limestone pavement and eat at the Yorke Arms, as they continue their culinary tour of the north of England, reviewing restaurants for a Sunday newspaper.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":null,\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2010-12-06\",\"episode_number\":6,\"crew\":[{\"job\":\"Director\",\"department\":\"Directing\",\"credit_id\":\"5258d89a760ee346617198f3\",\"adult\":false,\"gender\":2,\"id\":172,\"known_for_department\":\"Directing\",\"name\":\"Michael Winterbottom\",\"original_name\":\"Michael Winterbottom\",\"popularity\":2.764,\"profile_path\":\"/r4cpuukDMG3xLS8tEaTV7X2IxnO.jpg\"}],\"guest_stars\":[],\"id\":786968,\"name\":\"The Angel at Hetton\",\"overview\":\"Steve and Rob visit Bolton Abbey and breakfast at The Angel at Hetton. On their way back home to London they stop off at Steve's parents' house.\",\"production_code\":\"\",\"season_number\":1,\"still_path\":\"/lH2apoJgiJ8Cqat7YiDNufKioY1.jpg\",\"vote_average\":7,\"vote_count\":1}],\"name\":\"The Trip\",\"overview\":\"Steve and Rob review restaurants in the north of England.\",\"poster_path\":\"/3fqfKF6mOQg3MRZgrGub3oi9Vql.jpg\",\"season_number\":1},\"season/2\":{\"_id\":\"53bd3a48c3a3684ce90013ae\",\"air_date\":\"2014-04-04\",\"episodes\":[{\"air_date\":\"2014-04-04\",\"episode_number\":1,\"crew\":[],\"guest_stars\":[],\"id\":994644,\"name\":\"Il Cenobio dei Dogi, Camogli\",\"overview\":\"Rob Brydon and Steve Coogan are asked by The Observer to do another series of restaurant reviews. The pair have six meals in six different places on a road trip around Italy.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":\"/fRWWdTwUOI1PSMSJhv8XvLQOhBP.jpg\",\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2014-04-11\",\"episode_number\":2,\"crew\":[],\"guest_stars\":[],\"id\":994645,\"name\":\"Da Giovanni, San Fruttuoso\",\"overview\":\"Rob and Steve go on a boat trip, taking in a local restaurant and Percy Shelley's house for a picture before continuing their journey and arriving at another restaurant.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":\"/lxkpnlrRiX6ugfzk8CVTMGtX4fT.jpg\",\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2014-04-18\",\"episode_number\":3,\"crew\":[],\"guest_stars\":[],\"id\":994646,\"name\":\"La Suvera, Pievescola\",\"overview\":\"Steve and Rob visit Viareggio in Tuscany, where Shelley's body was washed ashore, then have lunch at Trattoria Albana.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":\"/c3TZ39oXPEDxestdMjlshLE85t9.jpg\",\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2014-04-25\",\"episode_number\":4,\"crew\":[],\"guest_stars\":[],\"id\":994647,\"name\":\"The Hotel Locarno, Rome\",\"overview\":\"Rob Brydon and Steve Coogan's journey continues. They meet Emma and photographer Yolanda before they arrive in Rome and visit the Keats museum.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":\"/u9Af49s28rTjN0Wv3ZjvDEO8Hdf.jpg\",\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2014-05-02\",\"episode_number\":5,\"crew\":[],\"guest_stars\":[],\"id\":994648,\"name\":\"Villa Cimbrone, Ravello\",\"overview\":\"Rob Brydon and Steve Coogan journey around Italy to review six restaurants. The pair arrive in Ravello and Rob discovers he has a movie role.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":\"/75OLELGWcBCXKxmGYnJUhClvCvZ.jpg\",\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2014-05-09\",\"episode_number\":6,\"crew\":[],\"guest_stars\":[],\"id\":994649,\"name\":\"Il Riccio, Capri\",\"overview\":\"The trip takes a detour to Capri so that Steve's son can join them.\",\"production_code\":\"\",\"season_number\":2,\"still_path\":\"/2GBIfjvwtkHiUedOrY8atjXTm0i.jpg\",\"vote_average\":7,\"vote_count\":1}],\"name\":\"The Trip to Italy\",\"overview\":\"Steve and Rob review six restaurants on a road trip around Italy.\",\"poster_path\":\"/mVCjKfe2Jor8EoBQnGdVfhxQYyR.jpg\",\"season_number\":2},\"season/3\":{\"_id\":\"58e669af9251412810041987\",\"air_date\":\"2017-04-06\",\"episodes\":[{\"air_date\":\"2017-04-06\",\"episode_number\":1,\"crew\":[],\"guest_stars\":[{\"character\":\"Chloe\",\"credit_id\":\"59828e42c3a3683279001906\",\"order\":2,\"adult\":false,\"gender\":0,\"id\":1862774,\"known_for_department\":\"Acting\",\"name\":\"Tessa Walker\",\"original_name\":\"Tessa Walker\",\"popularity\":0.6,\"profile_path\":null},{\"character\":\"Charlie\",\"credit_id\":\"59828e4f9251413f3f001a6b\",\"order\":3,\"adult\":false,\"gender\":0,\"id\":1862775,\"known_for_department\":\"Acting\",\"name\":\"Charlie Jeffreys\",\"original_name\":\"Charlie Jeffreys\",\"popularity\":0.6,\"profile_path\":null},{\"character\":\"Aurore\",\"credit_id\":\"59828e6492514141b3001929\",\"order\":4,\"adult\":false,\"gender\":0,\"id\":1862776,\"known_for_department\":\"Acting\",\"name\":\"Aurore Delion\",\"original_name\":\"Aurore Delion\",\"popularity\":0.6,\"profile_path\":null},{\"character\":\"Altamira Guide\",\"credit_id\":\"59828e7992514141b300193f\",\"order\":5,\"adult\":false,\"gender\":0,\"id\":1862777,\"known_for_department\":\"Acting\",\"name\":\"Victor M. Magaldi\",\"original_name\":\"Victor M. Magaldi\",\"popularity\":0.6,\"profile_path\":null},{\"character\":\"Txoko Waiter\",\"credit_id\":\"59828e89c3a3682f78001a9a\",\"order\":6,\"adult\":false,\"gender\":0,\"id\":1862778,\"known_for_department\":\"Acting\",\"name\":\"Ida Camara\",\"original_name\":\"Ida Camara\",\"popularity\":0.6,\"profile_path\":null},{\"character\":\"Waitress in Bar\",\"credit_id\":\"59828e9b9251413d0e001c8f\",\"order\":7,\"adult\":false,\"gender\":0,\"id\":1862779,\"known_for_department\":\"Acting\",\"name\":\"Itxaso Roteta\",\"original_name\":\"Itxaso Roteta\",\"popularity\":0.6,\"profile_path\":null}],\"id\":1300311,\"name\":\"Txoko\",\"overview\":\"The pair disembark from the ferry at Santander and take in the Cave of Altamira before visiting the picturesque port of Getaria - home to the acclaimed restaurant Txoko, and also the occasional rainstorm.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2017-04-13\",\"episode_number\":2,\"crew\":[{\"job\":\"Director of Photography\",\"department\":\"Camera\",\"credit_id\":\"59828eeec3a3682f78001b0a\",\"adult\":false,\"gender\":2,\"id\":1798643,\"known_for_department\":\"Camera\",\"name\":\"James Clarke\",\"original_name\":\"James Clarke\",\"popularity\":0.6,\"profile_path\":null}],\"guest_stars\":[],\"id\":1343976,\"name\":\"Etxebarri\",\"overview\":\"Steve and Rob begin the second leg of their culinary odyssey as they head through the Basque Country to Etxebarri - a Michelin-starred restaurant close to Bilbao. After experiencing a delectable eight-course tasting menu (during which Rob confirms to Steve that the Welsh word for carrot is 'moron'), the pair head towards Sos del Rey Católico - taking an opportunity to belt out ABBA's SOS along the way.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":8,\"vote_count\":1},{\"air_date\":\"2017-04-20\",\"episode_number\":3,\"crew\":[],\"guest_stars\":[],\"id\":1343980,\"name\":\"La Posada del Laurel\",\"overview\":\"While taking in some local cuisine, the pair have time to reminisce over those who sadly left us in 2016, and then compete over who can do the better impersonation of them. Later they visit one of the many attractions down the 'Dinosaur Road', allowing Rob to pose for a picture in front of a fibreglass iguanodon. \\\"Which one is the dinosaur?\\\" quips Steve.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2017-04-27\",\"episode_number\":4,\"crew\":[],\"guest_stars\":[],\"id\":1343981,\"name\":\"Nöla\",\"overview\":\"After checking out the Cathedral of Sigüenza, Steve and Rob head to Cuenca where Steve is irked by a travelling musician.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2017-05-04\",\"episode_number\":5,\"crew\":[],\"guest_stars\":[],\"id\":1343982,\"name\":\"Parador de Almagro\",\"overview\":\"In La Mancha, Steve and Rob dress the part as Don Quixote and Sancho Panza, before treading the boards at the Corral de Comedias.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":7,\"vote_count\":1},{\"air_date\":\"2017-05-11\",\"episode_number\":6,\"crew\":[],\"guest_stars\":[],\"id\":1343983,\"name\":\"El Refectorium\",\"overview\":\"In the last leg of their tour, the duo depart Granada and reach Malaga, where Steve receives some more unfortunate news.\",\"production_code\":\"\",\"season_number\":3,\"still_path\":null,\"vote_average\":0,\"vote_count\":0}],\"name\":\"The Trip to Spain\",\"overview\":\"Steve and Rob take a once-in-a-lifetime coast-to-coast trip down the length of Spain in search of culture, cuisine and the perfect Mick Jagger impersonation.\",\"poster_path\":\"/7VVKaeSHIHLf5yhOHZUEGPJuIaM.jpg\",\"season_number\":3},\"season/4\":{\"_id\":\"5e4f189e283ed900155f4823\",\"air_date\":\"2020-03-03\",\"episodes\":[{\"air_date\":\"2020-03-03\",\"episode_number\":1,\"crew\":[],\"guest_stars\":[],\"id\":2170363,\"name\":\"Troy to Kavala\",\"overview\":\"Steve Coogan and Rob Brydon return as their fictional alter-egos as they embark on a gastronomic, island hopping trip around Greece.\",\"production_code\":\"\",\"season_number\":4,\"still_path\":\"/8L3EiUCeSDXliyAcqVMeZIEa6rZ.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2020-03-03\",\"episode_number\":2,\"crew\":[],\"guest_stars\":[],\"id\":2183342,\"name\":\"Kavala to Pelion\",\"overview\":\"Steve Coogan and Rob Brydon's gastro tour takes them to the beach home of Mamma Mia!, where their lunchtime chat is about Alexander the Great and Ray Winstone.\",\"production_code\":\"\",\"season_number\":4,\"still_path\":\"/aH7B7zd3UBLet1plWQbWEchs1oC.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2020-03-10\",\"episode_number\":3,\"crew\":[],\"guest_stars\":[],\"id\":2183344,\"name\":\"Pelion to Athens\",\"overview\":\"Rob and Steve enjoy a rainy day at Delphi, some Michelin-starred seafood and a battle to see who can do the greatest impressions.\",\"production_code\":\"\",\"season_number\":4,\"still_path\":\"/lyZgkjdRhFPpv2cZGsp1RrXNcbp.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2020-03-17\",\"episode_number\":4,\"crew\":[],\"guest_stars\":[],\"id\":2183345,\"name\":\"Athens to Hydra\",\"overview\":\"Rob and Steve strike a pose at the Epidaurus Amphitheatre. Then, it's on to Hydra for a long lunch, before Steve finds romance on the waterfront.\",\"production_code\":\"\",\"season_number\":4,\"still_path\":\"/tzt5xm5MN8Oggy9rDKXZJswWmzs.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2020-03-24\",\"episode_number\":5,\"crew\":[],\"guest_stars\":[],\"id\":2183350,\"name\":\"Hydra to the Mani\",\"overview\":\"Rob and Steve set sail for Limini, where they reflect on their middle age. Then it's off to the caves of Dios for some a cappella.\",\"production_code\":\"\",\"season_number\":4,\"still_path\":\"/y6pwfJ1UkmSnwUUXu4TUsYrLp0k.jpg\",\"vote_average\":0,\"vote_count\":0},{\"air_date\":\"2020-03-31\",\"episode_number\":6,\"crew\":[],\"guest_stars\":[],\"id\":2183353,\"name\":\"The Mani to Ithaca\",\"overview\":\"Rob and Steve's island-hopping tour is cut short in King Nestor's home of Pilos as Steve receives some bad news. It makes for an emotional journey home.\",\"production_code\":\"\",\"season_number\":4,\"still_path\":\"/nDsucJiNZSvovFUAhRXqaVp7dxe.jpg\",\"vote_average\":0,\"vote_count\":0}],\"name\":\"The Trip to Greece\",\"overview\":\"Steve Coogan and Rob Brydon return as their fictional alter-egos in the fourth instalment of director Michael Winterbottom's perfectly seasoned comedy road trips.\",\"poster_path\":\"/104loUpdRaKBUCcADxW4EjQ8Rkb.jpg\",\"season_number\":4}}}");

},{}]},["8uF9k","4YIBm"], "4YIBm", "parcelRequire65d0")

//# sourceMappingURL=show.32d8f19e.js.map
