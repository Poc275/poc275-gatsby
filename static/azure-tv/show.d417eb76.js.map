{"mappings":"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","sources":["show.js"],"sourcesContent":["import * as msal from \"@azure/msal-browser\";\r\nimport { BlobServiceClient } from \"@azure/storage-blob\";\r\nimport { TableClient } from \"@azure/data-tables\";\r\n\r\nconst msalConfig = {\r\n    auth: {\r\n        clientId: '53bfecae-5150-4a44-8b5b-957ac4839fa4',\r\n        authority: 'https://login.microsoftonline.com/4583a017-e1c7-4872-bb63-71c8f247fb02'\r\n    }\r\n};\r\n\r\nconst msalInstance = new msal.PublicClientApplication(msalConfig);\r\nconst myAccounts = msalInstance.getAllAccounts();\r\nconst silentRequest = {\r\n    scopes: [\"https://storage.azure.com/user_impersonation\"],\r\n    account: myAccounts[0],\r\n    forceRefresh: false\r\n};\r\nconst request = {\r\n    scopes: [\"https://storage.azure.com/user_impersonation\"],\r\n    loginHint: myAccounts[0].username\r\n};\r\n\r\nconst getTokenCredential = (token) => {\r\n    return {\r\n        getToken() {\r\n            return {\r\n                token: token.accessToken,\r\n                expiresOnTimestamp: (new Date(token.expiresOn).getTime()),\r\n            };\r\n        }\r\n    };\r\n};\r\n\r\n// try and get access token silently\r\nmsalInstance.acquireTokenSilent(silentRequest).then(async tokenResponse => {\r\n    // console.log(tokenResponse);\r\n    const tableClient = new TableClient(\"https://azuretv.table.core.windows.net\", \"azuretv\", getTokenCredential(tokenResponse));\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    if(urlParams.has(\"id\")) {\r\n        const showId = urlParams.get(\"id\");\r\n        const showInfo = await tableClient.getEntity(\"shows\", showId);\r\n        document.getElementById(\"backdrop\").style.backgroundImage = showInfo.backdrop_path ? \r\n            `url(https://image.tmdb.org/t/p/w780/${showInfo.backdrop_path})` : \r\n            `url(https://image.tmdb.org/t/p/w780/${showInfo.poster_path})`;\r\n        document.getElementById(\"title\").textContent = showInfo.name;\r\n        document.getElementById(\"tagline\").textContent = showInfo.tagline;\r\n        document.getElementById(\"overview\").textContent = showInfo.overview.split(\".\")[0];\r\n        document.getElementById(\"total-episodes\").textContent = `${showInfo.number_of_episodes} episodes`;\r\n        getEpisodes(tokenResponse, showId, tableClient);\r\n\r\n    } else {\r\n        console.error(\"Show not found\");\r\n    }\r\n\r\n}).catch(err => {\r\n    console.error(err);\r\n    if(err instanceof msal.InteractionRequiredAuthError) {\r\n        return msalInstance.acquireTokenRedirect(request);\r\n    }\r\n});\r\n\r\nconst getEpisodes = async (token, showId, tableClient) => {\r\n    const blobServiceClient = new BlobServiceClient(\"https://azuretv.blob.core.windows.net/\", getTokenCredential(token));\r\n    const containerClient = blobServiceClient.getContainerClient(\"media\");\r\n    const episodes = [];\r\n\r\n    for await (const item of containerClient.listBlobsByHierarchy(\"/\", { prefix: `TV/${showId}/` })) {\r\n        // console.log(item);\r\n        const blobClient = containerClient.getBlockBlobClient(item.name);\r\n        const meta = (await blobClient.getProperties()).metadata;\r\n        try {\r\n            const episodeInfo = await tableClient.getEntity(\"episodes\", `${showId}_${meta.season}_${meta.episode}`);\r\n            episodes.push({\r\n                season_number: episodeInfo.season_number,\r\n                episode_number: episodeInfo.episode_number,\r\n                name: episodeInfo.name,\r\n                overview: episodeInfo.overview,\r\n                still_path: episodeInfo.still_path,\r\n                air_date: episodeInfo.air_date,\r\n                blob: item\r\n            });\r\n        } catch(error) {\r\n            console.error(`Could not find information for season ${meta.season}, episode ${meta.episode}: ${error}`);\r\n        }\r\n    }\r\n\r\n    episodes.sort((a, b) => {\r\n        if(a.season_number < b.season_number) {\r\n            return -1;\r\n        } else if(a.season_number === b.season_number) {\r\n            return a.episode_number - b.episode_number;\r\n        } else {\r\n            return 1;\r\n        }\r\n    });\r\n\r\n    // add series links\r\n    // const series = [];\r\n    // episodes.forEach(ep => {\r\n    //     if(series.indexOf(ep.season) === -1) {\r\n    //         series.push(ep.season);\r\n    //     }\r\n    // });\r\n    // addSeriesLinks(series);\r\n\r\n    addEpisodes(episodes);\r\n};\r\n\r\n// const addSeriesLinks = (series) => {\r\n//     series.sort().map(seriesNum => {\r\n//         const seriesList = document.getElementById(\"series\");\r\n//         const seriesItem = document.createElement(\"li\");\r\n//         const seriesLink = document.createElement(\"a\");\r\n//         seriesLink.href = \"#\";\r\n//         seriesLink.appendChild(seriesItem);\r\n//         seriesLink.textContent = `Series ${seriesNum}`;\r\n//         seriesItem.appendChild(seriesLink);\r\n//         seriesList.appendChild(seriesItem);\r\n//     });\r\n// };\r\n\r\nconst addEpisodes = (episodes) => {\r\n    episodes.forEach(episode => {\r\n        const episodeContainer = document.createElement(\"div\");\r\n        const episodeStill = document.createElement(\"div\");\r\n        episodeContainer.className = \"episode\";\r\n        episodeStill.className = \"episode-still\";\r\n        episodeStill.style.backgroundImage = `url(https://image.tmdb.org/t/p/w185/${episode.still_path})`;\r\n\r\n        const playButton = document.createElement(\"button\");\r\n        playButton.className = \"play-btn\";\r\n        playButton.textContent = \"â–¶\";\r\n        playButton.addEventListener(\"click\", () => {\r\n            play(episode.blob, episode);\r\n        }, false);\r\n        episodeStill.appendChild(playButton);\r\n\r\n        const episodeTitle = document.createElement(\"p\");\r\n        episodeTitle.className = \"episode-title\";\r\n        const titleText = episode.season_number === 0 ? \r\n            `Extras: ${episode.name}` :\r\n            `Series ${episode.season_number}: ${episode.episode_number}. ${episode.name}`;\r\n        episodeTitle.textContent = titleText;\r\n\r\n        const episodeBio = document.createElement(\"p\");\r\n        episodeBio.textContent = episode.overview.split(\".\")[0];\r\n        \r\n        episodeContainer.appendChild(episodeStill);\r\n        episodeContainer.appendChild(episodeTitle);\r\n        episodeContainer.appendChild(episodeBio);\r\n        document.getElementById(\"episodes\").appendChild(episodeContainer);\r\n    });\r\n};\r\n\r\nconst play = (blob, info) => {\r\n    // console.log(blob, info);\r\n    const castSession = cast.framework.CastContext.getInstance().getCurrentSession();\r\n    const metadata = new chrome.cast.media.TvShowMediaMetadata();\r\n    metadata.episode = info.episode_number;\r\n    metadata.images = [info.still_path];\r\n    metadata.originalAirdate = info.air_date;\r\n    metadata.season = info.season_number;\r\n    metadata.title = info.name;\r\n    const mediaInfo = new chrome.cast.media.MediaInfo(\r\n        `https://azuretv.blob.core.windows.net/media/${blob.name}`,\r\n        blob.properties.contentType);\r\n    mediaInfo.metadata = metadata;\r\n    const request = new chrome.cast.media.LoadRequest(mediaInfo);\r\n    castSession.loadMedia(request)\r\n        .then(() => { \r\n            console.log('Load succeeded');\r\n        }).catch((err) => {\r\n            console.error('Error code', err);\r\n        });\r\n};"],"names":["$1c5b4086436acdca$var$msalInstance","$8zQx8","PublicClientApplication","auth","clientId","authority","$1c5b4086436acdca$var$myAccounts","getAllAccounts","$1c5b4086436acdca$var$silentRequest","scopes","account","forceRefresh","$1c5b4086436acdca$var$request","loginHint","username","$1c5b4086436acdca$var$getTokenCredential","token","getToken","accessToken","expiresOnTimestamp","Date","expiresOn","getTime","acquireTokenSilent","then","async","tokenResponse","tableClient","$hOCft","TableClient","urlParams","URLSearchParams","window","location","search","has","showId","get","showInfo","getEntity","document","getElementById","style","backgroundImage","backdrop_path","poster_path","textContent","name","tagline","overview","split","number_of_episodes","$1c5b4086436acdca$var$getEpisodes","console","error","catch","err","InteractionRequiredAuthError","acquireTokenRedirect","containerClient","$2wqqk","BlobServiceClient","getContainerClient","episodes","item","listBlobsByHierarchy","prefix","blobClient","getBlockBlobClient","meta","getProperties","metadata","episodeInfo","season","episode","push","season_number","episode_number","still_path","air_date","blob","sort","a","b","$1c5b4086436acdca$var$addEpisodes","forEach","episodeContainer","createElement","episodeStill","className","playButton","addEventListener","$1c5b4086436acdca$var$play","appendChild","episodeTitle","titleText","episodeBio","info","castSession","cast","framework","CastContext","getInstance","getCurrentSession","chrome","media","TvShowMediaMetadata","images","originalAirdate","title","mediaInfo","MediaInfo","properties","contentType","request","LoadRequest","loadMedia","log"],"version":3,"file":"show.d417eb76.js.map"}