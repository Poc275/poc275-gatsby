{"mappings":"+gBAIA,MAOMA,EAAe,IAAIC,EAAAC,wBAPN,CACfC,KAAM,CACFC,SAAU,uCACVC,UAAW,4EAOnBL,EAAaM,wBAAwBC,MAAIC,MAAQC,IAI7C,GAAGA,EAAe,CAKd,MAAMC,EAAkB,CACpBC,SAAQ,KACG,CACHC,MAAOH,EAAcI,YACrBC,mBAAqB,IAAIC,KAAKN,EAAcO,WAAWC,aAkB7DC,EAboB,IAAIC,EAAAC,kBAAkB,yCAA0CV,GAahDW,mBAAmB,SAGvDC,EAAc,IAAIC,EAAAC,YAAY,yCAA0C,UAAWd,GAGzF,UAAW,MAAMe,KAAQP,EAAgBQ,qBAAqB,IAAK,CAAEC,OAAQ,QAEzE,GAAiB,WAAdF,EAAKG,KAAmB,CAEvB,MAAMC,EAASJ,EAAKK,KAAKC,MAAM,KAAK,GAC9BC,QAAiBV,EAAYW,UAAU,QAASJ,GAEhDK,EAAMC,SAASC,cAAc,OACnCF,EAAIG,IAAG,kCAAqCL,EAASM,cACrDJ,EAAIK,IAAG,GAAMP,EAASF,cAEtB,MAAMU,EAAQL,SAASC,cAAc,KACrCI,EAAMC,UAAY,eAClBD,EAAME,YAAcV,EAASF,KAE7B,MAAMa,EAAOR,SAASC,cAAc,KACpCO,EAAKC,KAAI,gBAAmBZ,EAASa,SACrCF,EAAKG,YAAYZ,GACjBS,EAAKG,YAAYN,GAEjB,MAAMO,EAAMZ,SAASC,cAAc,OACnCW,EAAIN,UAAY,SAChBM,EAAID,YAAYH,GAEGR,SAASa,eAAe,WAChCF,YAAYC,SAI/B,IACI,MAAME,EAAe,CACjBC,OAAQ,CAAC,iDAEblD,EAAamD,cAAcF,GAC7B,MAAOG,GAELC,QAAQC,MAAMF,OAGvBG,OAAOD,IAEND,QAAQC,MAAMA","sources":["index.js"],"sourcesContent":["import * as msal from \"@azure/msal-browser\";\r\nimport { BlobServiceClient } from \"@azure/storage-blob\";\r\nimport { TableClient } from \"@azure/data-tables\";\r\n\r\nconst msalConfig = {\r\n    auth: {\r\n        clientId: '53bfecae-5150-4a44-8b5b-957ac4839fa4',\r\n        authority: 'https://login.microsoftonline.com/4583a017-e1c7-4872-bb63-71c8f247fb02'\r\n    }\r\n};\r\n\r\nconst msalInstance = new msal.PublicClientApplication(msalConfig);\r\n\r\n// need to handle the redirect promise when using the redirect login instead of popup\r\nmsalInstance.handleRedirectPromise().then(async (tokenResponse) => {\r\n    // Check if the tokenResponse is null\r\n    // If the tokenResponse !== null, then you are coming back from a successful authentication redirect. \r\n    // If the tokenResponse === null, you are not coming back from an auth redirect.\r\n    if(tokenResponse) {\r\n        // console.log(tokenResponse);\r\n        // const myAccounts = msalInstance.getAllAccounts();\r\n        // console.log(myAccounts);\r\n\r\n        const tokenCredential = {\r\n            getToken() {\r\n                return {\r\n                    token: tokenResponse.accessToken,\r\n                    expiresOnTimestamp: (new Date(tokenResponse.expiresOn).getTime()),\r\n                };\r\n            }\r\n        };\r\n\r\n        const blobServiceClient = new BlobServiceClient(\"https://azuretv.blob.core.windows.net/\", tokenCredential);\r\n\r\n        // Have to set a default version of the REST API later than 2011-08-18 to be able to stream (HTTP 206 Accept bytes)\r\n        // blobServiceClient.setProperties({\r\n        //     defaultServiceVersion: \"2021-04-10\"\r\n        // }).then(res => console.log(\"Set Properties response\", res))\r\n        // .catch(err => console.error(\"Set Properties error\", err));\r\n\r\n        // Check API default version\r\n        // blobServiceClient.getProperties()\r\n        //     .then(res => console.log(\"Get Properties response\", res))\r\n        //     .catch(err => console.error(\"Get Properties error\", err));\r\n\r\n        const containerClient = blobServiceClient.getContainerClient(\"media\");\r\n\r\n        // initialise table storage client\r\n        const tableClient = new TableClient(\"https://azuretv.table.core.windows.net\", \"azuretv\", tokenCredential);\r\n\r\n        // get just TV shows\r\n        for await (const item of containerClient.listBlobsByHierarchy(\"/\", { prefix: \"TV/\" })) {\r\n            // console.log(item);\r\n            if(item.kind === \"prefix\") {\r\n                // console.log(`\\tBlobPrefix: ${item.name}`);\r\n                const tmdbId = item.name.split(\"/\")[1];\r\n                const showData = await tableClient.getEntity(\"shows\", tmdbId);\r\n\r\n                const img = document.createElement(\"img\");\r\n                img.src = `https://image.tmdb.org/t/p/w92/${showData.poster_path}`;\r\n                img.alt = `${showData.name} poster`;\r\n\r\n                const title = document.createElement(\"p\");\r\n                title.className = \"poster-title\";\r\n                title.textContent = showData.name;\r\n\r\n                const link = document.createElement(\"a\");\r\n                link.href = `show.html?id=${showData.rowKey}`;\r\n                link.appendChild(img);\r\n                link.appendChild(title);\r\n\r\n                const div = document.createElement(\"div\");\r\n                div.className = \"poster\";\r\n                div.appendChild(link);\r\n                \r\n                const libraryDiv = document.getElementById(\"library\");\r\n                libraryDiv.appendChild(div);\r\n            }\r\n        }\r\n    } else {\r\n        try {\r\n            const loginRequest = {\r\n                scopes: [\"https://storage.azure.com/user_impersonation\"]\r\n            };\r\n            msalInstance.loginRedirect(loginRequest);\r\n        } catch (err) {\r\n            // handle error\r\n            console.error(err);\r\n        }\r\n    }\r\n}).catch((error) => {\r\n    // handle error, either in the library or coming back from the server\r\n    console.error(error);\r\n});\r\n"],"names":["$dad545c909cfec2d$var$msalInstance","$8zQx8","PublicClientApplication","auth","clientId","authority","handleRedirectPromise","then","async","tokenResponse","tokenCredential","getToken","token","accessToken","expiresOnTimestamp","Date","expiresOn","getTime","containerClient","$2wqqk","BlobServiceClient","getContainerClient","tableClient","$hOCft","TableClient","item","listBlobsByHierarchy","prefix","kind","tmdbId","name","split","showData","getEntity","img","document","createElement","src","poster_path","alt","title","className","textContent","link","href","rowKey","appendChild","div","getElementById","loginRequest","scopes","loginRedirect","err","console","error","catch"],"version":3,"file":"index.3b69a3c0.js.map"}