{"mappings":"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","sources":["show.js"],"sourcesContent":["import * as msal from \"@azure/msal-browser\";\r\nimport { BlobServiceClient } from \"@azure/storage-blob\";\r\nimport db from './db.json';\r\n\r\nconst msalConfig = {\r\n    auth: {\r\n        clientId: '53bfecae-5150-4a44-8b5b-957ac4839fa4',\r\n        authority: 'https://login.microsoftonline.com/4583a017-e1c7-4872-bb63-71c8f247fb02'\r\n    }\r\n};\r\n\r\nconst msalInstance = new msal.PublicClientApplication(msalConfig);\r\nconst myAccounts = msalInstance.getAllAccounts();\r\nconst silentRequest = {\r\n    scopes: [\"https://storage.azure.com/user_impersonation\"],\r\n    account: myAccounts[0],\r\n    forceRefresh: false\r\n};\r\nconst request = {\r\n    scopes: [\"https://storage.azure.com/user_impersonation\"],\r\n    loginHint: myAccounts[0].username\r\n};\r\n\r\n// try and get access token silently\r\nmsalInstance.acquireTokenSilent(silentRequest).then(tokenResponse => {\r\n    // console.log(tokenResponse);\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    if(urlParams.has(\"id\")) {\r\n        const showId = urlParams.get(\"id\");\r\n        const showInfo = db[showId];\r\n        document.getElementById(\"backdrop\").style.backgroundImage = showInfo.backdrop_path ? \r\n            `url(https://image.tmdb.org/t/p/w780/${showInfo.backdrop_path})` : \r\n            `url(https://image.tmdb.org/t/p/w780/${showInfo.poster_path})`;\r\n        document.getElementById(\"title\").textContent = showInfo.name;\r\n        document.getElementById(\"tagline\").textContent = showInfo.tagline;\r\n        document.getElementById(\"overview\").textContent = showInfo.overview.split(\".\")[0];\r\n        document.getElementById(\"total-episodes\").textContent = `${showInfo.number_of_episodes} episodes`;\r\n        getEpisodes(tokenResponse.accessToken, showId);\r\n\r\n    } else {\r\n        console.error(\"Show not found\");\r\n    }\r\n\r\n}).catch(err => {\r\n    console.error(err);\r\n    if(err instanceof msal.InteractionRequiredAuthError) {\r\n        return msalInstance.acquireTokenRedirect(request);\r\n    }\r\n});\r\n\r\nconst getEpisodes = async (accessToken, showId) => {\r\n    const tokenCredential = {\r\n        getToken() {\r\n            return {\r\n                token: accessToken,\r\n                expiresOnTimestamp: Date.now() + 60 * 60 * 1000,\r\n            };\r\n        }\r\n    };\r\n\r\n    const blobServiceClient = new BlobServiceClient(\"https://azuretv.blob.core.windows.net/\", tokenCredential);\r\n    const containerClient = blobServiceClient.getContainerClient(\"media\");\r\n    const episodes = [];\r\n\r\n    for await (const item of containerClient.listBlobsByHierarchy(\"/\", { prefix: `TV/${showId}/` })) {\r\n        // console.log(item);\r\n        const blobClient = containerClient.getBlockBlobClient(item.name);\r\n        const meta = (await blobClient.getProperties()).metadata;\r\n        episodes.push({\r\n            season: parseInt(meta.season),\r\n            episode: parseInt(meta.episode),\r\n            blob: item\r\n        });\r\n    }\r\n\r\n    episodes.sort((a, b) => {\r\n        if(a.season < b.season) {\r\n            return -1;\r\n        } else if(a.season === b.season) {\r\n            return a.episode - b.episode;\r\n        } else {\r\n            return 1;\r\n        }\r\n    });\r\n\r\n    // add series links\r\n    const series = [];\r\n    episodes.forEach(ep => {\r\n        if(series.indexOf(ep.season) === -1) {\r\n            series.push(ep.season);\r\n        }\r\n    });\r\n    \r\n    // addSeriesLinks(series);\r\n    addEpisodes(episodes, showId);\r\n};\r\n\r\nconst addSeriesLinks = (series) => {\r\n    series.sort().map(seriesNum => {\r\n        const seriesList = document.getElementById(\"series\");\r\n        const seriesItem = document.createElement(\"li\");\r\n        const seriesLink = document.createElement(\"a\");\r\n        seriesLink.href = \"#\";\r\n        seriesLink.appendChild(seriesItem);\r\n        seriesLink.textContent = `Series ${seriesNum}`;\r\n        seriesItem.appendChild(seriesLink);\r\n        seriesList.appendChild(seriesItem);\r\n    });\r\n};\r\n\r\nconst addEpisodes = (episodes, showId) => {\r\n    const showInfo = db[showId];\r\n    episodes.forEach(episode => {\r\n        const seasonInfo = showInfo[`season/${episode.season}`];\r\n        const episodeInfo = seasonInfo.episodes[episode.episode - 1];\r\n        // console.log(seasonInfo);\r\n        // console.log(episodeInfo);\r\n\r\n        const episodeContainer = document.createElement(\"div\");\r\n        const episodeStill = document.createElement(\"div\");\r\n        episodeContainer.className = \"episode\";\r\n        episodeStill.className = \"episode-still\";\r\n        let stillPath = \"\";\r\n        if(episodeInfo.still_path) {\r\n            stillPath = `https://image.tmdb.org/t/p/w185/${episodeInfo.still_path}`;\r\n        } else if(seasonInfo.poster_path) {\r\n            stillPath = `https://image.tmdb.org/t/p/w185/${seasonInfo.poster_path}`;\r\n        } else {\r\n            stillPath = `https://image.tmdb.org/t/p/w185/${showInfo.poster_path}`;\r\n        }\r\n        episodeStill.style.backgroundImage = `url(${stillPath})`;\r\n\r\n        const playButton = document.createElement(\"button\");\r\n        playButton.className = \"play-btn\";\r\n        playButton.textContent = \"â–¶\";\r\n        playButton.addEventListener(\"click\", () => {\r\n            play(episode.blob, episodeInfo, stillPath);\r\n        }, false);\r\n        episodeStill.appendChild(playButton);\r\n\r\n        const episodeTitle = document.createElement(\"p\");\r\n        episodeTitle.className = \"episode-title\";\r\n        episodeTitle.textContent = `Series ${episode.season}: ${episode.episode}. ${episodeInfo.name}`;\r\n\r\n        const episodeBio = document.createElement(\"p\");\r\n        episodeBio.textContent = episodeInfo.overview.split(\".\")[0];\r\n        \r\n        episodeContainer.appendChild(episodeStill);\r\n        episodeContainer.appendChild(episodeTitle);\r\n        episodeContainer.appendChild(episodeBio);\r\n        document.getElementById(\"episodes\").appendChild(episodeContainer);\r\n    });\r\n};\r\n\r\nconst play = (blob, info, stillPath) => {\r\n    // console.log(blob, info);\r\n    const castSession = cast.framework.CastContext.getInstance().getCurrentSession();\r\n    const metadata = new chrome.cast.media.TvShowMediaMetadata();\r\n    metadata.episode = info.episode_number;\r\n    metadata.images = [stillPath];\r\n    metadata.originalAirdate = info.air_date;\r\n    metadata.season = info.season_number;\r\n    metadata.title = info.name;\r\n    const mediaInfo = new chrome.cast.media.MediaInfo(\r\n        `https://azuretv.blob.core.windows.net/media/${blob.name}`,\r\n        blob.properties.contentType);\r\n    mediaInfo.metadata = metadata;\r\n    const request = new chrome.cast.media.LoadRequest(mediaInfo);\r\n    castSession.loadMedia(request)\r\n        .then(() => { \r\n            console.log('Load succeeded');\r\n        }).catch((err) => {\r\n            console.error('Error code', err);\r\n        });\r\n};"],"names":["$1c5b4086436acdca$var$msalInstance","$8zQx8","PublicClientApplication","auth","clientId","authority","$1c5b4086436acdca$var$myAccounts","getAllAccounts","$1c5b4086436acdca$var$silentRequest","scopes","account","forceRefresh","$1c5b4086436acdca$var$request","loginHint","username","acquireTokenSilent","then","tokenResponse","urlParams","URLSearchParams","window","location","search","has","showId","get","showInfo","$parcel$interopDefault","$gsP8W","document","getElementById","style","backgroundImage","backdrop_path","poster_path","textContent","name","tagline","overview","split","number_of_episodes","$1c5b4086436acdca$var$getEpisodes","accessToken","console","error","catch","err","InteractionRequiredAuthError","acquireTokenRedirect","async","tokenCredential","getToken","token","expiresOnTimestamp","Date","now","containerClient","$2wqqk","BlobServiceClient","getContainerClient","episodes","item","listBlobsByHierarchy","prefix","blobClient","getBlockBlobClient","meta","getProperties","metadata","push","season","parseInt","episode","blob","sort","a","b","series","forEach","ep","indexOf","$1c5b4086436acdca$var$addEpisodes","seasonInfo","episodeInfo","episodeContainer","createElement","episodeStill","className","stillPath","still_path","playButton","addEventListener","$1c5b4086436acdca$var$play","appendChild","episodeTitle","episodeBio","info","castSession","cast","framework","CastContext","getInstance","getCurrentSession","chrome","media","TvShowMediaMetadata","episode_number","images","originalAirdate","air_date","season_number","title","mediaInfo","MediaInfo","properties","contentType","request","LoadRequest","loadMedia","log"],"version":3,"file":"show.e1dcde31.js.map"}